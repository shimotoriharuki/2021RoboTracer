
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d08  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08017ec8  08017ec8  00027ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080189d4  080189d4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080189d4  080189d4  000289d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080189dc  080189dc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080189dc  080189dc  000289dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080189e4  080189e4  000289e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080189e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037dc8  200001e0  08018bc4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fa8  08018bc4  00037fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038140  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007aca  00000000  00000000  0006834c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002210  00000000  00000000  0006fe18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f40  00000000  00000000  00072028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003776a  00000000  00000000  00073f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025ccf  00000000  00000000  000ab6d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110adb  00000000  00000000  000d13a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a5dc  00000000  00000000  001e1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017eb0 	.word	0x08017eb0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017eb0 	.word	0x08017eb0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 febc 	bl	8008d54 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035a9c 	.word	0x20035a9c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 fea4 	bl	8008d54 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035a9c 	.word	0x20035a9c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fd2d 	bl	8008a80 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fa94 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fa8e 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fa88 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fa82 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fa7c 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 fa76 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 fa70 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 fa6a 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fa64 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fa5e 	bl	8007554 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fa52 	bl	8007554 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 fa4c 	bl	8007554 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fe19 	bl	8014d60 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_ZN7Encoder4initEv>:

void Encoder::init()
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011a4:	213c      	movs	r1, #60	; 0x3c
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <_ZN7Encoder4initEv+0x30>)
 80011a8:	f00b fc6c 	bl	800ca84 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <_ZN7Encoder4initEv+0x34>)
 80011b0:	f00b fc68 	bl	800ca84 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011b4:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_ZN7Encoder4initEv+0x38>)
 80011b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <_ZN7Encoder4initEv+0x3c>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20035cf0 	.word	0x20035cf0
 80011d0:	200359d4 	.word	0x200359d4
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e0:	b5b0      	push	{r4, r5, r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <_ZN7Encoder9updateCntEv+0x1b0>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f4:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001200:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001208:	4b64      	ldr	r3, [pc, #400]	; (800139c <_ZN7Encoder9updateCntEv+0x1bc>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8001394 <_ZN7Encoder9updateCntEv+0x1b4>
 8001218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800121c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001398 <_ZN7Encoder9updateCntEv+0x1b8>
 8001220:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001224:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	4a5d      	ldr	r2, [pc, #372]	; (80013a0 <_ZN7Encoder9updateCntEv+0x1c0>)
 800122c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff f9a1 	bl	8000578 <__aeabi_f2d>
 8001236:	a350      	add	r3, pc, #320	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff f9f4 	bl	8000628 <__aeabi_dmul>
 8001240:	4603      	mov	r3, r0
 8001242:	460c      	mov	r4, r1
 8001244:	4625      	mov	r5, r4
 8001246:	461c      	mov	r4, r3
 8001248:	4b56      	ldr	r3, [pc, #344]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f993 	bl	8000578 <__aeabi_f2d>
 8001252:	a34b      	add	r3, pc, #300	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9e6 	bl	8000628 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f82a 	bl	80002bc <__adddf3>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	4618      	mov	r0, r3
 800126e:	4621      	mov	r1, r4
 8001270:	f7ff fcd2 	bl	8000c18 <__aeabi_d2f>
 8001274:	4602      	mov	r2, r0
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f97b 	bl	8000578 <__aeabi_f2d>
 8001282:	a33d      	add	r3, pc, #244	; (adr r3, 8001378 <_ZN7Encoder9updateCntEv+0x198>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7ff f9ce 	bl	8000628 <__aeabi_dmul>
 800128c:	4603      	mov	r3, r0
 800128e:	460c      	mov	r4, r1
 8001290:	4625      	mov	r5, r4
 8001292:	461c      	mov	r4, r3
 8001294:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f96d 	bl	8000578 <__aeabi_f2d>
 800129e:	a338      	add	r3, pc, #224	; (adr r3, 8001380 <_ZN7Encoder9updateCntEv+0x1a0>)
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	f7ff f9c0 	bl	8000628 <__aeabi_dmul>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f804 	bl	80002bc <__adddf3>
 80012b4:	4603      	mov	r3, r0
 80012b6:	460c      	mov	r4, r1
 80012b8:	4618      	mov	r0, r3
 80012ba:	4621      	mov	r1, r4
 80012bc:	f7ff fcac 	bl	8000c18 <__aeabi_d2f>
 80012c0:	4602      	mov	r2, r0
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a38      	ldr	r2, [pc, #224]	; (80013ac <_ZN7Encoder9updateCntEv+0x1cc>)
 80012cc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a34      	ldr	r2, [pc, #208]	; (80013a4 <_ZN7Encoder9updateCntEv+0x1c4>)
 80012d4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <_ZN7Encoder9updateCntEv+0x1c8>)
 80012dc:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	edd3 7a00 	vldr	s15, [r3]
 80012ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8001300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	edd3 7a01 	vldr	s15, [r3, #4]
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	ee17 0a90 	vmov	r0, s15
 800131e:	f7ff f92b 	bl	8000578 <__aeabi_f2d>
 8001322:	a319      	add	r3, pc, #100	; (adr r3, 8001388 <_ZN7Encoder9updateCntEv+0x1a8>)
 8001324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001328:	f7ff f97e 	bl	8000628 <__aeabi_dmul>
 800132c:	4603      	mov	r3, r0
 800132e:	460c      	mov	r4, r1
 8001330:	4618      	mov	r0, r3
 8001332:	4621      	mov	r1, r4
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800133c:	f7ff fa9e 	bl	800087c <__aeabi_ddiv>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc66 	bl	8000c18 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	ed93 7a05 	vldr	s14, [r3, #20]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a02 	vldr	s15, [r3, #8]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]
	monitor_distance = total_distance_;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1d0>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	9999999a 	.word	0x9999999a
 800137c:	3fa99999 	.word	0x3fa99999
 8001380:	66666666 	.word	0x66666666
 8001384:	3fee6666 	.word	0x3fee6666
 8001388:	1ab1d998 	.word	0x1ab1d998
 800138c:	3f7830b5 	.word	0x3f7830b5
 8001390:	40010000 	.word	0x40010000
 8001394:	47000000 	.word	0x47000000
 8001398:	3f912547 	.word	0x3f912547
 800139c:	40010400 	.word	0x40010400
 80013a0:	20000200 	.word	0x20000200
 80013a4:	20000208 	.word	0x20000208
 80013a8:	2000020c 	.word	0x2000020c
 80013ac:	20000204 	.word	0x20000204
 80013b0:	200001fc 	.word	0x200001fc

080013b4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	return distance_;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	ee07 3a90 	vmov	s15, r3
}
 80013ec:	eeb0 0a67 	vmov.f32	s0, s15
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	ee07 3a90 	vmov	s15, r3
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <_ZN7Encoder8clearCntEv+0x3c>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_ZN7Encoder8clearCntEv+0x40>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	40010000 	.word	0x40010000
 8001474:	40010400 	.word	0x40010400

08001478 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	615a      	str	r2, [r3, #20]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80014b2:	6839      	ldr	r1, [r7, #0]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f977 	bl	80017a8 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80014ba:	f000 f98b 	bl	80017d4 <fopen_folder_and_file>

	return ret;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80014d2:	4804      	ldr	r0, [pc, #16]	; (80014e4 <user_fclose+0x1c>)
 80014d4:	f010 f830 	bl	8011538 <f_close>

	return ret;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200348e0 	.word	0x200348e0

080014e8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b087      	sub	sp, #28
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	80fb      	strh	r3, [r7, #6]
 80014f4:	4613      	mov	r3, r2
 80014f6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014fc:	2300      	movs	r3, #0
 80014fe:	81fb      	strh	r3, [r7, #14]
 8001500:	e030      	b.n	8001564 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	4413      	add	r3, r2
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f832 	bl	8000578 <__aeabi_f2d>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	e9cd 3400 	strd	r3, r4, [sp]
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <sd_write_float+0x94>)
 800151e:	2180      	movs	r1, #128	; 0x80
 8001520:	4817      	ldr	r0, [pc, #92]	; (8001580 <sd_write_float+0x98>)
 8001522:	f012 fc8d 	bl	8013e40 <sniprintf>

		if(state == ADD_WRITE){
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800152c:	4b15      	ldr	r3, [pc, #84]	; (8001584 <sd_write_float+0x9c>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	4619      	mov	r1, r3
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <sd_write_float+0x9c>)
 8001534:	f010 f874 	bl	8011620 <f_lseek>
 8001538:	e003      	b.n	8001542 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800153a:	2100      	movs	r1, #0
 800153c:	4811      	ldr	r0, [pc, #68]	; (8001584 <sd_write_float+0x9c>)
 800153e:	f010 f86f 	bl	8011620 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001542:	480f      	ldr	r0, [pc, #60]	; (8001580 <sd_write_float+0x98>)
 8001544:	f7fe fe5c 	bl	8000200 <strlen>
 8001548:	4602      	mov	r2, r0
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <sd_write_float+0xa0>)
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <sd_write_float+0x98>)
 800154e:	480d      	ldr	r0, [pc, #52]	; (8001584 <sd_write_float+0x9c>)
 8001550:	f00f fddd 	bl	801110e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001554:	f000 f958 	bl	8001808 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001558:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800155c:	b29b      	uxth	r3, r3
 800155e:	3301      	adds	r3, #1
 8001560:	b29b      	uxth	r3, r3
 8001562:	81fb      	strh	r3, [r7, #14]
 8001564:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbc8      	blt.n	8001502 <sd_write_float+0x1a>
	}
	return ret;
 8001570:	7b7b      	ldrb	r3, [r7, #13]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	bf00      	nop
 800157c:	08017ec8 	.word	0x08017ec8
 8001580:	20034850 	.word	0x20034850
 8001584:	200348e0 	.word	0x200348e0
 8001588:	200348d0 	.word	0x200348d0

0800158c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	4613      	mov	r3, r2
 800159a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f900 	bl	80017a8 <create_path>

	if(state == OVER_WRITE){
 80015a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d108      	bne.n	80015c2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80015b0:	4822      	ldr	r0, [pc, #136]	; (800163c <sd_write_array_float+0xb0>)
 80015b2:	f00f ffeb 	bl	801158c <f_chdir>
		f_unlink(filepath);	//	一回消す
 80015b6:	4822      	ldr	r0, [pc, #136]	; (8001640 <sd_write_array_float+0xb4>)
 80015b8:	f010 fa56 	bl	8011a68 <f_unlink>
		f_chdir("..");
 80015bc:	4821      	ldr	r0, [pc, #132]	; (8001644 <sd_write_array_float+0xb8>)
 80015be:	f00f ffe5 	bl	801158c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80015c2:	f000 f907 	bl	80017d4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015c6:	2300      	movs	r3, #0
 80015c8:	82fb      	strh	r3, [r7, #22]
 80015ca:	e028      	b.n	800161e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80015cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffcd 	bl	8000578 <__aeabi_f2d>
 80015de:	4603      	mov	r3, r0
 80015e0:	460c      	mov	r4, r1
 80015e2:	e9cd 3400 	strd	r3, r4, [sp]
 80015e6:	4a18      	ldr	r2, [pc, #96]	; (8001648 <sd_write_array_float+0xbc>)
 80015e8:	2180      	movs	r1, #128	; 0x80
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <sd_write_array_float+0xc0>)
 80015ec:	f012 fc28 	bl	8013e40 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <sd_write_array_float+0xc4>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4816      	ldr	r0, [pc, #88]	; (8001650 <sd_write_array_float+0xc4>)
 80015f8:	f010 f812 	bl	8011620 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <sd_write_array_float+0xc0>)
 80015fe:	f7fe fdff 	bl	8000200 <strlen>
 8001602:	4602      	mov	r2, r0
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <sd_write_array_float+0xc8>)
 8001606:	4911      	ldr	r1, [pc, #68]	; (800164c <sd_write_array_float+0xc0>)
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <sd_write_array_float+0xc4>)
 800160a:	f00f fd80 	bl	801110e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800160e:	f000 f8fb 	bl	8001808 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001612:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001616:	b29b      	uxth	r3, r3
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	82fb      	strh	r3, [r7, #22]
 800161e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbd0      	blt.n	80015cc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <sd_write_array_float+0xc4>)
 800162c:	f00f ff84 	bl	8011538 <f_close>

	return ret;
 8001630:	7d7b      	ldrb	r3, [r7, #21]
}
 8001632:	4618      	mov	r0, r3
 8001634:	371c      	adds	r7, #28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	20034750 	.word	0x20034750
 8001640:	20033610 	.word	0x20033610
 8001644:	08017ee4 	.word	0x08017ee4
 8001648:	08017ec8 	.word	0x08017ec8
 800164c:	20034850 	.word	0x20034850
 8001650:	200348e0 	.word	0x200348e0
 8001654:	200348d0 	.word	0x200348d0

08001658 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 f898 	bl	80017a8 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001678:	f000 f8ac 	bl	80017d4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800167c:	e019      	b.n	80016b2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800167e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	461a      	mov	r2, r3
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <sd_read_array_float+0x80>)
 800168c:	4813      	ldr	r0, [pc, #76]	; (80016dc <sd_read_array_float+0x84>)
 800168e:	f012 fc2b 	bl	8013ee8 <siscanf>
		i++;
 8001692:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001696:	b29b      	uxth	r3, r3
 8001698:	3301      	adds	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800169e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	db03      	blt.n	80016b2 <sd_read_array_float+0x5a>
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <sd_read_array_float+0x88>)
 80016b4:	2180      	movs	r1, #128	; 0x80
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <sd_read_array_float+0x84>)
 80016b8:	f010 fbb4 	bl	8011e24 <f_gets>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1dd      	bne.n	800167e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016c2:	f000 f8a1 	bl	8001808 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <sd_read_array_float+0x88>)
 80016c8:	f00f ff36 	bl	8011538 <f_close>

	return ret;
 80016cc:	7d7b      	ldrb	r3, [r7, #21]
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08017ed4 	.word	0x08017ed4
 80016dc:	20034850 	.word	0x20034850
 80016e0:	200348e0 	.word	0x200348e0

080016e4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	4613      	mov	r3, r2
 80016f2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 f852 	bl	80017a8 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001704:	f000 f866 	bl	80017d4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001708:	e019      	b.n	800173e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	4413      	add	r3, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4913      	ldr	r1, [pc, #76]	; (8001764 <sd_read_array_double+0x80>)
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <sd_read_array_double+0x84>)
 800171a:	f012 fbe5 	bl	8013ee8 <siscanf>
		i++;
 800171e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001722:	b29b      	uxth	r3, r3
 8001724:	3301      	adds	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800172a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800172e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001732:	429a      	cmp	r2, r3
 8001734:	db03      	blt.n	800173e <sd_read_array_double+0x5a>
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	3b01      	subs	r3, #1
 800173a:	b29b      	uxth	r3, r3
 800173c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <sd_read_array_double+0x88>)
 8001740:	2180      	movs	r1, #128	; 0x80
 8001742:	4809      	ldr	r0, [pc, #36]	; (8001768 <sd_read_array_double+0x84>)
 8001744:	f010 fb6e 	bl	8011e24 <f_gets>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1dd      	bne.n	800170a <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800174e:	f000 f85b 	bl	8001808 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001752:	4806      	ldr	r0, [pc, #24]	; (800176c <sd_read_array_double+0x88>)
 8001754:	f00f fef0 	bl	8011538 <f_close>

	return ret;
 8001758:	7d7b      	ldrb	r3, [r7, #21]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	08017ee0 	.word	0x08017ee0
 8001768:	20034850 	.word	0x20034850
 800176c:	200348e0 	.word	0x200348e0

08001770 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 800177a:	2201      	movs	r2, #1
 800177c:	4908      	ldr	r1, [pc, #32]	; (80017a0 <sd_mount+0x30>)
 800177e:	4809      	ldr	r0, [pc, #36]	; (80017a4 <sd_mount+0x34>)
 8001780:	f00f f952 	bl	8010a28 <f_mount>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d102      	bne.n	8001790 <sd_mount+0x20>
 800178a:	2301      	movs	r3, #1
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	e001      	b.n	8001794 <sd_mount+0x24>
	else ret = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001794:	79fb      	ldrb	r3, [r7, #7]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	08017ef0 	.word	0x08017ef0
 80017a4:	20033710 	.word	0x20033710

080017a8 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4805      	ldr	r0, [pc, #20]	; (80017cc <create_path+0x24>)
 80017b6:	f012 fc06 	bl	8013fc6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	4804      	ldr	r0, [pc, #16]	; (80017d0 <create_path+0x28>)
 80017be:	f012 fc02 	bl	8013fc6 <strcpy>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20034750 	.word	0x20034750
 80017d0:	20033610 	.word	0x20033610

080017d4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017d8:	4807      	ldr	r0, [pc, #28]	; (80017f8 <fopen_folder_and_file+0x24>)
 80017da:	f010 fa07 	bl	8011bec <f_mkdir>

	f_chdir(dirpath);
 80017de:	4806      	ldr	r0, [pc, #24]	; (80017f8 <fopen_folder_and_file+0x24>)
 80017e0:	f00f fed4 	bl	801158c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017e4:	2213      	movs	r2, #19
 80017e6:	4905      	ldr	r1, [pc, #20]	; (80017fc <fopen_folder_and_file+0x28>)
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <fopen_folder_and_file+0x2c>)
 80017ea:	f00f f963 	bl	8010ab4 <f_open>

	f_chdir("..");
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <fopen_folder_and_file+0x30>)
 80017f0:	f00f fecc 	bl	801158c <f_chdir>


}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20034750 	.word	0x20034750
 80017fc:	20033610 	.word	0x20033610
 8001800:	200348e0 	.word	0x200348e0
 8001804:	08017ee4 	.word	0x08017ee4

08001808 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800180e:	2300      	movs	r3, #0
 8001810:	607b      	str	r3, [r7, #4]
 8001812:	e007      	b.n	8001824 <bufclear+0x1c>
		buffer[i] = '\0';
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <bufclear+0x30>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3301      	adds	r3, #1
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	ddf4      	ble.n	8001814 <bufclear+0xc>
	}
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20034850 	.word	0x20034850

0800183c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800184c:	b2db      	uxtb	r3, r3
 800184e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <read_byte+0x54>)
 8001858:	f007 f912 	bl	8008a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800185c:	f107 010f 	add.w	r1, r7, #15
 8001860:	2364      	movs	r3, #100	; 0x64
 8001862:	2201      	movs	r2, #1
 8001864:	480b      	ldr	r0, [pc, #44]	; (8001894 <read_byte+0x58>)
 8001866:	f00a fad3 	bl	800be10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 800186a:	f107 010e 	add.w	r1, r7, #14
 800186e:	2364      	movs	r3, #100	; 0x64
 8001870:	2201      	movs	r2, #1
 8001872:	4808      	ldr	r0, [pc, #32]	; (8001894 <read_byte+0x58>)
 8001874:	f00a fc00 	bl	800c078 <HAL_SPI_Receive>
	CS_SET;
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <read_byte+0x54>)
 8001880:	f007 f8fe 	bl	8008a80 <HAL_GPIO_WritePin>

	return val;
 8001884:	7bbb      	ldrb	r3, [r7, #14]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40020400 	.word	0x40020400
 8001894:	2003597c 	.word	0x2003597c

08001898 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	460a      	mov	r2, r1
 80018a2:	71fb      	strb	r3, [r7, #7]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <write_byte+0x54>)
 80018ba:	f007 f8e1 	bl	8008a80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018be:	f107 010f 	add.w	r1, r7, #15
 80018c2:	2364      	movs	r3, #100	; 0x64
 80018c4:	2201      	movs	r2, #1
 80018c6:	480a      	ldr	r0, [pc, #40]	; (80018f0 <write_byte+0x58>)
 80018c8:	f00a faa2 	bl	800be10 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018cc:	1db9      	adds	r1, r7, #6
 80018ce:	2364      	movs	r3, #100	; 0x64
 80018d0:	2201      	movs	r2, #1
 80018d2:	4807      	ldr	r0, [pc, #28]	; (80018f0 <write_byte+0x58>)
 80018d4:	f00a fa9c 	bl	800be10 <HAL_SPI_Transmit>
	CS_SET;
 80018d8:	2201      	movs	r2, #1
 80018da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <write_byte+0x54>)
 80018e0:	f007 f8ce 	bl	8008a80 <HAL_GPIO_WritePin>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020400 	.word	0x40020400
 80018f0:	2003597c 	.word	0x2003597c

080018f4 <IMU_init>:

uint16_t IMU_init() {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff ff9c 	bl	800183c <read_byte>
 8001904:	4603      	mov	r3, r0
 8001906:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001908:	797b      	ldrb	r3, [r7, #5]
 800190a:	2be0      	cmp	r3, #224	; 0xe0
 800190c:	d119      	bne.n	8001942 <IMU_init+0x4e>
		ret = 1;
 800190e:	2301      	movs	r3, #1
 8001910:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001912:	2101      	movs	r1, #1
 8001914:	2006      	movs	r0, #6
 8001916:	f7ff ffbf 	bl	8001898 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 800191a:	2110      	movs	r1, #16
 800191c:	2003      	movs	r0, #3
 800191e:	f7ff ffbb 	bl	8001898 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001922:	2120      	movs	r1, #32
 8001924:	207f      	movs	r0, #127	; 0x7f
 8001926:	f7ff ffb7 	bl	8001898 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 800192a:	2106      	movs	r1, #6
 800192c:	2001      	movs	r0, #1
 800192e:	f7ff ffb3 	bl	8001898 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001932:	2106      	movs	r1, #6
 8001934:	2014      	movs	r0, #20
 8001936:	f7ff ffaf 	bl	8001898 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 800193a:	2100      	movs	r1, #0
 800193c:	207f      	movs	r0, #127	; 0x7f
 800193e:	f7ff ffab 	bl	8001898 <write_byte>
	}
	return ret;
 8001942:	88fb      	ldrh	r3, [r7, #6]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <read_gyro_data>:

void read_gyro_data() {
 800194c:	b598      	push	{r3, r4, r7, lr}
 800194e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001950:	2033      	movs	r0, #51	; 0x33
 8001952:	f7ff ff73 	bl	800183c <read_byte>
 8001956:	4603      	mov	r3, r0
 8001958:	021b      	lsls	r3, r3, #8
 800195a:	b21c      	sxth	r4, r3
 800195c:	2034      	movs	r0, #52	; 0x34
 800195e:	f7ff ff6d 	bl	800183c <read_byte>
 8001962:	4603      	mov	r3, r0
 8001964:	b21b      	sxth	r3, r3
 8001966:	4323      	orrs	r3, r4
 8001968:	b21a      	sxth	r2, r3
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <read_gyro_data+0x64>)
 800196c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800196e:	2035      	movs	r0, #53	; 0x35
 8001970:	f7ff ff64 	bl	800183c <read_byte>
 8001974:	4603      	mov	r3, r0
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b21c      	sxth	r4, r3
 800197a:	2036      	movs	r0, #54	; 0x36
 800197c:	f7ff ff5e 	bl	800183c <read_byte>
 8001980:	4603      	mov	r3, r0
 8001982:	b21b      	sxth	r3, r3
 8001984:	4323      	orrs	r3, r4
 8001986:	b21a      	sxth	r2, r3
 8001988:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <read_gyro_data+0x68>)
 800198a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 800198c:	2037      	movs	r0, #55	; 0x37
 800198e:	f7ff ff55 	bl	800183c <read_byte>
 8001992:	4603      	mov	r3, r0
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	b21c      	sxth	r4, r3
 8001998:	2038      	movs	r0, #56	; 0x38
 800199a:	f7ff ff4f 	bl	800183c <read_byte>
 800199e:	4603      	mov	r3, r0
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4323      	orrs	r3, r4
 80019a4:	b21a      	sxth	r2, r3
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <read_gyro_data+0x6c>)
 80019a8:	801a      	strh	r2, [r3, #0]
}
 80019aa:	bf00      	nop
 80019ac:	bd98      	pop	{r3, r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20035918 	.word	0x20035918
 80019b4:	20035916 	.word	0x20035916
 80019b8:	20035910 	.word	0x20035910

080019bc <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	805a      	strh	r2, [r3, #2]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	809a      	strh	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	80da      	strh	r2, [r3, #6]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	811a      	strh	r2, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	815a      	strh	r2, [r3, #10]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
{

}
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a08:	f7ff ff74 	bl	80018f4 <IMU_init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	4619      	mov	r1, r3
 8001a14:	480e      	ldr	r0, [pc, #56]	; (8001a50 <_ZN3IMU4initEv+0x50>)
 8001a16:	f012 f97d 	bl	8013d14 <iprintf>

	lcd_clear();
 8001a1a:	f7ff fb41 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff fb4d 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a26:	480b      	ldr	r0, [pc, #44]	; (8001a54 <_ZN3IMU4initEv+0x54>)
 8001a28:	f7ff fb74 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fb46 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a34:	89fb      	ldrh	r3, [r7, #14]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <_ZN3IMU4initEv+0x58>)
 8001a3a:	f7ff fb6b 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f005 fd87 	bl	8007554 <HAL_Delay>

}
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	08017ef4 	.word	0x08017ef4
 8001a54:	08017f04 	.word	0x08017f04
 8001a58:	08017f10 	.word	0x08017f10
 8001a5c:	00000000 	.word	0x00000000

08001a60 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a60:	b5b0      	push	{r4, r5, r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a68:	f7ff ff70 	bl	800194c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <_ZN3IMU12updateValuesEv+0xa0>)
 8001a6e:	881b      	ldrh	r3, [r3, #0]
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a76:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b21a      	sxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <_ZN3IMU12updateValuesEv+0xa8>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	b21a      	sxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd5f 	bl	8000554 <__aeabi_i2d>
 8001a96:	a316      	add	r3, pc, #88	; (adr r3, 8001af0 <_ZN3IMU12updateValuesEv+0x90>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdc4 	bl	8000628 <__aeabi_dmul>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	4625      	mov	r5, r4
 8001aa6:	461c      	mov	r4, r3
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <_ZN3IMU12updateValuesEv+0xac>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd50 	bl	8000554 <__aeabi_i2d>
 8001ab4:	a310      	add	r3, pc, #64	; (adr r3, 8001af8 <_ZN3IMU12updateValuesEv+0x98>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fdb5 	bl	8000628 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4620      	mov	r0, r4
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	f7fe fbf9 	bl	80002bc <__adddf3>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7ff f859 	bl	8000b88 <__aeabi_d2iz>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ae4:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <_ZN3IMU12updateValuesEv+0xac>)
 8001ae6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bdb0      	pop	{r4, r5, r7, pc}
 8001af0:	eb851eb8 	.word	0xeb851eb8
 8001af4:	3f9eb851 	.word	0x3f9eb851
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	20035918 	.word	0x20035918
 8001b04:	20035916 	.word	0x20035916
 8001b08:	20035910 	.word	0x20035910
 8001b0c:	20000210 	.word	0x20000210

08001b10 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7fe fd1f 	bl	8000578 <__aeabi_f2d>
 8001b3a:	a316      	add	r3, pc, #88	; (adr r3, 8001b94 <_ZN3IMU8getOmegaEv+0x84>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b4e:	a313      	add	r3, pc, #76	; (adr r3, 8001b9c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fd66 	bl	8000628 <__aeabi_dmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <_ZN3IMU8getOmegaEv+0x80>)
 8001b6a:	f7fe fe87 	bl	800087c <__aeabi_ddiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7ff f84f 	bl	8000c18 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	40668000 	.word	0x40668000
 8001b94:	66666666 	.word	0x66666666
 8001b98:	40306666 	.word	0x40306666
 8001b9c:	54411744 	.word	0x54411744
 8001ba0:	400921fb 	.word	0x400921fb

08001ba4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bac:	466b      	mov	r3, sp
 8001bae:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb4:	f005 fcce 	bl	8007554 <HAL_Delay>
	lcd_clear();
 8001bb8:	f7ff fa72 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff fa7e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001bc4:	4840      	ldr	r0, [pc, #256]	; (8001cc8 <_ZN3IMU11calibrationEv+0x124>)
 8001bc6:	f7ff faa5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001bca:	2101      	movs	r1, #1
 8001bcc:	2000      	movs	r0, #0
 8001bce:	f7ff fa77 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001bd2:	483e      	ldr	r0, [pc, #248]	; (8001ccc <_ZN3IMU11calibrationEv+0x128>)
 8001bd4:	f7ff fa9e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001bd8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bdc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001be2:	1e5d      	subs	r5, r3, #1
 8001be4:	61bd      	str	r5, [r7, #24]
 8001be6:	462b      	mov	r3, r5
 8001be8:	3301      	adds	r3, #1
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f04f 0400 	mov.w	r4, #0
 8001bf8:	0154      	lsls	r4, r2, #5
 8001bfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bfe:	014b      	lsls	r3, r1, #5
 8001c00:	462b      	mov	r3, r5
 8001c02:	3301      	adds	r3, #1
 8001c04:	4619      	mov	r1, r3
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	f04f 0300 	mov.w	r3, #0
 8001c0e:	f04f 0400 	mov.w	r4, #0
 8001c12:	0154      	lsls	r4, r2, #5
 8001c14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c18:	014b      	lsls	r3, r1, #5
 8001c1a:	462b      	mov	r3, r5
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	3303      	adds	r3, #3
 8001c22:	3307      	adds	r3, #7
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	ebad 0d03 	sub.w	sp, sp, r3
 8001c2c:	466b      	mov	r3, sp
 8001c2e:	3303      	adds	r3, #3
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c36:	2300      	movs	r3, #0
 8001c38:	83fb      	strh	r3, [r7, #30]
 8001c3a:	8bfa      	ldrh	r2, [r7, #30]
 8001c3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	da13      	bge.n	8001c6c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c4a:	8bfb      	ldrh	r3, [r7, #30]
 8001c4c:	ee07 2a90 	vmov	s15, r2
 8001c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f005 fc78 	bl	8007554 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c64:	8bfb      	ldrh	r3, [r7, #30]
 8001c66:	3301      	adds	r3, #1
 8001c68:	83fb      	strh	r3, [r7, #30]
 8001c6a:	e7e6      	b.n	8001c3a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d00e      	beq.n	8001ca2 <_ZN3IMU11calibrationEv+0xfe>
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	3304      	adds	r3, #4
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ca0:	e7ec      	b.n	8001c7c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001ca2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca6:	ee07 3a90 	vmov	s15, r3
 8001caa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cae:	edd7 6a08 	vldr	s13, [r7, #32]
 8001cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001cbc:	46b5      	mov	sp, r6
}
 8001cbe:	bf00      	nop
 8001cc0:	372c      	adds	r7, #44	; 0x2c
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08017f14 	.word	0x08017f14
 8001ccc:	08017f20 	.word	0x08017f20

08001cd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460a      	mov	r2, r1
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001ce0:	79bb      	ldrb	r3, [r7, #6]
 8001ce2:	b299      	uxth	r1, r3
 8001ce4:	1dfa      	adds	r2, r7, #7
 8001ce6:	2364      	movs	r3, #100	; 0x64
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2301      	movs	r3, #1
 8001cec:	480c      	ldr	r0, [pc, #48]	; (8001d20 <INA260_read+0x50>)
 8001cee:	f007 f831 	bl	8008d54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	b299      	uxth	r1, r3
 8001cf6:	f107 020c 	add.w	r2, r7, #12
 8001cfa:	2364      	movs	r3, #100	; 0x64
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <INA260_read+0x50>)
 8001d02:	f007 f925 	bl	8008f50 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d06:	7b3b      	ldrb	r3, [r7, #12]
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	7b7b      	ldrb	r3, [r7, #13]
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d16:	89fb      	ldrh	r3, [r7, #14]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20035b30 	.word	0x20035b30

08001d24 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b087      	sub	sp, #28
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	71fb      	strb	r3, [r7, #7]
 8001d36:	4603      	mov	r3, r0
 8001d38:	71bb      	strb	r3, [r7, #6]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	717b      	strb	r3, [r7, #5]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	79bb      	ldrb	r3, [r7, #6]
 8001d48:	737b      	strb	r3, [r7, #13]
 8001d4a:	797b      	ldrb	r3, [r7, #5]
 8001d4c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d4e:	793b      	ldrb	r3, [r7, #4]
 8001d50:	b299      	uxth	r1, r3
 8001d52:	f107 020c 	add.w	r2, r7, #12
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	4803      	ldr	r0, [pc, #12]	; (8001d6c <INA260_write+0x48>)
 8001d5e:	f006 fff9 	bl	8008d54 <HAL_I2C_Master_Transmit>
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd90      	pop	{r4, r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20035b30 	.word	0x20035b30

08001d70 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	71bb      	strb	r3, [r7, #6]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d82:	797b      	ldrb	r3, [r7, #5]
 8001d84:	79ba      	ldrb	r2, [r7, #6]
 8001d86:	79f9      	ldrb	r1, [r7, #7]
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f7ff ffcb 	bl	8001d24 <INA260_write>
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	461a      	mov	r2, r3
 8001da4:	21df      	movs	r1, #223	; 0xdf
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff ffe2 	bl	8001d70 <setConfig>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
{

}
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
	...

08001dcc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ddc:	482a      	ldr	r0, [pc, #168]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001dde:	f006 fe37 	bl	8008a50 <HAL_GPIO_ReadPin>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf0c      	ite	eq
 8001de8:	2301      	moveq	r3, #1
 8001dea:	2300      	movne	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <_ZN8JoyStick8getValueEv+0x2e>
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4823      	ldr	r0, [pc, #140]	; (8001e8c <_ZN8JoyStick8getValueEv+0xc0>)
 8001dfe:	f006 fe27 	bl	8008a50 <HAL_GPIO_ReadPin>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf0c      	ite	eq
 8001e08:	2301      	moveq	r3, #1
 8001e0a:	2300      	movne	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <_ZN8JoyStick8getValueEv+0x4e>
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	481a      	ldr	r0, [pc, #104]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e20:	f006 fe16 	bl	8008a50 <HAL_GPIO_ReadPin>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <_ZN8JoyStick8getValueEv+0x70>
 8001e34:	89fb      	ldrh	r3, [r7, #14]
 8001e36:	f043 0304 	orr.w	r3, r3, #4
 8001e3a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4814      	ldr	r0, [pc, #80]	; (8001e90 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e40:	f006 fe06 	bl	8008a50 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <_ZN8JoyStick8getValueEv+0x90>
 8001e54:	89fb      	ldrh	r3, [r7, #14]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e5c:	2180      	movs	r1, #128	; 0x80
 8001e5e:	480a      	ldr	r0, [pc, #40]	; (8001e88 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e60:	f006 fdf6 	bl	8008a50 <HAL_GPIO_ReadPin>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bf0c      	ite	eq
 8001e6a:	2301      	moveq	r3, #1
 8001e6c:	2300      	movne	r3, #0
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d003      	beq.n	8001e7c <_ZN8JoyStick8getValueEv+0xb0>
 8001e74:	89fb      	ldrh	r3, [r7, #14]
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40020c00 	.word	0x40020c00
 8001e90:	40020400 	.word	0x40020400

08001e94 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ea0:	78fb      	ldrb	r3, [r7, #3]
 8001ea2:	2b52      	cmp	r3, #82	; 0x52
 8001ea4:	d112      	bne.n	8001ecc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001eac:	4856      	ldr	r0, [pc, #344]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 fde7 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb8:	4853      	ldr	r0, [pc, #332]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 fde1 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	4850      	ldr	r0, [pc, #320]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ec6:	f006 fddb 	bl	8008a80 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001eca:	e098      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	2b47      	cmp	r3, #71	; 0x47
 8001ed0:	d112      	bne.n	8001ef8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed8:	484b      	ldr	r0, [pc, #300]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 fdd1 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ee4:	4848      	ldr	r0, [pc, #288]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 fdcb 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef0:	4845      	ldr	r0, [pc, #276]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ef2:	f006 fdc5 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001ef6:	e082      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b42      	cmp	r3, #66	; 0x42
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4840      	ldr	r0, [pc, #256]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fdbb 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	483d      	ldr	r0, [pc, #244]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fdb5 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	483a      	ldr	r0, [pc, #232]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fdaf 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001f22:	e06c      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b43      	cmp	r3, #67	; 0x43
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4835      	ldr	r0, [pc, #212]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fda5 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4832      	ldr	r0, [pc, #200]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fd9f 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	482f      	ldr	r0, [pc, #188]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fd99 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001f4e:	e056      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b4d      	cmp	r3, #77	; 0x4d
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	482a      	ldr	r0, [pc, #168]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fd8f 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4827      	ldr	r0, [pc, #156]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fd89 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4824      	ldr	r0, [pc, #144]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fd83 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001f7a:	e040      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b59      	cmp	r3, #89	; 0x59
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	481f      	ldr	r0, [pc, #124]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fd79 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	481c      	ldr	r0, [pc, #112]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fd73 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	4819      	ldr	r0, [pc, #100]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fd6d 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001fa6:	e02a      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b57      	cmp	r3, #87	; 0x57
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4814      	ldr	r0, [pc, #80]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fd63 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4811      	ldr	r0, [pc, #68]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fd5d 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	480e      	ldr	r0, [pc, #56]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fd57 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001fd2:	e014      	b.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b7e      	cmp	r3, #126	; 0x7e
 8001fd8:	d111      	bne.n	8001ffe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	4809      	ldr	r0, [pc, #36]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fd4d 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4806      	ldr	r0, [pc, #24]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fd47 	bl	8008a80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4803      	ldr	r0, [pc, #12]	; (8002008 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fd41 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40020000 	.word	0x40020000

0800200c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	70fb      	strb	r3, [r7, #3]
 8002018:	4613      	mov	r3, r2
 800201a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800201c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002024:	2201      	movs	r2, #1
 8002026:	f44f 7180 	mov.w	r1, #256	; 0x100
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800202c:	f006 fd28 	bl	8008a80 <HAL_GPIO_WritePin>
 8002030:	e009      	b.n	8002046 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002042:	f006 fd1d 	bl	8008a80 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002046:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d106      	bne.n	800205c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002054:	4808      	ldr	r0, [pc, #32]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 8002056:	f006 fd13 	bl	8008a80 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800205a:	e009      	b.n	8002070 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800205c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002064:	2200      	movs	r2, #0
 8002066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206a:	4803      	ldr	r0, [pc, #12]	; (8002078 <_ZN3LED2LREaa+0x6c>)
 800206c:	f006 fd08 	bl	8008a80 <HAL_GPIO_WritePin>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	40020000 	.word	0x40020000

0800207c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800207c:	b580      	push	{r7, lr}
 800207e:	b092      	sub	sp, #72	; 0x48
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fe92 	bl	8001db4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
 8002094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209a:	331c      	adds	r3, #28
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d008      	beq.n	80020b8 <_ZN10LineSensorC1Ev+0x3c>
 80020a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80020aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ac:	2200      	movs	r2, #0
 80020ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b2:	3302      	adds	r3, #2
 80020b4:	647b      	str	r3, [r7, #68]	; 0x44
 80020b6:	e7f2      	b.n	800209e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020be:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c2:	643b      	str	r3, [r7, #64]	; 0x40
 80020c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
 80020ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d009      	beq.n	80020e6 <_ZN10LineSensorC1Ev+0x6a>
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f04f 0200 	mov.w	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	3304      	adds	r3, #4
 80020e2:	643b      	str	r3, [r7, #64]	; 0x40
 80020e4:	e7f1      	b.n	80020ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3338      	adds	r3, #56	; 0x38
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d009      	beq.n	8002114 <_ZN10LineSensorC1Ev+0x98>
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	617b      	str	r3, [r7, #20]
		m = 0;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800210c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800210e:	3304      	adds	r3, #4
 8002110:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002112:	e7f1      	b.n	80020f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	3338      	adds	r3, #56	; 0x38
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d009      	beq.n	8002142 <_ZN10LineSensorC1Ev+0xc6>
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002138:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800213c:	3304      	adds	r3, #4
 800213e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002140:	e7f1      	b.n	8002126 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	3748      	adds	r7, #72	; 0x48
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	220e      	movs	r2, #14
 8002158:	4619      	mov	r1, r3
 800215a:	4803      	ldr	r0, [pc, #12]	; (8002168 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800215c:	f005 fa60 	bl	8007620 <HAL_ADC_Start_DMA>
}
 8002160:	bf00      	nop
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20035a54 	.word	0x20035a54

0800216c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b0d      	cmp	r3, #13
 800217c:	dc2f      	bgt.n	80021de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	3392      	adds	r3, #146	; 0x92
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	ed93 7a00 	vldr	s14, [r3]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	33a0      	adds	r3, #160	; 0xa0
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3304      	adds	r3, #4
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4619      	mov	r1, r3
 80021b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	1a5b      	subs	r3, r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	68f9      	ldr	r1, [r7, #12]
 80021c8:	440b      	add	r3, r1
 80021ca:	3306      	adds	r3, #6
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3301      	adds	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e7cc      	b.n	8002178 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2da      	uxtb	r2, r3
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b09      	cmp	r3, #9
 80021f0:	d902      	bls.n	80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]


}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	2000021c 	.word	0x2000021c

08002208 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002208:	b5b0      	push	{r4, r5, r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002210:	2300      	movs	r3, #0
 8002212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800221a:	2b0d      	cmp	r3, #13
 800221c:	f200 80b8 	bhi.w	8002390 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002226:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800222a:	2b09      	cmp	r3, #9
 800222c:	d81c      	bhi.n	8002268 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800222e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002232:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002236:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	1a9b      	subs	r3, r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4423      	add	r3, r4
 8002246:	3306      	adds	r3, #6
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4403      	add	r3, r0
 800224c:	3304      	adds	r3, #4
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	008b      	lsls	r3, r1, #2
 8002252:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002256:	440b      	add	r3, r1
 8002258:	3b30      	subs	r3, #48	; 0x30
 800225a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800225c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002260:	3301      	adds	r3, #1
 8002262:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002266:	e7de      	b.n	8002226 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800226e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002272:	2b09      	cmp	r3, #9
 8002274:	d84d      	bhi.n	8002312 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002276:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800227a:	3301      	adds	r3, #1
 800227c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002280:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002284:	2b09      	cmp	r3, #9
 8002286:	d83e      	bhi.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002288:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002292:	4413      	add	r3, r2
 8002294:	3b30      	subs	r3, #48	; 0x30
 8002296:	ed93 7a00 	vldr	s14, [r3]
 800229a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022a4:	4413      	add	r3, r2
 80022a6:	3b30      	subs	r3, #48	; 0x30
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d521      	bpl.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022c0:	4413      	add	r3, r2
 80022c2:	3b30      	subs	r3, #48	; 0x30
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022d0:	0092      	lsls	r2, r2, #2
 80022d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022d6:	440a      	add	r2, r1
 80022d8:	3a30      	subs	r2, #48	; 0x30
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022e2:	440b      	add	r3, r1
 80022e4:	3b30      	subs	r3, #48	; 0x30
 80022e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022f2:	4413      	add	r3, r2
 80022f4:	3b30      	subs	r3, #48	; 0x30
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	e7bc      	b.n	8002280 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002306:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800230a:	3301      	adds	r3, #1
 800230c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002310:	e7ad      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f92f 	bl	8000578 <__aeabi_f2d>
 800231a:	a32a      	add	r3, pc, #168	; (adr r3, 80023c4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fe f982 	bl	8000628 <__aeabi_dmul>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4625      	mov	r5, r4
 800232a:	461c      	mov	r4, r3
 800232c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002330:	4a21      	ldr	r2, [pc, #132]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f91d 	bl	8000578 <__aeabi_f2d>
 800233e:	a31c      	add	r3, pc, #112	; (adr r3, 80023b0 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe f970 	bl	8000628 <__aeabi_dmul>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4603      	mov	r3, r0
 8002356:	460c      	mov	r4, r1
 8002358:	461a      	mov	r2, r3
 800235a:	4623      	mov	r3, r4
 800235c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002360:	4610      	mov	r0, r2
 8002362:	4619      	mov	r1, r3
 8002364:	f7fe fc58 	bl	8000c18 <__aeabi_d2f>
 8002368:	4601      	mov	r1, r0
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002376:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800237a:	69fa      	ldr	r2, [r7, #28]
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	3301      	adds	r3, #1
 800238a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800238e:	e742      	b.n	8002216 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002398:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023a0:	4a07      	ldr	r2, [pc, #28]	; (80023c0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023a2:	6013      	str	r3, [r2, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3738      	adds	r7, #56	; 0x38
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bdb0      	pop	{r4, r5, r7, pc}
 80023ac:	f3af 8000 	nop.w
 80023b0:	66666666 	.word	0x66666666
 80023b4:	3fee6666 	.word	0x3fee6666
 80023b8:	20000220 	.word	0x20000220
 80023bc:	20000214 	.word	0x20000214
 80023c0:	20000218 	.word	0x20000218
 80023c4:	9999999a 	.word	0x9999999a
 80023c8:	3fa99999 	.word	0x3fa99999

080023cc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b0a9      	sub	sp, #164	; 0xa4
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	f005 f8bd 	bl	8007554 <HAL_Delay>

	lcd_clear();
 80023da:	f7fe fe61 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80023de:	2100      	movs	r1, #0
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fe6d 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80023e6:	48b1      	ldr	r0, [pc, #708]	; (80026ac <_ZN10LineSensor11calibrationEv+0x2e0>)
 80023e8:	f7fe fe94 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80023ec:	2101      	movs	r1, #1
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe fe66 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80023f4:	48ae      	ldr	r0, [pc, #696]	; (80026b0 <_ZN10LineSensor11calibrationEv+0x2e4>)
 80023f6:	f7fe fe8d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002400:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002404:	2b0d      	cmp	r3, #13
 8002406:	d823      	bhi.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002408:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800240c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	32b0      	adds	r2, #176	; 0xb0
 8002414:	0092      	lsls	r2, r2, #2
 8002416:	440a      	add	r2, r1
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002420:	440b      	add	r3, r1
 8002422:	3b60      	subs	r3, #96	; 0x60
 8002424:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002426:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 800242a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	32b0      	adds	r2, #176	; 0xb0
 8002432:	0092      	lsls	r2, r2, #2
 8002434:	440a      	add	r2, r1
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800243e:	440b      	add	r3, r1
 8002440:	3b98      	subs	r3, #152	; 0x98
 8002442:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002448:	3301      	adds	r3, #1
 800244a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800244e:	e7d7      	b.n	8002400 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fcb8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800245c:	4603      	mov	r3, r0
 800245e:	2b02      	cmp	r3, #2
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d079      	beq.n	8002560 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800246c:	2300      	movs	r3, #0
 800246e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002472:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002476:	2b0d      	cmp	r3, #13
 8002478:	d850      	bhi.n	800251c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002484:	4413      	add	r3, r2
 8002486:	3b60      	subs	r3, #96	; 0x60
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	33b0      	adds	r3, #176	; 0xb0
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a4:	d50f      	bpl.n	80024c6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024aa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	32b0      	adds	r2, #176	; 0xb0
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	440a      	add	r2, r1
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024be:	440b      	add	r3, r1
 80024c0:	3b60      	subs	r3, #96	; 0x60
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	e024      	b.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024d0:	4413      	add	r3, r2
 80024d2:	3b98      	subs	r3, #152	; 0x98
 80024d4:	ed93 7a00 	vldr	s14, [r3]
 80024d8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	33b0      	adds	r3, #176	; 0xb0
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	dd0e      	ble.n	8002510 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80024f2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024f6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	32b0      	adds	r2, #176	; 0xb0
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	440a      	add	r2, r1
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800250a:	440b      	add	r3, r1
 800250c:	3b98      	subs	r3, #152	; 0x98
 800250e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002510:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002514:	3301      	adds	r3, #1
 8002516:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800251a:	e7aa      	b.n	8002472 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002522:	4618      	mov	r0, r3
 8002524:	f001 faba 	bl	8003a9c <_ZN12RotarySwitch8getValueEv>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf0c      	ite	eq
 800252e:	2301      	moveq	r3, #1
 8002530:	2300      	movne	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d009      	beq.n	800254c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800253e:	2201      	movs	r2, #1
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fd61 	bl	800200c <_ZN3LED2LREaa>
 800254a:	e781      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002552:	2200      	movs	r2, #0
 8002554:	f04f 31ff 	mov.w	r1, #4294967295
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fd57 	bl	800200c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800255e:	e777      	b.n	8002450 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 8002560:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002564:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002570:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002574:	3338      	adds	r3, #56	; 0x38
 8002576:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800257a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800257e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002582:	429a      	cmp	r2, r3
 8002584:	d016      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x1e8>
 8002586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800258a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800258e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7fd ffef 	bl	8000578 <__aeabi_f2d>
 800259a:	4603      	mov	r3, r0
 800259c:	460c      	mov	r4, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	4623      	mov	r3, r4
 80025a2:	4844      	ldr	r0, [pc, #272]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025a4:	f011 fbb6 	bl	8013d14 <iprintf>
	for(const auto &m : max_values){
 80025a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025ac:	3304      	adds	r3, #4
 80025ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025b2:	e7e2      	b.n	800257a <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 80025b4:	200a      	movs	r0, #10
 80025b6:	f011 fbc5 	bl	8013d44 <putchar>
	for(const auto &m : min_values){
 80025ba:	f107 0308 	add.w	r3, r7, #8
 80025be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025ce:	3338      	adds	r3, #56	; 0x38
 80025d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025d8:	429a      	cmp	r2, r3
 80025da:	d014      	beq.n	8002606 <_ZN10LineSensor11calibrationEv+0x23a>
 80025dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025e0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ffc6 	bl	8000578 <__aeabi_f2d>
 80025ec:	4603      	mov	r3, r0
 80025ee:	460c      	mov	r4, r1
 80025f0:	461a      	mov	r2, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	482f      	ldr	r0, [pc, #188]	; (80026b4 <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025f6:	f011 fb8d 	bl	8013d14 <iprintf>
	for(const auto &m : min_values){
 80025fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025fe:	3304      	adds	r3, #4
 8002600:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002604:	e7e5      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 8002606:	200a      	movs	r0, #10
 8002608:	f011 fb9c 	bl	8013d44 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800260c:	2300      	movs	r3, #0
 800260e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	2b0d      	cmp	r3, #13
 8002618:	d826      	bhi.n	8002668 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800261a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002624:	4413      	add	r3, r2
 8002626:	3b60      	subs	r3, #96	; 0x60
 8002628:	ed93 7a00 	vldr	s14, [r3]
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002636:	4413      	add	r3, r2
 8002638:	3b98      	subs	r3, #152	; 0x98
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002646:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80026b8 <_ZN10LineSensor11calibrationEv+0x2ec>
 800264a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	3392      	adds	r3, #146	; 0x92
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	3304      	adds	r3, #4
 8002658:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800265c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002660:	3301      	adds	r3, #1
 8002662:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002666:	e7d4      	b.n	8002612 <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002668:	2300      	movs	r3, #0
 800266a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800266e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002672:	2b0d      	cmp	r3, #13
 8002674:	d815      	bhi.n	80026a2 <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 8002676:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800267a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002684:	440a      	add	r2, r1
 8002686:	3a98      	subs	r2, #152	; 0x98
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	33a0      	adds	r3, #160	; 0xa0
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	3304      	adds	r3, #4
 8002694:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002696:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800269a:	3301      	adds	r3, #1
 800269c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026a0:	e7e5      	b.n	800266e <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026a2:	bf00      	nop
 80026a4:	37a4      	adds	r7, #164	; 0xa4
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd90      	pop	{r4, r7, pc}
 80026aa:	bf00      	nop
 80026ac:	08017f2c 	.word	0x08017f2c
 80026b0:	08017f38 	.word	0x08017f38
 80026b4:	08017f44 	.word	0x08017f44
 80026b8:	447a0000 	.word	0x447a0000

080026bc <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80026bc:	b480      	push	{r7}
 80026be:	b089      	sub	sp, #36	; 0x24
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	3338      	adds	r3, #56	; 0x38
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d012      	beq.n	8002708 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002728 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f8:	db02      	blt.n	8002700 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
 80026fc:	3301      	adds	r3, #1
 80026fe:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	3304      	adds	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
 8002706:	e7e8      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002708:	7ffb      	ldrb	r3, [r7, #31]
 800270a:	2b0d      	cmp	r3, #13
 800270c:	d902      	bls.n	8002714 <_ZN10LineSensor13emergencyStopEv+0x58>
 800270e:	2301      	movs	r3, #1
 8002710:	75fb      	strb	r3, [r7, #23]
 8002712:	e001      	b.n	8002718 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002718:	7dfb      	ldrb	r3, [r7, #23]

}
 800271a:	4618      	mov	r0, r3
 800271c:	3724      	adds	r7, #36	; 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	44160000 	.word	0x44160000

0800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	629a      	str	r2, [r3, #40]	; 0x28
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	62da      	str	r2, [r3, #44]	; 0x2c
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	; 0x30
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	63da      	str	r2, [r3, #60]	; 0x3c
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	675a      	str	r2, [r3, #116]	; 0x74
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
{
	motor_ = motor;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a3a      	ldr	r2, [r7, #32]
 80027a8:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ae:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80027b4:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027bc:	2300      	movs	r3, #0
 80027be:	82fb      	strh	r3, [r7, #22]
 80027c0:	8afb      	ldrh	r3, [r7, #22]
 80027c2:	f241 726f 	movw	r2, #5999	; 0x176f
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d80c      	bhi.n	80027e4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xb8>
		velocityTable[i] = 0;
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	331e      	adds	r3, #30
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	4413      	add	r3, r2
 80027d4:	3304      	adds	r3, #4
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80027dc:	8afb      	ldrh	r3, [r7, #22]
 80027de:	3301      	adds	r3, #1
 80027e0:	82fb      	strh	r3, [r7, #22]
 80027e2:	e7ed      	b.n	80027c0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0x94>
	}
}
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4618      	mov	r0, r3
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	0000      	movs	r0, r0
 80027f4:	0000      	movs	r0, r0
	...

080027f8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80027f8:	b5b0      	push	{r4, r5, r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800281c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002828:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002834:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002840:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800284c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002860:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800286c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002878:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002884:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002890:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800289c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028a0:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028a4:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <_ZN9LineTrace9calcErrorEv+0x130>)
 80028ac:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe61 	bl	8000578 <__aeabi_f2d>
 80028b6:	a318      	add	r3, pc, #96	; (adr r3, 8002918 <_ZN9LineTrace9calcErrorEv+0x120>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fd feb4 	bl	8000628 <__aeabi_dmul>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4625      	mov	r5, r4
 80028c6:	461c      	mov	r4, r3
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <_ZN9LineTrace9calcErrorEv+0x134>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fd fe53 	bl	8000578 <__aeabi_f2d>
 80028d2:	a313      	add	r3, pc, #76	; (adr r3, 8002920 <_ZN9LineTrace9calcErrorEv+0x128>)
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f7fd fea6 	bl	8000628 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4620      	mov	r0, r4
 80028e2:	4629      	mov	r1, r5
 80028e4:	f7fd fcea 	bl	80002bc <__adddf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	460c      	mov	r4, r1
 80028ec:	4618      	mov	r0, r3
 80028ee:	4621      	mov	r1, r4
 80028f0:	f7fe f992 	bl	8000c18 <__aeabi_d2f>
 80028f4:	4603      	mov	r3, r0
 80028f6:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <_ZN9LineTrace9calcErrorEv+0x138>)
 80028fc:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4a0a      	ldr	r2, [pc, #40]	; (800292c <_ZN9LineTrace9calcErrorEv+0x134>)
 8002902:	6013      	str	r3, [r2, #0]

	return diff;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	ee07 3a90 	vmov	s15, r3

}
 800290a:	eeb0 0a67 	vmov.f32	s0, s15
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bdb0      	pop	{r4, r5, r7, pc}
 8002914:	f3af 8000 	nop.w
 8002918:	47ae147b 	.word	0x47ae147b
 800291c:	3fb47ae1 	.word	0x3fb47ae1
 8002920:	d70a3d71 	.word	0xd70a3d71
 8002924:	3fed70a3 	.word	0x3fed70a3
 8002928:	20000258 	.word	0x20000258
 800292c:	20000264 	.word	0x20000264
 8002930:	2000025c 	.word	0x2000025c
 8002934:	00000000 	.word	0x00000000

08002938 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002938:	b5b0      	push	{r4, r5, r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff59 	bl	80027f8 <_ZN9LineTrace9calcErrorEv>
 8002946:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002954:	4b3c      	ldr	r3, [pc, #240]	; (8002a48 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	edd3 7a08 	vldr	s15, [r3, #32]
 800296a:	ed97 7a05 	vldr	s14, [r7, #20]
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <_ZN9LineTrace8pidTraceEv+0x114>)
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	edd7 6a05 	vldr	s13, [r7, #20]
 8002986:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800298a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298e:	ee17 0a90 	vmov	r0, s15
 8002992:	f7fd fdf1 	bl	8000578 <__aeabi_f2d>
 8002996:	a32a      	add	r3, pc, #168	; (adr r3, 8002a40 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299c:	f7fd ff6e 	bl	800087c <__aeabi_ddiv>
 80029a0:	4603      	mov	r3, r0
 80029a2:	460c      	mov	r4, r1
 80029a4:	4618      	mov	r0, r3
 80029a6:	4621      	mov	r1, r4
 80029a8:	f7fe f936 	bl	8000c18 <__aeabi_d2f>
 80029ac:	4603      	mov	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd fddf 	bl	8000578 <__aeabi_f2d>
 80029ba:	4604      	mov	r4, r0
 80029bc:	460d      	mov	r5, r1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80029c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029cc:	ee17 0a90 	vmov	r0, s15
 80029d0:	f7fd fdd2 	bl	8000578 <__aeabi_f2d>
 80029d4:	a31a      	add	r3, pc, #104	; (adr r3, 8002a40 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	f7fd fe25 	bl	8000628 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7fd fc69 	bl	80002bc <__adddf3>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	4618      	mov	r0, r3
 80029f0:	4621      	mov	r1, r4
 80029f2:	f7fe f911 	bl	8000c18 <__aeabi_d2f>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029fa:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 80029fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a20:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f001 fb7d 	bl	8004128 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a2e:	4a07      	ldr	r2, [pc, #28]	; (8002a4c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	6013      	str	r3, [r2, #0]

}
 8002a34:	bf00      	nop
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	f3af 8000 	nop.w
 8002a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a44:	3f50624d 	.word	0x3f50624d
 8002a48:	2000026c 	.word	0x2000026c
 8002a4c:	20000268 	.word	0x20000268

08002a50 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe fd0b 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fe68 	bl	800373c <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 fc4a 	bl	8003322 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b087      	sub	sp, #28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002ab8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002ac4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ad0:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af4:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002af8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002afc:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b00:	2300      	movs	r3, #0
 8002b02:	75fb      	strb	r3, [r7, #23]

	if(sensor_edge_val_l < 500 && sensor_edge_val_r < 500){
 8002b04:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b08:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002b58 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b14:	d50f      	bpl.n	8002b36 <_ZN9LineTrace11isCrossLineEv+0x96>
 8002b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b1a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002b58 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b26:	d506      	bpl.n	8002b36 <_ZN9LineTrace11isCrossLineEv+0x96>
		cnt++;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b2a:	881b      	ldrh	r3, [r3, #0]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b32:	801a      	strh	r2, [r3, #0]
 8002b34:	e002      	b.n	8002b3c <_ZN9LineTrace11isCrossLineEv+0x9c>
	}
	else{
		cnt = 0;
 8002b36:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 5){
 8002b3c:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d901      	bls.n	8002b48 <_ZN9LineTrace11isCrossLineEv+0xa8>
		flag = true;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	371c      	adds	r7, #28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	43fa0000 	.word	0x43fa0000
 8002b5c:	20000270 	.word	0x20000270

08002b60 <_ZN9LineTrace4initEv>:

}

// -------public---------- //
void LineTrace::init()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <_ZN9LineTrace4initEv+0x58>)
 8002b70:	4812      	ldr	r0, [pc, #72]	; (8002bbc <_ZN9LineTrace4initEv+0x5c>)
 8002b72:	f7fe fd71 	bl	8001658 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002b76:	f107 0310 	add.w	r3, r7, #16
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4910      	ldr	r1, [pc, #64]	; (8002bc0 <_ZN9LineTrace4initEv+0x60>)
 8002b7e:	480f      	ldr	r0, [pc, #60]	; (8002bbc <_ZN9LineTrace4initEv+0x5c>)
 8002b80:	f7fe fd6a 	bl	8001658 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	2201      	movs	r2, #1
 8002b8a:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <_ZN9LineTrace4initEv+0x64>)
 8002b8c:	480b      	ldr	r0, [pc, #44]	; (8002bbc <_ZN9LineTrace4initEv+0x5c>)
 8002b8e:	f7fe fd63 	bl	8001658 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b96:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b9a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002b9e:	eeb0 1a66 	vmov.f32	s2, s13
 8002ba2:	eef0 0a47 	vmov.f32	s1, s14
 8002ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f80c 	bl	8002bc8 <_ZN9LineTrace7setGainEfff>

}
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	08017f84 	.word	0x08017f84
 8002bbc:	08017f8c 	.word	0x08017f8c
 8002bc0:	08017f94 	.word	0x08017f94
 8002bc4:	08017f9c 	.word	0x08017f9c

08002bc8 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8002bd8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bee:	bf00      	nop
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	return kp_;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	ee07 3a90 	vmov	s15, r3
}
 8002c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	return ki_;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	ee07 3a90 	vmov	s15, r3
}
 8002c28:	eeb0 0a67 	vmov.f32	s0, s15
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
	return kd_;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	ee07 3a90 	vmov	s15, r3
}
 8002c46:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	683a      	ldr	r2, [r7, #0]
 8002c64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b083      	sub	sp, #12
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d02a      	beq.n	8002cf8 <_ZN9LineTrace4flipEv+0x68>
		pidTrace();
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fe48 	bl	8002938 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		if(isCrossLine() == true){ //detect cross line
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff fef9 	bl	8002aa0 <_ZN9LineTrace11isCrossLineEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d008      	beq.n	8002cc6 <_ZN9LineTrace4flipEv+0x36>
			led_.LR(1, -1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	330c      	adds	r3, #12
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	2101      	movs	r1, #1
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff f9a4 	bl	800200c <_ZN3LED2LREaa>
 8002cc4:	e007      	b.n	8002cd6 <_ZN9LineTrace4flipEv+0x46>
		}
		else{
			led_.LR(0, -1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f99b 	bl	800200c <_ZN3LED2LREaa>
		}

		if(line_sensor_->emergencyStop() == true){
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fcee 	bl	80026bc <_ZN10LineSensor13emergencyStopEv>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d008      	beq.n	8002cf8 <_ZN9LineTrace4flipEv+0x68>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002d00 <_ZN9LineTrace4flipEv+0x70>
 8002cee:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002d00 <_ZN9LineTrace4flipEv+0x70>
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 fa18 	bl	8004128 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		else{
			//led_.LR(0, -1);

		}
	}
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	00000000 	.word	0x00000000

08002d04 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 fa5a 	bl	80041da <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 ffa8 	bl	8003c80 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 fa57 	bl	8004200 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	330c      	adds	r3, #12
 8002d56:	2201      	movs	r2, #1
 8002d58:	f04f 31ff 	mov.w	r1, #4294967295
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff f955 	bl	800200c <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69d8      	ldr	r0, [r3, #28]
 8002d66:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <_ZN9LineTrace4stopEv+0x5c>)
 8002d68:	4a0b      	ldr	r2, [pc, #44]	; (8002d98 <_ZN9LineTrace4stopEv+0x60>)
 8002d6a:	490c      	ldr	r1, [pc, #48]	; (8002d9c <_ZN9LineTrace4stopEv+0x64>)
 8002d6c:	f000 fa29 	bl	80031c2 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330c      	adds	r3, #12
 8002d74:	2200      	movs	r2, #0
 8002d76:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f946 	bl	800200c <_ZN3LED2LREaa>
	logger_->resetLogs();
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f000 fa3f 	bl	8003208 <_ZN6Logger9resetLogsEv>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	08017fa4 	.word	0x08017fa4
 8002d98:	08017fb0 	.word	0x08017fb0
 8002d9c:	08017fc0 	.word	0x08017fc0

08002da0 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8002dac:	2300      	movs	r3, #0
 8002dae:	737b      	strb	r3, [r7, #13]
	start();
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ffa7 	bl	8002d04 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d13b      	bne.n	8002e34 <_ZN9LineTrace7runningEv+0x94>
		switch(stage){
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <_ZN9LineTrace7runningEv+0x28>
 8002dc2:	2b0a      	cmp	r3, #10
 8002dc4:	d013      	beq.n	8002dee <_ZN9LineTrace7runningEv+0x4e>
 8002dc6:	e034      	b.n	8002e32 <_ZN9LineTrace7runningEv+0x92>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 ff4b 	bl	8003c68 <_ZN10SideSensor16getWhiteLineCntREv>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	bf0c      	ite	eq
 8002dd8:	2301      	moveq	r3, #1
 8002dda:	2300      	movne	r3, #0
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d024      	beq.n	8002e2c <_ZN9LineTrace7runningEv+0x8c>
				loggerStart();
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fe34 	bl	8002a50 <_ZN9LineTrace11loggerStartEv>
				stage = 10;
 8002de8:	230a      	movs	r3, #10
 8002dea:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8002dec:	e01e      	b.n	8002e2c <_ZN9LineTrace7runningEv+0x8c>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 ff38 	bl	8003c68 <_ZN10SideSensor16getWhiteLineCntREv>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	bf0c      	ite	eq
 8002dfe:	2301      	moveq	r3, #1
 8002e00:	2300      	movne	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d013      	beq.n	8002e30 <_ZN9LineTrace7runningEv+0x90>
				loggerStop();
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff fe37 	bl	8002a7c <_ZN9LineTrace10loggerStopEv>
				HAL_Delay(100); //Run through after the goal
 8002e0e:	2064      	movs	r0, #100	; 0x64
 8002e10:	f004 fba0 	bl	8007554 <HAL_Delay>

				setTargetVelocity(0);
 8002e14:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002e44 <_ZN9LineTrace7runningEv+0xa4>
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff2a 	bl	8002c72 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8002e1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e22:	f004 fb97 	bl	8007554 <HAL_Delay>

				goal_flag = true;
 8002e26:	2301      	movs	r3, #1
 8002e28:	737b      	strb	r3, [r7, #13]

			}

			break;
 8002e2a:	e001      	b.n	8002e30 <_ZN9LineTrace7runningEv+0x90>
			break;
 8002e2c:	bf00      	nop
 8002e2e:	e7c2      	b.n	8002db6 <_ZN9LineTrace7runningEv+0x16>
			break;
 8002e30:	bf00      	nop
	while(goal_flag == false){
 8002e32:	e7c0      	b.n	8002db6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f7ff ff7f 	bl	8002d38 <_ZN9LineTrace4stopEv>

}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	00000000 	.word	0x00000000

08002e48 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	ed2d 8b02 	vpush	{d8}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00f      	beq.n	8002e7e <_ZN9LineTrace9storeLogsEv+0x36>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fac9 	bl	80013fa <_ZN7Encoder16getTotalDistanceEv>
 8002e68:	eeb0 7a40 	vmov.f32	s14, s0
 8002e6c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e78:	db01      	blt.n	8002e7e <_ZN9LineTrace9storeLogsEv+0x36>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <_ZN9LineTrace9storeLogsEv+0x38>
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d02b      	beq.n	8002edc <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69dc      	ldr	r4, [r3, #28]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fab4 	bl	80013fa <_ZN7Encoder16getTotalDistanceEv>
 8002e92:	eeb0 8a40 	vmov.f32	s16, s0
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fc3d 	bl	800371a <_ZN8Odometry8getThetaEv>
 8002ea0:	ec53 2b10 	vmov	r2, r3, d0
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	f7fd feb6 	bl	8000c18 <__aeabi_d2f>
 8002eac:	4603      	mov	r3, r0
 8002eae:	ee00 3a90 	vmov	s1, r3
 8002eb2:	eeb0 0a48 	vmov.f32	s0, s16
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f000 f911 	bl	80030de <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fe fad9 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fc36 	bl	800373c <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002eda:	801a      	strh	r2, [r3, #0]
	}
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	ecbd 8b02 	vpop	{d8}
 8002ee6:	bd90      	pop	{r4, r7, pc}
 8002ee8:	20000260 	.word	0x20000260

08002eec <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002efa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002efe:	2200      	movs	r2, #0
 8002f00:	701a      	strb	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002f08:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	801a      	strh	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002f16:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002f24:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8002f28:	2200      	movs	r2, #0
 8002f2a:	801a      	strh	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002f48:	f7fe fc12 	bl	8001770 <sd_mount>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	bf0c      	ite	eq
 8002f52:	2301      	moveq	r3, #1
 8002f54:	2300      	movne	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d019      	beq.n	8002f90 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002f5c:	481b      	ldr	r0, [pc, #108]	; (8002fcc <_ZN6Logger10sdCardInitEv+0x90>)
 8002f5e:	f010 ff61 	bl	8013e24 <puts>

	  lcd_clear();
 8002f62:	f7fe f89d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002f66:	2100      	movs	r1, #0
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fe f8a9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002f6e:	4818      	ldr	r0, [pc, #96]	; (8002fd0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002f70:	f7fe f8d0 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002f74:	2101      	movs	r1, #1
 8002f76:	2000      	movs	r0, #0
 8002f78:	f7fe f8a2 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002f7c:	4815      	ldr	r0, [pc, #84]	; (8002fd4 <_ZN6Logger10sdCardInitEv+0x98>)
 8002f7e:	f7fe f8c9 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002f86:	f004 fae5 	bl	8007554 <HAL_Delay>

	  ret = true;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e018      	b.n	8002fc2 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002f90:	4811      	ldr	r0, [pc, #68]	; (8002fd8 <_ZN6Logger10sdCardInitEv+0x9c>)
 8002f92:	f010 ff47 	bl	8013e24 <puts>

	  lcd_clear();
 8002f96:	f7fe f883 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7fe f88f 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002fa2:	480b      	ldr	r0, [pc, #44]	; (8002fd0 <_ZN6Logger10sdCardInitEv+0x94>)
 8002fa4:	f7fe f8b6 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8002fa8:	2101      	movs	r1, #1
 8002faa:	2000      	movs	r0, #0
 8002fac:	f7fe f888 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8002fb0:	480a      	ldr	r0, [pc, #40]	; (8002fdc <_ZN6Logger10sdCardInitEv+0xa0>)
 8002fb2:	f7fe f8af 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8002fb6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fba:	f004 facb 	bl	8007554 <HAL_Delay>

	  ret = false;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	08017fcc 	.word	0x08017fcc
 8002fd0:	08017fdc 	.word	0x08017fdc
 8002fd4:	08017fe8 	.word	0x08017fe8
 8002fd8:	08017ff0 	.word	0x08017ff0
 8002fdc:	08018000 	.word	0x08018000

08002fe0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002ff2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d029      	beq.n	8003050 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003002:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003018:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003028:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800302c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003034:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	f241 3287 	movw	r2, #4999	; 0x1387
 800303e:	4293      	cmp	r3, r2
 8003040:	d906      	bls.n	8003050 <_ZN6Logger8storeLogEf+0x70>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003048:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 800304c:	2200      	movs	r2, #0
 800304e:	801a      	strh	r2, [r3, #0]
	}
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800306e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d02c      	beq.n	80030d2 <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800307e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800308a:	3308      	adds	r3, #8
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800309a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030aa:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80030ae:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030b6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	f241 3287 	movw	r2, #4999	; 0x1387
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d906      	bls.n	80030d2 <_ZN6Logger9storeLog2Ef+0x76>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030ca:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80030ce:	2200      	movs	r2, #0
 80030d0:	801a      	strh	r2, [r3, #0]
	}
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr

080030de <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80030de:	b480      	push	{r7}
 80030e0:	b085      	sub	sp, #20
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	ed87 0a02 	vstr	s0, [r7, #8]
 80030ea:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030f4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8003100:	3310      	adds	r3, #16
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4413      	add	r3, r2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003110:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800312a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	3301      	adds	r3, #1
 8003132:	b29a      	uxth	r2, r3
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800313a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800313e:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003146:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003150:	4293      	cmp	r3, r2
 8003152:	d906      	bls.n	8003162 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800315a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800315e:	2200      	movs	r2, #0
 8003160:	801a      	strh	r2, [r3, #0]
	//}
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af02      	add	r7, sp, #8
 8003174:	60f8      	str	r0, [r7, #12]
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	2300      	movs	r3, #0
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	4613      	mov	r3, r2
 8003182:	f241 3288 	movw	r2, #5000	; 0x1388
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	68b8      	ldr	r0, [r7, #8]
 800318a:	f7fe f9ff 	bl	800158c <sd_write_array_float>
}
 800318e:	bf00      	nop
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af02      	add	r7, sp, #8
 800319c:	60f8      	str	r0, [r7, #12]
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80031a8:	3320      	adds	r3, #32
 80031aa:	2200      	movs	r2, #0
 80031ac:	9200      	str	r2, [sp, #0]
 80031ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	68b8      	ldr	r0, [r7, #8]
 80031b6:	f7fe f9e9 	bl	800158c <sd_write_array_float>
}
 80031ba:	bf00      	nop
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80031d6:	3340      	adds	r3, #64	; 0x40
 80031d8:	2200      	movs	r2, #0
 80031da:	9200      	str	r2, [sp, #0]
 80031dc:	f241 7270 	movw	r2, #6000	; 0x1770
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	f7fe f9d2 	bl	800158c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4613      	mov	r3, r2
 80031f4:	f241 7270 	movw	r2, #6000	; 0x1770
 80031f8:	6839      	ldr	r1, [r7, #0]
 80031fa:	68b8      	ldr	r0, [r7, #8]
 80031fc:	f7fe f9c6 	bl	800158c <sd_write_array_float>
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 8003208:	b480      	push	{r7}
 800320a:	b093      	sub	sp, #76	; 0x4c
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	637b      	str	r3, [r7, #52]	; 0x34
 8003214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
 8003218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800321a:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 800321e:	3320      	adds	r3, #32
 8003220:	633b      	str	r3, [r7, #48]	; 0x30
 8003222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	429a      	cmp	r2, r3
 8003228:	d009      	beq.n	800323e <_ZN6Logger9resetLogsEv+0x36>
 800322a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 800322e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003230:	f04f 0200 	mov.w	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8003236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003238:	3304      	adds	r3, #4
 800323a:	647b      	str	r3, [r7, #68]	; 0x44
 800323c:	e7f1      	b.n	8003222 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003244:	3320      	adds	r3, #32
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
 8003248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324a:	643b      	str	r3, [r7, #64]	; 0x40
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003252:	3320      	adds	r3, #32
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
 8003256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	429a      	cmp	r2, r3
 800325c:	d009      	beq.n	8003272 <_ZN6Logger9resetLogsEv+0x6a>
 800325e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003260:	623b      	str	r3, [r7, #32]
		log = 0;
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 800326a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800326c:	3304      	adds	r3, #4
 800326e:	643b      	str	r3, [r7, #64]	; 0x40
 8003270:	e7f1      	b.n	8003256 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003278:	3340      	adds	r3, #64	; 0x40
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003286:	3340      	adds	r3, #64	; 0x40
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	429a      	cmp	r2, r3
 8003290:	d009      	beq.n	80032a6 <_ZN6Logger9resetLogsEv+0x9e>
 8003292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003294:	617b      	str	r3, [r7, #20]
		log = 0;
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 800329e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a0:	3304      	adds	r3, #4
 80032a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032a4:	e7f1      	b.n	800328a <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80032b8:	3340      	adds	r3, #64	; 0x40
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d009      	beq.n	80032d8 <_ZN6Logger9resetLogsEv+0xd0>
 80032c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c6:	60bb      	str	r3, [r7, #8]
		log = 0;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 80032d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d2:	3304      	adds	r3, #4
 80032d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80032d6:	e7f1      	b.n	80032bc <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032de:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80032e2:	2200      	movs	r2, #0
 80032e4:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80032ec:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80032f0:	2200      	movs	r2, #0
 80032f2:	801a      	strh	r2, [r3, #0]
}
 80032f4:	bf00      	nop
 80032f6:	374c      	adds	r7, #76	; 0x4c
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <_ZN6Logger5startEv>:

void Logger::start()
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800330e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003330:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	801a      	strh	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	805a      	strh	r2, [r3, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003370:	2108      	movs	r1, #8
 8003372:	4805      	ldr	r0, [pc, #20]	; (8003388 <_ZN5Motor4initEv+0x20>)
 8003374:	f009 fab6 	bl	800c8e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003378:	210c      	movs	r1, #12
 800337a:	4803      	ldr	r0, [pc, #12]	; (8003388 <_ZN5Motor4initEv+0x20>)
 800337c:	f009 fab2 	bl	800c8e4 <HAL_TIM_PWM_Start>

}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20035a14 	.word	0x20035a14

0800338c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0d      	bge.n	80033ba <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800339e:	2200      	movs	r2, #0
 80033a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033a4:	481f      	ldr	r0, [pc, #124]	; (8003424 <_ZN5Motor9motorCtrlEv+0x98>)
 80033a6:	f005 fb6b 	bl	8008a80 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	425b      	negs	r3, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	81fb      	strh	r3, [r7, #14]
 80033b8:	e00a      	b.n	80033d0 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80033ba:	2201      	movs	r2, #1
 80033bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033c0:	4818      	ldr	r0, [pc, #96]	; (8003424 <_ZN5Motor9motorCtrlEv+0x98>)
 80033c2:	f005 fb5d 	bl	8008a80 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	da0d      	bge.n	80033f6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80033da:	2201      	movs	r2, #1
 80033dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033e0:	4810      	ldr	r0, [pc, #64]	; (8003424 <_ZN5Motor9motorCtrlEv+0x98>)
 80033e2:	f005 fb4d 	bl	8008a80 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	425b      	negs	r3, r3
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	81bb      	strh	r3, [r7, #12]
 80033f4:	e00a      	b.n	800340c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80033f6:	2200      	movs	r2, #0
 80033f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033fc:	4809      	ldr	r0, [pc, #36]	; (8003424 <_ZN5Motor9motorCtrlEv+0x98>)
 80033fe:	f005 fb3f 	bl	8008a80 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003408:	b29b      	uxth	r3, r3
 800340a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 800340c:	89fa      	ldrh	r2, [r7, #14]
 800340e:	4b06      	ldr	r3, [pc, #24]	; (8003428 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8003414:	89ba      	ldrh	r2, [r7, #12]
 8003416:	4b04      	ldr	r3, [pc, #16]	; (8003428 <_ZN5Motor9motorCtrlEv+0x9c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40020c00 	.word	0x40020c00
 8003428:	20035a14 	.word	0x20035a14

0800342c <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	6178      	str	r0, [r7, #20]
 8003434:	ed87 0b02 	vstr	d0, [r7, #8]
 8003438:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	4b30      	ldr	r3, [pc, #192]	; (8003504 <_ZN5Motor8setRatioEdd+0xd8>)
 8003442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003446:	f7fd fb7f 	bl	8000b48 <__aeabi_dcmpgt>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <_ZN5Motor8setRatioEdd+0x30>
 8003450:	f04f 0300 	mov.w	r3, #0
 8003454:	4c2b      	ldr	r4, [pc, #172]	; (8003504 <_ZN5Motor8setRatioEdd+0xd8>)
 8003456:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800345a:	e00e      	b.n	800347a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <_ZN5Motor8setRatioEdd+0xdc>)
 8003462:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003466:	f7fd fb51 	bl	8000b0c <__aeabi_dcmplt>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <_ZN5Motor8setRatioEdd+0x4e>
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	4c24      	ldr	r4, [pc, #144]	; (8003508 <_ZN5Motor8setRatioEdd+0xdc>)
 8003476:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800347a:	f04f 0200 	mov.w	r2, #0
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <_ZN5Motor8setRatioEdd+0xd8>)
 8003480:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003484:	f7fd fb60 	bl	8000b48 <__aeabi_dcmpgt>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <_ZN5Motor8setRatioEdd+0x6e>
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	4c1c      	ldr	r4, [pc, #112]	; (8003504 <_ZN5Motor8setRatioEdd+0xd8>)
 8003494:	e9c7 3400 	strd	r3, r4, [r7]
 8003498:	e00e      	b.n	80034b8 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <_ZN5Motor8setRatioEdd+0xdc>)
 80034a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034a4:	f7fd fb32 	bl	8000b0c <__aeabi_dcmplt>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <_ZN5Motor8setRatioEdd+0x8c>
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	4c15      	ldr	r4, [pc, #84]	; (8003508 <_ZN5Motor8setRatioEdd+0xdc>)
 80034b4:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	4b13      	ldr	r3, [pc, #76]	; (800350c <_ZN5Motor8setRatioEdd+0xe0>)
 80034be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034c2:	f7fd f8b1 	bl	8000628 <__aeabi_dmul>
 80034c6:	4603      	mov	r3, r0
 80034c8:	460c      	mov	r4, r1
 80034ca:	4618      	mov	r0, r3
 80034cc:	4621      	mov	r1, r4
 80034ce:	f7fd fb5b 	bl	8000b88 <__aeabi_d2iz>
 80034d2:	4603      	mov	r3, r0
 80034d4:	b21a      	sxth	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <_ZN5Motor8setRatioEdd+0xe0>)
 80034e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80034e4:	f7fd f8a0 	bl	8000628 <__aeabi_dmul>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	4618      	mov	r0, r3
 80034ee:	4621      	mov	r1, r4
 80034f0:	f7fd fb4a 	bl	8000b88 <__aeabi_d2iz>
 80034f4:	4603      	mov	r3, r0
 80034f6:	b21a      	sxth	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	805a      	strh	r2, [r3, #2]

}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	bd90      	pop	{r4, r7, pc}
 8003504:	3ff00000 	.word	0x3ff00000
 8003508:	bff00000 	.word	0xbff00000
 800350c:	409c2000 	.word	0x409c2000

08003510 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8003510:	b490      	push	{r4, r7}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	f04f 0400 	mov.w	r4, #0
 8003528:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f04f 0400 	mov.w	r4, #0
 8003536:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0400 	mov.w	r4, #0
 8003544:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bc90      	pop	{r4, r7}
 8003564:	4770      	bx	lr
	...

08003568 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b086      	sub	sp, #24
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe faca 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 800357c:	ee10 3a10 	vmov	r3, s0
 8003580:	4618      	mov	r0, r3
 8003582:	f7fc fff9 	bl	8000578 <__aeabi_f2d>
 8003586:	4603      	mov	r3, r0
 8003588:	460c      	mov	r4, r1
 800358a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd ff22 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 8003598:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800359c:	a357      	add	r3, pc, #348	; (adr r3, 80036fc <_ZN8Odometry12calcPotitionEv+0x194>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035a6:	f7fd f83f 	bl	8000628 <__aeabi_dmul>
 80035aa:	4603      	mov	r3, r0
 80035ac:	460c      	mov	r4, r1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f7fc ffdc 	bl	8000578 <__aeabi_f2d>
 80035c0:	4682      	mov	sl, r0
 80035c2:	468b      	mov	fp, r1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035d8:	f7fd f950 	bl	800087c <__aeabi_ddiv>
 80035dc:	4602      	mov	r2, r0
 80035de:	460b      	mov	r3, r1
 80035e0:	4640      	mov	r0, r8
 80035e2:	4649      	mov	r1, r9
 80035e4:	f7fc fe6a 	bl	80002bc <__adddf3>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	ec43 2b17 	vmov	d7, r2, r3
 80035f0:	eeb0 0a47 	vmov.f32	s0, s14
 80035f4:	eef0 0a67 	vmov.f32	s1, s15
 80035f8:	f00e fcba 	bl	8011f70 <cos>
 80035fc:	ec53 2b10 	vmov	r2, r3, d0
 8003600:	4650      	mov	r0, sl
 8003602:	4659      	mov	r1, fp
 8003604:	f7fd f810 	bl	8000628 <__aeabi_dmul>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4620      	mov	r0, r4
 800360e:	4629      	mov	r1, r5
 8003610:	f7fc fe54 	bl	80002bc <__adddf3>
 8003614:	4603      	mov	r3, r0
 8003616:	460c      	mov	r4, r1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f7fc ffa7 	bl	8000578 <__aeabi_f2d>
 800362a:	4682      	mov	sl, r0
 800362c:	468b      	mov	fp, r1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003642:	f7fd f91b 	bl	800087c <__aeabi_ddiv>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4640      	mov	r0, r8
 800364c:	4649      	mov	r1, r9
 800364e:	f7fc fe35 	bl	80002bc <__adddf3>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	ec43 2b17 	vmov	d7, r2, r3
 800365a:	eeb0 0a47 	vmov.f32	s0, s14
 800365e:	eef0 0a67 	vmov.f32	s1, s15
 8003662:	f00e fcc9 	bl	8011ff8 <sin>
 8003666:	ec53 2b10 	vmov	r2, r3, d0
 800366a:	4650      	mov	r0, sl
 800366c:	4659      	mov	r1, fp
 800366e:	f7fc ffdb 	bl	8000628 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fc fe1f 	bl	80002bc <__adddf3>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003694:	461a      	mov	r2, r3
 8003696:	4623      	mov	r3, r4
 8003698:	f7fc fe10 	bl	80002bc <__adddf3>
 800369c:	4603      	mov	r3, r0
 800369e:	460c      	mov	r4, r1
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80036ac:	4618      	mov	r0, r3
 80036ae:	4621      	mov	r1, r4
 80036b0:	f7fd fab2 	bl	8000c18 <__aeabi_d2f>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <_ZN8Odometry12calcPotitionEv+0x188>)
 80036b8:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80036c0:	4618      	mov	r0, r3
 80036c2:	4621      	mov	r1, r4
 80036c4:	f7fd faa8 	bl	8000c18 <__aeabi_d2f>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <_ZN8Odometry12calcPotitionEv+0x18c>)
 80036cc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80036d4:	4618      	mov	r0, r3
 80036d6:	4621      	mov	r1, r4
 80036d8:	f7fd fa9e 	bl	8000c18 <__aeabi_d2f>
 80036dc:	4602      	mov	r2, r0
 80036de:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <_ZN8Odometry12calcPotitionEv+0x190>)
 80036e0:	601a      	str	r2, [r3, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ec:	f3af 8000 	nop.w
 80036f0:	20000274 	.word	0x20000274
 80036f4:	20000278 	.word	0x20000278
 80036f8:	2000027c 	.word	0x2000027c
 80036fc:	d2f1a9fc 	.word	0xd2f1a9fc
 8003700:	3f50624d 	.word	0x3f50624d

08003704 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	calcPotition();
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff2b 	bl	8003568 <_ZN8Odometry12calcPotitionEv>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 800371a:	b490      	push	{r4, r7}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
	return theta_;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003728:	ec44 3b17 	vmov	d7, r3, r4
}
 800372c:	eeb0 0a47 	vmov.f32	s0, s14
 8003730:	eef0 0a67 	vmov.f32	s1, s15
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bc90      	pop	{r4, r7}
 800373a:	4770      	bx	lr

0800373c <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 800373c:	b490      	push	{r4, r7}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	f04f 0400 	mov.w	r4, #0
 800374e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	f04f 0400 	mov.w	r4, #0
 800375c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f04f 0400 	mov.w	r4, #0
 800376a:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800376e:	bf00      	nop
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bc90      	pop	{r4, r7}
 8003776:	4770      	bx	lr

08003778 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003778:	b490      	push	{r4, r7}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	f04f 0400 	mov.w	r4, #0
 8003790:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	f04f 0400 	mov.w	r4, #0
 800379e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	f04f 0400 	mov.w	r4, #0
 80037ac:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80037b6:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80037ba:	2200      	movs	r2, #0
 80037bc:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80037be:	4a29      	ldr	r2, [pc, #164]	; (8003864 <_ZN13PathFollowingC1Ev+0xec>)
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <_ZN13PathFollowingC1Ev+0xec>)
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	f04f 0400 	mov.w	r4, #0
 80037d6:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80037da:	4a22      	ldr	r2, [pc, #136]	; (8003864 <_ZN13PathFollowingC1Ev+0xec>)
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 80037ea:	f04f 0300 	mov.w	r3, #0
 80037ee:	f04f 0400 	mov.w	r4, #0
 80037f2:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80037f6:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	f04f 0400 	mov.w	r4, #0
 8003800:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003804:	4a18      	ldr	r2, [pc, #96]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003812:	4a15      	ldr	r2, [pc, #84]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	f04f 0400 	mov.w	r4, #0
 800381c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003820:	4a11      	ldr	r2, [pc, #68]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <_ZN13PathFollowingC1Ev+0xf0>)
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	f04f 0400 	mov.w	r4, #0
 8003838:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 800383c:	4a0b      	ldr	r2, [pc, #44]	; (800386c <_ZN13PathFollowingC1Ev+0xf4>)
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	f04f 0400 	mov.w	r4, #0
 8003846:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <_ZN13PathFollowingC1Ev+0xf4>)
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	f04f 0400 	mov.w	r4, #0
 8003854:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bc90      	pop	{r4, r7}
 8003862:	4770      	bx	lr
 8003864:	20035f18 	.word	0x20035f18
 8003868:	20035ea8 	.word	0x20035ea8
 800386c:	20035f08 	.word	0x20035f08

08003870 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003878:	f001 fcba 	bl	80051f0 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 800387c:	f107 0318 	add.w	r3, r7, #24
 8003880:	2201      	movs	r2, #1
 8003882:	4915      	ldr	r1, [pc, #84]	; (80038d8 <_ZN13PathFollowing4initEv+0x68>)
 8003884:	4815      	ldr	r0, [pc, #84]	; (80038dc <_ZN13PathFollowing4initEv+0x6c>)
 8003886:	f7fd ff2d 	bl	80016e4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800388a:	f107 0310 	add.w	r3, r7, #16
 800388e:	2201      	movs	r2, #1
 8003890:	4913      	ldr	r1, [pc, #76]	; (80038e0 <_ZN13PathFollowing4initEv+0x70>)
 8003892:	4812      	ldr	r0, [pc, #72]	; (80038dc <_ZN13PathFollowing4initEv+0x6c>)
 8003894:	f7fd ff26 	bl	80016e4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003898:	f107 0308 	add.w	r3, r7, #8
 800389c:	2201      	movs	r2, #1
 800389e:	4911      	ldr	r1, [pc, #68]	; (80038e4 <_ZN13PathFollowing4initEv+0x74>)
 80038a0:	480e      	ldr	r0, [pc, #56]	; (80038dc <_ZN13PathFollowing4initEv+0x6c>)
 80038a2:	f7fd ff1f 	bl	80016e4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80038a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80038aa:	ed97 6b04 	vldr	d6, [r7, #16]
 80038ae:	ed97 5b02 	vldr	d5, [r7, #8]
 80038b2:	eeb0 2a45 	vmov.f32	s4, s10
 80038b6:	eef0 2a65 	vmov.f32	s5, s11
 80038ba:	eeb0 1a46 	vmov.f32	s2, s12
 80038be:	eef0 1a66 	vmov.f32	s3, s13
 80038c2:	eeb0 0a47 	vmov.f32	s0, s14
 80038c6:	eef0 0a67 	vmov.f32	s1, s15
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f80c 	bl	80038e8 <_ZN13PathFollowing7setGainEddd>
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	08018008 	.word	0x08018008
 80038dc:	08018010 	.word	0x08018010
 80038e0:	08018018 	.word	0x08018018
 80038e4:	08018020 	.word	0x08018020

080038e8 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80038e8:	b490      	push	{r4, r7}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	61f8      	str	r0, [r7, #28]
 80038f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80038f4:	ed87 1b02 	vstr	d1, [r7, #8]
 80038f8:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80038fc:	4a09      	ldr	r2, [pc, #36]	; (8003924 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80038fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003902:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8003906:	4a07      	ldr	r2, [pc, #28]	; (8003924 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003908:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800390c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8003910:	4a04      	ldr	r2, [pc, #16]	; (8003924 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8003912:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003916:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800391a:	bf00      	nop
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bc90      	pop	{r4, r7}
 8003922:	4770      	bx	lr
 8003924:	20035f18 	.word	0x20035f18

08003928 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8003928:	b490      	push	{r4, r7}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <_ZN13PathFollowing8getKxValEv+0x24>)
 8003932:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003936:	ec44 3b17 	vmov	d7, r3, r4
}
 800393a:	eeb0 0a47 	vmov.f32	s0, s14
 800393e:	eef0 0a67 	vmov.f32	s1, s15
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bc90      	pop	{r4, r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20035f18 	.word	0x20035f18

08003950 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003950:	b490      	push	{r4, r7}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003958:	4b06      	ldr	r3, [pc, #24]	; (8003974 <_ZN13PathFollowing8getKyValEv+0x24>)
 800395a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800395e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003962:	eeb0 0a47 	vmov.f32	s0, s14
 8003966:	eef0 0a67 	vmov.f32	s1, s15
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bc90      	pop	{r4, r7}
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20035f18 	.word	0x20035f18

08003978 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003978:	b490      	push	{r4, r7}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <_ZN13PathFollowing8getKtValEv+0x24>)
 8003982:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003986:	ec44 3b17 	vmov	d7, r3, r4
}
 800398a:	eeb0 0a47 	vmov.f32	s0, s14
 800398e:	eef0 0a67 	vmov.f32	s1, s15
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bc90      	pop	{r4, r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20035f18 	.word	0x20035f18

080039a0 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80039a8:	2088      	movs	r0, #136	; 0x88
 80039aa:	f7fe f9f4 	bl	8001d96 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80039ae:	2080      	movs	r0, #128	; 0x80
 80039b0:	f7fe f9f1 	bl	8001d96 <INA260_init>
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	0000      	movs	r0, r0
	...

080039c0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80039c8:	2188      	movs	r1, #136	; 0x88
 80039ca:	2002      	movs	r0, #2
 80039cc:	f7fe f980 	bl	8001cd0 <INA260_read>
 80039d0:	4603      	mov	r3, r0
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fdbe 	bl	8000554 <__aeabi_i2d>
 80039d8:	a30c      	add	r3, pc, #48	; (adr r3, 8003a0c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80039da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039de:	f7fc fe23 	bl	8000628 <__aeabi_dmul>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	4618      	mov	r0, r3
 80039e8:	4621      	mov	r1, r4
 80039ea:	f7fd f915 	bl	8000c18 <__aeabi_d2f>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a03      	ldr	r2, [pc, #12]	; (8003a08 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80039fa:	6013      	str	r3, [r2, #0]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}
 8003a04:	f3af 8000 	nop.w
 8003a08:	20000280 	.word	0x20000280
 8003a0c:	47ae147b 	.word	0x47ae147b
 8003a10:	3f547ae1 	.word	0x3f547ae1

08003a14 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	ee07 3a90 	vmov	s15, r3

}
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	0000      	movs	r0, r0
 8003a34:	0000      	movs	r0, r0
	...

08003a38 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd95 	bl	8000578 <__aeabi_f2d>
 8003a4e:	a311      	add	r3, pc, #68	; (adr r3, 8003a94 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fd f85a 	bl	8000b0c <__aeabi_dcmplt>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d006      	beq.n	8003a6c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003a5e:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003a68:	801a      	strh	r2, [r3, #0]
 8003a6a:	e002      	b.n	8003a72 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d004      	beq.n	8003a84 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003a7e:	4b04      	ldr	r3, [pc, #16]	; (8003a90 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000284 	.word	0x20000284
 8003a94:	9999999a 	.word	0x9999999a
 8003a98:	401d9999 	.word	0x401d9999

08003a9c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	4822      	ldr	r0, [pc, #136]	; (8003b34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003aac:	f004 ffd0 	bl	8008a50 <HAL_GPIO_ReadPin>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf0c      	ite	eq
 8003ab6:	2301      	moveq	r3, #1
 8003ab8:	2300      	movne	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003ac8:	2108      	movs	r1, #8
 8003aca:	481a      	ldr	r0, [pc, #104]	; (8003b34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003acc:	f004 ffc0 	bl	8008a50 <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	bf0c      	ite	eq
 8003ad6:	2301      	moveq	r3, #1
 8003ad8:	2300      	movne	r3, #0
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d003      	beq.n	8003ae8 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003ae0:	89fb      	ldrh	r3, [r7, #14]
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003ae8:	2110      	movs	r1, #16
 8003aea:	4812      	ldr	r0, [pc, #72]	; (8003b34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003aec:	f004 ffb0 	bl	8008a50 <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	bf0c      	ite	eq
 8003af6:	2301      	moveq	r3, #1
 8003af8:	2300      	movne	r3, #0
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003b00:	89fb      	ldrh	r3, [r7, #14]
 8003b02:	f043 0304 	orr.w	r3, r3, #4
 8003b06:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003b08:	2180      	movs	r1, #128	; 0x80
 8003b0a:	480a      	ldr	r0, [pc, #40]	; (8003b34 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003b0c:	f004 ffa0 	bl	8008a50 <HAL_GPIO_ReadPin>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	bf0c      	ite	eq
 8003b16:	2301      	moveq	r3, #1
 8003b18:	2300      	movne	r3, #0
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003b20:	89fb      	ldrh	r3, [r7, #14]
 8003b22:	f043 0308 	orr.w	r3, r3, #8
 8003b26:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003b28:	89fb      	ldrh	r3, [r7, #14]

}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020c00 	.word	0x40020c00

08003b38 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	805a      	strh	r2, [r3, #2]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	809a      	strh	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	719a      	strb	r2, [r3, #6]
{

}
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
	...

08003b68 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if(ignore_flag_ == true){
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	799b      	ldrb	r3, [r3, #6]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d065      	beq.n	8003c48 <_ZN10SideSensor12updateStatusEt+0xe0>

		if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d111      	bne.n	8003ba6 <_ZN10SideSensor12updateStatusEt+0x3e>
 8003b82:	4b34      	ldr	r3, [pc, #208]	; (8003c54 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <_ZN10SideSensor12updateStatusEt+0x3e>
			status_ |= 0x01;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	801a      	strh	r2, [r3, #0]
			white_flag1 = true;
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	e01a      	b.n	8003bdc <_ZN10SideSensor12updateStatusEt+0x74>
		}
		else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d117      	bne.n	8003bdc <_ZN10SideSensor12updateStatusEt+0x74>
 8003bac:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <_ZN10SideSensor12updateStatusEt+0x74>
			status_ ^= 0x01;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	801a      	strh	r2, [r3, #0]
			white_flag1 = false;
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <_ZN10SideSensor12updateStatusEt+0xec>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]

			white_line_cnt_r_++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	889b      	ldrh	r3, [r3, #4]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	809a      	strh	r2, [r3, #4]
			mon_cnt_r = white_line_cnt_r_;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	889a      	ldrh	r2, [r3, #4]
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <_ZN10SideSensor12updateStatusEt+0xf0>)
 8003bda:	801a      	strh	r2, [r3, #0]

		}

		if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be2:	d111      	bne.n	8003c08 <_ZN10SideSensor12updateStatusEt+0xa0>
 8003be4:	4b1d      	ldr	r3, [pc, #116]	; (8003c5c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	f083 0301 	eor.w	r3, r3, #1
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <_ZN10SideSensor12updateStatusEt+0xa0>
			status_ |= 0x02;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	f043 0302 	orr.w	r3, r3, #2
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	801a      	strh	r2, [r3, #0]
			white_flag2 = true;
 8003c00:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e01b      	b.n	8003c40 <_ZN10SideSensor12updateStatusEt+0xd8>
		}
		else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d117      	bne.n	8003c40 <_ZN10SideSensor12updateStatusEt+0xd8>
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <_ZN10SideSensor12updateStatusEt+0xd8>
			status_ ^= 0x02;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	f083 0302 	eor.w	r3, r3, #2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	801a      	strh	r2, [r3, #0]
			white_flag2 = false;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	; (8003c5c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	701a      	strb	r2, [r3, #0]

			white_line_cnt_l_++;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	885b      	ldrh	r3, [r3, #2]
 8003c30:	3301      	adds	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	805a      	strh	r2, [r3, #2]
			mon_cnt_l = white_line_cnt_l_;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	885a      	ldrh	r2, [r3, #2]
 8003c3c:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <_ZN10SideSensor12updateStatusEt+0xf8>)
 8003c3e:	801a      	strh	r2, [r3, #0]
		}

		mon_status = status_;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	4b07      	ldr	r3, [pc, #28]	; (8003c64 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003c46:	801a      	strh	r2, [r3, #0]
	}

}
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	2000028c 	.word	0x2000028c
 8003c58:	2000028a 	.word	0x2000028a
 8003c5c:	2000028d 	.word	0x2000028d
 8003c60:	20000288 	.word	0x20000288
 8003c64:	20000286 	.word	0x20000286

08003c68 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	889b      	ldrh	r3, [r3, #4]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	809a      	strh	r2, [r3, #4]
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f00f f9d9 	bl	8013070 <memcpy>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	08018044 	.word	0x08018044

08003cf4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d010      	beq.n	8003d2c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	ed97 0a00 	vldr	s0, [r7]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7ff f964 	bl	8002fe0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003d22:	eeb0 0a67 	vmov.f32	s0, s15
 8003d26:	4610      	mov	r0, r2
 8003d28:	f7ff f998 	bl	800305c <_ZN6Logger9storeLog2Ef>
	}

}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a07      	ldr	r2, [pc, #28]	; (8003d60 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003d42:	4908      	ldr	r1, [pc, #32]	; (8003d64 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fa12 	bl	800316e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a06      	ldr	r2, [pc, #24]	; (8003d68 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003d50:	4904      	ldr	r1, [pc, #16]	; (8003d64 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff fa1f 	bl	8003196 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08018238 	.word	0x08018238
 8003d64:	08018244 	.word	0x08018244
 8003d68:	08018250 	.word	0x08018250

08003d6c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d046      	beq.n	8003e0c <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3204      	adds	r2, #4
 8003d90:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003d94:	ee07 3a90 	vmov	s15, r3
 8003d98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003dac:	3301      	adds	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003dbc:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003dbe:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003dc6:	2bf9      	cmp	r3, #249	; 0xf9
 8003dc8:	d903      	bls.n	8003dd2 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	22fa      	movs	r2, #250	; 0xfa
 8003dce:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685c      	ldr	r4, [r3, #4]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fbcb 	bl	8000578 <__aeabi_f2d>
 8003de2:	4605      	mov	r5, r0
 8003de4:	460e      	mov	r6, r1
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003dec:	eef1 7a67 	vneg.f32	s15, s15
 8003df0:	ee17 3a90 	vmov	r3, s15
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7fc fbbf 	bl	8000578 <__aeabi_f2d>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	ec43 2b11 	vmov	d1, r2, r3
 8003e02:	ec46 5b10 	vmov	d0, r5, r6
 8003e06:	4620      	mov	r0, r4
 8003e08:	f7ff fb10 	bl	800342c <_ZN5Motor8setRatioEdd>

	}

}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e14:	20000290 	.word	0x20000290

08003e18 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7ff fa5b 	bl	8003300 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	0000      	movs	r0, r0
 8003e5c:	0000      	movs	r0, r0
	...

08003e60 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fa58 	bl	8003322 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003ea0 <_ZN20SystemIdentification4stopEv+0x40>
 8003e8a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003ea0 <_ZN20SystemIdentification4stopEv+0x40>
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff facc 	bl	800342c <_ZN5Motor8setRatioEdd>
}
 8003e94:	bf00      	nop
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	f3af 8000 	nop.w
	...

08003ea8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
 8003eb4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f04f 0200 	mov.w	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	611a      	str	r2, [r3, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	615a      	str	r2, [r3, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	621a      	str	r2, [r3, #32]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f04f 0200 	mov.w	r2, #0
 8003f1c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	f107 020c 	add.w	r2, r7, #12
 8003f50:	f107 0110 	add.w	r1, r7, #16
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fd fa2d 	bl	80013b4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003f5a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f6e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7fc fb00 	bl	8000578 <__aeabi_f2d>
 8003f78:	a30b      	add	r3, pc, #44	; (adr r3, 8003fa8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f7fc fb53 	bl	8000628 <__aeabi_dmul>
 8003f82:	4603      	mov	r3, r0
 8003f84:	460c      	mov	r4, r1
 8003f86:	4618      	mov	r0, r3
 8003f88:	4621      	mov	r1, r4
 8003f8a:	f7fc fe45 	bl	8000c18 <__aeabi_d2f>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	ee07 3a90 	vmov	s15, r3
}
 8003f9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	1ab1d998 	.word	0x1ab1d998
 8003fac:	3f7830b5 	.word	0x3f7830b5

08003fb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	ed93 7a00 	vldr	s14, [r3]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d007      	beq.n	8003fe6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8003ff8:	4b3f      	ldr	r3, [pc, #252]	; (80040f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fc fabb 	bl	8000578 <__aeabi_f2d>
 8004002:	4604      	mov	r4, r0
 8004004:	460d      	mov	r5, r1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	ed93 7a06 	vldr	s14, [r3, #24]
 800400c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004014:	ee17 0a90 	vmov	r0, s15
 8004018:	f7fc faae 	bl	8000578 <__aeabi_f2d>
 800401c:	a334      	add	r3, pc, #208	; (adr r3, 80040f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc fb01 	bl	8000628 <__aeabi_dmul>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4620      	mov	r0, r4
 800402c:	4629      	mov	r1, r5
 800402e:	f7fc f945 	bl	80002bc <__adddf3>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	4618      	mov	r0, r3
 8004038:	4621      	mov	r1, r4
 800403a:	f7fc fded 	bl	8000c18 <__aeabi_d2f>
 800403e:	4602      	mov	r2, r0
 8004040:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004042:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	ed93 7a05 	vldr	s14, [r3, #20]
 800404a:	4b2c      	ldr	r3, [pc, #176]	; (80040fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	edd7 6a05 	vldr	s13, [r7, #20]
 8004054:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800405c:	ee17 0a90 	vmov	r0, s15
 8004060:	f7fc fa8a 	bl	8000578 <__aeabi_f2d>
 8004064:	a322      	add	r3, pc, #136	; (adr r3, 80040f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406a:	f7fc fc07 	bl	800087c <__aeabi_ddiv>
 800406e:	4603      	mov	r3, r0
 8004070:	460c      	mov	r4, r1
 8004072:	4618      	mov	r0, r3
 8004074:	4621      	mov	r1, r4
 8004076:	f7fc fdcf 	bl	8000c18 <__aeabi_d2f>
 800407a:	4603      	mov	r3, r0
 800407c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800407e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004082:	edd7 7a03 	vldr	s15, [r7, #12]
 8004086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800408a:	4b1b      	ldr	r3, [pc, #108]	; (80040f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004094:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80040a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa63 	bl	8000578 <__aeabi_f2d>
 80040b2:	4605      	mov	r5, r0
 80040b4:	460e      	mov	r6, r1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80040bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80040c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c4:	ee17 0a90 	vmov	r0, s15
 80040c8:	f7fc fa56 	bl	8000578 <__aeabi_f2d>
 80040cc:	4602      	mov	r2, r0
 80040ce:	460b      	mov	r3, r1
 80040d0:	ec43 2b11 	vmov	d1, r2, r3
 80040d4:	ec46 5b10 	vmov	d0, r5, r6
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff f9a7 	bl	800342c <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80040de:	4a07      	ldr	r2, [pc, #28]	; (80040fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	6013      	str	r3, [r2, #0]
}
 80040e4:	bf00      	nop
 80040e6:	371c      	adds	r7, #28
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ec:	f3af 8000 	nop.w
 80040f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80040f4:	3f50624d 	.word	0x3f50624d
 80040f8:	20000298 	.word	0x20000298
 80040fc:	20000294 	.word	0x20000294

08004100 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	ed87 0a02 	vstr	s0, [r7, #8]
 800410c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	605a      	str	r2, [r3, #4]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	ed87 0a02 	vstr	s0, [r7, #8]
 8004134:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	ed87 0a02 	vstr	s0, [r7, #8]
 800415c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004160:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	615a      	str	r2, [r3, #20]
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	ed87 0a02 	vstr	s0, [r7, #8]
 800418e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004192:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	621a      	str	r2, [r3, #32]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7ff febf 	bl	8003f40 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff feef 	bl	8003fb0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004230 <_ZN12VelocityCtrl4stopEv+0x30>
 8004218:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004230 <_ZN12VelocityCtrl4stopEv+0x30>
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff f905 	bl	800342c <_ZN5Motor8setRatioEdd>

}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	f3af 8000 	nop.w
	...

08004238 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004240:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004244:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b00      	cmp	r3, #0
 800424e:	d013      	beq.n	8004278 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004250:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004254:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004258:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00b      	beq.n	8004278 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004260:	e000      	b.n	8004264 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004262:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004264:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f9      	beq.n	8004262 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800426e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004278:	687b      	ldr	r3, [r7, #4]
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8004292:	2300      	movs	r3, #0
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e009      	b.n	80042ac <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1c5a      	adds	r2, r3, #1
 800429c:	60ba      	str	r2, [r7, #8]
 800429e:	781b      	ldrb	r3, [r3, #0]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ffc9 	bl	8004238 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	3301      	adds	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	dbf1      	blt.n	8004298 <_write+0x12>
  }
  return len;
 80042b4:	687b      	ldr	r3, [r7, #4]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	4603      	mov	r3, r0
 80042c6:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f001 ff14 	bl	80060f8 <cppExit>
}
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1e      	ldr	r2, [pc, #120]	; (8004360 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80042ea:	f001 fe95 	bl	8006018 <cppFlip1ms>

		tim6_timer++;
 80042ee:	4b1d      	ldr	r3, [pc, #116]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	4a1b      	ldr	r2, [pc, #108]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042f6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80042f8:	4b1a      	ldr	r3, [pc, #104]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a1a      	ldr	r2, [pc, #104]	; (8004368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d902      	bls.n	8004308 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004304:	2200      	movs	r2, #0
 8004306:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a17      	ldr	r2, [pc, #92]	; (800436c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8004312:	f001 fec9 	bl	80060a8 <cppFlip100ns>

		tim7_timer++;
 8004316:	4b16      	ldr	r3, [pc, #88]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	4a14      	ldr	r2, [pc, #80]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800431e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004320:	4b13      	ldr	r3, [pc, #76]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a10      	ldr	r2, [pc, #64]	; (8004368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d902      	bls.n	8004330 <HAL_TIM_PeriodElapsedCallback+0x58>
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10e      	bne.n	8004358 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800433a:	f001 febf 	bl	80060bc <cppFlip10ms>

		tim13_timer++;
 800433e:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3301      	adds	r3, #1
 8004344:	4a0c      	ldr	r2, [pc, #48]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004346:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a06      	ldr	r2, [pc, #24]	; (8004368 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d902      	bls.n	8004358 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
	}

}
 8004358:	bf00      	nop
 800435a:	3708      	adds	r7, #8
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40001000 	.word	0x40001000
 8004364:	20035b84 	.word	0x20035b84
 8004368:	0001869f 	.word	0x0001869f
 800436c:	40001400 	.word	0x40001400
 8004370:	20035bc8 	.word	0x20035bc8
 8004374:	40001c00 	.word	0x40001c00
 8004378:	20035bcc 	.word	0x20035bcc

0800437c <init>:

void init()
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004380:	2201      	movs	r2, #1
 8004382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004386:	4808      	ldr	r0, [pc, #32]	; (80043a8 <init+0x2c>)
 8004388:	f004 fb7a 	bl	8008a80 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800438c:	4807      	ldr	r0, [pc, #28]	; (80043ac <init+0x30>)
 800438e:	f008 fa5a 	bl	800c846 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004392:	4807      	ldr	r0, [pc, #28]	; (80043b0 <init+0x34>)
 8004394:	f008 fa57 	bl	800c846 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004398:	4806      	ldr	r0, [pc, #24]	; (80043b4 <init+0x38>)
 800439a:	f008 fa54 	bl	800c846 <HAL_TIM_Base_Start_IT>

	cppInit();
 800439e:	f001 fd91 	bl	8005ec4 <cppInit>

	//path_following_initialize();

}
 80043a2:	bf00      	nop
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
 80043ac:	20035cb0 	.word	0x20035cb0
 80043b0:	20035e54 	.word	0x20035e54
 80043b4:	20035bd0 	.word	0x20035bd0

080043b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043bc:	f003 f858 	bl	8007470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043c0:	f000 f82a 	bl	8004418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043c4:	f000 fdbc 	bl	8004f40 <MX_GPIO_Init>
  MX_DMA_Init();
 80043c8:	f000 fd8a 	bl	8004ee0 <MX_DMA_Init>
  MX_I2C2_Init();
 80043cc:	f000 f9e8 	bl	80047a0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80043d0:	f000 fa14 	bl	80047fc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80043d4:	f000 fa32 	bl	800483c <MX_SPI2_Init>
  MX_TIM1_Init();
 80043d8:	f000 fa66 	bl	80048a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80043dc:	f000 fb70 	bl	8004ac0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80043e0:	f000 fc3c 	bl	8004c5c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80043e4:	f000 fd52 	bl	8004e8c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80043e8:	f00a fa00 	bl	800e7ec <MX_FATFS_Init>
  MX_TIM6_Init();
 80043ec:	f000 fbcc 	bl	8004b88 <MX_TIM6_Init>
  MX_I2C1_Init();
 80043f0:	f000 f9a8 	bl	8004744 <MX_I2C1_Init>
  MX_TIM3_Init();
 80043f4:	f000 fb00 	bl	80049f8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80043f8:	f000 fc88 	bl	8004d0c <MX_TIM10_Init>
  MX_TIM11_Init();
 80043fc:	f000 fcd4 	bl	8004da8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004400:	f000 f898 	bl	8004534 <MX_ADC2_Init>
  MX_TIM7_Init();
 8004404:	f000 fbf6 	bl	8004bf4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8004408:	f000 fd1c 	bl	8004e44 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800440c:	f7ff ffb6 	bl	800437c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004410:	f001 fe82 	bl	8006118 <cppLoop>
 8004414:	e7fc      	b.n	8004410 <main+0x58>
	...

08004418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b0a4      	sub	sp, #144	; 0x90
 800441c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800441e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004422:	2234      	movs	r2, #52	; 0x34
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f00e fe2d 	bl	8013086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800442c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004430:	2200      	movs	r2, #0
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	605a      	str	r2, [r3, #4]
 8004436:	609a      	str	r2, [r3, #8]
 8004438:	60da      	str	r2, [r3, #12]
 800443a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800443c:	f107 030c 	add.w	r3, r7, #12
 8004440:	223c      	movs	r2, #60	; 0x3c
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f00e fe1e 	bl	8013086 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	4b37      	ldr	r3, [pc, #220]	; (800452c <SystemClock_Config+0x114>)
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <SystemClock_Config+0x114>)
 8004454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004458:	6413      	str	r3, [r2, #64]	; 0x40
 800445a:	4b34      	ldr	r3, [pc, #208]	; (800452c <SystemClock_Config+0x114>)
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <SystemClock_Config+0x118>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a30      	ldr	r2, [pc, #192]	; (8004530 <SystemClock_Config+0x118>)
 8004470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <SystemClock_Config+0x118>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004482:	2301      	movs	r3, #1
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800448a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800448c:	2302      	movs	r3, #2
 800448e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004490:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004494:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004496:	2308      	movs	r3, #8
 8004498:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800449a:	23b4      	movs	r3, #180	; 0xb4
 800449c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044a0:	2302      	movs	r3, #2
 80044a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80044a6:	2308      	movs	r3, #8
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044ac:	2302      	movs	r3, #2
 80044ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044b6:	4618      	mov	r0, r3
 80044b8:	f005 ff1c 	bl	800a2f4 <HAL_RCC_OscConfig>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80044c2:	f000 fe91 	bl	80051e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80044c6:	f005 fa97 	bl	80099f8 <HAL_PWREx_EnableOverDrive>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80044d0:	f000 fe8a 	bl	80051e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044d4:	230f      	movs	r3, #15
 80044d6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044d8:	2302      	movs	r3, #2
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044dc:	2300      	movs	r3, #0
 80044de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80044e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ea:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044f0:	2105      	movs	r1, #5
 80044f2:	4618      	mov	r0, r3
 80044f4:	f005 fad0 	bl	8009a98 <HAL_RCC_ClockConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80044fe:	f000 fe73 	bl	80051e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004502:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004506:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004508:	2300      	movs	r3, #0
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800450c:	2300      	movs	r3, #0
 800450e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fcaf 	bl	8009e78 <HAL_RCCEx_PeriphCLKConfig>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004520:	f000 fe62 	bl	80051e8 <Error_Handler>
  }
}
 8004524:	bf00      	nop
 8004526:	3790      	adds	r7, #144	; 0x90
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40023800 	.word	0x40023800
 8004530:	40007000 	.word	0x40007000

08004534 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800453a:	463b      	mov	r3, r7
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004546:	4b7c      	ldr	r3, [pc, #496]	; (8004738 <MX_ADC2_Init+0x204>)
 8004548:	4a7c      	ldr	r2, [pc, #496]	; (800473c <MX_ADC2_Init+0x208>)
 800454a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800454c:	4b7a      	ldr	r3, [pc, #488]	; (8004738 <MX_ADC2_Init+0x204>)
 800454e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004552:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004554:	4b78      	ldr	r3, [pc, #480]	; (8004738 <MX_ADC2_Init+0x204>)
 8004556:	2200      	movs	r2, #0
 8004558:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800455a:	4b77      	ldr	r3, [pc, #476]	; (8004738 <MX_ADC2_Init+0x204>)
 800455c:	2201      	movs	r2, #1
 800455e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004560:	4b75      	ldr	r3, [pc, #468]	; (8004738 <MX_ADC2_Init+0x204>)
 8004562:	2201      	movs	r2, #1
 8004564:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004566:	4b74      	ldr	r3, [pc, #464]	; (8004738 <MX_ADC2_Init+0x204>)
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800456e:	4b72      	ldr	r3, [pc, #456]	; (8004738 <MX_ADC2_Init+0x204>)
 8004570:	2200      	movs	r2, #0
 8004572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004574:	4b70      	ldr	r3, [pc, #448]	; (8004738 <MX_ADC2_Init+0x204>)
 8004576:	4a72      	ldr	r2, [pc, #456]	; (8004740 <MX_ADC2_Init+0x20c>)
 8004578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800457a:	4b6f      	ldr	r3, [pc, #444]	; (8004738 <MX_ADC2_Init+0x204>)
 800457c:	2200      	movs	r2, #0
 800457e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004580:	4b6d      	ldr	r3, [pc, #436]	; (8004738 <MX_ADC2_Init+0x204>)
 8004582:	220e      	movs	r2, #14
 8004584:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004586:	4b6c      	ldr	r3, [pc, #432]	; (8004738 <MX_ADC2_Init+0x204>)
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800458e:	4b6a      	ldr	r3, [pc, #424]	; (8004738 <MX_ADC2_Init+0x204>)
 8004590:	2201      	movs	r2, #1
 8004592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004594:	4868      	ldr	r0, [pc, #416]	; (8004738 <MX_ADC2_Init+0x204>)
 8004596:	f002 ffff 	bl	8007598 <HAL_ADC_Init>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80045a0:	f000 fe22 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80045a4:	230a      	movs	r3, #10
 80045a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80045a8:	2301      	movs	r3, #1
 80045aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80045ac:	2306      	movs	r3, #6
 80045ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045b0:	463b      	mov	r3, r7
 80045b2:	4619      	mov	r1, r3
 80045b4:	4860      	ldr	r0, [pc, #384]	; (8004738 <MX_ADC2_Init+0x204>)
 80045b6:	f003 f943 	bl	8007840 <HAL_ADC_ConfigChannel>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80045c0:	f000 fe12 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80045c4:	230b      	movs	r3, #11
 80045c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80045c8:	2302      	movs	r3, #2
 80045ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045cc:	463b      	mov	r3, r7
 80045ce:	4619      	mov	r1, r3
 80045d0:	4859      	ldr	r0, [pc, #356]	; (8004738 <MX_ADC2_Init+0x204>)
 80045d2:	f003 f935 	bl	8007840 <HAL_ADC_ConfigChannel>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80045dc:	f000 fe04 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80045e0:	230c      	movs	r3, #12
 80045e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80045e4:	2303      	movs	r3, #3
 80045e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80045e8:	463b      	mov	r3, r7
 80045ea:	4619      	mov	r1, r3
 80045ec:	4852      	ldr	r0, [pc, #328]	; (8004738 <MX_ADC2_Init+0x204>)
 80045ee:	f003 f927 	bl	8007840 <HAL_ADC_ConfigChannel>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80045f8:	f000 fdf6 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80045fc:	230d      	movs	r3, #13
 80045fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004600:	2304      	movs	r3, #4
 8004602:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004604:	463b      	mov	r3, r7
 8004606:	4619      	mov	r1, r3
 8004608:	484b      	ldr	r0, [pc, #300]	; (8004738 <MX_ADC2_Init+0x204>)
 800460a:	f003 f919 	bl	8007840 <HAL_ADC_ConfigChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004614:	f000 fde8 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004618:	2300      	movs	r3, #0
 800461a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800461c:	2305      	movs	r3, #5
 800461e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004620:	463b      	mov	r3, r7
 8004622:	4619      	mov	r1, r3
 8004624:	4844      	ldr	r0, [pc, #272]	; (8004738 <MX_ADC2_Init+0x204>)
 8004626:	f003 f90b 	bl	8007840 <HAL_ADC_ConfigChannel>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004630:	f000 fdda 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004634:	2301      	movs	r3, #1
 8004636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004638:	2306      	movs	r3, #6
 800463a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800463c:	463b      	mov	r3, r7
 800463e:	4619      	mov	r1, r3
 8004640:	483d      	ldr	r0, [pc, #244]	; (8004738 <MX_ADC2_Init+0x204>)
 8004642:	f003 f8fd 	bl	8007840 <HAL_ADC_ConfigChannel>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800464c:	f000 fdcc 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004650:	2302      	movs	r3, #2
 8004652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004654:	2307      	movs	r3, #7
 8004656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004658:	463b      	mov	r3, r7
 800465a:	4619      	mov	r1, r3
 800465c:	4836      	ldr	r0, [pc, #216]	; (8004738 <MX_ADC2_Init+0x204>)
 800465e:	f003 f8ef 	bl	8007840 <HAL_ADC_ConfigChannel>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004668:	f000 fdbe 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800466c:	2303      	movs	r3, #3
 800466e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004670:	2308      	movs	r3, #8
 8004672:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004674:	463b      	mov	r3, r7
 8004676:	4619      	mov	r1, r3
 8004678:	482f      	ldr	r0, [pc, #188]	; (8004738 <MX_ADC2_Init+0x204>)
 800467a:	f003 f8e1 	bl	8007840 <HAL_ADC_ConfigChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004684:	f000 fdb0 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004688:	2304      	movs	r3, #4
 800468a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800468c:	2309      	movs	r3, #9
 800468e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004690:	463b      	mov	r3, r7
 8004692:	4619      	mov	r1, r3
 8004694:	4828      	ldr	r0, [pc, #160]	; (8004738 <MX_ADC2_Init+0x204>)
 8004696:	f003 f8d3 	bl	8007840 <HAL_ADC_ConfigChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80046a0:	f000 fda2 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80046a4:	2305      	movs	r3, #5
 80046a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80046a8:	230a      	movs	r3, #10
 80046aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046ac:	463b      	mov	r3, r7
 80046ae:	4619      	mov	r1, r3
 80046b0:	4821      	ldr	r0, [pc, #132]	; (8004738 <MX_ADC2_Init+0x204>)
 80046b2:	f003 f8c5 	bl	8007840 <HAL_ADC_ConfigChannel>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80046bc:	f000 fd94 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80046c0:	2306      	movs	r3, #6
 80046c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80046c4:	230b      	movs	r3, #11
 80046c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046c8:	463b      	mov	r3, r7
 80046ca:	4619      	mov	r1, r3
 80046cc:	481a      	ldr	r0, [pc, #104]	; (8004738 <MX_ADC2_Init+0x204>)
 80046ce:	f003 f8b7 	bl	8007840 <HAL_ADC_ConfigChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80046d8:	f000 fd86 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80046dc:	2307      	movs	r3, #7
 80046de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80046e0:	230c      	movs	r3, #12
 80046e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046e4:	463b      	mov	r3, r7
 80046e6:	4619      	mov	r1, r3
 80046e8:	4813      	ldr	r0, [pc, #76]	; (8004738 <MX_ADC2_Init+0x204>)
 80046ea:	f003 f8a9 	bl	8007840 <HAL_ADC_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80046f4:	f000 fd78 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80046f8:	2308      	movs	r3, #8
 80046fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80046fc:	230d      	movs	r3, #13
 80046fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004700:	463b      	mov	r3, r7
 8004702:	4619      	mov	r1, r3
 8004704:	480c      	ldr	r0, [pc, #48]	; (8004738 <MX_ADC2_Init+0x204>)
 8004706:	f003 f89b 	bl	8007840 <HAL_ADC_ConfigChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004710:	f000 fd6a 	bl	80051e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004714:	2309      	movs	r3, #9
 8004716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004718:	230e      	movs	r3, #14
 800471a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800471c:	463b      	mov	r3, r7
 800471e:	4619      	mov	r1, r3
 8004720:	4805      	ldr	r0, [pc, #20]	; (8004738 <MX_ADC2_Init+0x204>)
 8004722:	f003 f88d 	bl	8007840 <HAL_ADC_ConfigChannel>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800472c:	f000 fd5c 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20035a54 	.word	0x20035a54
 800473c:	40012100 	.word	0x40012100
 8004740:	0f000001 	.word	0x0f000001

08004744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <MX_I2C1_Init+0x50>)
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <MX_I2C1_Init+0x54>)
 800474c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800474e:	4b11      	ldr	r3, [pc, #68]	; (8004794 <MX_I2C1_Init+0x50>)
 8004750:	4a12      	ldr	r2, [pc, #72]	; (800479c <MX_I2C1_Init+0x58>)
 8004752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <MX_I2C1_Init+0x50>)
 8004756:	2200      	movs	r2, #0
 8004758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <MX_I2C1_Init+0x50>)
 800475c:	2200      	movs	r2, #0
 800475e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004760:	4b0c      	ldr	r3, [pc, #48]	; (8004794 <MX_I2C1_Init+0x50>)
 8004762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <MX_I2C1_Init+0x50>)
 800476a:	2200      	movs	r2, #0
 800476c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <MX_I2C1_Init+0x50>)
 8004770:	2200      	movs	r2, #0
 8004772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004774:	4b07      	ldr	r3, [pc, #28]	; (8004794 <MX_I2C1_Init+0x50>)
 8004776:	2200      	movs	r2, #0
 8004778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <MX_I2C1_Init+0x50>)
 800477c:	2280      	movs	r2, #128	; 0x80
 800477e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004780:	4804      	ldr	r0, [pc, #16]	; (8004794 <MX_I2C1_Init+0x50>)
 8004782:	f004 f9af 	bl	8008ae4 <HAL_I2C_Init>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800478c:	f000 fd2c 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004790:	bf00      	nop
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20035a9c 	.word	0x20035a9c
 8004798:	40005400 	.word	0x40005400
 800479c:	000186a0 	.word	0x000186a0

080047a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80047a4:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <MX_I2C2_Init+0x54>)
 80047a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80047aa:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047ac:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <MX_I2C2_Init+0x58>)
 80047ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80047b6:	4b0e      	ldr	r3, [pc, #56]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80047c4:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80047d6:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047d8:	2280      	movs	r2, #128	; 0x80
 80047da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80047dc:	4804      	ldr	r0, [pc, #16]	; (80047f0 <MX_I2C2_Init+0x50>)
 80047de:	f004 f981 	bl	8008ae4 <HAL_I2C_Init>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80047e8:	f000 fcfe 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80047ec:	bf00      	nop
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20035b30 	.word	0x20035b30
 80047f4:	40005800 	.word	0x40005800
 80047f8:	000186a0 	.word	0x000186a0

080047fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 8004802:	4a0d      	ldr	r2, [pc, #52]	; (8004838 <MX_SDIO_SD_Init+0x3c>)
 8004804:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800480c:	4b09      	ldr	r3, [pc, #36]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 800480e:	2200      	movs	r2, #0
 8004810:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 8004814:	2200      	movs	r2, #0
 8004816:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004818:	4b06      	ldr	r3, [pc, #24]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 800481a:	2200      	movs	r2, #0
 800481c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 8004820:	2200      	movs	r2, #0
 8004822:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004824:	4b03      	ldr	r3, [pc, #12]	; (8004834 <MX_SDIO_SD_Init+0x38>)
 8004826:	2200      	movs	r2, #0
 8004828:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800482a:	bf00      	nop
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	20035d30 	.word	0x20035d30
 8004838:	40012c00 	.word	0x40012c00

0800483c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004842:	4a18      	ldr	r2, [pc, #96]	; (80048a4 <MX_SPI2_Init+0x68>)
 8004844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800484c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800484e:	4b14      	ldr	r3, [pc, #80]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004856:	2200      	movs	r2, #0
 8004858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800485a:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <MX_SPI2_Init+0x64>)
 800485c:	2202      	movs	r2, #2
 800485e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004862:	2201      	movs	r2, #1
 8004864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004866:	4b0e      	ldr	r3, [pc, #56]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800486c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800486e:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004870:	2228      	movs	r2, #40	; 0x28
 8004872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004876:	2200      	movs	r2, #0
 8004878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800487a:	4b09      	ldr	r3, [pc, #36]	; (80048a0 <MX_SPI2_Init+0x64>)
 800487c:	2200      	movs	r2, #0
 800487e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004882:	2200      	movs	r2, #0
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <MX_SPI2_Init+0x64>)
 8004888:	220a      	movs	r2, #10
 800488a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800488c:	4804      	ldr	r0, [pc, #16]	; (80048a0 <MX_SPI2_Init+0x64>)
 800488e:	f007 fa5b 	bl	800bd48 <HAL_SPI_Init>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004898:	f000 fca6 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800489c:	bf00      	nop
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2003597c 	.word	0x2003597c
 80048a4:	40003800 	.word	0x40003800

080048a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b09a      	sub	sp, #104	; 0x68
 80048ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80048ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048b2:	2224      	movs	r2, #36	; 0x24
 80048b4:	2100      	movs	r1, #0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f00e fbe5 	bl	8013086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048c6:	f107 0320 	add.w	r3, r7, #32
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]
 80048d6:	615a      	str	r2, [r3, #20]
 80048d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80048da:	463b      	mov	r3, r7
 80048dc:	2220      	movs	r2, #32
 80048de:	2100      	movs	r1, #0
 80048e0:	4618      	mov	r0, r3
 80048e2:	f00e fbd0 	bl	8013086 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80048e6:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <MX_TIM1_Init+0x148>)
 80048e8:	4a42      	ldr	r2, [pc, #264]	; (80049f4 <MX_TIM1_Init+0x14c>)
 80048ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80048ec:	4b40      	ldr	r3, [pc, #256]	; (80049f0 <MX_TIM1_Init+0x148>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f2:	4b3f      	ldr	r3, [pc, #252]	; (80049f0 <MX_TIM1_Init+0x148>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80048f8:	4b3d      	ldr	r3, [pc, #244]	; (80049f0 <MX_TIM1_Init+0x148>)
 80048fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80048fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004900:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <MX_TIM1_Init+0x148>)
 8004902:	2200      	movs	r2, #0
 8004904:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004906:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <MX_TIM1_Init+0x148>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490c:	4b38      	ldr	r3, [pc, #224]	; (80049f0 <MX_TIM1_Init+0x148>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004912:	4837      	ldr	r0, [pc, #220]	; (80049f0 <MX_TIM1_Init+0x148>)
 8004914:	f007 ffbb 	bl	800c88e <HAL_TIM_PWM_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800491e:	f000 fc63 	bl	80051e8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004922:	2303      	movs	r3, #3
 8004924:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004926:	2300      	movs	r3, #0
 8004928:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800492a:	2301      	movs	r3, #1
 800492c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800492e:	2300      	movs	r3, #0
 8004930:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004932:	2300      	movs	r3, #0
 8004934:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004936:	2300      	movs	r3, #0
 8004938:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800493a:	2301      	movs	r3, #1
 800493c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800493e:	2300      	movs	r3, #0
 8004940:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004942:	2300      	movs	r3, #0
 8004944:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004946:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800494a:	4619      	mov	r1, r3
 800494c:	4828      	ldr	r0, [pc, #160]	; (80049f0 <MX_TIM1_Init+0x148>)
 800494e:	f008 f807 	bl	800c960 <HAL_TIM_Encoder_Init>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004958:	f000 fc46 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800495c:	2300      	movs	r3, #0
 800495e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004960:	2300      	movs	r3, #0
 8004962:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004964:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004968:	4619      	mov	r1, r3
 800496a:	4821      	ldr	r0, [pc, #132]	; (80049f0 <MX_TIM1_Init+0x148>)
 800496c:	f008 fd2e 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004976:	f000 fc37 	bl	80051e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800497a:	2360      	movs	r3, #96	; 0x60
 800497c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004982:	2300      	movs	r3, #0
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004986:	2300      	movs	r3, #0
 8004988:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800498a:	2300      	movs	r3, #0
 800498c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004992:	2300      	movs	r3, #0
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004996:	f107 0320 	add.w	r3, r7, #32
 800499a:	2208      	movs	r2, #8
 800499c:	4619      	mov	r1, r3
 800499e:	4814      	ldr	r0, [pc, #80]	; (80049f0 <MX_TIM1_Init+0x148>)
 80049a0:	f008 f9b0 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80049aa:	f000 fc1d 	bl	80051e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80049ae:	2300      	movs	r3, #0
 80049b0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80049c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80049c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80049cc:	463b      	mov	r3, r7
 80049ce:	4619      	mov	r1, r3
 80049d0:	4807      	ldr	r0, [pc, #28]	; (80049f0 <MX_TIM1_Init+0x148>)
 80049d2:	f008 fd77 	bl	800d4c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80049dc:	f000 fc04 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <MX_TIM1_Init+0x148>)
 80049e2:	f000 fff1 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 80049e6:	bf00      	nop
 80049e8:	3768      	adds	r7, #104	; 0x68
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20035cf0 	.word	0x20035cf0
 80049f4:	40010000 	.word	0x40010000

080049f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08a      	sub	sp, #40	; 0x28
 80049fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049fe:	f107 0320 	add.w	r3, r7, #32
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004a08:	1d3b      	adds	r3, r7, #4
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	609a      	str	r2, [r3, #8]
 8004a12:	60da      	str	r2, [r3, #12]
 8004a14:	611a      	str	r2, [r3, #16]
 8004a16:	615a      	str	r2, [r3, #20]
 8004a18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004a1a:	4b27      	ldr	r3, [pc, #156]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a1c:	4a27      	ldr	r2, [pc, #156]	; (8004abc <MX_TIM3_Init+0xc4>)
 8004a1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004a20:	4b25      	ldr	r3, [pc, #148]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a26:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004a2c:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a34:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a3a:	4b1f      	ldr	r3, [pc, #124]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004a40:	481d      	ldr	r0, [pc, #116]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a42:	f007 ff24 	bl	800c88e <HAL_TIM_PWM_Init>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004a4c:	f000 fbcc 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a50:	2300      	movs	r3, #0
 8004a52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a58:	f107 0320 	add.w	r3, r7, #32
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4816      	ldr	r0, [pc, #88]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a60:	f008 fcb4 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004a6a:	f000 fbbd 	bl	80051e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a6e:	2360      	movs	r3, #96	; 0x60
 8004a70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a7e:	1d3b      	adds	r3, r7, #4
 8004a80:	2200      	movs	r2, #0
 8004a82:	4619      	mov	r1, r3
 8004a84:	480c      	ldr	r0, [pc, #48]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a86:	f008 f93d 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004a90:	f000 fbaa 	bl	80051e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	2204      	movs	r2, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004a9c:	f008 f932 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004aa6:	f000 fb9f 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004aaa:	4803      	ldr	r0, [pc, #12]	; (8004ab8 <MX_TIM3_Init+0xc0>)
 8004aac:	f000 ff8c 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 8004ab0:	bf00      	nop
 8004ab2:	3728      	adds	r7, #40	; 0x28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20035b88 	.word	0x20035b88
 8004abc:	40000400 	.word	0x40000400

08004ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ac6:	f107 0320 	add.w	r3, r7, #32
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ad0:	1d3b      	adds	r3, r7, #4
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	605a      	str	r2, [r3, #4]
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	60da      	str	r2, [r3, #12]
 8004adc:	611a      	str	r2, [r3, #16]
 8004ade:	615a      	str	r2, [r3, #20]
 8004ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004ae2:	4b27      	ldr	r3, [pc, #156]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004ae4:	4a27      	ldr	r2, [pc, #156]	; (8004b84 <MX_TIM4_Init+0xc4>)
 8004ae6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004ae8:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aee:	4b24      	ldr	r3, [pc, #144]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004af4:	4b22      	ldr	r3, [pc, #136]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004af6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004afa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004afc:	4b20      	ldr	r3, [pc, #128]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b02:	4b1f      	ldr	r3, [pc, #124]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004b08:	481d      	ldr	r0, [pc, #116]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b0a:	f007 fec0 	bl	800c88e <HAL_TIM_PWM_Init>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004b14:	f000 fb68 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004b20:	f107 0320 	add.w	r3, r7, #32
 8004b24:	4619      	mov	r1, r3
 8004b26:	4816      	ldr	r0, [pc, #88]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b28:	f008 fc50 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004b32:	f000 fb59 	bl	80051e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b36:	2360      	movs	r3, #96	; 0x60
 8004b38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004b46:	1d3b      	adds	r3, r7, #4
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	480c      	ldr	r0, [pc, #48]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b4e:	f008 f8d9 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004b58:	f000 fb46 	bl	80051e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004b5c:	1d3b      	adds	r3, r7, #4
 8004b5e:	220c      	movs	r2, #12
 8004b60:	4619      	mov	r1, r3
 8004b62:	4807      	ldr	r0, [pc, #28]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b64:	f008 f8ce 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004b6e:	f000 fb3b 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004b72:	4803      	ldr	r0, [pc, #12]	; (8004b80 <MX_TIM4_Init+0xc0>)
 8004b74:	f000 ff28 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 8004b78:	bf00      	nop
 8004b7a:	3728      	adds	r7, #40	; 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20035a14 	.word	0x20035a14
 8004b84:	40000800 	.word	0x40000800

08004b88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b8e:	463b      	mov	r3, r7
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004b96:	4b15      	ldr	r3, [pc, #84]	; (8004bec <MX_TIM6_Init+0x64>)
 8004b98:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <MX_TIM6_Init+0x68>)
 8004b9a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004b9c:	4b13      	ldr	r3, [pc, #76]	; (8004bec <MX_TIM6_Init+0x64>)
 8004b9e:	2259      	movs	r2, #89	; 0x59
 8004ba0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <MX_TIM6_Init+0x64>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004ba8:	4b10      	ldr	r3, [pc, #64]	; (8004bec <MX_TIM6_Init+0x64>)
 8004baa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004bae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <MX_TIM6_Init+0x64>)
 8004bb2:	2280      	movs	r2, #128	; 0x80
 8004bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004bb6:	480d      	ldr	r0, [pc, #52]	; (8004bec <MX_TIM6_Init+0x64>)
 8004bb8:	f007 fe1a 	bl	800c7f0 <HAL_TIM_Base_Init>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004bc2:	f000 fb11 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004bce:	463b      	mov	r3, r7
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	4806      	ldr	r0, [pc, #24]	; (8004bec <MX_TIM6_Init+0x64>)
 8004bd4:	f008 fbfa 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004bde:	f000 fb03 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20035cb0 	.word	0x20035cb0
 8004bf0:	40001000 	.word	0x40001000

08004bf4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bfa:	463b      	mov	r3, r7
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c04:	4a14      	ldr	r2, [pc, #80]	; (8004c58 <MX_TIM7_Init+0x64>)
 8004c06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004c08:	4b12      	ldr	r3, [pc, #72]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c0a:	22b3      	movs	r2, #179	; 0xb3
 8004c0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c0e:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c16:	2231      	movs	r2, #49	; 0x31
 8004c18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c1a:	4b0e      	ldr	r3, [pc, #56]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c1c:	2280      	movs	r2, #128	; 0x80
 8004c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c20:	480c      	ldr	r0, [pc, #48]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c22:	f007 fde5 	bl	800c7f0 <HAL_TIM_Base_Init>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004c2c:	f000 fadc 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c30:	2300      	movs	r3, #0
 8004c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c38:	463b      	mov	r3, r7
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4805      	ldr	r0, [pc, #20]	; (8004c54 <MX_TIM7_Init+0x60>)
 8004c3e:	f008 fbc5 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004c48:	f000 face 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	20035e54 	.word	0x20035e54
 8004c58:	40001400 	.word	0x40001400

08004c5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08c      	sub	sp, #48	; 0x30
 8004c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004c62:	f107 030c 	add.w	r3, r7, #12
 8004c66:	2224      	movs	r2, #36	; 0x24
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f00e fa0b 	bl	8013086 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
 8004c76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004c78:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c7a:	4a23      	ldr	r2, [pc, #140]	; (8004d08 <MX_TIM8_Init+0xac>)
 8004c7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004c7e:	4b21      	ldr	r3, [pc, #132]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004c84:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c86:	2210      	movs	r2, #16
 8004c88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004c8a:	4b1e      	ldr	r3, [pc, #120]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c9e:	4b19      	ldr	r3, [pc, #100]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004cac:	2301      	movs	r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004cc8:	f107 030c 	add.w	r3, r7, #12
 8004ccc:	4619      	mov	r1, r3
 8004cce:	480d      	ldr	r0, [pc, #52]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004cd0:	f007 fe46 	bl	800c960 <HAL_TIM_Encoder_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004cda:	f000 fa85 	bl	80051e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4806      	ldr	r0, [pc, #24]	; (8004d04 <MX_TIM8_Init+0xa8>)
 8004cec:	f008 fb6e 	bl	800d3cc <HAL_TIMEx_MasterConfigSynchronization>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004cf6:	f000 fa77 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004cfa:	bf00      	nop
 8004cfc:	3730      	adds	r7, #48	; 0x30
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	200359d4 	.word	0x200359d4
 8004d08:	40010400 	.word	0x40010400

08004d0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004d12:	1d3b      	adds	r3, r7, #4
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
 8004d1c:	60da      	str	r2, [r3, #12]
 8004d1e:	611a      	str	r2, [r3, #16]
 8004d20:	615a      	str	r2, [r3, #20]
 8004d22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004d24:	4b1e      	ldr	r3, [pc, #120]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d26:	4a1f      	ldr	r2, [pc, #124]	; (8004da4 <MX_TIM10_Init+0x98>)
 8004d28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004d2a:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d30:	4b1b      	ldr	r3, [pc, #108]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004d36:	4b1a      	ldr	r3, [pc, #104]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d3e:	4b18      	ldr	r3, [pc, #96]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d40:	2200      	movs	r2, #0
 8004d42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d44:	4b16      	ldr	r3, [pc, #88]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004d4a:	4815      	ldr	r0, [pc, #84]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d4c:	f007 fd50 	bl	800c7f0 <HAL_TIM_Base_Init>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004d56:	f000 fa47 	bl	80051e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004d5a:	4811      	ldr	r0, [pc, #68]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d5c:	f007 fd97 	bl	800c88e <HAL_TIM_PWM_Init>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004d66:	f000 fa3f 	bl	80051e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d6a:	2360      	movs	r3, #96	; 0x60
 8004d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004d7a:	1d3b      	adds	r3, r7, #4
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4807      	ldr	r0, [pc, #28]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d82:	f007 ffbf 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004d8c:	f000 fa2c 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004d90:	4803      	ldr	r0, [pc, #12]	; (8004da0 <MX_TIM10_Init+0x94>)
 8004d92:	f000 fe19 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 8004d96:	bf00      	nop
 8004d98:	3720      	adds	r7, #32
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20035af0 	.word	0x20035af0
 8004da4:	40014400 	.word	0x40014400

08004da8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	2200      	movs	r2, #0
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	605a      	str	r2, [r3, #4]
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	60da      	str	r2, [r3, #12]
 8004dba:	611a      	str	r2, [r3, #16]
 8004dbc:	615a      	str	r2, [r3, #20]
 8004dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004dc0:	4b1e      	ldr	r3, [pc, #120]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004dc2:	4a1f      	ldr	r2, [pc, #124]	; (8004e40 <MX_TIM11_Init+0x98>)
 8004dc4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004dcc:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004dd2:	4b1a      	ldr	r3, [pc, #104]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004de0:	4b16      	ldr	r3, [pc, #88]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004de6:	4815      	ldr	r0, [pc, #84]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004de8:	f007 fd02 	bl	800c7f0 <HAL_TIM_Base_Init>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004df2:	f000 f9f9 	bl	80051e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004df6:	4811      	ldr	r0, [pc, #68]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004df8:	f007 fd49 	bl	800c88e <HAL_TIM_PWM_Init>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004e02:	f000 f9f1 	bl	80051e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e06:	2360      	movs	r3, #96	; 0x60
 8004e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e12:	2300      	movs	r3, #0
 8004e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4807      	ldr	r0, [pc, #28]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004e1e:	f007 ff71 	bl	800cd04 <HAL_TIM_PWM_ConfigChannel>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d001      	beq.n	8004e2c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004e28:	f000 f9de 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004e2c:	4803      	ldr	r0, [pc, #12]	; (8004e3c <MX_TIM11_Init+0x94>)
 8004e2e:	f000 fdcb 	bl	80059c8 <HAL_TIM_MspPostInit>

}
 8004e32:	bf00      	nop
 8004e34:	3720      	adds	r7, #32
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20035c10 	.word	0x20035c10
 8004e40:	40014800 	.word	0x40014800

08004e44 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004e48:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e4a:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <MX_TIM13_Init+0x44>)
 8004e4c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e50:	2259      	movs	r2, #89	; 0x59
 8004e52:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004e60:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e6a:	2280      	movs	r2, #128	; 0x80
 8004e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004e6e:	4805      	ldr	r0, [pc, #20]	; (8004e84 <MX_TIM13_Init+0x40>)
 8004e70:	f007 fcbe 	bl	800c7f0 <HAL_TIM_Base_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004e7a:	f000 f9b5 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20035bd0 	.word	0x20035bd0
 8004e88:	40001c00 	.word	0x40001c00

08004e8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e90:	4b11      	ldr	r3, [pc, #68]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004e92:	4a12      	ldr	r2, [pc, #72]	; (8004edc <MX_USART2_UART_Init+0x50>)
 8004e94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004e96:	4b10      	ldr	r3, [pc, #64]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004e9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ea4:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004eb0:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ec2:	4805      	ldr	r0, [pc, #20]	; (8004ed8 <MX_USART2_UART_Init+0x4c>)
 8004ec4:	f008 fb64 	bl	800d590 <HAL_UART_Init>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004ece:	f000 f98b 	bl	80051e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20035db4 	.word	0x20035db4
 8004edc:	40004400 	.word	0x40004400

08004ee0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	607b      	str	r3, [r7, #4]
 8004eea:	4b14      	ldr	r3, [pc, #80]	; (8004f3c <MX_DMA_Init+0x5c>)
 8004eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eee:	4a13      	ldr	r2, [pc, #76]	; (8004f3c <MX_DMA_Init+0x5c>)
 8004ef0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ef6:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <MX_DMA_Init+0x5c>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	607b      	str	r3, [r7, #4]
 8004f00:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2100      	movs	r1, #0
 8004f06:	203a      	movs	r0, #58	; 0x3a
 8004f08:	f003 f825 	bl	8007f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004f0c:	203a      	movs	r0, #58	; 0x3a
 8004f0e:	f003 f83e 	bl	8007f8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	203b      	movs	r0, #59	; 0x3b
 8004f18:	f003 f81d 	bl	8007f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004f1c:	203b      	movs	r0, #59	; 0x3b
 8004f1e:	f003 f836 	bl	8007f8e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2045      	movs	r0, #69	; 0x45
 8004f28:	f003 f815 	bl	8007f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004f2c:	2045      	movs	r0, #69	; 0x45
 8004f2e:	f003 f82e 	bl	8007f8e <HAL_NVIC_EnableIRQ>

}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023800 	.word	0x40023800

08004f40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08c      	sub	sp, #48	; 0x30
 8004f44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f46:	f107 031c 	add.w	r3, r7, #28
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
 8004f50:	609a      	str	r2, [r3, #8]
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	61bb      	str	r3, [r7, #24]
 8004f5a:	4b9c      	ldr	r3, [pc, #624]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5e:	4a9b      	ldr	r2, [pc, #620]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f60:	f043 0310 	orr.w	r3, r3, #16
 8004f64:	6313      	str	r3, [r2, #48]	; 0x30
 8004f66:	4b99      	ldr	r3, [pc, #612]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f003 0310 	and.w	r3, r3, #16
 8004f6e:	61bb      	str	r3, [r7, #24]
 8004f70:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	4b95      	ldr	r3, [pc, #596]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7a:	4a94      	ldr	r2, [pc, #592]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f80:	6313      	str	r3, [r2, #48]	; 0x30
 8004f82:	4b92      	ldr	r3, [pc, #584]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8e:	2300      	movs	r3, #0
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	4b8e      	ldr	r3, [pc, #568]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	4a8d      	ldr	r2, [pc, #564]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004f98:	f043 0304 	orr.w	r3, r3, #4
 8004f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004f9e:	4b8b      	ldr	r3, [pc, #556]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004faa:	2300      	movs	r3, #0
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	4b87      	ldr	r3, [pc, #540]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb2:	4a86      	ldr	r2, [pc, #536]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fba:	4b84      	ldr	r3, [pc, #528]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	4b80      	ldr	r3, [pc, #512]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4a7f      	ldr	r2, [pc, #508]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fd0:	f043 0302 	orr.w	r3, r3, #2
 8004fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd6:	4b7d      	ldr	r3, [pc, #500]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
 8004fe6:	4b79      	ldr	r3, [pc, #484]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	4a78      	ldr	r2, [pc, #480]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004fec:	f043 0308 	orr.w	r3, r3, #8
 8004ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff2:	4b76      	ldr	r3, [pc, #472]	; (80051cc <MX_GPIO_Init+0x28c>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	607b      	str	r3, [r7, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8004ffe:	2200      	movs	r2, #0
 8005000:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005004:	4872      	ldr	r0, [pc, #456]	; (80051d0 <MX_GPIO_Init+0x290>)
 8005006:	f003 fd3b 	bl	8008a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800500a:	2200      	movs	r2, #0
 800500c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005010:	4870      	ldr	r0, [pc, #448]	; (80051d4 <MX_GPIO_Init+0x294>)
 8005012:	f003 fd35 	bl	8008a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005016:	2200      	movs	r2, #0
 8005018:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800501c:	486e      	ldr	r0, [pc, #440]	; (80051d8 <MX_GPIO_Init+0x298>)
 800501e:	f003 fd2f 	bl	8008a80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005022:	2200      	movs	r2, #0
 8005024:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005028:	486c      	ldr	r0, [pc, #432]	; (80051dc <MX_GPIO_Init+0x29c>)
 800502a:	f003 fd29 	bl	8008a80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800502e:	2304      	movs	r3, #4
 8005030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005032:	4b6b      	ldr	r3, [pc, #428]	; (80051e0 <MX_GPIO_Init+0x2a0>)
 8005034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800503a:	f107 031c 	add.w	r3, r7, #28
 800503e:	4619      	mov	r1, r3
 8005040:	4863      	ldr	r0, [pc, #396]	; (80051d0 <MX_GPIO_Init+0x290>)
 8005042:	f003 fb5b 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005046:	230f      	movs	r3, #15
 8005048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800504a:	2303      	movs	r3, #3
 800504c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	2300      	movs	r3, #0
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005052:	f107 031c 	add.w	r3, r7, #28
 8005056:	4619      	mov	r1, r3
 8005058:	4862      	ldr	r0, [pc, #392]	; (80051e4 <MX_GPIO_Init+0x2a4>)
 800505a:	f003 fb4f 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800505e:	23e1      	movs	r3, #225	; 0xe1
 8005060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005062:	2303      	movs	r3, #3
 8005064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800506a:	f107 031c 	add.w	r3, r7, #28
 800506e:	4619      	mov	r1, r3
 8005070:	485a      	ldr	r0, [pc, #360]	; (80051dc <MX_GPIO_Init+0x29c>)
 8005072:	f003 fb43 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005076:	2303      	movs	r3, #3
 8005078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800507a:	2303      	movs	r3, #3
 800507c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005082:	f107 031c 	add.w	r3, r7, #28
 8005086:	4619      	mov	r1, r3
 8005088:	4852      	ldr	r0, [pc, #328]	; (80051d4 <MX_GPIO_Init+0x294>)
 800508a:	f003 fb37 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800508e:	2304      	movs	r3, #4
 8005090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005092:	2300      	movs	r3, #0
 8005094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005096:	2301      	movs	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800509a:	f107 031c 	add.w	r3, r7, #28
 800509e:	4619      	mov	r1, r3
 80050a0:	484c      	ldr	r0, [pc, #304]	; (80051d4 <MX_GPIO_Init+0x294>)
 80050a2:	f003 fb2b 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80050a6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80050aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80050ac:	2300      	movs	r3, #0
 80050ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050b0:	2301      	movs	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050b4:	f107 031c 	add.w	r3, r7, #28
 80050b8:	4619      	mov	r1, r3
 80050ba:	4845      	ldr	r0, [pc, #276]	; (80051d0 <MX_GPIO_Init+0x290>)
 80050bc:	f003 fb1e 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80050c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050c6:	2301      	movs	r3, #1
 80050c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ce:	2300      	movs	r3, #0
 80050d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050d2:	f107 031c 	add.w	r3, r7, #28
 80050d6:	4619      	mov	r1, r3
 80050d8:	483d      	ldr	r0, [pc, #244]	; (80051d0 <MX_GPIO_Init+0x290>)
 80050da:	f003 fb0f 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80050de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80050e4:	2301      	movs	r3, #1
 80050e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f0:	f107 031c 	add.w	r3, r7, #28
 80050f4:	4619      	mov	r1, r3
 80050f6:	4837      	ldr	r0, [pc, #220]	; (80051d4 <MX_GPIO_Init+0x294>)
 80050f8:	f003 fb00 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80050fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005102:	4b37      	ldr	r3, [pc, #220]	; (80051e0 <MX_GPIO_Init+0x2a0>)
 8005104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800510a:	f107 031c 	add.w	r3, r7, #28
 800510e:	4619      	mov	r1, r3
 8005110:	4831      	ldr	r0, [pc, #196]	; (80051d8 <MX_GPIO_Init+0x298>)
 8005112:	f003 faf3 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005116:	f44f 7300 	mov.w	r3, #512	; 0x200
 800511a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800511c:	2301      	movs	r3, #1
 800511e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005124:	2300      	movs	r3, #0
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005128:	f107 031c 	add.w	r3, r7, #28
 800512c:	4619      	mov	r1, r3
 800512e:	482a      	ldr	r0, [pc, #168]	; (80051d8 <MX_GPIO_Init+0x298>)
 8005130:	f003 fae4 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800513a:	2301      	movs	r3, #1
 800513c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800513e:	2301      	movs	r3, #1
 8005140:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005142:	2300      	movs	r3, #0
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005146:	f107 031c 	add.w	r3, r7, #28
 800514a:	4619      	mov	r1, r3
 800514c:	4822      	ldr	r0, [pc, #136]	; (80051d8 <MX_GPIO_Init+0x298>)
 800514e:	f003 fad5 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005152:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005156:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005158:	2301      	movs	r3, #1
 800515a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005160:	2300      	movs	r3, #0
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005164:	f107 031c 	add.w	r3, r7, #28
 8005168:	4619      	mov	r1, r3
 800516a:	481c      	ldr	r0, [pc, #112]	; (80051dc <MX_GPIO_Init+0x29c>)
 800516c:	f003 fac6 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005176:	2300      	movs	r3, #0
 8005178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517a:	2300      	movs	r3, #0
 800517c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800517e:	f107 031c 	add.w	r3, r7, #28
 8005182:	4619      	mov	r1, r3
 8005184:	4815      	ldr	r0, [pc, #84]	; (80051dc <MX_GPIO_Init+0x29c>)
 8005186:	f003 fab9 	bl	80086fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800518a:	239b      	movs	r3, #155	; 0x9b
 800518c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800518e:	2300      	movs	r3, #0
 8005190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005192:	2301      	movs	r3, #1
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005196:	f107 031c 	add.w	r3, r7, #28
 800519a:	4619      	mov	r1, r3
 800519c:	480e      	ldr	r0, [pc, #56]	; (80051d8 <MX_GPIO_Init+0x298>)
 800519e:	f003 faad 	bl	80086fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80051a2:	2200      	movs	r2, #0
 80051a4:	2100      	movs	r1, #0
 80051a6:	2008      	movs	r0, #8
 80051a8:	f002 fed5 	bl	8007f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80051ac:	2008      	movs	r0, #8
 80051ae:	f002 feee 	bl	8007f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2100      	movs	r1, #0
 80051b6:	2017      	movs	r0, #23
 80051b8:	f002 fecd 	bl	8007f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80051bc:	2017      	movs	r0, #23
 80051be:	f002 fee6 	bl	8007f8e <HAL_NVIC_EnableIRQ>

}
 80051c2:	bf00      	nop
 80051c4:	3730      	adds	r7, #48	; 0x30
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023800 	.word	0x40023800
 80051d0:	40021000 	.word	0x40021000
 80051d4:	40020400 	.word	0x40020400
 80051d8:	40020c00 	.word	0x40020c00
 80051dc:	40020000 	.word	0x40020000
 80051e0:	10310000 	.word	0x10310000
 80051e4:	40020800 	.word	0x40020800

080051e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051ee:	e7fe      	b.n	80051ee <Error_Handler+0x6>

080051f0 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80051f4:	bf00      	nop
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005206:	2300      	movs	r3, #0
 8005208:	607b      	str	r3, [r7, #4]
 800520a:	4b10      	ldr	r3, [pc, #64]	; (800524c <HAL_MspInit+0x4c>)
 800520c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800520e:	4a0f      	ldr	r2, [pc, #60]	; (800524c <HAL_MspInit+0x4c>)
 8005210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005214:	6453      	str	r3, [r2, #68]	; 0x44
 8005216:	4b0d      	ldr	r3, [pc, #52]	; (800524c <HAL_MspInit+0x4c>)
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4b09      	ldr	r3, [pc, #36]	; (800524c <HAL_MspInit+0x4c>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a08      	ldr	r2, [pc, #32]	; (800524c <HAL_MspInit+0x4c>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_MspInit+0x4c>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800

08005250 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	; 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005258:	f107 031c 	add.w	r3, r7, #28
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
 8005262:	609a      	str	r2, [r3, #8]
 8005264:	60da      	str	r2, [r3, #12]
 8005266:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a4a      	ldr	r2, [pc, #296]	; (8005398 <HAL_ADC_MspInit+0x148>)
 800526e:	4293      	cmp	r3, r2
 8005270:	f040 808e 	bne.w	8005390 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005274:	2300      	movs	r3, #0
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	4b48      	ldr	r3, [pc, #288]	; (800539c <HAL_ADC_MspInit+0x14c>)
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	4a47      	ldr	r2, [pc, #284]	; (800539c <HAL_ADC_MspInit+0x14c>)
 800527e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005282:	6453      	str	r3, [r2, #68]	; 0x44
 8005284:	4b45      	ldr	r3, [pc, #276]	; (800539c <HAL_ADC_MspInit+0x14c>)
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_ADC_MspInit+0x14c>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4a40      	ldr	r2, [pc, #256]	; (800539c <HAL_ADC_MspInit+0x14c>)
 800529a:	f043 0304 	orr.w	r3, r3, #4
 800529e:	6313      	str	r3, [r2, #48]	; 0x30
 80052a0:	4b3e      	ldr	r3, [pc, #248]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	4b3a      	ldr	r3, [pc, #232]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b4:	4a39      	ldr	r2, [pc, #228]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6313      	str	r3, [r2, #48]	; 0x30
 80052bc:	4b37      	ldr	r3, [pc, #220]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052c8:	2300      	movs	r3, #0
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	4b33      	ldr	r3, [pc, #204]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	4a32      	ldr	r2, [pc, #200]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052d2:	f043 0302 	orr.w	r3, r3, #2
 80052d6:	6313      	str	r3, [r2, #48]	; 0x30
 80052d8:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_ADC_MspInit+0x14c>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80052e4:	230f      	movs	r3, #15
 80052e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052e8:	2303      	movs	r3, #3
 80052ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052f0:	f107 031c 	add.w	r3, r7, #28
 80052f4:	4619      	mov	r1, r3
 80052f6:	482a      	ldr	r0, [pc, #168]	; (80053a0 <HAL_ADC_MspInit+0x150>)
 80052f8:	f003 fa00 	bl	80086fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80052fc:	23ff      	movs	r3, #255	; 0xff
 80052fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005300:	2303      	movs	r3, #3
 8005302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005304:	2300      	movs	r3, #0
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005308:	f107 031c 	add.w	r3, r7, #28
 800530c:	4619      	mov	r1, r3
 800530e:	4825      	ldr	r0, [pc, #148]	; (80053a4 <HAL_ADC_MspInit+0x154>)
 8005310:	f003 f9f4 	bl	80086fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005314:	2303      	movs	r3, #3
 8005316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005318:	2303      	movs	r3, #3
 800531a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800531c:	2300      	movs	r3, #0
 800531e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005320:	f107 031c 	add.w	r3, r7, #28
 8005324:	4619      	mov	r1, r3
 8005326:	4820      	ldr	r0, [pc, #128]	; (80053a8 <HAL_ADC_MspInit+0x158>)
 8005328:	f003 f9e8 	bl	80086fc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800532c:	4b1f      	ldr	r3, [pc, #124]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <HAL_ADC_MspInit+0x160>)
 8005330:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005332:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005338:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800533a:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 800533c:	2200      	movs	r2, #0
 800533e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005342:	2200      	movs	r2, #0
 8005344:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005346:	4b19      	ldr	r3, [pc, #100]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800534c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005354:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005358:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800535c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800535e:	4b13      	ldr	r3, [pc, #76]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005364:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005368:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800536c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800536e:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005370:	2200      	movs	r2, #0
 8005372:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005374:	480d      	ldr	r0, [pc, #52]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005376:	f002 fe25 	bl	8007fc4 <HAL_DMA_Init>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005380:	f7ff ff32 	bl	80051e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a09      	ldr	r2, [pc, #36]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 8005388:	639a      	str	r2, [r3, #56]	; 0x38
 800538a:	4a08      	ldr	r2, [pc, #32]	; (80053ac <HAL_ADC_MspInit+0x15c>)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005390:	bf00      	nop
 8005392:	3730      	adds	r7, #48	; 0x30
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	40012100 	.word	0x40012100
 800539c:	40023800 	.word	0x40023800
 80053a0:	40020800 	.word	0x40020800
 80053a4:	40020000 	.word	0x40020000
 80053a8:	40020400 	.word	0x40020400
 80053ac:	20035df4 	.word	0x20035df4
 80053b0:	40026440 	.word	0x40026440

080053b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	; 0x30
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	f107 031c 	add.w	r3, r7, #28
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_I2C_MspInit+0xe8>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d12c      	bne.n	8005430 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	61bb      	str	r3, [r7, #24]
 80053da:	4b31      	ldr	r3, [pc, #196]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	4a30      	ldr	r2, [pc, #192]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6313      	str	r3, [r2, #48]	; 0x30
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 80053e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053f2:	23c0      	movs	r3, #192	; 0xc0
 80053f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053f6:	2312      	movs	r3, #18
 80053f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053fa:	2301      	movs	r3, #1
 80053fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053fe:	2303      	movs	r3, #3
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005402:	2304      	movs	r3, #4
 8005404:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005406:	f107 031c 	add.w	r3, r7, #28
 800540a:	4619      	mov	r1, r3
 800540c:	4825      	ldr	r0, [pc, #148]	; (80054a4 <HAL_I2C_MspInit+0xf0>)
 800540e:	f003 f975 	bl	80086fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	4a21      	ldr	r2, [pc, #132]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 800541c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005420:	6413      	str	r3, [r2, #64]	; 0x40
 8005422:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800542e:	e031      	b.n	8005494 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1c      	ldr	r2, [pc, #112]	; (80054a8 <HAL_I2C_MspInit+0xf4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d12c      	bne.n	8005494 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800543a:	2300      	movs	r3, #0
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	4b18      	ldr	r3, [pc, #96]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005442:	4a17      	ldr	r2, [pc, #92]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 8005444:	f043 0302 	orr.w	r3, r3, #2
 8005448:	6313      	str	r3, [r2, #48]	; 0x30
 800544a:	4b15      	ldr	r3, [pc, #84]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 800544c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	613b      	str	r3, [r7, #16]
 8005454:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005456:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800545a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800545c:	2312      	movs	r3, #18
 800545e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005460:	2301      	movs	r3, #1
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005464:	2303      	movs	r3, #3
 8005466:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005468:	2304      	movs	r3, #4
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800546c:	f107 031c 	add.w	r3, r7, #28
 8005470:	4619      	mov	r1, r3
 8005472:	480c      	ldr	r0, [pc, #48]	; (80054a4 <HAL_I2C_MspInit+0xf0>)
 8005474:	f003 f942 	bl	80086fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 8005482:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005486:	6413      	str	r3, [r2, #64]	; 0x40
 8005488:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <HAL_I2C_MspInit+0xec>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
}
 8005494:	bf00      	nop
 8005496:	3730      	adds	r7, #48	; 0x30
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	40005400 	.word	0x40005400
 80054a0:	40023800 	.word	0x40023800
 80054a4:	40020400 	.word	0x40020400
 80054a8:	40005800 	.word	0x40005800

080054ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b08a      	sub	sp, #40	; 0x28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b4:	f107 0314 	add.w	r3, r7, #20
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	605a      	str	r2, [r3, #4]
 80054be:	609a      	str	r2, [r3, #8]
 80054c0:	60da      	str	r2, [r3, #12]
 80054c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a69      	ldr	r2, [pc, #420]	; (8005670 <HAL_SD_MspInit+0x1c4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	f040 80cb 	bne.w	8005666 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]
 80054d4:	4b67      	ldr	r3, [pc, #412]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054de:	6453      	str	r3, [r2, #68]	; 0x44
 80054e0:	4b64      	ldr	r3, [pc, #400]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054e8:	613b      	str	r3, [r7, #16]
 80054ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	4b60      	ldr	r3, [pc, #384]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f4:	4a5f      	ldr	r2, [pc, #380]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054f6:	f043 0304 	orr.w	r3, r3, #4
 80054fa:	6313      	str	r3, [r2, #48]	; 0x30
 80054fc:	4b5d      	ldr	r3, [pc, #372]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	4b59      	ldr	r3, [pc, #356]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a58      	ldr	r2, [pc, #352]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 8005512:	f043 0308 	orr.w	r3, r3, #8
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
 8005518:	4b56      	ldr	r3, [pc, #344]	; (8005674 <HAL_SD_MspInit+0x1c8>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005524:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005528:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005532:	2303      	movs	r3, #3
 8005534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005536:	230c      	movs	r3, #12
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800553a:	f107 0314 	add.w	r3, r7, #20
 800553e:	4619      	mov	r1, r3
 8005540:	484d      	ldr	r0, [pc, #308]	; (8005678 <HAL_SD_MspInit+0x1cc>)
 8005542:	f003 f8db 	bl	80086fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005546:	2304      	movs	r3, #4
 8005548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005552:	2303      	movs	r3, #3
 8005554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005556:	230c      	movs	r3, #12
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	4619      	mov	r1, r3
 8005560:	4846      	ldr	r0, [pc, #280]	; (800567c <HAL_SD_MspInit+0x1d0>)
 8005562:	f003 f8cb 	bl	80086fc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005566:	4b46      	ldr	r3, [pc, #280]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 8005568:	4a46      	ldr	r2, [pc, #280]	; (8005684 <HAL_SD_MspInit+0x1d8>)
 800556a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800556c:	4b44      	ldr	r3, [pc, #272]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 800556e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005572:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005574:	4b42      	ldr	r3, [pc, #264]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 8005576:	2200      	movs	r2, #0
 8005578:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800557a:	4b41      	ldr	r3, [pc, #260]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 800557c:	2200      	movs	r2, #0
 800557e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005580:	4b3f      	ldr	r3, [pc, #252]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 8005582:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005586:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005588:	4b3d      	ldr	r3, [pc, #244]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 800558a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800558e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 8005592:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005596:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005598:	4b39      	ldr	r3, [pc, #228]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 800559a:	2220      	movs	r2, #32
 800559c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800559e:	4b38      	ldr	r3, [pc, #224]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80055a4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80055a6:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055a8:	2204      	movs	r2, #4
 80055aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055ae:	2203      	movs	r2, #3
 80055b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80055b2:	4b33      	ldr	r3, [pc, #204]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80055b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80055ba:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80055c2:	482f      	ldr	r0, [pc, #188]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055c4:	f002 fcfe 	bl	8007fc4 <HAL_DMA_Init>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80055ce:	f7ff fe0b 	bl	80051e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a2a      	ldr	r2, [pc, #168]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40
 80055d8:	4a29      	ldr	r2, [pc, #164]	; (8005680 <HAL_SD_MspInit+0x1d4>)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 80055e0:	4a2a      	ldr	r2, [pc, #168]	; (800568c <HAL_SD_MspInit+0x1e0>)
 80055e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80055e4:	4b28      	ldr	r3, [pc, #160]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 80055e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055ec:	4b26      	ldr	r3, [pc, #152]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055f2:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055f8:	4b23      	ldr	r3, [pc, #140]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 80055fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005606:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005608:	4b1f      	ldr	r3, [pc, #124]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 800560a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800560e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005610:	4b1d      	ldr	r3, [pc, #116]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005612:	2220      	movs	r2, #32
 8005614:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005616:	4b1c      	ldr	r3, [pc, #112]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005618:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800561c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005620:	2204      	movs	r2, #4
 8005622:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005624:	4b18      	ldr	r3, [pc, #96]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005626:	2203      	movs	r2, #3
 8005628:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800562a:	4b17      	ldr	r3, [pc, #92]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 800562c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005632:	4b15      	ldr	r3, [pc, #84]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005634:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005638:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800563a:	4813      	ldr	r0, [pc, #76]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 800563c:	f002 fcc2 	bl	8007fc4 <HAL_DMA_Init>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005646:	f7ff fdcf 	bl	80051e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a0e      	ldr	r2, [pc, #56]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 800564e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005650:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <HAL_SD_MspInit+0x1dc>)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005656:	2200      	movs	r2, #0
 8005658:	2100      	movs	r1, #0
 800565a:	2031      	movs	r0, #49	; 0x31
 800565c:	f002 fc7b 	bl	8007f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005660:	2031      	movs	r0, #49	; 0x31
 8005662:	f002 fc94 	bl	8007f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005666:	bf00      	nop
 8005668:	3728      	adds	r7, #40	; 0x28
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40023800 	.word	0x40023800
 8005678:	40020800 	.word	0x40020800
 800567c:	40020c00 	.word	0x40020c00
 8005680:	2003591c 	.word	0x2003591c
 8005684:	40026458 	.word	0x40026458
 8005688:	20035c50 	.word	0x20035c50
 800568c:	400264a0 	.word	0x400264a0

08005690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08a      	sub	sp, #40	; 0x28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005698:	f107 0314 	add.w	r3, r7, #20
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	609a      	str	r2, [r3, #8]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a19      	ldr	r2, [pc, #100]	; (8005714 <HAL_SPI_MspInit+0x84>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d12c      	bne.n	800570c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80056b2:	2300      	movs	r3, #0
 80056b4:	613b      	str	r3, [r7, #16]
 80056b6:	4b18      	ldr	r3, [pc, #96]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c0:	6413      	str	r3, [r2, #64]	; 0x40
 80056c2:	4b15      	ldr	r3, [pc, #84]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	4b11      	ldr	r3, [pc, #68]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	4a10      	ldr	r2, [pc, #64]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056d8:	f043 0302 	orr.w	r3, r3, #2
 80056dc:	6313      	str	r3, [r2, #48]	; 0x30
 80056de:	4b0e      	ldr	r3, [pc, #56]	; (8005718 <HAL_SPI_MspInit+0x88>)
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80056ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80056ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f0:	2302      	movs	r3, #2
 80056f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	2300      	movs	r3, #0
 80056f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f8:	2303      	movs	r3, #3
 80056fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80056fc:	2305      	movs	r3, #5
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005700:	f107 0314 	add.w	r3, r7, #20
 8005704:	4619      	mov	r1, r3
 8005706:	4805      	ldr	r0, [pc, #20]	; (800571c <HAL_SPI_MspInit+0x8c>)
 8005708:	f002 fff8 	bl	80086fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800570c:	bf00      	nop
 800570e:	3728      	adds	r7, #40	; 0x28
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	40003800 	.word	0x40003800
 8005718:	40023800 	.word	0x40023800
 800571c:	40020400 	.word	0x40020400

08005720 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08c      	sub	sp, #48	; 0x30
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005728:	f107 031c 	add.w	r3, r7, #28
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	605a      	str	r2, [r3, #4]
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	60da      	str	r2, [r3, #12]
 8005736:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <HAL_TIM_PWM_MspInit+0xd4>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d12d      	bne.n	800579e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 800574c:	f043 0301 	orr.w	r3, r3, #1
 8005750:	6453      	str	r3, [r2, #68]	; 0x44
 8005752:	4b29      	ldr	r3, [pc, #164]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	4b25      	ldr	r3, [pc, #148]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	4a24      	ldr	r2, [pc, #144]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005768:	f043 0310 	orr.w	r3, r3, #16
 800576c:	6313      	str	r3, [r2, #48]	; 0x30
 800576e:	4b22      	ldr	r3, [pc, #136]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800577a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800577e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005780:	2302      	movs	r3, #2
 8005782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005788:	2300      	movs	r3, #0
 800578a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800578c:	2301      	movs	r3, #1
 800578e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005790:	f107 031c 	add.w	r3, r7, #28
 8005794:	4619      	mov	r1, r3
 8005796:	4819      	ldr	r0, [pc, #100]	; (80057fc <HAL_TIM_PWM_MspInit+0xdc>)
 8005798:	f002 ffb0 	bl	80086fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800579c:	e026      	b.n	80057ec <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a17      	ldr	r2, [pc, #92]	; (8005800 <HAL_TIM_PWM_MspInit+0xe0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10e      	bne.n	80057c6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b0:	4a11      	ldr	r2, [pc, #68]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057b2:	f043 0302 	orr.w	r3, r3, #2
 80057b6:	6413      	str	r3, [r2, #64]	; 0x40
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	f003 0302 	and.w	r3, r3, #2
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	693b      	ldr	r3, [r7, #16]
}
 80057c4:	e012      	b.n	80057ec <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a0e      	ldr	r2, [pc, #56]	; (8005804 <HAL_TIM_PWM_MspInit+0xe4>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10d      	bne.n	80057ec <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d8:	4a07      	ldr	r2, [pc, #28]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057da:	f043 0304 	orr.w	r3, r3, #4
 80057de:	6413      	str	r3, [r2, #64]	; 0x40
 80057e0:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
}
 80057ec:	bf00      	nop
 80057ee:	3730      	adds	r7, #48	; 0x30
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	40010000 	.word	0x40010000
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40021000 	.word	0x40021000
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800

08005808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a3e      	ldr	r2, [pc, #248]	; (8005910 <HAL_TIM_Base_MspInit+0x108>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d116      	bne.n	8005848 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800581a:	2300      	movs	r3, #0
 800581c:	61fb      	str	r3, [r7, #28]
 800581e:	4b3d      	ldr	r3, [pc, #244]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005822:	4a3c      	ldr	r2, [pc, #240]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005824:	f043 0310 	orr.w	r3, r3, #16
 8005828:	6413      	str	r3, [r2, #64]	; 0x40
 800582a:	4b3a      	ldr	r3, [pc, #232]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005836:	2200      	movs	r2, #0
 8005838:	2101      	movs	r1, #1
 800583a:	2036      	movs	r0, #54	; 0x36
 800583c:	f002 fb8b 	bl	8007f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005840:	2036      	movs	r0, #54	; 0x36
 8005842:	f002 fba4 	bl	8007f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005846:	e05e      	b.n	8005906 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a32      	ldr	r2, [pc, #200]	; (8005918 <HAL_TIM_Base_MspInit+0x110>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d116      	bne.n	8005880 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	4b2f      	ldr	r3, [pc, #188]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585a:	4a2e      	ldr	r2, [pc, #184]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	6413      	str	r3, [r2, #64]	; 0x40
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	61bb      	str	r3, [r7, #24]
 800586c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800586e:	2200      	movs	r2, #0
 8005870:	2100      	movs	r1, #0
 8005872:	2037      	movs	r0, #55	; 0x37
 8005874:	f002 fb6f 	bl	8007f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005878:	2037      	movs	r0, #55	; 0x37
 800587a:	f002 fb88 	bl	8007f8e <HAL_NVIC_EnableIRQ>
}
 800587e:	e042      	b.n	8005906 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a25      	ldr	r2, [pc, #148]	; (800591c <HAL_TIM_Base_MspInit+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d10e      	bne.n	80058a8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	4b21      	ldr	r3, [pc, #132]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005892:	4a20      	ldr	r2, [pc, #128]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 8005894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005898:	6453      	str	r3, [r2, #68]	; 0x44
 800589a:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 800589c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	697b      	ldr	r3, [r7, #20]
}
 80058a6:	e02e      	b.n	8005906 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1c      	ldr	r2, [pc, #112]	; (8005920 <HAL_TIM_Base_MspInit+0x118>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d10e      	bne.n	80058d0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	4b17      	ldr	r3, [pc, #92]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4a16      	ldr	r2, [pc, #88]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058c0:	6453      	str	r3, [r2, #68]	; 0x44
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
}
 80058ce:	e01a      	b.n	8005906 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a13      	ldr	r2, [pc, #76]	; (8005924 <HAL_TIM_Base_MspInit+0x11c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d115      	bne.n	8005906 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	4b0d      	ldr	r3, [pc, #52]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e8:	6413      	str	r3, [r2, #64]	; 0x40
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <HAL_TIM_Base_MspInit+0x10c>)
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80058f6:	2200      	movs	r2, #0
 80058f8:	2100      	movs	r1, #0
 80058fa:	202c      	movs	r0, #44	; 0x2c
 80058fc:	f002 fb2b 	bl	8007f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005900:	202c      	movs	r0, #44	; 0x2c
 8005902:	f002 fb44 	bl	8007f8e <HAL_NVIC_EnableIRQ>
}
 8005906:	bf00      	nop
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	40001000 	.word	0x40001000
 8005914:	40023800 	.word	0x40023800
 8005918:	40001400 	.word	0x40001400
 800591c:	40014400 	.word	0x40014400
 8005920:	40014800 	.word	0x40014800
 8005924:	40001c00 	.word	0x40001c00

08005928 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	; 0x28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005930:	f107 0314 	add.w	r3, r7, #20
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	605a      	str	r2, [r3, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <HAL_TIM_Encoder_MspInit+0x94>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d133      	bne.n	80059b2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	4b1c      	ldr	r3, [pc, #112]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005954:	f043 0302 	orr.w	r3, r3, #2
 8005958:	6453      	str	r3, [r2, #68]	; 0x44
 800595a:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	613b      	str	r3, [r7, #16]
 8005964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005966:	2300      	movs	r3, #0
 8005968:	60fb      	str	r3, [r7, #12]
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800596c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596e:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005970:	f043 0304 	orr.w	r3, r3, #4
 8005974:	6313      	str	r3, [r2, #48]	; 0x30
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005982:	23c0      	movs	r3, #192	; 0xc0
 8005984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005986:	2302      	movs	r3, #2
 8005988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800598e:	2300      	movs	r3, #0
 8005990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005992:	2303      	movs	r3, #3
 8005994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005996:	f107 0314 	add.w	r3, r7, #20
 800599a:	4619      	mov	r1, r3
 800599c:	4809      	ldr	r0, [pc, #36]	; (80059c4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800599e:	f002 fead 	bl	80086fc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80059a2:	2200      	movs	r2, #0
 80059a4:	2100      	movs	r1, #0
 80059a6:	202c      	movs	r0, #44	; 0x2c
 80059a8:	f002 fad5 	bl	8007f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80059ac:	202c      	movs	r0, #44	; 0x2c
 80059ae:	f002 faee 	bl	8007f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80059b2:	bf00      	nop
 80059b4:	3728      	adds	r7, #40	; 0x28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40020800 	.word	0x40020800

080059c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	; 0x30
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d0:	f107 031c 	add.w	r3, r7, #28
 80059d4:	2200      	movs	r2, #0
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	605a      	str	r2, [r3, #4]
 80059da:	609a      	str	r2, [r3, #8]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5c      	ldr	r2, [pc, #368]	; (8005b58 <HAL_TIM_MspPostInit+0x190>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d11f      	bne.n	8005a2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80059ea:	2300      	movs	r3, #0
 80059ec:	61bb      	str	r3, [r7, #24]
 80059ee:	4b5b      	ldr	r3, [pc, #364]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 80059f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f2:	4a5a      	ldr	r2, [pc, #360]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 80059f4:	f043 0310 	orr.w	r3, r3, #16
 80059f8:	6313      	str	r3, [r2, #48]	; 0x30
 80059fa:	4b58      	ldr	r3, [pc, #352]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 80059fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a14:	2300      	movs	r3, #0
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a1c:	f107 031c 	add.w	r3, r7, #28
 8005a20:	4619      	mov	r1, r3
 8005a22:	484f      	ldr	r0, [pc, #316]	; (8005b60 <HAL_TIM_MspPostInit+0x198>)
 8005a24:	f002 fe6a 	bl	80086fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005a28:	e091      	b.n	8005b4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a4d      	ldr	r2, [pc, #308]	; (8005b64 <HAL_TIM_MspPostInit+0x19c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d11e      	bne.n	8005a72 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	4b48      	ldr	r3, [pc, #288]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	4a47      	ldr	r2, [pc, #284]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a3e:	f043 0302 	orr.w	r3, r3, #2
 8005a42:	6313      	str	r3, [r2, #48]	; 0x30
 8005a44:	4b45      	ldr	r3, [pc, #276]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005a50:	2330      	movs	r3, #48	; 0x30
 8005a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a54:	2302      	movs	r3, #2
 8005a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005a60:	2302      	movs	r3, #2
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a64:	f107 031c 	add.w	r3, r7, #28
 8005a68:	4619      	mov	r1, r3
 8005a6a:	483f      	ldr	r0, [pc, #252]	; (8005b68 <HAL_TIM_MspPostInit+0x1a0>)
 8005a6c:	f002 fe46 	bl	80086fc <HAL_GPIO_Init>
}
 8005a70:	e06d      	b.n	8005b4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a3d      	ldr	r2, [pc, #244]	; (8005b6c <HAL_TIM_MspPostInit+0x1a4>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d11f      	bne.n	8005abc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	613b      	str	r3, [r7, #16]
 8005a80:	4b36      	ldr	r3, [pc, #216]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a84:	4a35      	ldr	r2, [pc, #212]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a86:	f043 0308 	orr.w	r3, r3, #8
 8005a8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8c:	4b33      	ldr	r3, [pc, #204]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	613b      	str	r3, [r7, #16]
 8005a96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005a98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005aaa:	2302      	movs	r3, #2
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005aae:	f107 031c 	add.w	r3, r7, #28
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	482e      	ldr	r0, [pc, #184]	; (8005b70 <HAL_TIM_MspPostInit+0x1a8>)
 8005ab6:	f002 fe21 	bl	80086fc <HAL_GPIO_Init>
}
 8005aba:	e048      	b.n	8005b4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <HAL_TIM_MspPostInit+0x1ac>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d11f      	bne.n	8005b06 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	60fb      	str	r3, [r7, #12]
 8005aca:	4b24      	ldr	r3, [pc, #144]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ace:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005ad0:	f043 0302 	orr.w	r3, r3, #2
 8005ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ad6:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af0:	2300      	movs	r3, #0
 8005af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005af4:	2303      	movs	r3, #3
 8005af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005af8:	f107 031c 	add.w	r3, r7, #28
 8005afc:	4619      	mov	r1, r3
 8005afe:	481a      	ldr	r0, [pc, #104]	; (8005b68 <HAL_TIM_MspPostInit+0x1a0>)
 8005b00:	f002 fdfc 	bl	80086fc <HAL_GPIO_Init>
}
 8005b04:	e023      	b.n	8005b4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1b      	ldr	r2, [pc, #108]	; (8005b78 <HAL_TIM_MspPostInit+0x1b0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d11e      	bne.n	8005b4e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	4a10      	ldr	r2, [pc, #64]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005b1a:	f043 0302 	orr.w	r3, r3, #2
 8005b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <HAL_TIM_MspPostInit+0x194>)
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	f003 0302 	and.w	r3, r3, #2
 8005b28:	60bb      	str	r3, [r7, #8]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b32:	2302      	movs	r3, #2
 8005b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b42:	f107 031c 	add.w	r3, r7, #28
 8005b46:	4619      	mov	r1, r3
 8005b48:	4807      	ldr	r0, [pc, #28]	; (8005b68 <HAL_TIM_MspPostInit+0x1a0>)
 8005b4a:	f002 fdd7 	bl	80086fc <HAL_GPIO_Init>
}
 8005b4e:	bf00      	nop
 8005b50:	3730      	adds	r7, #48	; 0x30
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40010000 	.word	0x40010000
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40020400 	.word	0x40020400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40020c00 	.word	0x40020c00
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	; 0x28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b84:	f107 0314 	add.w	r3, r7, #20
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	609a      	str	r2, [r3, #8]
 8005b90:	60da      	str	r2, [r3, #12]
 8005b92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <HAL_UART_MspInit+0x84>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d12b      	bne.n	8005bf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	4b18      	ldr	r3, [pc, #96]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	4a17      	ldr	r2, [pc, #92]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bac:	6413      	str	r3, [r2, #64]	; 0x40
 8005bae:	4b15      	ldr	r3, [pc, #84]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	4b11      	ldr	r3, [pc, #68]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	4a10      	ldr	r2, [pc, #64]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005bc4:	f043 0308 	orr.w	r3, r3, #8
 8005bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005bca:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <HAL_UART_MspInit+0x88>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	f003 0308 	and.w	r3, r3, #8
 8005bd2:	60fb      	str	r3, [r7, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005bd6:	2360      	movs	r3, #96	; 0x60
 8005bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bda:	2302      	movs	r3, #2
 8005bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be2:	2303      	movs	r3, #3
 8005be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005be6:	2307      	movs	r3, #7
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bea:	f107 0314 	add.w	r3, r7, #20
 8005bee:	4619      	mov	r1, r3
 8005bf0:	4805      	ldr	r0, [pc, #20]	; (8005c08 <HAL_UART_MspInit+0x8c>)
 8005bf2:	f002 fd83 	bl	80086fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005bf6:	bf00      	nop
 8005bf8:	3728      	adds	r7, #40	; 0x28
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40004400 	.word	0x40004400
 8005c04:	40023800 	.word	0x40023800
 8005c08:	40020c00 	.word	0x40020c00

08005c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005c10:	e7fe      	b.n	8005c10 <NMI_Handler+0x4>

08005c12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005c12:	b480      	push	{r7}
 8005c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005c16:	e7fe      	b.n	8005c16 <HardFault_Handler+0x4>

08005c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005c1c:	e7fe      	b.n	8005c1c <MemManage_Handler+0x4>

08005c1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005c22:	e7fe      	b.n	8005c22 <BusFault_Handler+0x4>

08005c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005c28:	e7fe      	b.n	8005c28 <UsageFault_Handler+0x4>

08005c2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005c46:	b480      	push	{r7}
 8005c48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005c58:	f001 fc5c 	bl	8007514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005c5c:	bf00      	nop
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005c64:	2004      	movs	r0, #4
 8005c66:	f002 ff25 	bl	8008ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005c6a:	bf00      	nop
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005c72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005c76:	f002 ff1d 	bl	8008ab4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005c7a:	bf00      	nop
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005c84:	4803      	ldr	r0, [pc, #12]	; (8005c94 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005c86:	f006 ff34 	bl	800caf2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005c8a:	4803      	ldr	r0, [pc, #12]	; (8005c98 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005c8c:	f006 ff31 	bl	800caf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005c90:	bf00      	nop
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	200359d4 	.word	0x200359d4
 8005c98:	20035bd0 	.word	0x20035bd0

08005c9c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005ca0:	4802      	ldr	r0, [pc, #8]	; (8005cac <SDIO_IRQHandler+0x10>)
 8005ca2:	f004 ffcd 	bl	800ac40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20035d30 	.word	0x20035d30

08005cb0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005cb4:	4802      	ldr	r0, [pc, #8]	; (8005cc0 <TIM6_DAC_IRQHandler+0x10>)
 8005cb6:	f006 ff1c 	bl	800caf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005cba:	bf00      	nop
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	20035cb0 	.word	0x20035cb0

08005cc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005cc8:	4802      	ldr	r0, [pc, #8]	; (8005cd4 <TIM7_IRQHandler+0x10>)
 8005cca:	f006 ff12 	bl	800caf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20035e54 	.word	0x20035e54

08005cd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005cdc:	4802      	ldr	r0, [pc, #8]	; (8005ce8 <DMA2_Stream2_IRQHandler+0x10>)
 8005cde:	f002 fa99 	bl	8008214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005ce2:	bf00      	nop
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20035df4 	.word	0x20035df4

08005cec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005cf0:	4802      	ldr	r0, [pc, #8]	; (8005cfc <DMA2_Stream3_IRQHandler+0x10>)
 8005cf2:	f002 fa8f 	bl	8008214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005cf6:	bf00      	nop
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	2003591c 	.word	0x2003591c

08005d00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005d04:	4802      	ldr	r0, [pc, #8]	; (8005d10 <DMA2_Stream6_IRQHandler+0x10>)
 8005d06:	f002 fa85 	bl	8008214 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005d0a:	bf00      	nop
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	20035c50 	.word	0x20035c50

08005d14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d20:	2300      	movs	r3, #0
 8005d22:	617b      	str	r3, [r7, #20]
 8005d24:	e00a      	b.n	8005d3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005d26:	f3af 8000 	nop.w
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	60ba      	str	r2, [r7, #8]
 8005d32:	b2ca      	uxtb	r2, r1
 8005d34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	dbf0      	blt.n	8005d26 <_read+0x12>
	}

return len;
 8005d44:	687b      	ldr	r3, [r7, #4]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
	return -1;
 8005d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d76:	605a      	str	r2, [r3, #4]
	return 0;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <_isatty>:

int _isatty(int file)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
	return 1;
 8005d8e:	2301      	movs	r3, #1
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
	return 0;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
	...

08005db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005dc0:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <_sbrk+0x5c>)
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <_sbrk+0x60>)
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005dcc:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <_sbrk+0x64>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005dd4:	4b11      	ldr	r3, [pc, #68]	; (8005e1c <_sbrk+0x64>)
 8005dd6:	4a12      	ldr	r2, [pc, #72]	; (8005e20 <_sbrk+0x68>)
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005dda:	4b10      	ldr	r3, [pc, #64]	; (8005e1c <_sbrk+0x64>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d207      	bcs.n	8005df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005de8:	f00d f918 	bl	801301c <__errno>
 8005dec:	4602      	mov	r2, r0
 8005dee:	230c      	movs	r3, #12
 8005df0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	e009      	b.n	8005e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <_sbrk+0x64>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005dfe:	4b07      	ldr	r3, [pc, #28]	; (8005e1c <_sbrk+0x64>)
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4413      	add	r3, r2
 8005e06:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <_sbrk+0x64>)
 8005e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	20050000 	.word	0x20050000
 8005e18:	00000800 	.word	0x00000800
 8005e1c:	2000029c 	.word	0x2000029c
 8005e20:	20037fa8 	.word	0x20037fa8

08005e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e24:	b480      	push	{r7}
 8005e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005e28:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <SystemInit+0x28>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <SystemInit+0x28>)
 8005e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <SystemInit+0x28>)
 8005e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005e3e:	609a      	str	r2, [r3, #8]
#endif
}
 8005e40:	bf00      	nop
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	e000ed00 	.word	0xe000ed00

08005e50 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	af00      	add	r7, sp, #0
	lcd_clear();
 8005e54:	f7fb f924 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005e58:	2100      	movs	r1, #0
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	f7fb f930 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005e60:	4814      	ldr	r0, [pc, #80]	; (8005eb4 <batteryLowMode+0x64>)
 8005e62:	f7fb f957 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005e66:	2101      	movs	r1, #1
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7fb f929 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005e6e:	4812      	ldr	r0, [pc, #72]	; (8005eb8 <batteryLowMode+0x68>)
 8005e70:	f7fb f950 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005e74:	2152      	movs	r1, #82	; 0x52
 8005e76:	4811      	ldr	r0, [pc, #68]	; (8005ebc <batteryLowMode+0x6c>)
 8005e78:	f7fc f80c 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005e7c:	2064      	movs	r0, #100	; 0x64
 8005e7e:	f001 fb69 	bl	8007554 <HAL_Delay>
		led.fullColor('Y');
 8005e82:	2159      	movs	r1, #89	; 0x59
 8005e84:	480d      	ldr	r0, [pc, #52]	; (8005ebc <batteryLowMode+0x6c>)
 8005e86:	f7fc f805 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005e8a:	2064      	movs	r0, #100	; 0x64
 8005e8c:	f001 fb62 	bl	8007554 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005e90:	480b      	ldr	r0, [pc, #44]	; (8005ec0 <batteryLowMode+0x70>)
 8005e92:	f7fb ff9b 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	bf0c      	ite	eq
 8005e9c:	2301      	moveq	r3, #1
 8005e9e:	2300      	movne	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0e6      	beq.n	8005e74 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005ea6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eaa:	f001 fb53 	bl	8007554 <HAL_Delay>
			break;
 8005eae:	bf00      	nop
		}
	}
}
 8005eb0:	bf00      	nop
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	0801825c 	.word	0x0801825c
 8005eb8:	08018264 	.word	0x08018264
 8005ebc:	200005ac 	.word	0x200005ac
 8005ec0:	200005a0 	.word	0x200005a0

08005ec4 <cppInit>:

void cppInit(void)
{
 8005ec4:	b598      	push	{r3, r4, r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
	lcd_init();
 8005ec8:	f7fb f8a6 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005ecc:	483f      	ldr	r0, [pc, #252]	; (8005fcc <cppInit+0x108>)
 8005ece:	f7fd fd67 	bl	80039a0 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005ed2:	2064      	movs	r0, #100	; 0x64
 8005ed4:	f001 fb3e 	bl	8007554 <HAL_Delay>
	power_sensor.updateValues();
 8005ed8:	483c      	ldr	r0, [pc, #240]	; (8005fcc <cppInit+0x108>)
 8005eda:	f7fd fd71 	bl	80039c0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005ede:	f7fb f8df 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	f7fb f8eb 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005eea:	4839      	ldr	r0, [pc, #228]	; (8005fd0 <cppInit+0x10c>)
 8005eec:	f7fb f912 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	2000      	movs	r0, #0
 8005ef4:	f7fb f8e4 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005ef8:	4834      	ldr	r0, [pc, #208]	; (8005fcc <cppInit+0x108>)
 8005efa:	f7fd fd8b 	bl	8003a14 <_ZN11PowerSensor17getButteryVoltageEv>
 8005efe:	ee10 3a10 	vmov	r3, s0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fa fb38 	bl	8000578 <__aeabi_f2d>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4623      	mov	r3, r4
 8005f10:	4830      	ldr	r0, [pc, #192]	; (8005fd4 <cppInit+0x110>)
 8005f12:	f7fb f8ff 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8005f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f1a:	f001 fb1b 	bl	8007554 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 8005f1e:	482b      	ldr	r0, [pc, #172]	; (8005fcc <cppInit+0x108>)
 8005f20:	f7fd fd8a 	bl	8003a38 <_ZN11PowerSensor12butteryCheckEv>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d001      	beq.n	8005f2e <cppInit+0x6a>
 8005f2a:	f7ff ff91 	bl	8005e50 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8005f2e:	482a      	ldr	r0, [pc, #168]	; (8005fd8 <cppInit+0x114>)
 8005f30:	f7fd f804 	bl	8002f3c <_ZN6Logger10sdCardInitEv>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <cppInit+0x86>
		led.fullColor('G');
 8005f3a:	2147      	movs	r1, #71	; 0x47
 8005f3c:	4827      	ldr	r0, [pc, #156]	; (8005fdc <cppInit+0x118>)
 8005f3e:	f7fb ffa9 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005f42:	2064      	movs	r0, #100	; 0x64
 8005f44:	f001 fb06 	bl	8007554 <HAL_Delay>
 8005f48:	e006      	b.n	8005f58 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005f4a:	2152      	movs	r1, #82	; 0x52
 8005f4c:	4823      	ldr	r0, [pc, #140]	; (8005fdc <cppInit+0x118>)
 8005f4e:	f7fb ffa1 	bl	8001e94 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005f52:	2064      	movs	r0, #100	; 0x64
 8005f54:	f001 fafe 	bl	8007554 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005f58:	4821      	ldr	r0, [pc, #132]	; (8005fe0 <cppInit+0x11c>)
 8005f5a:	f7fc f8f7 	bl	800214c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005f5e:	4821      	ldr	r0, [pc, #132]	; (8005fe4 <cppInit+0x120>)
 8005f60:	f7fd fa02 	bl	8003368 <_ZN5Motor4initEv>
	encoder.init();
 8005f64:	4820      	ldr	r0, [pc, #128]	; (8005fe8 <cppInit+0x124>)
 8005f66:	f7fb f919 	bl	800119c <_ZN7Encoder4initEv>
	imu.init();
 8005f6a:	4820      	ldr	r0, [pc, #128]	; (8005fec <cppInit+0x128>)
 8005f6c:	f7fb fd48 	bl	8001a00 <_ZN3IMU4initEv>
	line_trace.init();
 8005f70:	481f      	ldr	r0, [pc, #124]	; (8005ff0 <cppInit+0x12c>)
 8005f72:	f7fc fdf5 	bl	8002b60 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8005f76:	481a      	ldr	r0, [pc, #104]	; (8005fe0 <cppInit+0x11c>)
 8005f78:	f7fc fa28 	bl	80023cc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f80:	f001 fae8 	bl	8007554 <HAL_Delay>

	led.fullColor('M');
 8005f84:	214d      	movs	r1, #77	; 0x4d
 8005f86:	4815      	ldr	r0, [pc, #84]	; (8005fdc <cppInit+0x118>)
 8005f88:	f7fb ff84 	bl	8001e94 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005f8c:	4817      	ldr	r0, [pc, #92]	; (8005fec <cppInit+0x128>)
 8005f8e:	f7fb fe09 	bl	8001ba4 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8005f92:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005ff4 <cppInit+0x130>
 8005f96:	eddf 0a18 	vldr	s1, [pc, #96]	; 8005ff8 <cppInit+0x134>
 8005f9a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005ffc <cppInit+0x138>
 8005f9e:	4818      	ldr	r0, [pc, #96]	; (8006000 <cppInit+0x13c>)
 8005fa0:	f7fe f8d6 	bl	8004150 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8005fa4:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8006004 <cppInit+0x140>
 8005fa8:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006008 <cppInit+0x144>
 8005fac:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800600c <cppInit+0x148>
 8005fb0:	4813      	ldr	r0, [pc, #76]	; (8006000 <cppInit+0x13c>)
 8005fb2:	f7fe f8e6 	bl	8004182 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005fb6:	480c      	ldr	r0, [pc, #48]	; (8005fe8 <cppInit+0x124>)
 8005fb8:	f7fb fa2e 	bl	8001418 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005fbc:	4814      	ldr	r0, [pc, #80]	; (8006010 <cppInit+0x14c>)
 8005fbe:	f7fd fbbd 	bl	800373c <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005fc2:	4814      	ldr	r0, [pc, #80]	; (8006014 <cppInit+0x150>)
 8005fc4:	f7fd fc54 	bl	8003870 <_ZN13PathFollowing4initEv>

}
 8005fc8:	bf00      	nop
 8005fca:	bd98      	pop	{r3, r4, r7, pc}
 8005fcc:	200005b0 	.word	0x200005b0
 8005fd0:	08018268 	.word	0x08018268
 8005fd4:	08018270 	.word	0x08018270
 8005fd8:	200005d0 	.word	0x200005d0
 8005fdc:	200005ac 	.word	0x200005ac
 8005fe0:	200002a0 	.word	0x200002a0
 8005fe4:	200005a8 	.word	0x200005a8
 8005fe8:	20015d98 	.word	0x20015d98
 8005fec:	200005bc 	.word	0x200005bc
 8005ff0:	20015e20 	.word	0x20015e20
 8005ff4:	3cceca68 	.word	0x3cceca68
 8005ff8:	4180f06f 	.word	0x4180f06f
 8005ffc:	3fea2d0e 	.word	0x3fea2d0e
 8006000:	20015db0 	.word	0x20015db0
 8006004:	3ab7dacd 	.word	0x3ab7dacd
 8006008:	3f5e3fbc 	.word	0x3f5e3fbc
 800600c:	3d8eefa2 	.word	0x3d8eefa2
 8006010:	20015df0 	.word	0x20015df0
 8006014:	2001be68 	.word	0x2001be68

08006018 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800601c:	4819      	ldr	r0, [pc, #100]	; (8006084 <cppFlip1ms+0x6c>)
 800601e:	f7fc f8f3 	bl	8002208 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8006022:	4819      	ldr	r0, [pc, #100]	; (8006088 <cppFlip1ms+0x70>)
 8006024:	f7fb fd1c 	bl	8001a60 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8006028:	4818      	ldr	r0, [pc, #96]	; (800608c <cppFlip1ms+0x74>)
 800602a:	f7fb f8d9 	bl	80011e0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 800602e:	4818      	ldr	r0, [pc, #96]	; (8006090 <cppFlip1ms+0x78>)
 8006030:	f7fc fe2e 	bl	8002c90 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006034:	4817      	ldr	r0, [pc, #92]	; (8006094 <cppFlip1ms+0x7c>)
 8006036:	f7fe f8bd 	bl	80041b4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800603a:	4817      	ldr	r0, [pc, #92]	; (8006098 <cppFlip1ms+0x80>)
 800603c:	f7fd fb62 	bl	8003704 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006040:	4816      	ldr	r0, [pc, #88]	; (800609c <cppFlip1ms+0x84>)
 8006042:	f7fd f9a3 	bl	800338c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006046:	4b16      	ldr	r3, [pc, #88]	; (80060a0 <cppFlip1ms+0x88>)
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <cppFlip1ms+0x88>)
 8006050:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <cppFlip1ms+0x88>)
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d90c      	bls.n	8006074 <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 800605a:	480b      	ldr	r0, [pc, #44]	; (8006088 <cppFlip1ms+0x70>)
 800605c:	f7fb fd58 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 8006060:	eef0 7a40 	vmov.f32	s15, s0
 8006064:	eeb0 0a67 	vmov.f32	s0, s15
 8006068:	480e      	ldr	r0, [pc, #56]	; (80060a4 <cppFlip1ms+0x8c>)
 800606a:	f7fd fe43 	bl	8003cf4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <cppFlip1ms+0x88>)
 8006070:	2200      	movs	r2, #0
 8006072:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 8006074:	4806      	ldr	r0, [pc, #24]	; (8006090 <cppFlip1ms+0x78>)
 8006076:	f7fc fee7 	bl	8002e48 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 800607a:	4804      	ldr	r0, [pc, #16]	; (800608c <cppFlip1ms+0x74>)
 800607c:	f7fb f9da 	bl	8001434 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006080:	bf00      	nop
 8006082:	bd80      	pop	{r7, pc}
 8006084:	200002a0 	.word	0x200002a0
 8006088:	200005bc 	.word	0x200005bc
 800608c:	20015d98 	.word	0x20015d98
 8006090:	20015e20 	.word	0x20015e20
 8006094:	20015db0 	.word	0x20015db0
 8006098:	20015df0 	.word	0x20015df0
 800609c:	200005a8 	.word	0x200005a8
 80060a0:	20033592 	.word	0x20033592
 80060a4:	2001bc5c 	.word	0x2001bc5c

080060a8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80060ac:	4802      	ldr	r0, [pc, #8]	; (80060b8 <cppFlip100ns+0x10>)
 80060ae:	f7fc f85d 	bl	800216c <_ZN10LineSensor17storeSensorValuesEv>
}
 80060b2:	bf00      	nop
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	200002a0 	.word	0x200002a0

080060bc <cppFlip10ms>:

void cppFlip10ms(void)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <cppFlip10ms+0x30>)
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	3301      	adds	r3, #1
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <cppFlip10ms+0x30>)
 80060ca:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80060cc:	4b07      	ldr	r3, [pc, #28]	; (80060ec <cppFlip10ms+0x30>)
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	2b06      	cmp	r3, #6
 80060d2:	d905      	bls.n	80060e0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80060d4:	4806      	ldr	r0, [pc, #24]	; (80060f0 <cppFlip10ms+0x34>)
 80060d6:	f7fd fe49 	bl	8003d6c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80060da:	4b04      	ldr	r3, [pc, #16]	; (80060ec <cppFlip10ms+0x30>)
 80060dc:	2200      	movs	r2, #0
 80060de:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80060e0:	4b02      	ldr	r3, [pc, #8]	; (80060ec <cppFlip10ms+0x30>)
 80060e2:	881a      	ldrh	r2, [r3, #0]
 80060e4:	4b03      	ldr	r3, [pc, #12]	; (80060f4 <cppFlip10ms+0x38>)
 80060e6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80060e8:	bf00      	nop
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20033594 	.word	0x20033594
 80060f0:	2001bc5c 	.word	0x2001bc5c
 80060f4:	20033590 	.word	0x20033590

080060f8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	4603      	mov	r3, r0
 8006100:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	4619      	mov	r1, r3
 8006106:	4803      	ldr	r0, [pc, #12]	; (8006114 <cppExit+0x1c>)
 8006108:	f7fd fd2e 	bl	8003b68 <_ZN10SideSensor12updateStatusEt>
}
 800610c:	bf00      	nop
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	20000598 	.word	0x20000598

08006118 <cppLoop>:

void cppLoop(void)
{
 8006118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800611c:	b08b      	sub	sp, #44	; 0x2c
 800611e:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8006120:	48bf      	ldr	r0, [pc, #764]	; (8006420 <cppLoop+0x308>)
 8006122:	f7fd fcbb 	bl	8003a9c <_ZN12RotarySwitch8getValueEv>
 8006126:	4603      	mov	r3, r0
 8006128:	2b0f      	cmp	r3, #15
 800612a:	f201 80bb 	bhi.w	80072a4 <cppLoop+0x118c>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <cppLoop+0x1c>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	08006175 	.word	0x08006175
 8006138:	0800664f 	.word	0x0800664f
 800613c:	080066c3 	.word	0x080066c3
 8006140:	080067b1 	.word	0x080067b1
 8006144:	08006861 	.word	0x08006861
 8006148:	080068ef 	.word	0x080068ef
 800614c:	080069b5 	.word	0x080069b5
 8006150:	08006ac9 	.word	0x08006ac9
 8006154:	08006b69 	.word	0x08006b69
 8006158:	0800709d 	.word	0x0800709d
 800615c:	08007139 	.word	0x08007139
 8006160:	080071d3 	.word	0x080071d3
 8006164:	080071fd 	.word	0x080071fd
 8006168:	08007227 	.word	0x08007227
 800616c:	08007251 	.word	0x08007251
 8006170:	0800727b 	.word	0x0800727b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006174:	2152      	movs	r1, #82	; 0x52
 8006176:	48ab      	ldr	r0, [pc, #684]	; (8006424 <cppLoop+0x30c>)
 8006178:	f7fb fe8c 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800617c:	f7fa ff90 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006180:	2100      	movs	r1, #0
 8006182:	2000      	movs	r0, #0
 8006184:	f7fa ff9c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006188:	48a7      	ldr	r0, [pc, #668]	; (8006428 <cppLoop+0x310>)
 800618a:	f7fc fd36 	bl	8002bfa <_ZN9LineTrace5getKpEv>
 800618e:	eeb0 7a40 	vmov.f32	s14, s0
 8006192:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800642c <cppLoop+0x314>
 8006196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800619a:	ee17 0a90 	vmov	r0, s15
 800619e:	f7fa f9eb 	bl	8000578 <__aeabi_f2d>
 80061a2:	4603      	mov	r3, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	461a      	mov	r2, r3
 80061a8:	4623      	mov	r3, r4
 80061aa:	48a1      	ldr	r0, [pc, #644]	; (8006430 <cppLoop+0x318>)
 80061ac:	f7fa ffb2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061b0:	2101      	movs	r1, #1
 80061b2:	2000      	movs	r0, #0
 80061b4:	f7fa ff84 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80061b8:	489b      	ldr	r0, [pc, #620]	; (8006428 <cppLoop+0x310>)
 80061ba:	f7fc fd2d 	bl	8002c18 <_ZN9LineTrace5getKiEv>
 80061be:	eeb0 7a40 	vmov.f32	s14, s0
 80061c2:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8006434 <cppLoop+0x31c>
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	ee17 0a90 	vmov	r0, s15
 80061ce:	f7fa f9d3 	bl	8000578 <__aeabi_f2d>
 80061d2:	4605      	mov	r5, r0
 80061d4:	460e      	mov	r6, r1
 80061d6:	4894      	ldr	r0, [pc, #592]	; (8006428 <cppLoop+0x310>)
 80061d8:	f7fc fd2d 	bl	8002c36 <_ZN9LineTrace5getKdEv>
 80061dc:	eeb0 7a40 	vmov.f32	s14, s0
 80061e0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006438 <cppLoop+0x320>
 80061e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e8:	ee17 0a90 	vmov	r0, s15
 80061ec:	f7fa f9c4 	bl	8000578 <__aeabi_f2d>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	e9cd 3400 	strd	r3, r4, [sp]
 80061f8:	462a      	mov	r2, r5
 80061fa:	4633      	mov	r3, r6
 80061fc:	488f      	ldr	r0, [pc, #572]	; (800643c <cppLoop+0x324>)
 80061fe:	f7fa ff89 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8006202:	4b8f      	ldr	r3, [pc, #572]	; (8006440 <cppLoop+0x328>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	f3bf 8f5b 	dmb	ish
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	bf0c      	ite	eq
 8006214:	2301      	moveq	r3, #1
 8006216:	2300      	movne	r3, #0
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d015      	beq.n	800624a <cppLoop+0x132>
 800621e:	4888      	ldr	r0, [pc, #544]	; (8006440 <cppLoop+0x328>)
 8006220:	f00b fe95 	bl	8011f4e <__cxa_guard_acquire>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <cppLoop+0x132>
 8006234:	487c      	ldr	r0, [pc, #496]	; (8006428 <cppLoop+0x310>)
 8006236:	f7fc fce0 	bl	8002bfa <_ZN9LineTrace5getKpEv>
 800623a:	eef0 7a40 	vmov.f32	s15, s0
 800623e:	4b81      	ldr	r3, [pc, #516]	; (8006444 <cppLoop+0x32c>)
 8006240:	edc3 7a00 	vstr	s15, [r3]
 8006244:	487e      	ldr	r0, [pc, #504]	; (8006440 <cppLoop+0x328>)
 8006246:	f00b fe8e 	bl	8011f66 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 800624a:	4b7f      	ldr	r3, [pc, #508]	; (8006448 <cppLoop+0x330>)
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	f3bf 8f5b 	dmb	ish
 8006252:	b2db      	uxtb	r3, r3
 8006254:	f003 0301 	and.w	r3, r3, #1
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d015      	beq.n	8006292 <cppLoop+0x17a>
 8006266:	4878      	ldr	r0, [pc, #480]	; (8006448 <cppLoop+0x330>)
 8006268:	f00b fe71 	bl	8011f4e <__cxa_guard_acquire>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	bf14      	ite	ne
 8006272:	2301      	movne	r3, #1
 8006274:	2300      	moveq	r3, #0
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <cppLoop+0x17a>
 800627c:	486a      	ldr	r0, [pc, #424]	; (8006428 <cppLoop+0x310>)
 800627e:	f7fc fccb 	bl	8002c18 <_ZN9LineTrace5getKiEv>
 8006282:	eef0 7a40 	vmov.f32	s15, s0
 8006286:	4b71      	ldr	r3, [pc, #452]	; (800644c <cppLoop+0x334>)
 8006288:	edc3 7a00 	vstr	s15, [r3]
 800628c:	486e      	ldr	r0, [pc, #440]	; (8006448 <cppLoop+0x330>)
 800628e:	f00b fe6a 	bl	8011f66 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006292:	4b6f      	ldr	r3, [pc, #444]	; (8006450 <cppLoop+0x338>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	f3bf 8f5b 	dmb	ish
 800629a:	b2db      	uxtb	r3, r3
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf0c      	ite	eq
 80062a4:	2301      	moveq	r3, #1
 80062a6:	2300      	movne	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d015      	beq.n	80062da <cppLoop+0x1c2>
 80062ae:	4868      	ldr	r0, [pc, #416]	; (8006450 <cppLoop+0x338>)
 80062b0:	f00b fe4d 	bl	8011f4e <__cxa_guard_acquire>
 80062b4:	4603      	mov	r3, r0
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <cppLoop+0x1c2>
 80062c4:	4858      	ldr	r0, [pc, #352]	; (8006428 <cppLoop+0x310>)
 80062c6:	f7fc fcb6 	bl	8002c36 <_ZN9LineTrace5getKdEv>
 80062ca:	eef0 7a40 	vmov.f32	s15, s0
 80062ce:	4b61      	ldr	r3, [pc, #388]	; (8006454 <cppLoop+0x33c>)
 80062d0:	edc3 7a00 	vstr	s15, [r3]
 80062d4:	485e      	ldr	r0, [pc, #376]	; (8006450 <cppLoop+0x338>)
 80062d6:	f00b fe46 	bl	8011f66 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80062da:	485f      	ldr	r0, [pc, #380]	; (8006458 <cppLoop+0x340>)
 80062dc:	f7fb fd76 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	bf0c      	ite	eq
 80062e6:	2301      	moveq	r3, #1
 80062e8:	2300      	movne	r3, #0
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d022      	beq.n	8006336 <cppLoop+0x21e>
			led.LR(-1, 1);
 80062f0:	2201      	movs	r2, #1
 80062f2:	f04f 31ff 	mov.w	r1, #4294967295
 80062f6:	484b      	ldr	r0, [pc, #300]	; (8006424 <cppLoop+0x30c>)
 80062f8:	f7fb fe88 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80062fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006300:	f001 f928 	bl	8007554 <HAL_Delay>

			selector++;
 8006304:	4b55      	ldr	r3, [pc, #340]	; (800645c <cppLoop+0x344>)
 8006306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800630a:	b29b      	uxth	r3, r3
 800630c:	3301      	adds	r3, #1
 800630e:	b29b      	uxth	r3, r3
 8006310:	b21a      	sxth	r2, r3
 8006312:	4b52      	ldr	r3, [pc, #328]	; (800645c <cppLoop+0x344>)
 8006314:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006316:	4b51      	ldr	r3, [pc, #324]	; (800645c <cppLoop+0x344>)
 8006318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800631c:	2b02      	cmp	r3, #2
 800631e:	dd02      	ble.n	8006326 <cppLoop+0x20e>
 8006320:	4b4e      	ldr	r3, [pc, #312]	; (800645c <cppLoop+0x344>)
 8006322:	2200      	movs	r2, #0
 8006324:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006326:	2200      	movs	r2, #0
 8006328:	f04f 31ff 	mov.w	r1, #4294967295
 800632c:	483d      	ldr	r0, [pc, #244]	; (8006424 <cppLoop+0x30c>)
 800632e:	f7fb fe6d 	bl	800200c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006332:	f000 bfb9 	b.w	80072a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8006336:	4848      	ldr	r0, [pc, #288]	; (8006458 <cppLoop+0x340>)
 8006338:	f7fb fd48 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800633c:	4603      	mov	r3, r0
 800633e:	2b10      	cmp	r3, #16
 8006340:	bf0c      	ite	eq
 8006342:	2301      	moveq	r3, #1
 8006344:	2300      	movne	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8089 	beq.w	8006460 <cppLoop+0x348>
			led.LR(-1, 1);
 800634e:	2201      	movs	r2, #1
 8006350:	f04f 31ff 	mov.w	r1, #4294967295
 8006354:	4833      	ldr	r0, [pc, #204]	; (8006424 <cppLoop+0x30c>)
 8006356:	f7fb fe59 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800635a:	2064      	movs	r0, #100	; 0x64
 800635c:	f001 f8fa 	bl	8007554 <HAL_Delay>
			if(selector == 0){
 8006360:	4b3e      	ldr	r3, [pc, #248]	; (800645c <cppLoop+0x344>)
 8006362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d113      	bne.n	8006392 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <cppLoop+0x32c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f7fa f902 	bl	8000578 <__aeabi_f2d>
 8006374:	a324      	add	r3, pc, #144	; (adr r3, 8006408 <cppLoop+0x2f0>)
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f7f9 ff9f 	bl	80002bc <__adddf3>
 800637e:	4603      	mov	r3, r0
 8006380:	460c      	mov	r4, r1
 8006382:	4618      	mov	r0, r3
 8006384:	4621      	mov	r1, r4
 8006386:	f7fa fc47 	bl	8000c18 <__aeabi_d2f>
 800638a:	4602      	mov	r2, r0
 800638c:	4b2d      	ldr	r3, [pc, #180]	; (8006444 <cppLoop+0x32c>)
 800638e:	601a      	str	r2, [r3, #0]
 8006390:	e02b      	b.n	80063ea <cppLoop+0x2d2>
			else if(selector == 1){
 8006392:	4b32      	ldr	r3, [pc, #200]	; (800645c <cppLoop+0x344>)
 8006394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d113      	bne.n	80063c4 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800639c:	4b2b      	ldr	r3, [pc, #172]	; (800644c <cppLoop+0x334>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fa f8e9 	bl	8000578 <__aeabi_f2d>
 80063a6:	a31a      	add	r3, pc, #104	; (adr r3, 8006410 <cppLoop+0x2f8>)
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f7f9 ff86 	bl	80002bc <__adddf3>
 80063b0:	4603      	mov	r3, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4618      	mov	r0, r3
 80063b6:	4621      	mov	r1, r4
 80063b8:	f7fa fc2e 	bl	8000c18 <__aeabi_d2f>
 80063bc:	4602      	mov	r2, r0
 80063be:	4b23      	ldr	r3, [pc, #140]	; (800644c <cppLoop+0x334>)
 80063c0:	601a      	str	r2, [r3, #0]
 80063c2:	e012      	b.n	80063ea <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <cppLoop+0x33c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa f8d5 	bl	8000578 <__aeabi_f2d>
 80063ce:	a312      	add	r3, pc, #72	; (adr r3, 8006418 <cppLoop+0x300>)
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f7f9 ff72 	bl	80002bc <__adddf3>
 80063d8:	4603      	mov	r3, r0
 80063da:	460c      	mov	r4, r1
 80063dc:	4618      	mov	r0, r3
 80063de:	4621      	mov	r1, r4
 80063e0:	f7fa fc1a 	bl	8000c18 <__aeabi_d2f>
 80063e4:	4602      	mov	r2, r0
 80063e6:	4b1b      	ldr	r3, [pc, #108]	; (8006454 <cppLoop+0x33c>)
 80063e8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80063ea:	2152      	movs	r1, #82	; 0x52
 80063ec:	480d      	ldr	r0, [pc, #52]	; (8006424 <cppLoop+0x30c>)
 80063ee:	f7fb fd51 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80063f2:	2200      	movs	r2, #0
 80063f4:	f04f 31ff 	mov.w	r1, #4294967295
 80063f8:	480a      	ldr	r0, [pc, #40]	; (8006424 <cppLoop+0x30c>)
 80063fa:	f7fb fe07 	bl	800200c <_ZN3LED2LREaa>
		break;
 80063fe:	f000 bf53 	b.w	80072a8 <cppLoop+0x1190>
 8006402:	bf00      	nop
 8006404:	f3af 8000 	nop.w
 8006408:	88e368f1 	.word	0x88e368f1
 800640c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006410:	eb1c432d 	.word	0xeb1c432d
 8006414:	3f1a36e2 	.word	0x3f1a36e2
 8006418:	a0b5ed8d 	.word	0xa0b5ed8d
 800641c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006420:	200005a4 	.word	0x200005a4
 8006424:	200005ac 	.word	0x200005ac
 8006428:	20015e20 	.word	0x20015e20
 800642c:	447a0000 	.word	0x447a0000
 8006430:	08018274 	.word	0x08018274
 8006434:	42c80000 	.word	0x42c80000
 8006438:	461c4000 	.word	0x461c4000
 800643c:	08018280 	.word	0x08018280
 8006440:	2003359c 	.word	0x2003359c
 8006444:	20033598 	.word	0x20033598
 8006448:	200335a4 	.word	0x200335a4
 800644c:	200335a0 	.word	0x200335a0
 8006450:	200335ac 	.word	0x200335ac
 8006454:	200335a8 	.word	0x200335a8
 8006458:	200005a0 	.word	0x200005a0
 800645c:	20033596 	.word	0x20033596
		else if(joy_stick.getValue() == JOY_L){
 8006460:	48c1      	ldr	r0, [pc, #772]	; (8006768 <cppLoop+0x650>)
 8006462:	f7fb fcb3 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006466:	4603      	mov	r3, r0
 8006468:	2b01      	cmp	r3, #1
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d059      	beq.n	800652a <cppLoop+0x412>
			led.LR(-1, 1);
 8006476:	2201      	movs	r2, #1
 8006478:	f04f 31ff 	mov.w	r1, #4294967295
 800647c:	48bb      	ldr	r0, [pc, #748]	; (800676c <cppLoop+0x654>)
 800647e:	f7fb fdc5 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006482:	2064      	movs	r0, #100	; 0x64
 8006484:	f001 f866 	bl	8007554 <HAL_Delay>
			if(selector == 0){
 8006488:	4bb9      	ldr	r3, [pc, #740]	; (8006770 <cppLoop+0x658>)
 800648a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d113      	bne.n	80064ba <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006492:	4bb8      	ldr	r3, [pc, #736]	; (8006774 <cppLoop+0x65c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4618      	mov	r0, r3
 8006498:	f7fa f86e 	bl	8000578 <__aeabi_f2d>
 800649c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006750 <cppLoop+0x638>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7f9 ff09 	bl	80002b8 <__aeabi_dsub>
 80064a6:	4603      	mov	r3, r0
 80064a8:	460c      	mov	r4, r1
 80064aa:	4618      	mov	r0, r3
 80064ac:	4621      	mov	r1, r4
 80064ae:	f7fa fbb3 	bl	8000c18 <__aeabi_d2f>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4baf      	ldr	r3, [pc, #700]	; (8006774 <cppLoop+0x65c>)
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	e02b      	b.n	8006512 <cppLoop+0x3fa>
			else if(selector == 1){
 80064ba:	4bad      	ldr	r3, [pc, #692]	; (8006770 <cppLoop+0x658>)
 80064bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d113      	bne.n	80064ec <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 80064c4:	4bac      	ldr	r3, [pc, #688]	; (8006778 <cppLoop+0x660>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa f855 	bl	8000578 <__aeabi_f2d>
 80064ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8006758 <cppLoop+0x640>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7f9 fef0 	bl	80002b8 <__aeabi_dsub>
 80064d8:	4603      	mov	r3, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	4618      	mov	r0, r3
 80064de:	4621      	mov	r1, r4
 80064e0:	f7fa fb9a 	bl	8000c18 <__aeabi_d2f>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4ba4      	ldr	r3, [pc, #656]	; (8006778 <cppLoop+0x660>)
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	e012      	b.n	8006512 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 80064ec:	4ba3      	ldr	r3, [pc, #652]	; (800677c <cppLoop+0x664>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fa f841 	bl	8000578 <__aeabi_f2d>
 80064f6:	a39a      	add	r3, pc, #616	; (adr r3, 8006760 <cppLoop+0x648>)
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f7f9 fedc 	bl	80002b8 <__aeabi_dsub>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	4618      	mov	r0, r3
 8006506:	4621      	mov	r1, r4
 8006508:	f7fa fb86 	bl	8000c18 <__aeabi_d2f>
 800650c:	4602      	mov	r2, r0
 800650e:	4b9b      	ldr	r3, [pc, #620]	; (800677c <cppLoop+0x664>)
 8006510:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006512:	2152      	movs	r1, #82	; 0x52
 8006514:	4895      	ldr	r0, [pc, #596]	; (800676c <cppLoop+0x654>)
 8006516:	f7fb fcbd 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800651a:	2200      	movs	r2, #0
 800651c:	f04f 31ff 	mov.w	r1, #4294967295
 8006520:	4892      	ldr	r0, [pc, #584]	; (800676c <cppLoop+0x654>)
 8006522:	f7fb fd73 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006526:	f000 bebf 	b.w	80072a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 800652a:	488f      	ldr	r0, [pc, #572]	; (8006768 <cppLoop+0x650>)
 800652c:	f7fb fc4e 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006530:	4603      	mov	r3, r0
 8006532:	2b04      	cmp	r3, #4
 8006534:	bf0c      	ite	eq
 8006536:	2301      	moveq	r3, #1
 8006538:	2300      	movne	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d03e      	beq.n	80065be <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006540:	2201      	movs	r2, #1
 8006542:	f04f 31ff 	mov.w	r1, #4294967295
 8006546:	4889      	ldr	r0, [pc, #548]	; (800676c <cppLoop+0x654>)
 8006548:	f7fb fd60 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800654c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006550:	f001 f800 	bl	8007554 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006554:	f107 031c 	add.w	r3, r7, #28
 8006558:	2201      	movs	r2, #1
 800655a:	4989      	ldr	r1, [pc, #548]	; (8006780 <cppLoop+0x668>)
 800655c:	4889      	ldr	r0, [pc, #548]	; (8006784 <cppLoop+0x66c>)
 800655e:	f7fb f87b 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006562:	f107 0318 	add.w	r3, r7, #24
 8006566:	2201      	movs	r2, #1
 8006568:	4987      	ldr	r1, [pc, #540]	; (8006788 <cppLoop+0x670>)
 800656a:	4886      	ldr	r0, [pc, #536]	; (8006784 <cppLoop+0x66c>)
 800656c:	f7fb f874 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	2201      	movs	r2, #1
 8006576:	4985      	ldr	r1, [pc, #532]	; (800678c <cppLoop+0x674>)
 8006578:	4882      	ldr	r0, [pc, #520]	; (8006784 <cppLoop+0x66c>)
 800657a:	f7fb f86d 	bl	8001658 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800657e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006582:	ed97 7a06 	vldr	s14, [r7, #24]
 8006586:	edd7 6a05 	vldr	s13, [r7, #20]
 800658a:	eeb0 1a66 	vmov.f32	s2, s13
 800658e:	eef0 0a47 	vmov.f32	s1, s14
 8006592:	eeb0 0a67 	vmov.f32	s0, s15
 8006596:	487e      	ldr	r0, [pc, #504]	; (8006790 <cppLoop+0x678>)
 8006598:	f7fc fb16 	bl	8002bc8 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	4a75      	ldr	r2, [pc, #468]	; (8006774 <cppLoop+0x65c>)
 80065a0:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <cppLoop+0x660>)
 80065a6:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	4a74      	ldr	r2, [pc, #464]	; (800677c <cppLoop+0x664>)
 80065ac:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80065ae:	2200      	movs	r2, #0
 80065b0:	f04f 31ff 	mov.w	r1, #4294967295
 80065b4:	486d      	ldr	r0, [pc, #436]	; (800676c <cppLoop+0x654>)
 80065b6:	f7fb fd29 	bl	800200c <_ZN3LED2LREaa>
		break;
 80065ba:	f000 be75 	b.w	80072a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 80065be:	486a      	ldr	r0, [pc, #424]	; (8006768 <cppLoop+0x650>)
 80065c0:	f7fb fc04 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 8669 	beq.w	80072a8 <cppLoop+0x1190>
			led.LR(-1, 1);
 80065d6:	2201      	movs	r2, #1
 80065d8:	f04f 31ff 	mov.w	r1, #4294967295
 80065dc:	4863      	ldr	r0, [pc, #396]	; (800676c <cppLoop+0x654>)
 80065de:	f7fb fd15 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80065e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80065e6:	f000 ffb5 	bl	8007554 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80065ea:	2300      	movs	r3, #0
 80065ec:	9300      	str	r3, [sp, #0]
 80065ee:	4b61      	ldr	r3, [pc, #388]	; (8006774 <cppLoop+0x65c>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	4963      	ldr	r1, [pc, #396]	; (8006780 <cppLoop+0x668>)
 80065f4:	4863      	ldr	r0, [pc, #396]	; (8006784 <cppLoop+0x66c>)
 80065f6:	f7fa ffc9 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80065fa:	2300      	movs	r3, #0
 80065fc:	9300      	str	r3, [sp, #0]
 80065fe:	4b5e      	ldr	r3, [pc, #376]	; (8006778 <cppLoop+0x660>)
 8006600:	2201      	movs	r2, #1
 8006602:	4961      	ldr	r1, [pc, #388]	; (8006788 <cppLoop+0x670>)
 8006604:	485f      	ldr	r0, [pc, #380]	; (8006784 <cppLoop+0x66c>)
 8006606:	f7fa ffc1 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800660a:	2300      	movs	r3, #0
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	4b5b      	ldr	r3, [pc, #364]	; (800677c <cppLoop+0x664>)
 8006610:	2201      	movs	r2, #1
 8006612:	495e      	ldr	r1, [pc, #376]	; (800678c <cppLoop+0x674>)
 8006614:	485b      	ldr	r0, [pc, #364]	; (8006784 <cppLoop+0x66c>)
 8006616:	f7fa ffb9 	bl	800158c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800661a:	4b56      	ldr	r3, [pc, #344]	; (8006774 <cppLoop+0x65c>)
 800661c:	edd3 7a00 	vldr	s15, [r3]
 8006620:	4b55      	ldr	r3, [pc, #340]	; (8006778 <cppLoop+0x660>)
 8006622:	ed93 7a00 	vldr	s14, [r3]
 8006626:	4b55      	ldr	r3, [pc, #340]	; (800677c <cppLoop+0x664>)
 8006628:	edd3 6a00 	vldr	s13, [r3]
 800662c:	eeb0 1a66 	vmov.f32	s2, s13
 8006630:	eef0 0a47 	vmov.f32	s1, s14
 8006634:	eeb0 0a67 	vmov.f32	s0, s15
 8006638:	4855      	ldr	r0, [pc, #340]	; (8006790 <cppLoop+0x678>)
 800663a:	f7fc fac5 	bl	8002bc8 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800663e:	2200      	movs	r2, #0
 8006640:	f04f 31ff 	mov.w	r1, #4294967295
 8006644:	4849      	ldr	r0, [pc, #292]	; (800676c <cppLoop+0x654>)
 8006646:	f7fb fce1 	bl	800200c <_ZN3LED2LREaa>
		break;
 800664a:	f000 be2d 	b.w	80072a8 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 800664e:	2147      	movs	r1, #71	; 0x47
 8006650:	4846      	ldr	r0, [pc, #280]	; (800676c <cppLoop+0x654>)
 8006652:	f7fb fc1f 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006656:	f7fa fd23 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800665a:	2100      	movs	r1, #0
 800665c:	2000      	movs	r0, #0
 800665e:	f7fa fd2f 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006662:	484c      	ldr	r0, [pc, #304]	; (8006794 <cppLoop+0x67c>)
 8006664:	f7fa fd56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006668:	2101      	movs	r1, #1
 800666a:	2000      	movs	r0, #0
 800666c:	f7fa fd28 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006670:	4849      	ldr	r0, [pc, #292]	; (8006798 <cppLoop+0x680>)
 8006672:	f7fa fd4f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006676:	483c      	ldr	r0, [pc, #240]	; (8006768 <cppLoop+0x650>)
 8006678:	f7fb fba8 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800667c:	4603      	mov	r3, r0
 800667e:	2b02      	cmp	r3, #2
 8006680:	bf0c      	ite	eq
 8006682:	2301      	moveq	r3, #1
 8006684:	2300      	movne	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	f000 860f 	beq.w	80072ac <cppLoop+0x1194>
			HAL_Delay(500);
 800668e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006692:	f000 ff5f 	bl	8007554 <HAL_Delay>

			line_trace.setTargetVelocity(1.4);
 8006696:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800679c <cppLoop+0x684>
 800669a:	483d      	ldr	r0, [pc, #244]	; (8006790 <cppLoop+0x678>)
 800669c:	f7fc fae9 	bl	8002c72 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	2101      	movs	r1, #1
 80066a6:	4831      	ldr	r0, [pc, #196]	; (800676c <cppLoop+0x654>)
 80066a8:	f7fb fcb0 	bl	800200c <_ZN3LED2LREaa>

			line_trace.running();
 80066ac:	4838      	ldr	r0, [pc, #224]	; (8006790 <cppLoop+0x678>)
 80066ae:	f7fc fb77 	bl	8002da0 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	2100      	movs	r1, #0
 80066b8:	482c      	ldr	r0, [pc, #176]	; (800676c <cppLoop+0x654>)
 80066ba:	f7fb fca7 	bl	800200c <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 80066be:	f000 bdf5 	b.w	80072ac <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 80066c2:	2142      	movs	r1, #66	; 0x42
 80066c4:	4829      	ldr	r0, [pc, #164]	; (800676c <cppLoop+0x654>)
 80066c6:	f7fb fbe5 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80066ca:	f7fa fce9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80066ce:	2100      	movs	r1, #0
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7fa fcf5 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80066d6:	4832      	ldr	r0, [pc, #200]	; (80067a0 <cppLoop+0x688>)
 80066d8:	f7fa fd1c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80066dc:	2101      	movs	r1, #1
 80066de:	2000      	movs	r0, #0
 80066e0:	f7fa fcee 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80066e4:	482f      	ldr	r0, [pc, #188]	; (80067a4 <cppLoop+0x68c>)
 80066e6:	f7fa fd15 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80066ea:	481f      	ldr	r0, [pc, #124]	; (8006768 <cppLoop+0x650>)
 80066ec:	f7fb fb6e 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 85d7 	beq.w	80072b0 <cppLoop+0x1198>
			led.LR(-1, 1);
 8006702:	2201      	movs	r2, #1
 8006704:	f04f 31ff 	mov.w	r1, #4294967295
 8006708:	4818      	ldr	r0, [pc, #96]	; (800676c <cppLoop+0x654>)
 800670a:	f7fb fc7f 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(1500);
 800670e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006712:	f000 ff1f 	bl	8007554 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8006716:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80067a8 <cppLoop+0x690>
 800671a:	4824      	ldr	r0, [pc, #144]	; (80067ac <cppLoop+0x694>)
 800671c:	f7fd fb7c 	bl	8003e18 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8006720:	4822      	ldr	r0, [pc, #136]	; (80067ac <cppLoop+0x694>)
 8006722:	f7fd fb89 	bl	8003e38 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8006726:	f244 405c 	movw	r0, #17500	; 0x445c
 800672a:	f000 ff13 	bl	8007554 <HAL_Delay>
			sys_ident.stop();
 800672e:	481f      	ldr	r0, [pc, #124]	; (80067ac <cppLoop+0x694>)
 8006730:	f7fd fb96 	bl	8003e60 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8006734:	481d      	ldr	r0, [pc, #116]	; (80067ac <cppLoop+0x694>)
 8006736:	f7fd fafd 	bl	8003d34 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 800673a:	2200      	movs	r2, #0
 800673c:	f04f 31ff 	mov.w	r1, #4294967295
 8006740:	480a      	ldr	r0, [pc, #40]	; (800676c <cppLoop+0x654>)
 8006742:	f7fb fc63 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006746:	f000 bdb3 	b.w	80072b0 <cppLoop+0x1198>
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w
 8006750:	88e368f1 	.word	0x88e368f1
 8006754:	3ee4f8b5 	.word	0x3ee4f8b5
 8006758:	eb1c432d 	.word	0xeb1c432d
 800675c:	3f1a36e2 	.word	0x3f1a36e2
 8006760:	a0b5ed8d 	.word	0xa0b5ed8d
 8006764:	3eb0c6f7 	.word	0x3eb0c6f7
 8006768:	200005a0 	.word	0x200005a0
 800676c:	200005ac 	.word	0x200005ac
 8006770:	20033596 	.word	0x20033596
 8006774:	20033598 	.word	0x20033598
 8006778:	200335a0 	.word	0x200335a0
 800677c:	200335a8 	.word	0x200335a8
 8006780:	08018290 	.word	0x08018290
 8006784:	08018298 	.word	0x08018298
 8006788:	080182a0 	.word	0x080182a0
 800678c:	080182a8 	.word	0x080182a8
 8006790:	20015e20 	.word	0x20015e20
 8006794:	080182b0 	.word	0x080182b0
 8006798:	080182bc 	.word	0x080182bc
 800679c:	3fb33333 	.word	0x3fb33333
 80067a0:	080182c4 	.word	0x080182c4
 80067a4:	080182cc 	.word	0x080182cc
 80067a8:	3e99999a 	.word	0x3e99999a
 80067ac:	2001bc5c 	.word	0x2001bc5c

	case 3:
		led.fullColor('M');
 80067b0:	214d      	movs	r1, #77	; 0x4d
 80067b2:	48af      	ldr	r0, [pc, #700]	; (8006a70 <cppLoop+0x958>)
 80067b4:	f7fb fb6e 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80067b8:	f7fa fc72 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80067bc:	2100      	movs	r1, #0
 80067be:	2000      	movs	r0, #0
 80067c0:	f7fa fc7e 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80067c4:	48ab      	ldr	r0, [pc, #684]	; (8006a74 <cppLoop+0x95c>)
 80067c6:	f7fa fca5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80067ca:	2101      	movs	r1, #1
 80067cc:	2000      	movs	r0, #0
 80067ce:	f7fa fc77 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80067d2:	48a9      	ldr	r0, [pc, #676]	; (8006a78 <cppLoop+0x960>)
 80067d4:	f7fa fc9e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80067d8:	48a8      	ldr	r0, [pc, #672]	; (8006a7c <cppLoop+0x964>)
 80067da:	f7fb faf7 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	bf0c      	ite	eq
 80067e4:	2301      	moveq	r3, #1
 80067e6:	2300      	movne	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	f000 8562 	beq.w	80072b4 <cppLoop+0x119c>
			led.LR(-1, 1);
 80067f0:	2201      	movs	r2, #1
 80067f2:	f04f 31ff 	mov.w	r1, #4294967295
 80067f6:	489e      	ldr	r0, [pc, #632]	; (8006a70 <cppLoop+0x958>)
 80067f8:	f7fb fc08 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80067fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006800:	f000 fea8 	bl	8007554 <HAL_Delay>

			logger.start();
 8006804:	489e      	ldr	r0, [pc, #632]	; (8006a80 <cppLoop+0x968>)
 8006806:	f7fc fd7b 	bl	8003300 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800680a:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006a84 <cppLoop+0x96c>
 800680e:	489e      	ldr	r0, [pc, #632]	; (8006a88 <cppLoop+0x970>)
 8006810:	f7fc fa20 	bl	8002c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006814:	489c      	ldr	r0, [pc, #624]	; (8006a88 <cppLoop+0x970>)
 8006816:	f7fc fa75 	bl	8002d04 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800681a:	f241 3088 	movw	r0, #5000	; 0x1388
 800681e:	f000 fe99 	bl	8007554 <HAL_Delay>

			logger.stop();
 8006822:	4897      	ldr	r0, [pc, #604]	; (8006a80 <cppLoop+0x968>)
 8006824:	f7fc fd7d 	bl	8003322 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006828:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006a84 <cppLoop+0x96c>
 800682c:	4896      	ldr	r0, [pc, #600]	; (8006a88 <cppLoop+0x970>)
 800682e:	f7fc fa11 	bl	8002c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006832:	4895      	ldr	r0, [pc, #596]	; (8006a88 <cppLoop+0x970>)
 8006834:	f7fc fa80 	bl	8002d38 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006838:	f04f 32ff 	mov.w	r2, #4294967295
 800683c:	2101      	movs	r1, #1
 800683e:	488c      	ldr	r0, [pc, #560]	; (8006a70 <cppLoop+0x958>)
 8006840:	f7fb fbe4 	bl	800200c <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	2100      	movs	r1, #0
 800684a:	4889      	ldr	r0, [pc, #548]	; (8006a70 <cppLoop+0x958>)
 800684c:	f7fb fbde 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	f04f 31ff 	mov.w	r1, #4294967295
 8006856:	4886      	ldr	r0, [pc, #536]	; (8006a70 <cppLoop+0x958>)
 8006858:	f7fb fbd8 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 800685c:	f000 bd2a 	b.w	80072b4 <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8006860:	2159      	movs	r1, #89	; 0x59
 8006862:	4883      	ldr	r0, [pc, #524]	; (8006a70 <cppLoop+0x958>)
 8006864:	f7fb fb16 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006868:	f7fa fc1a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800686c:	2100      	movs	r1, #0
 800686e:	2000      	movs	r0, #0
 8006870:	f7fa fc26 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006874:	4885      	ldr	r0, [pc, #532]	; (8006a8c <cppLoop+0x974>)
 8006876:	f7fa fc4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800687a:	2101      	movs	r1, #1
 800687c:	2000      	movs	r0, #0
 800687e:	f7fa fc1f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006882:	487d      	ldr	r0, [pc, #500]	; (8006a78 <cppLoop+0x960>)
 8006884:	f7fa fc46 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006888:	487c      	ldr	r0, [pc, #496]	; (8006a7c <cppLoop+0x964>)
 800688a:	f7fb fa9f 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800688e:	4603      	mov	r3, r0
 8006890:	2b02      	cmp	r3, #2
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 850c 	beq.w	80072b8 <cppLoop+0x11a0>
			led.LR(-1, 1);
 80068a0:	2201      	movs	r2, #1
 80068a2:	f04f 31ff 	mov.w	r1, #4294967295
 80068a6:	4872      	ldr	r0, [pc, #456]	; (8006a70 <cppLoop+0x958>)
 80068a8:	f7fb fbb0 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 80068ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068b0:	f000 fe50 	bl	8007554 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80068b4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006a84 <cppLoop+0x96c>
 80068b8:	4873      	ldr	r0, [pc, #460]	; (8006a88 <cppLoop+0x970>)
 80068ba:	f7fc f9da 	bl	8002c72 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80068be:	4874      	ldr	r0, [pc, #464]	; (8006a90 <cppLoop+0x978>)
 80068c0:	f7fd fc8b 	bl	80041da <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80068c4:	4870      	ldr	r0, [pc, #448]	; (8006a88 <cppLoop+0x970>)
 80068c6:	f7fc fa1d 	bl	8002d04 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80068ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80068ce:	f000 fe41 	bl	8007554 <HAL_Delay>

			line_trace.stop();
 80068d2:	486d      	ldr	r0, [pc, #436]	; (8006a88 <cppLoop+0x970>)
 80068d4:	f7fc fa30 	bl	8002d38 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80068d8:	486d      	ldr	r0, [pc, #436]	; (8006a90 <cppLoop+0x978>)
 80068da:	f7fd fc91 	bl	8004200 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80068de:	2200      	movs	r2, #0
 80068e0:	f04f 31ff 	mov.w	r1, #4294967295
 80068e4:	4862      	ldr	r0, [pc, #392]	; (8006a70 <cppLoop+0x958>)
 80068e6:	f7fb fb91 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 80068ea:	f000 bce5 	b.w	80072b8 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 80068ee:	2143      	movs	r1, #67	; 0x43
 80068f0:	485f      	ldr	r0, [pc, #380]	; (8006a70 <cppLoop+0x958>)
 80068f2:	f7fb facf 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80068f6:	f7fa fbd3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80068fa:	2100      	movs	r1, #0
 80068fc:	2000      	movs	r0, #0
 80068fe:	f7fa fbdf 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006902:	4864      	ldr	r0, [pc, #400]	; (8006a94 <cppLoop+0x97c>)
 8006904:	f7fa fc06 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006908:	2101      	movs	r1, #1
 800690a:	2000      	movs	r0, #0
 800690c:	f7fa fbd8 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006910:	4861      	ldr	r0, [pc, #388]	; (8006a98 <cppLoop+0x980>)
 8006912:	f7fa fbff 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006916:	4859      	ldr	r0, [pc, #356]	; (8006a7c <cppLoop+0x964>)
 8006918:	f7fb fa58 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 800691c:	4603      	mov	r3, r0
 800691e:	2b02      	cmp	r3, #2
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 84c7 	beq.w	80072bc <cppLoop+0x11a4>
			led.LR(-1, 1);
 800692e:	2201      	movs	r2, #1
 8006930:	f04f 31ff 	mov.w	r1, #4294967295
 8006934:	484e      	ldr	r0, [pc, #312]	; (8006a70 <cppLoop+0x958>)
 8006936:	f7fb fb69 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800693a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800693e:	f000 fe09 	bl	8007554 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006942:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006a9c <cppLoop+0x984>
 8006946:	4850      	ldr	r0, [pc, #320]	; (8006a88 <cppLoop+0x970>)
 8006948:	f7fc f984 	bl	8002c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800694c:	484e      	ldr	r0, [pc, #312]	; (8006a88 <cppLoop+0x970>)
 800694e:	f7fc f9d9 	bl	8002d04 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006952:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006956:	f000 fdfd 	bl	8007554 <HAL_Delay>

			led.fullColor('R');
 800695a:	2152      	movs	r1, #82	; 0x52
 800695c:	4844      	ldr	r0, [pc, #272]	; (8006a70 <cppLoop+0x958>)
 800695e:	f7fb fa99 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006962:	484f      	ldr	r0, [pc, #316]	; (8006aa0 <cppLoop+0x988>)
 8006964:	f7fa fd88 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006968:	484d      	ldr	r0, [pc, #308]	; (8006aa0 <cppLoop+0x988>)
 800696a:	f7fa fd55 	bl	8001418 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800696e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006972:	f000 fdef 	bl	8007554 <HAL_Delay>

			line_trace.stop();
 8006976:	4844      	ldr	r0, [pc, #272]	; (8006a88 <cppLoop+0x970>)
 8006978:	f7fc f9de 	bl	8002d38 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800697c:	4949      	ldr	r1, [pc, #292]	; (8006aa4 <cppLoop+0x98c>)
 800697e:	484a      	ldr	r0, [pc, #296]	; (8006aa8 <cppLoop+0x990>)
 8006980:	f7fa fd90 	bl	80014a4 <user_fopen>
			float d = encoder.getDistance();
 8006984:	4846      	ldr	r0, [pc, #280]	; (8006aa0 <cppLoop+0x988>)
 8006986:	f7fa fd29 	bl	80013dc <_ZN7Encoder11getDistanceEv>
 800698a:	eef0 7a40 	vmov.f32	s15, s0
 800698e:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006992:	f107 0310 	add.w	r3, r7, #16
 8006996:	2201      	movs	r2, #1
 8006998:	4619      	mov	r1, r3
 800699a:	2001      	movs	r0, #1
 800699c:	f7fa fda4 	bl	80014e8 <sd_write_float>
			user_fclose();
 80069a0:	f7fa fd92 	bl	80014c8 <user_fclose>

			led.LR(-1, 0);
 80069a4:	2200      	movs	r2, #0
 80069a6:	f04f 31ff 	mov.w	r1, #4294967295
 80069aa:	4831      	ldr	r0, [pc, #196]	; (8006a70 <cppLoop+0x958>)
 80069ac:	f7fb fb2e 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 80069b0:	f000 bc84 	b.w	80072bc <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 80069b4:	2152      	movs	r1, #82	; 0x52
 80069b6:	482e      	ldr	r0, [pc, #184]	; (8006a70 <cppLoop+0x958>)
 80069b8:	f7fb fa6c 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80069bc:	f7fa fb70 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069c0:	2100      	movs	r1, #0
 80069c2:	2000      	movs	r0, #0
 80069c4:	f7fa fb7c 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80069c8:	4838      	ldr	r0, [pc, #224]	; (8006aac <cppLoop+0x994>)
 80069ca:	f7fa fba3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80069ce:	2101      	movs	r1, #1
 80069d0:	2000      	movs	r0, #0
 80069d2:	f7fa fb75 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80069d6:	4836      	ldr	r0, [pc, #216]	; (8006ab0 <cppLoop+0x998>)
 80069d8:	f7fa fb9c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80069dc:	4827      	ldr	r0, [pc, #156]	; (8006a7c <cppLoop+0x964>)
 80069de:	f7fb f9f5 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 8466 	beq.w	80072c0 <cppLoop+0x11a8>
			HAL_Delay(500);
 80069f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069f8:	f000 fdac 	bl	8007554 <HAL_Delay>
			led.LR(-1, 1);
 80069fc:	2201      	movs	r2, #1
 80069fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006a02:	481b      	ldr	r0, [pc, #108]	; (8006a70 <cppLoop+0x958>)
 8006a04:	f7fb fb02 	bl	800200c <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006a08:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006ab4 <cppLoop+0x99c>
 8006a0c:	481e      	ldr	r0, [pc, #120]	; (8006a88 <cppLoop+0x970>)
 8006a0e:	f7fc f921 	bl	8002c54 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006a12:	481d      	ldr	r0, [pc, #116]	; (8006a88 <cppLoop+0x970>)
 8006a14:	f7fc f976 	bl	8002d04 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a1c:	f000 fd9a 	bl	8007554 <HAL_Delay>

			led.fullColor('R');
 8006a20:	2152      	movs	r1, #82	; 0x52
 8006a22:	4813      	ldr	r0, [pc, #76]	; (8006a70 <cppLoop+0x958>)
 8006a24:	f7fb fa36 	bl	8001e94 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006a28:	481d      	ldr	r0, [pc, #116]	; (8006aa0 <cppLoop+0x988>)
 8006a2a:	f7fa fd25 	bl	8001478 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006a2e:	481c      	ldr	r0, [pc, #112]	; (8006aa0 <cppLoop+0x988>)
 8006a30:	f7fa fcf2 	bl	8001418 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006a34:	4820      	ldr	r0, [pc, #128]	; (8006ab8 <cppLoop+0x9a0>)
 8006a36:	f7fc fe81 	bl	800373c <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006a3a:	4811      	ldr	r0, [pc, #68]	; (8006a80 <cppLoop+0x968>)
 8006a3c:	f7fc fc60 	bl	8003300 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006a40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006a44:	f000 fd86 	bl	8007554 <HAL_Delay>

			line_trace.stop();
 8006a48:	480f      	ldr	r0, [pc, #60]	; (8006a88 <cppLoop+0x970>)
 8006a4a:	f7fc f975 	bl	8002d38 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006a4e:	480c      	ldr	r0, [pc, #48]	; (8006a80 <cppLoop+0x968>)
 8006a50:	f7fc fc67 	bl	8003322 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006a54:	4b19      	ldr	r3, [pc, #100]	; (8006abc <cppLoop+0x9a4>)
 8006a56:	4a1a      	ldr	r2, [pc, #104]	; (8006ac0 <cppLoop+0x9a8>)
 8006a58:	491a      	ldr	r1, [pc, #104]	; (8006ac4 <cppLoop+0x9ac>)
 8006a5a:	4809      	ldr	r0, [pc, #36]	; (8006a80 <cppLoop+0x968>)
 8006a5c:	f7fc fbb1 	bl	80031c2 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006a60:	2200      	movs	r2, #0
 8006a62:	f04f 31ff 	mov.w	r1, #4294967295
 8006a66:	4802      	ldr	r0, [pc, #8]	; (8006a70 <cppLoop+0x958>)
 8006a68:	f7fb fad0 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 8006a6c:	f000 bc28 	b.w	80072c0 <cppLoop+0x11a8>
 8006a70:	200005ac 	.word	0x200005ac
 8006a74:	080182d4 	.word	0x080182d4
 8006a78:	080182dc 	.word	0x080182dc
 8006a7c:	200005a0 	.word	0x200005a0
 8006a80:	200005d0 	.word	0x200005d0
 8006a84:	3dcccccd 	.word	0x3dcccccd
 8006a88:	20015e20 	.word	0x20015e20
 8006a8c:	080182e4 	.word	0x080182e4
 8006a90:	20015db0 	.word	0x20015db0
 8006a94:	080182f0 	.word	0x080182f0
 8006a98:	080182f8 	.word	0x080182f8
 8006a9c:	00000000 	.word	0x00000000
 8006aa0:	20015d98 	.word	0x20015d98
 8006aa4:	08018304 	.word	0x08018304
 8006aa8:	0801830c 	.word	0x0801830c
 8006aac:	08018318 	.word	0x08018318
 8006ab0:	080182cc 	.word	0x080182cc
 8006ab4:	3d8f5c29 	.word	0x3d8f5c29
 8006ab8:	20015df0 	.word	0x20015df0
 8006abc:	08018324 	.word	0x08018324
 8006ac0:	08018330 	.word	0x08018330
 8006ac4:	0801833c 	.word	0x0801833c

	case 7:
		led.fullColor('G');
 8006ac8:	2147      	movs	r1, #71	; 0x47
 8006aca:	48b3      	ldr	r0, [pc, #716]	; (8006d98 <cppLoop+0xc80>)
 8006acc:	f7fb f9e2 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006ad0:	f7fa fae6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7fa faf2 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006adc:	48af      	ldr	r0, [pc, #700]	; (8006d9c <cppLoop+0xc84>)
 8006ade:	f7fa fb19 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	f7fa faeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006aea:	48ad      	ldr	r0, [pc, #692]	; (8006da0 <cppLoop+0xc88>)
 8006aec:	f7fa fb12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006af0:	48ac      	ldr	r0, [pc, #688]	; (8006da4 <cppLoop+0xc8c>)
 8006af2:	f7fb f96b 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	bf0c      	ite	eq
 8006afc:	2301      	moveq	r3, #1
 8006afe:	2300      	movne	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 83de 	beq.w	80072c4 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0e:	48a2      	ldr	r0, [pc, #648]	; (8006d98 <cppLoop+0xc80>)
 8006b10:	f7fb fa7c 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006b14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b18:	f000 fd1c 	bl	8007554 <HAL_Delay>

			led.fullColor('R');
 8006b1c:	2152      	movs	r1, #82	; 0x52
 8006b1e:	489e      	ldr	r0, [pc, #632]	; (8006d98 <cppLoop+0xc80>)
 8006b20:	f7fb f9b8 	bl	8001e94 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006b24:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8006da8 <cppLoop+0xc90>
 8006b28:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8006dac <cppLoop+0xc94>
 8006b2c:	48a0      	ldr	r0, [pc, #640]	; (8006db0 <cppLoop+0xc98>)
 8006b2e:	f7fd fae7 	bl	8004100 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006b32:	489f      	ldr	r0, [pc, #636]	; (8006db0 <cppLoop+0xc98>)
 8006b34:	f7fd fb51 	bl	80041da <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b3c:	f000 fd0a 	bl	8007554 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006b40:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8006dac <cppLoop+0xc94>
 8006b44:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006dac <cppLoop+0xc94>
 8006b48:	4899      	ldr	r0, [pc, #612]	; (8006db0 <cppLoop+0xc98>)
 8006b4a:	f7fd fad9 	bl	8004100 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006b4e:	2064      	movs	r0, #100	; 0x64
 8006b50:	f000 fd00 	bl	8007554 <HAL_Delay>
			velocity_ctrl.stop();
 8006b54:	4896      	ldr	r0, [pc, #600]	; (8006db0 <cppLoop+0xc98>)
 8006b56:	f7fd fb53 	bl	8004200 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8006b60:	488d      	ldr	r0, [pc, #564]	; (8006d98 <cppLoop+0xc80>)
 8006b62:	f7fb fa53 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8006b66:	e3ad      	b.n	80072c4 <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006b68:	2142      	movs	r1, #66	; 0x42
 8006b6a:	488b      	ldr	r0, [pc, #556]	; (8006d98 <cppLoop+0xc80>)
 8006b6c:	f7fb f992 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006b70:	f7fa fa96 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006b74:	2100      	movs	r1, #0
 8006b76:	2000      	movs	r0, #0
 8006b78:	f7fa faa2 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006b7c:	488d      	ldr	r0, [pc, #564]	; (8006db4 <cppLoop+0xc9c>)
 8006b7e:	f7fc fed3 	bl	8003928 <_ZN13PathFollowing8getKxValEv>
 8006b82:	ec51 0b10 	vmov	r0, r1, d0
 8006b86:	f04f 0200 	mov.w	r2, #0
 8006b8a:	4b8b      	ldr	r3, [pc, #556]	; (8006db8 <cppLoop+0xca0>)
 8006b8c:	f7f9 fd4c 	bl	8000628 <__aeabi_dmul>
 8006b90:	4603      	mov	r3, r0
 8006b92:	460c      	mov	r4, r1
 8006b94:	461a      	mov	r2, r3
 8006b96:	4623      	mov	r3, r4
 8006b98:	4888      	ldr	r0, [pc, #544]	; (8006dbc <cppLoop+0xca4>)
 8006b9a:	f7fa fabb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006b9e:	2101      	movs	r1, #1
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	f7fa fa8d 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006ba6:	4883      	ldr	r0, [pc, #524]	; (8006db4 <cppLoop+0xc9c>)
 8006ba8:	f7fc fed2 	bl	8003950 <_ZN13PathFollowing8getKyValEv>
 8006bac:	ec51 0b10 	vmov	r0, r1, d0
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	4b80      	ldr	r3, [pc, #512]	; (8006db8 <cppLoop+0xca0>)
 8006bb6:	f7f9 fd37 	bl	8000628 <__aeabi_dmul>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	461d      	mov	r5, r3
 8006bc0:	4626      	mov	r6, r4
 8006bc2:	487c      	ldr	r0, [pc, #496]	; (8006db4 <cppLoop+0xc9c>)
 8006bc4:	f7fc fed8 	bl	8003978 <_ZN13PathFollowing8getKtValEv>
 8006bc8:	ec51 0b10 	vmov	r0, r1, d0
 8006bcc:	f04f 0200 	mov.w	r2, #0
 8006bd0:	4b79      	ldr	r3, [pc, #484]	; (8006db8 <cppLoop+0xca0>)
 8006bd2:	f7f9 fd29 	bl	8000628 <__aeabi_dmul>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	460c      	mov	r4, r1
 8006bda:	e9cd 3400 	strd	r3, r4, [sp]
 8006bde:	462a      	mov	r2, r5
 8006be0:	4633      	mov	r3, r6
 8006be2:	4877      	ldr	r0, [pc, #476]	; (8006dc0 <cppLoop+0xca8>)
 8006be4:	f7fa fa96 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006be8:	4b76      	ldr	r3, [pc, #472]	; (8006dc4 <cppLoop+0xcac>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	f3bf 8f5b 	dmb	ish
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf0c      	ite	eq
 8006bfa:	2301      	moveq	r3, #1
 8006bfc:	2300      	movne	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d019      	beq.n	8006c38 <cppLoop+0xb20>
 8006c04:	486f      	ldr	r0, [pc, #444]	; (8006dc4 <cppLoop+0xcac>)
 8006c06:	f00b f9a2 	bl	8011f4e <__cxa_guard_acquire>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf14      	ite	ne
 8006c10:	2301      	movne	r3, #1
 8006c12:	2300      	moveq	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00e      	beq.n	8006c38 <cppLoop+0xb20>
 8006c1a:	4866      	ldr	r0, [pc, #408]	; (8006db4 <cppLoop+0xc9c>)
 8006c1c:	f7fc fe84 	bl	8003928 <_ZN13PathFollowing8getKxValEv>
 8006c20:	ec54 3b10 	vmov	r3, r4, d0
 8006c24:	4618      	mov	r0, r3
 8006c26:	4621      	mov	r1, r4
 8006c28:	f7f9 fff6 	bl	8000c18 <__aeabi_d2f>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	4b66      	ldr	r3, [pc, #408]	; (8006dc8 <cppLoop+0xcb0>)
 8006c30:	601a      	str	r2, [r3, #0]
 8006c32:	4864      	ldr	r0, [pc, #400]	; (8006dc4 <cppLoop+0xcac>)
 8006c34:	f00b f997 	bl	8011f66 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006c38:	4b64      	ldr	r3, [pc, #400]	; (8006dcc <cppLoop+0xcb4>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	f3bf 8f5b 	dmb	ish
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf0c      	ite	eq
 8006c4a:	2301      	moveq	r3, #1
 8006c4c:	2300      	movne	r3, #0
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d019      	beq.n	8006c88 <cppLoop+0xb70>
 8006c54:	485d      	ldr	r0, [pc, #372]	; (8006dcc <cppLoop+0xcb4>)
 8006c56:	f00b f97a 	bl	8011f4e <__cxa_guard_acquire>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	bf14      	ite	ne
 8006c60:	2301      	movne	r3, #1
 8006c62:	2300      	moveq	r3, #0
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00e      	beq.n	8006c88 <cppLoop+0xb70>
 8006c6a:	4852      	ldr	r0, [pc, #328]	; (8006db4 <cppLoop+0xc9c>)
 8006c6c:	f7fc fe70 	bl	8003950 <_ZN13PathFollowing8getKyValEv>
 8006c70:	ec54 3b10 	vmov	r3, r4, d0
 8006c74:	4618      	mov	r0, r3
 8006c76:	4621      	mov	r1, r4
 8006c78:	f7f9 ffce 	bl	8000c18 <__aeabi_d2f>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	4b54      	ldr	r3, [pc, #336]	; (8006dd0 <cppLoop+0xcb8>)
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	4852      	ldr	r0, [pc, #328]	; (8006dcc <cppLoop+0xcb4>)
 8006c84:	f00b f96f 	bl	8011f66 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006c88:	4b52      	ldr	r3, [pc, #328]	; (8006dd4 <cppLoop+0xcbc>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	f3bf 8f5b 	dmb	ish
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	bf0c      	ite	eq
 8006c9a:	2301      	moveq	r3, #1
 8006c9c:	2300      	movne	r3, #0
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d019      	beq.n	8006cd8 <cppLoop+0xbc0>
 8006ca4:	484b      	ldr	r0, [pc, #300]	; (8006dd4 <cppLoop+0xcbc>)
 8006ca6:	f00b f952 	bl	8011f4e <__cxa_guard_acquire>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	bf14      	ite	ne
 8006cb0:	2301      	movne	r3, #1
 8006cb2:	2300      	moveq	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <cppLoop+0xbc0>
 8006cba:	483e      	ldr	r0, [pc, #248]	; (8006db4 <cppLoop+0xc9c>)
 8006cbc:	f7fc fe5c 	bl	8003978 <_ZN13PathFollowing8getKtValEv>
 8006cc0:	ec54 3b10 	vmov	r3, r4, d0
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f7f9 ffa6 	bl	8000c18 <__aeabi_d2f>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	4b42      	ldr	r3, [pc, #264]	; (8006dd8 <cppLoop+0xcc0>)
 8006cd0:	601a      	str	r2, [r3, #0]
 8006cd2:	4840      	ldr	r0, [pc, #256]	; (8006dd4 <cppLoop+0xcbc>)
 8006cd4:	f00b f947 	bl	8011f66 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006cd8:	4832      	ldr	r0, [pc, #200]	; (8006da4 <cppLoop+0xc8c>)
 8006cda:	f7fb f877 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	bf0c      	ite	eq
 8006ce4:	2301      	moveq	r3, #1
 8006ce6:	2300      	movne	r3, #0
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d021      	beq.n	8006d32 <cppLoop+0xc1a>
			led.LR(-1, 1);
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8006cf4:	4828      	ldr	r0, [pc, #160]	; (8006d98 <cppLoop+0xc80>)
 8006cf6:	f7fb f989 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006cfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006cfe:	f000 fc29 	bl	8007554 <HAL_Delay>

			selector++;
 8006d02:	4b36      	ldr	r3, [pc, #216]	; (8006ddc <cppLoop+0xcc4>)
 8006d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b21a      	sxth	r2, r3
 8006d10:	4b32      	ldr	r3, [pc, #200]	; (8006ddc <cppLoop+0xcc4>)
 8006d12:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006d14:	4b31      	ldr	r3, [pc, #196]	; (8006ddc <cppLoop+0xcc4>)
 8006d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	dd02      	ble.n	8006d24 <cppLoop+0xc0c>
 8006d1e:	4b2f      	ldr	r3, [pc, #188]	; (8006ddc <cppLoop+0xcc4>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006d24:	2200      	movs	r2, #0
 8006d26:	f04f 31ff 	mov.w	r1, #4294967295
 8006d2a:	481b      	ldr	r0, [pc, #108]	; (8006d98 <cppLoop+0xc80>)
 8006d2c:	f7fb f96e 	bl	800200c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006d30:	e2ca      	b.n	80072c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 8006d32:	481c      	ldr	r0, [pc, #112]	; (8006da4 <cppLoop+0xc8c>)
 8006d34:	f7fb f84a 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	bf0c      	ite	eq
 8006d3e:	2301      	moveq	r3, #1
 8006d40:	2300      	movne	r3, #0
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8082 	beq.w	8006e4e <cppLoop+0xd36>
			led.LR(-1, 1);
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006d50:	4811      	ldr	r0, [pc, #68]	; (8006d98 <cppLoop+0xc80>)
 8006d52:	f7fb f95b 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006d56:	2064      	movs	r0, #100	; 0x64
 8006d58:	f000 fbfc 	bl	8007554 <HAL_Delay>
			if(selector == 0){
 8006d5c:	4b1f      	ldr	r3, [pc, #124]	; (8006ddc <cppLoop+0xcc4>)
 8006d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d13c      	bne.n	8006de0 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <cppLoop+0xcb0>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7f9 fc04 	bl	8000578 <__aeabi_f2d>
 8006d70:	a307      	add	r3, pc, #28	; (adr r3, 8006d90 <cppLoop+0xc78>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	f7f9 faa1 	bl	80002bc <__adddf3>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	460c      	mov	r4, r1
 8006d7e:	4618      	mov	r0, r3
 8006d80:	4621      	mov	r1, r4
 8006d82:	f7f9 ff49 	bl	8000c18 <__aeabi_d2f>
 8006d86:	4602      	mov	r2, r0
 8006d88:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <cppLoop+0xcb0>)
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e054      	b.n	8006e38 <cppLoop+0xd20>
 8006d8e:	bf00      	nop
 8006d90:	88e368f1 	.word	0x88e368f1
 8006d94:	3ee4f8b5 	.word	0x3ee4f8b5
 8006d98:	200005ac 	.word	0x200005ac
 8006d9c:	08018340 	.word	0x08018340
 8006da0:	0801834c 	.word	0x0801834c
 8006da4:	200005a0 	.word	0x200005a0
 8006da8:	3fc8f5c3 	.word	0x3fc8f5c3
 8006dac:	00000000 	.word	0x00000000
 8006db0:	20015db0 	.word	0x20015db0
 8006db4:	2001be68 	.word	0x2001be68
 8006db8:	408f4000 	.word	0x408f4000
 8006dbc:	08018274 	.word	0x08018274
 8006dc0:	08018280 	.word	0x08018280
 8006dc4:	200335b4 	.word	0x200335b4
 8006dc8:	200335b0 	.word	0x200335b0
 8006dcc:	200335bc 	.word	0x200335bc
 8006dd0:	200335b8 	.word	0x200335b8
 8006dd4:	200335c4 	.word	0x200335c4
 8006dd8:	200335c0 	.word	0x200335c0
 8006ddc:	20033596 	.word	0x20033596
			else if(selector == 1){
 8006de0:	4ba3      	ldr	r3, [pc, #652]	; (8007070 <cppLoop+0xf58>)
 8006de2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d113      	bne.n	8006e12 <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 8006dea:	4ba2      	ldr	r3, [pc, #648]	; (8007074 <cppLoop+0xf5c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7f9 fbc2 	bl	8000578 <__aeabi_f2d>
 8006df4:	a39c      	add	r3, pc, #624	; (adr r3, 8007068 <cppLoop+0xf50>)
 8006df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dfa:	f7f9 fa5f 	bl	80002bc <__adddf3>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	460c      	mov	r4, r1
 8006e02:	4618      	mov	r0, r3
 8006e04:	4621      	mov	r1, r4
 8006e06:	f7f9 ff07 	bl	8000c18 <__aeabi_d2f>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	4b99      	ldr	r3, [pc, #612]	; (8007074 <cppLoop+0xf5c>)
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	e012      	b.n	8006e38 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006e12:	4b99      	ldr	r3, [pc, #612]	; (8007078 <cppLoop+0xf60>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7f9 fbae 	bl	8000578 <__aeabi_f2d>
 8006e1c:	a392      	add	r3, pc, #584	; (adr r3, 8007068 <cppLoop+0xf50>)
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f7f9 fa4b 	bl	80002bc <__adddf3>
 8006e26:	4603      	mov	r3, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	f7f9 fef3 	bl	8000c18 <__aeabi_d2f>
 8006e32:	4602      	mov	r2, r0
 8006e34:	4b90      	ldr	r3, [pc, #576]	; (8007078 <cppLoop+0xf60>)
 8006e36:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006e38:	2152      	movs	r1, #82	; 0x52
 8006e3a:	4890      	ldr	r0, [pc, #576]	; (800707c <cppLoop+0xf64>)
 8006e3c:	f7fb f82a 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006e40:	2200      	movs	r2, #0
 8006e42:	f04f 31ff 	mov.w	r1, #4294967295
 8006e46:	488d      	ldr	r0, [pc, #564]	; (800707c <cppLoop+0xf64>)
 8006e48:	f7fb f8e0 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006e4c:	e23c      	b.n	80072c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 8006e4e:	488c      	ldr	r0, [pc, #560]	; (8007080 <cppLoop+0xf68>)
 8006e50:	f7fa ffbc 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	bf0c      	ite	eq
 8006e5a:	2301      	moveq	r3, #1
 8006e5c:	2300      	movne	r3, #0
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d058      	beq.n	8006f16 <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006e64:	2201      	movs	r2, #1
 8006e66:	f04f 31ff 	mov.w	r1, #4294967295
 8006e6a:	4884      	ldr	r0, [pc, #528]	; (800707c <cppLoop+0xf64>)
 8006e6c:	f7fb f8ce 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006e70:	2064      	movs	r0, #100	; 0x64
 8006e72:	f000 fb6f 	bl	8007554 <HAL_Delay>
			if(selector == 0){
 8006e76:	4b7e      	ldr	r3, [pc, #504]	; (8007070 <cppLoop+0xf58>)
 8006e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d113      	bne.n	8006ea8 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8006e80:	4b80      	ldr	r3, [pc, #512]	; (8007084 <cppLoop+0xf6c>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7f9 fb77 	bl	8000578 <__aeabi_f2d>
 8006e8a:	a377      	add	r3, pc, #476	; (adr r3, 8007068 <cppLoop+0xf50>)
 8006e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e90:	f7f9 fa12 	bl	80002b8 <__aeabi_dsub>
 8006e94:	4603      	mov	r3, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4618      	mov	r0, r3
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f7f9 febc 	bl	8000c18 <__aeabi_d2f>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	4b78      	ldr	r3, [pc, #480]	; (8007084 <cppLoop+0xf6c>)
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	e02b      	b.n	8006f00 <cppLoop+0xde8>
			else if(selector == 1){
 8006ea8:	4b71      	ldr	r3, [pc, #452]	; (8007070 <cppLoop+0xf58>)
 8006eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d113      	bne.n	8006eda <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8006eb2:	4b70      	ldr	r3, [pc, #448]	; (8007074 <cppLoop+0xf5c>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7f9 fb5e 	bl	8000578 <__aeabi_f2d>
 8006ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8007068 <cppLoop+0xf50>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 f9f9 	bl	80002b8 <__aeabi_dsub>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	4621      	mov	r1, r4
 8006ece:	f7f9 fea3 	bl	8000c18 <__aeabi_d2f>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	4b67      	ldr	r3, [pc, #412]	; (8007074 <cppLoop+0xf5c>)
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e012      	b.n	8006f00 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8006eda:	4b67      	ldr	r3, [pc, #412]	; (8007078 <cppLoop+0xf60>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7f9 fb4a 	bl	8000578 <__aeabi_f2d>
 8006ee4:	a360      	add	r3, pc, #384	; (adr r3, 8007068 <cppLoop+0xf50>)
 8006ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eea:	f7f9 f9e5 	bl	80002b8 <__aeabi_dsub>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	460c      	mov	r4, r1
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f7f9 fe8f 	bl	8000c18 <__aeabi_d2f>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b5e      	ldr	r3, [pc, #376]	; (8007078 <cppLoop+0xf60>)
 8006efe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006f00:	2152      	movs	r1, #82	; 0x52
 8006f02:	485e      	ldr	r0, [pc, #376]	; (800707c <cppLoop+0xf64>)
 8006f04:	f7fa ffc6 	bl	8001e94 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f0e:	485b      	ldr	r0, [pc, #364]	; (800707c <cppLoop+0xf64>)
 8006f10:	f7fb f87c 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006f14:	e1d8      	b.n	80072c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 8006f16:	485a      	ldr	r0, [pc, #360]	; (8007080 <cppLoop+0xf68>)
 8006f18:	f7fa ff58 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	bf0c      	ite	eq
 8006f22:	2301      	moveq	r3, #1
 8006f24:	2300      	movne	r3, #0
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d048      	beq.n	8006fbe <cppLoop+0xea6>
			led.LR(-1, 1);
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f32:	4852      	ldr	r0, [pc, #328]	; (800707c <cppLoop+0xf64>)
 8006f34:	f7fb f86a 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006f38:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006f3c:	f000 fb0a 	bl	8007554 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8006f40:	f107 030c 	add.w	r3, r7, #12
 8006f44:	2201      	movs	r2, #1
 8006f46:	4950      	ldr	r1, [pc, #320]	; (8007088 <cppLoop+0xf70>)
 8006f48:	4850      	ldr	r0, [pc, #320]	; (800708c <cppLoop+0xf74>)
 8006f4a:	f7fa fb85 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 8006f4e:	f107 0308 	add.w	r3, r7, #8
 8006f52:	2201      	movs	r2, #1
 8006f54:	494e      	ldr	r1, [pc, #312]	; (8007090 <cppLoop+0xf78>)
 8006f56:	484d      	ldr	r0, [pc, #308]	; (800708c <cppLoop+0xf74>)
 8006f58:	f7fa fb7e 	bl	8001658 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 8006f5c:	1d3b      	adds	r3, r7, #4
 8006f5e:	2201      	movs	r2, #1
 8006f60:	494c      	ldr	r1, [pc, #304]	; (8007094 <cppLoop+0xf7c>)
 8006f62:	484a      	ldr	r0, [pc, #296]	; (800708c <cppLoop+0xf74>)
 8006f64:	f7fa fb78 	bl	8001658 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7f9 fb04 	bl	8000578 <__aeabi_f2d>
 8006f70:	4604      	mov	r4, r0
 8006f72:	460d      	mov	r5, r1
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7f9 fafe 	bl	8000578 <__aeabi_f2d>
 8006f7c:	4680      	mov	r8, r0
 8006f7e:	4689      	mov	r9, r1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7f9 faf8 	bl	8000578 <__aeabi_f2d>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	ec43 2b12 	vmov	d2, r2, r3
 8006f90:	ec49 8b11 	vmov	d1, r8, r9
 8006f94:	ec45 4b10 	vmov	d0, r4, r5
 8006f98:	483f      	ldr	r0, [pc, #252]	; (8007098 <cppLoop+0xf80>)
 8006f9a:	f7fc fca5 	bl	80038e8 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4a38      	ldr	r2, [pc, #224]	; (8007084 <cppLoop+0xf6c>)
 8006fa2:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a33      	ldr	r2, [pc, #204]	; (8007074 <cppLoop+0xf5c>)
 8006fa8:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a32      	ldr	r2, [pc, #200]	; (8007078 <cppLoop+0xf60>)
 8006fae:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb6:	4831      	ldr	r0, [pc, #196]	; (800707c <cppLoop+0xf64>)
 8006fb8:	f7fb f828 	bl	800200c <_ZN3LED2LREaa>
		break;
 8006fbc:	e184      	b.n	80072c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 8006fbe:	4830      	ldr	r0, [pc, #192]	; (8007080 <cppLoop+0xf68>)
 8006fc0:	f7fa ff04 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	bf0c      	ite	eq
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	2300      	movne	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 8179 	beq.w	80072c8 <cppLoop+0x11b0>
			led.LR(-1, 1);
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8006fdc:	4827      	ldr	r0, [pc, #156]	; (800707c <cppLoop+0xf64>)
 8006fde:	f7fb f815 	bl	800200c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006fe2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006fe6:	f000 fab5 	bl	8007554 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 8006fea:	2300      	movs	r3, #0
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	4b25      	ldr	r3, [pc, #148]	; (8007084 <cppLoop+0xf6c>)
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	4925      	ldr	r1, [pc, #148]	; (8007088 <cppLoop+0xf70>)
 8006ff4:	4825      	ldr	r0, [pc, #148]	; (800708c <cppLoop+0xf74>)
 8006ff6:	f7fa fac9 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <cppLoop+0xf5c>)
 8007000:	2201      	movs	r2, #1
 8007002:	4923      	ldr	r1, [pc, #140]	; (8007090 <cppLoop+0xf78>)
 8007004:	4821      	ldr	r0, [pc, #132]	; (800708c <cppLoop+0xf74>)
 8007006:	f7fa fac1 	bl	800158c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 800700a:	2300      	movs	r3, #0
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4b1a      	ldr	r3, [pc, #104]	; (8007078 <cppLoop+0xf60>)
 8007010:	2201      	movs	r2, #1
 8007012:	4920      	ldr	r1, [pc, #128]	; (8007094 <cppLoop+0xf7c>)
 8007014:	481d      	ldr	r0, [pc, #116]	; (800708c <cppLoop+0xf74>)
 8007016:	f7fa fab9 	bl	800158c <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <cppLoop+0xf6c>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f7f9 faaa 	bl	8000578 <__aeabi_f2d>
 8007024:	4604      	mov	r4, r0
 8007026:	460d      	mov	r5, r1
 8007028:	4b12      	ldr	r3, [pc, #72]	; (8007074 <cppLoop+0xf5c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 faa3 	bl	8000578 <__aeabi_f2d>
 8007032:	4680      	mov	r8, r0
 8007034:	4689      	mov	r9, r1
 8007036:	4b10      	ldr	r3, [pc, #64]	; (8007078 <cppLoop+0xf60>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f7f9 fa9c 	bl	8000578 <__aeabi_f2d>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	ec43 2b12 	vmov	d2, r2, r3
 8007048:	ec49 8b11 	vmov	d1, r8, r9
 800704c:	ec45 4b10 	vmov	d0, r4, r5
 8007050:	4811      	ldr	r0, [pc, #68]	; (8007098 <cppLoop+0xf80>)
 8007052:	f7fc fc49 	bl	80038e8 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8007056:	2200      	movs	r2, #0
 8007058:	f04f 31ff 	mov.w	r1, #4294967295
 800705c:	4807      	ldr	r0, [pc, #28]	; (800707c <cppLoop+0xf64>)
 800705e:	f7fa ffd5 	bl	800200c <_ZN3LED2LREaa>
		break;
 8007062:	e131      	b.n	80072c8 <cppLoop+0x11b0>
 8007064:	f3af 8000 	nop.w
 8007068:	88e368f1 	.word	0x88e368f1
 800706c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007070:	20033596 	.word	0x20033596
 8007074:	200335b8 	.word	0x200335b8
 8007078:	200335c0 	.word	0x200335c0
 800707c:	200005ac 	.word	0x200005ac
 8007080:	200005a0 	.word	0x200005a0
 8007084:	200335b0 	.word	0x200335b0
 8007088:	08018354 	.word	0x08018354
 800708c:	08018298 	.word	0x08018298
 8007090:	0801835c 	.word	0x0801835c
 8007094:	08018364 	.word	0x08018364
 8007098:	2001be68 	.word	0x2001be68

	case 9:
		led.fullColor('M');
 800709c:	214d      	movs	r1, #77	; 0x4d
 800709e:	4898      	ldr	r0, [pc, #608]	; (8007300 <cppLoop+0x11e8>)
 80070a0:	f7fa fef8 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80070a4:	f7f9 fffc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80070a8:	2100      	movs	r1, #0
 80070aa:	2000      	movs	r0, #0
 80070ac:	f7fa f808 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80070b0:	4894      	ldr	r0, [pc, #592]	; (8007304 <cppLoop+0x11ec>)
 80070b2:	f7fa f82f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80070b6:	2101      	movs	r1, #1
 80070b8:	2000      	movs	r0, #0
 80070ba:	f7fa f801 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80070be:	4892      	ldr	r0, [pc, #584]	; (8007308 <cppLoop+0x11f0>)
 80070c0:	f7fa f828 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80070c4:	4891      	ldr	r0, [pc, #580]	; (800730c <cppLoop+0x11f4>)
 80070c6:	f7fa fe81 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	bf0c      	ite	eq
 80070d0:	2301      	moveq	r3, #1
 80070d2:	2300      	movne	r3, #0
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 80f8 	beq.w	80072cc <cppLoop+0x11b4>
			HAL_Delay(1500);
 80070dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80070e0:	f000 fa38 	bl	8007554 <HAL_Delay>
			led.LR(-1, 1);
 80070e4:	2201      	movs	r2, #1
 80070e6:	f04f 31ff 	mov.w	r1, #4294967295
 80070ea:	4885      	ldr	r0, [pc, #532]	; (8007300 <cppLoop+0x11e8>)
 80070ec:	f7fa ff8e 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 80070f0:	4887      	ldr	r0, [pc, #540]	; (8007310 <cppLoop+0x11f8>)
 80070f2:	f7fc f905 	bl	8003300 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80070f6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 80072e8 <cppLoop+0x11d0>
 80070fa:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 80072f0 <cppLoop+0x11d8>
 80070fe:	4885      	ldr	r0, [pc, #532]	; (8007314 <cppLoop+0x11fc>)
 8007100:	f7fc f994 	bl	800342c <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007108:	f000 fa24 	bl	8007554 <HAL_Delay>

			logger.stop();
 800710c:	4880      	ldr	r0, [pc, #512]	; (8007310 <cppLoop+0x11f8>)
 800710e:	f7fc f908 	bl	8003322 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007112:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80072f8 <cppLoop+0x11e0>
 8007116:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80072f8 <cppLoop+0x11e0>
 800711a:	487e      	ldr	r0, [pc, #504]	; (8007314 <cppLoop+0x11fc>)
 800711c:	f7fc f986 	bl	800342c <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007120:	4a7d      	ldr	r2, [pc, #500]	; (8007318 <cppLoop+0x1200>)
 8007122:	497e      	ldr	r1, [pc, #504]	; (800731c <cppLoop+0x1204>)
 8007124:	487a      	ldr	r0, [pc, #488]	; (8007310 <cppLoop+0x11f8>)
 8007126:	f7fc f822 	bl	800316e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800712a:	2200      	movs	r2, #0
 800712c:	f04f 31ff 	mov.w	r1, #4294967295
 8007130:	4873      	ldr	r0, [pc, #460]	; (8007300 <cppLoop+0x11e8>)
 8007132:	f7fa ff6b 	bl	800200c <_ZN3LED2LREaa>
		}
		break;
 8007136:	e0c9      	b.n	80072cc <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8007138:	2159      	movs	r1, #89	; 0x59
 800713a:	4871      	ldr	r0, [pc, #452]	; (8007300 <cppLoop+0x11e8>)
 800713c:	f7fa feaa 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007140:	f7f9 ffae 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007144:	2100      	movs	r1, #0
 8007146:	2000      	movs	r0, #0
 8007148:	f7f9 ffba 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800714c:	4874      	ldr	r0, [pc, #464]	; (8007320 <cppLoop+0x1208>)
 800714e:	f7f9 ffe1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007152:	2101      	movs	r1, #1
 8007154:	2000      	movs	r0, #0
 8007156:	f7f9 ffb3 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800715a:	4872      	ldr	r0, [pc, #456]	; (8007324 <cppLoop+0x120c>)
 800715c:	f7f9 ffda 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007160:	486a      	ldr	r0, [pc, #424]	; (800730c <cppLoop+0x11f4>)
 8007162:	f7fa fe33 	bl	8001dcc <_ZN8JoyStick8getValueEv>
 8007166:	4603      	mov	r3, r0
 8007168:	2b02      	cmp	r3, #2
 800716a:	bf0c      	ite	eq
 800716c:	2301      	moveq	r3, #1
 800716e:	2300      	movne	r3, #0
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80ac 	beq.w	80072d0 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8007178:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800717c:	f000 f9ea 	bl	8007554 <HAL_Delay>
			led.LR(-1, 1);
 8007180:	2201      	movs	r2, #1
 8007182:	f04f 31ff 	mov.w	r1, #4294967295
 8007186:	485e      	ldr	r0, [pc, #376]	; (8007300 <cppLoop+0x11e8>)
 8007188:	f7fa ff40 	bl	800200c <_ZN3LED2LREaa>

			logger.start();
 800718c:	4860      	ldr	r0, [pc, #384]	; (8007310 <cppLoop+0x11f8>)
 800718e:	f7fc f8b7 	bl	8003300 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007192:	4865      	ldr	r0, [pc, #404]	; (8007328 <cppLoop+0x1210>)
 8007194:	f7fd f821 	bl	80041da <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007198:	eddf 0a64 	vldr	s1, [pc, #400]	; 800732c <cppLoop+0x1214>
 800719c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80071a0:	4861      	ldr	r0, [pc, #388]	; (8007328 <cppLoop+0x1210>)
 80071a2:	f7fc ffad 	bl	8004100 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80071a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80071aa:	f000 f9d3 	bl	8007554 <HAL_Delay>

			logger.stop();
 80071ae:	4858      	ldr	r0, [pc, #352]	; (8007310 <cppLoop+0x11f8>)
 80071b0:	f7fc f8b7 	bl	8003322 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80071b4:	485c      	ldr	r0, [pc, #368]	; (8007328 <cppLoop+0x1210>)
 80071b6:	f7fd f823 	bl	8004200 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80071ba:	4a5d      	ldr	r2, [pc, #372]	; (8007330 <cppLoop+0x1218>)
 80071bc:	4957      	ldr	r1, [pc, #348]	; (800731c <cppLoop+0x1204>)
 80071be:	4854      	ldr	r0, [pc, #336]	; (8007310 <cppLoop+0x11f8>)
 80071c0:	f7fb ffd5 	bl	800316e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80071c4:	2200      	movs	r2, #0
 80071c6:	f04f 31ff 	mov.w	r1, #4294967295
 80071ca:	484d      	ldr	r0, [pc, #308]	; (8007300 <cppLoop+0x11e8>)
 80071cc:	f7fa ff1e 	bl	800200c <_ZN3LED2LREaa>
		}

		break;
 80071d0:	e07e      	b.n	80072d0 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 80071d2:	2143      	movs	r1, #67	; 0x43
 80071d4:	484a      	ldr	r0, [pc, #296]	; (8007300 <cppLoop+0x11e8>)
 80071d6:	f7fa fe5d 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 80071da:	f7f9 ff61 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80071de:	2100      	movs	r1, #0
 80071e0:	2000      	movs	r0, #0
 80071e2:	f7f9 ff6d 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 80071e6:	4853      	ldr	r0, [pc, #332]	; (8007334 <cppLoop+0x121c>)
 80071e8:	f7f9 ff94 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80071ec:	2101      	movs	r1, #1
 80071ee:	2000      	movs	r0, #0
 80071f0:	f7f9 ff66 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80071f4:	4850      	ldr	r0, [pc, #320]	; (8007338 <cppLoop+0x1220>)
 80071f6:	f7f9 ff8d 	bl	8001114 <lcd_printf>

		break;
 80071fa:	e06a      	b.n	80072d2 <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 80071fc:	2152      	movs	r1, #82	; 0x52
 80071fe:	4840      	ldr	r0, [pc, #256]	; (8007300 <cppLoop+0x11e8>)
 8007200:	f7fa fe48 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007204:	f7f9 ff4c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007208:	2100      	movs	r1, #0
 800720a:	2000      	movs	r0, #0
 800720c:	f7f9 ff58 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8007210:	484a      	ldr	r0, [pc, #296]	; (800733c <cppLoop+0x1224>)
 8007212:	f7f9 ff7f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007216:	2101      	movs	r1, #1
 8007218:	2000      	movs	r0, #0
 800721a:	f7f9 ff51 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800721e:	4846      	ldr	r0, [pc, #280]	; (8007338 <cppLoop+0x1220>)
 8007220:	f7f9 ff78 	bl	8001114 <lcd_printf>

		break;
 8007224:	e055      	b.n	80072d2 <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 8007226:	2147      	movs	r1, #71	; 0x47
 8007228:	4835      	ldr	r0, [pc, #212]	; (8007300 <cppLoop+0x11e8>)
 800722a:	f7fa fe33 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 800722e:	f7f9 ff37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007232:	2100      	movs	r1, #0
 8007234:	2000      	movs	r0, #0
 8007236:	f7f9 ff43 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 800723a:	4841      	ldr	r0, [pc, #260]	; (8007340 <cppLoop+0x1228>)
 800723c:	f7f9 ff6a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007240:	2101      	movs	r1, #1
 8007242:	2000      	movs	r0, #0
 8007244:	f7f9 ff3c 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007248:	483b      	ldr	r0, [pc, #236]	; (8007338 <cppLoop+0x1220>)
 800724a:	f7f9 ff63 	bl	8001114 <lcd_printf>

		break;
 800724e:	e040      	b.n	80072d2 <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8007250:	2142      	movs	r1, #66	; 0x42
 8007252:	482b      	ldr	r0, [pc, #172]	; (8007300 <cppLoop+0x11e8>)
 8007254:	f7fa fe1e 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007258:	f7f9 ff22 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800725c:	2100      	movs	r1, #0
 800725e:	2000      	movs	r0, #0
 8007260:	f7f9 ff2e 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8007264:	4837      	ldr	r0, [pc, #220]	; (8007344 <cppLoop+0x122c>)
 8007266:	f7f9 ff55 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800726a:	2101      	movs	r1, #1
 800726c:	2000      	movs	r0, #0
 800726e:	f7f9 ff27 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007272:	4831      	ldr	r0, [pc, #196]	; (8007338 <cppLoop+0x1220>)
 8007274:	f7f9 ff4e 	bl	8001114 <lcd_printf>

		break;
 8007278:	e02b      	b.n	80072d2 <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 800727a:	214d      	movs	r1, #77	; 0x4d
 800727c:	4820      	ldr	r0, [pc, #128]	; (8007300 <cppLoop+0x11e8>)
 800727e:	f7fa fe09 	bl	8001e94 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007282:	f7f9 ff0d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007286:	2100      	movs	r1, #0
 8007288:	2000      	movs	r0, #0
 800728a:	f7f9 ff19 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 800728e:	482e      	ldr	r0, [pc, #184]	; (8007348 <cppLoop+0x1230>)
 8007290:	f7f9 ff40 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007294:	2101      	movs	r1, #1
 8007296:	2000      	movs	r0, #0
 8007298:	f7f9 ff12 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800729c:	4826      	ldr	r0, [pc, #152]	; (8007338 <cppLoop+0x1220>)
 800729e:	f7f9 ff39 	bl	8001114 <lcd_printf>

		break;
 80072a2:	e016      	b.n	80072d2 <cppLoop+0x11ba>

	default:
		break;
 80072a4:	bf00      	nop
 80072a6:	e014      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072a8:	bf00      	nop
 80072aa:	e012      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072ac:	bf00      	nop
 80072ae:	e010      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072b0:	bf00      	nop
 80072b2:	e00e      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072b4:	bf00      	nop
 80072b6:	e00c      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072b8:	bf00      	nop
 80072ba:	e00a      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072bc:	bf00      	nop
 80072be:	e008      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072c0:	bf00      	nop
 80072c2:	e006      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072c4:	bf00      	nop
 80072c6:	e004      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072c8:	bf00      	nop
 80072ca:	e002      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072cc:	bf00      	nop
 80072ce:	e000      	b.n	80072d2 <cppLoop+0x11ba>
		break;
 80072d0:	bf00      	nop

	}

	HAL_Delay(30);
 80072d2:	201e      	movs	r0, #30
 80072d4:	f000 f93e 	bl	8007554 <HAL_Delay>

}
 80072d8:	bf00      	nop
 80072da:	3724      	adds	r7, #36	; 0x24
 80072dc:	46bd      	mov	sp, r7
 80072de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e2:	bf00      	nop
 80072e4:	f3af 8000 	nop.w
 80072e8:	33333333 	.word	0x33333333
 80072ec:	bfd33333 	.word	0xbfd33333
 80072f0:	33333333 	.word	0x33333333
 80072f4:	3fd33333 	.word	0x3fd33333
	...
 8007300:	200005ac 	.word	0x200005ac
 8007304:	0801836c 	.word	0x0801836c
 8007308:	080182cc 	.word	0x080182cc
 800730c:	200005a0 	.word	0x200005a0
 8007310:	200005d0 	.word	0x200005d0
 8007314:	200005a8 	.word	0x200005a8
 8007318:	08018374 	.word	0x08018374
 800731c:	08018380 	.word	0x08018380
 8007320:	0801838c 	.word	0x0801838c
 8007324:	08018390 	.word	0x08018390
 8007328:	20015db0 	.word	0x20015db0
 800732c:	00000000 	.word	0x00000000
 8007330:	0801839c 	.word	0x0801839c
 8007334:	080183a8 	.word	0x080183a8
 8007338:	080183b4 	.word	0x080183b4
 800733c:	080183c0 	.word	0x080183c0
 8007340:	080183cc 	.word	0x080183cc
 8007344:	080183d8 	.word	0x080183d8
 8007348:	080183e4 	.word	0x080183e4

0800734c <_Z41__static_initialization_and_destruction_0ii>:
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af04      	add	r7, sp, #16
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d13b      	bne.n	80073d4 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007362:	4293      	cmp	r3, r2
 8007364:	d136      	bne.n	80073d4 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 8007366:	481d      	ldr	r0, [pc, #116]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007368:	f7fa fe88 	bl	800207c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800736c:	481c      	ldr	r0, [pc, #112]	; (80073e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800736e:	f7fc fbe3 	bl	8003b38 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007372:	481c      	ldr	r0, [pc, #112]	; (80073e4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007374:	f7fa fd1e 	bl	8001db4 <_ZN8JoyStickC1Ev>
Motor motor;
 8007378:	481b      	ldr	r0, [pc, #108]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800737a:	f7fb ffe3 	bl	8003344 <_ZN5MotorC1Ev>
IMU imu;
 800737e:	481b      	ldr	r0, [pc, #108]	; (80073ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007380:	f7fa fb1c 	bl	80019bc <_ZN3IMUC1Ev>
Logger logger;
 8007384:	481a      	ldr	r0, [pc, #104]	; (80073f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007386:	f7fb fdb1 	bl	8002eec <_ZN6LoggerC1Ev>
Encoder encoder;
 800738a:	481a      	ldr	r0, [pc, #104]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800738c:	f7f9 fee2 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007390:	4b16      	ldr	r3, [pc, #88]	; (80073ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007392:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007394:	4914      	ldr	r1, [pc, #80]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007396:	4818      	ldr	r0, [pc, #96]	; (80073f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007398:	f7fc fd86 	bl	8003ea8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800739c:	4b16      	ldr	r3, [pc, #88]	; (80073f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800739e:	4a13      	ldr	r2, [pc, #76]	; (80073ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80073a0:	4914      	ldr	r1, [pc, #80]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80073a2:	4816      	ldr	r0, [pc, #88]	; (80073fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80073a4:	f7fc f8b4 	bl	8003510 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 80073a8:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	4b13      	ldr	r3, [pc, #76]	; (80073fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	4b10      	ldr	r3, [pc, #64]	; (80073f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	4b0f      	ldr	r3, [pc, #60]	; (80073f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80073ba:	4a08      	ldr	r2, [pc, #32]	; (80073dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80073bc:	490a      	ldr	r1, [pc, #40]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80073be:	4810      	ldr	r0, [pc, #64]	; (8007400 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80073c0:	f7fb f9b4 	bl	800272c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 80073c4:	4a08      	ldr	r2, [pc, #32]	; (80073e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80073c6:	490a      	ldr	r1, [pc, #40]	; (80073f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80073c8:	480e      	ldr	r0, [pc, #56]	; (8007404 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80073ca:	f7fc fc69 	bl	8003ca0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80073ce:	480e      	ldr	r0, [pc, #56]	; (8007408 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80073d0:	f7fc f9d2 	bl	8003778 <_ZN13PathFollowingC1Ev>
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	200002a0 	.word	0x200002a0
 80073e0:	20000598 	.word	0x20000598
 80073e4:	200005a0 	.word	0x200005a0
 80073e8:	200005a8 	.word	0x200005a8
 80073ec:	200005bc 	.word	0x200005bc
 80073f0:	200005d0 	.word	0x200005d0
 80073f4:	20015d98 	.word	0x20015d98
 80073f8:	20015db0 	.word	0x20015db0
 80073fc:	20015df0 	.word	0x20015df0
 8007400:	20015e20 	.word	0x20015e20
 8007404:	2001bc5c 	.word	0x2001bc5c
 8007408:	2001be68 	.word	0x2001be68

0800740c <_GLOBAL__sub_I_line_sensor>:
 800740c:	b580      	push	{r7, lr}
 800740e:	af00      	add	r7, sp, #0
 8007410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007414:	2001      	movs	r0, #1
 8007416:	f7ff ff99 	bl	800734c <_Z41__static_initialization_and_destruction_0ii>
 800741a:	bd80      	pop	{r7, pc}

0800741c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800741c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007422:	e003      	b.n	800742c <LoopCopyDataInit>

08007424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800742a:	3104      	adds	r1, #4

0800742c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800742c:	480b      	ldr	r0, [pc, #44]	; (800745c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007434:	d3f6      	bcc.n	8007424 <CopyDataInit>
  ldr  r2, =_sbss
 8007436:	4a0b      	ldr	r2, [pc, #44]	; (8007464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007438:	e002      	b.n	8007440 <LoopFillZerobss>

0800743a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800743a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800743c:	f842 3b04 	str.w	r3, [r2], #4

08007440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007444:	d3f9      	bcc.n	800743a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007446:	f7fe fced 	bl	8005e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800744a:	f00b fded 	bl	8013028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800744e:	f7fc ffb3 	bl	80043b8 <main>
  bx  lr    
 8007452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007454:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007458:	080189e8 	.word	0x080189e8
  ldr  r0, =_sdata
 800745c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007460:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007464:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007468:	20037fa8 	.word	0x20037fa8

0800746c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800746c:	e7fe      	b.n	800746c <ADC_IRQHandler>
	...

08007470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007474:	4b0e      	ldr	r3, [pc, #56]	; (80074b0 <HAL_Init+0x40>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a0d      	ldr	r2, [pc, #52]	; (80074b0 <HAL_Init+0x40>)
 800747a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800747e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_Init+0x40>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a0a      	ldr	r2, [pc, #40]	; (80074b0 <HAL_Init+0x40>)
 8007486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800748a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <HAL_Init+0x40>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <HAL_Init+0x40>)
 8007492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007498:	2003      	movs	r0, #3
 800749a:	f000 fd51 	bl	8007f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800749e:	2000      	movs	r0, #0
 80074a0:	f000 f808 	bl	80074b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074a4:	f7fd feac 	bl	8005200 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40023c00 	.word	0x40023c00

080074b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074bc:	4b12      	ldr	r3, [pc, #72]	; (8007508 <HAL_InitTick+0x54>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	4b12      	ldr	r3, [pc, #72]	; (800750c <HAL_InitTick+0x58>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	4619      	mov	r1, r3
 80074c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	4618      	mov	r0, r3
 80074d4:	f000 fd69 	bl	8007faa <HAL_SYSTICK_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e00e      	b.n	8007500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b0f      	cmp	r3, #15
 80074e6:	d80a      	bhi.n	80074fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074e8:	2200      	movs	r2, #0
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295
 80074f0:	f000 fd31 	bl	8007f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074f4:	4a06      	ldr	r2, [pc, #24]	; (8007510 <HAL_InitTick+0x5c>)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
}
 8007500:	4618      	mov	r0, r3
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	20000000 	.word	0x20000000
 800750c:	20000008 	.word	0x20000008
 8007510:	20000004 	.word	0x20000004

08007514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007514:	b480      	push	{r7}
 8007516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <HAL_IncTick+0x20>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	461a      	mov	r2, r3
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_IncTick+0x24>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4413      	add	r3, r2
 8007524:	4a04      	ldr	r2, [pc, #16]	; (8007538 <HAL_IncTick+0x24>)
 8007526:	6013      	str	r3, [r2, #0]
}
 8007528:	bf00      	nop
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
 8007532:	bf00      	nop
 8007534:	20000008 	.word	0x20000008
 8007538:	20035f30 	.word	0x20035f30

0800753c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  return uwTick;
 8007540:	4b03      	ldr	r3, [pc, #12]	; (8007550 <HAL_GetTick+0x14>)
 8007542:	681b      	ldr	r3, [r3, #0]
}
 8007544:	4618      	mov	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	20035f30 	.word	0x20035f30

08007554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800755c:	f7ff ffee 	bl	800753c <HAL_GetTick>
 8007560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d005      	beq.n	800757a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <HAL_Delay+0x40>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	4413      	add	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800757a:	bf00      	nop
 800757c:	f7ff ffde 	bl	800753c <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	429a      	cmp	r2, r3
 800758a:	d8f7      	bhi.n	800757c <HAL_Delay+0x28>
  {
  }
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	20000008 	.word	0x20000008

08007598 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075a0:	2300      	movs	r3, #0
 80075a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e033      	b.n	8007616 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d109      	bne.n	80075ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7fd fe4a 	bl	8005250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 0310 	and.w	r3, r3, #16
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d118      	bne.n	8007608 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075de:	f023 0302 	bic.w	r3, r3, #2
 80075e2:	f043 0202 	orr.w	r2, r3, #2
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fa5a 	bl	8007aa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f023 0303 	bic.w	r3, r3, #3
 80075fe:	f043 0201 	orr.w	r2, r3, #1
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	641a      	str	r2, [r3, #64]	; 0x40
 8007606:	e001      	b.n	800760c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
	...

08007620 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_ADC_Start_DMA+0x1e>
 800763a:	2302      	movs	r3, #2
 800763c:	e0cc      	b.n	80077d8 <HAL_ADC_Start_DMA+0x1b8>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d018      	beq.n	8007686 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007664:	4b5e      	ldr	r3, [pc, #376]	; (80077e0 <HAL_ADC_Start_DMA+0x1c0>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a5e      	ldr	r2, [pc, #376]	; (80077e4 <HAL_ADC_Start_DMA+0x1c4>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	0c9a      	lsrs	r2, r3, #18
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007678:	e002      	b.n	8007680 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	3b01      	subs	r3, #1
 800767e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f9      	bne.n	800767a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	f040 80a0 	bne.w	80077d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800769e:	f023 0301 	bic.w	r3, r3, #1
 80076a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d4:	d106      	bne.n	80076e4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	f023 0206 	bic.w	r2, r3, #6
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	645a      	str	r2, [r3, #68]	; 0x44
 80076e2:	e002      	b.n	80076ea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076f2:	4b3d      	ldr	r3, [pc, #244]	; (80077e8 <HAL_ADC_Start_DMA+0x1c8>)
 80076f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	4a3c      	ldr	r2, [pc, #240]	; (80077ec <HAL_ADC_Start_DMA+0x1cc>)
 80076fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007702:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <HAL_ADC_Start_DMA+0x1d0>)
 8007704:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	4a3a      	ldr	r2, [pc, #232]	; (80077f4 <HAL_ADC_Start_DMA+0x1d4>)
 800770c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007716:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007726:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007736:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	334c      	adds	r3, #76	; 0x4c
 8007742:	4619      	mov	r1, r3
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f000 fcea 	bl	8008120 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f003 031f 	and.w	r3, r3, #31
 8007754:	2b00      	cmp	r3, #0
 8007756:	d12a      	bne.n	80077ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a26      	ldr	r2, [pc, #152]	; (80077f8 <HAL_ADC_Start_DMA+0x1d8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d015      	beq.n	800778e <HAL_ADC_Start_DMA+0x16e>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a25      	ldr	r2, [pc, #148]	; (80077fc <HAL_ADC_Start_DMA+0x1dc>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d105      	bne.n	8007778 <HAL_ADC_Start_DMA+0x158>
 800776c:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <HAL_ADC_Start_DMA+0x1c8>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a20      	ldr	r2, [pc, #128]	; (8007800 <HAL_ADC_Start_DMA+0x1e0>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d129      	bne.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
 8007782:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <HAL_ADC_Start_DMA+0x1c8>)
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f003 031f 	and.w	r3, r3, #31
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d823      	bhi.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d11c      	bne.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077aa:	609a      	str	r2, [r3, #8]
 80077ac:	e013      	b.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a11      	ldr	r2, [pc, #68]	; (80077f8 <HAL_ADC_Start_DMA+0x1d8>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d10e      	bne.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d107      	bne.n	80077d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20000000 	.word	0x20000000
 80077e4:	431bde83 	.word	0x431bde83
 80077e8:	40012300 	.word	0x40012300
 80077ec:	08007c9d 	.word	0x08007c9d
 80077f0:	08007d57 	.word	0x08007d57
 80077f4:	08007d73 	.word	0x08007d73
 80077f8:	40012000 	.word	0x40012000
 80077fc:	40012100 	.word	0x40012100
 8007800:	40012200 	.word	0x40012200

08007804 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007840:	b480      	push	{r7}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007854:	2b01      	cmp	r3, #1
 8007856:	d101      	bne.n	800785c <HAL_ADC_ConfigChannel+0x1c>
 8007858:	2302      	movs	r3, #2
 800785a:	e113      	b.n	8007a84 <HAL_ADC_ConfigChannel+0x244>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b09      	cmp	r3, #9
 800786a:	d925      	bls.n	80078b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68d9      	ldr	r1, [r3, #12]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	b29b      	uxth	r3, r3
 8007878:	461a      	mov	r2, r3
 800787a:	4613      	mov	r3, r2
 800787c:	005b      	lsls	r3, r3, #1
 800787e:	4413      	add	r3, r2
 8007880:	3b1e      	subs	r3, #30
 8007882:	2207      	movs	r2, #7
 8007884:	fa02 f303 	lsl.w	r3, r2, r3
 8007888:	43da      	mvns	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	400a      	ands	r2, r1
 8007890:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68d9      	ldr	r1, [r3, #12]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	689a      	ldr	r2, [r3, #8]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	4618      	mov	r0, r3
 80078a4:	4603      	mov	r3, r0
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4403      	add	r3, r0
 80078aa:	3b1e      	subs	r3, #30
 80078ac:	409a      	lsls	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	60da      	str	r2, [r3, #12]
 80078b6:	e022      	b.n	80078fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6919      	ldr	r1, [r3, #16]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	2207      	movs	r2, #7
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	43da      	mvns	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	400a      	ands	r2, r1
 80078da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6919      	ldr	r1, [r3, #16]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4618      	mov	r0, r3
 80078ee:	4603      	mov	r3, r0
 80078f0:	005b      	lsls	r3, r3, #1
 80078f2:	4403      	add	r3, r0
 80078f4:	409a      	lsls	r2, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	2b06      	cmp	r3, #6
 8007904:	d824      	bhi.n	8007950 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	685a      	ldr	r2, [r3, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	3b05      	subs	r3, #5
 8007918:	221f      	movs	r2, #31
 800791a:	fa02 f303 	lsl.w	r3, r2, r3
 800791e:	43da      	mvns	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	400a      	ands	r2, r1
 8007926:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	4618      	mov	r0, r3
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	3b05      	subs	r3, #5
 8007942:	fa00 f203 	lsl.w	r2, r0, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	635a      	str	r2, [r3, #52]	; 0x34
 800794e:	e04c      	b.n	80079ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	2b0c      	cmp	r3, #12
 8007956:	d824      	bhi.n	80079a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	685a      	ldr	r2, [r3, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	3b23      	subs	r3, #35	; 0x23
 800796a:	221f      	movs	r2, #31
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	43da      	mvns	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	400a      	ands	r2, r1
 8007978:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	4618      	mov	r0, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	3b23      	subs	r3, #35	; 0x23
 8007994:	fa00 f203 	lsl.w	r2, r0, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	631a      	str	r2, [r3, #48]	; 0x30
 80079a0:	e023      	b.n	80079ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	3b41      	subs	r3, #65	; 0x41
 80079b4:	221f      	movs	r2, #31
 80079b6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ba:	43da      	mvns	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	400a      	ands	r2, r1
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	4618      	mov	r0, r3
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	685a      	ldr	r2, [r3, #4]
 80079d6:	4613      	mov	r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	4413      	add	r3, r2
 80079dc:	3b41      	subs	r3, #65	; 0x41
 80079de:	fa00 f203 	lsl.w	r2, r0, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80079ea:	4b29      	ldr	r3, [pc, #164]	; (8007a90 <HAL_ADC_ConfigChannel+0x250>)
 80079ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a28      	ldr	r2, [pc, #160]	; (8007a94 <HAL_ADC_ConfigChannel+0x254>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d10f      	bne.n	8007a18 <HAL_ADC_ConfigChannel+0x1d8>
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2b12      	cmp	r3, #18
 80079fe:	d10b      	bne.n	8007a18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <HAL_ADC_ConfigChannel+0x254>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d12b      	bne.n	8007a7a <HAL_ADC_ConfigChannel+0x23a>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a1c      	ldr	r2, [pc, #112]	; (8007a98 <HAL_ADC_ConfigChannel+0x258>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <HAL_ADC_ConfigChannel+0x1f4>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b11      	cmp	r3, #17
 8007a32:	d122      	bne.n	8007a7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a11      	ldr	r2, [pc, #68]	; (8007a98 <HAL_ADC_ConfigChannel+0x258>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d111      	bne.n	8007a7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_ADC_ConfigChannel+0x25c>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a11      	ldr	r2, [pc, #68]	; (8007aa0 <HAL_ADC_ConfigChannel+0x260>)
 8007a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a60:	0c9a      	lsrs	r2, r3, #18
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	005b      	lsls	r3, r3, #1
 8007a6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a6c:	e002      	b.n	8007a74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f9      	bne.n	8007a6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	40012300 	.word	0x40012300
 8007a94:	40012000 	.word	0x40012000
 8007a98:	10000012 	.word	0x10000012
 8007a9c:	20000000 	.word	0x20000000
 8007aa0:	431bde83 	.word	0x431bde83

08007aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aac:	4b79      	ldr	r3, [pc, #484]	; (8007c94 <ADC_Init+0x1f0>)
 8007aae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	6859      	ldr	r1, [r3, #4]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	021a      	lsls	r2, r3, #8
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6859      	ldr	r1, [r3, #4]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689a      	ldr	r2, [r3, #8]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6899      	ldr	r1, [r3, #8]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68da      	ldr	r2, [r3, #12]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b36:	4a58      	ldr	r2, [pc, #352]	; (8007c98 <ADC_Init+0x1f4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d022      	beq.n	8007b82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6899      	ldr	r1, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6899      	ldr	r1, [r3, #8]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	609a      	str	r2, [r3, #8]
 8007b80:	e00f      	b.n	8007ba2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	689a      	ldr	r2, [r3, #8]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689a      	ldr	r2, [r3, #8]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ba0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f022 0202 	bic.w	r2, r2, #2
 8007bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6899      	ldr	r1, [r3, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	7e1b      	ldrb	r3, [r3, #24]
 8007bbc:	005a      	lsls	r2, r3, #1
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d01b      	beq.n	8007c08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685a      	ldr	r2, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007bee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	6859      	ldr	r1, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	035a      	lsls	r2, r3, #13
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	430a      	orrs	r2, r1
 8007c04:	605a      	str	r2, [r3, #4]
 8007c06:	e007      	b.n	8007c18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685a      	ldr	r2, [r3, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	051a      	lsls	r2, r3, #20
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6899      	ldr	r1, [r3, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c5a:	025a      	lsls	r2, r3, #9
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	689a      	ldr	r2, [r3, #8]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	6899      	ldr	r1, [r3, #8]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	029a      	lsls	r2, r3, #10
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	609a      	str	r2, [r3, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	40012300 	.word	0x40012300
 8007c98:	0f000001 	.word	0x0f000001

08007c9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d13c      	bne.n	8007d30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d12b      	bne.n	8007d28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d127      	bne.n	8007d28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d006      	beq.n	8007cf4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d119      	bne.n	8007d28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 0220 	bic.w	r2, r2, #32
 8007d02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d105      	bne.n	8007d28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f043 0201 	orr.w	r2, r3, #1
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d28:	68f8      	ldr	r0, [r7, #12]
 8007d2a:	f7ff fd6b 	bl	8007804 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d2e:	e00e      	b.n	8007d4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	f003 0310 	and.w	r3, r3, #16
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d3c:	68f8      	ldr	r0, [r7, #12]
 8007d3e:	f7ff fd75 	bl	800782c <HAL_ADC_ErrorCallback>
}
 8007d42:	e004      	b.n	8007d4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	4798      	blx	r3
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fd57 	bl	8007818 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d6a:	bf00      	nop
 8007d6c:	3710      	adds	r7, #16
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2240      	movs	r2, #64	; 0x40
 8007d84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f043 0204 	orr.w	r2, r3, #4
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f7ff fd4a 	bl	800782c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <__NVIC_SetPriorityGrouping>:
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f003 0307 	and.w	r3, r3, #7
 8007dae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007db0:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <__NVIC_SetPriorityGrouping+0x44>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dd2:	4a04      	ldr	r2, [pc, #16]	; (8007de4 <__NVIC_SetPriorityGrouping+0x44>)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	60d3      	str	r3, [r2, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	3714      	adds	r7, #20
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr
 8007de4:	e000ed00 	.word	0xe000ed00

08007de8 <__NVIC_GetPriorityGrouping>:
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007dec:	4b04      	ldr	r3, [pc, #16]	; (8007e00 <__NVIC_GetPriorityGrouping+0x18>)
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	f003 0307 	and.w	r3, r3, #7
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	e000ed00 	.word	0xe000ed00

08007e04 <__NVIC_EnableIRQ>:
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	db0b      	blt.n	8007e2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	f003 021f 	and.w	r2, r3, #31
 8007e1c:	4907      	ldr	r1, [pc, #28]	; (8007e3c <__NVIC_EnableIRQ+0x38>)
 8007e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e22:	095b      	lsrs	r3, r3, #5
 8007e24:	2001      	movs	r0, #1
 8007e26:	fa00 f202 	lsl.w	r2, r0, r2
 8007e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	e000e100 	.word	0xe000e100

08007e40 <__NVIC_SetPriority>:
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	4603      	mov	r3, r0
 8007e48:	6039      	str	r1, [r7, #0]
 8007e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	db0a      	blt.n	8007e6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	490c      	ldr	r1, [pc, #48]	; (8007e8c <__NVIC_SetPriority+0x4c>)
 8007e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e5e:	0112      	lsls	r2, r2, #4
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	440b      	add	r3, r1
 8007e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007e68:	e00a      	b.n	8007e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	4908      	ldr	r1, [pc, #32]	; (8007e90 <__NVIC_SetPriority+0x50>)
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	f003 030f 	and.w	r3, r3, #15
 8007e76:	3b04      	subs	r3, #4
 8007e78:	0112      	lsls	r2, r2, #4
 8007e7a:	b2d2      	uxtb	r2, r2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	761a      	strb	r2, [r3, #24]
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000e100 	.word	0xe000e100
 8007e90:	e000ed00 	.word	0xe000ed00

08007e94 <NVIC_EncodePriority>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	b089      	sub	sp, #36	; 0x24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f1c3 0307 	rsb	r3, r3, #7
 8007eae:	2b04      	cmp	r3, #4
 8007eb0:	bf28      	it	cs
 8007eb2:	2304      	movcs	r3, #4
 8007eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	2b06      	cmp	r3, #6
 8007ebc:	d902      	bls.n	8007ec4 <NVIC_EncodePriority+0x30>
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	3b03      	subs	r3, #3
 8007ec2:	e000      	b.n	8007ec6 <NVIC_EncodePriority+0x32>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	43da      	mvns	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	401a      	ands	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007edc:	f04f 31ff 	mov.w	r1, #4294967295
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee6:	43d9      	mvns	r1, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007eec:	4313      	orrs	r3, r2
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3724      	adds	r7, #36	; 0x24
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <SysTick_Config>:
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3b01      	subs	r3, #1
 8007f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f0c:	d301      	bcc.n	8007f12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e00f      	b.n	8007f32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f12:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <SysTick_Config+0x40>)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f1a:	210f      	movs	r1, #15
 8007f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f20:	f7ff ff8e 	bl	8007e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <SysTick_Config+0x40>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f2a:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <SysTick_Config+0x40>)
 8007f2c:	2207      	movs	r2, #7
 8007f2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	e000e010 	.word	0xe000e010

08007f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7ff ff29 	bl	8007da0 <__NVIC_SetPriorityGrouping>
}
 8007f4e:	bf00      	nop
 8007f50:	3708      	adds	r7, #8
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}

08007f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b086      	sub	sp, #24
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	60b9      	str	r1, [r7, #8]
 8007f60:	607a      	str	r2, [r7, #4]
 8007f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f68:	f7ff ff3e 	bl	8007de8 <__NVIC_GetPriorityGrouping>
 8007f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	6978      	ldr	r0, [r7, #20]
 8007f74:	f7ff ff8e 	bl	8007e94 <NVIC_EncodePriority>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7e:	4611      	mov	r1, r2
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7ff ff5d 	bl	8007e40 <__NVIC_SetPriority>
}
 8007f86:	bf00      	nop
 8007f88:	3718      	adds	r7, #24
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b082      	sub	sp, #8
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	4603      	mov	r3, r0
 8007f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff ff31 	bl	8007e04 <__NVIC_EnableIRQ>
}
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff ffa2 	bl	8007efc <SysTick_Config>
 8007fb8:	4603      	mov	r3, r0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
	...

08007fc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007fd0:	f7ff fab4 	bl	800753c <HAL_GetTick>
 8007fd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e099      	b.n	8008114 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f022 0201 	bic.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008000:	e00f      	b.n	8008022 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008002:	f7ff fa9b 	bl	800753c <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	2b05      	cmp	r3, #5
 800800e:	d908      	bls.n	8008022 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2220      	movs	r2, #32
 8008014:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2203      	movs	r2, #3
 800801a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e078      	b.n	8008114 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1e8      	bne.n	8008002 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4b38      	ldr	r3, [pc, #224]	; (800811c <HAL_DMA_Init+0x158>)
 800803c:	4013      	ands	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800804e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800805a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008066:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800806e:	697a      	ldr	r2, [r7, #20]
 8008070:	4313      	orrs	r3, r2
 8008072:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b04      	cmp	r3, #4
 800807a:	d107      	bne.n	800808c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	4313      	orrs	r3, r2
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f023 0307 	bic.w	r3, r3, #7
 80080a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	d117      	bne.n	80080e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d00e      	beq.n	80080e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fa9d 	bl	8008608 <DMA_CheckFifoParam>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d008      	beq.n	80080e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2240      	movs	r2, #64	; 0x40
 80080d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80080e2:	2301      	movs	r3, #1
 80080e4:	e016      	b.n	8008114 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa54 	bl	800859c <DMA_CalcBaseAndBitshift>
 80080f4:	4603      	mov	r3, r0
 80080f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080fc:	223f      	movs	r2, #63	; 0x3f
 80080fe:	409a      	lsls	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	f010803f 	.word	0xf010803f

08008120 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b086      	sub	sp, #24
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800812e:	2300      	movs	r3, #0
 8008130:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800813e:	2b01      	cmp	r3, #1
 8008140:	d101      	bne.n	8008146 <HAL_DMA_Start_IT+0x26>
 8008142:	2302      	movs	r3, #2
 8008144:	e040      	b.n	80081c8 <HAL_DMA_Start_IT+0xa8>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2201      	movs	r2, #1
 800814a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008154:	b2db      	uxtb	r3, r3
 8008156:	2b01      	cmp	r3, #1
 8008158:	d12f      	bne.n	80081ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2202      	movs	r2, #2
 800815e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	68b9      	ldr	r1, [r7, #8]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 f9e6 	bl	8008540 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008178:	223f      	movs	r2, #63	; 0x3f
 800817a:	409a      	lsls	r2, r3
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0216 	orr.w	r2, r2, #22
 800818e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0208 	orr.w	r2, r2, #8
 80081a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f042 0201 	orr.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	e005      	b.n	80081c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081c2:	2302      	movs	r3, #2
 80081c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80081c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081de:	b2db      	uxtb	r3, r3
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d004      	beq.n	80081ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2280      	movs	r2, #128	; 0x80
 80081e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e00c      	b.n	8008208 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2205      	movs	r2, #5
 80081f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f022 0201 	bic.w	r2, r2, #1
 8008204:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr

08008214 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800821c:	2300      	movs	r3, #0
 800821e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008220:	4b92      	ldr	r3, [pc, #584]	; (800846c <HAL_DMA_IRQHandler+0x258>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a92      	ldr	r2, [pc, #584]	; (8008470 <HAL_DMA_IRQHandler+0x25c>)
 8008226:	fba2 2303 	umull	r2, r3, r2, r3
 800822a:	0a9b      	lsrs	r3, r3, #10
 800822c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800823e:	2208      	movs	r2, #8
 8008240:	409a      	lsls	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4013      	ands	r3, r2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01a      	beq.n	8008280 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d013      	beq.n	8008280 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0204 	bic.w	r2, r2, #4
 8008266:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826c:	2208      	movs	r2, #8
 800826e:	409a      	lsls	r2, r3
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008278:	f043 0201 	orr.w	r2, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	2201      	movs	r2, #1
 8008286:	409a      	lsls	r2, r3
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d012      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800829a:	2b00      	cmp	r3, #0
 800829c:	d00b      	beq.n	80082b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a2:	2201      	movs	r2, #1
 80082a4:	409a      	lsls	r2, r3
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ae:	f043 0202 	orr.w	r2, r3, #2
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ba:	2204      	movs	r2, #4
 80082bc:	409a      	lsls	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4013      	ands	r3, r2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d012      	beq.n	80082ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00b      	beq.n	80082ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082d8:	2204      	movs	r2, #4
 80082da:	409a      	lsls	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e4:	f043 0204 	orr.w	r2, r3, #4
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082f0:	2210      	movs	r2, #16
 80082f2:	409a      	lsls	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4013      	ands	r3, r2
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d043      	beq.n	8008384 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d03c      	beq.n	8008384 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800830e:	2210      	movs	r2, #16
 8008310:	409a      	lsls	r2, r3
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d018      	beq.n	8008356 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d108      	bne.n	8008344 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008336:	2b00      	cmp	r3, #0
 8008338:	d024      	beq.n	8008384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
 8008342:	e01f      	b.n	8008384 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008348:	2b00      	cmp	r3, #0
 800834a:	d01b      	beq.n	8008384 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	4798      	blx	r3
 8008354:	e016      	b.n	8008384 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008360:	2b00      	cmp	r3, #0
 8008362:	d107      	bne.n	8008374 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681a      	ldr	r2, [r3, #0]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f022 0208 	bic.w	r2, r2, #8
 8008372:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008388:	2220      	movs	r2, #32
 800838a:	409a      	lsls	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4013      	ands	r3, r2
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 808e 	beq.w	80084b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 8086 	beq.w	80084b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083aa:	2220      	movs	r2, #32
 80083ac:	409a      	lsls	r2, r3
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b05      	cmp	r3, #5
 80083bc:	d136      	bne.n	800842c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0216 	bic.w	r2, r2, #22
 80083cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	695a      	ldr	r2, [r3, #20]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d103      	bne.n	80083ee <HAL_DMA_IRQHandler+0x1da>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0208 	bic.w	r2, r2, #8
 80083fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008402:	223f      	movs	r2, #63	; 0x3f
 8008404:	409a      	lsls	r2, r3
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841e:	2b00      	cmp	r3, #0
 8008420:	d07d      	beq.n	800851e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	4798      	blx	r3
        }
        return;
 800842a:	e078      	b.n	800851e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01c      	beq.n	8008474 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008444:	2b00      	cmp	r3, #0
 8008446:	d108      	bne.n	800845a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800844c:	2b00      	cmp	r3, #0
 800844e:	d030      	beq.n	80084b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	4798      	blx	r3
 8008458:	e02b      	b.n	80084b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d027      	beq.n	80084b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	4798      	blx	r3
 800846a:	e022      	b.n	80084b2 <HAL_DMA_IRQHandler+0x29e>
 800846c:	20000000 	.word	0x20000000
 8008470:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10f      	bne.n	80084a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f022 0210 	bic.w	r2, r2, #16
 8008490:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d003      	beq.n	80084b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d032      	beq.n	8008520 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d022      	beq.n	800850c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2205      	movs	r2, #5
 80084ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0201 	bic.w	r2, r2, #1
 80084dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	3301      	adds	r3, #1
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	697a      	ldr	r2, [r7, #20]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d307      	bcc.n	80084fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f2      	bne.n	80084de <HAL_DMA_IRQHandler+0x2ca>
 80084f8:	e000      	b.n	80084fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80084fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	4798      	blx	r3
 800851c:	e000      	b.n	8008520 <HAL_DMA_IRQHandler+0x30c>
        return;
 800851e:	bf00      	nop
    }
  }
}
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop

08008528 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800855c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	d108      	bne.n	8008580 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800857e:	e007      	b.n	8008590 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	60da      	str	r2, [r3, #12]
}
 8008590:	bf00      	nop
 8008592:	3714      	adds	r7, #20
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	3b10      	subs	r3, #16
 80085ac:	4a14      	ldr	r2, [pc, #80]	; (8008600 <DMA_CalcBaseAndBitshift+0x64>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	091b      	lsrs	r3, r3, #4
 80085b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80085b6:	4a13      	ldr	r2, [pc, #76]	; (8008604 <DMA_CalcBaseAndBitshift+0x68>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d909      	bls.n	80085de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	1d1a      	adds	r2, r3, #4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	659a      	str	r2, [r3, #88]	; 0x58
 80085dc:	e007      	b.n	80085ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80085e6:	f023 0303 	bic.w	r3, r3, #3
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3714      	adds	r7, #20
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	aaaaaaab 	.word	0xaaaaaaab
 8008604:	08018424 	.word	0x08018424

08008608 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008618:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d11f      	bne.n	8008662 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	2b03      	cmp	r3, #3
 8008626:	d855      	bhi.n	80086d4 <DMA_CheckFifoParam+0xcc>
 8008628:	a201      	add	r2, pc, #4	; (adr r2, 8008630 <DMA_CheckFifoParam+0x28>)
 800862a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800862e:	bf00      	nop
 8008630:	08008641 	.word	0x08008641
 8008634:	08008653 	.word	0x08008653
 8008638:	08008641 	.word	0x08008641
 800863c:	080086d5 	.word	0x080086d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d045      	beq.n	80086d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008650:	e042      	b.n	80086d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800865a:	d13f      	bne.n	80086dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008660:	e03c      	b.n	80086dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	699b      	ldr	r3, [r3, #24]
 8008666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800866a:	d121      	bne.n	80086b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	2b03      	cmp	r3, #3
 8008670:	d836      	bhi.n	80086e0 <DMA_CheckFifoParam+0xd8>
 8008672:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <DMA_CheckFifoParam+0x70>)
 8008674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008678:	08008689 	.word	0x08008689
 800867c:	0800868f 	.word	0x0800868f
 8008680:	08008689 	.word	0x08008689
 8008684:	080086a1 	.word	0x080086a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	73fb      	strb	r3, [r7, #15]
      break;
 800868c:	e02f      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008696:	2b00      	cmp	r3, #0
 8008698:	d024      	beq.n	80086e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800869e:	e021      	b.n	80086e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086a8:	d11e      	bne.n	80086e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80086ae:	e01b      	b.n	80086e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	d902      	bls.n	80086bc <DMA_CheckFifoParam+0xb4>
 80086b6:	2b03      	cmp	r3, #3
 80086b8:	d003      	beq.n	80086c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80086ba:	e018      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	73fb      	strb	r3, [r7, #15]
      break;
 80086c0:	e015      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
      break;
 80086d2:	e00b      	b.n	80086ec <DMA_CheckFifoParam+0xe4>
      break;
 80086d4:	bf00      	nop
 80086d6:	e00a      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;
 80086d8:	bf00      	nop
 80086da:	e008      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;
 80086dc:	bf00      	nop
 80086de:	e006      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;
 80086e0:	bf00      	nop
 80086e2:	e004      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;
 80086e4:	bf00      	nop
 80086e6:	e002      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;   
 80086e8:	bf00      	nop
 80086ea:	e000      	b.n	80086ee <DMA_CheckFifoParam+0xe6>
      break;
 80086ec:	bf00      	nop
    }
  } 
  
  return status; 
 80086ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3714      	adds	r7, #20
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b089      	sub	sp, #36	; 0x24
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008706:	2300      	movs	r3, #0
 8008708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800870a:	2300      	movs	r3, #0
 800870c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008712:	2300      	movs	r3, #0
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	e177      	b.n	8008a08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008718:	2201      	movs	r2, #1
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	fa02 f303 	lsl.w	r3, r2, r3
 8008720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	697a      	ldr	r2, [r7, #20]
 8008728:	4013      	ands	r3, r2
 800872a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	429a      	cmp	r2, r3
 8008732:	f040 8166 	bne.w	8008a02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d00b      	beq.n	8008756 <HAL_GPIO_Init+0x5a>
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b02      	cmp	r3, #2
 8008744:	d007      	beq.n	8008756 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800874a:	2b11      	cmp	r3, #17
 800874c:	d003      	beq.n	8008756 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	2b12      	cmp	r3, #18
 8008754:	d130      	bne.n	80087b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	005b      	lsls	r3, r3, #1
 8008760:	2203      	movs	r2, #3
 8008762:	fa02 f303 	lsl.w	r3, r2, r3
 8008766:	43db      	mvns	r3, r3
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	4013      	ands	r3, r2
 800876c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4313      	orrs	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800878c:	2201      	movs	r2, #1
 800878e:	69fb      	ldr	r3, [r7, #28]
 8008790:	fa02 f303 	lsl.w	r3, r2, r3
 8008794:	43db      	mvns	r3, r3
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	4013      	ands	r3, r2
 800879a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	091b      	lsrs	r3, r3, #4
 80087a2:	f003 0201 	and.w	r2, r3, #1
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	fa02 f303 	lsl.w	r3, r2, r3
 80087ac:	69ba      	ldr	r2, [r7, #24]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	005b      	lsls	r3, r3, #1
 80087c2:	2203      	movs	r2, #3
 80087c4:	fa02 f303 	lsl.w	r3, r2, r3
 80087c8:	43db      	mvns	r3, r3
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4013      	ands	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	689a      	ldr	r2, [r3, #8]
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	005b      	lsls	r3, r3, #1
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	4313      	orrs	r3, r2
 80087e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d003      	beq.n	80087f8 <HAL_GPIO_Init+0xfc>
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b12      	cmp	r3, #18
 80087f6:	d123      	bne.n	8008840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	08da      	lsrs	r2, r3, #3
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3208      	adds	r2, #8
 8008800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	220f      	movs	r2, #15
 8008810:	fa02 f303 	lsl.w	r3, r2, r3
 8008814:	43db      	mvns	r3, r3
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	4013      	ands	r3, r2
 800881a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	691a      	ldr	r2, [r3, #16]
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f003 0307 	and.w	r3, r3, #7
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	fa02 f303 	lsl.w	r3, r2, r3
 800882c:	69ba      	ldr	r2, [r7, #24]
 800882e:	4313      	orrs	r3, r2
 8008830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	08da      	lsrs	r2, r3, #3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3208      	adds	r2, #8
 800883a:	69b9      	ldr	r1, [r7, #24]
 800883c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	2203      	movs	r2, #3
 800884c:	fa02 f303 	lsl.w	r3, r2, r3
 8008850:	43db      	mvns	r3, r3
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	4013      	ands	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f003 0203 	and.w	r2, r3, #3
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	fa02 f303 	lsl.w	r3, r2, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4313      	orrs	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69ba      	ldr	r2, [r7, #24]
 8008872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80c0 	beq.w	8008a02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
 8008886:	4b65      	ldr	r3, [pc, #404]	; (8008a1c <HAL_GPIO_Init+0x320>)
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	4a64      	ldr	r2, [pc, #400]	; (8008a1c <HAL_GPIO_Init+0x320>)
 800888c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008890:	6453      	str	r3, [r2, #68]	; 0x44
 8008892:	4b62      	ldr	r3, [pc, #392]	; (8008a1c <HAL_GPIO_Init+0x320>)
 8008894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800889e:	4a60      	ldr	r2, [pc, #384]	; (8008a20 <HAL_GPIO_Init+0x324>)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	089b      	lsrs	r3, r3, #2
 80088a4:	3302      	adds	r3, #2
 80088a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	220f      	movs	r2, #15
 80088b6:	fa02 f303 	lsl.w	r3, r2, r3
 80088ba:	43db      	mvns	r3, r3
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	4013      	ands	r3, r2
 80088c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a57      	ldr	r2, [pc, #348]	; (8008a24 <HAL_GPIO_Init+0x328>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d037      	beq.n	800893a <HAL_GPIO_Init+0x23e>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a56      	ldr	r2, [pc, #344]	; (8008a28 <HAL_GPIO_Init+0x32c>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d031      	beq.n	8008936 <HAL_GPIO_Init+0x23a>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a55      	ldr	r2, [pc, #340]	; (8008a2c <HAL_GPIO_Init+0x330>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d02b      	beq.n	8008932 <HAL_GPIO_Init+0x236>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a54      	ldr	r2, [pc, #336]	; (8008a30 <HAL_GPIO_Init+0x334>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d025      	beq.n	800892e <HAL_GPIO_Init+0x232>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a53      	ldr	r2, [pc, #332]	; (8008a34 <HAL_GPIO_Init+0x338>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d01f      	beq.n	800892a <HAL_GPIO_Init+0x22e>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a52      	ldr	r2, [pc, #328]	; (8008a38 <HAL_GPIO_Init+0x33c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d019      	beq.n	8008926 <HAL_GPIO_Init+0x22a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	4a51      	ldr	r2, [pc, #324]	; (8008a3c <HAL_GPIO_Init+0x340>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_GPIO_Init+0x226>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	4a50      	ldr	r2, [pc, #320]	; (8008a40 <HAL_GPIO_Init+0x344>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d00d      	beq.n	800891e <HAL_GPIO_Init+0x222>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	4a4f      	ldr	r2, [pc, #316]	; (8008a44 <HAL_GPIO_Init+0x348>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d007      	beq.n	800891a <HAL_GPIO_Init+0x21e>
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4a4e      	ldr	r2, [pc, #312]	; (8008a48 <HAL_GPIO_Init+0x34c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_GPIO_Init+0x21a>
 8008912:	2309      	movs	r3, #9
 8008914:	e012      	b.n	800893c <HAL_GPIO_Init+0x240>
 8008916:	230a      	movs	r3, #10
 8008918:	e010      	b.n	800893c <HAL_GPIO_Init+0x240>
 800891a:	2308      	movs	r3, #8
 800891c:	e00e      	b.n	800893c <HAL_GPIO_Init+0x240>
 800891e:	2307      	movs	r3, #7
 8008920:	e00c      	b.n	800893c <HAL_GPIO_Init+0x240>
 8008922:	2306      	movs	r3, #6
 8008924:	e00a      	b.n	800893c <HAL_GPIO_Init+0x240>
 8008926:	2305      	movs	r3, #5
 8008928:	e008      	b.n	800893c <HAL_GPIO_Init+0x240>
 800892a:	2304      	movs	r3, #4
 800892c:	e006      	b.n	800893c <HAL_GPIO_Init+0x240>
 800892e:	2303      	movs	r3, #3
 8008930:	e004      	b.n	800893c <HAL_GPIO_Init+0x240>
 8008932:	2302      	movs	r3, #2
 8008934:	e002      	b.n	800893c <HAL_GPIO_Init+0x240>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <HAL_GPIO_Init+0x240>
 800893a:	2300      	movs	r3, #0
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	f002 0203 	and.w	r2, r2, #3
 8008942:	0092      	lsls	r2, r2, #2
 8008944:	4093      	lsls	r3, r2
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	4313      	orrs	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800894c:	4934      	ldr	r1, [pc, #208]	; (8008a20 <HAL_GPIO_Init+0x324>)
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	089b      	lsrs	r3, r3, #2
 8008952:	3302      	adds	r3, #2
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800895a:	4b3c      	ldr	r3, [pc, #240]	; (8008a4c <HAL_GPIO_Init+0x350>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	43db      	mvns	r3, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4013      	ands	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008976:	69ba      	ldr	r2, [r7, #24]
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	4313      	orrs	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800897e:	4a33      	ldr	r2, [pc, #204]	; (8008a4c <HAL_GPIO_Init+0x350>)
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008984:	4b31      	ldr	r3, [pc, #196]	; (8008a4c <HAL_GPIO_Init+0x350>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d003      	beq.n	80089a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80089a8:	4a28      	ldr	r2, [pc, #160]	; (8008a4c <HAL_GPIO_Init+0x350>)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80089ae:	4b27      	ldr	r3, [pc, #156]	; (8008a4c <HAL_GPIO_Init+0x350>)
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	43db      	mvns	r3, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	4013      	ands	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80089d2:	4a1e      	ldr	r2, [pc, #120]	; (8008a4c <HAL_GPIO_Init+0x350>)
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80089d8:	4b1c      	ldr	r3, [pc, #112]	; (8008a4c <HAL_GPIO_Init+0x350>)
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	43db      	mvns	r3, r3
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80089fc:	4a13      	ldr	r2, [pc, #76]	; (8008a4c <HAL_GPIO_Init+0x350>)
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	3301      	adds	r3, #1
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	2b0f      	cmp	r3, #15
 8008a0c:	f67f ae84 	bls.w	8008718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008a10:	bf00      	nop
 8008a12:	3724      	adds	r7, #36	; 0x24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	40023800 	.word	0x40023800
 8008a20:	40013800 	.word	0x40013800
 8008a24:	40020000 	.word	0x40020000
 8008a28:	40020400 	.word	0x40020400
 8008a2c:	40020800 	.word	0x40020800
 8008a30:	40020c00 	.word	0x40020c00
 8008a34:	40021000 	.word	0x40021000
 8008a38:	40021400 	.word	0x40021400
 8008a3c:	40021800 	.word	0x40021800
 8008a40:	40021c00 	.word	0x40021c00
 8008a44:	40022000 	.word	0x40022000
 8008a48:	40022400 	.word	0x40022400
 8008a4c:	40013c00 	.word	0x40013c00

08008a50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691a      	ldr	r2, [r3, #16]
 8008a60:	887b      	ldrh	r3, [r7, #2]
 8008a62:	4013      	ands	r3, r2
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
 8008a6c:	e001      	b.n	8008a72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3714      	adds	r7, #20
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	807b      	strh	r3, [r7, #2]
 8008a8c:	4613      	mov	r3, r2
 8008a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008a90:	787b      	ldrb	r3, [r7, #1]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a96:	887a      	ldrh	r2, [r7, #2]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008a9c:	e003      	b.n	8008aa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008a9e:	887b      	ldrh	r3, [r7, #2]
 8008aa0:	041a      	lsls	r2, r3, #16
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	619a      	str	r2, [r3, #24]
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008abe:	4b08      	ldr	r3, [pc, #32]	; (8008ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	88fb      	ldrh	r3, [r7, #6]
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d006      	beq.n	8008ad8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008aca:	4a05      	ldr	r2, [pc, #20]	; (8008ae0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008acc:	88fb      	ldrh	r3, [r7, #6]
 8008ace:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fb fbf3 	bl	80042be <HAL_GPIO_EXTI_Callback>
  }
}
 8008ad8:	bf00      	nop
 8008ada:	3708      	adds	r7, #8
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	40013c00 	.word	0x40013c00

08008ae4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	e11f      	b.n	8008d36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d106      	bne.n	8008b10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7fc fc52 	bl	80053b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2224      	movs	r2, #36	; 0x24
 8008b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f022 0201 	bic.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008b48:	f001 f96e 	bl	8009e28 <HAL_RCC_GetPCLK1Freq>
 8008b4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	4a7b      	ldr	r2, [pc, #492]	; (8008d40 <HAL_I2C_Init+0x25c>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d807      	bhi.n	8008b68 <HAL_I2C_Init+0x84>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4a7a      	ldr	r2, [pc, #488]	; (8008d44 <HAL_I2C_Init+0x260>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	bf94      	ite	ls
 8008b60:	2301      	movls	r3, #1
 8008b62:	2300      	movhi	r3, #0
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	e006      	b.n	8008b76 <HAL_I2C_Init+0x92>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4a77      	ldr	r2, [pc, #476]	; (8008d48 <HAL_I2C_Init+0x264>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	bf94      	ite	ls
 8008b70:	2301      	movls	r3, #1
 8008b72:	2300      	movhi	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e0db      	b.n	8008d36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4a72      	ldr	r2, [pc, #456]	; (8008d4c <HAL_I2C_Init+0x268>)
 8008b82:	fba2 2303 	umull	r2, r3, r2, r3
 8008b86:	0c9b      	lsrs	r3, r3, #18
 8008b88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	4a64      	ldr	r2, [pc, #400]	; (8008d40 <HAL_I2C_Init+0x25c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d802      	bhi.n	8008bb8 <HAL_I2C_Init+0xd4>
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	e009      	b.n	8008bcc <HAL_I2C_Init+0xe8>
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	4a63      	ldr	r2, [pc, #396]	; (8008d50 <HAL_I2C_Init+0x26c>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	099b      	lsrs	r3, r3, #6
 8008bca:	3301      	adds	r3, #1
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008bde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	4956      	ldr	r1, [pc, #344]	; (8008d40 <HAL_I2C_Init+0x25c>)
 8008be8:	428b      	cmp	r3, r1
 8008bea:	d80d      	bhi.n	8008c08 <HAL_I2C_Init+0x124>
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	1e59      	subs	r1, r3, #1
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	bf38      	it	cc
 8008c04:	2304      	movcc	r3, #4
 8008c06:	e04f      	b.n	8008ca8 <HAL_I2C_Init+0x1c4>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <HAL_I2C_Init+0x150>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	1e58      	subs	r0, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6859      	ldr	r1, [r3, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	005b      	lsls	r3, r3, #1
 8008c1c:	440b      	add	r3, r1
 8008c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c22:	3301      	adds	r3, #1
 8008c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bf0c      	ite	eq
 8008c2c:	2301      	moveq	r3, #1
 8008c2e:	2300      	movne	r3, #0
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	e012      	b.n	8008c5a <HAL_I2C_Init+0x176>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	1e58      	subs	r0, r3, #1
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6859      	ldr	r1, [r3, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	440b      	add	r3, r1
 8008c42:	0099      	lsls	r1, r3, #2
 8008c44:	440b      	add	r3, r1
 8008c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	bf0c      	ite	eq
 8008c54:	2301      	moveq	r3, #1
 8008c56:	2300      	movne	r3, #0
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <HAL_I2C_Init+0x17e>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e022      	b.n	8008ca8 <HAL_I2C_Init+0x1c4>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d10e      	bne.n	8008c88 <HAL_I2C_Init+0x1a4>
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	1e58      	subs	r0, r3, #1
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	005b      	lsls	r3, r3, #1
 8008c76:	440b      	add	r3, r1
 8008c78:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c86:	e00f      	b.n	8008ca8 <HAL_I2C_Init+0x1c4>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	1e58      	subs	r0, r3, #1
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6859      	ldr	r1, [r3, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	440b      	add	r3, r1
 8008c96:	0099      	lsls	r1, r3, #2
 8008c98:	440b      	add	r3, r1
 8008c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ca4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	6809      	ldr	r1, [r1, #0]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69da      	ldr	r2, [r3, #28]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	431a      	orrs	r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008cd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6911      	ldr	r1, [r2, #16]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68d2      	ldr	r2, [r2, #12]
 8008ce2:	4311      	orrs	r1, r2
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	6812      	ldr	r2, [r2, #0]
 8008ce8:	430b      	orrs	r3, r1
 8008cea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68db      	ldr	r3, [r3, #12]
 8008cf2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695a      	ldr	r2, [r3, #20]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	430a      	orrs	r2, r1
 8008d06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f042 0201 	orr.w	r2, r2, #1
 8008d16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2220      	movs	r2, #32
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	000186a0 	.word	0x000186a0
 8008d44:	001e847f 	.word	0x001e847f
 8008d48:	003d08ff 	.word	0x003d08ff
 8008d4c:	431bde83 	.word	0x431bde83
 8008d50:	10624dd3 	.word	0x10624dd3

08008d54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b088      	sub	sp, #32
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	607a      	str	r2, [r7, #4]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	460b      	mov	r3, r1
 8008d62:	817b      	strh	r3, [r7, #10]
 8008d64:	4613      	mov	r3, r2
 8008d66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d68:	f7fe fbe8 	bl	800753c <HAL_GetTick>
 8008d6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b20      	cmp	r3, #32
 8008d78:	f040 80e0 	bne.w	8008f3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	9300      	str	r3, [sp, #0]
 8008d80:	2319      	movs	r3, #25
 8008d82:	2201      	movs	r2, #1
 8008d84:	4970      	ldr	r1, [pc, #448]	; (8008f48 <HAL_I2C_Master_Transmit+0x1f4>)
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fc58 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d92:	2302      	movs	r3, #2
 8008d94:	e0d3      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d101      	bne.n	8008da4 <HAL_I2C_Master_Transmit+0x50>
 8008da0:	2302      	movs	r3, #2
 8008da2:	e0cc      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d007      	beq.n	8008dca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f042 0201 	orr.w	r2, r2, #1
 8008dc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2221      	movs	r2, #33	; 0x21
 8008dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2210      	movs	r2, #16
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	893a      	ldrh	r2, [r7, #8]
 8008dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	4a50      	ldr	r2, [pc, #320]	; (8008f4c <HAL_I2C_Master_Transmit+0x1f8>)
 8008e0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e0c:	8979      	ldrh	r1, [r7, #10]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	6a3a      	ldr	r2, [r7, #32]
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f000 fac2 	bl	800939c <I2C_MasterRequestWrite>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e08d      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e22:	2300      	movs	r3, #0
 8008e24:	613b      	str	r3, [r7, #16]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	613b      	str	r3, [r7, #16]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699b      	ldr	r3, [r3, #24]
 8008e34:	613b      	str	r3, [r7, #16]
 8008e36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008e38:	e066      	b.n	8008f08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	6a39      	ldr	r1, [r7, #32]
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 fcd2 	bl	80097e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00d      	beq.n	8008e66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	2b04      	cmp	r3, #4
 8008e50:	d107      	bne.n	8008e62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e06b      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e76:	1c5a      	adds	r2, r3, #1
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e8e:	3b01      	subs	r3, #1
 8008e90:	b29a      	uxth	r2, r3
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	695b      	ldr	r3, [r3, #20]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d11b      	bne.n	8008edc <HAL_I2C_Master_Transmit+0x188>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	781a      	ldrb	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ebc:	1c5a      	adds	r2, r3, #1
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	6a39      	ldr	r1, [r7, #32]
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 fcc2 	bl	800986a <I2C_WaitOnBTFFlagUntilTimeout>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00d      	beq.n	8008f08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef0:	2b04      	cmp	r3, #4
 8008ef2:	d107      	bne.n	8008f04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e01a      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d194      	bne.n	8008e3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	e000      	b.n	8008f3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008f3c:	2302      	movs	r3, #2
  }
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	00100002 	.word	0x00100002
 8008f4c:	ffff0000 	.word	0xffff0000

08008f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08c      	sub	sp, #48	; 0x30
 8008f54:	af02      	add	r7, sp, #8
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	607a      	str	r2, [r7, #4]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	817b      	strh	r3, [r7, #10]
 8008f60:	4613      	mov	r3, r2
 8008f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f64:	f7fe faea 	bl	800753c <HAL_GetTick>
 8008f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b20      	cmp	r3, #32
 8008f74:	f040 820b 	bne.w	800938e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	2319      	movs	r3, #25
 8008f7e:	2201      	movs	r2, #1
 8008f80:	497c      	ldr	r1, [pc, #496]	; (8009174 <HAL_I2C_Master_Receive+0x224>)
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 fb5a 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e1fe      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_I2C_Master_Receive+0x50>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e1f7      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f003 0301 	and.w	r3, r3, #1
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d007      	beq.n	8008fc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f042 0201 	orr.w	r2, r2, #1
 8008fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2222      	movs	r2, #34	; 0x22
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2210      	movs	r2, #16
 8008fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	893a      	ldrh	r2, [r7, #8]
 8008ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	4a5c      	ldr	r2, [pc, #368]	; (8009178 <HAL_I2C_Master_Receive+0x228>)
 8009006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009008:	8979      	ldrh	r1, [r7, #10]
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	68f8      	ldr	r0, [r7, #12]
 8009010:	f000 fa46 	bl	80094a0 <I2C_MasterRequestRead>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e1b8      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d113      	bne.n	800904e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009026:	2300      	movs	r3, #0
 8009028:	623b      	str	r3, [r7, #32]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	623b      	str	r3, [r7, #32]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	623b      	str	r3, [r7, #32]
 800903a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	e18c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009052:	2b01      	cmp	r3, #1
 8009054:	d11b      	bne.n	800908e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681a      	ldr	r2, [r3, #0]
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	61fb      	str	r3, [r7, #28]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681a      	ldr	r2, [r3, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	e16c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	2b02      	cmp	r3, #2
 8009094:	d11b      	bne.n	80090ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090b6:	2300      	movs	r3, #0
 80090b8:	61bb      	str	r3, [r7, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	695b      	ldr	r3, [r3, #20]
 80090c0:	61bb      	str	r3, [r7, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	61bb      	str	r3, [r7, #24]
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	e14c      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090de:	2300      	movs	r3, #0
 80090e0:	617b      	str	r3, [r7, #20]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	617b      	str	r3, [r7, #20]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80090f4:	e138      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	2b03      	cmp	r3, #3
 80090fc:	f200 80f1 	bhi.w	80092e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	2b01      	cmp	r3, #1
 8009106:	d123      	bne.n	8009150 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800910a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f000 fbed 	bl	80098ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e139      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691a      	ldr	r2, [r3, #16]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	b2d2      	uxtb	r2, r2
 8009128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009138:	3b01      	subs	r3, #1
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009144:	b29b      	uxth	r3, r3
 8009146:	3b01      	subs	r3, #1
 8009148:	b29a      	uxth	r2, r3
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800914e:	e10b      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009154:	2b02      	cmp	r3, #2
 8009156:	d14e      	bne.n	80091f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	9300      	str	r3, [sp, #0]
 800915c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915e:	2200      	movs	r2, #0
 8009160:	4906      	ldr	r1, [pc, #24]	; (800917c <HAL_I2C_Master_Receive+0x22c>)
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fa6a 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d008      	beq.n	8009180 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e10e      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
 8009172:	bf00      	nop
 8009174:	00100002 	.word	0x00100002
 8009178:	ffff0000 	.word	0xffff0000
 800917c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	691a      	ldr	r2, [r3, #16]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	b2d2      	uxtb	r2, r2
 800919c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	691a      	ldr	r2, [r3, #16]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091de:	3b01      	subs	r3, #1
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	3b01      	subs	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091f4:	e0b8      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	2200      	movs	r2, #0
 80091fe:	4966      	ldr	r1, [pc, #408]	; (8009398 <HAL_I2C_Master_Receive+0x448>)
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 fa1b 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8009206:	4603      	mov	r3, r0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e0bf      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800921e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	691a      	ldr	r2, [r3, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	b2d2      	uxtb	r2, r2
 800922c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	1c5a      	adds	r2, r3, #1
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800923c:	3b01      	subs	r3, #1
 800923e:	b29a      	uxth	r2, r3
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009258:	2200      	movs	r2, #0
 800925a:	494f      	ldr	r1, [pc, #316]	; (8009398 <HAL_I2C_Master_Receive+0x448>)
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 f9ed 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e091      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800927a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	b2d2      	uxtb	r2, r2
 80092ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ca:	3b01      	subs	r3, #1
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	3b01      	subs	r3, #1
 80092da:	b29a      	uxth	r2, r3
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092e0:	e042      	b.n	8009368 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f000 fb00 	bl	80098ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80092ec:	4603      	mov	r3, r0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	e04c      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	b2d2      	uxtb	r2, r2
 8009302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009312:	3b01      	subs	r3, #1
 8009314:	b29a      	uxth	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	f003 0304 	and.w	r3, r3, #4
 8009332:	2b04      	cmp	r3, #4
 8009334:	d118      	bne.n	8009368 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009352:	3b01      	subs	r3, #1
 8009354:	b29a      	uxth	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800935e:	b29b      	uxth	r3, r3
 8009360:	3b01      	subs	r3, #1
 8009362:	b29a      	uxth	r2, r3
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	f47f aec2 	bne.w	80090f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2220      	movs	r2, #32
 8009376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	e000      	b.n	8009390 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800938e:	2302      	movs	r3, #2
  }
}
 8009390:	4618      	mov	r0, r3
 8009392:	3728      	adds	r7, #40	; 0x28
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	00010004 	.word	0x00010004

0800939c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	607a      	str	r2, [r7, #4]
 80093a6:	603b      	str	r3, [r7, #0]
 80093a8:	460b      	mov	r3, r1
 80093aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d006      	beq.n	80093c6 <I2C_MasterRequestWrite+0x2a>
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d003      	beq.n	80093c6 <I2C_MasterRequestWrite+0x2a>
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093c4:	d108      	bne.n	80093d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	e00b      	b.n	80093f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093dc:	2b12      	cmp	r3, #18
 80093de:	d107      	bne.n	80093f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f91d 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d103      	bne.n	8009420 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800941e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e035      	b.n	8009490 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800942c:	d108      	bne.n	8009440 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800942e:	897b      	ldrh	r3, [r7, #10]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	461a      	mov	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800943c:	611a      	str	r2, [r3, #16]
 800943e:	e01b      	b.n	8009478 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009440:	897b      	ldrh	r3, [r7, #10]
 8009442:	11db      	asrs	r3, r3, #7
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 0306 	and.w	r3, r3, #6
 800944a:	b2db      	uxtb	r3, r3
 800944c:	f063 030f 	orn	r3, r3, #15
 8009450:	b2da      	uxtb	r2, r3
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	490e      	ldr	r1, [pc, #56]	; (8009498 <I2C_MasterRequestWrite+0xfc>)
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f943 	bl	80096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d001      	beq.n	800946e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e010      	b.n	8009490 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800946e:	897b      	ldrh	r3, [r7, #10]
 8009470:	b2da      	uxtb	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	4907      	ldr	r1, [pc, #28]	; (800949c <I2C_MasterRequestWrite+0x100>)
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	f000 f933 	bl	80096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3718      	adds	r7, #24
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	00010008 	.word	0x00010008
 800949c:	00010002 	.word	0x00010002

080094a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af02      	add	r7, sp, #8
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	607a      	str	r2, [r7, #4]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	460b      	mov	r3, r1
 80094ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b08      	cmp	r3, #8
 80094ca:	d006      	beq.n	80094da <I2C_MasterRequestRead+0x3a>
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d003      	beq.n	80094da <I2C_MasterRequestRead+0x3a>
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094d8:	d108      	bne.n	80094ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	681a      	ldr	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e8:	601a      	str	r2, [r3, #0]
 80094ea:	e00b      	b.n	8009504 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f0:	2b11      	cmp	r3, #17
 80094f2:	d107      	bne.n	8009504 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009502:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f893 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00d      	beq.n	8009538 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800952a:	d103      	bne.n	8009534 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009532:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	e079      	b.n	800962c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009540:	d108      	bne.n	8009554 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009542:	897b      	ldrh	r3, [r7, #10]
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f043 0301 	orr.w	r3, r3, #1
 800954a:	b2da      	uxtb	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	611a      	str	r2, [r3, #16]
 8009552:	e05f      	b.n	8009614 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009554:	897b      	ldrh	r3, [r7, #10]
 8009556:	11db      	asrs	r3, r3, #7
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 0306 	and.w	r3, r3, #6
 800955e:	b2db      	uxtb	r3, r3
 8009560:	f063 030f 	orn	r3, r3, #15
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4930      	ldr	r1, [pc, #192]	; (8009634 <I2C_MasterRequestRead+0x194>)
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f8b9 	bl	80096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e054      	b.n	800962c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009582:	897b      	ldrh	r3, [r7, #10]
 8009584:	b2da      	uxtb	r2, r3
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4929      	ldr	r1, [pc, #164]	; (8009638 <I2C_MasterRequestRead+0x198>)
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 f8a9 	bl	80096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e044      	b.n	800962c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	613b      	str	r3, [r7, #16]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095d4:	68f8      	ldr	r0, [r7, #12]
 80095d6:	f000 f831 	bl	800963c <I2C_WaitOnFlagUntilTimeout>
 80095da:	4603      	mov	r3, r0
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d00d      	beq.n	80095fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095ee:	d103      	bne.n	80095f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e017      	b.n	800962c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80095fc:	897b      	ldrh	r3, [r7, #10]
 80095fe:	11db      	asrs	r3, r3, #7
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0306 	and.w	r3, r3, #6
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f063 030e 	orn	r3, r3, #14
 800960c:	b2da      	uxtb	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	4907      	ldr	r1, [pc, #28]	; (8009638 <I2C_MasterRequestRead+0x198>)
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 f865 	bl	80096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e000      	b.n	800962c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3718      	adds	r7, #24
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	00010008 	.word	0x00010008
 8009638:	00010002 	.word	0x00010002

0800963c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	4613      	mov	r3, r2
 800964a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800964c:	e025      	b.n	800969a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009654:	d021      	beq.n	800969a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009656:	f7fd ff71 	bl	800753c <HAL_GetTick>
 800965a:	4602      	mov	r2, r0
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	429a      	cmp	r2, r3
 8009664:	d302      	bcc.n	800966c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d116      	bne.n	800969a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2200      	movs	r2, #0
 8009670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2220      	movs	r2, #32
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009686:	f043 0220 	orr.w	r2, r3, #32
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009696:	2301      	movs	r3, #1
 8009698:	e023      	b.n	80096e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d10d      	bne.n	80096c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	43da      	mvns	r2, r3
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	4013      	ands	r3, r2
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	bf0c      	ite	eq
 80096b6:	2301      	moveq	r3, #1
 80096b8:	2300      	movne	r3, #0
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	461a      	mov	r2, r3
 80096be:	e00c      	b.n	80096da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	43da      	mvns	r2, r3
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	4013      	ands	r3, r2
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	bf0c      	ite	eq
 80096d2:	2301      	moveq	r3, #1
 80096d4:	2300      	movne	r3, #0
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	461a      	mov	r2, r3
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d0b6      	beq.n	800964e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096e0:	2300      	movs	r3, #0
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3710      	adds	r7, #16
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	60f8      	str	r0, [r7, #12]
 80096f2:	60b9      	str	r1, [r7, #8]
 80096f4:	607a      	str	r2, [r7, #4]
 80096f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096f8:	e051      	b.n	800979e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	695b      	ldr	r3, [r3, #20]
 8009700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009704:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009708:	d123      	bne.n	8009752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009718:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009722:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f043 0204 	orr.w	r2, r3, #4
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e046      	b.n	80097e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d021      	beq.n	800979e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800975a:	f7fd feef 	bl	800753c <HAL_GetTick>
 800975e:	4602      	mov	r2, r0
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	429a      	cmp	r2, r3
 8009768:	d302      	bcc.n	8009770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d116      	bne.n	800979e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2200      	movs	r2, #0
 8009774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2220      	movs	r2, #32
 800977a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800978a:	f043 0220 	orr.w	r2, r3, #32
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e020      	b.n	80097e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	0c1b      	lsrs	r3, r3, #16
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d10c      	bne.n	80097c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	43da      	mvns	r2, r3
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	4013      	ands	r3, r2
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	bf14      	ite	ne
 80097ba:	2301      	movne	r3, #1
 80097bc:	2300      	moveq	r3, #0
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	e00b      	b.n	80097da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	43da      	mvns	r2, r3
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	4013      	ands	r3, r2
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bf14      	ite	ne
 80097d4:	2301      	movne	r3, #1
 80097d6:	2300      	moveq	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d18d      	bne.n	80096fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097f4:	e02d      	b.n	8009852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f000 f8ce 	bl	8009998 <I2C_IsAcknowledgeFailed>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d001      	beq.n	8009806 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e02d      	b.n	8009862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980c:	d021      	beq.n	8009852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800980e:	f7fd fe95 	bl	800753c <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	429a      	cmp	r2, r3
 800981c:	d302      	bcc.n	8009824 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d116      	bne.n	8009852 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2220      	movs	r2, #32
 800982e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	f043 0220 	orr.w	r2, r3, #32
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e007      	b.n	8009862 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800985c:	2b80      	cmp	r3, #128	; 0x80
 800985e:	d1ca      	bne.n	80097f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009876:	e02d      	b.n	80098d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f88d 	bl	8009998 <I2C_IsAcknowledgeFailed>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e02d      	b.n	80098e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800988e:	d021      	beq.n	80098d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009890:	f7fd fe54 	bl	800753c <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	1ad3      	subs	r3, r2, r3
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d302      	bcc.n	80098a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d116      	bne.n	80098d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c0:	f043 0220 	orr.w	r2, r3, #32
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	e007      	b.n	80098e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695b      	ldr	r3, [r3, #20]
 80098da:	f003 0304 	and.w	r3, r3, #4
 80098de:	2b04      	cmp	r3, #4
 80098e0:	d1ca      	bne.n	8009878 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098f8:	e042      	b.n	8009980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695b      	ldr	r3, [r3, #20]
 8009900:	f003 0310 	and.w	r3, r3, #16
 8009904:	2b10      	cmp	r3, #16
 8009906:	d119      	bne.n	800993c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f06f 0210 	mvn.w	r2, #16
 8009910:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	2220      	movs	r2, #32
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2200      	movs	r2, #0
 8009934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	e029      	b.n	8009990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800993c:	f7fd fdfe 	bl	800753c <HAL_GetTick>
 8009940:	4602      	mov	r2, r0
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	1ad3      	subs	r3, r2, r3
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	429a      	cmp	r2, r3
 800994a:	d302      	bcc.n	8009952 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d116      	bne.n	8009980 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800996c:	f043 0220 	orr.w	r2, r3, #32
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e007      	b.n	8009990 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800998a:	2b40      	cmp	r3, #64	; 0x40
 800998c:	d1b5      	bne.n	80098fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099ae:	d11b      	bne.n	80099e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099d4:	f043 0204 	orr.w	r2, r3, #4
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2200      	movs	r2, #0
 80099e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e000      	b.n	80099ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
	...

080099f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009a02:	2300      	movs	r3, #0
 8009a04:	603b      	str	r3, [r7, #0]
 8009a06:	4b20      	ldr	r3, [pc, #128]	; (8009a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0a:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a10:	6413      	str	r3, [r2, #64]	; 0x40
 8009a12:	4b1d      	ldr	r3, [pc, #116]	; (8009a88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009a1e:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <HAL_PWREx_EnableOverDrive+0x94>)
 8009a20:	2201      	movs	r2, #1
 8009a22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a24:	f7fd fd8a 	bl	800753c <HAL_GetTick>
 8009a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009a2a:	e009      	b.n	8009a40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009a2c:	f7fd fd86 	bl	800753c <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a3a:	d901      	bls.n	8009a40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009a3c:	2303      	movs	r3, #3
 8009a3e:	e01f      	b.n	8009a80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a4c:	d1ee      	bne.n	8009a2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009a4e:	4b11      	ldr	r3, [pc, #68]	; (8009a94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009a50:	2201      	movs	r2, #1
 8009a52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a54:	f7fd fd72 	bl	800753c <HAL_GetTick>
 8009a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009a5a:	e009      	b.n	8009a70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009a5c:	f7fd fd6e 	bl	800753c <HAL_GetTick>
 8009a60:	4602      	mov	r2, r0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	1ad3      	subs	r3, r2, r3
 8009a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a6a:	d901      	bls.n	8009a70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009a6c:	2303      	movs	r3, #3
 8009a6e:	e007      	b.n	8009a80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009a7c:	d1ee      	bne.n	8009a5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}
 8009a88:	40023800 	.word	0x40023800
 8009a8c:	420e0040 	.word	0x420e0040
 8009a90:	40007000 	.word	0x40007000
 8009a94:	420e0044 	.word	0x420e0044

08009a98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d101      	bne.n	8009aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	e0cc      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009aac:	4b68      	ldr	r3, [pc, #416]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 030f 	and.w	r3, r3, #15
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d90c      	bls.n	8009ad4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aba:	4b65      	ldr	r3, [pc, #404]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009abc:	683a      	ldr	r2, [r7, #0]
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ac2:	4b63      	ldr	r3, [pc, #396]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f003 030f 	and.w	r3, r3, #15
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d001      	beq.n	8009ad4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0b8      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0302 	and.w	r3, r3, #2
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d020      	beq.n	8009b22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0304 	and.w	r3, r3, #4
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d005      	beq.n	8009af8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009aec:	4b59      	ldr	r3, [pc, #356]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	4a58      	ldr	r2, [pc, #352]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009af6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0308 	and.w	r3, r3, #8
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d005      	beq.n	8009b10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009b04:	4b53      	ldr	r3, [pc, #332]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	4a52      	ldr	r2, [pc, #328]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009b0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b10:	4b50      	ldr	r3, [pc, #320]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	494d      	ldr	r1, [pc, #308]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d044      	beq.n	8009bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d107      	bne.n	8009b46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b36:	4b47      	ldr	r3, [pc, #284]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d119      	bne.n	8009b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e07f      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	685b      	ldr	r3, [r3, #4]
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d003      	beq.n	8009b56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d107      	bne.n	8009b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009b56:	4b3f      	ldr	r3, [pc, #252]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d109      	bne.n	8009b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	e06f      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009b66:	4b3b      	ldr	r3, [pc, #236]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e067      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009b76:	4b37      	ldr	r3, [pc, #220]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	f023 0203 	bic.w	r2, r3, #3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	4934      	ldr	r1, [pc, #208]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009b88:	f7fd fcd8 	bl	800753c <HAL_GetTick>
 8009b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b8e:	e00a      	b.n	8009ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b90:	f7fd fcd4 	bl	800753c <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e04f      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ba6:	4b2b      	ldr	r3, [pc, #172]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f003 020c 	and.w	r2, r3, #12
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d1eb      	bne.n	8009b90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009bb8:	4b25      	ldr	r3, [pc, #148]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 030f 	and.w	r3, r3, #15
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d20c      	bcs.n	8009be0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bc6:	4b22      	ldr	r3, [pc, #136]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bc8:	683a      	ldr	r2, [r7, #0]
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bce:	4b20      	ldr	r3, [pc, #128]	; (8009c50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f003 030f 	and.w	r3, r3, #15
 8009bd6:	683a      	ldr	r2, [r7, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d001      	beq.n	8009be0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e032      	b.n	8009c46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d008      	beq.n	8009bfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009bec:	4b19      	ldr	r3, [pc, #100]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	4916      	ldr	r1, [pc, #88]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0308 	and.w	r3, r3, #8
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d009      	beq.n	8009c1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009c0a:	4b12      	ldr	r3, [pc, #72]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	490e      	ldr	r1, [pc, #56]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009c1e:	f000 f821 	bl	8009c64 <HAL_RCC_GetSysClockFreq>
 8009c22:	4601      	mov	r1, r0
 8009c24:	4b0b      	ldr	r3, [pc, #44]	; (8009c54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	091b      	lsrs	r3, r3, #4
 8009c2a:	f003 030f 	and.w	r3, r3, #15
 8009c2e:	4a0a      	ldr	r2, [pc, #40]	; (8009c58 <HAL_RCC_ClockConfig+0x1c0>)
 8009c30:	5cd3      	ldrb	r3, [r2, r3]
 8009c32:	fa21 f303 	lsr.w	r3, r1, r3
 8009c36:	4a09      	ldr	r2, [pc, #36]	; (8009c5c <HAL_RCC_ClockConfig+0x1c4>)
 8009c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009c3a:	4b09      	ldr	r3, [pc, #36]	; (8009c60 <HAL_RCC_ClockConfig+0x1c8>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fd fc38 	bl	80074b4 <HAL_InitTick>

  return HAL_OK;
 8009c44:	2300      	movs	r3, #0
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	40023c00 	.word	0x40023c00
 8009c54:	40023800 	.word	0x40023800
 8009c58:	0801840c 	.word	0x0801840c
 8009c5c:	20000000 	.word	0x20000000
 8009c60:	20000004 	.word	0x20000004

08009c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	607b      	str	r3, [r7, #4]
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	2300      	movs	r3, #0
 8009c74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c7a:	4b63      	ldr	r3, [pc, #396]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f003 030c 	and.w	r3, r3, #12
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d007      	beq.n	8009c96 <HAL_RCC_GetSysClockFreq+0x32>
 8009c86:	2b08      	cmp	r3, #8
 8009c88:	d008      	beq.n	8009c9c <HAL_RCC_GetSysClockFreq+0x38>
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 80b4 	bne.w	8009df8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009c90:	4b5e      	ldr	r3, [pc, #376]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009c92:	60bb      	str	r3, [r7, #8]
       break;
 8009c94:	e0b3      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009c96:	4b5d      	ldr	r3, [pc, #372]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009c98:	60bb      	str	r3, [r7, #8]
      break;
 8009c9a:	e0b0      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009c9c:	4b5a      	ldr	r3, [pc, #360]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ca4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ca6:	4b58      	ldr	r3, [pc, #352]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d04a      	beq.n	8009d48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009cb2:	4b55      	ldr	r3, [pc, #340]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	099b      	lsrs	r3, r3, #6
 8009cb8:	f04f 0400 	mov.w	r4, #0
 8009cbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009cc0:	f04f 0200 	mov.w	r2, #0
 8009cc4:	ea03 0501 	and.w	r5, r3, r1
 8009cc8:	ea04 0602 	and.w	r6, r4, r2
 8009ccc:	4629      	mov	r1, r5
 8009cce:	4632      	mov	r2, r6
 8009cd0:	f04f 0300 	mov.w	r3, #0
 8009cd4:	f04f 0400 	mov.w	r4, #0
 8009cd8:	0154      	lsls	r4, r2, #5
 8009cda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009cde:	014b      	lsls	r3, r1, #5
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	1b49      	subs	r1, r1, r5
 8009ce6:	eb62 0206 	sbc.w	r2, r2, r6
 8009cea:	f04f 0300 	mov.w	r3, #0
 8009cee:	f04f 0400 	mov.w	r4, #0
 8009cf2:	0194      	lsls	r4, r2, #6
 8009cf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009cf8:	018b      	lsls	r3, r1, #6
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	eb64 0402 	sbc.w	r4, r4, r2
 8009d00:	f04f 0100 	mov.w	r1, #0
 8009d04:	f04f 0200 	mov.w	r2, #0
 8009d08:	00e2      	lsls	r2, r4, #3
 8009d0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009d0e:	00d9      	lsls	r1, r3, #3
 8009d10:	460b      	mov	r3, r1
 8009d12:	4614      	mov	r4, r2
 8009d14:	195b      	adds	r3, r3, r5
 8009d16:	eb44 0406 	adc.w	r4, r4, r6
 8009d1a:	f04f 0100 	mov.w	r1, #0
 8009d1e:	f04f 0200 	mov.w	r2, #0
 8009d22:	02a2      	lsls	r2, r4, #10
 8009d24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009d28:	0299      	lsls	r1, r3, #10
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	4614      	mov	r4, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	4621      	mov	r1, r4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f04f 0400 	mov.w	r4, #0
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4623      	mov	r3, r4
 8009d3c:	f7f6 ffbc 	bl	8000cb8 <__aeabi_uldivmod>
 8009d40:	4603      	mov	r3, r0
 8009d42:	460c      	mov	r4, r1
 8009d44:	60fb      	str	r3, [r7, #12]
 8009d46:	e049      	b.n	8009ddc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009d48:	4b2f      	ldr	r3, [pc, #188]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	099b      	lsrs	r3, r3, #6
 8009d4e:	f04f 0400 	mov.w	r4, #0
 8009d52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009d56:	f04f 0200 	mov.w	r2, #0
 8009d5a:	ea03 0501 	and.w	r5, r3, r1
 8009d5e:	ea04 0602 	and.w	r6, r4, r2
 8009d62:	4629      	mov	r1, r5
 8009d64:	4632      	mov	r2, r6
 8009d66:	f04f 0300 	mov.w	r3, #0
 8009d6a:	f04f 0400 	mov.w	r4, #0
 8009d6e:	0154      	lsls	r4, r2, #5
 8009d70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009d74:	014b      	lsls	r3, r1, #5
 8009d76:	4619      	mov	r1, r3
 8009d78:	4622      	mov	r2, r4
 8009d7a:	1b49      	subs	r1, r1, r5
 8009d7c:	eb62 0206 	sbc.w	r2, r2, r6
 8009d80:	f04f 0300 	mov.w	r3, #0
 8009d84:	f04f 0400 	mov.w	r4, #0
 8009d88:	0194      	lsls	r4, r2, #6
 8009d8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009d8e:	018b      	lsls	r3, r1, #6
 8009d90:	1a5b      	subs	r3, r3, r1
 8009d92:	eb64 0402 	sbc.w	r4, r4, r2
 8009d96:	f04f 0100 	mov.w	r1, #0
 8009d9a:	f04f 0200 	mov.w	r2, #0
 8009d9e:	00e2      	lsls	r2, r4, #3
 8009da0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009da4:	00d9      	lsls	r1, r3, #3
 8009da6:	460b      	mov	r3, r1
 8009da8:	4614      	mov	r4, r2
 8009daa:	195b      	adds	r3, r3, r5
 8009dac:	eb44 0406 	adc.w	r4, r4, r6
 8009db0:	f04f 0100 	mov.w	r1, #0
 8009db4:	f04f 0200 	mov.w	r2, #0
 8009db8:	02a2      	lsls	r2, r4, #10
 8009dba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009dbe:	0299      	lsls	r1, r3, #10
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4614      	mov	r4, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	4621      	mov	r1, r4
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f04f 0400 	mov.w	r4, #0
 8009dce:	461a      	mov	r2, r3
 8009dd0:	4623      	mov	r3, r4
 8009dd2:	f7f6 ff71 	bl	8000cb8 <__aeabi_uldivmod>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	460c      	mov	r4, r1
 8009dda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	0c1b      	lsrs	r3, r3, #16
 8009de2:	f003 0303 	and.w	r3, r3, #3
 8009de6:	3301      	adds	r3, #1
 8009de8:	005b      	lsls	r3, r3, #1
 8009dea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009df4:	60bb      	str	r3, [r7, #8]
      break;
 8009df6:	e002      	b.n	8009dfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009df8:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009dfa:	60bb      	str	r3, [r7, #8]
      break;
 8009dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e08:	40023800 	.word	0x40023800
 8009e0c:	00f42400 	.word	0x00f42400

08009e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e10:	b480      	push	{r7}
 8009e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009e14:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009e16:	681b      	ldr	r3, [r3, #0]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	20000000 	.word	0x20000000

08009e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009e2c:	f7ff fff0 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e30:	4601      	mov	r1, r0
 8009e32:	4b05      	ldr	r3, [pc, #20]	; (8009e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	0a9b      	lsrs	r3, r3, #10
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	4a03      	ldr	r2, [pc, #12]	; (8009e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e3e:	5cd3      	ldrb	r3, [r2, r3]
 8009e40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	40023800 	.word	0x40023800
 8009e4c:	0801841c 	.word	0x0801841c

08009e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009e54:	f7ff ffdc 	bl	8009e10 <HAL_RCC_GetHCLKFreq>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	0b5b      	lsrs	r3, r3, #13
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	4a03      	ldr	r2, [pc, #12]	; (8009e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009e66:	5cd3      	ldrb	r3, [r2, r3]
 8009e68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	bd80      	pop	{r7, pc}
 8009e70:	40023800 	.word	0x40023800
 8009e74:	0801841c 	.word	0x0801841c

08009e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b088      	sub	sp, #32
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009e84:	2300      	movs	r3, #0
 8009e86:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00a      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009ea0:	4b66      	ldr	r3, [pc, #408]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ea6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009eae:	4963      	ldr	r1, [pc, #396]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d00a      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009ec2:	4b5e      	ldr	r3, [pc, #376]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed0:	495a      	ldr	r1, [pc, #360]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 0301 	and.w	r3, r3, #1
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d105      	bne.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d075      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009efc:	4b50      	ldr	r3, [pc, #320]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009f02:	f7fd fb1b 	bl	800753c <HAL_GetTick>
 8009f06:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f08:	e008      	b.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009f0a:	f7fd fb17 	bl	800753c <HAL_GetTick>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	1ad3      	subs	r3, r2, r3
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d901      	bls.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e1dc      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009f1c:	4b47      	ldr	r3, [pc, #284]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1f0      	bne.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d009      	beq.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	019a      	lsls	r2, r3, #6
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	071b      	lsls	r3, r3, #28
 8009f40:	493e      	ldr	r1, [pc, #248]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d01f      	beq.n	8009f94 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009f54:	4b39      	ldr	r3, [pc, #228]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f5a:	0f1b      	lsrs	r3, r3, #28
 8009f5c:	f003 0307 	and.w	r3, r3, #7
 8009f60:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	019a      	lsls	r2, r3, #6
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	061b      	lsls	r3, r3, #24
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	071b      	lsls	r3, r3, #28
 8009f74:	4931      	ldr	r1, [pc, #196]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009f7c:	4b2f      	ldr	r3, [pc, #188]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f82:	f023 021f 	bic.w	r2, r3, #31
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6a1b      	ldr	r3, [r3, #32]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	492b      	ldr	r1, [pc, #172]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00d      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	019a      	lsls	r2, r3, #6
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	061b      	lsls	r3, r3, #24
 8009fac:	431a      	orrs	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	071b      	lsls	r3, r3, #28
 8009fb4:	4921      	ldr	r1, [pc, #132]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009fbc:	4b20      	ldr	r3, [pc, #128]	; (800a040 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009fc2:	f7fd fabb 	bl	800753c <HAL_GetTick>
 8009fc6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fc8:	e008      	b.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009fca:	f7fd fab7 	bl	800753c <HAL_GetTick>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	69fb      	ldr	r3, [r7, #28]
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d901      	bls.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e17c      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009fdc:	4b17      	ldr	r3, [pc, #92]	; (800a03c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d0f0      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d112      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10c      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80ce 	beq.w	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a016:	f040 80c8 	bne.w	800a1aa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a01a:	4b0a      	ldr	r3, [pc, #40]	; (800a044 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a01c:	2200      	movs	r2, #0
 800a01e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a020:	f7fd fa8c 	bl	800753c <HAL_GetTick>
 800a024:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a026:	e00f      	b.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a028:	f7fd fa88 	bl	800753c <HAL_GetTick>
 800a02c:	4602      	mov	r2, r0
 800a02e:	69fb      	ldr	r3, [r7, #28]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	2b02      	cmp	r3, #2
 800a034:	d908      	bls.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e14d      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a03a:	bf00      	nop
 800a03c:	40023800 	.word	0x40023800
 800a040:	42470068 	.word	0x42470068
 800a044:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a048:	4ba5      	ldr	r3, [pc, #660]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a054:	d0e8      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f003 0304 	and.w	r3, r3, #4
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d02e      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a062:	4b9f      	ldr	r3, [pc, #636]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	f003 0303 	and.w	r3, r3, #3
 800a06e:	3301      	adds	r3, #1
 800a070:	005b      	lsls	r3, r3, #1
 800a072:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a074:	4b9a      	ldr	r3, [pc, #616]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a07a:	0f1b      	lsrs	r3, r3, #28
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	019a      	lsls	r2, r3, #6
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	085b      	lsrs	r3, r3, #1
 800a08c:	3b01      	subs	r3, #1
 800a08e:	041b      	lsls	r3, r3, #16
 800a090:	431a      	orrs	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	061b      	lsls	r3, r3, #24
 800a098:	431a      	orrs	r2, r3
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	071b      	lsls	r3, r3, #28
 800a09e:	4990      	ldr	r1, [pc, #576]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a0a6:	4b8e      	ldr	r3, [pc, #568]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a0a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a0ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	3b01      	subs	r3, #1
 800a0b6:	021b      	lsls	r3, r3, #8
 800a0b8:	4989      	ldr	r1, [pc, #548]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f003 0308 	and.w	r3, r3, #8
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d02c      	beq.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a0cc:	4b84      	ldr	r3, [pc, #528]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a0ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	3301      	adds	r3, #1
 800a0da:	005b      	lsls	r3, r3, #1
 800a0dc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a0de:	4b80      	ldr	r3, [pc, #512]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a0e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e4:	0e1b      	lsrs	r3, r3, #24
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	019a      	lsls	r2, r3, #6
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	085b      	lsrs	r3, r3, #1
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	041b      	lsls	r3, r3, #16
 800a0fa:	431a      	orrs	r2, r3
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	061b      	lsls	r3, r3, #24
 800a100:	431a      	orrs	r2, r3
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	071b      	lsls	r3, r3, #28
 800a108:	4975      	ldr	r1, [pc, #468]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a10a:	4313      	orrs	r3, r2
 800a10c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a110:	4b73      	ldr	r3, [pc, #460]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a116:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11e:	4970      	ldr	r1, [pc, #448]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a120:	4313      	orrs	r3, r2
 800a122:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d024      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a13a:	d11f      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a13c:	4b68      	ldr	r3, [pc, #416]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a142:	0e1b      	lsrs	r3, r3, #24
 800a144:	f003 030f 	and.w	r3, r3, #15
 800a148:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a14a:	4b65      	ldr	r3, [pc, #404]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a14c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a150:	0f1b      	lsrs	r3, r3, #28
 800a152:	f003 0307 	and.w	r3, r3, #7
 800a156:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	019a      	lsls	r2, r3, #6
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	085b      	lsrs	r3, r3, #1
 800a164:	3b01      	subs	r3, #1
 800a166:	041b      	lsls	r3, r3, #16
 800a168:	431a      	orrs	r2, r3
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	061b      	lsls	r3, r3, #24
 800a16e:	431a      	orrs	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	071b      	lsls	r3, r3, #28
 800a174:	495a      	ldr	r1, [pc, #360]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a176:	4313      	orrs	r3, r2
 800a178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a17c:	4b59      	ldr	r3, [pc, #356]	; (800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a17e:	2201      	movs	r2, #1
 800a180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a182:	f7fd f9db 	bl	800753c <HAL_GetTick>
 800a186:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a188:	e008      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a18a:	f7fd f9d7 	bl	800753c <HAL_GetTick>
 800a18e:	4602      	mov	r2, r0
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	2b02      	cmp	r3, #2
 800a196:	d901      	bls.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e09c      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a19c:	4b50      	ldr	r3, [pc, #320]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1a8:	d1ef      	bne.n	800a18a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 8083 	beq.w	800a2be <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60bb      	str	r3, [r7, #8]
 800a1bc:	4b48      	ldr	r3, [pc, #288]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	4a47      	ldr	r2, [pc, #284]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c6:	6413      	str	r3, [r2, #64]	; 0x40
 800a1c8:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1d0:	60bb      	str	r3, [r7, #8]
 800a1d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a1d4:	4b44      	ldr	r3, [pc, #272]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a43      	ldr	r2, [pc, #268]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a1da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a1e0:	f7fd f9ac 	bl	800753c <HAL_GetTick>
 800a1e4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a1e8:	f7fd f9a8 	bl	800753c <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e06d      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a1fa:	4b3b      	ldr	r3, [pc, #236]	; (800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0f0      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a206:	4b36      	ldr	r3, [pc, #216]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a20e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d02f      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a21a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a21e:	69ba      	ldr	r2, [r7, #24]
 800a220:	429a      	cmp	r2, r3
 800a222:	d028      	beq.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a224:	4b2e      	ldr	r3, [pc, #184]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a22c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a22e:	4b2f      	ldr	r3, [pc, #188]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a230:	2201      	movs	r2, #1
 800a232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a234:	4b2d      	ldr	r3, [pc, #180]	; (800a2ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a236:	2200      	movs	r2, #0
 800a238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a23a:	4a29      	ldr	r2, [pc, #164]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a240:	4b27      	ldr	r3, [pc, #156]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a244:	f003 0301 	and.w	r3, r3, #1
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d114      	bne.n	800a276 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a24c:	f7fd f976 	bl	800753c <HAL_GetTick>
 800a250:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a252:	e00a      	b.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a254:	f7fd f972 	bl	800753c <HAL_GetTick>
 800a258:	4602      	mov	r2, r0
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a262:	4293      	cmp	r3, r2
 800a264:	d901      	bls.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a266:	2303      	movs	r3, #3
 800a268:	e035      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a26a:	4b1d      	ldr	r3, [pc, #116]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a26c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	2b00      	cmp	r3, #0
 800a274:	d0ee      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a27a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a27e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a282:	d10d      	bne.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a284:	4b16      	ldr	r3, [pc, #88]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a290:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a298:	4911      	ldr	r1, [pc, #68]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a29a:	4313      	orrs	r3, r2
 800a29c:	608b      	str	r3, [r1, #8]
 800a29e:	e005      	b.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	4a0e      	ldr	r2, [pc, #56]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a2aa:	6093      	str	r3, [r2, #8]
 800a2ac:	4b0c      	ldr	r3, [pc, #48]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2b8:	4909      	ldr	r1, [pc, #36]	; (800a2e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f003 0310 	and.w	r3, r3, #16
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d004      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a2d2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3720      	adds	r7, #32
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	40023800 	.word	0x40023800
 800a2e4:	42470070 	.word	0x42470070
 800a2e8:	40007000 	.word	0x40007000
 800a2ec:	42470e40 	.word	0x42470e40
 800a2f0:	424711e0 	.word	0x424711e0

0800a2f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0301 	and.w	r3, r3, #1
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d075      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a30c:	4ba2      	ldr	r3, [pc, #648]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a30e:	689b      	ldr	r3, [r3, #8]
 800a310:	f003 030c 	and.w	r3, r3, #12
 800a314:	2b04      	cmp	r3, #4
 800a316:	d00c      	beq.n	800a332 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a318:	4b9f      	ldr	r3, [pc, #636]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a320:	2b08      	cmp	r3, #8
 800a322:	d112      	bne.n	800a34a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a324:	4b9c      	ldr	r3, [pc, #624]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a32c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a330:	d10b      	bne.n	800a34a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a332:	4b99      	ldr	r3, [pc, #612]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d05b      	beq.n	800a3f6 <HAL_RCC_OscConfig+0x102>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d157      	bne.n	800a3f6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e20b      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a352:	d106      	bne.n	800a362 <HAL_RCC_OscConfig+0x6e>
 800a354:	4b90      	ldr	r3, [pc, #576]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a8f      	ldr	r2, [pc, #572]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a35a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a35e:	6013      	str	r3, [r2, #0]
 800a360:	e01d      	b.n	800a39e <HAL_RCC_OscConfig+0xaa>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a36a:	d10c      	bne.n	800a386 <HAL_RCC_OscConfig+0x92>
 800a36c:	4b8a      	ldr	r3, [pc, #552]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a89      	ldr	r2, [pc, #548]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a372:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a376:	6013      	str	r3, [r2, #0]
 800a378:	4b87      	ldr	r3, [pc, #540]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a86      	ldr	r2, [pc, #536]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a37e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a382:	6013      	str	r3, [r2, #0]
 800a384:	e00b      	b.n	800a39e <HAL_RCC_OscConfig+0xaa>
 800a386:	4b84      	ldr	r3, [pc, #528]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a83      	ldr	r2, [pc, #524]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a38c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	4b81      	ldr	r3, [pc, #516]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a80      	ldr	r2, [pc, #512]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a398:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a39c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d013      	beq.n	800a3ce <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a6:	f7fd f8c9 	bl	800753c <HAL_GetTick>
 800a3aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3ac:	e008      	b.n	800a3c0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3ae:	f7fd f8c5 	bl	800753c <HAL_GetTick>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	1ad3      	subs	r3, r2, r3
 800a3b8:	2b64      	cmp	r3, #100	; 0x64
 800a3ba:	d901      	bls.n	800a3c0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e1d0      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3c0:	4b75      	ldr	r3, [pc, #468]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d0f0      	beq.n	800a3ae <HAL_RCC_OscConfig+0xba>
 800a3cc:	e014      	b.n	800a3f8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ce:	f7fd f8b5 	bl	800753c <HAL_GetTick>
 800a3d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3d4:	e008      	b.n	800a3e8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a3d6:	f7fd f8b1 	bl	800753c <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b64      	cmp	r3, #100	; 0x64
 800a3e2:	d901      	bls.n	800a3e8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e1bc      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a3e8:	4b6b      	ldr	r3, [pc, #428]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1f0      	bne.n	800a3d6 <HAL_RCC_OscConfig+0xe2>
 800a3f4:	e000      	b.n	800a3f8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d063      	beq.n	800a4cc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a404:	4b64      	ldr	r3, [pc, #400]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	f003 030c 	and.w	r3, r3, #12
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d00b      	beq.n	800a428 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a410:	4b61      	ldr	r3, [pc, #388]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a418:	2b08      	cmp	r3, #8
 800a41a:	d11c      	bne.n	800a456 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a41c:	4b5e      	ldr	r3, [pc, #376]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d116      	bne.n	800a456 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a428:	4b5b      	ldr	r3, [pc, #364]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	d005      	beq.n	800a440 <HAL_RCC_OscConfig+0x14c>
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d001      	beq.n	800a440 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e190      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a440:	4b55      	ldr	r3, [pc, #340]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	00db      	lsls	r3, r3, #3
 800a44e:	4952      	ldr	r1, [pc, #328]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a450:	4313      	orrs	r3, r2
 800a452:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a454:	e03a      	b.n	800a4cc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d020      	beq.n	800a4a0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a45e:	4b4f      	ldr	r3, [pc, #316]	; (800a59c <HAL_RCC_OscConfig+0x2a8>)
 800a460:	2201      	movs	r2, #1
 800a462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a464:	f7fd f86a 	bl	800753c <HAL_GetTick>
 800a468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a46a:	e008      	b.n	800a47e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a46c:	f7fd f866 	bl	800753c <HAL_GetTick>
 800a470:	4602      	mov	r2, r0
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	2b02      	cmp	r3, #2
 800a478:	d901      	bls.n	800a47e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a47a:	2303      	movs	r3, #3
 800a47c:	e171      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a47e:	4b46      	ldr	r3, [pc, #280]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0302 	and.w	r3, r3, #2
 800a486:	2b00      	cmp	r3, #0
 800a488:	d0f0      	beq.n	800a46c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a48a:	4b43      	ldr	r3, [pc, #268]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	00db      	lsls	r3, r3, #3
 800a498:	493f      	ldr	r1, [pc, #252]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a49a:	4313      	orrs	r3, r2
 800a49c:	600b      	str	r3, [r1, #0]
 800a49e:	e015      	b.n	800a4cc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4a0:	4b3e      	ldr	r3, [pc, #248]	; (800a59c <HAL_RCC_OscConfig+0x2a8>)
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a6:	f7fd f849 	bl	800753c <HAL_GetTick>
 800a4aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a4ae:	f7fd f845 	bl	800753c <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e150      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4c0:	4b35      	ldr	r3, [pc, #212]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0302 	and.w	r3, r3, #2
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1f0      	bne.n	800a4ae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0308 	and.w	r3, r3, #8
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d030      	beq.n	800a53a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d016      	beq.n	800a50e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a4e0:	4b2f      	ldr	r3, [pc, #188]	; (800a5a0 <HAL_RCC_OscConfig+0x2ac>)
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4e6:	f7fd f829 	bl	800753c <HAL_GetTick>
 800a4ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a4ec:	e008      	b.n	800a500 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a4ee:	f7fd f825 	bl	800753c <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	2b02      	cmp	r3, #2
 800a4fa:	d901      	bls.n	800a500 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a4fc:	2303      	movs	r3, #3
 800a4fe:	e130      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a500:	4b25      	ldr	r3, [pc, #148]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d0f0      	beq.n	800a4ee <HAL_RCC_OscConfig+0x1fa>
 800a50c:	e015      	b.n	800a53a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a50e:	4b24      	ldr	r3, [pc, #144]	; (800a5a0 <HAL_RCC_OscConfig+0x2ac>)
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a514:	f7fd f812 	bl	800753c <HAL_GetTick>
 800a518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a51a:	e008      	b.n	800a52e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a51c:	f7fd f80e 	bl	800753c <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e119      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a52e:	4b1a      	ldr	r3, [pc, #104]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a532:	f003 0302 	and.w	r3, r3, #2
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f0      	bne.n	800a51c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0304 	and.w	r3, r3, #4
 800a542:	2b00      	cmp	r3, #0
 800a544:	f000 809f 	beq.w	800a686 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a548:	2300      	movs	r3, #0
 800a54a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a54c:	4b12      	ldr	r3, [pc, #72]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10f      	bne.n	800a578 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a558:	2300      	movs	r3, #0
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	4b0e      	ldr	r3, [pc, #56]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	4a0d      	ldr	r2, [pc, #52]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a566:	6413      	str	r3, [r2, #64]	; 0x40
 800a568:	4b0b      	ldr	r3, [pc, #44]	; (800a598 <HAL_RCC_OscConfig+0x2a4>)
 800a56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a56c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a574:	2301      	movs	r3, #1
 800a576:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a578:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <HAL_RCC_OscConfig+0x2b0>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a580:	2b00      	cmp	r3, #0
 800a582:	d120      	bne.n	800a5c6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a584:	4b07      	ldr	r3, [pc, #28]	; (800a5a4 <HAL_RCC_OscConfig+0x2b0>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a06      	ldr	r2, [pc, #24]	; (800a5a4 <HAL_RCC_OscConfig+0x2b0>)
 800a58a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a58e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a590:	f7fc ffd4 	bl	800753c <HAL_GetTick>
 800a594:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a596:	e010      	b.n	800a5ba <HAL_RCC_OscConfig+0x2c6>
 800a598:	40023800 	.word	0x40023800
 800a59c:	42470000 	.word	0x42470000
 800a5a0:	42470e80 	.word	0x42470e80
 800a5a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5a8:	f7fc ffc8 	bl	800753c <HAL_GetTick>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	1ad3      	subs	r3, r2, r3
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d901      	bls.n	800a5ba <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a5b6:	2303      	movs	r3, #3
 800a5b8:	e0d3      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5ba:	4b6c      	ldr	r3, [pc, #432]	; (800a76c <HAL_RCC_OscConfig+0x478>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d0f0      	beq.n	800a5a8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d106      	bne.n	800a5dc <HAL_RCC_OscConfig+0x2e8>
 800a5ce:	4b68      	ldr	r3, [pc, #416]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5d2:	4a67      	ldr	r2, [pc, #412]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5d4:	f043 0301 	orr.w	r3, r3, #1
 800a5d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a5da:	e01c      	b.n	800a616 <HAL_RCC_OscConfig+0x322>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	689b      	ldr	r3, [r3, #8]
 800a5e0:	2b05      	cmp	r3, #5
 800a5e2:	d10c      	bne.n	800a5fe <HAL_RCC_OscConfig+0x30a>
 800a5e4:	4b62      	ldr	r3, [pc, #392]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5e8:	4a61      	ldr	r2, [pc, #388]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5ea:	f043 0304 	orr.w	r3, r3, #4
 800a5ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a5f0:	4b5f      	ldr	r3, [pc, #380]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5f4:	4a5e      	ldr	r2, [pc, #376]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a5f6:	f043 0301 	orr.w	r3, r3, #1
 800a5fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a5fc:	e00b      	b.n	800a616 <HAL_RCC_OscConfig+0x322>
 800a5fe:	4b5c      	ldr	r3, [pc, #368]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a602:	4a5b      	ldr	r2, [pc, #364]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a604:	f023 0301 	bic.w	r3, r3, #1
 800a608:	6713      	str	r3, [r2, #112]	; 0x70
 800a60a:	4b59      	ldr	r3, [pc, #356]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a60e:	4a58      	ldr	r2, [pc, #352]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a610:	f023 0304 	bic.w	r3, r3, #4
 800a614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d015      	beq.n	800a64a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a61e:	f7fc ff8d 	bl	800753c <HAL_GetTick>
 800a622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a624:	e00a      	b.n	800a63c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a626:	f7fc ff89 	bl	800753c <HAL_GetTick>
 800a62a:	4602      	mov	r2, r0
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	1ad3      	subs	r3, r2, r3
 800a630:	f241 3288 	movw	r2, #5000	; 0x1388
 800a634:	4293      	cmp	r3, r2
 800a636:	d901      	bls.n	800a63c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a638:	2303      	movs	r3, #3
 800a63a:	e092      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a63c:	4b4c      	ldr	r3, [pc, #304]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a63e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a640:	f003 0302 	and.w	r3, r3, #2
 800a644:	2b00      	cmp	r3, #0
 800a646:	d0ee      	beq.n	800a626 <HAL_RCC_OscConfig+0x332>
 800a648:	e014      	b.n	800a674 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64a:	f7fc ff77 	bl	800753c <HAL_GetTick>
 800a64e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a650:	e00a      	b.n	800a668 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a652:	f7fc ff73 	bl	800753c <HAL_GetTick>
 800a656:	4602      	mov	r2, r0
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	1ad3      	subs	r3, r2, r3
 800a65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a660:	4293      	cmp	r3, r2
 800a662:	d901      	bls.n	800a668 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e07c      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a668:	4b41      	ldr	r3, [pc, #260]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a66c:	f003 0302 	and.w	r3, r3, #2
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1ee      	bne.n	800a652 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b01      	cmp	r3, #1
 800a678:	d105      	bne.n	800a686 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a67a:	4b3d      	ldr	r3, [pc, #244]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	4a3c      	ldr	r2, [pc, #240]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a680:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a684:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d068      	beq.n	800a760 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a68e:	4b38      	ldr	r3, [pc, #224]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	f003 030c 	and.w	r3, r3, #12
 800a696:	2b08      	cmp	r3, #8
 800a698:	d060      	beq.n	800a75c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	699b      	ldr	r3, [r3, #24]
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d145      	bne.n	800a72e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6a2:	4b34      	ldr	r3, [pc, #208]	; (800a774 <HAL_RCC_OscConfig+0x480>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6a8:	f7fc ff48 	bl	800753c <HAL_GetTick>
 800a6ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6ae:	e008      	b.n	800a6c2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6b0:	f7fc ff44 	bl	800753c <HAL_GetTick>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	1ad3      	subs	r3, r2, r3
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d901      	bls.n	800a6c2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a6be:	2303      	movs	r3, #3
 800a6c0:	e04f      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a6c2:	4b2b      	ldr	r3, [pc, #172]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1f0      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	69da      	ldr	r2, [r3, #28]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	431a      	orrs	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	019b      	lsls	r3, r3, #6
 800a6de:	431a      	orrs	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e4:	085b      	lsrs	r3, r3, #1
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	041b      	lsls	r3, r3, #16
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	061b      	lsls	r3, r3, #24
 800a6f2:	431a      	orrs	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	071b      	lsls	r3, r3, #28
 800a6fa:	491d      	ldr	r1, [pc, #116]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a700:	4b1c      	ldr	r3, [pc, #112]	; (800a774 <HAL_RCC_OscConfig+0x480>)
 800a702:	2201      	movs	r2, #1
 800a704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a706:	f7fc ff19 	bl	800753c <HAL_GetTick>
 800a70a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a70c:	e008      	b.n	800a720 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a70e:	f7fc ff15 	bl	800753c <HAL_GetTick>
 800a712:	4602      	mov	r2, r0
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	1ad3      	subs	r3, r2, r3
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d901      	bls.n	800a720 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a71c:	2303      	movs	r3, #3
 800a71e:	e020      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a720:	4b13      	ldr	r3, [pc, #76]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d0f0      	beq.n	800a70e <HAL_RCC_OscConfig+0x41a>
 800a72c:	e018      	b.n	800a760 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a72e:	4b11      	ldr	r3, [pc, #68]	; (800a774 <HAL_RCC_OscConfig+0x480>)
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7fc ff02 	bl	800753c <HAL_GetTick>
 800a738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a73c:	f7fc fefe 	bl	800753c <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e009      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a74e:	4b08      	ldr	r3, [pc, #32]	; (800a770 <HAL_RCC_OscConfig+0x47c>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f0      	bne.n	800a73c <HAL_RCC_OscConfig+0x448>
 800a75a:	e001      	b.n	800a760 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	3718      	adds	r7, #24
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	40007000 	.word	0x40007000
 800a770:	40023800 	.word	0x40023800
 800a774:	42470060 	.word	0x42470060

0800a778 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b082      	sub	sp, #8
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a786:	2301      	movs	r3, #1
 800a788:	e022      	b.n	800a7d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a790:	b2db      	uxtb	r3, r3
 800a792:	2b00      	cmp	r3, #0
 800a794:	d105      	bne.n	800a7a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f7fa fe85 	bl	80054ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a7aa:	6878      	ldr	r0, [r7, #4]
 800a7ac:	f000 f814 	bl	800a7d8 <HAL_SD_InitCard>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d001      	beq.n	800a7ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e00a      	b.n	800a7d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a7ce:	2300      	movs	r3, #0
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a7d8:	b5b0      	push	{r4, r5, r7, lr}
 800a7da:	b08e      	sub	sp, #56	; 0x38
 800a7dc:	af04      	add	r7, sp, #16
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a7f4:	2376      	movs	r3, #118	; 0x76
 800a7f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681d      	ldr	r5, [r3, #0]
 800a7fc:	466c      	mov	r4, sp
 800a7fe:	f107 0314 	add.w	r3, r7, #20
 800a802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a806:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a80a:	f107 0308 	add.w	r3, r7, #8
 800a80e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a810:	4628      	mov	r0, r5
 800a812:	f003 fa87 	bl	800dd24 <SDIO_Init>
 800a816:	4603      	mov	r3, r0
 800a818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e031      	b.n	800a88c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a828:	4b1a      	ldr	r3, [pc, #104]	; (800a894 <HAL_SD_InitCard+0xbc>)
 800a82a:	2200      	movs	r2, #0
 800a82c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4618      	mov	r0, r3
 800a834:	f003 fabf 	bl	800ddb6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a838:	4b16      	ldr	r3, [pc, #88]	; (800a894 <HAL_SD_InitCard+0xbc>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 ffc6 	bl	800b7d0 <SD_PowerON>
 800a844:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00b      	beq.n	800a864 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	431a      	orrs	r2, r3
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a860:	2301      	movs	r3, #1
 800a862:	e013      	b.n	800a88c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fee5 	bl	800b634 <SD_InitCard>
 800a86a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a86c:	6a3b      	ldr	r3, [r7, #32]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d00b      	beq.n	800a88a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a87e:	6a3b      	ldr	r3, [r7, #32]
 800a880:	431a      	orrs	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e000      	b.n	800a88c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a88a:	2300      	movs	r3, #0
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3728      	adds	r7, #40	; 0x28
 800a890:	46bd      	mov	sp, r7
 800a892:	bdb0      	pop	{r4, r5, r7, pc}
 800a894:	422580a0 	.word	0x422580a0

0800a898 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b08c      	sub	sp, #48	; 0x30
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d107      	bne.n	800a8c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	e0c7      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	f040 80c0 	bne.w	800aa4e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	441a      	add	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d907      	bls.n	800a8f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e0ae      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2203      	movs	r2, #3
 800a8f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2200      	movs	r2, #0
 800a900:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a910:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	4a50      	ldr	r2, [pc, #320]	; (800aa58 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a918:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a91e:	4a4f      	ldr	r2, [pc, #316]	; (800aa5c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a926:	2200      	movs	r2, #0
 800a928:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3380      	adds	r3, #128	; 0x80
 800a934:	4619      	mov	r1, r3
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	025b      	lsls	r3, r3, #9
 800a93c:	089b      	lsrs	r3, r3, #2
 800a93e:	f7fd fbef 	bl	8008120 <HAL_DMA_Start_IT>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d017      	beq.n	800a978 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a956:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a40      	ldr	r2, [pc, #256]	; (800aa60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a964:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e06b      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a978:	4b3a      	ldr	r3, [pc, #232]	; (800aa64 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a97a:	2201      	movs	r2, #1
 800a97c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a982:	2b01      	cmp	r3, #1
 800a984:	d002      	beq.n	800a98c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800a986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a988:	025b      	lsls	r3, r3, #9
 800a98a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a994:	4618      	mov	r0, r3
 800a996:	f003 faa1 	bl	800dedc <SDMMC_CmdBlockLength>
 800a99a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00f      	beq.n	800a9c2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a2e      	ldr	r2, [pc, #184]	; (800aa60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a9a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	431a      	orrs	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e046      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	025b      	lsls	r3, r3, #9
 800a9cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a9ce:	2390      	movs	r3, #144	; 0x90
 800a9d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f107 0210 	add.w	r2, r7, #16
 800a9e6:	4611      	mov	r1, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f003 fa4b 	bl	800de84 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d90a      	bls.n	800aa0a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2282      	movs	r2, #130	; 0x82
 800a9f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa00:	4618      	mov	r0, r3
 800aa02:	f003 faaf 	bl	800df64 <SDMMC_CmdReadMultiBlock>
 800aa06:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa08:	e009      	b.n	800aa1e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2281      	movs	r2, #129	; 0x81
 800aa0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa16:	4618      	mov	r0, r3
 800aa18:	f003 fa82 	bl	800df20 <SDMMC_CmdReadSingleBlock>
 800aa1c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d012      	beq.n	800aa4a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a0d      	ldr	r2, [pc, #52]	; (800aa60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aa2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	431a      	orrs	r2, r3
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e002      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e000      	b.n	800aa50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800aa4e:	2302      	movs	r3, #2
  }
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3730      	adds	r7, #48	; 0x30
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	0800b443 	.word	0x0800b443
 800aa5c:	0800b4b5 	.word	0x0800b4b5
 800aa60:	004005ff 	.word	0x004005ff
 800aa64:	4225858c 	.word	0x4225858c

0800aa68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	; 0x30
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
 800aa74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d107      	bne.n	800aa90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	e0ca      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa96:	b2db      	uxtb	r3, r3
 800aa98:	2b01      	cmp	r3, #1
 800aa9a:	f040 80c3 	bne.w	800ac24 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aaa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	441a      	add	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d907      	bls.n	800aac2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e0b1      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2203      	movs	r2, #3
 800aac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	2200      	movs	r2, #0
 800aad0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f042 021a 	orr.w	r2, r2, #26
 800aae0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae6:	4a52      	ldr	r2, [pc, #328]	; (800ac30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800aae8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	4a51      	ldr	r2, [pc, #324]	; (800ac34 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800aaf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d002      	beq.n	800ab08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	025b      	lsls	r3, r3, #9
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab10:	4618      	mov	r0, r3
 800ab12:	f003 f9e3 	bl	800dedc <SDMMC_CmdBlockLength>
 800ab16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d00f      	beq.n	800ab3e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a45      	ldr	r2, [pc, #276]	; (800ac38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ab24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2201      	movs	r2, #1
 800ab36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e073      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	2b01      	cmp	r3, #1
 800ab42:	d90a      	bls.n	800ab5a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	22a0      	movs	r2, #160	; 0xa0
 800ab48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab50:	4618      	mov	r0, r3
 800ab52:	f003 fa4b 	bl	800dfec <SDMMC_CmdWriteMultiBlock>
 800ab56:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab58:	e009      	b.n	800ab6e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2290      	movs	r2, #144	; 0x90
 800ab5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab66:	4618      	mov	r0, r3
 800ab68:	f003 fa1e 	bl	800dfa8 <SDMMC_CmdWriteSingleBlock>
 800ab6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d012      	beq.n	800ab9a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a2f      	ldr	r2, [pc, #188]	; (800ac38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ab7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab82:	431a      	orrs	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e045      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ab9a:	4b28      	ldr	r3, [pc, #160]	; (800ac3c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aba4:	68b9      	ldr	r1, [r7, #8]
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3380      	adds	r3, #128	; 0x80
 800abac:	461a      	mov	r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	025b      	lsls	r3, r3, #9
 800abb2:	089b      	lsrs	r3, r3, #2
 800abb4:	f7fd fab4 	bl	8008120 <HAL_DMA_Start_IT>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d01a      	beq.n	800abf4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f022 021a 	bic.w	r2, r2, #26
 800abcc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a19      	ldr	r2, [pc, #100]	; (800ac38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800abd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2200      	movs	r2, #0
 800abee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e018      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800abf4:	f04f 33ff 	mov.w	r3, #4294967295
 800abf8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	025b      	lsls	r3, r3, #9
 800abfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ac00:	2390      	movs	r3, #144	; 0x90
 800ac02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ac04:	2300      	movs	r3, #0
 800ac06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f107 0210 	add.w	r2, r7, #16
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f003 f932 	bl	800de84 <SDIO_ConfigData>

      return HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	e000      	b.n	800ac26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ac24:	2302      	movs	r3, #2
  }
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3730      	adds	r7, #48	; 0x30
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	0800b419 	.word	0x0800b419
 800ac34:	0800b4b5 	.word	0x0800b4b5
 800ac38:	004005ff 	.word	0x004005ff
 800ac3c:	4225858c 	.word	0x4225858c

0800ac40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d008      	beq.n	800ac6e <HAL_SD_IRQHandler+0x2e>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f003 0308 	and.w	r3, r3, #8
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 ffc8 	bl	800bbfc <SD_Read_IT>
 800ac6c:	e155      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 808f 	beq.w	800ad9c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	6812      	ldr	r2, [r2, #0]
 800ac92:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ac96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ac9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f022 0201 	bic.w	r2, r2, #1
 800acaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f003 0308 	and.w	r3, r3, #8
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d039      	beq.n	800ad2a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f003 0302 	and.w	r3, r3, #2
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d104      	bne.n	800acca <HAL_SD_IRQHandler+0x8a>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f003 0320 	and.w	r3, r3, #32
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d011      	beq.n	800acee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4618      	mov	r0, r3
 800acd0:	f003 f9ae 	bl	800e030 <SDMMC_CmdStopTransfer>
 800acd4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d008      	beq.n	800acee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	431a      	orrs	r2, r3
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f91f 	bl	800af2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f240 523a 	movw	r2, #1338	; 0x53a
 800acf6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d104      	bne.n	800ad1a <HAL_SD_IRQHandler+0xda>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 0302 	and.w	r3, r3, #2
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f003 fe04 	bl	800e928 <HAL_SD_RxCpltCallback>
 800ad20:	e0fb      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f003 fdf6 	bl	800e914 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad28:	e0f7      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f000 80f2 	beq.w	800af1a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f003 0320 	and.w	r3, r3, #32
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d011      	beq.n	800ad64 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f003 f973 	bl	800e030 <SDMMC_CmdStopTransfer>
 800ad4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d008      	beq.n	800ad64 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	431a      	orrs	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f8e4 	bl	800af2c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f003 0301 	and.w	r3, r3, #1
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f040 80d5 	bne.w	800af1a <HAL_SD_IRQHandler+0x2da>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f003 0302 	and.w	r3, r3, #2
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f040 80cf 	bne.w	800af1a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f022 0208 	bic.w	r2, r2, #8
 800ad8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2201      	movs	r2, #1
 800ad90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ad94:	6878      	ldr	r0, [r7, #4]
 800ad96:	f003 fdbd 	bl	800e914 <HAL_SD_TxCpltCallback>
}
 800ad9a:	e0be      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d008      	beq.n	800adbc <HAL_SD_IRQHandler+0x17c>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	f003 0308 	and.w	r3, r3, #8
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d003      	beq.n	800adbc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 ff72 	bl	800bc9e <SD_Write_IT>
 800adba:	e0ae      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adc2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 80a7 	beq.w	800af1a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d005      	beq.n	800ade6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	f043 0202 	orr.w	r2, r3, #2
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800adec:	f003 0308 	and.w	r3, r3, #8
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d005      	beq.n	800ae00 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf8:	f043 0208 	orr.w	r2, r3, #8
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	f003 0320 	and.w	r3, r3, #32
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d005      	beq.n	800ae1a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae12:	f043 0220 	orr.w	r2, r3, #32
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae20:	f003 0310 	and.w	r3, r3, #16
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d005      	beq.n	800ae34 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	f043 0210 	orr.w	r2, r3, #16
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ae4c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f003 f8ec 	bl	800e030 <SDMMC_CmdStopTransfer>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae5e:	431a      	orrs	r2, r3
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00a      	beq.n	800ae84 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f855 	bl	800af2c <HAL_SD_ErrorCallback>
}
 800ae82:	e04a      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d045      	beq.n	800af1a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f003 0310 	and.w	r3, r3, #16
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <HAL_SD_IRQHandler+0x262>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f003 0320 	and.w	r3, r3, #32
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d011      	beq.n	800aec6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aea6:	4a1f      	ldr	r2, [pc, #124]	; (800af24 <HAL_SD_IRQHandler+0x2e4>)
 800aea8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f7fd f98e 	bl	80081d0 <HAL_DMA_Abort_IT>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d02f      	beq.n	800af1a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 fb4a 	bl	800b558 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800aec4:	e029      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d104      	bne.n	800aeda <HAL_SD_IRQHandler+0x29a>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d011      	beq.n	800aefe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	4a12      	ldr	r2, [pc, #72]	; (800af28 <HAL_SD_IRQHandler+0x2e8>)
 800aee0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7fd f972 	bl	80081d0 <HAL_DMA_Abort_IT>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d013      	beq.n	800af1a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef6:	4618      	mov	r0, r3
 800aef8:	f000 fb65 	bl	800b5c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aefc:	e00d      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2201      	movs	r2, #1
 800af08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f003 fcf4 	bl	800e900 <HAL_SD_AbortCallback>
}
 800af18:	e7ff      	b.n	800af1a <HAL_SD_IRQHandler+0x2da>
 800af1a:	bf00      	nop
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	0800b559 	.word	0x0800b559
 800af28:	0800b5c7 	.word	0x0800b5c7

0800af2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af4e:	0f9b      	lsrs	r3, r3, #30
 800af50:	b2da      	uxtb	r2, r3
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af5a:	0e9b      	lsrs	r3, r3, #26
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	f003 030f 	and.w	r3, r3, #15
 800af62:	b2da      	uxtb	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af6c:	0e1b      	lsrs	r3, r3, #24
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 0303 	and.w	r3, r3, #3
 800af74:	b2da      	uxtb	r2, r3
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	b2da      	uxtb	r2, r3
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b2da      	uxtb	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af96:	b2da      	uxtb	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa0:	0d1b      	lsrs	r3, r3, #20
 800afa2:	b29a      	uxth	r2, r3
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afac:	0c1b      	lsrs	r3, r3, #16
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	f003 030f 	and.w	r3, r3, #15
 800afb4:	b2da      	uxtb	r2, r3
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afbe:	0bdb      	lsrs	r3, r3, #15
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	b2da      	uxtb	r2, r3
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afd0:	0b9b      	lsrs	r3, r3, #14
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afe2:	0b5b      	lsrs	r3, r3, #13
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	f003 0301 	and.w	r3, r3, #1
 800afea:	b2da      	uxtb	r2, r3
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aff4:	0b1b      	lsrs	r3, r3, #12
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	f003 0301 	and.w	r3, r3, #1
 800affc:	b2da      	uxtb	r2, r3
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	2200      	movs	r2, #0
 800b006:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d163      	bne.n	800b0d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b014:	009a      	lsls	r2, r3, #2
 800b016:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b01a:	4013      	ands	r3, r2
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b020:	0f92      	lsrs	r2, r2, #30
 800b022:	431a      	orrs	r2, r3
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02c:	0edb      	lsrs	r3, r3, #27
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	f003 0307 	and.w	r3, r3, #7
 800b034:	b2da      	uxtb	r2, r3
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b03e:	0e1b      	lsrs	r3, r3, #24
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	b2da      	uxtb	r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b050:	0d5b      	lsrs	r3, r3, #21
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b062:	0c9b      	lsrs	r3, r3, #18
 800b064:	b2db      	uxtb	r3, r3
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b074:	0bdb      	lsrs	r3, r3, #15
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 0307 	and.w	r3, r3, #7
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	691b      	ldr	r3, [r3, #16]
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	7e1b      	ldrb	r3, [r3, #24]
 800b090:	b2db      	uxtb	r3, r3
 800b092:	f003 0307 	and.w	r3, r3, #7
 800b096:	3302      	adds	r3, #2
 800b098:	2201      	movs	r2, #1
 800b09a:	fa02 f303 	lsl.w	r3, r2, r3
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b0a2:	fb02 f203 	mul.w	r2, r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	7a1b      	ldrb	r3, [r3, #8]
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	409a      	lsls	r2, r3
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b0c4:	0a52      	lsrs	r2, r2, #9
 800b0c6:	fb02 f203 	mul.w	r2, r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b0d6:	e031      	b.n	800b13c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d11d      	bne.n	800b11c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0e4:	041b      	lsls	r3, r3, #16
 800b0e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0ee:	0c1b      	lsrs	r3, r3, #16
 800b0f0:	431a      	orrs	r2, r3
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	029a      	lsls	r2, r3, #10
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b110:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	661a      	str	r2, [r3, #96]	; 0x60
 800b11a:	e00f      	b.n	800b13c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a58      	ldr	r2, [pc, #352]	; (800b284 <HAL_SD_GetCardCSD+0x344>)
 800b122:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e09d      	b.n	800b278 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b140:	0b9b      	lsrs	r3, r3, #14
 800b142:	b2db      	uxtb	r3, r3
 800b144:	f003 0301 	and.w	r3, r3, #1
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b152:	09db      	lsrs	r3, r3, #7
 800b154:	b2db      	uxtb	r3, r3
 800b156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b174:	0fdb      	lsrs	r3, r3, #31
 800b176:	b2da      	uxtb	r2, r3
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b180:	0f5b      	lsrs	r3, r3, #29
 800b182:	b2db      	uxtb	r3, r3
 800b184:	f003 0303 	and.w	r3, r3, #3
 800b188:	b2da      	uxtb	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b192:	0e9b      	lsrs	r3, r3, #26
 800b194:	b2db      	uxtb	r3, r3
 800b196:	f003 0307 	and.w	r3, r3, #7
 800b19a:	b2da      	uxtb	r2, r3
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a4:	0d9b      	lsrs	r3, r3, #22
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	f003 030f 	and.w	r3, r3, #15
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1b6:	0d5b      	lsrs	r3, r3, #21
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	f003 0301 	and.w	r3, r3, #1
 800b1be:	b2da      	uxtb	r2, r3
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d2:	0c1b      	lsrs	r3, r3, #16
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	f003 0301 	and.w	r3, r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e6:	0bdb      	lsrs	r3, r3, #15
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	b2da      	uxtb	r2, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1fa:	0b9b      	lsrs	r3, r3, #14
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	b2da      	uxtb	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20e:	0b5b      	lsrs	r3, r3, #13
 800b210:	b2db      	uxtb	r3, r3
 800b212:	f003 0301 	and.w	r3, r3, #1
 800b216:	b2da      	uxtb	r2, r3
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b222:	0b1b      	lsrs	r3, r3, #12
 800b224:	b2db      	uxtb	r3, r3
 800b226:	f003 0301 	and.w	r3, r3, #1
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b236:	0a9b      	lsrs	r3, r3, #10
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	f003 0303 	and.w	r3, r3, #3
 800b23e:	b2da      	uxtb	r2, r3
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24a:	0a1b      	lsrs	r3, r3, #8
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	f003 0303 	and.w	r3, r3, #3
 800b252:	b2da      	uxtb	r2, r3
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25e:	085b      	lsrs	r3, r3, #1
 800b260:	b2db      	uxtb	r3, r3
 800b262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b266:	b2da      	uxtb	r2, r3
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2201      	movs	r2, #1
 800b272:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	004005ff 	.word	0x004005ff

0800b288 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
}
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b2e0:	b5b0      	push	{r4, r5, r7, lr}
 800b2e2:	b08e      	sub	sp, #56	; 0x38
 800b2e4:	af04      	add	r7, sp, #16
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2203      	movs	r2, #3
 800b2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d02e      	beq.n	800b358 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b300:	d106      	bne.n	800b310 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	639a      	str	r2, [r3, #56]	; 0x38
 800b30e:	e029      	b.n	800b364 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b316:	d10a      	bne.n	800b32e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fb0f 	bl	800b93c <SD_WideBus_Enable>
 800b31e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	639a      	str	r2, [r3, #56]	; 0x38
 800b32c:	e01a      	b.n	800b364 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d10a      	bne.n	800b34a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fb4c 	bl	800b9d2 <SD_WideBus_Disable>
 800b33a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b342:	431a      	orrs	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	639a      	str	r2, [r3, #56]	; 0x38
 800b348:	e00c      	b.n	800b364 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	639a      	str	r2, [r3, #56]	; 0x38
 800b356:	e005      	b.n	800b364 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d009      	beq.n	800b380 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a18      	ldr	r2, [pc, #96]	; (800b3d4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b372:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e024      	b.n	800b3ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681d      	ldr	r5, [r3, #0]
 800b3a6:	466c      	mov	r4, sp
 800b3a8:	f107 0318 	add.w	r3, r7, #24
 800b3ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b3b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b3b4:	f107 030c 	add.w	r3, r7, #12
 800b3b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	f002 fcb2 	bl	800dd24 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3728      	adds	r7, #40	; 0x28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	004005ff 	.word	0x004005ff

0800b3d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b086      	sub	sp, #24
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b3e4:	f107 030c 	add.w	r3, r7, #12
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa7e 	bl	800b8ec <SD_SendStatus>
 800b3f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d005      	beq.n	800b404 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	0a5b      	lsrs	r3, r3, #9
 800b408:	f003 030f 	and.w	r3, r3, #15
 800b40c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b40e:	693b      	ldr	r3, [r7, #16]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b424:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b434:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b436:	bf00      	nop
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b442:	b580      	push	{r7, lr}
 800b444:	b084      	sub	sp, #16
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	2b82      	cmp	r3, #130	; 0x82
 800b456:	d111      	bne.n	800b47c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f002 fde7 	bl	800e030 <SDMMC_CmdStopTransfer>
 800b462:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d008      	beq.n	800b47c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	431a      	orrs	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fd58 	bl	800af2c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f022 0208 	bic.w	r2, r2, #8
 800b48a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f240 523a 	movw	r2, #1338	; 0x53a
 800b494:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f003 fa3f 	bl	800e928 <HAL_SD_RxCpltCallback>
#endif
}
 800b4aa:	bf00      	nop
 800b4ac:	3710      	adds	r7, #16
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
	...

0800b4b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7fd f830 	bl	8008528 <HAL_DMA_GetError>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d03e      	beq.n	800b54c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b01      	cmp	r3, #1
 800b4e2:	d002      	beq.n	800b4ea <SD_DMAError+0x36>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d12d      	bne.n	800b546 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a19      	ldr	r2, [pc, #100]	; (800b554 <SD_DMAError+0xa0>)
 800b4f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b500:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b506:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b50e:	6978      	ldr	r0, [r7, #20]
 800b510:	f7ff ff62 	bl	800b3d8 <HAL_SD_GetCardState>
 800b514:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	2b06      	cmp	r3, #6
 800b51a:	d002      	beq.n	800b522 <SD_DMAError+0x6e>
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	2b05      	cmp	r3, #5
 800b520:	d10a      	bne.n	800b538 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4618      	mov	r0, r3
 800b528:	f002 fd82 	bl	800e030 <SDMMC_CmdStopTransfer>
 800b52c:	4602      	mov	r2, r0
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b532:	431a      	orrs	r2, r3
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	2201      	movs	r2, #1
 800b53c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	2200      	movs	r2, #0
 800b544:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b546:	6978      	ldr	r0, [r7, #20]
 800b548:	f7ff fcf0 	bl	800af2c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b54c:	bf00      	nop
 800b54e:	3718      	adds	r7, #24
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}
 800b554:	004005ff 	.word	0x004005ff

0800b558 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f7ff ff31 	bl	800b3d8 <HAL_SD_GetCardState>
 800b576:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	2201      	movs	r2, #1
 800b57c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b06      	cmp	r3, #6
 800b58a:	d002      	beq.n	800b592 <SD_DMATxAbort+0x3a>
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2b05      	cmp	r3, #5
 800b590:	d10a      	bne.n	800b5a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f002 fd4a 	bl	800e030 <SDMMC_CmdStopTransfer>
 800b59c:	4602      	mov	r2, r0
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a2:	431a      	orrs	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d103      	bne.n	800b5b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b5b0:	68f8      	ldr	r0, [r7, #12]
 800b5b2:	f003 f9a5 	bl	800e900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b5b6:	e002      	b.n	800b5be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fcb7 	bl	800af2c <HAL_SD_ErrorCallback>
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f7ff fefa 	bl	800b3d8 <HAL_SD_GetCardState>
 800b5e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	2b06      	cmp	r3, #6
 800b5f8:	d002      	beq.n	800b600 <SD_DMARxAbort+0x3a>
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	2b05      	cmp	r3, #5
 800b5fe:	d10a      	bne.n	800b616 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4618      	mov	r0, r3
 800b606:	f002 fd13 	bl	800e030 <SDMMC_CmdStopTransfer>
 800b60a:	4602      	mov	r2, r0
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	431a      	orrs	r2, r3
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d103      	bne.n	800b626 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f003 f96e 	bl	800e900 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b624:	e002      	b.n	800b62c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff fc80 	bl	800af2c <HAL_SD_ErrorCallback>
}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b634:	b5b0      	push	{r4, r5, r7, lr}
 800b636:	b094      	sub	sp, #80	; 0x50
 800b638:	af04      	add	r7, sp, #16
 800b63a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b63c:	2301      	movs	r3, #1
 800b63e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	4618      	mov	r0, r3
 800b646:	f002 fbc5 	bl	800ddd4 <SDIO_GetPowerState>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b650:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b654:	e0b7      	b.n	800b7c6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65a:	2b03      	cmp	r3, #3
 800b65c:	d02f      	beq.n	800b6be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4618      	mov	r0, r3
 800b664:	f002 fdee 	bl	800e244 <SDMMC_CmdSendCID>
 800b668:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <SD_InitCard+0x40>
    {
      return errorstate;
 800b670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b672:	e0a8      	b.n	800b7c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2100      	movs	r1, #0
 800b67a:	4618      	mov	r0, r3
 800b67c:	f002 fbef 	bl	800de5e <SDIO_GetResponse>
 800b680:	4602      	mov	r2, r0
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	2104      	movs	r1, #4
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 fbe6 	bl	800de5e <SDIO_GetResponse>
 800b692:	4602      	mov	r2, r0
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2108      	movs	r1, #8
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f002 fbdd 	bl	800de5e <SDIO_GetResponse>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	210c      	movs	r1, #12
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f002 fbd4 	bl	800de5e <SDIO_GetResponse>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6c2:	2b03      	cmp	r3, #3
 800b6c4:	d00d      	beq.n	800b6e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f107 020e 	add.w	r2, r7, #14
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f002 fdf4 	bl	800e2be <SDMMC_CmdSetRelAdd>
 800b6d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e0:	e071      	b.n	800b7c6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d036      	beq.n	800b758 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b6ea:	89fb      	ldrh	r3, [r7, #14]
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6fa:	041b      	lsls	r3, r3, #16
 800b6fc:	4619      	mov	r1, r3
 800b6fe:	4610      	mov	r0, r2
 800b700:	f002 fdbe 	bl	800e280 <SDMMC_CmdSendCSD>
 800b704:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d001      	beq.n	800b710 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b70c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70e:	e05a      	b.n	800b7c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f002 fba1 	bl	800de5e <SDIO_GetResponse>
 800b71c:	4602      	mov	r2, r0
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	2104      	movs	r1, #4
 800b728:	4618      	mov	r0, r3
 800b72a:	f002 fb98 	bl	800de5e <SDIO_GetResponse>
 800b72e:	4602      	mov	r2, r0
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2108      	movs	r1, #8
 800b73a:	4618      	mov	r0, r3
 800b73c:	f002 fb8f 	bl	800de5e <SDIO_GetResponse>
 800b740:	4602      	mov	r2, r0
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	210c      	movs	r1, #12
 800b74c:	4618      	mov	r0, r3
 800b74e:	f002 fb86 	bl	800de5e <SDIO_GetResponse>
 800b752:	4602      	mov	r2, r0
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	2104      	movs	r1, #4
 800b75e:	4618      	mov	r0, r3
 800b760:	f002 fb7d 	bl	800de5e <SDIO_GetResponse>
 800b764:	4603      	mov	r3, r0
 800b766:	0d1a      	lsrs	r2, r3, #20
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b76c:	f107 0310 	add.w	r3, r7, #16
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fbe4 	bl	800af40 <HAL_SD_GetCardCSD>
 800b778:	4603      	mov	r3, r0
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b77e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b782:	e020      	b.n	800b7c6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b78c:	041b      	lsls	r3, r3, #16
 800b78e:	f04f 0400 	mov.w	r4, #0
 800b792:	461a      	mov	r2, r3
 800b794:	4623      	mov	r3, r4
 800b796:	4608      	mov	r0, r1
 800b798:	f002 fc6c 	bl	800e074 <SDMMC_CmdSelDesel>
 800b79c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <SD_InitCard+0x174>
  {
    return errorstate;
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	e00e      	b.n	800b7c6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681d      	ldr	r5, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	466c      	mov	r4, sp
 800b7b0:	f103 0210 	add.w	r2, r3, #16
 800b7b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7be:	4628      	mov	r0, r5
 800b7c0:	f002 fab0 	bl	800dd24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3740      	adds	r7, #64	; 0x40
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b7d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f002 fc66 	bl	800e0ba <SDMMC_CmdGoIdleState>
 800b7ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	e072      	b.n	800b8e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f002 fc79 	bl	800e0f6 <SDMMC_CmdOperCond>
 800b804:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d00d      	beq.n	800b828 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2200      	movs	r2, #0
 800b810:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4618      	mov	r0, r3
 800b818:	f002 fc4f 	bl	800e0ba <SDMMC_CmdGoIdleState>
 800b81c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	e05b      	b.n	800b8e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b832:	2b01      	cmp	r3, #1
 800b834:	d137      	bne.n	800b8a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2100      	movs	r1, #0
 800b83c:	4618      	mov	r0, r3
 800b83e:	f002 fc79 	bl	800e134 <SDMMC_CmdAppCommand>
 800b842:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d02d      	beq.n	800b8a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b84a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b84e:	e047      	b.n	800b8e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2100      	movs	r1, #0
 800b856:	4618      	mov	r0, r3
 800b858:	f002 fc6c 	bl	800e134 <SDMMC_CmdAppCommand>
 800b85c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d001      	beq.n	800b868 <SD_PowerON+0x98>
    {
      return errorstate;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	e03b      	b.n	800b8e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	491e      	ldr	r1, [pc, #120]	; (800b8e8 <SD_PowerON+0x118>)
 800b86e:	4618      	mov	r0, r3
 800b870:	f002 fc82 	bl	800e178 <SDMMC_CmdAppOperCommand>
 800b874:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b87c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b880:	e02e      	b.n	800b8e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2100      	movs	r1, #0
 800b888:	4618      	mov	r0, r3
 800b88a:	f002 fae8 	bl	800de5e <SDIO_GetResponse>
 800b88e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	0fdb      	lsrs	r3, r3, #31
 800b894:	2b01      	cmp	r3, #1
 800b896:	d101      	bne.n	800b89c <SD_PowerON+0xcc>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <SD_PowerON+0xce>
 800b89c:	2300      	movs	r3, #0
 800b89e:	613b      	str	r3, [r7, #16]

    count++;
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	3301      	adds	r3, #1
 800b8a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d802      	bhi.n	800b8b6 <SD_PowerON+0xe6>
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d0cc      	beq.n	800b850 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d902      	bls.n	800b8c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b8c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b8c4:	e00c      	b.n	800b8e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d003      	beq.n	800b8d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	645a      	str	r2, [r3, #68]	; 0x44
 800b8d6:	e002      	b.n	800b8de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	c1100000 	.word	0xc1100000

0800b8ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d102      	bne.n	800b902 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b8fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b900:	e018      	b.n	800b934 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b90a:	041b      	lsls	r3, r3, #16
 800b90c:	4619      	mov	r1, r3
 800b90e:	4610      	mov	r0, r2
 800b910:	f002 fcf6 	bl	800e300 <SDMMC_CmdSendStatus>
 800b914:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d001      	beq.n	800b920 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	e009      	b.n	800b934 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2100      	movs	r1, #0
 800b926:	4618      	mov	r0, r3
 800b928:	f002 fa99 	bl	800de5e <SDIO_GetResponse>
 800b92c:	4602      	mov	r2, r0
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3710      	adds	r7, #16
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b944:	2300      	movs	r3, #0
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2100      	movs	r1, #0
 800b952:	4618      	mov	r0, r3
 800b954:	f002 fa83 	bl	800de5e <SDIO_GetResponse>
 800b958:	4603      	mov	r3, r0
 800b95a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b95e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b962:	d102      	bne.n	800b96a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b968:	e02f      	b.n	800b9ca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b96a:	f107 030c 	add.w	r3, r7, #12
 800b96e:	4619      	mov	r1, r3
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f879 	bl	800ba68 <SD_FindSCR>
 800b976:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	e023      	b.n	800b9ca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d01c      	beq.n	800b9c6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b994:	041b      	lsls	r3, r3, #16
 800b996:	4619      	mov	r1, r3
 800b998:	4610      	mov	r0, r2
 800b99a:	f002 fbcb 	bl	800e134 <SDMMC_CmdAppCommand>
 800b99e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d001      	beq.n	800b9aa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	e00f      	b.n	800b9ca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f002 fc04 	bl	800e1be <SDMMC_CmdBusWidth>
 800b9b6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b9be:	697b      	ldr	r3, [r7, #20]
 800b9c0:	e003      	b.n	800b9ca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e001      	b.n	800b9ca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b9c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b086      	sub	sp, #24
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	2300      	movs	r3, #0
 800b9e0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f002 fa38 	bl	800de5e <SDIO_GetResponse>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9f8:	d102      	bne.n	800ba00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9fe:	e02f      	b.n	800ba60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba00:	f107 030c 	add.w	r3, r7, #12
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f82e 	bl	800ba68 <SD_FindSCR>
 800ba0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	e023      	b.n	800ba60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01c      	beq.n	800ba5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2a:	041b      	lsls	r3, r3, #16
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f002 fb80 	bl	800e134 <SDMMC_CmdAppCommand>
 800ba34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d001      	beq.n	800ba40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	e00f      	b.n	800ba60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f002 fbb9 	bl	800e1be <SDMMC_CmdBusWidth>
 800ba4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d001      	beq.n	800ba58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	e003      	b.n	800ba60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	e001      	b.n	800ba60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b08f      	sub	sp, #60	; 0x3c
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ba72:	f7fb fd63 	bl	800753c <HAL_GetTick>
 800ba76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	60bb      	str	r3, [r7, #8]
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2108      	movs	r1, #8
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f002 fa24 	bl	800dedc <SDMMC_CmdBlockLength>
 800ba94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d001      	beq.n	800baa0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ba9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba9e:	e0a9      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	4619      	mov	r1, r3
 800baac:	4610      	mov	r0, r2
 800baae:	f002 fb41 	bl	800e134 <SDMMC_CmdAppCommand>
 800bab2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d001      	beq.n	800babe <SD_FindSCR+0x56>
  {
    return errorstate;
 800baba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800babc:	e09a      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800babe:	f04f 33ff 	mov.w	r3, #4294967295
 800bac2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bac4:	2308      	movs	r3, #8
 800bac6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bac8:	2330      	movs	r3, #48	; 0x30
 800baca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bacc:	2302      	movs	r3, #2
 800bace:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bad4:	2301      	movs	r3, #1
 800bad6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f107 0210 	add.w	r2, r7, #16
 800bae0:	4611      	mov	r1, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f002 f9ce 	bl	800de84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4618      	mov	r0, r3
 800baee:	f002 fb88 	bl	800e202 <SDMMC_CmdSendSCR>
 800baf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800baf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d022      	beq.n	800bb40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafc:	e07a      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00e      	beq.n	800bb2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6819      	ldr	r1, [r3, #0]
 800bb10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	f107 0208 	add.w	r2, r7, #8
 800bb18:	18d4      	adds	r4, r2, r3
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	f002 f92d 	bl	800dd7a <SDIO_ReadFIFO>
 800bb20:	4603      	mov	r3, r0
 800bb22:	6023      	str	r3, [r4, #0]
      index++;
 800bb24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb26:	3301      	adds	r3, #1
 800bb28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bb2a:	f7fb fd07 	bl	800753c <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb38:	d102      	bne.n	800bb40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bb3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bb3e:	e059      	b.n	800bbf4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bb46:	f240 432a 	movw	r3, #1066	; 0x42a
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d0d6      	beq.n	800bafe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb56:	f003 0308 	and.w	r3, r3, #8
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d005      	beq.n	800bb6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2208      	movs	r2, #8
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bb66:	2308      	movs	r3, #8
 800bb68:	e044      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb70:	f003 0302 	and.w	r3, r3, #2
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2202      	movs	r2, #2
 800bb7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bb80:	2302      	movs	r3, #2
 800bb82:	e037      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb8a:	f003 0320 	and.w	r3, r3, #32
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d005      	beq.n	800bb9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	2220      	movs	r2, #32
 800bb98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bb9a:	2320      	movs	r3, #32
 800bb9c:	e02a      	b.n	800bbf4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f240 523a 	movw	r2, #1338	; 0x53a
 800bba6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	061a      	lsls	r2, r3, #24
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	021b      	lsls	r3, r3, #8
 800bbb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	0a1b      	lsrs	r3, r3, #8
 800bbba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	0e1b      	lsrs	r3, r3, #24
 800bbc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc8:	601a      	str	r2, [r3, #0]
    scr++;
 800bbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbcc:	3304      	adds	r3, #4
 800bbce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	061a      	lsls	r2, r3, #24
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbdc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	0a1b      	lsrs	r3, r3, #8
 800bbe2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbe6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	0e1b      	lsrs	r3, r3, #24
 800bbec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	373c      	adds	r7, #60	; 0x3c
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd90      	pop	{r4, r7, pc}

0800bbfc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d03f      	beq.n	800bc96 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]
 800bc1a:	e033      	b.n	800bc84 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f002 f8aa 	bl	800dd7a <SDIO_ReadFIFO>
 800bc26:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	b2da      	uxtb	r2, r3
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	3301      	adds	r3, #1
 800bc34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	0a1b      	lsrs	r3, r3, #8
 800bc40:	b2da      	uxtb	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	3301      	adds	r3, #1
 800bc4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	0c1b      	lsrs	r3, r3, #16
 800bc56:	b2da      	uxtb	r2, r3
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc62:	693b      	ldr	r3, [r7, #16]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	0e1b      	lsrs	r3, r3, #24
 800bc6c:	b2da      	uxtb	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	3301      	adds	r3, #1
 800bc76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	3b01      	subs	r3, #1
 800bc7c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	3301      	adds	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2b07      	cmp	r3, #7
 800bc88:	d9c8      	bls.n	800bc1c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	68fa      	ldr	r2, [r7, #12]
 800bc8e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	693a      	ldr	r2, [r7, #16]
 800bc94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bc96:	bf00      	nop
 800bc98:	3718      	adds	r7, #24
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b086      	sub	sp, #24
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcb0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d043      	beq.n	800bd40 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	e037      	b.n	800bd2e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3b01      	subs	r3, #1
 800bcce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	021a      	lsls	r2, r3, #8
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	3301      	adds	r3, #1
 800bce0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	3b01      	subs	r3, #1
 800bce6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	041a      	lsls	r2, r3, #16
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	061a      	lsls	r2, r3, #24
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	3b01      	subs	r3, #1
 800bd16:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f107 0208 	add.w	r2, r7, #8
 800bd20:	4611      	mov	r1, r2
 800bd22:	4618      	mov	r0, r3
 800bd24:	f002 f836 	bl	800dd94 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	3301      	adds	r3, #1
 800bd2c:	617b      	str	r3, [r7, #20]
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b07      	cmp	r3, #7
 800bd32:	d9c4      	bls.n	800bcbe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68fa      	ldr	r2, [r7, #12]
 800bd38:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	693a      	ldr	r2, [r7, #16]
 800bd3e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bd40:	bf00      	nop
 800bd42:	3718      	adds	r7, #24
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d101      	bne.n	800bd5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e056      	b.n	800be08 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d106      	bne.n	800bd7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f7f9 fc8b 	bl	8005690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2202      	movs	r2, #2
 800bd7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	68db      	ldr	r3, [r3, #12]
 800bda0:	431a      	orrs	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	431a      	orrs	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	695b      	ldr	r3, [r3, #20]
 800bdac:	431a      	orrs	r2, r3
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdb6:	431a      	orrs	r2, r3
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	69db      	ldr	r3, [r3, #28]
 800bdbc:	431a      	orrs	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	ea42 0103 	orr.w	r1, r2, r3
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	430a      	orrs	r2, r1
 800bdd0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	0c1b      	lsrs	r3, r3, #16
 800bdd8:	f003 0104 	and.w	r1, r3, #4
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	69da      	ldr	r2, [r3, #28]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bdf6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2201      	movs	r2, #1
 800be02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af00      	add	r7, sp, #0
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	60b9      	str	r1, [r7, #8]
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	4613      	mov	r3, r2
 800be1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d101      	bne.n	800be32 <HAL_SPI_Transmit+0x22>
 800be2e:	2302      	movs	r3, #2
 800be30:	e11e      	b.n	800c070 <HAL_SPI_Transmit+0x260>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2201      	movs	r2, #1
 800be36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800be3a:	f7fb fb7f 	bl	800753c <HAL_GetTick>
 800be3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800be40:	88fb      	ldrh	r3, [r7, #6]
 800be42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d002      	beq.n	800be56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800be50:	2302      	movs	r3, #2
 800be52:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be54:	e103      	b.n	800c05e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <HAL_SPI_Transmit+0x52>
 800be5c:	88fb      	ldrh	r3, [r7, #6]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	77fb      	strb	r3, [r7, #31]
    goto error;
 800be66:	e0fa      	b.n	800c05e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2203      	movs	r2, #3
 800be6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2200      	movs	r2, #0
 800be74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	88fa      	ldrh	r2, [r7, #6]
 800be80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	88fa      	ldrh	r2, [r7, #6]
 800be86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2200      	movs	r2, #0
 800be92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	2200      	movs	r2, #0
 800be98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	2200      	movs	r2, #0
 800be9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800beae:	d107      	bne.n	800bec0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bebe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800beca:	2b40      	cmp	r3, #64	; 0x40
 800becc:	d007      	beq.n	800bede <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bedc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee6:	d14b      	bne.n	800bf80 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d002      	beq.n	800bef6 <HAL_SPI_Transmit+0xe6>
 800bef0:	8afb      	ldrh	r3, [r7, #22]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d13e      	bne.n	800bf74 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800befa:	881a      	ldrh	r2, [r3, #0]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf06:	1c9a      	adds	r2, r3, #2
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	3b01      	subs	r3, #1
 800bf14:	b29a      	uxth	r2, r3
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bf1a:	e02b      	b.n	800bf74 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	689b      	ldr	r3, [r3, #8]
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	2b02      	cmp	r3, #2
 800bf28:	d112      	bne.n	800bf50 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf2e:	881a      	ldrh	r2, [r3, #0]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf3a:	1c9a      	adds	r2, r3, #2
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf44:	b29b      	uxth	r3, r3
 800bf46:	3b01      	subs	r3, #1
 800bf48:	b29a      	uxth	r2, r3
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	86da      	strh	r2, [r3, #54]	; 0x36
 800bf4e:	e011      	b.n	800bf74 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bf50:	f7fb faf4 	bl	800753c <HAL_GetTick>
 800bf54:	4602      	mov	r2, r0
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	683a      	ldr	r2, [r7, #0]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d803      	bhi.n	800bf68 <HAL_SPI_Transmit+0x158>
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf66:	d102      	bne.n	800bf6e <HAL_SPI_Transmit+0x15e>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d102      	bne.n	800bf74 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bf72:	e074      	b.n	800c05e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1ce      	bne.n	800bf1c <HAL_SPI_Transmit+0x10c>
 800bf7e:	e04c      	b.n	800c01a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <HAL_SPI_Transmit+0x17e>
 800bf88:	8afb      	ldrh	r3, [r7, #22]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d140      	bne.n	800c010 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	330c      	adds	r3, #12
 800bf98:	7812      	ldrb	r2, [r2, #0]
 800bf9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfa0:	1c5a      	adds	r2, r3, #1
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	3b01      	subs	r3, #1
 800bfae:	b29a      	uxth	r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bfb4:	e02c      	b.n	800c010 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d113      	bne.n	800bfec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	330c      	adds	r3, #12
 800bfce:	7812      	ldrb	r2, [r2, #0]
 800bfd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd6:	1c5a      	adds	r2, r3, #1
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3b01      	subs	r3, #1
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	86da      	strh	r2, [r3, #54]	; 0x36
 800bfea:	e011      	b.n	800c010 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfec:	f7fb faa6 	bl	800753c <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d803      	bhi.n	800c004 <HAL_SPI_Transmit+0x1f4>
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c002:	d102      	bne.n	800c00a <HAL_SPI_Transmit+0x1fa>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d102      	bne.n	800c010 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c00a:	2303      	movs	r3, #3
 800c00c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c00e:	e026      	b.n	800c05e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c014:	b29b      	uxth	r3, r3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1cd      	bne.n	800bfb6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c01a:	69ba      	ldr	r2, [r7, #24]
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f000 fba4 	bl	800c76c <SPI_EndRxTxTransaction>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d002      	beq.n	800c030 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2220      	movs	r2, #32
 800c02e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d10a      	bne.n	800c04e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	613b      	str	r3, [r7, #16]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	613b      	str	r3, [r7, #16]
 800c04c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c056:	2301      	movs	r3, #1
 800c058:	77fb      	strb	r3, [r7, #31]
 800c05a:	e000      	b.n	800c05e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c05c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	2200      	movs	r2, #0
 800c06a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c06e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3720      	adds	r7, #32
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b088      	sub	sp, #32
 800c07c:	af02      	add	r7, sp, #8
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	603b      	str	r3, [r7, #0]
 800c084:	4613      	mov	r3, r2
 800c086:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c094:	d112      	bne.n	800c0bc <HAL_SPI_Receive+0x44>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10e      	bne.n	800c0bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	2204      	movs	r2, #4
 800c0a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c0a6:	88fa      	ldrh	r2, [r7, #6]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	68ba      	ldr	r2, [r7, #8]
 800c0b0:	68b9      	ldr	r1, [r7, #8]
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f000 f8e9 	bl	800c28a <HAL_SPI_TransmitReceive>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	e0e2      	b.n	800c282 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d101      	bne.n	800c0ca <HAL_SPI_Receive+0x52>
 800c0c6:	2302      	movs	r3, #2
 800c0c8:	e0db      	b.n	800c282 <HAL_SPI_Receive+0x20a>
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c0d2:	f7fb fa33 	bl	800753c <HAL_GetTick>
 800c0d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d002      	beq.n	800c0ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0e8:	e0c2      	b.n	800c270 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d002      	beq.n	800c0f6 <HAL_SPI_Receive+0x7e>
 800c0f0:	88fb      	ldrh	r3, [r7, #6]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c0fa:	e0b9      	b.n	800c270 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2204      	movs	r2, #4
 800c100:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	2200      	movs	r2, #0
 800c108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	88fa      	ldrh	r2, [r7, #6]
 800c114:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	88fa      	ldrh	r2, [r7, #6]
 800c11a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	2200      	movs	r2, #0
 800c132:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c142:	d107      	bne.n	800c154 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c152:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15e:	2b40      	cmp	r3, #64	; 0x40
 800c160:	d007      	beq.n	800c172 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681a      	ldr	r2, [r3, #0]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c170:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d162      	bne.n	800c240 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c17a:	e02e      	b.n	800c1da <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	689b      	ldr	r3, [r3, #8]
 800c182:	f003 0301 	and.w	r3, r3, #1
 800c186:	2b01      	cmp	r3, #1
 800c188:	d115      	bne.n	800c1b6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f103 020c 	add.w	r2, r3, #12
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c196:	7812      	ldrb	r2, [r2, #0]
 800c198:	b2d2      	uxtb	r2, r2
 800c19a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	3b01      	subs	r3, #1
 800c1ae:	b29a      	uxth	r2, r3
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c1b4:	e011      	b.n	800c1da <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c1b6:	f7fb f9c1 	bl	800753c <HAL_GetTick>
 800c1ba:	4602      	mov	r2, r0
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	683a      	ldr	r2, [r7, #0]
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d803      	bhi.n	800c1ce <HAL_SPI_Receive+0x156>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1cc:	d102      	bne.n	800c1d4 <HAL_SPI_Receive+0x15c>
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d102      	bne.n	800c1da <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c1d8:	e04a      	b.n	800c270 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1cb      	bne.n	800c17c <HAL_SPI_Receive+0x104>
 800c1e4:	e031      	b.n	800c24a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d113      	bne.n	800c21c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1fe:	b292      	uxth	r2, r2
 800c200:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c206:	1c9a      	adds	r2, r3, #2
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c210:	b29b      	uxth	r3, r3
 800c212:	3b01      	subs	r3, #1
 800c214:	b29a      	uxth	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c21a:	e011      	b.n	800c240 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c21c:	f7fb f98e 	bl	800753c <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	683a      	ldr	r2, [r7, #0]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d803      	bhi.n	800c234 <HAL_SPI_Receive+0x1bc>
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d102      	bne.n	800c23a <HAL_SPI_Receive+0x1c2>
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d102      	bne.n	800c240 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c23e:	e017      	b.n	800c270 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c244:	b29b      	uxth	r3, r3
 800c246:	2b00      	cmp	r3, #0
 800c248:	d1cd      	bne.n	800c1e6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	f000 fa27 	bl	800c6a2 <SPI_EndRxTransaction>
 800c254:	4603      	mov	r3, r0
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c264:	2b00      	cmp	r3, #0
 800c266:	d002      	beq.n	800c26e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	75fb      	strb	r3, [r7, #23]
 800c26c:	e000      	b.n	800c270 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c26e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c280:	7dfb      	ldrb	r3, [r7, #23]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3718      	adds	r7, #24
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b08c      	sub	sp, #48	; 0x30
 800c28e:	af00      	add	r7, sp, #0
 800c290:	60f8      	str	r0, [r7, #12]
 800c292:	60b9      	str	r1, [r7, #8]
 800c294:	607a      	str	r2, [r7, #4]
 800c296:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c298:	2301      	movs	r3, #1
 800c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c29c:	2300      	movs	r3, #0
 800c29e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2a8:	2b01      	cmp	r3, #1
 800c2aa:	d101      	bne.n	800c2b0 <HAL_SPI_TransmitReceive+0x26>
 800c2ac:	2302      	movs	r3, #2
 800c2ae:	e18a      	b.n	800c5c6 <HAL_SPI_TransmitReceive+0x33c>
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c2b8:	f7fb f940 	bl	800753c <HAL_GetTick>
 800c2bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c2ce:	887b      	ldrh	r3, [r7, #2]
 800c2d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c2d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d00f      	beq.n	800c2fa <HAL_SPI_TransmitReceive+0x70>
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2e0:	d107      	bne.n	800c2f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d103      	bne.n	800c2f2 <HAL_SPI_TransmitReceive+0x68>
 800c2ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c2ee:	2b04      	cmp	r3, #4
 800c2f0:	d003      	beq.n	800c2fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c2f8:	e15b      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d005      	beq.n	800c30c <HAL_SPI_TransmitReceive+0x82>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <HAL_SPI_TransmitReceive+0x82>
 800c306:	887b      	ldrh	r3, [r7, #2]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d103      	bne.n	800c314 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c312:	e14e      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b04      	cmp	r3, #4
 800c31e:	d003      	beq.n	800c328 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2205      	movs	r2, #5
 800c324:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	887a      	ldrh	r2, [r7, #2]
 800c338:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	887a      	ldrh	r2, [r7, #2]
 800c33e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	68ba      	ldr	r2, [r7, #8]
 800c344:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	887a      	ldrh	r2, [r7, #2]
 800c34a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	887a      	ldrh	r2, [r7, #2]
 800c350:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	2200      	movs	r2, #0
 800c356:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2200      	movs	r2, #0
 800c35c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c368:	2b40      	cmp	r3, #64	; 0x40
 800c36a:	d007      	beq.n	800c37c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c37a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c384:	d178      	bne.n	800c478 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <HAL_SPI_TransmitReceive+0x10a>
 800c38e:	8b7b      	ldrh	r3, [r7, #26]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d166      	bne.n	800c462 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c398:	881a      	ldrh	r2, [r3, #0]
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3a4:	1c9a      	adds	r2, r3, #2
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c3b8:	e053      	b.n	800c462 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	f003 0302 	and.w	r3, r3, #2
 800c3c4:	2b02      	cmp	r3, #2
 800c3c6:	d11b      	bne.n	800c400 <HAL_SPI_TransmitReceive+0x176>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3cc:	b29b      	uxth	r3, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d016      	beq.n	800c400 <HAL_SPI_TransmitReceive+0x176>
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d113      	bne.n	800c400 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3dc:	881a      	ldrh	r2, [r3, #0]
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e8:	1c9a      	adds	r2, r3, #2
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f003 0301 	and.w	r3, r3, #1
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d119      	bne.n	800c442 <HAL_SPI_TransmitReceive+0x1b8>
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c412:	b29b      	uxth	r3, r3
 800c414:	2b00      	cmp	r3, #0
 800c416:	d014      	beq.n	800c442 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	68da      	ldr	r2, [r3, #12]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	b292      	uxth	r2, r2
 800c424:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c42a:	1c9a      	adds	r2, r3, #2
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c434:	b29b      	uxth	r3, r3
 800c436:	3b01      	subs	r3, #1
 800c438:	b29a      	uxth	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c43e:	2301      	movs	r3, #1
 800c440:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c442:	f7fb f87b 	bl	800753c <HAL_GetTick>
 800c446:	4602      	mov	r2, r0
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	1ad3      	subs	r3, r2, r3
 800c44c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c44e:	429a      	cmp	r2, r3
 800c450:	d807      	bhi.n	800c462 <HAL_SPI_TransmitReceive+0x1d8>
 800c452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d003      	beq.n	800c462 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c45a:	2303      	movs	r3, #3
 800c45c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c460:	e0a7      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c466:	b29b      	uxth	r3, r3
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1a6      	bne.n	800c3ba <HAL_SPI_TransmitReceive+0x130>
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c470:	b29b      	uxth	r3, r3
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1a1      	bne.n	800c3ba <HAL_SPI_TransmitReceive+0x130>
 800c476:	e07c      	b.n	800c572 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <HAL_SPI_TransmitReceive+0x1fc>
 800c480:	8b7b      	ldrh	r3, [r7, #26]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d16b      	bne.n	800c55e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	330c      	adds	r3, #12
 800c490:	7812      	ldrb	r2, [r2, #0]
 800c492:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c498:	1c5a      	adds	r2, r3, #1
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	3b01      	subs	r3, #1
 800c4a6:	b29a      	uxth	r2, r3
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4ac:	e057      	b.n	800c55e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	f003 0302 	and.w	r3, r3, #2
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d11c      	bne.n	800c4f6 <HAL_SPI_TransmitReceive+0x26c>
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d017      	beq.n	800c4f6 <HAL_SPI_TransmitReceive+0x26c>
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d114      	bne.n	800c4f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	330c      	adds	r3, #12
 800c4d6:	7812      	ldrb	r2, [r2, #0]
 800c4d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	1c5a      	adds	r2, r3, #1
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	689b      	ldr	r3, [r3, #8]
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	2b01      	cmp	r3, #1
 800c502:	d119      	bne.n	800c538 <HAL_SPI_TransmitReceive+0x2ae>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c508:	b29b      	uxth	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d014      	beq.n	800c538 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	b2d2      	uxtb	r2, r2
 800c51a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	3b01      	subs	r3, #1
 800c52e:	b29a      	uxth	r2, r3
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c534:	2301      	movs	r3, #1
 800c536:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c538:	f7fb f800 	bl	800753c <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c544:	429a      	cmp	r2, r3
 800c546:	d803      	bhi.n	800c550 <HAL_SPI_TransmitReceive+0x2c6>
 800c548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c54e:	d102      	bne.n	800c556 <HAL_SPI_TransmitReceive+0x2cc>
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	2b00      	cmp	r3, #0
 800c554:	d103      	bne.n	800c55e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c556:	2303      	movs	r3, #3
 800c558:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c55c:	e029      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c562:	b29b      	uxth	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	d1a2      	bne.n	800c4ae <HAL_SPI_TransmitReceive+0x224>
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c56c:	b29b      	uxth	r3, r3
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d19d      	bne.n	800c4ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f000 f8f8 	bl	800c76c <SPI_EndRxTxTransaction>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d006      	beq.n	800c590 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c582:	2301      	movs	r3, #1
 800c584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2220      	movs	r2, #32
 800c58c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c58e:	e010      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d10b      	bne.n	800c5b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	617b      	str	r3, [r7, #20]
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	e000      	b.n	800c5b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c5b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2201      	movs	r2, #1
 800c5b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c5c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3730      	adds	r7, #48	; 0x30
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b084      	sub	sp, #16
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	60f8      	str	r0, [r7, #12]
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	603b      	str	r3, [r7, #0]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c5de:	e04c      	b.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5e6:	d048      	beq.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c5e8:	f7fa ffa8 	bl	800753c <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	69bb      	ldr	r3, [r7, #24]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	683a      	ldr	r2, [r7, #0]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d902      	bls.n	800c5fe <SPI_WaitFlagStateUntilTimeout+0x30>
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d13d      	bne.n	800c67a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	685a      	ldr	r2, [r3, #4]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c60c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c616:	d111      	bne.n	800c63c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c620:	d004      	beq.n	800c62c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	689b      	ldr	r3, [r3, #8]
 800c626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c62a:	d107      	bne.n	800c63c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c63a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c640:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c644:	d10f      	bne.n	800c666 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2201      	movs	r2, #1
 800c66a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2200      	movs	r2, #0
 800c672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e00f      	b.n	800c69a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	689a      	ldr	r2, [r3, #8]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4013      	ands	r3, r2
 800c684:	68ba      	ldr	r2, [r7, #8]
 800c686:	429a      	cmp	r2, r3
 800c688:	bf0c      	ite	eq
 800c68a:	2301      	moveq	r3, #1
 800c68c:	2300      	movne	r3, #0
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	461a      	mov	r2, r3
 800c692:	79fb      	ldrb	r3, [r7, #7]
 800c694:	429a      	cmp	r2, r3
 800c696:	d1a3      	bne.n	800c5e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}

0800c6a2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b086      	sub	sp, #24
 800c6a6:	af02      	add	r7, sp, #8
 800c6a8:	60f8      	str	r0, [r7, #12]
 800c6aa:	60b9      	str	r1, [r7, #8]
 800c6ac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6b6:	d111      	bne.n	800c6dc <SPI_EndRxTransaction+0x3a>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6c0:	d004      	beq.n	800c6cc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ca:	d107      	bne.n	800c6dc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6e4:	d12a      	bne.n	800c73c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6ee:	d012      	beq.n	800c716 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	9300      	str	r3, [sp, #0]
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2180      	movs	r1, #128	; 0x80
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff ff67 	bl	800c5ce <SPI_WaitFlagStateUntilTimeout>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d02d      	beq.n	800c762 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c70a:	f043 0220 	orr.w	r2, r3, #32
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e026      	b.n	800c764 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	2200      	movs	r2, #0
 800c71e:	2101      	movs	r1, #1
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f7ff ff54 	bl	800c5ce <SPI_WaitFlagStateUntilTimeout>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d01a      	beq.n	800c762 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c730:	f043 0220 	orr.w	r2, r3, #32
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e013      	b.n	800c764 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	9300      	str	r3, [sp, #0]
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2200      	movs	r2, #0
 800c744:	2101      	movs	r1, #1
 800c746:	68f8      	ldr	r0, [r7, #12]
 800c748:	f7ff ff41 	bl	800c5ce <SPI_WaitFlagStateUntilTimeout>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d007      	beq.n	800c762 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c756:	f043 0220 	orr.w	r2, r3, #32
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c75e:	2303      	movs	r3, #3
 800c760:	e000      	b.n	800c764 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c762:	2300      	movs	r3, #0
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b088      	sub	sp, #32
 800c770:	af02      	add	r7, sp, #8
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c778:	4b1b      	ldr	r3, [pc, #108]	; (800c7e8 <SPI_EndRxTxTransaction+0x7c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a1b      	ldr	r2, [pc, #108]	; (800c7ec <SPI_EndRxTxTransaction+0x80>)
 800c77e:	fba2 2303 	umull	r2, r3, r2, r3
 800c782:	0d5b      	lsrs	r3, r3, #21
 800c784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c788:	fb02 f303 	mul.w	r3, r2, r3
 800c78c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c796:	d112      	bne.n	800c7be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	9300      	str	r3, [sp, #0]
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	2180      	movs	r1, #128	; 0x80
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff ff13 	bl	800c5ce <SPI_WaitFlagStateUntilTimeout>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d016      	beq.n	800c7dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7b2:	f043 0220 	orr.w	r2, r3, #32
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	e00f      	b.n	800c7de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00a      	beq.n	800c7da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7d4:	2b80      	cmp	r3, #128	; 0x80
 800c7d6:	d0f2      	beq.n	800c7be <SPI_EndRxTxTransaction+0x52>
 800c7d8:	e000      	b.n	800c7dc <SPI_EndRxTxTransaction+0x70>
        break;
 800c7da:	bf00      	nop
  }

  return HAL_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3718      	adds	r7, #24
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}
 800c7e6:	bf00      	nop
 800c7e8:	20000000 	.word	0x20000000
 800c7ec:	165e9f81 	.word	0x165e9f81

0800c7f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d101      	bne.n	800c802 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c7fe:	2301      	movs	r3, #1
 800c800:	e01d      	b.n	800c83e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d106      	bne.n	800c81c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f7f8 fff6 	bl	8005808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	3304      	adds	r3, #4
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f000 fb56 	bl	800cee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2201      	movs	r2, #1
 800c838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c846:	b480      	push	{r7}
 800c848:	b085      	sub	sp, #20
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f042 0201 	orr.w	r2, r2, #1
 800c85c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	f003 0307 	and.w	r3, r3, #7
 800c868:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b06      	cmp	r3, #6
 800c86e:	d007      	beq.n	800c880 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 0201 	orr.w	r2, r2, #1
 800c87e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b082      	sub	sp, #8
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c89c:	2301      	movs	r3, #1
 800c89e:	e01d      	b.n	800c8dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d106      	bne.n	800c8ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f7f8 ff33 	bl	8005720 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2202      	movs	r2, #2
 800c8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681a      	ldr	r2, [r3, #0]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	4610      	mov	r0, r2
 800c8ce:	f000 fb07 	bl	800cee0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c8da:	2300      	movs	r3, #0
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	6839      	ldr	r1, [r7, #0]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f000 fd42 	bl	800d380 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a15      	ldr	r2, [pc, #84]	; (800c958 <HAL_TIM_PWM_Start+0x74>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d004      	beq.n	800c910 <HAL_TIM_PWM_Start+0x2c>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a14      	ldr	r2, [pc, #80]	; (800c95c <HAL_TIM_PWM_Start+0x78>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d101      	bne.n	800c914 <HAL_TIM_PWM_Start+0x30>
 800c910:	2301      	movs	r3, #1
 800c912:	e000      	b.n	800c916 <HAL_TIM_PWM_Start+0x32>
 800c914:	2300      	movs	r3, #0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d007      	beq.n	800c92a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c928:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	f003 0307 	and.w	r3, r3, #7
 800c934:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	2b06      	cmp	r3, #6
 800c93a:	d007      	beq.n	800c94c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f042 0201 	orr.w	r2, r2, #1
 800c94a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c94c:	2300      	movs	r3, #0
}
 800c94e:	4618      	mov	r0, r3
 800c950:	3710      	adds	r7, #16
 800c952:	46bd      	mov	sp, r7
 800c954:	bd80      	pop	{r7, pc}
 800c956:	bf00      	nop
 800c958:	40010000 	.word	0x40010000
 800c95c:	40010400 	.word	0x40010400

0800c960 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b086      	sub	sp, #24
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c970:	2301      	movs	r3, #1
 800c972:	e083      	b.n	800ca7c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d106      	bne.n	800c98e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f7f8 ffcd 	bl	8005928 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2202      	movs	r2, #2
 800c992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	6812      	ldr	r2, [r2, #0]
 800c9a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	f000 fa93 	bl	800cee0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	689b      	ldr	r3, [r3, #8]
 800c9c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	6a1b      	ldr	r3, [r3, #32]
 800c9d0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9e2:	f023 0303 	bic.w	r3, r3, #3
 800c9e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	689a      	ldr	r2, [r3, #8]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	021b      	lsls	r3, r3, #8
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	693a      	ldr	r2, [r7, #16]
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ca00:	f023 030c 	bic.w	r3, r3, #12
 800ca04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	68da      	ldr	r2, [r3, #12]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	69db      	ldr	r3, [r3, #28]
 800ca1a:	021b      	lsls	r3, r3, #8
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	691b      	ldr	r3, [r3, #16]
 800ca28:	011a      	lsls	r2, r3, #4
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	6a1b      	ldr	r3, [r3, #32]
 800ca2e:	031b      	lsls	r3, r3, #12
 800ca30:	4313      	orrs	r3, r2
 800ca32:	693a      	ldr	r2, [r7, #16]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ca3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ca46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	685a      	ldr	r2, [r3, #4]
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	011b      	lsls	r3, r3, #4
 800ca52:	4313      	orrs	r3, r2
 800ca54:	68fa      	ldr	r2, [r7, #12]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2201      	movs	r2, #1
 800ca76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3718      	adds	r7, #24
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <HAL_TIM_Encoder_Start+0x16>
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	d008      	beq.n	800caaa <HAL_TIM_Encoder_Start+0x26>
 800ca98:	e00f      	b.n	800caba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2201      	movs	r2, #1
 800caa0:	2100      	movs	r1, #0
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fc6c 	bl	800d380 <TIM_CCxChannelCmd>
      break;
 800caa8:	e016      	b.n	800cad8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2201      	movs	r2, #1
 800cab0:	2104      	movs	r1, #4
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 fc64 	bl	800d380 <TIM_CCxChannelCmd>
      break;
 800cab8:	e00e      	b.n	800cad8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2201      	movs	r2, #1
 800cac0:	2100      	movs	r1, #0
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 fc5c 	bl	800d380 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2201      	movs	r2, #1
 800cace:	2104      	movs	r1, #4
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 fc55 	bl	800d380 <TIM_CCxChannelCmd>
      break;
 800cad6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f042 0201 	orr.w	r2, r2, #1
 800cae6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cae8:	2300      	movs	r3, #0
}
 800caea:	4618      	mov	r0, r3
 800caec:	3708      	adds	r7, #8
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}

0800caf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800caf2:	b580      	push	{r7, lr}
 800caf4:	b082      	sub	sp, #8
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	f003 0302 	and.w	r3, r3, #2
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d122      	bne.n	800cb4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f003 0302 	and.w	r3, r3, #2
 800cb12:	2b02      	cmp	r3, #2
 800cb14:	d11b      	bne.n	800cb4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f06f 0202 	mvn.w	r2, #2
 800cb1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2201      	movs	r2, #1
 800cb24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	699b      	ldr	r3, [r3, #24]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d003      	beq.n	800cb3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f000 f9b5 	bl	800cea4 <HAL_TIM_IC_CaptureCallback>
 800cb3a:	e005      	b.n	800cb48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 f9a7 	bl	800ce90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f000 f9b8 	bl	800ceb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	691b      	ldr	r3, [r3, #16]
 800cb54:	f003 0304 	and.w	r3, r3, #4
 800cb58:	2b04      	cmp	r3, #4
 800cb5a:	d122      	bne.n	800cba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	f003 0304 	and.w	r3, r3, #4
 800cb66:	2b04      	cmp	r3, #4
 800cb68:	d11b      	bne.n	800cba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f06f 0204 	mvn.w	r2, #4
 800cb72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2202      	movs	r2, #2
 800cb78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	699b      	ldr	r3, [r3, #24]
 800cb80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d003      	beq.n	800cb90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f98b 	bl	800cea4 <HAL_TIM_IC_CaptureCallback>
 800cb8e:	e005      	b.n	800cb9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f97d 	bl	800ce90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cb96:	6878      	ldr	r0, [r7, #4]
 800cb98:	f000 f98e 	bl	800ceb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2200      	movs	r2, #0
 800cba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	f003 0308 	and.w	r3, r3, #8
 800cbac:	2b08      	cmp	r3, #8
 800cbae:	d122      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68db      	ldr	r3, [r3, #12]
 800cbb6:	f003 0308 	and.w	r3, r3, #8
 800cbba:	2b08      	cmp	r3, #8
 800cbbc:	d11b      	bne.n	800cbf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f06f 0208 	mvn.w	r2, #8
 800cbc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2204      	movs	r2, #4
 800cbcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	69db      	ldr	r3, [r3, #28]
 800cbd4:	f003 0303 	and.w	r3, r3, #3
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f000 f961 	bl	800cea4 <HAL_TIM_IC_CaptureCallback>
 800cbe2:	e005      	b.n	800cbf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 f953 	bl	800ce90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f964 	bl	800ceb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	691b      	ldr	r3, [r3, #16]
 800cbfc:	f003 0310 	and.w	r3, r3, #16
 800cc00:	2b10      	cmp	r3, #16
 800cc02:	d122      	bne.n	800cc4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	f003 0310 	and.w	r3, r3, #16
 800cc0e:	2b10      	cmp	r3, #16
 800cc10:	d11b      	bne.n	800cc4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f06f 0210 	mvn.w	r2, #16
 800cc1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2208      	movs	r2, #8
 800cc20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	69db      	ldr	r3, [r3, #28]
 800cc28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d003      	beq.n	800cc38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f937 	bl	800cea4 <HAL_TIM_IC_CaptureCallback>
 800cc36:	e005      	b.n	800cc44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f929 	bl	800ce90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f000 f93a 	bl	800ceb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d10e      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d107      	bne.n	800cc76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f06f 0201 	mvn.w	r2, #1
 800cc6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7f7 fb31 	bl	80042d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc80:	2b80      	cmp	r3, #128	; 0x80
 800cc82:	d10e      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b80      	cmp	r3, #128	; 0x80
 800cc90:	d107      	bne.n	800cca2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cc9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fc6d 	bl	800d57c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccac:	2b40      	cmp	r3, #64	; 0x40
 800ccae:	d10e      	bne.n	800ccce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccba:	2b40      	cmp	r3, #64	; 0x40
 800ccbc:	d107      	bne.n	800ccce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ccc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f000 f8ff 	bl	800cecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	691b      	ldr	r3, [r3, #16]
 800ccd4:	f003 0320 	and.w	r3, r3, #32
 800ccd8:	2b20      	cmp	r3, #32
 800ccda:	d10e      	bne.n	800ccfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	f003 0320 	and.w	r3, r3, #32
 800cce6:	2b20      	cmp	r3, #32
 800cce8:	d107      	bne.n	800ccfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	f06f 0220 	mvn.w	r2, #32
 800ccf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f000 fc37 	bl	800d568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	3708      	adds	r7, #8
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	60f8      	str	r0, [r7, #12]
 800cd0c:	60b9      	str	r1, [r7, #8]
 800cd0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd16:	2b01      	cmp	r3, #1
 800cd18:	d101      	bne.n	800cd1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cd1a:	2302      	movs	r3, #2
 800cd1c:	e0b4      	b.n	800ce88 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2201      	movs	r2, #1
 800cd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2202      	movs	r2, #2
 800cd2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b0c      	cmp	r3, #12
 800cd32:	f200 809f 	bhi.w	800ce74 <HAL_TIM_PWM_ConfigChannel+0x170>
 800cd36:	a201      	add	r2, pc, #4	; (adr r2, 800cd3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3c:	0800cd71 	.word	0x0800cd71
 800cd40:	0800ce75 	.word	0x0800ce75
 800cd44:	0800ce75 	.word	0x0800ce75
 800cd48:	0800ce75 	.word	0x0800ce75
 800cd4c:	0800cdb1 	.word	0x0800cdb1
 800cd50:	0800ce75 	.word	0x0800ce75
 800cd54:	0800ce75 	.word	0x0800ce75
 800cd58:	0800ce75 	.word	0x0800ce75
 800cd5c:	0800cdf3 	.word	0x0800cdf3
 800cd60:	0800ce75 	.word	0x0800ce75
 800cd64:	0800ce75 	.word	0x0800ce75
 800cd68:	0800ce75 	.word	0x0800ce75
 800cd6c:	0800ce33 	.word	0x0800ce33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	68b9      	ldr	r1, [r7, #8]
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 f952 	bl	800d020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	699a      	ldr	r2, [r3, #24]
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f042 0208 	orr.w	r2, r2, #8
 800cd8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	699a      	ldr	r2, [r3, #24]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 0204 	bic.w	r2, r2, #4
 800cd9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	6999      	ldr	r1, [r3, #24]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	691a      	ldr	r2, [r3, #16]
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	430a      	orrs	r2, r1
 800cdac:	619a      	str	r2, [r3, #24]
      break;
 800cdae:	e062      	b.n	800ce76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68b9      	ldr	r1, [r7, #8]
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f000 f9a2 	bl	800d100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	699a      	ldr	r2, [r3, #24]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cdca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	699a      	ldr	r2, [r3, #24]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6999      	ldr	r1, [r3, #24]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	691b      	ldr	r3, [r3, #16]
 800cde6:	021a      	lsls	r2, r3, #8
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	430a      	orrs	r2, r1
 800cdee:	619a      	str	r2, [r3, #24]
      break;
 800cdf0:	e041      	b.n	800ce76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	68b9      	ldr	r1, [r7, #8]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f000 f9f7 	bl	800d1ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	69da      	ldr	r2, [r3, #28]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f042 0208 	orr.w	r2, r2, #8
 800ce0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	69da      	ldr	r2, [r3, #28]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f022 0204 	bic.w	r2, r2, #4
 800ce1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	69d9      	ldr	r1, [r3, #28]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	691a      	ldr	r2, [r3, #16]
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	61da      	str	r2, [r3, #28]
      break;
 800ce30:	e021      	b.n	800ce76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f000 fa4b 	bl	800d2d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	69da      	ldr	r2, [r3, #28]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ce4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	69da      	ldr	r2, [r3, #28]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ce5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	69d9      	ldr	r1, [r3, #28]
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	021a      	lsls	r2, r3, #8
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	430a      	orrs	r2, r1
 800ce70:	61da      	str	r2, [r3, #28]
      break;
 800ce72:	e000      	b.n	800ce76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ce74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2201      	movs	r2, #1
 800ce7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2200      	movs	r2, #0
 800ce82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce86:	2300      	movs	r3, #0
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ceac:	bf00      	nop
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	4a40      	ldr	r2, [pc, #256]	; (800cff4 <TIM_Base_SetConfig+0x114>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d013      	beq.n	800cf20 <TIM_Base_SetConfig+0x40>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cefe:	d00f      	beq.n	800cf20 <TIM_Base_SetConfig+0x40>
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	4a3d      	ldr	r2, [pc, #244]	; (800cff8 <TIM_Base_SetConfig+0x118>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d00b      	beq.n	800cf20 <TIM_Base_SetConfig+0x40>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	4a3c      	ldr	r2, [pc, #240]	; (800cffc <TIM_Base_SetConfig+0x11c>)
 800cf0c:	4293      	cmp	r3, r2
 800cf0e:	d007      	beq.n	800cf20 <TIM_Base_SetConfig+0x40>
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	4a3b      	ldr	r2, [pc, #236]	; (800d000 <TIM_Base_SetConfig+0x120>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d003      	beq.n	800cf20 <TIM_Base_SetConfig+0x40>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	4a3a      	ldr	r2, [pc, #232]	; (800d004 <TIM_Base_SetConfig+0x124>)
 800cf1c:	4293      	cmp	r3, r2
 800cf1e:	d108      	bne.n	800cf32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	4a2f      	ldr	r2, [pc, #188]	; (800cff4 <TIM_Base_SetConfig+0x114>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d02b      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf40:	d027      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4a2c      	ldr	r2, [pc, #176]	; (800cff8 <TIM_Base_SetConfig+0x118>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d023      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	4a2b      	ldr	r2, [pc, #172]	; (800cffc <TIM_Base_SetConfig+0x11c>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d01f      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	4a2a      	ldr	r2, [pc, #168]	; (800d000 <TIM_Base_SetConfig+0x120>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d01b      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	4a29      	ldr	r2, [pc, #164]	; (800d004 <TIM_Base_SetConfig+0x124>)
 800cf5e:	4293      	cmp	r3, r2
 800cf60:	d017      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	4a28      	ldr	r2, [pc, #160]	; (800d008 <TIM_Base_SetConfig+0x128>)
 800cf66:	4293      	cmp	r3, r2
 800cf68:	d013      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	4a27      	ldr	r2, [pc, #156]	; (800d00c <TIM_Base_SetConfig+0x12c>)
 800cf6e:	4293      	cmp	r3, r2
 800cf70:	d00f      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	4a26      	ldr	r2, [pc, #152]	; (800d010 <TIM_Base_SetConfig+0x130>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d00b      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4a25      	ldr	r2, [pc, #148]	; (800d014 <TIM_Base_SetConfig+0x134>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d007      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4a24      	ldr	r2, [pc, #144]	; (800d018 <TIM_Base_SetConfig+0x138>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d003      	beq.n	800cf92 <TIM_Base_SetConfig+0xb2>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	4a23      	ldr	r2, [pc, #140]	; (800d01c <TIM_Base_SetConfig+0x13c>)
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	d108      	bne.n	800cfa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	68fa      	ldr	r2, [r7, #12]
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	695b      	ldr	r3, [r3, #20]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	68fa      	ldr	r2, [r7, #12]
 800cfb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	689a      	ldr	r2, [r3, #8]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4a0a      	ldr	r2, [pc, #40]	; (800cff4 <TIM_Base_SetConfig+0x114>)
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d003      	beq.n	800cfd8 <TIM_Base_SetConfig+0xf8>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	4a0c      	ldr	r2, [pc, #48]	; (800d004 <TIM_Base_SetConfig+0x124>)
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d103      	bne.n	800cfe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	691a      	ldr	r2, [r3, #16]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	615a      	str	r2, [r3, #20]
}
 800cfe6:	bf00      	nop
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	40010000 	.word	0x40010000
 800cff8:	40000400 	.word	0x40000400
 800cffc:	40000800 	.word	0x40000800
 800d000:	40000c00 	.word	0x40000c00
 800d004:	40010400 	.word	0x40010400
 800d008:	40014000 	.word	0x40014000
 800d00c:	40014400 	.word	0x40014400
 800d010:	40014800 	.word	0x40014800
 800d014:	40001800 	.word	0x40001800
 800d018:	40001c00 	.word	0x40001c00
 800d01c:	40002000 	.word	0x40002000

0800d020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d020:	b480      	push	{r7}
 800d022:	b087      	sub	sp, #28
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	6a1b      	ldr	r3, [r3, #32]
 800d02e:	f023 0201 	bic.w	r2, r3, #1
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	699b      	ldr	r3, [r3, #24]
 800d046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	4313      	orrs	r3, r2
 800d060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f023 0302 	bic.w	r3, r3, #2
 800d068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	4313      	orrs	r3, r2
 800d072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	4a20      	ldr	r2, [pc, #128]	; (800d0f8 <TIM_OC1_SetConfig+0xd8>)
 800d078:	4293      	cmp	r3, r2
 800d07a:	d003      	beq.n	800d084 <TIM_OC1_SetConfig+0x64>
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4a1f      	ldr	r2, [pc, #124]	; (800d0fc <TIM_OC1_SetConfig+0xdc>)
 800d080:	4293      	cmp	r3, r2
 800d082:	d10c      	bne.n	800d09e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f023 0308 	bic.w	r3, r3, #8
 800d08a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	697a      	ldr	r2, [r7, #20]
 800d092:	4313      	orrs	r3, r2
 800d094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f023 0304 	bic.w	r3, r3, #4
 800d09c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4a15      	ldr	r2, [pc, #84]	; (800d0f8 <TIM_OC1_SetConfig+0xd8>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d003      	beq.n	800d0ae <TIM_OC1_SetConfig+0x8e>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	4a14      	ldr	r2, [pc, #80]	; (800d0fc <TIM_OC1_SetConfig+0xdc>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d111      	bne.n	800d0d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	695b      	ldr	r3, [r3, #20]
 800d0c2:	693a      	ldr	r2, [r7, #16]
 800d0c4:	4313      	orrs	r3, r2
 800d0c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	699b      	ldr	r3, [r3, #24]
 800d0cc:	693a      	ldr	r2, [r7, #16]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	693a      	ldr	r2, [r7, #16]
 800d0d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	68fa      	ldr	r2, [r7, #12]
 800d0dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685a      	ldr	r2, [r3, #4]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	697a      	ldr	r2, [r7, #20]
 800d0ea:	621a      	str	r2, [r3, #32]
}
 800d0ec:	bf00      	nop
 800d0ee:	371c      	adds	r7, #28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr
 800d0f8:	40010000 	.word	0x40010000
 800d0fc:	40010400 	.word	0x40010400

0800d100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d100:	b480      	push	{r7}
 800d102:	b087      	sub	sp, #28
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	f023 0210 	bic.w	r2, r3, #16
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6a1b      	ldr	r3, [r3, #32]
 800d11a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	021b      	lsls	r3, r3, #8
 800d13e:	68fa      	ldr	r2, [r7, #12]
 800d140:	4313      	orrs	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	f023 0320 	bic.w	r3, r3, #32
 800d14a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	697a      	ldr	r2, [r7, #20]
 800d154:	4313      	orrs	r3, r2
 800d156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	4a22      	ldr	r2, [pc, #136]	; (800d1e4 <TIM_OC2_SetConfig+0xe4>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d003      	beq.n	800d168 <TIM_OC2_SetConfig+0x68>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	4a21      	ldr	r2, [pc, #132]	; (800d1e8 <TIM_OC2_SetConfig+0xe8>)
 800d164:	4293      	cmp	r3, r2
 800d166:	d10d      	bne.n	800d184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d16e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	011b      	lsls	r3, r3, #4
 800d176:	697a      	ldr	r2, [r7, #20]
 800d178:	4313      	orrs	r3, r2
 800d17a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	4a17      	ldr	r2, [pc, #92]	; (800d1e4 <TIM_OC2_SetConfig+0xe4>)
 800d188:	4293      	cmp	r3, r2
 800d18a:	d003      	beq.n	800d194 <TIM_OC2_SetConfig+0x94>
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	4a16      	ldr	r2, [pc, #88]	; (800d1e8 <TIM_OC2_SetConfig+0xe8>)
 800d190:	4293      	cmp	r3, r2
 800d192:	d113      	bne.n	800d1bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d19a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d1a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	695b      	ldr	r3, [r3, #20]
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	699b      	ldr	r3, [r3, #24]
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	693a      	ldr	r2, [r7, #16]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	693a      	ldr	r2, [r7, #16]
 800d1c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	68fa      	ldr	r2, [r7, #12]
 800d1c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	697a      	ldr	r2, [r7, #20]
 800d1d4:	621a      	str	r2, [r3, #32]
}
 800d1d6:	bf00      	nop
 800d1d8:	371c      	adds	r7, #28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	40010000 	.word	0x40010000
 800d1e8:	40010400 	.word	0x40010400

0800d1ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b087      	sub	sp, #28
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6a1b      	ldr	r3, [r3, #32]
 800d1fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a1b      	ldr	r3, [r3, #32]
 800d206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	69db      	ldr	r3, [r3, #28]
 800d212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f023 0303 	bic.w	r3, r3, #3
 800d222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	68fa      	ldr	r2, [r7, #12]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	689b      	ldr	r3, [r3, #8]
 800d23a:	021b      	lsls	r3, r3, #8
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	4313      	orrs	r3, r2
 800d240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a21      	ldr	r2, [pc, #132]	; (800d2cc <TIM_OC3_SetConfig+0xe0>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d003      	beq.n	800d252 <TIM_OC3_SetConfig+0x66>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a20      	ldr	r2, [pc, #128]	; (800d2d0 <TIM_OC3_SetConfig+0xe4>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d10d      	bne.n	800d26e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	021b      	lsls	r3, r3, #8
 800d260:	697a      	ldr	r2, [r7, #20]
 800d262:	4313      	orrs	r3, r2
 800d264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d26c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	4a16      	ldr	r2, [pc, #88]	; (800d2cc <TIM_OC3_SetConfig+0xe0>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d003      	beq.n	800d27e <TIM_OC3_SetConfig+0x92>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	4a15      	ldr	r2, [pc, #84]	; (800d2d0 <TIM_OC3_SetConfig+0xe4>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d113      	bne.n	800d2a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d28c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	695b      	ldr	r3, [r3, #20]
 800d292:	011b      	lsls	r3, r3, #4
 800d294:	693a      	ldr	r2, [r7, #16]
 800d296:	4313      	orrs	r3, r2
 800d298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	699b      	ldr	r3, [r3, #24]
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	693a      	ldr	r2, [r7, #16]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	68fa      	ldr	r2, [r7, #12]
 800d2b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	697a      	ldr	r2, [r7, #20]
 800d2be:	621a      	str	r2, [r3, #32]
}
 800d2c0:	bf00      	nop
 800d2c2:	371c      	adds	r7, #28
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr
 800d2cc:	40010000 	.word	0x40010000
 800d2d0:	40010400 	.word	0x40010400

0800d2d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b087      	sub	sp, #28
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6a1b      	ldr	r3, [r3, #32]
 800d2e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	6a1b      	ldr	r3, [r3, #32]
 800d2ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	685b      	ldr	r3, [r3, #4]
 800d2f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	69db      	ldr	r3, [r3, #28]
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d30a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	021b      	lsls	r3, r3, #8
 800d312:	68fa      	ldr	r2, [r7, #12]
 800d314:	4313      	orrs	r3, r2
 800d316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d31e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	031b      	lsls	r3, r3, #12
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	4313      	orrs	r3, r2
 800d32a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4a12      	ldr	r2, [pc, #72]	; (800d378 <TIM_OC4_SetConfig+0xa4>)
 800d330:	4293      	cmp	r3, r2
 800d332:	d003      	beq.n	800d33c <TIM_OC4_SetConfig+0x68>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a11      	ldr	r2, [pc, #68]	; (800d37c <TIM_OC4_SetConfig+0xa8>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d109      	bne.n	800d350 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d33c:	697b      	ldr	r3, [r7, #20]
 800d33e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	695b      	ldr	r3, [r3, #20]
 800d348:	019b      	lsls	r3, r3, #6
 800d34a:	697a      	ldr	r2, [r7, #20]
 800d34c:	4313      	orrs	r3, r2
 800d34e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	68fa      	ldr	r2, [r7, #12]
 800d35a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	621a      	str	r2, [r3, #32]
}
 800d36a:	bf00      	nop
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	40010000 	.word	0x40010000
 800d37c:	40010400 	.word	0x40010400

0800d380 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d380:	b480      	push	{r7}
 800d382:	b087      	sub	sp, #28
 800d384:	af00      	add	r7, sp, #0
 800d386:	60f8      	str	r0, [r7, #12]
 800d388:	60b9      	str	r1, [r7, #8]
 800d38a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	f003 031f 	and.w	r3, r3, #31
 800d392:	2201      	movs	r2, #1
 800d394:	fa02 f303 	lsl.w	r3, r2, r3
 800d398:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6a1a      	ldr	r2, [r3, #32]
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	43db      	mvns	r3, r3
 800d3a2:	401a      	ands	r2, r3
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	6a1a      	ldr	r2, [r3, #32]
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	f003 031f 	and.w	r3, r3, #31
 800d3b2:	6879      	ldr	r1, [r7, #4]
 800d3b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	621a      	str	r2, [r3, #32]
}
 800d3be:	bf00      	nop
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
	...

0800d3cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b085      	sub	sp, #20
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d101      	bne.n	800d3e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d3e0:	2302      	movs	r3, #2
 800d3e2:	e05a      	b.n	800d49a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	685b      	ldr	r3, [r3, #4]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d40a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	4313      	orrs	r3, r2
 800d414:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	68fa      	ldr	r2, [r7, #12]
 800d41c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4a21      	ldr	r2, [pc, #132]	; (800d4a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d424:	4293      	cmp	r3, r2
 800d426:	d022      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d430:	d01d      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a1d      	ldr	r2, [pc, #116]	; (800d4ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d018      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4a1b      	ldr	r2, [pc, #108]	; (800d4b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d013      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	4a1a      	ldr	r2, [pc, #104]	; (800d4b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d00e      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a18      	ldr	r2, [pc, #96]	; (800d4b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d009      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a17      	ldr	r2, [pc, #92]	; (800d4bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d004      	beq.n	800d46e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a15      	ldr	r2, [pc, #84]	; (800d4c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d10c      	bne.n	800d488 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d474:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	4313      	orrs	r3, r2
 800d47e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2200      	movs	r2, #0
 800d494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d498:	2300      	movs	r3, #0
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3714      	adds	r7, #20
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	40010000 	.word	0x40010000
 800d4ac:	40000400 	.word	0x40000400
 800d4b0:	40000800 	.word	0x40000800
 800d4b4:	40000c00 	.word	0x40000c00
 800d4b8:	40010400 	.word	0x40010400
 800d4bc:	40014000 	.word	0x40014000
 800d4c0:	40001800 	.word	0x40001800

0800d4c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b085      	sub	sp, #20
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d101      	bne.n	800d4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d4dc:	2302      	movs	r3, #2
 800d4de:	e03d      	b.n	800d55c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	4313      	orrs	r3, r2
 800d502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	4313      	orrs	r3, r2
 800d510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	4313      	orrs	r3, r2
 800d52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	695b      	ldr	r3, [r3, #20]
 800d538:	4313      	orrs	r3, r2
 800d53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	69db      	ldr	r3, [r3, #28]
 800d546:	4313      	orrs	r3, r2
 800d548:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68fa      	ldr	r2, [r7, #12]
 800d550:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d55a:	2300      	movs	r3, #0
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3714      	adds	r7, #20
 800d560:	46bd      	mov	sp, r7
 800d562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d566:	4770      	bx	lr

0800d568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d568:	b480      	push	{r7}
 800d56a:	b083      	sub	sp, #12
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d584:	bf00      	nop
 800d586:	370c      	adds	r7, #12
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr

0800d590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b082      	sub	sp, #8
 800d594:	af00      	add	r7, sp, #0
 800d596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d101      	bne.n	800d5a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e03f      	b.n	800d622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d5a8:	b2db      	uxtb	r3, r3
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d106      	bne.n	800d5bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7f8 fae0 	bl	8005b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2224      	movs	r2, #36	; 0x24
 800d5c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68da      	ldr	r2, [r3, #12]
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d5d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f829 	bl	800d62c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	691a      	ldr	r2, [r3, #16]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d5e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	695a      	ldr	r2, [r3, #20]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d5f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68da      	ldr	r2, [r3, #12]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2220      	movs	r2, #32
 800d614:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2220      	movs	r2, #32
 800d61c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d620:	2300      	movs	r3, #0
}
 800d622:	4618      	mov	r0, r3
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
	...

0800d62c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	b085      	sub	sp, #20
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68da      	ldr	r2, [r3, #12]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	430a      	orrs	r2, r1
 800d64a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	689a      	ldr	r2, [r3, #8]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	691b      	ldr	r3, [r3, #16]
 800d654:	431a      	orrs	r2, r3
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	431a      	orrs	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	69db      	ldr	r3, [r3, #28]
 800d660:	4313      	orrs	r3, r2
 800d662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68db      	ldr	r3, [r3, #12]
 800d66a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d66e:	f023 030c 	bic.w	r3, r3, #12
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	6812      	ldr	r2, [r2, #0]
 800d676:	68f9      	ldr	r1, [r7, #12]
 800d678:	430b      	orrs	r3, r1
 800d67a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	699a      	ldr	r2, [r3, #24]
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	430a      	orrs	r2, r1
 800d690:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d69a:	f040 818b 	bne.w	800d9b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	4ac1      	ldr	r2, [pc, #772]	; (800d9a8 <UART_SetConfig+0x37c>)
 800d6a4:	4293      	cmp	r3, r2
 800d6a6:	d005      	beq.n	800d6b4 <UART_SetConfig+0x88>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	4abf      	ldr	r2, [pc, #764]	; (800d9ac <UART_SetConfig+0x380>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	f040 80bd 	bne.w	800d82e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d6b4:	f7fc fbcc 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
 800d6b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	461d      	mov	r5, r3
 800d6be:	f04f 0600 	mov.w	r6, #0
 800d6c2:	46a8      	mov	r8, r5
 800d6c4:	46b1      	mov	r9, r6
 800d6c6:	eb18 0308 	adds.w	r3, r8, r8
 800d6ca:	eb49 0409 	adc.w	r4, r9, r9
 800d6ce:	4698      	mov	r8, r3
 800d6d0:	46a1      	mov	r9, r4
 800d6d2:	eb18 0805 	adds.w	r8, r8, r5
 800d6d6:	eb49 0906 	adc.w	r9, r9, r6
 800d6da:	f04f 0100 	mov.w	r1, #0
 800d6de:	f04f 0200 	mov.w	r2, #0
 800d6e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d6e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d6ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d6ee:	4688      	mov	r8, r1
 800d6f0:	4691      	mov	r9, r2
 800d6f2:	eb18 0005 	adds.w	r0, r8, r5
 800d6f6:	eb49 0106 	adc.w	r1, r9, r6
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	461d      	mov	r5, r3
 800d700:	f04f 0600 	mov.w	r6, #0
 800d704:	196b      	adds	r3, r5, r5
 800d706:	eb46 0406 	adc.w	r4, r6, r6
 800d70a:	461a      	mov	r2, r3
 800d70c:	4623      	mov	r3, r4
 800d70e:	f7f3 fad3 	bl	8000cb8 <__aeabi_uldivmod>
 800d712:	4603      	mov	r3, r0
 800d714:	460c      	mov	r4, r1
 800d716:	461a      	mov	r2, r3
 800d718:	4ba5      	ldr	r3, [pc, #660]	; (800d9b0 <UART_SetConfig+0x384>)
 800d71a:	fba3 2302 	umull	r2, r3, r3, r2
 800d71e:	095b      	lsrs	r3, r3, #5
 800d720:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	461d      	mov	r5, r3
 800d728:	f04f 0600 	mov.w	r6, #0
 800d72c:	46a9      	mov	r9, r5
 800d72e:	46b2      	mov	sl, r6
 800d730:	eb19 0309 	adds.w	r3, r9, r9
 800d734:	eb4a 040a 	adc.w	r4, sl, sl
 800d738:	4699      	mov	r9, r3
 800d73a:	46a2      	mov	sl, r4
 800d73c:	eb19 0905 	adds.w	r9, r9, r5
 800d740:	eb4a 0a06 	adc.w	sl, sl, r6
 800d744:	f04f 0100 	mov.w	r1, #0
 800d748:	f04f 0200 	mov.w	r2, #0
 800d74c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d750:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d754:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d758:	4689      	mov	r9, r1
 800d75a:	4692      	mov	sl, r2
 800d75c:	eb19 0005 	adds.w	r0, r9, r5
 800d760:	eb4a 0106 	adc.w	r1, sl, r6
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	685b      	ldr	r3, [r3, #4]
 800d768:	461d      	mov	r5, r3
 800d76a:	f04f 0600 	mov.w	r6, #0
 800d76e:	196b      	adds	r3, r5, r5
 800d770:	eb46 0406 	adc.w	r4, r6, r6
 800d774:	461a      	mov	r2, r3
 800d776:	4623      	mov	r3, r4
 800d778:	f7f3 fa9e 	bl	8000cb8 <__aeabi_uldivmod>
 800d77c:	4603      	mov	r3, r0
 800d77e:	460c      	mov	r4, r1
 800d780:	461a      	mov	r2, r3
 800d782:	4b8b      	ldr	r3, [pc, #556]	; (800d9b0 <UART_SetConfig+0x384>)
 800d784:	fba3 1302 	umull	r1, r3, r3, r2
 800d788:	095b      	lsrs	r3, r3, #5
 800d78a:	2164      	movs	r1, #100	; 0x64
 800d78c:	fb01 f303 	mul.w	r3, r1, r3
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	3332      	adds	r3, #50	; 0x32
 800d796:	4a86      	ldr	r2, [pc, #536]	; (800d9b0 <UART_SetConfig+0x384>)
 800d798:	fba2 2303 	umull	r2, r3, r2, r3
 800d79c:	095b      	lsrs	r3, r3, #5
 800d79e:	005b      	lsls	r3, r3, #1
 800d7a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d7a4:	4498      	add	r8, r3
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	461d      	mov	r5, r3
 800d7aa:	f04f 0600 	mov.w	r6, #0
 800d7ae:	46a9      	mov	r9, r5
 800d7b0:	46b2      	mov	sl, r6
 800d7b2:	eb19 0309 	adds.w	r3, r9, r9
 800d7b6:	eb4a 040a 	adc.w	r4, sl, sl
 800d7ba:	4699      	mov	r9, r3
 800d7bc:	46a2      	mov	sl, r4
 800d7be:	eb19 0905 	adds.w	r9, r9, r5
 800d7c2:	eb4a 0a06 	adc.w	sl, sl, r6
 800d7c6:	f04f 0100 	mov.w	r1, #0
 800d7ca:	f04f 0200 	mov.w	r2, #0
 800d7ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d7d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d7d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d7da:	4689      	mov	r9, r1
 800d7dc:	4692      	mov	sl, r2
 800d7de:	eb19 0005 	adds.w	r0, r9, r5
 800d7e2:	eb4a 0106 	adc.w	r1, sl, r6
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	461d      	mov	r5, r3
 800d7ec:	f04f 0600 	mov.w	r6, #0
 800d7f0:	196b      	adds	r3, r5, r5
 800d7f2:	eb46 0406 	adc.w	r4, r6, r6
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	f7f3 fa5d 	bl	8000cb8 <__aeabi_uldivmod>
 800d7fe:	4603      	mov	r3, r0
 800d800:	460c      	mov	r4, r1
 800d802:	461a      	mov	r2, r3
 800d804:	4b6a      	ldr	r3, [pc, #424]	; (800d9b0 <UART_SetConfig+0x384>)
 800d806:	fba3 1302 	umull	r1, r3, r3, r2
 800d80a:	095b      	lsrs	r3, r3, #5
 800d80c:	2164      	movs	r1, #100	; 0x64
 800d80e:	fb01 f303 	mul.w	r3, r1, r3
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	3332      	adds	r3, #50	; 0x32
 800d818:	4a65      	ldr	r2, [pc, #404]	; (800d9b0 <UART_SetConfig+0x384>)
 800d81a:	fba2 2303 	umull	r2, r3, r2, r3
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	f003 0207 	and.w	r2, r3, #7
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4442      	add	r2, r8
 800d82a:	609a      	str	r2, [r3, #8]
 800d82c:	e26f      	b.n	800dd0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d82e:	f7fc fafb 	bl	8009e28 <HAL_RCC_GetPCLK1Freq>
 800d832:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	461d      	mov	r5, r3
 800d838:	f04f 0600 	mov.w	r6, #0
 800d83c:	46a8      	mov	r8, r5
 800d83e:	46b1      	mov	r9, r6
 800d840:	eb18 0308 	adds.w	r3, r8, r8
 800d844:	eb49 0409 	adc.w	r4, r9, r9
 800d848:	4698      	mov	r8, r3
 800d84a:	46a1      	mov	r9, r4
 800d84c:	eb18 0805 	adds.w	r8, r8, r5
 800d850:	eb49 0906 	adc.w	r9, r9, r6
 800d854:	f04f 0100 	mov.w	r1, #0
 800d858:	f04f 0200 	mov.w	r2, #0
 800d85c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d860:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d864:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d868:	4688      	mov	r8, r1
 800d86a:	4691      	mov	r9, r2
 800d86c:	eb18 0005 	adds.w	r0, r8, r5
 800d870:	eb49 0106 	adc.w	r1, r9, r6
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	461d      	mov	r5, r3
 800d87a:	f04f 0600 	mov.w	r6, #0
 800d87e:	196b      	adds	r3, r5, r5
 800d880:	eb46 0406 	adc.w	r4, r6, r6
 800d884:	461a      	mov	r2, r3
 800d886:	4623      	mov	r3, r4
 800d888:	f7f3 fa16 	bl	8000cb8 <__aeabi_uldivmod>
 800d88c:	4603      	mov	r3, r0
 800d88e:	460c      	mov	r4, r1
 800d890:	461a      	mov	r2, r3
 800d892:	4b47      	ldr	r3, [pc, #284]	; (800d9b0 <UART_SetConfig+0x384>)
 800d894:	fba3 2302 	umull	r2, r3, r3, r2
 800d898:	095b      	lsrs	r3, r3, #5
 800d89a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	461d      	mov	r5, r3
 800d8a2:	f04f 0600 	mov.w	r6, #0
 800d8a6:	46a9      	mov	r9, r5
 800d8a8:	46b2      	mov	sl, r6
 800d8aa:	eb19 0309 	adds.w	r3, r9, r9
 800d8ae:	eb4a 040a 	adc.w	r4, sl, sl
 800d8b2:	4699      	mov	r9, r3
 800d8b4:	46a2      	mov	sl, r4
 800d8b6:	eb19 0905 	adds.w	r9, r9, r5
 800d8ba:	eb4a 0a06 	adc.w	sl, sl, r6
 800d8be:	f04f 0100 	mov.w	r1, #0
 800d8c2:	f04f 0200 	mov.w	r2, #0
 800d8c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d8ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d8d2:	4689      	mov	r9, r1
 800d8d4:	4692      	mov	sl, r2
 800d8d6:	eb19 0005 	adds.w	r0, r9, r5
 800d8da:	eb4a 0106 	adc.w	r1, sl, r6
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	461d      	mov	r5, r3
 800d8e4:	f04f 0600 	mov.w	r6, #0
 800d8e8:	196b      	adds	r3, r5, r5
 800d8ea:	eb46 0406 	adc.w	r4, r6, r6
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	4623      	mov	r3, r4
 800d8f2:	f7f3 f9e1 	bl	8000cb8 <__aeabi_uldivmod>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	460c      	mov	r4, r1
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	4b2c      	ldr	r3, [pc, #176]	; (800d9b0 <UART_SetConfig+0x384>)
 800d8fe:	fba3 1302 	umull	r1, r3, r3, r2
 800d902:	095b      	lsrs	r3, r3, #5
 800d904:	2164      	movs	r1, #100	; 0x64
 800d906:	fb01 f303 	mul.w	r3, r1, r3
 800d90a:	1ad3      	subs	r3, r2, r3
 800d90c:	00db      	lsls	r3, r3, #3
 800d90e:	3332      	adds	r3, #50	; 0x32
 800d910:	4a27      	ldr	r2, [pc, #156]	; (800d9b0 <UART_SetConfig+0x384>)
 800d912:	fba2 2303 	umull	r2, r3, r2, r3
 800d916:	095b      	lsrs	r3, r3, #5
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d91e:	4498      	add	r8, r3
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	461d      	mov	r5, r3
 800d924:	f04f 0600 	mov.w	r6, #0
 800d928:	46a9      	mov	r9, r5
 800d92a:	46b2      	mov	sl, r6
 800d92c:	eb19 0309 	adds.w	r3, r9, r9
 800d930:	eb4a 040a 	adc.w	r4, sl, sl
 800d934:	4699      	mov	r9, r3
 800d936:	46a2      	mov	sl, r4
 800d938:	eb19 0905 	adds.w	r9, r9, r5
 800d93c:	eb4a 0a06 	adc.w	sl, sl, r6
 800d940:	f04f 0100 	mov.w	r1, #0
 800d944:	f04f 0200 	mov.w	r2, #0
 800d948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d94c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d954:	4689      	mov	r9, r1
 800d956:	4692      	mov	sl, r2
 800d958:	eb19 0005 	adds.w	r0, r9, r5
 800d95c:	eb4a 0106 	adc.w	r1, sl, r6
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	685b      	ldr	r3, [r3, #4]
 800d964:	461d      	mov	r5, r3
 800d966:	f04f 0600 	mov.w	r6, #0
 800d96a:	196b      	adds	r3, r5, r5
 800d96c:	eb46 0406 	adc.w	r4, r6, r6
 800d970:	461a      	mov	r2, r3
 800d972:	4623      	mov	r3, r4
 800d974:	f7f3 f9a0 	bl	8000cb8 <__aeabi_uldivmod>
 800d978:	4603      	mov	r3, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	461a      	mov	r2, r3
 800d97e:	4b0c      	ldr	r3, [pc, #48]	; (800d9b0 <UART_SetConfig+0x384>)
 800d980:	fba3 1302 	umull	r1, r3, r3, r2
 800d984:	095b      	lsrs	r3, r3, #5
 800d986:	2164      	movs	r1, #100	; 0x64
 800d988:	fb01 f303 	mul.w	r3, r1, r3
 800d98c:	1ad3      	subs	r3, r2, r3
 800d98e:	00db      	lsls	r3, r3, #3
 800d990:	3332      	adds	r3, #50	; 0x32
 800d992:	4a07      	ldr	r2, [pc, #28]	; (800d9b0 <UART_SetConfig+0x384>)
 800d994:	fba2 2303 	umull	r2, r3, r2, r3
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	f003 0207 	and.w	r2, r3, #7
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4442      	add	r2, r8
 800d9a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d9a6:	e1b2      	b.n	800dd0e <UART_SetConfig+0x6e2>
 800d9a8:	40011000 	.word	0x40011000
 800d9ac:	40011400 	.word	0x40011400
 800d9b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4ad7      	ldr	r2, [pc, #860]	; (800dd18 <UART_SetConfig+0x6ec>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d005      	beq.n	800d9ca <UART_SetConfig+0x39e>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	4ad6      	ldr	r2, [pc, #856]	; (800dd1c <UART_SetConfig+0x6f0>)
 800d9c4:	4293      	cmp	r3, r2
 800d9c6:	f040 80d1 	bne.w	800db6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d9ca:	f7fc fa41 	bl	8009e50 <HAL_RCC_GetPCLK2Freq>
 800d9ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	469a      	mov	sl, r3
 800d9d4:	f04f 0b00 	mov.w	fp, #0
 800d9d8:	46d0      	mov	r8, sl
 800d9da:	46d9      	mov	r9, fp
 800d9dc:	eb18 0308 	adds.w	r3, r8, r8
 800d9e0:	eb49 0409 	adc.w	r4, r9, r9
 800d9e4:	4698      	mov	r8, r3
 800d9e6:	46a1      	mov	r9, r4
 800d9e8:	eb18 080a 	adds.w	r8, r8, sl
 800d9ec:	eb49 090b 	adc.w	r9, r9, fp
 800d9f0:	f04f 0100 	mov.w	r1, #0
 800d9f4:	f04f 0200 	mov.w	r2, #0
 800d9f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d9fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800da00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800da04:	4688      	mov	r8, r1
 800da06:	4691      	mov	r9, r2
 800da08:	eb1a 0508 	adds.w	r5, sl, r8
 800da0c:	eb4b 0609 	adc.w	r6, fp, r9
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	4619      	mov	r1, r3
 800da16:	f04f 0200 	mov.w	r2, #0
 800da1a:	f04f 0300 	mov.w	r3, #0
 800da1e:	f04f 0400 	mov.w	r4, #0
 800da22:	0094      	lsls	r4, r2, #2
 800da24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800da28:	008b      	lsls	r3, r1, #2
 800da2a:	461a      	mov	r2, r3
 800da2c:	4623      	mov	r3, r4
 800da2e:	4628      	mov	r0, r5
 800da30:	4631      	mov	r1, r6
 800da32:	f7f3 f941 	bl	8000cb8 <__aeabi_uldivmod>
 800da36:	4603      	mov	r3, r0
 800da38:	460c      	mov	r4, r1
 800da3a:	461a      	mov	r2, r3
 800da3c:	4bb8      	ldr	r3, [pc, #736]	; (800dd20 <UART_SetConfig+0x6f4>)
 800da3e:	fba3 2302 	umull	r2, r3, r3, r2
 800da42:	095b      	lsrs	r3, r3, #5
 800da44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	469b      	mov	fp, r3
 800da4c:	f04f 0c00 	mov.w	ip, #0
 800da50:	46d9      	mov	r9, fp
 800da52:	46e2      	mov	sl, ip
 800da54:	eb19 0309 	adds.w	r3, r9, r9
 800da58:	eb4a 040a 	adc.w	r4, sl, sl
 800da5c:	4699      	mov	r9, r3
 800da5e:	46a2      	mov	sl, r4
 800da60:	eb19 090b 	adds.w	r9, r9, fp
 800da64:	eb4a 0a0c 	adc.w	sl, sl, ip
 800da68:	f04f 0100 	mov.w	r1, #0
 800da6c:	f04f 0200 	mov.w	r2, #0
 800da70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800da7c:	4689      	mov	r9, r1
 800da7e:	4692      	mov	sl, r2
 800da80:	eb1b 0509 	adds.w	r5, fp, r9
 800da84:	eb4c 060a 	adc.w	r6, ip, sl
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	685b      	ldr	r3, [r3, #4]
 800da8c:	4619      	mov	r1, r3
 800da8e:	f04f 0200 	mov.w	r2, #0
 800da92:	f04f 0300 	mov.w	r3, #0
 800da96:	f04f 0400 	mov.w	r4, #0
 800da9a:	0094      	lsls	r4, r2, #2
 800da9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800daa0:	008b      	lsls	r3, r1, #2
 800daa2:	461a      	mov	r2, r3
 800daa4:	4623      	mov	r3, r4
 800daa6:	4628      	mov	r0, r5
 800daa8:	4631      	mov	r1, r6
 800daaa:	f7f3 f905 	bl	8000cb8 <__aeabi_uldivmod>
 800daae:	4603      	mov	r3, r0
 800dab0:	460c      	mov	r4, r1
 800dab2:	461a      	mov	r2, r3
 800dab4:	4b9a      	ldr	r3, [pc, #616]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dab6:	fba3 1302 	umull	r1, r3, r3, r2
 800daba:	095b      	lsrs	r3, r3, #5
 800dabc:	2164      	movs	r1, #100	; 0x64
 800dabe:	fb01 f303 	mul.w	r3, r1, r3
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	011b      	lsls	r3, r3, #4
 800dac6:	3332      	adds	r3, #50	; 0x32
 800dac8:	4a95      	ldr	r2, [pc, #596]	; (800dd20 <UART_SetConfig+0x6f4>)
 800daca:	fba2 2303 	umull	r2, r3, r2, r3
 800dace:	095b      	lsrs	r3, r3, #5
 800dad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dad4:	4498      	add	r8, r3
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	469b      	mov	fp, r3
 800dada:	f04f 0c00 	mov.w	ip, #0
 800dade:	46d9      	mov	r9, fp
 800dae0:	46e2      	mov	sl, ip
 800dae2:	eb19 0309 	adds.w	r3, r9, r9
 800dae6:	eb4a 040a 	adc.w	r4, sl, sl
 800daea:	4699      	mov	r9, r3
 800daec:	46a2      	mov	sl, r4
 800daee:	eb19 090b 	adds.w	r9, r9, fp
 800daf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800daf6:	f04f 0100 	mov.w	r1, #0
 800dafa:	f04f 0200 	mov.w	r2, #0
 800dafe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800db06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800db0a:	4689      	mov	r9, r1
 800db0c:	4692      	mov	sl, r2
 800db0e:	eb1b 0509 	adds.w	r5, fp, r9
 800db12:	eb4c 060a 	adc.w	r6, ip, sl
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	4619      	mov	r1, r3
 800db1c:	f04f 0200 	mov.w	r2, #0
 800db20:	f04f 0300 	mov.w	r3, #0
 800db24:	f04f 0400 	mov.w	r4, #0
 800db28:	0094      	lsls	r4, r2, #2
 800db2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800db2e:	008b      	lsls	r3, r1, #2
 800db30:	461a      	mov	r2, r3
 800db32:	4623      	mov	r3, r4
 800db34:	4628      	mov	r0, r5
 800db36:	4631      	mov	r1, r6
 800db38:	f7f3 f8be 	bl	8000cb8 <__aeabi_uldivmod>
 800db3c:	4603      	mov	r3, r0
 800db3e:	460c      	mov	r4, r1
 800db40:	461a      	mov	r2, r3
 800db42:	4b77      	ldr	r3, [pc, #476]	; (800dd20 <UART_SetConfig+0x6f4>)
 800db44:	fba3 1302 	umull	r1, r3, r3, r2
 800db48:	095b      	lsrs	r3, r3, #5
 800db4a:	2164      	movs	r1, #100	; 0x64
 800db4c:	fb01 f303 	mul.w	r3, r1, r3
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	011b      	lsls	r3, r3, #4
 800db54:	3332      	adds	r3, #50	; 0x32
 800db56:	4a72      	ldr	r2, [pc, #456]	; (800dd20 <UART_SetConfig+0x6f4>)
 800db58:	fba2 2303 	umull	r2, r3, r2, r3
 800db5c:	095b      	lsrs	r3, r3, #5
 800db5e:	f003 020f 	and.w	r2, r3, #15
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4442      	add	r2, r8
 800db68:	609a      	str	r2, [r3, #8]
 800db6a:	e0d0      	b.n	800dd0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800db6c:	f7fc f95c 	bl	8009e28 <HAL_RCC_GetPCLK1Freq>
 800db70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	469a      	mov	sl, r3
 800db76:	f04f 0b00 	mov.w	fp, #0
 800db7a:	46d0      	mov	r8, sl
 800db7c:	46d9      	mov	r9, fp
 800db7e:	eb18 0308 	adds.w	r3, r8, r8
 800db82:	eb49 0409 	adc.w	r4, r9, r9
 800db86:	4698      	mov	r8, r3
 800db88:	46a1      	mov	r9, r4
 800db8a:	eb18 080a 	adds.w	r8, r8, sl
 800db8e:	eb49 090b 	adc.w	r9, r9, fp
 800db92:	f04f 0100 	mov.w	r1, #0
 800db96:	f04f 0200 	mov.w	r2, #0
 800db9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800db9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dba2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dba6:	4688      	mov	r8, r1
 800dba8:	4691      	mov	r9, r2
 800dbaa:	eb1a 0508 	adds.w	r5, sl, r8
 800dbae:	eb4b 0609 	adc.w	r6, fp, r9
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	f04f 0200 	mov.w	r2, #0
 800dbbc:	f04f 0300 	mov.w	r3, #0
 800dbc0:	f04f 0400 	mov.w	r4, #0
 800dbc4:	0094      	lsls	r4, r2, #2
 800dbc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dbca:	008b      	lsls	r3, r1, #2
 800dbcc:	461a      	mov	r2, r3
 800dbce:	4623      	mov	r3, r4
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	4631      	mov	r1, r6
 800dbd4:	f7f3 f870 	bl	8000cb8 <__aeabi_uldivmod>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	461a      	mov	r2, r3
 800dbde:	4b50      	ldr	r3, [pc, #320]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dbe0:	fba3 2302 	umull	r2, r3, r3, r2
 800dbe4:	095b      	lsrs	r3, r3, #5
 800dbe6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	469b      	mov	fp, r3
 800dbee:	f04f 0c00 	mov.w	ip, #0
 800dbf2:	46d9      	mov	r9, fp
 800dbf4:	46e2      	mov	sl, ip
 800dbf6:	eb19 0309 	adds.w	r3, r9, r9
 800dbfa:	eb4a 040a 	adc.w	r4, sl, sl
 800dbfe:	4699      	mov	r9, r3
 800dc00:	46a2      	mov	sl, r4
 800dc02:	eb19 090b 	adds.w	r9, r9, fp
 800dc06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dc0a:	f04f 0100 	mov.w	r1, #0
 800dc0e:	f04f 0200 	mov.w	r2, #0
 800dc12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc1e:	4689      	mov	r9, r1
 800dc20:	4692      	mov	sl, r2
 800dc22:	eb1b 0509 	adds.w	r5, fp, r9
 800dc26:	eb4c 060a 	adc.w	r6, ip, sl
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f04f 0200 	mov.w	r2, #0
 800dc34:	f04f 0300 	mov.w	r3, #0
 800dc38:	f04f 0400 	mov.w	r4, #0
 800dc3c:	0094      	lsls	r4, r2, #2
 800dc3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dc42:	008b      	lsls	r3, r1, #2
 800dc44:	461a      	mov	r2, r3
 800dc46:	4623      	mov	r3, r4
 800dc48:	4628      	mov	r0, r5
 800dc4a:	4631      	mov	r1, r6
 800dc4c:	f7f3 f834 	bl	8000cb8 <__aeabi_uldivmod>
 800dc50:	4603      	mov	r3, r0
 800dc52:	460c      	mov	r4, r1
 800dc54:	461a      	mov	r2, r3
 800dc56:	4b32      	ldr	r3, [pc, #200]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dc58:	fba3 1302 	umull	r1, r3, r3, r2
 800dc5c:	095b      	lsrs	r3, r3, #5
 800dc5e:	2164      	movs	r1, #100	; 0x64
 800dc60:	fb01 f303 	mul.w	r3, r1, r3
 800dc64:	1ad3      	subs	r3, r2, r3
 800dc66:	011b      	lsls	r3, r3, #4
 800dc68:	3332      	adds	r3, #50	; 0x32
 800dc6a:	4a2d      	ldr	r2, [pc, #180]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dc6c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc70:	095b      	lsrs	r3, r3, #5
 800dc72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc76:	4498      	add	r8, r3
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	469b      	mov	fp, r3
 800dc7c:	f04f 0c00 	mov.w	ip, #0
 800dc80:	46d9      	mov	r9, fp
 800dc82:	46e2      	mov	sl, ip
 800dc84:	eb19 0309 	adds.w	r3, r9, r9
 800dc88:	eb4a 040a 	adc.w	r4, sl, sl
 800dc8c:	4699      	mov	r9, r3
 800dc8e:	46a2      	mov	sl, r4
 800dc90:	eb19 090b 	adds.w	r9, r9, fp
 800dc94:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dc98:	f04f 0100 	mov.w	r1, #0
 800dc9c:	f04f 0200 	mov.w	r2, #0
 800dca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dca4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dca8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dcac:	4689      	mov	r9, r1
 800dcae:	4692      	mov	sl, r2
 800dcb0:	eb1b 0509 	adds.w	r5, fp, r9
 800dcb4:	eb4c 060a 	adc.w	r6, ip, sl
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f04f 0200 	mov.w	r2, #0
 800dcc2:	f04f 0300 	mov.w	r3, #0
 800dcc6:	f04f 0400 	mov.w	r4, #0
 800dcca:	0094      	lsls	r4, r2, #2
 800dccc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dcd0:	008b      	lsls	r3, r1, #2
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	4623      	mov	r3, r4
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	4631      	mov	r1, r6
 800dcda:	f7f2 ffed 	bl	8000cb8 <__aeabi_uldivmod>
 800dcde:	4603      	mov	r3, r0
 800dce0:	460c      	mov	r4, r1
 800dce2:	461a      	mov	r2, r3
 800dce4:	4b0e      	ldr	r3, [pc, #56]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dce6:	fba3 1302 	umull	r1, r3, r3, r2
 800dcea:	095b      	lsrs	r3, r3, #5
 800dcec:	2164      	movs	r1, #100	; 0x64
 800dcee:	fb01 f303 	mul.w	r3, r1, r3
 800dcf2:	1ad3      	subs	r3, r2, r3
 800dcf4:	011b      	lsls	r3, r3, #4
 800dcf6:	3332      	adds	r3, #50	; 0x32
 800dcf8:	4a09      	ldr	r2, [pc, #36]	; (800dd20 <UART_SetConfig+0x6f4>)
 800dcfa:	fba2 2303 	umull	r2, r3, r2, r3
 800dcfe:	095b      	lsrs	r3, r3, #5
 800dd00:	f003 020f 	and.w	r2, r3, #15
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4442      	add	r2, r8
 800dd0a:	609a      	str	r2, [r3, #8]
}
 800dd0c:	e7ff      	b.n	800dd0e <UART_SetConfig+0x6e2>
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd18:	40011000 	.word	0x40011000
 800dd1c:	40011400 	.word	0x40011400
 800dd20:	51eb851f 	.word	0x51eb851f

0800dd24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800dd24:	b084      	sub	sp, #16
 800dd26:	b480      	push	{r7}
 800dd28:	b085      	sub	sp, #20
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
 800dd2e:	f107 001c 	add.w	r0, r7, #28
 800dd32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800dd36:	2300      	movs	r3, #0
 800dd38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800dd3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800dd3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800dd3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800dd42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800dd46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800dd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800dd4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800dd4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800dd50:	68fa      	ldr	r2, [r7, #12]
 800dd52:	4313      	orrs	r3, r2
 800dd54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800dd5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd62:	68fa      	ldr	r2, [r7, #12]
 800dd64:	431a      	orrs	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	b004      	add	sp, #16
 800dd78:	4770      	bx	lr

0800dd7a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b083      	sub	sp, #12
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	370c      	adds	r7, #12
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd92:	4770      	bx	lr

0800dd94 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	370c      	adds	r7, #12
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb4:	4770      	bx	lr

0800ddb6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b082      	sub	sp, #8
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2203      	movs	r2, #3
 800ddc2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ddc4:	2002      	movs	r0, #2
 800ddc6:	f7f9 fbc5 	bl	8007554 <HAL_Delay>
  
  return HAL_OK;
 800ddca:	2300      	movs	r3, #0
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b083      	sub	sp, #12
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f003 0303 	and.w	r3, r3, #3
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	370c      	adds	r7, #12
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b085      	sub	sp, #20
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	681a      	ldr	r2, [r3, #0]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800de14:	431a      	orrs	r2, r3
                       Command->CPSM);
 800de16:	683b      	ldr	r3, [r7, #0]
 800de18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800de1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800de1c:	68fa      	ldr	r2, [r7, #12]
 800de1e:	4313      	orrs	r3, r2
 800de20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800de2a:	f023 030f 	bic.w	r3, r3, #15
 800de2e:	68fa      	ldr	r2, [r7, #12]
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800de36:	2300      	movs	r3, #0
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	691b      	ldr	r3, [r3, #16]
 800de50:	b2db      	uxtb	r3, r3
}
 800de52:	4618      	mov	r0, r3
 800de54:	370c      	adds	r7, #12
 800de56:	46bd      	mov	sp, r7
 800de58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5c:	4770      	bx	lr

0800de5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800de5e:	b480      	push	{r7}
 800de60:	b085      	sub	sp, #20
 800de62:	af00      	add	r7, sp, #0
 800de64:	6078      	str	r0, [r7, #4]
 800de66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	3314      	adds	r3, #20
 800de6c:	461a      	mov	r2, r3
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	4413      	add	r3, r2
 800de72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	681b      	ldr	r3, [r3, #0]
}  
 800de78:	4618      	mov	r0, r3
 800de7a:	3714      	adds	r7, #20
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800de84:	b480      	push	{r7}
 800de86:	b085      	sub	sp, #20
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	685a      	ldr	r2, [r3, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800deaa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800deb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800deb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800deb8:	68fa      	ldr	r2, [r7, #12]
 800deba:	4313      	orrs	r3, r2
 800debc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	431a      	orrs	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dece:	2300      	movs	r3, #0

}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b088      	sub	sp, #32
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800deea:	2310      	movs	r3, #16
 800deec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800deee:	2340      	movs	r3, #64	; 0x40
 800def0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800def2:	2300      	movs	r3, #0
 800def4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800def6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800defa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800defc:	f107 0308 	add.w	r3, r7, #8
 800df00:	4619      	mov	r1, r3
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7ff ff74 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800df08:	f241 3288 	movw	r2, #5000	; 0x1388
 800df0c:	2110      	movs	r1, #16
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 fa40 	bl	800e394 <SDMMC_GetCmdResp1>
 800df14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df16:	69fb      	ldr	r3, [r7, #28]
}
 800df18:	4618      	mov	r0, r3
 800df1a:	3720      	adds	r7, #32
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}

0800df20 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b088      	sub	sp, #32
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800df2e:	2311      	movs	r3, #17
 800df30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df32:	2340      	movs	r3, #64	; 0x40
 800df34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df36:	2300      	movs	r3, #0
 800df38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df40:	f107 0308 	add.w	r3, r7, #8
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7ff ff52 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800df4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800df50:	2111      	movs	r1, #17
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 fa1e 	bl	800e394 <SDMMC_GetCmdResp1>
 800df58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df5a:	69fb      	ldr	r3, [r7, #28]
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	3720      	adds	r7, #32
 800df60:	46bd      	mov	sp, r7
 800df62:	bd80      	pop	{r7, pc}

0800df64 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b088      	sub	sp, #32
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800df72:	2312      	movs	r3, #18
 800df74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800df76:	2340      	movs	r3, #64	; 0x40
 800df78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800df7a:	2300      	movs	r3, #0
 800df7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800df7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800df84:	f107 0308 	add.w	r3, r7, #8
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff ff30 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800df90:	f241 3288 	movw	r2, #5000	; 0x1388
 800df94:	2112      	movs	r1, #18
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f9fc 	bl	800e394 <SDMMC_GetCmdResp1>
 800df9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800df9e:	69fb      	ldr	r3, [r7, #28]
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3720      	adds	r7, #32
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b088      	sub	sp, #32
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	6078      	str	r0, [r7, #4]
 800dfb0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800dfb6:	2318      	movs	r3, #24
 800dfb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfba:	2340      	movs	r3, #64	; 0x40
 800dfbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfc8:	f107 0308 	add.w	r3, r7, #8
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff ff0e 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800dfd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfd8:	2118      	movs	r1, #24
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f9da 	bl	800e394 <SDMMC_GetCmdResp1>
 800dfe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfe2:	69fb      	ldr	r3, [r7, #28]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3720      	adds	r7, #32
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b088      	sub	sp, #32
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800dffa:	2319      	movs	r3, #25
 800dffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dffe:	2340      	movs	r3, #64	; 0x40
 800e000:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e002:	2300      	movs	r3, #0
 800e004:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e00a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e00c:	f107 0308 	add.w	r3, r7, #8
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff feec 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e018:	f241 3288 	movw	r2, #5000	; 0x1388
 800e01c:	2119      	movs	r1, #25
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f9b8 	bl	800e394 <SDMMC_GetCmdResp1>
 800e024:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e026:	69fb      	ldr	r3, [r7, #28]
}
 800e028:	4618      	mov	r0, r3
 800e02a:	3720      	adds	r7, #32
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}

0800e030 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e038:	2300      	movs	r3, #0
 800e03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e03c:	230c      	movs	r3, #12
 800e03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e040:	2340      	movs	r3, #64	; 0x40
 800e042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e044:	2300      	movs	r3, #0
 800e046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e04c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e04e:	f107 0308 	add.w	r3, r7, #8
 800e052:	4619      	mov	r1, r3
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f7ff fecb 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e05a:	4a05      	ldr	r2, [pc, #20]	; (800e070 <SDMMC_CmdStopTransfer+0x40>)
 800e05c:	210c      	movs	r1, #12
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f998 	bl	800e394 <SDMMC_GetCmdResp1>
 800e064:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e066:	69fb      	ldr	r3, [r7, #28]
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	05f5e100 	.word	0x05f5e100

0800e074 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b08a      	sub	sp, #40	; 0x28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e080:	683b      	ldr	r3, [r7, #0]
 800e082:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e084:	2307      	movs	r3, #7
 800e086:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e088:	2340      	movs	r3, #64	; 0x40
 800e08a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e08c:	2300      	movs	r3, #0
 800e08e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e094:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e096:	f107 0310 	add.w	r3, r7, #16
 800e09a:	4619      	mov	r1, r3
 800e09c:	68f8      	ldr	r0, [r7, #12]
 800e09e:	f7ff fea7 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e0a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a6:	2107      	movs	r1, #7
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	f000 f973 	bl	800e394 <SDMMC_GetCmdResp1>
 800e0ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3728      	adds	r7, #40	; 0x28
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b088      	sub	sp, #32
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0d8:	f107 0308 	add.w	r3, r7, #8
 800e0dc:	4619      	mov	r1, r3
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f7ff fe86 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 f92d 	bl	800e344 <SDMMC_GetCmdError>
 800e0ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0ec:	69fb      	ldr	r3, [r7, #28]
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3720      	adds	r7, #32
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e0f6:	b580      	push	{r7, lr}
 800e0f8:	b088      	sub	sp, #32
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e0fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e104:	2308      	movs	r3, #8
 800e106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e108:	2340      	movs	r3, #64	; 0x40
 800e10a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e10c:	2300      	movs	r3, #0
 800e10e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e114:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e116:	f107 0308 	add.w	r3, r7, #8
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff fe67 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 fb16 	bl	800e754 <SDMMC_GetCmdResp7>
 800e128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e12a:	69fb      	ldr	r3, [r7, #28]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3720      	adds	r7, #32
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b088      	sub	sp, #32
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e142:	2337      	movs	r3, #55	; 0x37
 800e144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e146:	2340      	movs	r3, #64	; 0x40
 800e148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e14a:	2300      	movs	r3, #0
 800e14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e152:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e154:	f107 0308 	add.w	r3, r7, #8
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff fe48 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e160:	f241 3288 	movw	r2, #5000	; 0x1388
 800e164:	2137      	movs	r1, #55	; 0x37
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f914 	bl	800e394 <SDMMC_GetCmdResp1>
 800e16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e16e:	69fb      	ldr	r3, [r7, #28]
}
 800e170:	4618      	mov	r0, r3
 800e172:	3720      	adds	r7, #32
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b088      	sub	sp, #32
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e18c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e18e:	2329      	movs	r3, #41	; 0x29
 800e190:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e192:	2340      	movs	r3, #64	; 0x40
 800e194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e196:	2300      	movs	r3, #0
 800e198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e19a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e19e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1a0:	f107 0308 	add.w	r3, r7, #8
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f7ff fe22 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 fa23 	bl	800e5f8 <SDMMC_GetCmdResp3>
 800e1b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1b4:	69fb      	ldr	r3, [r7, #28]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3720      	adds	r7, #32
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b088      	sub	sp, #32
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e1cc:	2306      	movs	r3, #6
 800e1ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1d0:	2340      	movs	r3, #64	; 0x40
 800e1d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1de:	f107 0308 	add.w	r3, r7, #8
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff fe03 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1ee:	2106      	movs	r1, #6
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f000 f8cf 	bl	800e394 <SDMMC_GetCmdResp1>
 800e1f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1f8:	69fb      	ldr	r3, [r7, #28]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3720      	adds	r7, #32
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}

0800e202 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b088      	sub	sp, #32
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e20a:	2300      	movs	r3, #0
 800e20c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e20e:	2333      	movs	r3, #51	; 0x33
 800e210:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e212:	2340      	movs	r3, #64	; 0x40
 800e214:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e216:	2300      	movs	r3, #0
 800e218:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e21e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e220:	f107 0308 	add.w	r3, r7, #8
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff fde2 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e230:	2133      	movs	r1, #51	; 0x33
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 f8ae 	bl	800e394 <SDMMC_GetCmdResp1>
 800e238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e23a:	69fb      	ldr	r3, [r7, #28]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3720      	adds	r7, #32
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b088      	sub	sp, #32
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e24c:	2300      	movs	r3, #0
 800e24e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e250:	2302      	movs	r3, #2
 800e252:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e254:	23c0      	movs	r3, #192	; 0xc0
 800e256:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e258:	2300      	movs	r3, #0
 800e25a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e260:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e262:	f107 0308 	add.w	r3, r7, #8
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fdc1 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f97c 	bl	800e56c <SDMMC_GetCmdResp2>
 800e274:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e276:	69fb      	ldr	r3, [r7, #28]
}
 800e278:	4618      	mov	r0, r3
 800e27a:	3720      	adds	r7, #32
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}

0800e280 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b088      	sub	sp, #32
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e28e:	2309      	movs	r3, #9
 800e290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e292:	23c0      	movs	r3, #192	; 0xc0
 800e294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e296:	2300      	movs	r3, #0
 800e298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2a0:	f107 0308 	add.w	r3, r7, #8
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff fda2 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 f95d 	bl	800e56c <SDMMC_GetCmdResp2>
 800e2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3720      	adds	r7, #32
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b088      	sub	sp, #32
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e2cc:	2303      	movs	r3, #3
 800e2ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2d0:	2340      	movs	r3, #64	; 0x40
 800e2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff fd83 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e2ea:	683a      	ldr	r2, [r7, #0]
 800e2ec:	2103      	movs	r1, #3
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f9bc 	bl	800e66c <SDMMC_GetCmdResp6>
 800e2f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2f6:	69fb      	ldr	r3, [r7, #28]
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3720      	adds	r7, #32
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b088      	sub	sp, #32
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e30e:	230d      	movs	r3, #13
 800e310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e31e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e320:	f107 0308 	add.w	r3, r7, #8
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fd62 	bl	800ddf0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e330:	210d      	movs	r1, #13
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f82e 	bl	800e394 <SDMMC_GetCmdResp1>
 800e338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e33a:	69fb      	ldr	r3, [r7, #28]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e344:	b490      	push	{r4, r7}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e34c:	4b0f      	ldr	r3, [pc, #60]	; (800e38c <SDMMC_GetCmdError+0x48>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a0f      	ldr	r2, [pc, #60]	; (800e390 <SDMMC_GetCmdError+0x4c>)
 800e352:	fba2 2303 	umull	r2, r3, r2, r3
 800e356:	0a5b      	lsrs	r3, r3, #9
 800e358:	f241 3288 	movw	r2, #5000	; 0x1388
 800e35c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e360:	4623      	mov	r3, r4
 800e362:	1e5c      	subs	r4, r3, #1
 800e364:	2b00      	cmp	r3, #0
 800e366:	d102      	bne.n	800e36e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e368:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e36c:	e009      	b.n	800e382 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e376:	2b00      	cmp	r3, #0
 800e378:	d0f2      	beq.n	800e360 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	22c5      	movs	r2, #197	; 0xc5
 800e37e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3708      	adds	r7, #8
 800e386:	46bd      	mov	sp, r7
 800e388:	bc90      	pop	{r4, r7}
 800e38a:	4770      	bx	lr
 800e38c:	20000000 	.word	0x20000000
 800e390:	10624dd3 	.word	0x10624dd3

0800e394 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e394:	b590      	push	{r4, r7, lr}
 800e396:	b087      	sub	sp, #28
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	460b      	mov	r3, r1
 800e39e:	607a      	str	r2, [r7, #4]
 800e3a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e3a2:	4b6f      	ldr	r3, [pc, #444]	; (800e560 <SDMMC_GetCmdResp1+0x1cc>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a6f      	ldr	r2, [pc, #444]	; (800e564 <SDMMC_GetCmdResp1+0x1d0>)
 800e3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ac:	0a5b      	lsrs	r3, r3, #9
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e3b4:	4623      	mov	r3, r4
 800e3b6:	1e5c      	subs	r4, r3, #1
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d102      	bne.n	800e3c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e3bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3c0:	e0c9      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d0f0      	beq.n	800e3b4 <SDMMC_GetCmdResp1+0x20>
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d1eb      	bne.n	800e3b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3e0:	f003 0304 	and.w	r3, r3, #4
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d004      	beq.n	800e3f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2204      	movs	r2, #4
 800e3ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e3ee:	2304      	movs	r3, #4
 800e3f0:	e0b1      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d004      	beq.n	800e408 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e404:	2301      	movs	r3, #1
 800e406:	e0a6      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	22c5      	movs	r2, #197	; 0xc5
 800e40c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff fd18 	bl	800de44 <SDIO_GetCommandResponse>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	7afb      	ldrb	r3, [r7, #11]
 800e41a:	4293      	cmp	r3, r2
 800e41c:	d001      	beq.n	800e422 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e41e:	2301      	movs	r3, #1
 800e420:	e099      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e422:	2100      	movs	r1, #0
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7ff fd1a 	bl	800de5e <SDIO_GetResponse>
 800e42a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	4b4e      	ldr	r3, [pc, #312]	; (800e568 <SDMMC_GetCmdResp1+0x1d4>)
 800e430:	4013      	ands	r3, r2
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e436:	2300      	movs	r3, #0
 800e438:	e08d      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	da02      	bge.n	800e446 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e444:	e087      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e446:	693b      	ldr	r3, [r7, #16]
 800e448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e450:	2340      	movs	r3, #64	; 0x40
 800e452:	e080      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e45e:	2380      	movs	r3, #128	; 0x80
 800e460:	e079      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e46c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e470:	e071      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d002      	beq.n	800e482 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e47c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e480:	e069      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d002      	beq.n	800e492 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e48c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e490:	e061      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e49c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4a0:	e059      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d002      	beq.n	800e4b2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e4ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e4b0:	e051      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d002      	beq.n	800e4c2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e4bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e4c0:	e049      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e4cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e4d0:	e041      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d002      	beq.n	800e4e2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e4dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e4e0:	e039      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d002      	beq.n	800e4f2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e4ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e4f0:	e031      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d002      	beq.n	800e502 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e4fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e500:	e029      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e502:	693b      	ldr	r3, [r7, #16]
 800e504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e50c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e510:	e021      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d002      	beq.n	800e522 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e51c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e520:	e019      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d002      	beq.n	800e532 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e52c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e530:	e011      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e53c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e540:	e009      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	f003 0308 	and.w	r3, r3, #8
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e54c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e550:	e001      	b.n	800e556 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e556:	4618      	mov	r0, r3
 800e558:	371c      	adds	r7, #28
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd90      	pop	{r4, r7, pc}
 800e55e:	bf00      	nop
 800e560:	20000000 	.word	0x20000000
 800e564:	10624dd3 	.word	0x10624dd3
 800e568:	fdffe008 	.word	0xfdffe008

0800e56c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e56c:	b490      	push	{r4, r7}
 800e56e:	b084      	sub	sp, #16
 800e570:	af00      	add	r7, sp, #0
 800e572:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e574:	4b1e      	ldr	r3, [pc, #120]	; (800e5f0 <SDMMC_GetCmdResp2+0x84>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	4a1e      	ldr	r2, [pc, #120]	; (800e5f4 <SDMMC_GetCmdResp2+0x88>)
 800e57a:	fba2 2303 	umull	r2, r3, r2, r3
 800e57e:	0a5b      	lsrs	r3, r3, #9
 800e580:	f241 3288 	movw	r2, #5000	; 0x1388
 800e584:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e588:	4623      	mov	r3, r4
 800e58a:	1e5c      	subs	r4, r3, #1
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d102      	bne.n	800e596 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e594:	e026      	b.n	800e5e4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e59a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d0f0      	beq.n	800e588 <SDMMC_GetCmdResp2+0x1c>
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1eb      	bne.n	800e588 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5b4:	f003 0304 	and.w	r3, r3, #4
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d004      	beq.n	800e5c6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2204      	movs	r2, #4
 800e5c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e5c2:	2304      	movs	r3, #4
 800e5c4:	e00e      	b.n	800e5e4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5ca:	f003 0301 	and.w	r3, r3, #1
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d004      	beq.n	800e5dc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e5d8:	2301      	movs	r3, #1
 800e5da:	e003      	b.n	800e5e4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	22c5      	movs	r2, #197	; 0xc5
 800e5e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bc90      	pop	{r4, r7}
 800e5ec:	4770      	bx	lr
 800e5ee:	bf00      	nop
 800e5f0:	20000000 	.word	0x20000000
 800e5f4:	10624dd3 	.word	0x10624dd3

0800e5f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e5f8:	b490      	push	{r4, r7}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e600:	4b18      	ldr	r3, [pc, #96]	; (800e664 <SDMMC_GetCmdResp3+0x6c>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a18      	ldr	r2, [pc, #96]	; (800e668 <SDMMC_GetCmdResp3+0x70>)
 800e606:	fba2 2303 	umull	r2, r3, r2, r3
 800e60a:	0a5b      	lsrs	r3, r3, #9
 800e60c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e610:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e614:	4623      	mov	r3, r4
 800e616:	1e5c      	subs	r4, r3, #1
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d102      	bne.n	800e622 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e61c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e620:	e01b      	b.n	800e65a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e626:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d0f0      	beq.n	800e614 <SDMMC_GetCmdResp3+0x1c>
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d1eb      	bne.n	800e614 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2204      	movs	r2, #4
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e64e:	2304      	movs	r3, #4
 800e650:	e003      	b.n	800e65a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	22c5      	movs	r2, #197	; 0xc5
 800e656:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bc90      	pop	{r4, r7}
 800e662:	4770      	bx	lr
 800e664:	20000000 	.word	0x20000000
 800e668:	10624dd3 	.word	0x10624dd3

0800e66c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e66c:	b590      	push	{r4, r7, lr}
 800e66e:	b087      	sub	sp, #28
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	460b      	mov	r3, r1
 800e676:	607a      	str	r2, [r7, #4]
 800e678:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e67a:	4b34      	ldr	r3, [pc, #208]	; (800e74c <SDMMC_GetCmdResp6+0xe0>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	4a34      	ldr	r2, [pc, #208]	; (800e750 <SDMMC_GetCmdResp6+0xe4>)
 800e680:	fba2 2303 	umull	r2, r3, r2, r3
 800e684:	0a5b      	lsrs	r3, r3, #9
 800e686:	f241 3288 	movw	r2, #5000	; 0x1388
 800e68a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e68e:	4623      	mov	r3, r4
 800e690:	1e5c      	subs	r4, r3, #1
 800e692:	2b00      	cmp	r3, #0
 800e694:	d102      	bne.n	800e69c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e696:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e69a:	e052      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d0f0      	beq.n	800e68e <SDMMC_GetCmdResp6+0x22>
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d1eb      	bne.n	800e68e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ba:	f003 0304 	and.w	r3, r3, #4
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d004      	beq.n	800e6cc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2204      	movs	r2, #4
 800e6c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c8:	2304      	movs	r3, #4
 800e6ca:	e03a      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d0:	f003 0301 	and.w	r3, r3, #1
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d004      	beq.n	800e6e2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2201      	movs	r2, #1
 800e6dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e02f      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff fbae 	bl	800de44 <SDIO_GetCommandResponse>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	7afb      	ldrb	r3, [r7, #11]
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d001      	beq.n	800e6f6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e025      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	22c5      	movs	r2, #197	; 0xc5
 800e6fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f7ff fbad 	bl	800de5e <SDIO_GetResponse>
 800e704:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	0c1b      	lsrs	r3, r3, #16
 800e714:	b29a      	uxth	r2, r3
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e71a:	2300      	movs	r3, #0
 800e71c:	e011      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e724:	2b00      	cmp	r3, #0
 800e726:	d002      	beq.n	800e72e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e728:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e72c:	e009      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e734:	2b00      	cmp	r3, #0
 800e736:	d002      	beq.n	800e73e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e73c:	e001      	b.n	800e742 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e73e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20000000 	.word	0x20000000
 800e750:	10624dd3 	.word	0x10624dd3

0800e754 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e754:	b490      	push	{r4, r7}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e75c:	4b21      	ldr	r3, [pc, #132]	; (800e7e4 <SDMMC_GetCmdResp7+0x90>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a21      	ldr	r2, [pc, #132]	; (800e7e8 <SDMMC_GetCmdResp7+0x94>)
 800e762:	fba2 2303 	umull	r2, r3, r2, r3
 800e766:	0a5b      	lsrs	r3, r3, #9
 800e768:	f241 3288 	movw	r2, #5000	; 0x1388
 800e76c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e770:	4623      	mov	r3, r4
 800e772:	1e5c      	subs	r4, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d102      	bne.n	800e77e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e778:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e77c:	e02c      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e782:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d0f0      	beq.n	800e770 <SDMMC_GetCmdResp7+0x1c>
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e794:	2b00      	cmp	r3, #0
 800e796:	d1eb      	bne.n	800e770 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79c:	f003 0304 	and.w	r3, r3, #4
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d004      	beq.n	800e7ae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2204      	movs	r2, #4
 800e7a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7aa:	2304      	movs	r3, #4
 800e7ac:	e014      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	f003 0301 	and.w	r3, r3, #1
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2201      	movs	r2, #1
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	e009      	b.n	800e7d8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d002      	beq.n	800e7d6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2240      	movs	r2, #64	; 0x40
 800e7d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e7d6:	2300      	movs	r3, #0
  
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bc90      	pop	{r4, r7}
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20000000 	.word	0x20000000
 800e7e8:	10624dd3 	.word	0x10624dd3

0800e7ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e7f0:	4904      	ldr	r1, [pc, #16]	; (800e804 <MX_FATFS_Init+0x18>)
 800e7f2:	4805      	ldr	r0, [pc, #20]	; (800e808 <MX_FATFS_Init+0x1c>)
 800e7f4:	f003 fb9c 	bl	8011f30 <FATFS_LinkDriver>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	461a      	mov	r2, r3
 800e7fc:	4b03      	ldr	r3, [pc, #12]	; (800e80c <MX_FATFS_Init+0x20>)
 800e7fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e800:	bf00      	nop
 800e802:	bd80      	pop	{r7, pc}
 800e804:	20035f38 	.word	0x20035f38
 800e808:	0801842c 	.word	0x0801842c
 800e80c:	20035f34 	.word	0x20035f34

0800e810 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e81a:	f000 f896 	bl	800e94a <BSP_SD_IsDetected>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b01      	cmp	r3, #1
 800e822:	d001      	beq.n	800e828 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	e012      	b.n	800e84e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e828:	480b      	ldr	r0, [pc, #44]	; (800e858 <BSP_SD_Init+0x48>)
 800e82a:	f7fb ffa5 	bl	800a778 <HAL_SD_Init>
 800e82e:	4603      	mov	r3, r0
 800e830:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e832:	79fb      	ldrb	r3, [r7, #7]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d109      	bne.n	800e84c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e83c:	4806      	ldr	r0, [pc, #24]	; (800e858 <BSP_SD_Init+0x48>)
 800e83e:	f7fc fd4f 	bl	800b2e0 <HAL_SD_ConfigWideBusOperation>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e84c:	79fb      	ldrb	r3, [r7, #7]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3708      	adds	r7, #8
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}
 800e856:	bf00      	nop
 800e858:	20035d30 	.word	0x20035d30

0800e85c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b086      	sub	sp, #24
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e868:	2300      	movs	r3, #0
 800e86a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	68f9      	ldr	r1, [r7, #12]
 800e872:	4806      	ldr	r0, [pc, #24]	; (800e88c <BSP_SD_ReadBlocks_DMA+0x30>)
 800e874:	f7fc f810 	bl	800a898 <HAL_SD_ReadBlocks_DMA>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e87e:	2301      	movs	r3, #1
 800e880:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e882:	7dfb      	ldrb	r3, [r7, #23]
}
 800e884:	4618      	mov	r0, r3
 800e886:	3718      	adds	r7, #24
 800e888:	46bd      	mov	sp, r7
 800e88a:	bd80      	pop	{r7, pc}
 800e88c:	20035d30 	.word	0x20035d30

0800e890 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b086      	sub	sp, #24
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e89c:	2300      	movs	r3, #0
 800e89e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68ba      	ldr	r2, [r7, #8]
 800e8a4:	68f9      	ldr	r1, [r7, #12]
 800e8a6:	4806      	ldr	r0, [pc, #24]	; (800e8c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e8a8:	f7fc f8de 	bl	800aa68 <HAL_SD_WriteBlocks_DMA>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e8b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3718      	adds	r7, #24
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}
 800e8c0:	20035d30 	.word	0x20035d30

0800e8c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e8c8:	4805      	ldr	r0, [pc, #20]	; (800e8e0 <BSP_SD_GetCardState+0x1c>)
 800e8ca:	f7fc fd85 	bl	800b3d8 <HAL_SD_GetCardState>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	2b04      	cmp	r3, #4
 800e8d2:	bf14      	ite	ne
 800e8d4:	2301      	movne	r3, #1
 800e8d6:	2300      	moveq	r3, #0
 800e8d8:	b2db      	uxtb	r3, r3
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	20035d30 	.word	0x20035d30

0800e8e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b082      	sub	sp, #8
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e8ec:	6879      	ldr	r1, [r7, #4]
 800e8ee:	4803      	ldr	r0, [pc, #12]	; (800e8fc <BSP_SD_GetCardInfo+0x18>)
 800e8f0:	f7fc fcca 	bl	800b288 <HAL_SD_GetCardInfo>
}
 800e8f4:	bf00      	nop
 800e8f6:	3708      	adds	r7, #8
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20035d30 	.word	0x20035d30

0800e900 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b082      	sub	sp, #8
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e908:	f000 f818 	bl	800e93c <BSP_SD_AbortCallback>
}
 800e90c:	bf00      	nop
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e91c:	f000 f9a8 	bl	800ec70 <BSP_SD_WriteCpltCallback>
}
 800e920:	bf00      	nop
 800e922:	3708      	adds	r7, #8
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e930:	f000 f9aa 	bl	800ec88 <BSP_SD_ReadCpltCallback>
}
 800e934:	bf00      	nop
 800e936:	3708      	adds	r7, #8
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e93c:	b480      	push	{r7}
 800e93e:	af00      	add	r7, sp, #0

}
 800e940:	bf00      	nop
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e950:	2301      	movs	r3, #1
 800e952:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e954:	f000 f80c 	bl	800e970 <BSP_PlatformIsDetected>
 800e958:	4603      	mov	r3, r0
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d101      	bne.n	800e962 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e95e:	2300      	movs	r3, #0
 800e960:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	b2db      	uxtb	r3, r3
}
 800e966:	4618      	mov	r0, r3
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
	...

0800e970 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e976:	2301      	movs	r3, #1
 800e978:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e97a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e97e:	4806      	ldr	r0, [pc, #24]	; (800e998 <BSP_PlatformIsDetected+0x28>)
 800e980:	f7fa f866 	bl	8008a50 <HAL_GPIO_ReadPin>
 800e984:	4603      	mov	r3, r0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d001      	beq.n	800e98e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800e98a:	2300      	movs	r3, #0
 800e98c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e98e:	79fb      	ldrb	r3, [r7, #7]
}
 800e990:	4618      	mov	r0, r3
 800e992:	3708      	adds	r7, #8
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	40020000 	.word	0x40020000

0800e99c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	b084      	sub	sp, #16
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e9a4:	f7f8 fdca 	bl	800753c <HAL_GetTick>
 800e9a8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e9aa:	e006      	b.n	800e9ba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e9ac:	f7ff ff8a 	bl	800e8c4 <BSP_SD_GetCardState>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e009      	b.n	800e9ce <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e9ba:	f7f8 fdbf 	bl	800753c <HAL_GetTick>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	1ad3      	subs	r3, r2, r3
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d8f0      	bhi.n	800e9ac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e9ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	3710      	adds	r7, #16
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}
	...

0800e9d8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e9e2:	4b0b      	ldr	r3, [pc, #44]	; (800ea10 <SD_CheckStatus+0x38>)
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e9e8:	f7ff ff6c 	bl	800e8c4 <BSP_SD_GetCardState>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d107      	bne.n	800ea02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e9f2:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <SD_CheckStatus+0x38>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	f023 0301 	bic.w	r3, r3, #1
 800e9fc:	b2da      	uxtb	r2, r3
 800e9fe:	4b04      	ldr	r3, [pc, #16]	; (800ea10 <SD_CheckStatus+0x38>)
 800ea00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ea02:	4b03      	ldr	r3, [pc, #12]	; (800ea10 <SD_CheckStatus+0x38>)
 800ea04:	781b      	ldrb	r3, [r3, #0]
 800ea06:	b2db      	uxtb	r3, r3
}
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3708      	adds	r7, #8
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}
 800ea10:	20000009 	.word	0x20000009

0800ea14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ea1e:	f7ff fef7 	bl	800e810 <BSP_SD_Init>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d107      	bne.n	800ea38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800ea28:	79fb      	ldrb	r3, [r7, #7]
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff ffd4 	bl	800e9d8 <SD_CheckStatus>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
 800ea34:	4b04      	ldr	r3, [pc, #16]	; (800ea48 <SD_initialize+0x34>)
 800ea36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ea38:	4b03      	ldr	r3, [pc, #12]	; (800ea48 <SD_initialize+0x34>)
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	b2db      	uxtb	r3, r3
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	20000009 	.word	0x20000009

0800ea4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	4603      	mov	r3, r0
 800ea54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ea56:	79fb      	ldrb	r3, [r7, #7]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff ffbd 	bl	800e9d8 <SD_CheckStatus>
 800ea5e:	4603      	mov	r3, r0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60b9      	str	r1, [r7, #8]
 800ea70:	607a      	str	r2, [r7, #4]
 800ea72:	603b      	str	r3, [r7, #0]
 800ea74:	4603      	mov	r3, r0
 800ea76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ea7c:	f247 5030 	movw	r0, #30000	; 0x7530
 800ea80:	f7ff ff8c 	bl	800e99c <SD_CheckStatusWithTimeout>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	da01      	bge.n	800ea8e <SD_read+0x26>
  {
    return res;
 800ea8a:	7dfb      	ldrb	r3, [r7, #23]
 800ea8c:	e03b      	b.n	800eb06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	6879      	ldr	r1, [r7, #4]
 800ea92:	68b8      	ldr	r0, [r7, #8]
 800ea94:	f7ff fee2 	bl	800e85c <BSP_SD_ReadBlocks_DMA>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d132      	bne.n	800eb04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800ea9e:	4b1c      	ldr	r3, [pc, #112]	; (800eb10 <SD_read+0xa8>)
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800eaa4:	f7f8 fd4a 	bl	800753c <HAL_GetTick>
 800eaa8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800eaaa:	bf00      	nop
 800eaac:	4b18      	ldr	r3, [pc, #96]	; (800eb10 <SD_read+0xa8>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d108      	bne.n	800eac6 <SD_read+0x5e>
 800eab4:	f7f8 fd42 	bl	800753c <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	f247 522f 	movw	r2, #29999	; 0x752f
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d9f2      	bls.n	800eaac <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800eac6:	4b12      	ldr	r3, [pc, #72]	; (800eb10 <SD_read+0xa8>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d102      	bne.n	800ead4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	75fb      	strb	r3, [r7, #23]
 800ead2:	e017      	b.n	800eb04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ead4:	4b0e      	ldr	r3, [pc, #56]	; (800eb10 <SD_read+0xa8>)
 800ead6:	2200      	movs	r2, #0
 800ead8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800eada:	f7f8 fd2f 	bl	800753c <HAL_GetTick>
 800eade:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eae0:	e007      	b.n	800eaf2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eae2:	f7ff feef 	bl	800e8c4 <BSP_SD_GetCardState>
 800eae6:	4603      	mov	r3, r0
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d102      	bne.n	800eaf2 <SD_read+0x8a>
          {
            res = RES_OK;
 800eaec:	2300      	movs	r3, #0
 800eaee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800eaf0:	e008      	b.n	800eb04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eaf2:	f7f8 fd23 	bl	800753c <HAL_GetTick>
 800eaf6:	4602      	mov	r2, r0
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	f247 522f 	movw	r2, #29999	; 0x752f
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d9ee      	bls.n	800eae2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3718      	adds	r7, #24
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200335cc 	.word	0x200335cc

0800eb14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b086      	sub	sp, #24
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60b9      	str	r1, [r7, #8]
 800eb1c:	607a      	str	r2, [r7, #4]
 800eb1e:	603b      	str	r3, [r7, #0]
 800eb20:	4603      	mov	r3, r0
 800eb22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eb24:	2301      	movs	r3, #1
 800eb26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800eb28:	4b24      	ldr	r3, [pc, #144]	; (800ebbc <SD_write+0xa8>)
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eb2e:	f247 5030 	movw	r0, #30000	; 0x7530
 800eb32:	f7ff ff33 	bl	800e99c <SD_CheckStatusWithTimeout>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	da01      	bge.n	800eb40 <SD_write+0x2c>
  {
    return res;
 800eb3c:	7dfb      	ldrb	r3, [r7, #23]
 800eb3e:	e038      	b.n	800ebb2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800eb40:	683a      	ldr	r2, [r7, #0]
 800eb42:	6879      	ldr	r1, [r7, #4]
 800eb44:	68b8      	ldr	r0, [r7, #8]
 800eb46:	f7ff fea3 	bl	800e890 <BSP_SD_WriteBlocks_DMA>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d12f      	bne.n	800ebb0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800eb50:	f7f8 fcf4 	bl	800753c <HAL_GetTick>
 800eb54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800eb56:	bf00      	nop
 800eb58:	4b18      	ldr	r3, [pc, #96]	; (800ebbc <SD_write+0xa8>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d108      	bne.n	800eb72 <SD_write+0x5e>
 800eb60:	f7f8 fcec 	bl	800753c <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	f247 522f 	movw	r2, #29999	; 0x752f
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d9f2      	bls.n	800eb58 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800eb72:	4b12      	ldr	r3, [pc, #72]	; (800ebbc <SD_write+0xa8>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d102      	bne.n	800eb80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	75fb      	strb	r3, [r7, #23]
 800eb7e:	e017      	b.n	800ebb0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800eb80:	4b0e      	ldr	r3, [pc, #56]	; (800ebbc <SD_write+0xa8>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800eb86:	f7f8 fcd9 	bl	800753c <HAL_GetTick>
 800eb8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eb8c:	e007      	b.n	800eb9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eb8e:	f7ff fe99 	bl	800e8c4 <BSP_SD_GetCardState>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d102      	bne.n	800eb9e <SD_write+0x8a>
          {
            res = RES_OK;
 800eb98:	2300      	movs	r3, #0
 800eb9a:	75fb      	strb	r3, [r7, #23]
            break;
 800eb9c:	e008      	b.n	800ebb0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800eb9e:	f7f8 fccd 	bl	800753c <HAL_GetTick>
 800eba2:	4602      	mov	r2, r0
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	f247 522f 	movw	r2, #29999	; 0x752f
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d9ee      	bls.n	800eb8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ebb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3718      	adds	r7, #24
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop
 800ebbc:	200335c8 	.word	0x200335c8

0800ebc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b08c      	sub	sp, #48	; 0x30
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	603a      	str	r2, [r7, #0]
 800ebca:	71fb      	strb	r3, [r7, #7]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ebd6:	4b25      	ldr	r3, [pc, #148]	; (800ec6c <SD_ioctl+0xac>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	b2db      	uxtb	r3, r3
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d001      	beq.n	800ebe8 <SD_ioctl+0x28>
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	e03c      	b.n	800ec62 <SD_ioctl+0xa2>

  switch (cmd)
 800ebe8:	79bb      	ldrb	r3, [r7, #6]
 800ebea:	2b03      	cmp	r3, #3
 800ebec:	d834      	bhi.n	800ec58 <SD_ioctl+0x98>
 800ebee:	a201      	add	r2, pc, #4	; (adr r2, 800ebf4 <SD_ioctl+0x34>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec05 	.word	0x0800ec05
 800ebf8:	0800ec0d 	.word	0x0800ec0d
 800ebfc:	0800ec25 	.word	0x0800ec25
 800ec00:	0800ec3f 	.word	0x0800ec3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ec04:	2300      	movs	r3, #0
 800ec06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec0a:	e028      	b.n	800ec5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec0c:	f107 030c 	add.w	r3, r7, #12
 800ec10:	4618      	mov	r0, r3
 800ec12:	f7ff fe67 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ec16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec22:	e01c      	b.n	800ec5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec24:	f107 030c 	add.w	r3, r7, #12
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f7ff fe5b 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ec2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec30:	b29a      	uxth	r2, r3
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ec36:	2300      	movs	r3, #0
 800ec38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec3c:	e00f      	b.n	800ec5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ec3e:	f107 030c 	add.w	r3, r7, #12
 800ec42:	4618      	mov	r0, r3
 800ec44:	f7ff fe4e 	bl	800e8e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ec48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec4a:	0a5a      	lsrs	r2, r3, #9
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ec56:	e002      	b.n	800ec5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ec58:	2304      	movs	r3, #4
 800ec5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ec5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3730      	adds	r7, #48	; 0x30
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	20000009 	.word	0x20000009

0800ec70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ec70:	b480      	push	{r7}
 800ec72:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ec74:	4b03      	ldr	r3, [pc, #12]	; (800ec84 <BSP_SD_WriteCpltCallback+0x14>)
 800ec76:	2201      	movs	r2, #1
 800ec78:	601a      	str	r2, [r3, #0]
}
 800ec7a:	bf00      	nop
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr
 800ec84:	200335c8 	.word	0x200335c8

0800ec88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ec8c:	4b03      	ldr	r3, [pc, #12]	; (800ec9c <BSP_SD_ReadCpltCallback+0x14>)
 800ec8e:	2201      	movs	r2, #1
 800ec90:	601a      	str	r2, [r3, #0]
}
 800ec92:	bf00      	nop
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	200335cc 	.word	0x200335cc

0800eca0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b084      	sub	sp, #16
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ecaa:	79fb      	ldrb	r3, [r7, #7]
 800ecac:	4a08      	ldr	r2, [pc, #32]	; (800ecd0 <disk_status+0x30>)
 800ecae:	009b      	lsls	r3, r3, #2
 800ecb0:	4413      	add	r3, r2
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	685b      	ldr	r3, [r3, #4]
 800ecb6:	79fa      	ldrb	r2, [r7, #7]
 800ecb8:	4905      	ldr	r1, [pc, #20]	; (800ecd0 <disk_status+0x30>)
 800ecba:	440a      	add	r2, r1
 800ecbc:	7a12      	ldrb	r2, [r2, #8]
 800ecbe:	4610      	mov	r0, r2
 800ecc0:	4798      	blx	r3
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ecc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	200335f8 	.word	0x200335f8

0800ecd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	4603      	mov	r3, r0
 800ecdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ecde:	2300      	movs	r3, #0
 800ece0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ece2:	79fb      	ldrb	r3, [r7, #7]
 800ece4:	4a0d      	ldr	r2, [pc, #52]	; (800ed1c <disk_initialize+0x48>)
 800ece6:	5cd3      	ldrb	r3, [r2, r3]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d111      	bne.n	800ed10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	4a0b      	ldr	r2, [pc, #44]	; (800ed1c <disk_initialize+0x48>)
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ecf4:	79fb      	ldrb	r3, [r7, #7]
 800ecf6:	4a09      	ldr	r2, [pc, #36]	; (800ed1c <disk_initialize+0x48>)
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	79fa      	ldrb	r2, [r7, #7]
 800ed02:	4906      	ldr	r1, [pc, #24]	; (800ed1c <disk_initialize+0x48>)
 800ed04:	440a      	add	r2, r1
 800ed06:	7a12      	ldrb	r2, [r2, #8]
 800ed08:	4610      	mov	r0, r2
 800ed0a:	4798      	blx	r3
 800ed0c:	4603      	mov	r3, r0
 800ed0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ed10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3710      	adds	r7, #16
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	200335f8 	.word	0x200335f8

0800ed20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ed20:	b590      	push	{r4, r7, lr}
 800ed22:	b087      	sub	sp, #28
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60b9      	str	r1, [r7, #8]
 800ed28:	607a      	str	r2, [r7, #4]
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ed30:	7bfb      	ldrb	r3, [r7, #15]
 800ed32:	4a0a      	ldr	r2, [pc, #40]	; (800ed5c <disk_read+0x3c>)
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	685b      	ldr	r3, [r3, #4]
 800ed3a:	689c      	ldr	r4, [r3, #8]
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
 800ed3e:	4a07      	ldr	r2, [pc, #28]	; (800ed5c <disk_read+0x3c>)
 800ed40:	4413      	add	r3, r2
 800ed42:	7a18      	ldrb	r0, [r3, #8]
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	687a      	ldr	r2, [r7, #4]
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	47a0      	blx	r4
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ed50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	371c      	adds	r7, #28
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd90      	pop	{r4, r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	200335f8 	.word	0x200335f8

0800ed60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ed60:	b590      	push	{r4, r7, lr}
 800ed62:	b087      	sub	sp, #28
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	60b9      	str	r1, [r7, #8]
 800ed68:	607a      	str	r2, [r7, #4]
 800ed6a:	603b      	str	r3, [r7, #0]
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	4a0a      	ldr	r2, [pc, #40]	; (800ed9c <disk_write+0x3c>)
 800ed74:	009b      	lsls	r3, r3, #2
 800ed76:	4413      	add	r3, r2
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	68dc      	ldr	r4, [r3, #12]
 800ed7c:	7bfb      	ldrb	r3, [r7, #15]
 800ed7e:	4a07      	ldr	r2, [pc, #28]	; (800ed9c <disk_write+0x3c>)
 800ed80:	4413      	add	r3, r2
 800ed82:	7a18      	ldrb	r0, [r3, #8]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	68b9      	ldr	r1, [r7, #8]
 800ed8a:	47a0      	blx	r4
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	371c      	adds	r7, #28
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd90      	pop	{r4, r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	200335f8 	.word	0x200335f8

0800eda0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	603a      	str	r2, [r7, #0]
 800edaa:	71fb      	strb	r3, [r7, #7]
 800edac:	460b      	mov	r3, r1
 800edae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800edb0:	79fb      	ldrb	r3, [r7, #7]
 800edb2:	4a09      	ldr	r2, [pc, #36]	; (800edd8 <disk_ioctl+0x38>)
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4413      	add	r3, r2
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	79fa      	ldrb	r2, [r7, #7]
 800edbe:	4906      	ldr	r1, [pc, #24]	; (800edd8 <disk_ioctl+0x38>)
 800edc0:	440a      	add	r2, r1
 800edc2:	7a10      	ldrb	r0, [r2, #8]
 800edc4:	79b9      	ldrb	r1, [r7, #6]
 800edc6:	683a      	ldr	r2, [r7, #0]
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	73fb      	strb	r3, [r7, #15]
  return res;
 800edce:	7bfb      	ldrb	r3, [r7, #15]
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	200335f8 	.word	0x200335f8

0800eddc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eddc:	b480      	push	{r7}
 800edde:	b085      	sub	sp, #20
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3301      	adds	r3, #1
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800edec:	89fb      	ldrh	r3, [r7, #14]
 800edee:	021b      	lsls	r3, r3, #8
 800edf0:	b21a      	sxth	r2, r3
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	b21b      	sxth	r3, r3
 800edf8:	4313      	orrs	r3, r2
 800edfa:	b21b      	sxth	r3, r3
 800edfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800edfe:	89fb      	ldrh	r3, [r7, #14]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3714      	adds	r7, #20
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	3303      	adds	r3, #3
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	021b      	lsls	r3, r3, #8
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	3202      	adds	r2, #2
 800ee24:	7812      	ldrb	r2, [r2, #0]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	021b      	lsls	r3, r3, #8
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	3201      	adds	r2, #1
 800ee32:	7812      	ldrb	r2, [r2, #0]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	021b      	lsls	r3, r3, #8
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	7812      	ldrb	r2, [r2, #0]
 800ee40:	4313      	orrs	r3, r2
 800ee42:	60fb      	str	r3, [r7, #12]
	return rv;
 800ee44:	68fb      	ldr	r3, [r7, #12]
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ee52:	b480      	push	{r7}
 800ee54:	b083      	sub	sp, #12
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	887a      	ldrh	r2, [r7, #2]
 800ee66:	b2d2      	uxtb	r2, r2
 800ee68:	701a      	strb	r2, [r3, #0]
 800ee6a:	887b      	ldrh	r3, [r7, #2]
 800ee6c:	0a1b      	lsrs	r3, r3, #8
 800ee6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	607a      	str	r2, [r7, #4]
 800ee76:	887a      	ldrh	r2, [r7, #2]
 800ee78:	b2d2      	uxtb	r2, r2
 800ee7a:	701a      	strb	r2, [r3, #0]
}
 800ee7c:	bf00      	nop
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	1c5a      	adds	r2, r3, #1
 800ee96:	607a      	str	r2, [r7, #4]
 800ee98:	683a      	ldr	r2, [r7, #0]
 800ee9a:	b2d2      	uxtb	r2, r2
 800ee9c:	701a      	strb	r2, [r3, #0]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	0a1b      	lsrs	r3, r3, #8
 800eea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	607a      	str	r2, [r7, #4]
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	701a      	strb	r2, [r3, #0]
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	0a1b      	lsrs	r3, r3, #8
 800eeb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	1c5a      	adds	r2, r3, #1
 800eeba:	607a      	str	r2, [r7, #4]
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	b2d2      	uxtb	r2, r2
 800eec0:	701a      	strb	r2, [r3, #0]
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	0a1b      	lsrs	r3, r3, #8
 800eec6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	1c5a      	adds	r2, r3, #1
 800eecc:	607a      	str	r2, [r7, #4]
 800eece:	683a      	ldr	r2, [r7, #0]
 800eed0:	b2d2      	uxtb	r2, r2
 800eed2:	701a      	strb	r2, [r3, #0]
}
 800eed4:	bf00      	nop
 800eed6:	370c      	adds	r7, #12
 800eed8:	46bd      	mov	sp, r7
 800eeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eede:	4770      	bx	lr

0800eee0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800eee0:	b480      	push	{r7}
 800eee2:	b087      	sub	sp, #28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d00d      	beq.n	800ef16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eefa:	693a      	ldr	r2, [r7, #16]
 800eefc:	1c53      	adds	r3, r2, #1
 800eefe:	613b      	str	r3, [r7, #16]
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	1c59      	adds	r1, r3, #1
 800ef04:	6179      	str	r1, [r7, #20]
 800ef06:	7812      	ldrb	r2, [r2, #0]
 800ef08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	607b      	str	r3, [r7, #4]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1f1      	bne.n	800eefa <mem_cpy+0x1a>
	}
}
 800ef16:	bf00      	nop
 800ef18:	371c      	adds	r7, #28
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr

0800ef22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ef22:	b480      	push	{r7}
 800ef24:	b087      	sub	sp, #28
 800ef26:	af00      	add	r7, sp, #0
 800ef28:	60f8      	str	r0, [r7, #12]
 800ef2a:	60b9      	str	r1, [r7, #8]
 800ef2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	1c5a      	adds	r2, r3, #1
 800ef36:	617a      	str	r2, [r7, #20]
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	b2d2      	uxtb	r2, r2
 800ef3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3b01      	subs	r3, #1
 800ef42:	607b      	str	r3, [r7, #4]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1f3      	bne.n	800ef32 <mem_set+0x10>
}
 800ef4a:	bf00      	nop
 800ef4c:	371c      	adds	r7, #28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef54:	4770      	bx	lr

0800ef56 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ef56:	b480      	push	{r7}
 800ef58:	b089      	sub	sp, #36	; 0x24
 800ef5a:	af00      	add	r7, sp, #0
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	60b9      	str	r1, [r7, #8]
 800ef60:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	61fb      	str	r3, [r7, #28]
 800ef66:	68bb      	ldr	r3, [r7, #8]
 800ef68:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	61fa      	str	r2, [r7, #28]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	4619      	mov	r1, r3
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	1c5a      	adds	r2, r3, #1
 800ef7c:	61ba      	str	r2, [r7, #24]
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	1acb      	subs	r3, r1, r3
 800ef82:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	3b01      	subs	r3, #1
 800ef88:	607b      	str	r3, [r7, #4]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d002      	beq.n	800ef96 <mem_cmp+0x40>
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0eb      	beq.n	800ef6e <mem_cmp+0x18>

	return r;
 800ef96:	697b      	ldr	r3, [r7, #20]
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3724      	adds	r7, #36	; 0x24
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr

0800efa4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800efae:	e002      	b.n	800efb6 <chk_chr+0x12>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	3301      	adds	r3, #1
 800efb4:	607b      	str	r3, [r7, #4]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d005      	beq.n	800efca <chk_chr+0x26>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d1f2      	bne.n	800efb0 <chk_chr+0xc>
	return *str;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	781b      	ldrb	r3, [r3, #0]
}
 800efce:	4618      	mov	r0, r3
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
	...

0800efdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800efe6:	2300      	movs	r3, #0
 800efe8:	60bb      	str	r3, [r7, #8]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	60fb      	str	r3, [r7, #12]
 800efee:	e029      	b.n	800f044 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800eff0:	4a27      	ldr	r2, [pc, #156]	; (800f090 <chk_lock+0xb4>)
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	011b      	lsls	r3, r3, #4
 800eff6:	4413      	add	r3, r2
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d01d      	beq.n	800f03a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800effe:	4a24      	ldr	r2, [pc, #144]	; (800f090 <chk_lock+0xb4>)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	011b      	lsls	r3, r3, #4
 800f004:	4413      	add	r3, r2
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d116      	bne.n	800f03e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f010:	4a1f      	ldr	r2, [pc, #124]	; (800f090 <chk_lock+0xb4>)
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	011b      	lsls	r3, r3, #4
 800f016:	4413      	add	r3, r2
 800f018:	3304      	adds	r3, #4
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f020:	429a      	cmp	r2, r3
 800f022:	d10c      	bne.n	800f03e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f024:	4a1a      	ldr	r2, [pc, #104]	; (800f090 <chk_lock+0xb4>)
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	011b      	lsls	r3, r3, #4
 800f02a:	4413      	add	r3, r2
 800f02c:	3308      	adds	r3, #8
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f034:	429a      	cmp	r2, r3
 800f036:	d102      	bne.n	800f03e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f038:	e007      	b.n	800f04a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f03a:	2301      	movs	r3, #1
 800f03c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	3301      	adds	r3, #1
 800f042:	60fb      	str	r3, [r7, #12]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d9d2      	bls.n	800eff0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b02      	cmp	r3, #2
 800f04e:	d109      	bne.n	800f064 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d102      	bne.n	800f05c <chk_lock+0x80>
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	2b02      	cmp	r3, #2
 800f05a:	d101      	bne.n	800f060 <chk_lock+0x84>
 800f05c:	2300      	movs	r3, #0
 800f05e:	e010      	b.n	800f082 <chk_lock+0xa6>
 800f060:	2312      	movs	r3, #18
 800f062:	e00e      	b.n	800f082 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d108      	bne.n	800f07c <chk_lock+0xa0>
 800f06a:	4a09      	ldr	r2, [pc, #36]	; (800f090 <chk_lock+0xb4>)
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	011b      	lsls	r3, r3, #4
 800f070:	4413      	add	r3, r2
 800f072:	330c      	adds	r3, #12
 800f074:	881b      	ldrh	r3, [r3, #0]
 800f076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f07a:	d101      	bne.n	800f080 <chk_lock+0xa4>
 800f07c:	2310      	movs	r3, #16
 800f07e:	e000      	b.n	800f082 <chk_lock+0xa6>
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr
 800f08e:	bf00      	nop
 800f090:	200335d8 	.word	0x200335d8

0800f094 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f09a:	2300      	movs	r3, #0
 800f09c:	607b      	str	r3, [r7, #4]
 800f09e:	e002      	b.n	800f0a6 <enq_lock+0x12>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	607b      	str	r3, [r7, #4]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d806      	bhi.n	800f0ba <enq_lock+0x26>
 800f0ac:	4a09      	ldr	r2, [pc, #36]	; (800f0d4 <enq_lock+0x40>)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	011b      	lsls	r3, r3, #4
 800f0b2:	4413      	add	r3, r2
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1f2      	bne.n	800f0a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2b02      	cmp	r3, #2
 800f0be:	bf14      	ite	ne
 800f0c0:	2301      	movne	r3, #1
 800f0c2:	2300      	moveq	r3, #0
 800f0c4:	b2db      	uxtb	r3, r3
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	370c      	adds	r7, #12
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
 800f0d2:	bf00      	nop
 800f0d4:	200335d8 	.word	0x200335d8

0800f0d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f0d8:	b480      	push	{r7}
 800f0da:	b085      	sub	sp, #20
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	60fb      	str	r3, [r7, #12]
 800f0e6:	e01f      	b.n	800f128 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f0e8:	4a41      	ldr	r2, [pc, #260]	; (800f1f0 <inc_lock+0x118>)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	011b      	lsls	r3, r3, #4
 800f0ee:	4413      	add	r3, r2
 800f0f0:	681a      	ldr	r2, [r3, #0]
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d113      	bne.n	800f122 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f0fa:	4a3d      	ldr	r2, [pc, #244]	; (800f1f0 <inc_lock+0x118>)
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	011b      	lsls	r3, r3, #4
 800f100:	4413      	add	r3, r2
 800f102:	3304      	adds	r3, #4
 800f104:	681a      	ldr	r2, [r3, #0]
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d109      	bne.n	800f122 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f10e:	4a38      	ldr	r2, [pc, #224]	; (800f1f0 <inc_lock+0x118>)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	011b      	lsls	r3, r3, #4
 800f114:	4413      	add	r3, r2
 800f116:	3308      	adds	r3, #8
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f11e:	429a      	cmp	r2, r3
 800f120:	d006      	beq.n	800f130 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	3301      	adds	r3, #1
 800f126:	60fb      	str	r3, [r7, #12]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d9dc      	bls.n	800f0e8 <inc_lock+0x10>
 800f12e:	e000      	b.n	800f132 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f130:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2b02      	cmp	r3, #2
 800f136:	d132      	bne.n	800f19e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f138:	2300      	movs	r3, #0
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e002      	b.n	800f144 <inc_lock+0x6c>
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	3301      	adds	r3, #1
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d806      	bhi.n	800f158 <inc_lock+0x80>
 800f14a:	4a29      	ldr	r2, [pc, #164]	; (800f1f0 <inc_lock+0x118>)
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	011b      	lsls	r3, r3, #4
 800f150:	4413      	add	r3, r2
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	2b00      	cmp	r3, #0
 800f156:	d1f2      	bne.n	800f13e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	2b02      	cmp	r3, #2
 800f15c:	d101      	bne.n	800f162 <inc_lock+0x8a>
 800f15e:	2300      	movs	r3, #0
 800f160:	e040      	b.n	800f1e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	4922      	ldr	r1, [pc, #136]	; (800f1f0 <inc_lock+0x118>)
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	011b      	lsls	r3, r3, #4
 800f16c:	440b      	add	r3, r1
 800f16e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	689a      	ldr	r2, [r3, #8]
 800f174:	491e      	ldr	r1, [pc, #120]	; (800f1f0 <inc_lock+0x118>)
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	011b      	lsls	r3, r3, #4
 800f17a:	440b      	add	r3, r1
 800f17c:	3304      	adds	r3, #4
 800f17e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	695a      	ldr	r2, [r3, #20]
 800f184:	491a      	ldr	r1, [pc, #104]	; (800f1f0 <inc_lock+0x118>)
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	011b      	lsls	r3, r3, #4
 800f18a:	440b      	add	r3, r1
 800f18c:	3308      	adds	r3, #8
 800f18e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f190:	4a17      	ldr	r2, [pc, #92]	; (800f1f0 <inc_lock+0x118>)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	011b      	lsls	r3, r3, #4
 800f196:	4413      	add	r3, r2
 800f198:	330c      	adds	r3, #12
 800f19a:	2200      	movs	r2, #0
 800f19c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d009      	beq.n	800f1b8 <inc_lock+0xe0>
 800f1a4:	4a12      	ldr	r2, [pc, #72]	; (800f1f0 <inc_lock+0x118>)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	011b      	lsls	r3, r3, #4
 800f1aa:	4413      	add	r3, r2
 800f1ac:	330c      	adds	r3, #12
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d001      	beq.n	800f1b8 <inc_lock+0xe0>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	e015      	b.n	800f1e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f1b8:	683b      	ldr	r3, [r7, #0]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d108      	bne.n	800f1d0 <inc_lock+0xf8>
 800f1be:	4a0c      	ldr	r2, [pc, #48]	; (800f1f0 <inc_lock+0x118>)
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	4413      	add	r3, r2
 800f1c6:	330c      	adds	r3, #12
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	e001      	b.n	800f1d4 <inc_lock+0xfc>
 800f1d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f1d4:	4906      	ldr	r1, [pc, #24]	; (800f1f0 <inc_lock+0x118>)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	011b      	lsls	r3, r3, #4
 800f1da:	440b      	add	r3, r1
 800f1dc:	330c      	adds	r3, #12
 800f1de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	3301      	adds	r3, #1
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3714      	adds	r7, #20
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ee:	4770      	bx	lr
 800f1f0:	200335d8 	.word	0x200335d8

0800f1f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b085      	sub	sp, #20
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	3b01      	subs	r3, #1
 800f200:	607b      	str	r3, [r7, #4]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	2b01      	cmp	r3, #1
 800f206:	d825      	bhi.n	800f254 <dec_lock+0x60>
		n = Files[i].ctr;
 800f208:	4a17      	ldr	r2, [pc, #92]	; (800f268 <dec_lock+0x74>)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	011b      	lsls	r3, r3, #4
 800f20e:	4413      	add	r3, r2
 800f210:	330c      	adds	r3, #12
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f216:	89fb      	ldrh	r3, [r7, #14]
 800f218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f21c:	d101      	bne.n	800f222 <dec_lock+0x2e>
 800f21e:	2300      	movs	r3, #0
 800f220:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f222:	89fb      	ldrh	r3, [r7, #14]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <dec_lock+0x3a>
 800f228:	89fb      	ldrh	r3, [r7, #14]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f22e:	4a0e      	ldr	r2, [pc, #56]	; (800f268 <dec_lock+0x74>)
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	011b      	lsls	r3, r3, #4
 800f234:	4413      	add	r3, r2
 800f236:	330c      	adds	r3, #12
 800f238:	89fa      	ldrh	r2, [r7, #14]
 800f23a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f23c:	89fb      	ldrh	r3, [r7, #14]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d105      	bne.n	800f24e <dec_lock+0x5a>
 800f242:	4a09      	ldr	r2, [pc, #36]	; (800f268 <dec_lock+0x74>)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	011b      	lsls	r3, r3, #4
 800f248:	4413      	add	r3, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f24e:	2300      	movs	r3, #0
 800f250:	737b      	strb	r3, [r7, #13]
 800f252:	e001      	b.n	800f258 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f254:	2302      	movs	r3, #2
 800f256:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f258:	7b7b      	ldrb	r3, [r7, #13]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3714      	adds	r7, #20
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	200335d8 	.word	0x200335d8

0800f26c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f274:	2300      	movs	r3, #0
 800f276:	60fb      	str	r3, [r7, #12]
 800f278:	e010      	b.n	800f29c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f27a:	4a0d      	ldr	r2, [pc, #52]	; (800f2b0 <clear_lock+0x44>)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	011b      	lsls	r3, r3, #4
 800f280:	4413      	add	r3, r2
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	687a      	ldr	r2, [r7, #4]
 800f286:	429a      	cmp	r2, r3
 800f288:	d105      	bne.n	800f296 <clear_lock+0x2a>
 800f28a:	4a09      	ldr	r2, [pc, #36]	; (800f2b0 <clear_lock+0x44>)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	011b      	lsls	r3, r3, #4
 800f290:	4413      	add	r3, r2
 800f292:	2200      	movs	r2, #0
 800f294:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	3301      	adds	r3, #1
 800f29a:	60fb      	str	r3, [r7, #12]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d9eb      	bls.n	800f27a <clear_lock+0xe>
	}
}
 800f2a2:	bf00      	nop
 800f2a4:	3714      	adds	r7, #20
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	200335d8 	.word	0x200335d8

0800f2b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b086      	sub	sp, #24
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	78db      	ldrb	r3, [r3, #3]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d034      	beq.n	800f332 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	7858      	ldrb	r0, [r3, #1]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2d8:	2301      	movs	r3, #1
 800f2da:	697a      	ldr	r2, [r7, #20]
 800f2dc:	f7ff fd40 	bl	800ed60 <disk_write>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d002      	beq.n	800f2ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	73fb      	strb	r3, [r7, #15]
 800f2ea:	e022      	b.n	800f332 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	1ad2      	subs	r2, r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d217      	bcs.n	800f332 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	789b      	ldrb	r3, [r3, #2]
 800f306:	613b      	str	r3, [r7, #16]
 800f308:	e010      	b.n	800f32c <sync_window+0x78>
					wsect += fs->fsize;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a1b      	ldr	r3, [r3, #32]
 800f30e:	697a      	ldr	r2, [r7, #20]
 800f310:	4413      	add	r3, r2
 800f312:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	7858      	ldrb	r0, [r3, #1]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f31e:	2301      	movs	r3, #1
 800f320:	697a      	ldr	r2, [r7, #20]
 800f322:	f7ff fd1d 	bl	800ed60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	3b01      	subs	r3, #1
 800f32a:	613b      	str	r3, [r7, #16]
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	2b01      	cmp	r3, #1
 800f330:	d8eb      	bhi.n	800f30a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f332:	7bfb      	ldrb	r3, [r7, #15]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3718      	adds	r7, #24
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}

0800f33c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f346:	2300      	movs	r3, #0
 800f348:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34e:	683a      	ldr	r2, [r7, #0]
 800f350:	429a      	cmp	r2, r3
 800f352:	d01b      	beq.n	800f38c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff ffad 	bl	800f2b4 <sync_window>
 800f35a:	4603      	mov	r3, r0
 800f35c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d113      	bne.n	800f38c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	7858      	ldrb	r0, [r3, #1]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f36e:	2301      	movs	r3, #1
 800f370:	683a      	ldr	r2, [r7, #0]
 800f372:	f7ff fcd5 	bl	800ed20 <disk_read>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d004      	beq.n	800f386 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f37c:	f04f 33ff 	mov.w	r3, #4294967295
 800f380:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f382:	2301      	movs	r3, #1
 800f384:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	683a      	ldr	r2, [r7, #0]
 800f38a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f38c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
	...

0800f398 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b084      	sub	sp, #16
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f7ff ff87 	bl	800f2b4 <sync_window>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f3aa:	7bfb      	ldrb	r3, [r7, #15]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d159      	bne.n	800f464 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	2b03      	cmp	r3, #3
 800f3b6:	d149      	bne.n	800f44c <sync_fs+0xb4>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	791b      	ldrb	r3, [r3, #4]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d145      	bne.n	800f44c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	899b      	ldrh	r3, [r3, #12]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	f7ff fda8 	bl	800ef22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	3338      	adds	r3, #56	; 0x38
 800f3d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f3da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff fd37 	bl	800ee52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3338      	adds	r3, #56	; 0x38
 800f3e8:	4921      	ldr	r1, [pc, #132]	; (800f470 <sync_fs+0xd8>)
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f7ff fd4c 	bl	800ee88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	3338      	adds	r3, #56	; 0x38
 800f3f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f3f8:	491e      	ldr	r1, [pc, #120]	; (800f474 <sync_fs+0xdc>)
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f7ff fd44 	bl	800ee88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	3338      	adds	r3, #56	; 0x38
 800f404:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	4619      	mov	r1, r3
 800f40e:	4610      	mov	r0, r2
 800f410:	f7ff fd3a 	bl	800ee88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	3338      	adds	r3, #56	; 0x38
 800f418:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	691b      	ldr	r3, [r3, #16]
 800f420:	4619      	mov	r1, r3
 800f422:	4610      	mov	r0, r2
 800f424:	f7ff fd30 	bl	800ee88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	7858      	ldrb	r0, [r3, #1]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f440:	2301      	movs	r3, #1
 800f442:	f7ff fc8d 	bl	800ed60 <disk_write>
			fs->fsi_flag = 0;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2200      	movs	r2, #0
 800f452:	2100      	movs	r1, #0
 800f454:	4618      	mov	r0, r3
 800f456:	f7ff fca3 	bl	800eda0 <disk_ioctl>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <sync_fs+0xcc>
 800f460:	2301      	movs	r3, #1
 800f462:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f464:	7bfb      	ldrb	r3, [r7, #15]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	41615252 	.word	0x41615252
 800f474:	61417272 	.word	0x61417272

0800f478 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	3b02      	subs	r3, #2
 800f486:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	69db      	ldr	r3, [r3, #28]
 800f48c:	3b02      	subs	r3, #2
 800f48e:	683a      	ldr	r2, [r7, #0]
 800f490:	429a      	cmp	r2, r3
 800f492:	d301      	bcc.n	800f498 <clust2sect+0x20>
 800f494:	2300      	movs	r3, #0
 800f496:	e008      	b.n	800f4aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	895b      	ldrh	r3, [r3, #10]
 800f49c:	461a      	mov	r2, r3
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	fb03 f202 	mul.w	r2, r3, r2
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f4a8:	4413      	add	r3, r2
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	370c      	adds	r7, #12
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f4b6:	b580      	push	{r7, lr}
 800f4b8:	b086      	sub	sp, #24
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
 800f4be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2b01      	cmp	r3, #1
 800f4ca:	d904      	bls.n	800f4d6 <get_fat+0x20>
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	69db      	ldr	r3, [r3, #28]
 800f4d0:	683a      	ldr	r2, [r7, #0]
 800f4d2:	429a      	cmp	r2, r3
 800f4d4:	d302      	bcc.n	800f4dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	617b      	str	r3, [r7, #20]
 800f4da:	e0b7      	b.n	800f64c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d05a      	beq.n	800f5a0 <get_fat+0xea>
 800f4ea:	2b03      	cmp	r3, #3
 800f4ec:	d07d      	beq.n	800f5ea <get_fat+0x134>
 800f4ee:	2b01      	cmp	r3, #1
 800f4f0:	f040 80a2 	bne.w	800f638 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	085b      	lsrs	r3, r3, #1
 800f4fc:	68fa      	ldr	r2, [r7, #12]
 800f4fe:	4413      	add	r3, r2
 800f500:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f506:	693b      	ldr	r3, [r7, #16]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	4619      	mov	r1, r3
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f512:	4413      	add	r3, r2
 800f514:	4619      	mov	r1, r3
 800f516:	6938      	ldr	r0, [r7, #16]
 800f518:	f7ff ff10 	bl	800f33c <move_window>
 800f51c:	4603      	mov	r3, r0
 800f51e:	2b00      	cmp	r3, #0
 800f520:	f040 808d 	bne.w	800f63e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	1c5a      	adds	r2, r3, #1
 800f528:	60fa      	str	r2, [r7, #12]
 800f52a:	693a      	ldr	r2, [r7, #16]
 800f52c:	8992      	ldrh	r2, [r2, #12]
 800f52e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f532:	fb02 f201 	mul.w	r2, r2, r1
 800f536:	1a9b      	subs	r3, r3, r2
 800f538:	693a      	ldr	r2, [r7, #16]
 800f53a:	4413      	add	r3, r2
 800f53c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f540:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	899b      	ldrh	r3, [r3, #12]
 800f54a:	4619      	mov	r1, r3
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f552:	4413      	add	r3, r2
 800f554:	4619      	mov	r1, r3
 800f556:	6938      	ldr	r0, [r7, #16]
 800f558:	f7ff fef0 	bl	800f33c <move_window>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d16f      	bne.n	800f642 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	461a      	mov	r2, r3
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f56e:	fb02 f201 	mul.w	r2, r2, r1
 800f572:	1a9b      	subs	r3, r3, r2
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	4413      	add	r3, r2
 800f578:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f57c:	021b      	lsls	r3, r3, #8
 800f57e:	461a      	mov	r2, r3
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	4313      	orrs	r3, r2
 800f584:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	f003 0301 	and.w	r3, r3, #1
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <get_fat+0xe0>
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	091b      	lsrs	r3, r3, #4
 800f594:	e002      	b.n	800f59c <get_fat+0xe6>
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f59c:	617b      	str	r3, [r7, #20]
			break;
 800f59e:	e055      	b.n	800f64c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	899b      	ldrh	r3, [r3, #12]
 800f5a8:	085b      	lsrs	r3, r3, #1
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5b4:	4413      	add	r3, r2
 800f5b6:	4619      	mov	r1, r3
 800f5b8:	6938      	ldr	r0, [r7, #16]
 800f5ba:	f7ff febf 	bl	800f33c <move_window>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d140      	bne.n	800f646 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f5c4:	693b      	ldr	r3, [r7, #16]
 800f5c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	005b      	lsls	r3, r3, #1
 800f5ce:	693a      	ldr	r2, [r7, #16]
 800f5d0:	8992      	ldrh	r2, [r2, #12]
 800f5d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5d6:	fb02 f200 	mul.w	r2, r2, r0
 800f5da:	1a9b      	subs	r3, r3, r2
 800f5dc:	440b      	add	r3, r1
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f7ff fbfc 	bl	800eddc <ld_word>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	617b      	str	r3, [r7, #20]
			break;
 800f5e8:	e030      	b.n	800f64c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	899b      	ldrh	r3, [r3, #12]
 800f5f2:	089b      	lsrs	r3, r3, #2
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5fe:	4413      	add	r3, r2
 800f600:	4619      	mov	r1, r3
 800f602:	6938      	ldr	r0, [r7, #16]
 800f604:	f7ff fe9a 	bl	800f33c <move_window>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d11d      	bne.n	800f64a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	8992      	ldrh	r2, [r2, #12]
 800f61c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f620:	fb02 f200 	mul.w	r2, r2, r0
 800f624:	1a9b      	subs	r3, r3, r2
 800f626:	440b      	add	r3, r1
 800f628:	4618      	mov	r0, r3
 800f62a:	f7ff fbef 	bl	800ee0c <ld_dword>
 800f62e:	4603      	mov	r3, r0
 800f630:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f634:	617b      	str	r3, [r7, #20]
			break;
 800f636:	e009      	b.n	800f64c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f638:	2301      	movs	r3, #1
 800f63a:	617b      	str	r3, [r7, #20]
 800f63c:	e006      	b.n	800f64c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f63e:	bf00      	nop
 800f640:	e004      	b.n	800f64c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f642:	bf00      	nop
 800f644:	e002      	b.n	800f64c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f646:	bf00      	nop
 800f648:	e000      	b.n	800f64c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f64a:	bf00      	nop
		}
	}

	return val;
 800f64c:	697b      	ldr	r3, [r7, #20]
}
 800f64e:	4618      	mov	r0, r3
 800f650:	3718      	adds	r7, #24
 800f652:	46bd      	mov	sp, r7
 800f654:	bd80      	pop	{r7, pc}

0800f656 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f656:	b590      	push	{r4, r7, lr}
 800f658:	b089      	sub	sp, #36	; 0x24
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	60f8      	str	r0, [r7, #12]
 800f65e:	60b9      	str	r1, [r7, #8]
 800f660:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f662:	2302      	movs	r3, #2
 800f664:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	f240 8106 	bls.w	800f87a <put_fat+0x224>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	69db      	ldr	r3, [r3, #28]
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	429a      	cmp	r2, r3
 800f676:	f080 8100 	bcs.w	800f87a <put_fat+0x224>
		switch (fs->fs_type) {
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b02      	cmp	r3, #2
 800f680:	f000 8088 	beq.w	800f794 <put_fat+0x13e>
 800f684:	2b03      	cmp	r3, #3
 800f686:	f000 80b0 	beq.w	800f7ea <put_fat+0x194>
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	f040 80f5 	bne.w	800f87a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	61bb      	str	r3, [r7, #24]
 800f694:	69bb      	ldr	r3, [r7, #24]
 800f696:	085b      	lsrs	r3, r3, #1
 800f698:	69ba      	ldr	r2, [r7, #24]
 800f69a:	4413      	add	r3, r2
 800f69c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	899b      	ldrh	r3, [r3, #12]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	69bb      	ldr	r3, [r7, #24]
 800f6aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6ae:	4413      	add	r3, r2
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	f7ff fe42 	bl	800f33c <move_window>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f6bc:	7ffb      	ldrb	r3, [r7, #31]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	f040 80d4 	bne.w	800f86c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	1c5a      	adds	r2, r3, #1
 800f6ce:	61ba      	str	r2, [r7, #24]
 800f6d0:	68fa      	ldr	r2, [r7, #12]
 800f6d2:	8992      	ldrh	r2, [r2, #12]
 800f6d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6d8:	fb02 f200 	mul.w	r2, r2, r0
 800f6dc:	1a9b      	subs	r3, r3, r2
 800f6de:	440b      	add	r3, r1
 800f6e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	f003 0301 	and.w	r3, r3, #1
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00d      	beq.n	800f708 <put_fat+0xb2>
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	b25b      	sxtb	r3, r3
 800f6f2:	f003 030f 	and.w	r3, r3, #15
 800f6f6:	b25a      	sxtb	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	011b      	lsls	r3, r3, #4
 800f6fe:	b25b      	sxtb	r3, r3
 800f700:	4313      	orrs	r3, r2
 800f702:	b25b      	sxtb	r3, r3
 800f704:	b2db      	uxtb	r3, r3
 800f706:	e001      	b.n	800f70c <put_fat+0xb6>
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	697a      	ldr	r2, [r7, #20]
 800f70e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2201      	movs	r2, #1
 800f714:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	899b      	ldrh	r3, [r3, #12]
 800f71e:	4619      	mov	r1, r3
 800f720:	69bb      	ldr	r3, [r7, #24]
 800f722:	fbb3 f3f1 	udiv	r3, r3, r1
 800f726:	4413      	add	r3, r2
 800f728:	4619      	mov	r1, r3
 800f72a:	68f8      	ldr	r0, [r7, #12]
 800f72c:	f7ff fe06 	bl	800f33c <move_window>
 800f730:	4603      	mov	r3, r0
 800f732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f734:	7ffb      	ldrb	r3, [r7, #31]
 800f736:	2b00      	cmp	r3, #0
 800f738:	f040 809a 	bne.w	800f870 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	899b      	ldrh	r3, [r3, #12]
 800f746:	461a      	mov	r2, r3
 800f748:	69bb      	ldr	r3, [r7, #24]
 800f74a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f74e:	fb02 f200 	mul.w	r2, r2, r0
 800f752:	1a9b      	subs	r3, r3, r2
 800f754:	440b      	add	r3, r1
 800f756:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	f003 0301 	and.w	r3, r3, #1
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <put_fat+0x114>
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	091b      	lsrs	r3, r3, #4
 800f766:	b2db      	uxtb	r3, r3
 800f768:	e00e      	b.n	800f788 <put_fat+0x132>
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	b25b      	sxtb	r3, r3
 800f770:	f023 030f 	bic.w	r3, r3, #15
 800f774:	b25a      	sxtb	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	0a1b      	lsrs	r3, r3, #8
 800f77a:	b25b      	sxtb	r3, r3
 800f77c:	f003 030f 	and.w	r3, r3, #15
 800f780:	b25b      	sxtb	r3, r3
 800f782:	4313      	orrs	r3, r2
 800f784:	b25b      	sxtb	r3, r3
 800f786:	b2db      	uxtb	r3, r3
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2201      	movs	r2, #1
 800f790:	70da      	strb	r2, [r3, #3]
			break;
 800f792:	e072      	b.n	800f87a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	899b      	ldrh	r3, [r3, #12]
 800f79c:	085b      	lsrs	r3, r3, #1
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	4619      	mov	r1, r3
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7a8:	4413      	add	r3, r2
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f7ff fdc5 	bl	800f33c <move_window>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f7b6:	7ffb      	ldrb	r3, [r7, #31]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d15b      	bne.n	800f874 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	005b      	lsls	r3, r3, #1
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	8992      	ldrh	r2, [r2, #12]
 800f7ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7ce:	fb02 f200 	mul.w	r2, r2, r0
 800f7d2:	1a9b      	subs	r3, r3, r2
 800f7d4:	440b      	add	r3, r1
 800f7d6:	687a      	ldr	r2, [r7, #4]
 800f7d8:	b292      	uxth	r2, r2
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7ff fb38 	bl	800ee52 <st_word>
			fs->wflag = 1;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	2201      	movs	r2, #1
 800f7e6:	70da      	strb	r2, [r3, #3]
			break;
 800f7e8:	e047      	b.n	800f87a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	899b      	ldrh	r3, [r3, #12]
 800f7f2:	089b      	lsrs	r3, r3, #2
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7fe:	4413      	add	r3, r2
 800f800:	4619      	mov	r1, r3
 800f802:	68f8      	ldr	r0, [r7, #12]
 800f804:	f7ff fd9a 	bl	800f33c <move_window>
 800f808:	4603      	mov	r3, r0
 800f80a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f80c:	7ffb      	ldrb	r3, [r7, #31]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d132      	bne.n	800f878 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	009b      	lsls	r3, r3, #2
 800f822:	68fa      	ldr	r2, [r7, #12]
 800f824:	8992      	ldrh	r2, [r2, #12]
 800f826:	fbb3 f0f2 	udiv	r0, r3, r2
 800f82a:	fb02 f200 	mul.w	r2, r2, r0
 800f82e:	1a9b      	subs	r3, r3, r2
 800f830:	440b      	add	r3, r1
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff faea 	bl	800ee0c <ld_dword>
 800f838:	4603      	mov	r3, r0
 800f83a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f83e:	4323      	orrs	r3, r4
 800f840:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	009b      	lsls	r3, r3, #2
 800f84c:	68fa      	ldr	r2, [r7, #12]
 800f84e:	8992      	ldrh	r2, [r2, #12]
 800f850:	fbb3 f0f2 	udiv	r0, r3, r2
 800f854:	fb02 f200 	mul.w	r2, r2, r0
 800f858:	1a9b      	subs	r3, r3, r2
 800f85a:	440b      	add	r3, r1
 800f85c:	6879      	ldr	r1, [r7, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7ff fb12 	bl	800ee88 <st_dword>
			fs->wflag = 1;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2201      	movs	r2, #1
 800f868:	70da      	strb	r2, [r3, #3]
			break;
 800f86a:	e006      	b.n	800f87a <put_fat+0x224>
			if (res != FR_OK) break;
 800f86c:	bf00      	nop
 800f86e:	e004      	b.n	800f87a <put_fat+0x224>
			if (res != FR_OK) break;
 800f870:	bf00      	nop
 800f872:	e002      	b.n	800f87a <put_fat+0x224>
			if (res != FR_OK) break;
 800f874:	bf00      	nop
 800f876:	e000      	b.n	800f87a <put_fat+0x224>
			if (res != FR_OK) break;
 800f878:	bf00      	nop
		}
	}
	return res;
 800f87a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f87c:	4618      	mov	r0, r3
 800f87e:	3724      	adds	r7, #36	; 0x24
 800f880:	46bd      	mov	sp, r7
 800f882:	bd90      	pop	{r4, r7, pc}

0800f884 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f890:	2300      	movs	r3, #0
 800f892:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d904      	bls.n	800f8aa <remove_chain+0x26>
 800f8a0:	69bb      	ldr	r3, [r7, #24]
 800f8a2:	69db      	ldr	r3, [r3, #28]
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	d301      	bcc.n	800f8ae <remove_chain+0x2a>
 800f8aa:	2302      	movs	r3, #2
 800f8ac:	e04b      	b.n	800f946 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d00c      	beq.n	800f8ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b8:	6879      	ldr	r1, [r7, #4]
 800f8ba:	69b8      	ldr	r0, [r7, #24]
 800f8bc:	f7ff fecb 	bl	800f656 <put_fat>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f8c4:	7ffb      	ldrb	r3, [r7, #31]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <remove_chain+0x4a>
 800f8ca:	7ffb      	ldrb	r3, [r7, #31]
 800f8cc:	e03b      	b.n	800f946 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f8ce:	68b9      	ldr	r1, [r7, #8]
 800f8d0:	68f8      	ldr	r0, [r7, #12]
 800f8d2:	f7ff fdf0 	bl	800f4b6 <get_fat>
 800f8d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d031      	beq.n	800f942 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d101      	bne.n	800f8e8 <remove_chain+0x64>
 800f8e4:	2302      	movs	r3, #2
 800f8e6:	e02e      	b.n	800f946 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ee:	d101      	bne.n	800f8f4 <remove_chain+0x70>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	e028      	b.n	800f946 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	68b9      	ldr	r1, [r7, #8]
 800f8f8:	69b8      	ldr	r0, [r7, #24]
 800f8fa:	f7ff feac 	bl	800f656 <put_fat>
 800f8fe:	4603      	mov	r3, r0
 800f900:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f902:	7ffb      	ldrb	r3, [r7, #31]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d001      	beq.n	800f90c <remove_chain+0x88>
 800f908:	7ffb      	ldrb	r3, [r7, #31]
 800f90a:	e01c      	b.n	800f946 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	695a      	ldr	r2, [r3, #20]
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	69db      	ldr	r3, [r3, #28]
 800f914:	3b02      	subs	r3, #2
 800f916:	429a      	cmp	r2, r3
 800f918:	d20b      	bcs.n	800f932 <remove_chain+0xae>
			fs->free_clst++;
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	695b      	ldr	r3, [r3, #20]
 800f91e:	1c5a      	adds	r2, r3, #1
 800f920:	69bb      	ldr	r3, [r7, #24]
 800f922:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	791b      	ldrb	r3, [r3, #4]
 800f928:	f043 0301 	orr.w	r3, r3, #1
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f936:	69bb      	ldr	r3, [r7, #24]
 800f938:	69db      	ldr	r3, [r3, #28]
 800f93a:	68ba      	ldr	r2, [r7, #8]
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d3c6      	bcc.n	800f8ce <remove_chain+0x4a>
 800f940:	e000      	b.n	800f944 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f942:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3720      	adds	r7, #32
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}

0800f94e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f94e:	b580      	push	{r7, lr}
 800f950:	b088      	sub	sp, #32
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
 800f956:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d10d      	bne.n	800f980 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f964:	693b      	ldr	r3, [r7, #16]
 800f966:	691b      	ldr	r3, [r3, #16]
 800f968:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d004      	beq.n	800f97a <create_chain+0x2c>
 800f970:	693b      	ldr	r3, [r7, #16]
 800f972:	69db      	ldr	r3, [r3, #28]
 800f974:	69ba      	ldr	r2, [r7, #24]
 800f976:	429a      	cmp	r2, r3
 800f978:	d31b      	bcc.n	800f9b2 <create_chain+0x64>
 800f97a:	2301      	movs	r3, #1
 800f97c:	61bb      	str	r3, [r7, #24]
 800f97e:	e018      	b.n	800f9b2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f980:	6839      	ldr	r1, [r7, #0]
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fd97 	bl	800f4b6 <get_fat>
 800f988:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d801      	bhi.n	800f994 <create_chain+0x46>
 800f990:	2301      	movs	r3, #1
 800f992:	e070      	b.n	800fa76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99a:	d101      	bne.n	800f9a0 <create_chain+0x52>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	e06a      	b.n	800fa76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f9a0:	693b      	ldr	r3, [r7, #16]
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	68fa      	ldr	r2, [r7, #12]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d201      	bcs.n	800f9ae <create_chain+0x60>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	e063      	b.n	800fa76 <create_chain+0x128>
		scl = clst;
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f9b6:	69fb      	ldr	r3, [r7, #28]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	69db      	ldr	r3, [r3, #28]
 800f9c0:	69fa      	ldr	r2, [r7, #28]
 800f9c2:	429a      	cmp	r2, r3
 800f9c4:	d307      	bcc.n	800f9d6 <create_chain+0x88>
				ncl = 2;
 800f9c6:	2302      	movs	r3, #2
 800f9c8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f9ca:	69fa      	ldr	r2, [r7, #28]
 800f9cc:	69bb      	ldr	r3, [r7, #24]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d901      	bls.n	800f9d6 <create_chain+0x88>
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e04f      	b.n	800fa76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f9d6:	69f9      	ldr	r1, [r7, #28]
 800f9d8:	6878      	ldr	r0, [r7, #4]
 800f9da:	f7ff fd6c 	bl	800f4b6 <get_fat>
 800f9de:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00e      	beq.n	800fa04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d003      	beq.n	800f9f4 <create_chain+0xa6>
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9f2:	d101      	bne.n	800f9f8 <create_chain+0xaa>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	e03e      	b.n	800fa76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f9f8:	69fa      	ldr	r2, [r7, #28]
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d1da      	bne.n	800f9b6 <create_chain+0x68>
 800fa00:	2300      	movs	r3, #0
 800fa02:	e038      	b.n	800fa76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fa04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fa06:	f04f 32ff 	mov.w	r2, #4294967295
 800fa0a:	69f9      	ldr	r1, [r7, #28]
 800fa0c:	6938      	ldr	r0, [r7, #16]
 800fa0e:	f7ff fe22 	bl	800f656 <put_fat>
 800fa12:	4603      	mov	r3, r0
 800fa14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d109      	bne.n	800fa30 <create_chain+0xe2>
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d006      	beq.n	800fa30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	6839      	ldr	r1, [r7, #0]
 800fa26:	6938      	ldr	r0, [r7, #16]
 800fa28:	f7ff fe15 	bl	800f656 <put_fat>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d116      	bne.n	800fa64 <create_chain+0x116>
		fs->last_clst = ncl;
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fa3c:	693b      	ldr	r3, [r7, #16]
 800fa3e:	695a      	ldr	r2, [r3, #20]
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	69db      	ldr	r3, [r3, #28]
 800fa44:	3b02      	subs	r3, #2
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d804      	bhi.n	800fa54 <create_chain+0x106>
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	695b      	ldr	r3, [r3, #20]
 800fa4e:	1e5a      	subs	r2, r3, #1
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	791b      	ldrb	r3, [r3, #4]
 800fa58:	f043 0301 	orr.w	r3, r3, #1
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	711a      	strb	r2, [r3, #4]
 800fa62:	e007      	b.n	800fa74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fa64:	7dfb      	ldrb	r3, [r7, #23]
 800fa66:	2b01      	cmp	r3, #1
 800fa68:	d102      	bne.n	800fa70 <create_chain+0x122>
 800fa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa6e:	e000      	b.n	800fa72 <create_chain+0x124>
 800fa70:	2301      	movs	r3, #1
 800fa72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fa74:	69fb      	ldr	r3, [r7, #28]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3720      	adds	r7, #32
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}

0800fa7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b087      	sub	sp, #28
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
 800fa86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa92:	3304      	adds	r3, #4
 800fa94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	899b      	ldrh	r3, [r3, #12]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800faa2:	68fa      	ldr	r2, [r7, #12]
 800faa4:	8952      	ldrh	r2, [r2, #10]
 800faa6:	fbb3 f3f2 	udiv	r3, r3, r2
 800faaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	1d1a      	adds	r2, r3, #4
 800fab0:	613a      	str	r2, [r7, #16]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <clmt_clust+0x42>
 800fabc:	2300      	movs	r3, #0
 800fabe:	e010      	b.n	800fae2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fac0:	697a      	ldr	r2, [r7, #20]
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d307      	bcc.n	800fad8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	1ad3      	subs	r3, r2, r3
 800face:	617b      	str	r3, [r7, #20]
 800fad0:	693b      	ldr	r3, [r7, #16]
 800fad2:	3304      	adds	r3, #4
 800fad4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fad6:	e7e9      	b.n	800faac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fad8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fada:	693b      	ldr	r3, [r7, #16]
 800fadc:	681a      	ldr	r2, [r3, #0]
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	4413      	add	r3, r2
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	371c      	adds	r7, #28
 800fae6:	46bd      	mov	sp, r7
 800fae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faec:	4770      	bx	lr

0800faee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800faee:	b580      	push	{r7, lr}
 800faf0:	b086      	sub	sp, #24
 800faf2:	af00      	add	r7, sp, #0
 800faf4:	6078      	str	r0, [r7, #4]
 800faf6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fafe:	683b      	ldr	r3, [r7, #0]
 800fb00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb04:	d204      	bcs.n	800fb10 <dir_sdi+0x22>
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	f003 031f 	and.w	r3, r3, #31
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d001      	beq.n	800fb14 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fb10:	2302      	movs	r3, #2
 800fb12:	e071      	b.n	800fbf8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	683a      	ldr	r2, [r7, #0]
 800fb18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	689b      	ldr	r3, [r3, #8]
 800fb1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d106      	bne.n	800fb34 <dir_sdi+0x46>
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b02      	cmp	r3, #2
 800fb2c:	d902      	bls.n	800fb34 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d10c      	bne.n	800fb54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	095b      	lsrs	r3, r3, #5
 800fb3e:	693a      	ldr	r2, [r7, #16]
 800fb40:	8912      	ldrh	r2, [r2, #8]
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d301      	bcc.n	800fb4a <dir_sdi+0x5c>
 800fb46:	2302      	movs	r3, #2
 800fb48:	e056      	b.n	800fbf8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	61da      	str	r2, [r3, #28]
 800fb52:	e02d      	b.n	800fbb0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	895b      	ldrh	r3, [r3, #10]
 800fb58:	461a      	mov	r2, r3
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	899b      	ldrh	r3, [r3, #12]
 800fb5e:	fb03 f302 	mul.w	r3, r3, r2
 800fb62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fb64:	e019      	b.n	800fb9a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6979      	ldr	r1, [r7, #20]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff fca3 	bl	800f4b6 <get_fat>
 800fb70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb78:	d101      	bne.n	800fb7e <dir_sdi+0x90>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e03c      	b.n	800fbf8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	d904      	bls.n	800fb8e <dir_sdi+0xa0>
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	69db      	ldr	r3, [r3, #28]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d301      	bcc.n	800fb92 <dir_sdi+0xa4>
 800fb8e:	2302      	movs	r3, #2
 800fb90:	e032      	b.n	800fbf8 <dir_sdi+0x10a>
			ofs -= csz;
 800fb92:	683a      	ldr	r2, [r7, #0]
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fb9a:	683a      	ldr	r2, [r7, #0]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d2e1      	bcs.n	800fb66 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fba2:	6979      	ldr	r1, [r7, #20]
 800fba4:	6938      	ldr	r0, [r7, #16]
 800fba6:	f7ff fc67 	bl	800f478 <clust2sect>
 800fbaa:	4602      	mov	r2, r0
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	697a      	ldr	r2, [r7, #20]
 800fbb4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	69db      	ldr	r3, [r3, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d101      	bne.n	800fbc2 <dir_sdi+0xd4>
 800fbbe:	2302      	movs	r3, #2
 800fbc0:	e01a      	b.n	800fbf8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	69da      	ldr	r2, [r3, #28]
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	899b      	ldrh	r3, [r3, #12]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	683b      	ldr	r3, [r7, #0]
 800fbce:	fbb3 f3f1 	udiv	r3, r3, r1
 800fbd2:	441a      	add	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fbd8:	693b      	ldr	r3, [r7, #16]
 800fbda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	899b      	ldrh	r3, [r3, #12]
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbea:	fb02 f200 	mul.w	r2, r2, r0
 800fbee:	1a9b      	subs	r3, r3, r2
 800fbf0:	18ca      	adds	r2, r1, r3
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3718      	adds	r7, #24
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	695b      	ldr	r3, [r3, #20]
 800fc14:	3320      	adds	r3, #32
 800fc16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	69db      	ldr	r3, [r3, #28]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d003      	beq.n	800fc28 <dir_next+0x28>
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc26:	d301      	bcc.n	800fc2c <dir_next+0x2c>
 800fc28:	2304      	movs	r3, #4
 800fc2a:	e0bb      	b.n	800fda4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	899b      	ldrh	r3, [r3, #12]
 800fc30:	461a      	mov	r2, r3
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc38:	fb02 f201 	mul.w	r2, r2, r1
 800fc3c:	1a9b      	subs	r3, r3, r2
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	f040 809d 	bne.w	800fd7e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	69db      	ldr	r3, [r3, #28]
 800fc48:	1c5a      	adds	r2, r3, #1
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	699b      	ldr	r3, [r3, #24]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d10b      	bne.n	800fc6e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	095b      	lsrs	r3, r3, #5
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	8912      	ldrh	r2, [r2, #8]
 800fc5e:	4293      	cmp	r3, r2
 800fc60:	f0c0 808d 	bcc.w	800fd7e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	61da      	str	r2, [r3, #28]
 800fc6a:	2304      	movs	r3, #4
 800fc6c:	e09a      	b.n	800fda4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	899b      	ldrh	r3, [r3, #12]
 800fc72:	461a      	mov	r2, r3
 800fc74:	68bb      	ldr	r3, [r7, #8]
 800fc76:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc7a:	68fa      	ldr	r2, [r7, #12]
 800fc7c:	8952      	ldrh	r2, [r2, #10]
 800fc7e:	3a01      	subs	r2, #1
 800fc80:	4013      	ands	r3, r2
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d17b      	bne.n	800fd7e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	699b      	ldr	r3, [r3, #24]
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4610      	mov	r0, r2
 800fc90:	f7ff fc11 	bl	800f4b6 <get_fat>
 800fc94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d801      	bhi.n	800fca0 <dir_next+0xa0>
 800fc9c:	2302      	movs	r3, #2
 800fc9e:	e081      	b.n	800fda4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca6:	d101      	bne.n	800fcac <dir_next+0xac>
 800fca8:	2301      	movs	r3, #1
 800fcaa:	e07b      	b.n	800fda4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	69db      	ldr	r3, [r3, #28]
 800fcb0:	697a      	ldr	r2, [r7, #20]
 800fcb2:	429a      	cmp	r2, r3
 800fcb4:	d359      	bcc.n	800fd6a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fcb6:	683b      	ldr	r3, [r7, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d104      	bne.n	800fcc6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	61da      	str	r2, [r3, #28]
 800fcc2:	2304      	movs	r3, #4
 800fcc4:	e06e      	b.n	800fda4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	699b      	ldr	r3, [r3, #24]
 800fccc:	4619      	mov	r1, r3
 800fcce:	4610      	mov	r0, r2
 800fcd0:	f7ff fe3d 	bl	800f94e <create_chain>
 800fcd4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d101      	bne.n	800fce0 <dir_next+0xe0>
 800fcdc:	2307      	movs	r3, #7
 800fcde:	e061      	b.n	800fda4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d101      	bne.n	800fcea <dir_next+0xea>
 800fce6:	2302      	movs	r3, #2
 800fce8:	e05c      	b.n	800fda4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcf0:	d101      	bne.n	800fcf6 <dir_next+0xf6>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e056      	b.n	800fda4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f7ff fadc 	bl	800f2b4 <sync_window>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <dir_next+0x106>
 800fd02:	2301      	movs	r3, #1
 800fd04:	e04e      	b.n	800fda4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	899b      	ldrh	r3, [r3, #12]
 800fd10:	461a      	mov	r2, r3
 800fd12:	2100      	movs	r1, #0
 800fd14:	f7ff f905 	bl	800ef22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fd18:	2300      	movs	r3, #0
 800fd1a:	613b      	str	r3, [r7, #16]
 800fd1c:	6979      	ldr	r1, [r7, #20]
 800fd1e:	68f8      	ldr	r0, [r7, #12]
 800fd20:	f7ff fbaa 	bl	800f478 <clust2sect>
 800fd24:	4602      	mov	r2, r0
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	635a      	str	r2, [r3, #52]	; 0x34
 800fd2a:	e012      	b.n	800fd52 <dir_next+0x152>
						fs->wflag = 1;
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	2201      	movs	r2, #1
 800fd30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fd32:	68f8      	ldr	r0, [r7, #12]
 800fd34:	f7ff fabe 	bl	800f2b4 <sync_window>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d001      	beq.n	800fd42 <dir_next+0x142>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e030      	b.n	800fda4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fd42:	693b      	ldr	r3, [r7, #16]
 800fd44:	3301      	adds	r3, #1
 800fd46:	613b      	str	r3, [r7, #16]
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd4c:	1c5a      	adds	r2, r3, #1
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	635a      	str	r2, [r3, #52]	; 0x34
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	895b      	ldrh	r3, [r3, #10]
 800fd56:	461a      	mov	r2, r3
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d3e6      	bcc.n	800fd2c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	1ad2      	subs	r2, r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fd70:	6979      	ldr	r1, [r7, #20]
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7ff fb80 	bl	800f478 <clust2sect>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68ba      	ldr	r2, [r7, #8]
 800fd82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd96:	fb02 f200 	mul.w	r2, r2, r0
 800fd9a:	1a9b      	subs	r3, r3, r2
 800fd9c:	18ca      	adds	r2, r1, r3
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fda2:	2300      	movs	r3, #0
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b086      	sub	sp, #24
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800fdbc:	2100      	movs	r1, #0
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f7ff fe95 	bl	800faee <dir_sdi>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fdc8:	7dfb      	ldrb	r3, [r7, #23]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d12b      	bne.n	800fe26 <dir_alloc+0x7a>
		n = 0;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	69db      	ldr	r3, [r3, #28]
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f7ff faaf 	bl	800f33c <move_window>
 800fdde:	4603      	mov	r3, r0
 800fde0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d11d      	bne.n	800fe24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6a1b      	ldr	r3, [r3, #32]
 800fdec:	781b      	ldrb	r3, [r3, #0]
 800fdee:	2be5      	cmp	r3, #229	; 0xe5
 800fdf0:	d004      	beq.n	800fdfc <dir_alloc+0x50>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a1b      	ldr	r3, [r3, #32]
 800fdf6:	781b      	ldrb	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d107      	bne.n	800fe0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fdfc:	693b      	ldr	r3, [r7, #16]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	613b      	str	r3, [r7, #16]
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	683b      	ldr	r3, [r7, #0]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d102      	bne.n	800fe10 <dir_alloc+0x64>
 800fe0a:	e00c      	b.n	800fe26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800fe10:	2101      	movs	r1, #1
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f7ff fef4 	bl	800fc00 <dir_next>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d0d7      	beq.n	800fdd2 <dir_alloc+0x26>
 800fe22:	e000      	b.n	800fe26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800fe24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800fe26:	7dfb      	ldrb	r3, [r7, #23]
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	d101      	bne.n	800fe30 <dir_alloc+0x84>
 800fe2c:	2307      	movs	r3, #7
 800fe2e:	75fb      	strb	r3, [r7, #23]
	return res;
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b084      	sub	sp, #16
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	331a      	adds	r3, #26
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7fe ffc7 	bl	800eddc <ld_word>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	781b      	ldrb	r3, [r3, #0]
 800fe56:	2b03      	cmp	r3, #3
 800fe58:	d109      	bne.n	800fe6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fe5a:	683b      	ldr	r3, [r7, #0]
 800fe5c:	3314      	adds	r3, #20
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f7fe ffbc 	bl	800eddc <ld_word>
 800fe64:	4603      	mov	r3, r0
 800fe66:	041b      	lsls	r3, r3, #16
 800fe68:	68fa      	ldr	r2, [r7, #12]
 800fe6a:	4313      	orrs	r3, r2
 800fe6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3710      	adds	r7, #16
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}

0800fe78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	60f8      	str	r0, [r7, #12]
 800fe80:	60b9      	str	r1, [r7, #8]
 800fe82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	331a      	adds	r3, #26
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fe ffdf 	bl	800ee52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	2b03      	cmp	r3, #3
 800fe9a:	d109      	bne.n	800feb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	f103 0214 	add.w	r2, r3, #20
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	0c1b      	lsrs	r3, r3, #16
 800fea6:	b29b      	uxth	r3, r3
 800fea8:	4619      	mov	r1, r3
 800feaa:	4610      	mov	r0, r2
 800feac:	f7fe ffd1 	bl	800ee52 <st_word>
	}
}
 800feb0:	bf00      	nop
 800feb2:	3710      	adds	r7, #16
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bd80      	pop	{r7, pc}

0800feb8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800fec2:	2304      	movs	r3, #4
 800fec4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800fecc:	e03c      	b.n	800ff48 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	69db      	ldr	r3, [r3, #28]
 800fed2:	4619      	mov	r1, r3
 800fed4:	6938      	ldr	r0, [r7, #16]
 800fed6:	f7ff fa31 	bl	800f33c <move_window>
 800feda:	4603      	mov	r3, r0
 800fedc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fede:	7dfb      	ldrb	r3, [r7, #23]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d136      	bne.n	800ff52 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6a1b      	ldr	r3, [r3, #32]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800feec:	7bfb      	ldrb	r3, [r7, #15]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d102      	bne.n	800fef8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fef2:	2304      	movs	r3, #4
 800fef4:	75fb      	strb	r3, [r7, #23]
 800fef6:	e031      	b.n	800ff5c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6a1b      	ldr	r3, [r3, #32]
 800fefc:	330b      	adds	r3, #11
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff04:	73bb      	strb	r3, [r7, #14]
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	7bba      	ldrb	r2, [r7, #14]
 800ff0a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ff0c:	7bfb      	ldrb	r3, [r7, #15]
 800ff0e:	2be5      	cmp	r3, #229	; 0xe5
 800ff10:	d011      	beq.n	800ff36 <dir_read+0x7e>
 800ff12:	7bfb      	ldrb	r3, [r7, #15]
 800ff14:	2b2e      	cmp	r3, #46	; 0x2e
 800ff16:	d00e      	beq.n	800ff36 <dir_read+0x7e>
 800ff18:	7bbb      	ldrb	r3, [r7, #14]
 800ff1a:	2b0f      	cmp	r3, #15
 800ff1c:	d00b      	beq.n	800ff36 <dir_read+0x7e>
 800ff1e:	7bbb      	ldrb	r3, [r7, #14]
 800ff20:	f023 0320 	bic.w	r3, r3, #32
 800ff24:	2b08      	cmp	r3, #8
 800ff26:	bf0c      	ite	eq
 800ff28:	2301      	moveq	r3, #1
 800ff2a:	2300      	movne	r3, #0
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	461a      	mov	r2, r3
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d00f      	beq.n	800ff56 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ff36:	2100      	movs	r1, #0
 800ff38:	6878      	ldr	r0, [r7, #4]
 800ff3a:	f7ff fe61 	bl	800fc00 <dir_next>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ff42:	7dfb      	ldrb	r3, [r7, #23]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d108      	bne.n	800ff5a <dir_read+0xa2>
	while (dp->sect) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	69db      	ldr	r3, [r3, #28]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1be      	bne.n	800fece <dir_read+0x16>
 800ff50:	e004      	b.n	800ff5c <dir_read+0xa4>
		if (res != FR_OK) break;
 800ff52:	bf00      	nop
 800ff54:	e002      	b.n	800ff5c <dir_read+0xa4>
				break;
 800ff56:	bf00      	nop
 800ff58:	e000      	b.n	800ff5c <dir_read+0xa4>
		if (res != FR_OK) break;
 800ff5a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ff5c:	7dfb      	ldrb	r3, [r7, #23]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <dir_read+0xb0>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	61da      	str	r2, [r3, #28]
	return res;
 800ff68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	3718      	adds	r7, #24
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	bd80      	pop	{r7, pc}

0800ff72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ff72:	b580      	push	{r7, lr}
 800ff74:	b086      	sub	sp, #24
 800ff76:	af00      	add	r7, sp, #0
 800ff78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ff80:	2100      	movs	r1, #0
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f7ff fdb3 	bl	800faee <dir_sdi>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ff8c:	7dfb      	ldrb	r3, [r7, #23]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <dir_find+0x24>
 800ff92:	7dfb      	ldrb	r3, [r7, #23]
 800ff94:	e03e      	b.n	8010014 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	69db      	ldr	r3, [r3, #28]
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6938      	ldr	r0, [r7, #16]
 800ff9e:	f7ff f9cd 	bl	800f33c <move_window>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffa6:	7dfb      	ldrb	r3, [r7, #23]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d12f      	bne.n	801000c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6a1b      	ldr	r3, [r3, #32]
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ffb4:	7bfb      	ldrb	r3, [r7, #15]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d102      	bne.n	800ffc0 <dir_find+0x4e>
 800ffba:	2304      	movs	r3, #4
 800ffbc:	75fb      	strb	r3, [r7, #23]
 800ffbe:	e028      	b.n	8010012 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	6a1b      	ldr	r3, [r3, #32]
 800ffc4:	330b      	adds	r3, #11
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ffcc:	b2da      	uxtb	r2, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6a1b      	ldr	r3, [r3, #32]
 800ffd6:	330b      	adds	r3, #11
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	f003 0308 	and.w	r3, r3, #8
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d10a      	bne.n	800fff8 <dir_find+0x86>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6a18      	ldr	r0, [r3, #32]
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	3324      	adds	r3, #36	; 0x24
 800ffea:	220b      	movs	r2, #11
 800ffec:	4619      	mov	r1, r3
 800ffee:	f7fe ffb2 	bl	800ef56 <mem_cmp>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d00b      	beq.n	8010010 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fff8:	2100      	movs	r1, #0
 800fffa:	6878      	ldr	r0, [r7, #4]
 800fffc:	f7ff fe00 	bl	800fc00 <dir_next>
 8010000:	4603      	mov	r3, r0
 8010002:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010004:	7dfb      	ldrb	r3, [r7, #23]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d0c5      	beq.n	800ff96 <dir_find+0x24>
 801000a:	e002      	b.n	8010012 <dir_find+0xa0>
		if (res != FR_OK) break;
 801000c:	bf00      	nop
 801000e:	e000      	b.n	8010012 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010010:	bf00      	nop

	return res;
 8010012:	7dfb      	ldrb	r3, [r7, #23]
}
 8010014:	4618      	mov	r0, r3
 8010016:	3718      	adds	r7, #24
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801002a:	2101      	movs	r1, #1
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff febd 	bl	800fdac <dir_alloc>
 8010032:	4603      	mov	r3, r0
 8010034:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010036:	7bfb      	ldrb	r3, [r7, #15]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d11c      	bne.n	8010076 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	69db      	ldr	r3, [r3, #28]
 8010040:	4619      	mov	r1, r3
 8010042:	68b8      	ldr	r0, [r7, #8]
 8010044:	f7ff f97a 	bl	800f33c <move_window>
 8010048:	4603      	mov	r3, r0
 801004a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801004c:	7bfb      	ldrb	r3, [r7, #15]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d111      	bne.n	8010076 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6a1b      	ldr	r3, [r3, #32]
 8010056:	2220      	movs	r2, #32
 8010058:	2100      	movs	r1, #0
 801005a:	4618      	mov	r0, r3
 801005c:	f7fe ff61 	bl	800ef22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6a18      	ldr	r0, [r3, #32]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	3324      	adds	r3, #36	; 0x24
 8010068:	220b      	movs	r2, #11
 801006a:	4619      	mov	r1, r3
 801006c:	f7fe ff38 	bl	800eee0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	2201      	movs	r2, #1
 8010074:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010076:	7bfb      	ldrb	r3, [r7, #15]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	69db      	ldr	r3, [r3, #28]
 8010092:	4619      	mov	r1, r3
 8010094:	68f8      	ldr	r0, [r7, #12]
 8010096:	f7ff f951 	bl	800f33c <move_window>
 801009a:	4603      	mov	r3, r0
 801009c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801009e:	7afb      	ldrb	r3, [r7, #11]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d106      	bne.n	80100b2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a1b      	ldr	r3, [r3, #32]
 80100a8:	22e5      	movs	r2, #229	; 0xe5
 80100aa:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	2201      	movs	r2, #1
 80100b0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80100b2:	7afb      	ldrb	r3, [r7, #11]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	3710      	adds	r7, #16
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}

080100bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b088      	sub	sp, #32
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	60fb      	str	r3, [r7, #12]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	3324      	adds	r3, #36	; 0x24
 80100d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80100d2:	220b      	movs	r2, #11
 80100d4:	2120      	movs	r1, #32
 80100d6:	68b8      	ldr	r0, [r7, #8]
 80100d8:	f7fe ff23 	bl	800ef22 <mem_set>
	si = i = 0; ni = 8;
 80100dc:	2300      	movs	r3, #0
 80100de:	613b      	str	r3, [r7, #16]
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	617b      	str	r3, [r7, #20]
 80100e4:	2308      	movs	r3, #8
 80100e6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80100e8:	68fa      	ldr	r2, [r7, #12]
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	4413      	add	r3, r2
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	2b2e      	cmp	r3, #46	; 0x2e
 80100f2:	d12f      	bne.n	8010154 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80100f4:	697b      	ldr	r3, [r7, #20]
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	617a      	str	r2, [r7, #20]
 80100fa:	68fa      	ldr	r2, [r7, #12]
 80100fc:	4413      	add	r3, r2
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010102:	7ffb      	ldrb	r3, [r7, #31]
 8010104:	2b2e      	cmp	r3, #46	; 0x2e
 8010106:	d10a      	bne.n	801011e <create_name+0x62>
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	2b02      	cmp	r3, #2
 801010c:	d807      	bhi.n	801011e <create_name+0x62>
			sfn[i++] = c;
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	1c5a      	adds	r2, r3, #1
 8010112:	613a      	str	r2, [r7, #16]
 8010114:	68ba      	ldr	r2, [r7, #8]
 8010116:	4413      	add	r3, r2
 8010118:	7ffa      	ldrb	r2, [r7, #31]
 801011a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801011c:	e7ea      	b.n	80100f4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801011e:	7ffb      	ldrb	r3, [r7, #31]
 8010120:	2b2f      	cmp	r3, #47	; 0x2f
 8010122:	d007      	beq.n	8010134 <create_name+0x78>
 8010124:	7ffb      	ldrb	r3, [r7, #31]
 8010126:	2b5c      	cmp	r3, #92	; 0x5c
 8010128:	d004      	beq.n	8010134 <create_name+0x78>
 801012a:	7ffb      	ldrb	r3, [r7, #31]
 801012c:	2b20      	cmp	r3, #32
 801012e:	d901      	bls.n	8010134 <create_name+0x78>
 8010130:	2306      	movs	r3, #6
 8010132:	e084      	b.n	801023e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010134:	68fa      	ldr	r2, [r7, #12]
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	441a      	add	r2, r3
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801013e:	7ffb      	ldrb	r3, [r7, #31]
 8010140:	2b20      	cmp	r3, #32
 8010142:	d801      	bhi.n	8010148 <create_name+0x8c>
 8010144:	2224      	movs	r2, #36	; 0x24
 8010146:	e000      	b.n	801014a <create_name+0x8e>
 8010148:	2220      	movs	r2, #32
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	330b      	adds	r3, #11
 801014e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010150:	2300      	movs	r3, #0
 8010152:	e074      	b.n	801023e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	1c5a      	adds	r2, r3, #1
 8010158:	617a      	str	r2, [r7, #20]
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	4413      	add	r3, r2
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010162:	7ffb      	ldrb	r3, [r7, #31]
 8010164:	2b20      	cmp	r3, #32
 8010166:	d94e      	bls.n	8010206 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010168:	7ffb      	ldrb	r3, [r7, #31]
 801016a:	2b2f      	cmp	r3, #47	; 0x2f
 801016c:	d006      	beq.n	801017c <create_name+0xc0>
 801016e:	7ffb      	ldrb	r3, [r7, #31]
 8010170:	2b5c      	cmp	r3, #92	; 0x5c
 8010172:	d110      	bne.n	8010196 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010174:	e002      	b.n	801017c <create_name+0xc0>
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	3301      	adds	r3, #1
 801017a:	617b      	str	r3, [r7, #20]
 801017c:	68fa      	ldr	r2, [r7, #12]
 801017e:	697b      	ldr	r3, [r7, #20]
 8010180:	4413      	add	r3, r2
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b2f      	cmp	r3, #47	; 0x2f
 8010186:	d0f6      	beq.n	8010176 <create_name+0xba>
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	4413      	add	r3, r2
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	2b5c      	cmp	r3, #92	; 0x5c
 8010192:	d0f0      	beq.n	8010176 <create_name+0xba>
			break;
 8010194:	e038      	b.n	8010208 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010196:	7ffb      	ldrb	r3, [r7, #31]
 8010198:	2b2e      	cmp	r3, #46	; 0x2e
 801019a:	d003      	beq.n	80101a4 <create_name+0xe8>
 801019c:	693a      	ldr	r2, [r7, #16]
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d30c      	bcc.n	80101be <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	2b0b      	cmp	r3, #11
 80101a8:	d002      	beq.n	80101b0 <create_name+0xf4>
 80101aa:	7ffb      	ldrb	r3, [r7, #31]
 80101ac:	2b2e      	cmp	r3, #46	; 0x2e
 80101ae:	d001      	beq.n	80101b4 <create_name+0xf8>
 80101b0:	2306      	movs	r3, #6
 80101b2:	e044      	b.n	801023e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80101b4:	2308      	movs	r3, #8
 80101b6:	613b      	str	r3, [r7, #16]
 80101b8:	230b      	movs	r3, #11
 80101ba:	61bb      	str	r3, [r7, #24]
			continue;
 80101bc:	e022      	b.n	8010204 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80101be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	da04      	bge.n	80101d0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80101c6:	7ffb      	ldrb	r3, [r7, #31]
 80101c8:	3b80      	subs	r3, #128	; 0x80
 80101ca:	4a1f      	ldr	r2, [pc, #124]	; (8010248 <create_name+0x18c>)
 80101cc:	5cd3      	ldrb	r3, [r2, r3]
 80101ce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80101d0:	7ffb      	ldrb	r3, [r7, #31]
 80101d2:	4619      	mov	r1, r3
 80101d4:	481d      	ldr	r0, [pc, #116]	; (801024c <create_name+0x190>)
 80101d6:	f7fe fee5 	bl	800efa4 <chk_chr>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <create_name+0x128>
 80101e0:	2306      	movs	r3, #6
 80101e2:	e02c      	b.n	801023e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80101e4:	7ffb      	ldrb	r3, [r7, #31]
 80101e6:	2b60      	cmp	r3, #96	; 0x60
 80101e8:	d905      	bls.n	80101f6 <create_name+0x13a>
 80101ea:	7ffb      	ldrb	r3, [r7, #31]
 80101ec:	2b7a      	cmp	r3, #122	; 0x7a
 80101ee:	d802      	bhi.n	80101f6 <create_name+0x13a>
 80101f0:	7ffb      	ldrb	r3, [r7, #31]
 80101f2:	3b20      	subs	r3, #32
 80101f4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	1c5a      	adds	r2, r3, #1
 80101fa:	613a      	str	r2, [r7, #16]
 80101fc:	68ba      	ldr	r2, [r7, #8]
 80101fe:	4413      	add	r3, r2
 8010200:	7ffa      	ldrb	r2, [r7, #31]
 8010202:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010204:	e7a6      	b.n	8010154 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010206:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	441a      	add	r2, r3
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d101      	bne.n	801021c <create_name+0x160>
 8010218:	2306      	movs	r3, #6
 801021a:	e010      	b.n	801023e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	2be5      	cmp	r3, #229	; 0xe5
 8010222:	d102      	bne.n	801022a <create_name+0x16e>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	2205      	movs	r2, #5
 8010228:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801022a:	7ffb      	ldrb	r3, [r7, #31]
 801022c:	2b20      	cmp	r3, #32
 801022e:	d801      	bhi.n	8010234 <create_name+0x178>
 8010230:	2204      	movs	r2, #4
 8010232:	e000      	b.n	8010236 <create_name+0x17a>
 8010234:	2200      	movs	r2, #0
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	330b      	adds	r3, #11
 801023a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801023c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801023e:	4618      	mov	r0, r3
 8010240:	3720      	adds	r7, #32
 8010242:	46bd      	mov	sp, r7
 8010244:	bd80      	pop	{r7, pc}
 8010246:	bf00      	nop
 8010248:	08018440 	.word	0x08018440
 801024c:	080183f0 	.word	0x080183f0

08010250 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010250:	b580      	push	{r7, lr}
 8010252:	b086      	sub	sp, #24
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	781b      	ldrb	r3, [r3, #0]
 8010268:	2b2f      	cmp	r3, #47	; 0x2f
 801026a:	d00b      	beq.n	8010284 <follow_path+0x34>
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	2b5c      	cmp	r3, #92	; 0x5c
 8010272:	d007      	beq.n	8010284 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	699a      	ldr	r2, [r3, #24]
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	609a      	str	r2, [r3, #8]
 801027c:	e00d      	b.n	801029a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	3301      	adds	r3, #1
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	2b2f      	cmp	r3, #47	; 0x2f
 801028a:	d0f8      	beq.n	801027e <follow_path+0x2e>
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b5c      	cmp	r3, #92	; 0x5c
 8010292:	d0f4      	beq.n	801027e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	2200      	movs	r2, #0
 8010298:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b1f      	cmp	r3, #31
 80102a0:	d80a      	bhi.n	80102b8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2280      	movs	r2, #128	; 0x80
 80102a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80102aa:	2100      	movs	r1, #0
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff fc1e 	bl	800faee <dir_sdi>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]
 80102b6:	e05b      	b.n	8010370 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80102b8:	463b      	mov	r3, r7
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fefd 	bl	80100bc <create_name>
 80102c2:	4603      	mov	r3, r0
 80102c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d14c      	bne.n	8010366 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff fe50 	bl	800ff72 <dir_find>
 80102d2:	4603      	mov	r3, r0
 80102d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80102dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d01b      	beq.n	801031c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
 80102e6:	2b04      	cmp	r3, #4
 80102e8:	d13f      	bne.n	801036a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80102ea:	7afb      	ldrb	r3, [r7, #11]
 80102ec:	f003 0320 	and.w	r3, r3, #32
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00b      	beq.n	801030c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80102f4:	7afb      	ldrb	r3, [r7, #11]
 80102f6:	f003 0304 	and.w	r3, r3, #4
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d031      	beq.n	8010362 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2280      	movs	r2, #128	; 0x80
 8010302:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010306:	2300      	movs	r3, #0
 8010308:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801030a:	e02e      	b.n	801036a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801030c:	7afb      	ldrb	r3, [r7, #11]
 801030e:	f003 0304 	and.w	r3, r3, #4
 8010312:	2b00      	cmp	r3, #0
 8010314:	d129      	bne.n	801036a <follow_path+0x11a>
 8010316:	2305      	movs	r3, #5
 8010318:	75fb      	strb	r3, [r7, #23]
				break;
 801031a:	e026      	b.n	801036a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801031c:	7afb      	ldrb	r3, [r7, #11]
 801031e:	f003 0304 	and.w	r3, r3, #4
 8010322:	2b00      	cmp	r3, #0
 8010324:	d123      	bne.n	801036e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	799b      	ldrb	r3, [r3, #6]
 801032a:	f003 0310 	and.w	r3, r3, #16
 801032e:	2b00      	cmp	r3, #0
 8010330:	d102      	bne.n	8010338 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010332:	2305      	movs	r3, #5
 8010334:	75fb      	strb	r3, [r7, #23]
 8010336:	e01b      	b.n	8010370 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	695b      	ldr	r3, [r3, #20]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	8992      	ldrh	r2, [r2, #12]
 8010346:	fbb3 f0f2 	udiv	r0, r3, r2
 801034a:	fb02 f200 	mul.w	r2, r2, r0
 801034e:	1a9b      	subs	r3, r3, r2
 8010350:	440b      	add	r3, r1
 8010352:	4619      	mov	r1, r3
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f7ff fd70 	bl	800fe3a <ld_clust>
 801035a:	4602      	mov	r2, r0
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	609a      	str	r2, [r3, #8]
 8010360:	e7aa      	b.n	80102b8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010362:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010364:	e7a8      	b.n	80102b8 <follow_path+0x68>
			if (res != FR_OK) break;
 8010366:	bf00      	nop
 8010368:	e002      	b.n	8010370 <follow_path+0x120>
				break;
 801036a:	bf00      	nop
 801036c:	e000      	b.n	8010370 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801036e:	bf00      	nop
			}
		}
	}

	return res;
 8010370:	7dfb      	ldrb	r3, [r7, #23]
}
 8010372:	4618      	mov	r0, r3
 8010374:	3718      	adds	r7, #24
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}

0801037a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801037a:	b480      	push	{r7}
 801037c:	b087      	sub	sp, #28
 801037e:	af00      	add	r7, sp, #0
 8010380:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010382:	f04f 33ff 	mov.w	r3, #4294967295
 8010386:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d031      	beq.n	80103f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	617b      	str	r3, [r7, #20]
 8010396:	e002      	b.n	801039e <get_ldnumber+0x24>
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	3301      	adds	r3, #1
 801039c:	617b      	str	r3, [r7, #20]
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	781b      	ldrb	r3, [r3, #0]
 80103a2:	2b20      	cmp	r3, #32
 80103a4:	d903      	bls.n	80103ae <get_ldnumber+0x34>
 80103a6:	697b      	ldr	r3, [r7, #20]
 80103a8:	781b      	ldrb	r3, [r3, #0]
 80103aa:	2b3a      	cmp	r3, #58	; 0x3a
 80103ac:	d1f4      	bne.n	8010398 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	2b3a      	cmp	r3, #58	; 0x3a
 80103b4:	d11c      	bne.n	80103f0 <get_ldnumber+0x76>
			tp = *path;
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	1c5a      	adds	r2, r3, #1
 80103c0:	60fa      	str	r2, [r7, #12]
 80103c2:	781b      	ldrb	r3, [r3, #0]
 80103c4:	3b30      	subs	r3, #48	; 0x30
 80103c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	2b09      	cmp	r3, #9
 80103cc:	d80e      	bhi.n	80103ec <get_ldnumber+0x72>
 80103ce:	68fa      	ldr	r2, [r7, #12]
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d10a      	bne.n	80103ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80103d6:	68bb      	ldr	r3, [r7, #8]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d107      	bne.n	80103ec <get_ldnumber+0x72>
					vol = (int)i;
 80103dc:	68bb      	ldr	r3, [r7, #8]
 80103de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	3301      	adds	r3, #1
 80103e4:	617b      	str	r3, [r7, #20]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	697a      	ldr	r2, [r7, #20]
 80103ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	e002      	b.n	80103f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80103f0:	2300      	movs	r3, #0
 80103f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80103f4:	693b      	ldr	r3, [r7, #16]
}
 80103f6:	4618      	mov	r0, r3
 80103f8:	371c      	adds	r7, #28
 80103fa:	46bd      	mov	sp, r7
 80103fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010400:	4770      	bx	lr
	...

08010404 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2200      	movs	r2, #0
 8010412:	70da      	strb	r2, [r3, #3]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f04f 32ff 	mov.w	r2, #4294967295
 801041a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801041c:	6839      	ldr	r1, [r7, #0]
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f7fe ff8c 	bl	800f33c <move_window>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <check_fs+0x2a>
 801042a:	2304      	movs	r3, #4
 801042c:	e038      	b.n	80104a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	3338      	adds	r3, #56	; 0x38
 8010432:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe fcd0 	bl	800eddc <ld_word>
 801043c:	4603      	mov	r3, r0
 801043e:	461a      	mov	r2, r3
 8010440:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010444:	429a      	cmp	r2, r3
 8010446:	d001      	beq.n	801044c <check_fs+0x48>
 8010448:	2303      	movs	r3, #3
 801044a:	e029      	b.n	80104a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010452:	2be9      	cmp	r3, #233	; 0xe9
 8010454:	d009      	beq.n	801046a <check_fs+0x66>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801045c:	2beb      	cmp	r3, #235	; 0xeb
 801045e:	d11e      	bne.n	801049e <check_fs+0x9a>
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010466:	2b90      	cmp	r3, #144	; 0x90
 8010468:	d119      	bne.n	801049e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	3338      	adds	r3, #56	; 0x38
 801046e:	3336      	adds	r3, #54	; 0x36
 8010470:	4618      	mov	r0, r3
 8010472:	f7fe fccb 	bl	800ee0c <ld_dword>
 8010476:	4603      	mov	r3, r0
 8010478:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801047c:	4a0a      	ldr	r2, [pc, #40]	; (80104a8 <check_fs+0xa4>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d101      	bne.n	8010486 <check_fs+0x82>
 8010482:	2300      	movs	r3, #0
 8010484:	e00c      	b.n	80104a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	3338      	adds	r3, #56	; 0x38
 801048a:	3352      	adds	r3, #82	; 0x52
 801048c:	4618      	mov	r0, r3
 801048e:	f7fe fcbd 	bl	800ee0c <ld_dword>
 8010492:	4602      	mov	r2, r0
 8010494:	4b05      	ldr	r3, [pc, #20]	; (80104ac <check_fs+0xa8>)
 8010496:	429a      	cmp	r2, r3
 8010498:	d101      	bne.n	801049e <check_fs+0x9a>
 801049a:	2300      	movs	r3, #0
 801049c:	e000      	b.n	80104a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801049e:	2302      	movs	r3, #2
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3708      	adds	r7, #8
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	00544146 	.word	0x00544146
 80104ac:	33544146 	.word	0x33544146

080104b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b096      	sub	sp, #88	; 0x58
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	60b9      	str	r1, [r7, #8]
 80104ba:	4613      	mov	r3, r2
 80104bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	2200      	movs	r2, #0
 80104c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80104c4:	68f8      	ldr	r0, [r7, #12]
 80104c6:	f7ff ff58 	bl	801037a <get_ldnumber>
 80104ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80104cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	da01      	bge.n	80104d6 <find_volume+0x26>
 80104d2:	230b      	movs	r3, #11
 80104d4:	e268      	b.n	80109a8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80104d6:	4ab0      	ldr	r2, [pc, #704]	; (8010798 <find_volume+0x2e8>)
 80104d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80104e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <find_volume+0x3a>
 80104e6:	230c      	movs	r3, #12
 80104e8:	e25e      	b.n	80109a8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80104f0:	79fb      	ldrb	r3, [r7, #7]
 80104f2:	f023 0301 	bic.w	r3, r3, #1
 80104f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80104f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d01a      	beq.n	8010536 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010502:	785b      	ldrb	r3, [r3, #1]
 8010504:	4618      	mov	r0, r3
 8010506:	f7fe fbcb 	bl	800eca0 <disk_status>
 801050a:	4603      	mov	r3, r0
 801050c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010510:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010514:	f003 0301 	and.w	r3, r3, #1
 8010518:	2b00      	cmp	r3, #0
 801051a:	d10c      	bne.n	8010536 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d007      	beq.n	8010532 <find_volume+0x82>
 8010522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010526:	f003 0304 	and.w	r3, r3, #4
 801052a:	2b00      	cmp	r3, #0
 801052c:	d001      	beq.n	8010532 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801052e:	230a      	movs	r3, #10
 8010530:	e23a      	b.n	80109a8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010532:	2300      	movs	r3, #0
 8010534:	e238      	b.n	80109a8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010538:	2200      	movs	r2, #0
 801053a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801053c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801053e:	b2da      	uxtb	r2, r3
 8010540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010542:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010546:	785b      	ldrb	r3, [r3, #1]
 8010548:	4618      	mov	r0, r3
 801054a:	f7fe fbc3 	bl	800ecd4 <disk_initialize>
 801054e:	4603      	mov	r3, r0
 8010550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010558:	f003 0301 	and.w	r3, r3, #1
 801055c:	2b00      	cmp	r3, #0
 801055e:	d001      	beq.n	8010564 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010560:	2303      	movs	r3, #3
 8010562:	e221      	b.n	80109a8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010564:	79fb      	ldrb	r3, [r7, #7]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d007      	beq.n	801057a <find_volume+0xca>
 801056a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801056e:	f003 0304 	and.w	r3, r3, #4
 8010572:	2b00      	cmp	r3, #0
 8010574:	d001      	beq.n	801057a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010576:	230a      	movs	r3, #10
 8010578:	e216      	b.n	80109a8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	7858      	ldrb	r0, [r3, #1]
 801057e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010580:	330c      	adds	r3, #12
 8010582:	461a      	mov	r2, r3
 8010584:	2102      	movs	r1, #2
 8010586:	f7fe fc0b 	bl	800eda0 <disk_ioctl>
 801058a:	4603      	mov	r3, r0
 801058c:	2b00      	cmp	r3, #0
 801058e:	d001      	beq.n	8010594 <find_volume+0xe4>
 8010590:	2301      	movs	r3, #1
 8010592:	e209      	b.n	80109a8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010596:	899b      	ldrh	r3, [r3, #12]
 8010598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801059c:	d80d      	bhi.n	80105ba <find_volume+0x10a>
 801059e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105a0:	899b      	ldrh	r3, [r3, #12]
 80105a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80105a6:	d308      	bcc.n	80105ba <find_volume+0x10a>
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	899b      	ldrh	r3, [r3, #12]
 80105ac:	461a      	mov	r2, r3
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	899b      	ldrh	r3, [r3, #12]
 80105b2:	3b01      	subs	r3, #1
 80105b4:	4013      	ands	r3, r2
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <find_volume+0x10e>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e1f4      	b.n	80109a8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80105be:	2300      	movs	r3, #0
 80105c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80105c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105c6:	f7ff ff1d 	bl	8010404 <check_fs>
 80105ca:	4603      	mov	r3, r0
 80105cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80105d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105d4:	2b02      	cmp	r3, #2
 80105d6:	d14b      	bne.n	8010670 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80105d8:	2300      	movs	r3, #0
 80105da:	643b      	str	r3, [r7, #64]	; 0x40
 80105dc:	e01f      	b.n	801061e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80105de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80105e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105e6:	011b      	lsls	r3, r3, #4
 80105e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80105ec:	4413      	add	r3, r2
 80105ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f2:	3304      	adds	r3, #4
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d006      	beq.n	8010608 <find_volume+0x158>
 80105fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105fc:	3308      	adds	r3, #8
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fe fc04 	bl	800ee0c <ld_dword>
 8010604:	4602      	mov	r2, r0
 8010606:	e000      	b.n	801060a <find_volume+0x15a>
 8010608:	2200      	movs	r2, #0
 801060a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801060c:	009b      	lsls	r3, r3, #2
 801060e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010612:	440b      	add	r3, r1
 8010614:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801061a:	3301      	adds	r3, #1
 801061c:	643b      	str	r3, [r7, #64]	; 0x40
 801061e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010620:	2b03      	cmp	r3, #3
 8010622:	d9dc      	bls.n	80105de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010624:	2300      	movs	r3, #0
 8010626:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801062a:	2b00      	cmp	r3, #0
 801062c:	d002      	beq.n	8010634 <find_volume+0x184>
 801062e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010630:	3b01      	subs	r3, #1
 8010632:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010636:	009b      	lsls	r3, r3, #2
 8010638:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801063c:	4413      	add	r3, r2
 801063e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010642:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010646:	2b00      	cmp	r3, #0
 8010648:	d005      	beq.n	8010656 <find_volume+0x1a6>
 801064a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801064c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801064e:	f7ff fed9 	bl	8010404 <check_fs>
 8010652:	4603      	mov	r3, r0
 8010654:	e000      	b.n	8010658 <find_volume+0x1a8>
 8010656:	2303      	movs	r3, #3
 8010658:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801065c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010660:	2b01      	cmp	r3, #1
 8010662:	d905      	bls.n	8010670 <find_volume+0x1c0>
 8010664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010666:	3301      	adds	r3, #1
 8010668:	643b      	str	r3, [r7, #64]	; 0x40
 801066a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801066c:	2b03      	cmp	r3, #3
 801066e:	d9e1      	bls.n	8010634 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010674:	2b04      	cmp	r3, #4
 8010676:	d101      	bne.n	801067c <find_volume+0x1cc>
 8010678:	2301      	movs	r3, #1
 801067a:	e195      	b.n	80109a8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801067c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010680:	2b01      	cmp	r3, #1
 8010682:	d901      	bls.n	8010688 <find_volume+0x1d8>
 8010684:	230d      	movs	r3, #13
 8010686:	e18f      	b.n	80109a8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068a:	3338      	adds	r3, #56	; 0x38
 801068c:	330b      	adds	r3, #11
 801068e:	4618      	mov	r0, r3
 8010690:	f7fe fba4 	bl	800eddc <ld_word>
 8010694:	4603      	mov	r3, r0
 8010696:	461a      	mov	r2, r3
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	899b      	ldrh	r3, [r3, #12]
 801069c:	429a      	cmp	r2, r3
 801069e:	d001      	beq.n	80106a4 <find_volume+0x1f4>
 80106a0:	230d      	movs	r3, #13
 80106a2:	e181      	b.n	80109a8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80106a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a6:	3338      	adds	r3, #56	; 0x38
 80106a8:	3316      	adds	r3, #22
 80106aa:	4618      	mov	r0, r3
 80106ac:	f7fe fb96 	bl	800eddc <ld_word>
 80106b0:	4603      	mov	r3, r0
 80106b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80106b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <find_volume+0x218>
 80106ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106bc:	3338      	adds	r3, #56	; 0x38
 80106be:	3324      	adds	r3, #36	; 0x24
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fe fba3 	bl	800ee0c <ld_dword>
 80106c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80106d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80106d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106da:	789b      	ldrb	r3, [r3, #2]
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d005      	beq.n	80106ec <find_volume+0x23c>
 80106e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e2:	789b      	ldrb	r3, [r3, #2]
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d001      	beq.n	80106ec <find_volume+0x23c>
 80106e8:	230d      	movs	r3, #13
 80106ea:	e15d      	b.n	80109a8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	789b      	ldrb	r3, [r3, #2]
 80106f0:	461a      	mov	r2, r3
 80106f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106f4:	fb02 f303 	mul.w	r3, r2, r3
 80106f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010700:	b29a      	uxth	r2, r3
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010708:	895b      	ldrh	r3, [r3, #10]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d008      	beq.n	8010720 <find_volume+0x270>
 801070e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010710:	895b      	ldrh	r3, [r3, #10]
 8010712:	461a      	mov	r2, r3
 8010714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010716:	895b      	ldrh	r3, [r3, #10]
 8010718:	3b01      	subs	r3, #1
 801071a:	4013      	ands	r3, r2
 801071c:	2b00      	cmp	r3, #0
 801071e:	d001      	beq.n	8010724 <find_volume+0x274>
 8010720:	230d      	movs	r3, #13
 8010722:	e141      	b.n	80109a8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010726:	3338      	adds	r3, #56	; 0x38
 8010728:	3311      	adds	r3, #17
 801072a:	4618      	mov	r0, r3
 801072c:	f7fe fb56 	bl	800eddc <ld_word>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010736:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073a:	891b      	ldrh	r3, [r3, #8]
 801073c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801073e:	8992      	ldrh	r2, [r2, #12]
 8010740:	0952      	lsrs	r2, r2, #5
 8010742:	b292      	uxth	r2, r2
 8010744:	fbb3 f1f2 	udiv	r1, r3, r2
 8010748:	fb02 f201 	mul.w	r2, r2, r1
 801074c:	1a9b      	subs	r3, r3, r2
 801074e:	b29b      	uxth	r3, r3
 8010750:	2b00      	cmp	r3, #0
 8010752:	d001      	beq.n	8010758 <find_volume+0x2a8>
 8010754:	230d      	movs	r3, #13
 8010756:	e127      	b.n	80109a8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075a:	3338      	adds	r3, #56	; 0x38
 801075c:	3313      	adds	r3, #19
 801075e:	4618      	mov	r0, r3
 8010760:	f7fe fb3c 	bl	800eddc <ld_word>
 8010764:	4603      	mov	r3, r0
 8010766:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076a:	2b00      	cmp	r3, #0
 801076c:	d106      	bne.n	801077c <find_volume+0x2cc>
 801076e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010770:	3338      	adds	r3, #56	; 0x38
 8010772:	3320      	adds	r3, #32
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe fb49 	bl	800ee0c <ld_dword>
 801077a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801077c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801077e:	3338      	adds	r3, #56	; 0x38
 8010780:	330e      	adds	r3, #14
 8010782:	4618      	mov	r0, r3
 8010784:	f7fe fb2a 	bl	800eddc <ld_word>
 8010788:	4603      	mov	r3, r0
 801078a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801078c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <find_volume+0x2ec>
 8010792:	230d      	movs	r3, #13
 8010794:	e108      	b.n	80109a8 <find_volume+0x4f8>
 8010796:	bf00      	nop
 8010798:	200335d0 	.word	0x200335d0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801079c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801079e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a0:	4413      	add	r3, r2
 80107a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a4:	8911      	ldrh	r1, [r2, #8]
 80107a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a8:	8992      	ldrh	r2, [r2, #12]
 80107aa:	0952      	lsrs	r2, r2, #5
 80107ac:	b292      	uxth	r2, r2
 80107ae:	fbb1 f2f2 	udiv	r2, r1, r2
 80107b2:	b292      	uxth	r2, r2
 80107b4:	4413      	add	r3, r2
 80107b6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80107b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107bc:	429a      	cmp	r2, r3
 80107be:	d201      	bcs.n	80107c4 <find_volume+0x314>
 80107c0:	230d      	movs	r3, #13
 80107c2:	e0f1      	b.n	80109a8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80107c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107cc:	8952      	ldrh	r2, [r2, #10]
 80107ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80107d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80107d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d101      	bne.n	80107de <find_volume+0x32e>
 80107da:	230d      	movs	r3, #13
 80107dc:	e0e4      	b.n	80109a8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80107de:	2303      	movs	r3, #3
 80107e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80107e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d802      	bhi.n	80107f4 <find_volume+0x344>
 80107ee:	2302      	movs	r3, #2
 80107f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107fa:	4293      	cmp	r3, r2
 80107fc:	d802      	bhi.n	8010804 <find_volume+0x354>
 80107fe:	2301      	movs	r3, #1
 8010800:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010806:	1c9a      	adds	r2, r3, #2
 8010808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801080c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010810:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010812:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010816:	441a      	add	r2, r3
 8010818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801081a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801081c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801081e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010820:	441a      	add	r2, r3
 8010822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010824:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010826:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801082a:	2b03      	cmp	r3, #3
 801082c:	d11e      	bne.n	801086c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801082e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010830:	3338      	adds	r3, #56	; 0x38
 8010832:	332a      	adds	r3, #42	; 0x2a
 8010834:	4618      	mov	r0, r3
 8010836:	f7fe fad1 	bl	800eddc <ld_word>
 801083a:	4603      	mov	r3, r0
 801083c:	2b00      	cmp	r3, #0
 801083e:	d001      	beq.n	8010844 <find_volume+0x394>
 8010840:	230d      	movs	r3, #13
 8010842:	e0b1      	b.n	80109a8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	891b      	ldrh	r3, [r3, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <find_volume+0x3a0>
 801084c:	230d      	movs	r3, #13
 801084e:	e0ab      	b.n	80109a8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010852:	3338      	adds	r3, #56	; 0x38
 8010854:	332c      	adds	r3, #44	; 0x2c
 8010856:	4618      	mov	r0, r3
 8010858:	f7fe fad8 	bl	800ee0c <ld_dword>
 801085c:	4602      	mov	r2, r0
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010864:	69db      	ldr	r3, [r3, #28]
 8010866:	009b      	lsls	r3, r3, #2
 8010868:	647b      	str	r3, [r7, #68]	; 0x44
 801086a:	e01f      	b.n	80108ac <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801086c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086e:	891b      	ldrh	r3, [r3, #8]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <find_volume+0x3c8>
 8010874:	230d      	movs	r3, #13
 8010876:	e097      	b.n	80109a8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801087c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087e:	441a      	add	r2, r3
 8010880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010882:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010884:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010888:	2b02      	cmp	r3, #2
 801088a:	d103      	bne.n	8010894 <find_volume+0x3e4>
 801088c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801088e:	69db      	ldr	r3, [r3, #28]
 8010890:	005b      	lsls	r3, r3, #1
 8010892:	e00a      	b.n	80108aa <find_volume+0x3fa>
 8010894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010896:	69da      	ldr	r2, [r3, #28]
 8010898:	4613      	mov	r3, r2
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	4413      	add	r3, r2
 801089e:	085a      	lsrs	r2, r3, #1
 80108a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a2:	69db      	ldr	r3, [r3, #28]
 80108a4:	f003 0301 	and.w	r3, r3, #1
 80108a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80108aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80108ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ae:	6a1a      	ldr	r2, [r3, #32]
 80108b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b2:	899b      	ldrh	r3, [r3, #12]
 80108b4:	4619      	mov	r1, r3
 80108b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80108b8:	440b      	add	r3, r1
 80108ba:	3b01      	subs	r3, #1
 80108bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108be:	8989      	ldrh	r1, [r1, #12]
 80108c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d201      	bcs.n	80108cc <find_volume+0x41c>
 80108c8:	230d      	movs	r3, #13
 80108ca:	e06d      	b.n	80109a8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80108cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ce:	f04f 32ff 	mov.w	r2, #4294967295
 80108d2:	615a      	str	r2, [r3, #20]
 80108d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d6:	695a      	ldr	r2, [r3, #20]
 80108d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108da:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80108dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108de:	2280      	movs	r2, #128	; 0x80
 80108e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80108e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108e6:	2b03      	cmp	r3, #3
 80108e8:	d149      	bne.n	801097e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80108ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ec:	3338      	adds	r3, #56	; 0x38
 80108ee:	3330      	adds	r3, #48	; 0x30
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fe fa73 	bl	800eddc <ld_word>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d140      	bne.n	801097e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80108fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108fe:	3301      	adds	r3, #1
 8010900:	4619      	mov	r1, r3
 8010902:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010904:	f7fe fd1a 	bl	800f33c <move_window>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d137      	bne.n	801097e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	2200      	movs	r2, #0
 8010912:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010916:	3338      	adds	r3, #56	; 0x38
 8010918:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801091c:	4618      	mov	r0, r3
 801091e:	f7fe fa5d 	bl	800eddc <ld_word>
 8010922:	4603      	mov	r3, r0
 8010924:	461a      	mov	r2, r3
 8010926:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801092a:	429a      	cmp	r2, r3
 801092c:	d127      	bne.n	801097e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	3338      	adds	r3, #56	; 0x38
 8010932:	4618      	mov	r0, r3
 8010934:	f7fe fa6a 	bl	800ee0c <ld_dword>
 8010938:	4602      	mov	r2, r0
 801093a:	4b1d      	ldr	r3, [pc, #116]	; (80109b0 <find_volume+0x500>)
 801093c:	429a      	cmp	r2, r3
 801093e:	d11e      	bne.n	801097e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	3338      	adds	r3, #56	; 0x38
 8010944:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fa5f 	bl	800ee0c <ld_dword>
 801094e:	4602      	mov	r2, r0
 8010950:	4b18      	ldr	r3, [pc, #96]	; (80109b4 <find_volume+0x504>)
 8010952:	429a      	cmp	r2, r3
 8010954:	d113      	bne.n	801097e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010958:	3338      	adds	r3, #56	; 0x38
 801095a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe fa54 	bl	800ee0c <ld_dword>
 8010964:	4602      	mov	r2, r0
 8010966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010968:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801096a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096c:	3338      	adds	r3, #56	; 0x38
 801096e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fa4a 	bl	800ee0c <ld_dword>
 8010978:	4602      	mov	r2, r0
 801097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801097e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010980:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010984:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010986:	4b0c      	ldr	r3, [pc, #48]	; (80109b8 <find_volume+0x508>)
 8010988:	881b      	ldrh	r3, [r3, #0]
 801098a:	3301      	adds	r3, #1
 801098c:	b29a      	uxth	r2, r3
 801098e:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <find_volume+0x508>)
 8010990:	801a      	strh	r2, [r3, #0]
 8010992:	4b09      	ldr	r3, [pc, #36]	; (80109b8 <find_volume+0x508>)
 8010994:	881a      	ldrh	r2, [r3, #0]
 8010996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010998:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	2200      	movs	r2, #0
 801099e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80109a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80109a2:	f7fe fc63 	bl	800f26c <clear_lock>
#endif
	return FR_OK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3758      	adds	r7, #88	; 0x58
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	41615252 	.word	0x41615252
 80109b4:	61417272 	.word	0x61417272
 80109b8:	200335d4 	.word	0x200335d4

080109bc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80109c6:	2309      	movs	r3, #9
 80109c8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d01c      	beq.n	8010a0a <validate+0x4e>
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d018      	beq.n	8010a0a <validate+0x4e>
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d013      	beq.n	8010a0a <validate+0x4e>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	889a      	ldrh	r2, [r3, #4]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	88db      	ldrh	r3, [r3, #6]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d10c      	bne.n	8010a0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	785b      	ldrb	r3, [r3, #1]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fe f952 	bl	800eca0 <disk_status>
 80109fc:	4603      	mov	r3, r0
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d101      	bne.n	8010a0a <validate+0x4e>
			res = FR_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a0a:	7bfb      	ldrb	r3, [r7, #15]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d102      	bne.n	8010a16 <validate+0x5a>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	e000      	b.n	8010a18 <validate+0x5c>
 8010a16:	2300      	movs	r3, #0
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	6013      	str	r3, [r2, #0]
	return res;
 8010a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3710      	adds	r7, #16
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
	...

08010a28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b088      	sub	sp, #32
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	60f8      	str	r0, [r7, #12]
 8010a30:	60b9      	str	r1, [r7, #8]
 8010a32:	4613      	mov	r3, r2
 8010a34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010a3a:	f107 0310 	add.w	r3, r7, #16
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f7ff fc9b 	bl	801037a <get_ldnumber>
 8010a44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	da01      	bge.n	8010a50 <f_mount+0x28>
 8010a4c:	230b      	movs	r3, #11
 8010a4e:	e02b      	b.n	8010aa8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010a50:	4a17      	ldr	r2, [pc, #92]	; (8010ab0 <f_mount+0x88>)
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d005      	beq.n	8010a6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a60:	69b8      	ldr	r0, [r7, #24]
 8010a62:	f7fe fc03 	bl	800f26c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a66:	69bb      	ldr	r3, [r7, #24]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d002      	beq.n	8010a78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	2200      	movs	r2, #0
 8010a76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	490d      	ldr	r1, [pc, #52]	; (8010ab0 <f_mount+0x88>)
 8010a7c:	69fb      	ldr	r3, [r7, #28]
 8010a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d002      	beq.n	8010a8e <f_mount+0x66>
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d001      	beq.n	8010a92 <f_mount+0x6a>
 8010a8e:	2300      	movs	r3, #0
 8010a90:	e00a      	b.n	8010aa8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010a92:	f107 010c 	add.w	r1, r7, #12
 8010a96:	f107 0308 	add.w	r3, r7, #8
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7ff fd07 	bl	80104b0 <find_volume>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010aa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3720      	adds	r7, #32
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	200335d0 	.word	0x200335d0

08010ab4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b098      	sub	sp, #96	; 0x60
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	4613      	mov	r3, r2
 8010ac0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d101      	bne.n	8010acc <f_open+0x18>
 8010ac8:	2309      	movs	r3, #9
 8010aca:	e1ba      	b.n	8010e42 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ad2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010ad4:	79fa      	ldrb	r2, [r7, #7]
 8010ad6:	f107 0110 	add.w	r1, r7, #16
 8010ada:	f107 0308 	add.w	r3, r7, #8
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7ff fce6 	bl	80104b0 <find_volume>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010aea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	f040 819e 	bne.w	8010e30 <f_open+0x37c>
		dj.obj.fs = fs;
 8010af4:	693b      	ldr	r3, [r7, #16]
 8010af6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010af8:	68ba      	ldr	r2, [r7, #8]
 8010afa:	f107 0314 	add.w	r3, r7, #20
 8010afe:	4611      	mov	r1, r2
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff fba5 	bl	8010250 <follow_path>
 8010b06:	4603      	mov	r3, r0
 8010b08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d11a      	bne.n	8010b4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010b18:	b25b      	sxtb	r3, r3
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	da03      	bge.n	8010b26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010b1e:	2306      	movs	r3, #6
 8010b20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010b24:	e011      	b.n	8010b4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b26:	79fb      	ldrb	r3, [r7, #7]
 8010b28:	f023 0301 	bic.w	r3, r3, #1
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	bf14      	ite	ne
 8010b30:	2301      	movne	r3, #1
 8010b32:	2300      	moveq	r3, #0
 8010b34:	b2db      	uxtb	r3, r3
 8010b36:	461a      	mov	r2, r3
 8010b38:	f107 0314 	add.w	r3, r7, #20
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7fe fa4c 	bl	800efdc <chk_lock>
 8010b44:	4603      	mov	r3, r0
 8010b46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010b4a:	79fb      	ldrb	r3, [r7, #7]
 8010b4c:	f003 031c 	and.w	r3, r3, #28
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d07e      	beq.n	8010c52 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010b54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d017      	beq.n	8010b8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010b60:	2b04      	cmp	r3, #4
 8010b62:	d10e      	bne.n	8010b82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010b64:	f7fe fa96 	bl	800f094 <enq_lock>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d006      	beq.n	8010b7c <f_open+0xc8>
 8010b6e:	f107 0314 	add.w	r3, r7, #20
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff fa52 	bl	801001c <dir_register>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	e000      	b.n	8010b7e <f_open+0xca>
 8010b7c:	2312      	movs	r3, #18
 8010b7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010b82:	79fb      	ldrb	r3, [r7, #7]
 8010b84:	f043 0308 	orr.w	r3, r3, #8
 8010b88:	71fb      	strb	r3, [r7, #7]
 8010b8a:	e010      	b.n	8010bae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010b8c:	7ebb      	ldrb	r3, [r7, #26]
 8010b8e:	f003 0311 	and.w	r3, r3, #17
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d003      	beq.n	8010b9e <f_open+0xea>
					res = FR_DENIED;
 8010b96:	2307      	movs	r3, #7
 8010b98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010b9c:	e007      	b.n	8010bae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010b9e:	79fb      	ldrb	r3, [r7, #7]
 8010ba0:	f003 0304 	and.w	r3, r3, #4
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <f_open+0xfa>
 8010ba8:	2308      	movs	r3, #8
 8010baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d167      	bne.n	8010c86 <f_open+0x1d2>
 8010bb6:	79fb      	ldrb	r3, [r7, #7]
 8010bb8:	f003 0308 	and.w	r3, r3, #8
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d062      	beq.n	8010c86 <f_open+0x1d2>
				dw = GET_FATTIME();
 8010bc0:	4ba2      	ldr	r3, [pc, #648]	; (8010e4c <f_open+0x398>)
 8010bc2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc6:	330e      	adds	r3, #14
 8010bc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe f95c 	bl	800ee88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bd2:	3316      	adds	r3, #22
 8010bd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	f7fe f956 	bl	800ee88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bde:	330b      	adds	r3, #11
 8010be0:	2220      	movs	r2, #32
 8010be2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7ff f925 	bl	800fe3a <ld_clust>
 8010bf0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010bf2:	693b      	ldr	r3, [r7, #16]
 8010bf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7ff f93d 	bl	800fe78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c00:	331c      	adds	r3, #28
 8010c02:	2100      	movs	r1, #0
 8010c04:	4618      	mov	r0, r3
 8010c06:	f7fe f93f 	bl	800ee88 <st_dword>
					fs->wflag = 1;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d037      	beq.n	8010c86 <f_open+0x1d2>
						dw = fs->winsect;
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c1a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010c1c:	f107 0314 	add.w	r3, r7, #20
 8010c20:	2200      	movs	r2, #0
 8010c22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fe2d 	bl	800f884 <remove_chain>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d126      	bne.n	8010c86 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	f7fe fb7d 	bl	800f33c <move_window>
 8010c42:	4603      	mov	r3, r0
 8010c44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010c48:	693b      	ldr	r3, [r7, #16]
 8010c4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c4c:	3a01      	subs	r2, #1
 8010c4e:	611a      	str	r2, [r3, #16]
 8010c50:	e019      	b.n	8010c86 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d115      	bne.n	8010c86 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010c5a:	7ebb      	ldrb	r3, [r7, #26]
 8010c5c:	f003 0310 	and.w	r3, r3, #16
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d003      	beq.n	8010c6c <f_open+0x1b8>
					res = FR_NO_FILE;
 8010c64:	2304      	movs	r3, #4
 8010c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c6a:	e00c      	b.n	8010c86 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010c6c:	79fb      	ldrb	r3, [r7, #7]
 8010c6e:	f003 0302 	and.w	r3, r3, #2
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d007      	beq.n	8010c86 <f_open+0x1d2>
 8010c76:	7ebb      	ldrb	r3, [r7, #26]
 8010c78:	f003 0301 	and.w	r3, r3, #1
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d002      	beq.n	8010c86 <f_open+0x1d2>
						res = FR_DENIED;
 8010c80:	2307      	movs	r3, #7
 8010c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010c86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d128      	bne.n	8010ce0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010c8e:	79fb      	ldrb	r3, [r7, #7]
 8010c90:	f003 0308 	and.w	r3, r3, #8
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d003      	beq.n	8010ca0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010c98:	79fb      	ldrb	r3, [r7, #7]
 8010c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010c9e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010cae:	79fb      	ldrb	r3, [r7, #7]
 8010cb0:	f023 0301 	bic.w	r3, r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	bf14      	ite	ne
 8010cb8:	2301      	movne	r3, #1
 8010cba:	2300      	moveq	r3, #0
 8010cbc:	b2db      	uxtb	r3, r3
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	f107 0314 	add.w	r3, r7, #20
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7fe fa06 	bl	800f0d8 <inc_lock>
 8010ccc:	4602      	mov	r2, r0
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	691b      	ldr	r3, [r3, #16]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d102      	bne.n	8010ce0 <f_open+0x22c>
 8010cda:	2302      	movs	r3, #2
 8010cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f040 80a3 	bne.w	8010e30 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010cea:	693b      	ldr	r3, [r7, #16]
 8010cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010cee:	4611      	mov	r1, r2
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7ff f8a2 	bl	800fe3a <ld_clust>
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfe:	331c      	adds	r3, #28
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7fe f883 	bl	800ee0c <ld_dword>
 8010d06:	4602      	mov	r2, r0
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	2200      	movs	r2, #0
 8010d10:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010d12:	693a      	ldr	r2, [r7, #16]
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	88da      	ldrh	r2, [r3, #6]
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	79fa      	ldrb	r2, [r7, #7]
 8010d24:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2200      	movs	r2, #0
 8010d36:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	3330      	adds	r3, #48	; 0x30
 8010d3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010d40:	2100      	movs	r1, #0
 8010d42:	4618      	mov	r0, r3
 8010d44:	f7fe f8ed 	bl	800ef22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	f003 0320 	and.w	r3, r3, #32
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d06e      	beq.n	8010e30 <f_open+0x37c>
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d06a      	beq.n	8010e30 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	68da      	ldr	r2, [r3, #12]
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	895b      	ldrh	r3, [r3, #10]
 8010d66:	461a      	mov	r2, r3
 8010d68:	693b      	ldr	r3, [r7, #16]
 8010d6a:	899b      	ldrh	r3, [r3, #12]
 8010d6c:	fb03 f302 	mul.w	r3, r3, r2
 8010d70:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	689b      	ldr	r3, [r3, #8]
 8010d76:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	68db      	ldr	r3, [r3, #12]
 8010d7c:	657b      	str	r3, [r7, #84]	; 0x54
 8010d7e:	e016      	b.n	8010dae <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fe fb96 	bl	800f4b6 <get_fat>
 8010d8a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010d8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d802      	bhi.n	8010d98 <f_open+0x2e4>
 8010d92:	2302      	movs	r3, #2
 8010d94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d9e:	d102      	bne.n	8010da6 <f_open+0x2f2>
 8010da0:	2301      	movs	r3, #1
 8010da2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	657b      	str	r3, [r7, #84]	; 0x54
 8010dae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d103      	bne.n	8010dbe <f_open+0x30a>
 8010db6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d8e0      	bhi.n	8010d80 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010dc2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010dc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d131      	bne.n	8010e30 <f_open+0x37c>
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	899b      	ldrh	r3, [r3, #12]
 8010dd0:	461a      	mov	r2, r3
 8010dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dd8:	fb02 f201 	mul.w	r2, r2, r1
 8010ddc:	1a9b      	subs	r3, r3, r2
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d026      	beq.n	8010e30 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7fe fb46 	bl	800f478 <clust2sect>
 8010dec:	6478      	str	r0, [r7, #68]	; 0x44
 8010dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d103      	bne.n	8010dfc <f_open+0x348>
						res = FR_INT_ERR;
 8010df4:	2302      	movs	r3, #2
 8010df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010dfa:	e019      	b.n	8010e30 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	899b      	ldrh	r3, [r3, #12]
 8010e00:	461a      	mov	r2, r3
 8010e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e04:	fbb3 f2f2 	udiv	r2, r3, r2
 8010e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e0a:	441a      	add	r2, r3
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	7858      	ldrb	r0, [r3, #1]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6a1a      	ldr	r2, [r3, #32]
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f7fd ff7e 	bl	800ed20 <disk_read>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d002      	beq.n	8010e30 <f_open+0x37c>
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010e30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d002      	beq.n	8010e3e <f_open+0x38a>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2200      	movs	r2, #0
 8010e3c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	3760      	adds	r7, #96	; 0x60
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
 8010e4a:	bf00      	nop
 8010e4c:	274a0000 	.word	0x274a0000

08010e50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b08e      	sub	sp, #56	; 0x38
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
 8010e5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010e62:	683b      	ldr	r3, [r7, #0]
 8010e64:	2200      	movs	r2, #0
 8010e66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f107 0214 	add.w	r2, r7, #20
 8010e6e:	4611      	mov	r1, r2
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ff fda3 	bl	80109bc <validate>
 8010e76:	4603      	mov	r3, r0
 8010e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010e7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d107      	bne.n	8010e94 <f_read+0x44>
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	7d5b      	ldrb	r3, [r3, #21]
 8010e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d002      	beq.n	8010e9a <f_read+0x4a>
 8010e94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e98:	e135      	b.n	8011106 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	7d1b      	ldrb	r3, [r3, #20]
 8010e9e:	f003 0301 	and.w	r3, r3, #1
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d101      	bne.n	8010eaa <f_read+0x5a>
 8010ea6:	2307      	movs	r3, #7
 8010ea8:	e12d      	b.n	8011106 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	68da      	ldr	r2, [r3, #12]
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	699b      	ldr	r3, [r3, #24]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010eb6:	687a      	ldr	r2, [r7, #4]
 8010eb8:	6a3b      	ldr	r3, [r7, #32]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	f240 811e 	bls.w	80110fc <f_read+0x2ac>
 8010ec0:	6a3b      	ldr	r3, [r7, #32]
 8010ec2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010ec4:	e11a      	b.n	80110fc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	699b      	ldr	r3, [r3, #24]
 8010eca:	697a      	ldr	r2, [r7, #20]
 8010ecc:	8992      	ldrh	r2, [r2, #12]
 8010ece:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ed2:	fb02 f201 	mul.w	r2, r2, r1
 8010ed6:	1a9b      	subs	r3, r3, r2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	f040 80d5 	bne.w	8011088 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	697a      	ldr	r2, [r7, #20]
 8010ee4:	8992      	ldrh	r2, [r2, #12]
 8010ee6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010eea:	697a      	ldr	r2, [r7, #20]
 8010eec:	8952      	ldrh	r2, [r2, #10]
 8010eee:	3a01      	subs	r2, #1
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d12f      	bne.n	8010f5a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	699b      	ldr	r3, [r3, #24]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d103      	bne.n	8010f0a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	689b      	ldr	r3, [r3, #8]
 8010f06:	633b      	str	r3, [r7, #48]	; 0x30
 8010f08:	e013      	b.n	8010f32 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d007      	beq.n	8010f22 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	699b      	ldr	r3, [r3, #24]
 8010f16:	4619      	mov	r1, r3
 8010f18:	68f8      	ldr	r0, [r7, #12]
 8010f1a:	f7fe fdb0 	bl	800fa7e <clmt_clust>
 8010f1e:	6338      	str	r0, [r7, #48]	; 0x30
 8010f20:	e007      	b.n	8010f32 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010f22:	68fa      	ldr	r2, [r7, #12]
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	69db      	ldr	r3, [r3, #28]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	4610      	mov	r0, r2
 8010f2c:	f7fe fac3 	bl	800f4b6 <get_fat>
 8010f30:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f34:	2b01      	cmp	r3, #1
 8010f36:	d804      	bhi.n	8010f42 <f_read+0xf2>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2202      	movs	r2, #2
 8010f3c:	755a      	strb	r2, [r3, #21]
 8010f3e:	2302      	movs	r3, #2
 8010f40:	e0e1      	b.n	8011106 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f48:	d104      	bne.n	8010f54 <f_read+0x104>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	2201      	movs	r2, #1
 8010f4e:	755a      	strb	r2, [r3, #21]
 8010f50:	2301      	movs	r3, #1
 8010f52:	e0d8      	b.n	8011106 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f58:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	69db      	ldr	r3, [r3, #28]
 8010f60:	4619      	mov	r1, r3
 8010f62:	4610      	mov	r0, r2
 8010f64:	f7fe fa88 	bl	800f478 <clust2sect>
 8010f68:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d104      	bne.n	8010f7a <f_read+0x12a>
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	2202      	movs	r2, #2
 8010f74:	755a      	strb	r2, [r3, #21]
 8010f76:	2302      	movs	r3, #2
 8010f78:	e0c5      	b.n	8011106 <f_read+0x2b6>
			sect += csect;
 8010f7a:	69ba      	ldr	r2, [r7, #24]
 8010f7c:	69fb      	ldr	r3, [r7, #28]
 8010f7e:	4413      	add	r3, r2
 8010f80:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010f82:	697b      	ldr	r3, [r7, #20]
 8010f84:	899b      	ldrh	r3, [r3, #12]
 8010f86:	461a      	mov	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f8e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d041      	beq.n	801101a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010f96:	69fa      	ldr	r2, [r7, #28]
 8010f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f9a:	4413      	add	r3, r2
 8010f9c:	697a      	ldr	r2, [r7, #20]
 8010f9e:	8952      	ldrh	r2, [r2, #10]
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d905      	bls.n	8010fb0 <f_read+0x160>
					cc = fs->csize - csect;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	895b      	ldrh	r3, [r3, #10]
 8010fa8:	461a      	mov	r2, r3
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	7858      	ldrb	r0, [r3, #1]
 8010fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb6:	69ba      	ldr	r2, [r7, #24]
 8010fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fba:	f7fd feb1 	bl	800ed20 <disk_read>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d004      	beq.n	8010fce <f_read+0x17e>
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2201      	movs	r2, #1
 8010fc8:	755a      	strb	r2, [r3, #21]
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e09b      	b.n	8011106 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	7d1b      	ldrb	r3, [r3, #20]
 8010fd2:	b25b      	sxtb	r3, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	da18      	bge.n	801100a <f_read+0x1ba>
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	6a1a      	ldr	r2, [r3, #32]
 8010fdc:	69bb      	ldr	r3, [r7, #24]
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d911      	bls.n	801100a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	6a1a      	ldr	r2, [r3, #32]
 8010fea:	69bb      	ldr	r3, [r7, #24]
 8010fec:	1ad3      	subs	r3, r2, r3
 8010fee:	697a      	ldr	r2, [r7, #20]
 8010ff0:	8992      	ldrh	r2, [r2, #12]
 8010ff2:	fb02 f303 	mul.w	r3, r2, r3
 8010ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ff8:	18d0      	adds	r0, r2, r3
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	899b      	ldrh	r3, [r3, #12]
 8011004:	461a      	mov	r2, r3
 8011006:	f7fd ff6b 	bl	800eee0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	899b      	ldrh	r3, [r3, #12]
 801100e:	461a      	mov	r2, r3
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	fb02 f303 	mul.w	r3, r2, r3
 8011016:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011018:	e05c      	b.n	80110d4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	6a1b      	ldr	r3, [r3, #32]
 801101e:	69ba      	ldr	r2, [r7, #24]
 8011020:	429a      	cmp	r2, r3
 8011022:	d02e      	beq.n	8011082 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	7d1b      	ldrb	r3, [r3, #20]
 8011028:	b25b      	sxtb	r3, r3
 801102a:	2b00      	cmp	r3, #0
 801102c:	da18      	bge.n	8011060 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801102e:	697b      	ldr	r3, [r7, #20]
 8011030:	7858      	ldrb	r0, [r3, #1]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	6a1a      	ldr	r2, [r3, #32]
 801103c:	2301      	movs	r3, #1
 801103e:	f7fd fe8f 	bl	800ed60 <disk_write>
 8011042:	4603      	mov	r3, r0
 8011044:	2b00      	cmp	r3, #0
 8011046:	d004      	beq.n	8011052 <f_read+0x202>
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	2201      	movs	r2, #1
 801104c:	755a      	strb	r2, [r3, #21]
 801104e:	2301      	movs	r3, #1
 8011050:	e059      	b.n	8011106 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	7d1b      	ldrb	r3, [r3, #20]
 8011056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801105a:	b2da      	uxtb	r2, r3
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	7858      	ldrb	r0, [r3, #1]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801106a:	2301      	movs	r3, #1
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	f7fd fe57 	bl	800ed20 <disk_read>
 8011072:	4603      	mov	r3, r0
 8011074:	2b00      	cmp	r3, #0
 8011076:	d004      	beq.n	8011082 <f_read+0x232>
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2201      	movs	r2, #1
 801107c:	755a      	strb	r2, [r3, #21]
 801107e:	2301      	movs	r3, #1
 8011080:	e041      	b.n	8011106 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	69ba      	ldr	r2, [r7, #24]
 8011086:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	899b      	ldrh	r3, [r3, #12]
 801108c:	4618      	mov	r0, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	699b      	ldr	r3, [r3, #24]
 8011092:	697a      	ldr	r2, [r7, #20]
 8011094:	8992      	ldrh	r2, [r2, #12]
 8011096:	fbb3 f1f2 	udiv	r1, r3, r2
 801109a:	fb02 f201 	mul.w	r2, r2, r1
 801109e:	1a9b      	subs	r3, r3, r2
 80110a0:	1ac3      	subs	r3, r0, r3
 80110a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80110a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d901      	bls.n	80110b0 <f_read+0x260>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	699b      	ldr	r3, [r3, #24]
 80110ba:	697a      	ldr	r2, [r7, #20]
 80110bc:	8992      	ldrh	r2, [r2, #12]
 80110be:	fbb3 f0f2 	udiv	r0, r3, r2
 80110c2:	fb02 f200 	mul.w	r2, r2, r0
 80110c6:	1a9b      	subs	r3, r3, r2
 80110c8:	440b      	add	r3, r1
 80110ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110cc:	4619      	mov	r1, r3
 80110ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110d0:	f7fd ff06 	bl	800eee0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80110d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d8:	4413      	add	r3, r2
 80110da:	627b      	str	r3, [r7, #36]	; 0x24
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	699a      	ldr	r2, [r3, #24]
 80110e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e2:	441a      	add	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	619a      	str	r2, [r3, #24]
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ee:	441a      	add	r2, r3
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	601a      	str	r2, [r3, #0]
 80110f4:	687a      	ldr	r2, [r7, #4]
 80110f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f47f aee1 	bne.w	8010ec6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3738      	adds	r7, #56	; 0x38
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b08c      	sub	sp, #48	; 0x30
 8011112:	af00      	add	r7, sp, #0
 8011114:	60f8      	str	r0, [r7, #12]
 8011116:	60b9      	str	r1, [r7, #8]
 8011118:	607a      	str	r2, [r7, #4]
 801111a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	2200      	movs	r2, #0
 8011124:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f107 0210 	add.w	r2, r7, #16
 801112c:	4611      	mov	r1, r2
 801112e:	4618      	mov	r0, r3
 8011130:	f7ff fc44 	bl	80109bc <validate>
 8011134:	4603      	mov	r3, r0
 8011136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801113a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801113e:	2b00      	cmp	r3, #0
 8011140:	d107      	bne.n	8011152 <f_write+0x44>
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	7d5b      	ldrb	r3, [r3, #21]
 8011146:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801114a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801114e:	2b00      	cmp	r3, #0
 8011150:	d002      	beq.n	8011158 <f_write+0x4a>
 8011152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011156:	e16a      	b.n	801142e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	7d1b      	ldrb	r3, [r3, #20]
 801115c:	f003 0302 	and.w	r3, r3, #2
 8011160:	2b00      	cmp	r3, #0
 8011162:	d101      	bne.n	8011168 <f_write+0x5a>
 8011164:	2307      	movs	r3, #7
 8011166:	e162      	b.n	801142e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	699a      	ldr	r2, [r3, #24]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	441a      	add	r2, r3
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	699b      	ldr	r3, [r3, #24]
 8011174:	429a      	cmp	r2, r3
 8011176:	f080 814c 	bcs.w	8011412 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	699b      	ldr	r3, [r3, #24]
 801117e:	43db      	mvns	r3, r3
 8011180:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011182:	e146      	b.n	8011412 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	699b      	ldr	r3, [r3, #24]
 8011188:	693a      	ldr	r2, [r7, #16]
 801118a:	8992      	ldrh	r2, [r2, #12]
 801118c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011190:	fb02 f201 	mul.w	r2, r2, r1
 8011194:	1a9b      	subs	r3, r3, r2
 8011196:	2b00      	cmp	r3, #0
 8011198:	f040 80f1 	bne.w	801137e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	699b      	ldr	r3, [r3, #24]
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	8992      	ldrh	r2, [r2, #12]
 80111a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80111a8:	693a      	ldr	r2, [r7, #16]
 80111aa:	8952      	ldrh	r2, [r2, #10]
 80111ac:	3a01      	subs	r2, #1
 80111ae:	4013      	ands	r3, r2
 80111b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d143      	bne.n	8011240 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	699b      	ldr	r3, [r3, #24]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d10c      	bne.n	80111da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	689b      	ldr	r3, [r3, #8]
 80111c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80111c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d11a      	bne.n	8011202 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80111cc:	68fb      	ldr	r3, [r7, #12]
 80111ce:	2100      	movs	r1, #0
 80111d0:	4618      	mov	r0, r3
 80111d2:	f7fe fbbc 	bl	800f94e <create_chain>
 80111d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80111d8:	e013      	b.n	8011202 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d007      	beq.n	80111f2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	699b      	ldr	r3, [r3, #24]
 80111e6:	4619      	mov	r1, r3
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f7fe fc48 	bl	800fa7e <clmt_clust>
 80111ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80111f0:	e007      	b.n	8011202 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80111f2:	68fa      	ldr	r2, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	69db      	ldr	r3, [r3, #28]
 80111f8:	4619      	mov	r1, r3
 80111fa:	4610      	mov	r0, r2
 80111fc:	f7fe fba7 	bl	800f94e <create_chain>
 8011200:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011204:	2b00      	cmp	r3, #0
 8011206:	f000 8109 	beq.w	801141c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801120a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120c:	2b01      	cmp	r3, #1
 801120e:	d104      	bne.n	801121a <f_write+0x10c>
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	2202      	movs	r2, #2
 8011214:	755a      	strb	r2, [r3, #21]
 8011216:	2302      	movs	r3, #2
 8011218:	e109      	b.n	801142e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011220:	d104      	bne.n	801122c <f_write+0x11e>
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	2201      	movs	r2, #1
 8011226:	755a      	strb	r2, [r3, #21]
 8011228:	2301      	movs	r3, #1
 801122a:	e100      	b.n	801142e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011230:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d102      	bne.n	8011240 <f_write+0x132>
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801123e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	7d1b      	ldrb	r3, [r3, #20]
 8011244:	b25b      	sxtb	r3, r3
 8011246:	2b00      	cmp	r3, #0
 8011248:	da18      	bge.n	801127c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801124a:	693b      	ldr	r3, [r7, #16]
 801124c:	7858      	ldrb	r0, [r3, #1]
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6a1a      	ldr	r2, [r3, #32]
 8011258:	2301      	movs	r3, #1
 801125a:	f7fd fd81 	bl	800ed60 <disk_write>
 801125e:	4603      	mov	r3, r0
 8011260:	2b00      	cmp	r3, #0
 8011262:	d004      	beq.n	801126e <f_write+0x160>
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2201      	movs	r2, #1
 8011268:	755a      	strb	r2, [r3, #21]
 801126a:	2301      	movs	r3, #1
 801126c:	e0df      	b.n	801142e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	7d1b      	ldrb	r3, [r3, #20]
 8011272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011276:	b2da      	uxtb	r2, r3
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801127c:	693a      	ldr	r2, [r7, #16]
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	69db      	ldr	r3, [r3, #28]
 8011282:	4619      	mov	r1, r3
 8011284:	4610      	mov	r0, r2
 8011286:	f7fe f8f7 	bl	800f478 <clust2sect>
 801128a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801128c:	697b      	ldr	r3, [r7, #20]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d104      	bne.n	801129c <f_write+0x18e>
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2202      	movs	r2, #2
 8011296:	755a      	strb	r2, [r3, #21]
 8011298:	2302      	movs	r3, #2
 801129a:	e0c8      	b.n	801142e <f_write+0x320>
			sect += csect;
 801129c:	697a      	ldr	r2, [r7, #20]
 801129e:	69bb      	ldr	r3, [r7, #24]
 80112a0:	4413      	add	r3, r2
 80112a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	899b      	ldrh	r3, [r3, #12]
 80112a8:	461a      	mov	r2, r3
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80112b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80112b2:	6a3b      	ldr	r3, [r7, #32]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d043      	beq.n	8011340 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80112b8:	69ba      	ldr	r2, [r7, #24]
 80112ba:	6a3b      	ldr	r3, [r7, #32]
 80112bc:	4413      	add	r3, r2
 80112be:	693a      	ldr	r2, [r7, #16]
 80112c0:	8952      	ldrh	r2, [r2, #10]
 80112c2:	4293      	cmp	r3, r2
 80112c4:	d905      	bls.n	80112d2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	895b      	ldrh	r3, [r3, #10]
 80112ca:	461a      	mov	r2, r3
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	1ad3      	subs	r3, r2, r3
 80112d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	7858      	ldrb	r0, [r3, #1]
 80112d6:	6a3b      	ldr	r3, [r7, #32]
 80112d8:	697a      	ldr	r2, [r7, #20]
 80112da:	69f9      	ldr	r1, [r7, #28]
 80112dc:	f7fd fd40 	bl	800ed60 <disk_write>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d004      	beq.n	80112f0 <f_write+0x1e2>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2201      	movs	r2, #1
 80112ea:	755a      	strb	r2, [r3, #21]
 80112ec:	2301      	movs	r3, #1
 80112ee:	e09e      	b.n	801142e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	6a1a      	ldr	r2, [r3, #32]
 80112f4:	697b      	ldr	r3, [r7, #20]
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	6a3a      	ldr	r2, [r7, #32]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d918      	bls.n	8011330 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	6a1a      	ldr	r2, [r3, #32]
 8011308:	697b      	ldr	r3, [r7, #20]
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	8992      	ldrh	r2, [r2, #12]
 8011310:	fb02 f303 	mul.w	r3, r2, r3
 8011314:	69fa      	ldr	r2, [r7, #28]
 8011316:	18d1      	adds	r1, r2, r3
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	899b      	ldrh	r3, [r3, #12]
 801131c:	461a      	mov	r2, r3
 801131e:	f7fd fddf 	bl	800eee0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	7d1b      	ldrb	r3, [r3, #20]
 8011326:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801132a:	b2da      	uxtb	r2, r3
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	899b      	ldrh	r3, [r3, #12]
 8011334:	461a      	mov	r2, r3
 8011336:	6a3b      	ldr	r3, [r7, #32]
 8011338:	fb02 f303 	mul.w	r3, r2, r3
 801133c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801133e:	e04b      	b.n	80113d8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6a1b      	ldr	r3, [r3, #32]
 8011344:	697a      	ldr	r2, [r7, #20]
 8011346:	429a      	cmp	r2, r3
 8011348:	d016      	beq.n	8011378 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011352:	429a      	cmp	r2, r3
 8011354:	d210      	bcs.n	8011378 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011356:	693b      	ldr	r3, [r7, #16]
 8011358:	7858      	ldrb	r0, [r3, #1]
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011360:	2301      	movs	r3, #1
 8011362:	697a      	ldr	r2, [r7, #20]
 8011364:	f7fd fcdc 	bl	800ed20 <disk_read>
 8011368:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801136a:	2b00      	cmp	r3, #0
 801136c:	d004      	beq.n	8011378 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2201      	movs	r2, #1
 8011372:	755a      	strb	r2, [r3, #21]
 8011374:	2301      	movs	r3, #1
 8011376:	e05a      	b.n	801142e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	899b      	ldrh	r3, [r3, #12]
 8011382:	4618      	mov	r0, r3
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	699b      	ldr	r3, [r3, #24]
 8011388:	693a      	ldr	r2, [r7, #16]
 801138a:	8992      	ldrh	r2, [r2, #12]
 801138c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011390:	fb02 f201 	mul.w	r2, r2, r1
 8011394:	1a9b      	subs	r3, r3, r2
 8011396:	1ac3      	subs	r3, r0, r3
 8011398:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801139a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d901      	bls.n	80113a6 <f_write+0x298>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	699b      	ldr	r3, [r3, #24]
 80113b0:	693a      	ldr	r2, [r7, #16]
 80113b2:	8992      	ldrh	r2, [r2, #12]
 80113b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80113b8:	fb02 f200 	mul.w	r2, r2, r0
 80113bc:	1a9b      	subs	r3, r3, r2
 80113be:	440b      	add	r3, r1
 80113c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c2:	69f9      	ldr	r1, [r7, #28]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f7fd fd8b 	bl	800eee0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	7d1b      	ldrb	r3, [r3, #20]
 80113ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80113d8:	69fa      	ldr	r2, [r7, #28]
 80113da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113dc:	4413      	add	r3, r2
 80113de:	61fb      	str	r3, [r7, #28]
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	699a      	ldr	r2, [r3, #24]
 80113e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e6:	441a      	add	r2, r3
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	619a      	str	r2, [r3, #24]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	68da      	ldr	r2, [r3, #12]
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	699b      	ldr	r3, [r3, #24]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	bf38      	it	cc
 80113f8:	461a      	movcc	r2, r3
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	60da      	str	r2, [r3, #12]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011404:	441a      	add	r2, r3
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	601a      	str	r2, [r3, #0]
 801140a:	687a      	ldr	r2, [r7, #4]
 801140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	f47f aeb5 	bne.w	8011184 <f_write+0x76>
 801141a:	e000      	b.n	801141e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801141c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	7d1b      	ldrb	r3, [r3, #20]
 8011422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011426:	b2da      	uxtb	r2, r3
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801142c:	2300      	movs	r3, #0
}
 801142e:	4618      	mov	r0, r3
 8011430:	3730      	adds	r7, #48	; 0x30
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
	...

08011438 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b086      	sub	sp, #24
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f107 0208 	add.w	r2, r7, #8
 8011446:	4611      	mov	r1, r2
 8011448:	4618      	mov	r0, r3
 801144a:	f7ff fab7 	bl	80109bc <validate>
 801144e:	4603      	mov	r3, r0
 8011450:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011452:	7dfb      	ldrb	r3, [r7, #23]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d167      	bne.n	8011528 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	7d1b      	ldrb	r3, [r3, #20]
 801145c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011460:	2b00      	cmp	r3, #0
 8011462:	d061      	beq.n	8011528 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	7d1b      	ldrb	r3, [r3, #20]
 8011468:	b25b      	sxtb	r3, r3
 801146a:	2b00      	cmp	r3, #0
 801146c:	da15      	bge.n	801149a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	7858      	ldrb	r0, [r3, #1]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a1a      	ldr	r2, [r3, #32]
 801147c:	2301      	movs	r3, #1
 801147e:	f7fd fc6f 	bl	800ed60 <disk_write>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d001      	beq.n	801148c <f_sync+0x54>
 8011488:	2301      	movs	r3, #1
 801148a:	e04e      	b.n	801152a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	7d1b      	ldrb	r3, [r3, #20]
 8011490:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011494:	b2da      	uxtb	r2, r3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801149a:	4b26      	ldr	r3, [pc, #152]	; (8011534 <f_sync+0xfc>)
 801149c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	4619      	mov	r1, r3
 80114a6:	4610      	mov	r0, r2
 80114a8:	f7fd ff48 	bl	800f33c <move_window>
 80114ac:	4603      	mov	r3, r0
 80114ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80114b0:	7dfb      	ldrb	r3, [r7, #23]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d138      	bne.n	8011528 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	330b      	adds	r3, #11
 80114c0:	781a      	ldrb	r2, [r3, #0]
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	330b      	adds	r3, #11
 80114c6:	f042 0220 	orr.w	r2, r2, #32
 80114ca:	b2d2      	uxtb	r2, r2
 80114cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6818      	ldr	r0, [r3, #0]
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	689b      	ldr	r3, [r3, #8]
 80114d6:	461a      	mov	r2, r3
 80114d8:	68f9      	ldr	r1, [r7, #12]
 80114da:	f7fe fccd 	bl	800fe78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	f103 021c 	add.w	r2, r3, #28
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	68db      	ldr	r3, [r3, #12]
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	f7fd fccc 	bl	800ee88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	3316      	adds	r3, #22
 80114f4:	6939      	ldr	r1, [r7, #16]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fd fcc6 	bl	800ee88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	3312      	adds	r3, #18
 8011500:	2100      	movs	r1, #0
 8011502:	4618      	mov	r0, r3
 8011504:	f7fd fca5 	bl	800ee52 <st_word>
					fs->wflag = 1;
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	2201      	movs	r2, #1
 801150c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	4618      	mov	r0, r3
 8011512:	f7fd ff41 	bl	800f398 <sync_fs>
 8011516:	4603      	mov	r3, r0
 8011518:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	7d1b      	ldrb	r3, [r3, #20]
 801151e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011522:	b2da      	uxtb	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011528:	7dfb      	ldrb	r3, [r7, #23]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3718      	adds	r7, #24
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	274a0000 	.word	0x274a0000

08011538 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b084      	sub	sp, #16
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff ff79 	bl	8011438 <f_sync>
 8011546:	4603      	mov	r3, r0
 8011548:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801154a:	7bfb      	ldrb	r3, [r7, #15]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d118      	bne.n	8011582 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f107 0208 	add.w	r2, r7, #8
 8011556:	4611      	mov	r1, r2
 8011558:	4618      	mov	r0, r3
 801155a:	f7ff fa2f 	bl	80109bc <validate>
 801155e:	4603      	mov	r3, r0
 8011560:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011562:	7bfb      	ldrb	r3, [r7, #15]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d10c      	bne.n	8011582 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	4618      	mov	r0, r3
 801156e:	f7fd fe41 	bl	800f1f4 <dec_lock>
 8011572:	4603      	mov	r3, r0
 8011574:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011576:	7bfb      	ldrb	r3, [r7, #15]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d102      	bne.n	8011582 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011582:	7bfb      	ldrb	r3, [r7, #15]
}
 8011584:	4618      	mov	r0, r3
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801158c:	b590      	push	{r4, r7, lr}
 801158e:	b091      	sub	sp, #68	; 0x44
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011594:	f107 0108 	add.w	r1, r7, #8
 8011598:	1d3b      	adds	r3, r7, #4
 801159a:	2200      	movs	r2, #0
 801159c:	4618      	mov	r0, r3
 801159e:	f7fe ff87 	bl	80104b0 <find_volume>
 80115a2:	4603      	mov	r3, r0
 80115a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80115a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d131      	bne.n	8011614 <f_chdir+0x88>
		dj.obj.fs = fs;
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	f107 030c 	add.w	r3, r7, #12
 80115ba:	4611      	mov	r1, r2
 80115bc:	4618      	mov	r0, r3
 80115be:	f7fe fe47 	bl	8010250 <follow_path>
 80115c2:	4603      	mov	r3, r0
 80115c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80115c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d11a      	bne.n	8011606 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80115d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80115d4:	b25b      	sxtb	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	da03      	bge.n	80115e2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80115da:	68bb      	ldr	r3, [r7, #8]
 80115dc:	697a      	ldr	r2, [r7, #20]
 80115de:	619a      	str	r2, [r3, #24]
 80115e0:	e011      	b.n	8011606 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80115e2:	7cbb      	ldrb	r3, [r7, #18]
 80115e4:	f003 0310 	and.w	r3, r3, #16
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d009      	beq.n	8011600 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80115f0:	68bc      	ldr	r4, [r7, #8]
 80115f2:	4611      	mov	r1, r2
 80115f4:	4618      	mov	r0, r3
 80115f6:	f7fe fc20 	bl	800fe3a <ld_clust>
 80115fa:	4603      	mov	r3, r0
 80115fc:	61a3      	str	r3, [r4, #24]
 80115fe:	e002      	b.n	8011606 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011600:	2305      	movs	r3, #5
 8011602:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801160a:	2b04      	cmp	r3, #4
 801160c:	d102      	bne.n	8011614 <f_chdir+0x88>
 801160e:	2305      	movs	r3, #5
 8011610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011618:	4618      	mov	r0, r3
 801161a:	3744      	adds	r7, #68	; 0x44
 801161c:	46bd      	mov	sp, r7
 801161e:	bd90      	pop	{r4, r7, pc}

08011620 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b090      	sub	sp, #64	; 0x40
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f107 0208 	add.w	r2, r7, #8
 8011630:	4611      	mov	r1, r2
 8011632:	4618      	mov	r0, r3
 8011634:	f7ff f9c2 	bl	80109bc <validate>
 8011638:	4603      	mov	r3, r0
 801163a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801163e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011642:	2b00      	cmp	r3, #0
 8011644:	d103      	bne.n	801164e <f_lseek+0x2e>
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	7d5b      	ldrb	r3, [r3, #21]
 801164a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801164e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <f_lseek+0x3c>
 8011656:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801165a:	e201      	b.n	8011a60 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011660:	2b00      	cmp	r3, #0
 8011662:	f000 80d9 	beq.w	8011818 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166c:	d15a      	bne.n	8011724 <f_lseek+0x104>
			tbl = fp->cltbl;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011672:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	1d1a      	adds	r2, r3, #4
 8011678:	627a      	str	r2, [r7, #36]	; 0x24
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	617b      	str	r3, [r7, #20]
 801167e:	2302      	movs	r3, #2
 8011680:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	689b      	ldr	r3, [r3, #8]
 8011686:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168a:	2b00      	cmp	r3, #0
 801168c:	d03a      	beq.n	8011704 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801168e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	2300      	movs	r3, #0
 8011694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011698:	3302      	adds	r3, #2
 801169a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801169c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169e:	60fb      	str	r3, [r7, #12]
 80116a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a2:	3301      	adds	r3, #1
 80116a4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fd ff03 	bl	800f4b6 <get_fat>
 80116b0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80116b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d804      	bhi.n	80116c2 <f_lseek+0xa2>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	2202      	movs	r2, #2
 80116bc:	755a      	strb	r2, [r3, #21]
 80116be:	2302      	movs	r3, #2
 80116c0:	e1ce      	b.n	8011a60 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80116c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c8:	d104      	bne.n	80116d4 <f_lseek+0xb4>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2201      	movs	r2, #1
 80116ce:	755a      	strb	r2, [r3, #21]
 80116d0:	2301      	movs	r3, #1
 80116d2:	e1c5      	b.n	8011a60 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	3301      	adds	r3, #1
 80116d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80116da:	429a      	cmp	r2, r3
 80116dc:	d0de      	beq.n	801169c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80116de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d809      	bhi.n	80116fa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80116e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e8:	1d1a      	adds	r2, r3, #4
 80116ea:	627a      	str	r2, [r7, #36]	; 0x24
 80116ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116ee:	601a      	str	r2, [r3, #0]
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	1d1a      	adds	r2, r3, #4
 80116f4:	627a      	str	r2, [r7, #36]	; 0x24
 80116f6:	693a      	ldr	r2, [r7, #16]
 80116f8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	69db      	ldr	r3, [r3, #28]
 80116fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011700:	429a      	cmp	r2, r3
 8011702:	d3c4      	bcc.n	801168e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801170a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801170c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	429a      	cmp	r2, r3
 8011712:	d803      	bhi.n	801171c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011716:	2200      	movs	r2, #0
 8011718:	601a      	str	r2, [r3, #0]
 801171a:	e19f      	b.n	8011a5c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801171c:	2311      	movs	r3, #17
 801171e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011722:	e19b      	b.n	8011a5c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68db      	ldr	r3, [r3, #12]
 8011728:	683a      	ldr	r2, [r7, #0]
 801172a:	429a      	cmp	r2, r3
 801172c:	d902      	bls.n	8011734 <f_lseek+0x114>
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	68db      	ldr	r3, [r3, #12]
 8011732:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	683a      	ldr	r2, [r7, #0]
 8011738:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 818d 	beq.w	8011a5c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	3b01      	subs	r3, #1
 8011746:	4619      	mov	r1, r3
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7fe f998 	bl	800fa7e <clmt_clust>
 801174e:	4602      	mov	r2, r0
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011754:	68ba      	ldr	r2, [r7, #8]
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	69db      	ldr	r3, [r3, #28]
 801175a:	4619      	mov	r1, r3
 801175c:	4610      	mov	r0, r2
 801175e:	f7fd fe8b 	bl	800f478 <clust2sect>
 8011762:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d104      	bne.n	8011774 <f_lseek+0x154>
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	2202      	movs	r2, #2
 801176e:	755a      	strb	r2, [r3, #21]
 8011770:	2302      	movs	r3, #2
 8011772:	e175      	b.n	8011a60 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011774:	683b      	ldr	r3, [r7, #0]
 8011776:	3b01      	subs	r3, #1
 8011778:	68ba      	ldr	r2, [r7, #8]
 801177a:	8992      	ldrh	r2, [r2, #12]
 801177c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011780:	68ba      	ldr	r2, [r7, #8]
 8011782:	8952      	ldrh	r2, [r2, #10]
 8011784:	3a01      	subs	r2, #1
 8011786:	4013      	ands	r3, r2
 8011788:	69ba      	ldr	r2, [r7, #24]
 801178a:	4413      	add	r3, r2
 801178c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	699b      	ldr	r3, [r3, #24]
 8011792:	68ba      	ldr	r2, [r7, #8]
 8011794:	8992      	ldrh	r2, [r2, #12]
 8011796:	fbb3 f1f2 	udiv	r1, r3, r2
 801179a:	fb02 f201 	mul.w	r2, r2, r1
 801179e:	1a9b      	subs	r3, r3, r2
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f000 815b 	beq.w	8011a5c <f_lseek+0x43c>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6a1b      	ldr	r3, [r3, #32]
 80117aa:	69ba      	ldr	r2, [r7, #24]
 80117ac:	429a      	cmp	r2, r3
 80117ae:	f000 8155 	beq.w	8011a5c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	7d1b      	ldrb	r3, [r3, #20]
 80117b6:	b25b      	sxtb	r3, r3
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	da18      	bge.n	80117ee <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117bc:	68bb      	ldr	r3, [r7, #8]
 80117be:	7858      	ldrb	r0, [r3, #1]
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a1a      	ldr	r2, [r3, #32]
 80117ca:	2301      	movs	r3, #1
 80117cc:	f7fd fac8 	bl	800ed60 <disk_write>
 80117d0:	4603      	mov	r3, r0
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d004      	beq.n	80117e0 <f_lseek+0x1c0>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2201      	movs	r2, #1
 80117da:	755a      	strb	r2, [r3, #21]
 80117dc:	2301      	movs	r3, #1
 80117de:	e13f      	b.n	8011a60 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	7d1b      	ldrb	r3, [r3, #20]
 80117e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117e8:	b2da      	uxtb	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	7858      	ldrb	r0, [r3, #1]
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80117f8:	2301      	movs	r3, #1
 80117fa:	69ba      	ldr	r2, [r7, #24]
 80117fc:	f7fd fa90 	bl	800ed20 <disk_read>
 8011800:	4603      	mov	r3, r0
 8011802:	2b00      	cmp	r3, #0
 8011804:	d004      	beq.n	8011810 <f_lseek+0x1f0>
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2201      	movs	r2, #1
 801180a:	755a      	strb	r2, [r3, #21]
 801180c:	2301      	movs	r3, #1
 801180e:	e127      	b.n	8011a60 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	69ba      	ldr	r2, [r7, #24]
 8011814:	621a      	str	r2, [r3, #32]
 8011816:	e121      	b.n	8011a5c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	429a      	cmp	r2, r3
 8011820:	d908      	bls.n	8011834 <f_lseek+0x214>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	7d1b      	ldrb	r3, [r3, #20]
 8011826:	f003 0302 	and.w	r3, r3, #2
 801182a:	2b00      	cmp	r3, #0
 801182c:	d102      	bne.n	8011834 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	699b      	ldr	r3, [r3, #24]
 8011838:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801183a:	2300      	movs	r3, #0
 801183c:	637b      	str	r3, [r7, #52]	; 0x34
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011842:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011844:	683b      	ldr	r3, [r7, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	f000 80b5 	beq.w	80119b6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801184c:	68bb      	ldr	r3, [r7, #8]
 801184e:	895b      	ldrh	r3, [r3, #10]
 8011850:	461a      	mov	r2, r3
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	899b      	ldrh	r3, [r3, #12]
 8011856:	fb03 f302 	mul.w	r3, r3, r2
 801185a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801185c:	6a3b      	ldr	r3, [r7, #32]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d01b      	beq.n	801189a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011862:	683b      	ldr	r3, [r7, #0]
 8011864:	1e5a      	subs	r2, r3, #1
 8011866:	69fb      	ldr	r3, [r7, #28]
 8011868:	fbb2 f2f3 	udiv	r2, r2, r3
 801186c:	6a3b      	ldr	r3, [r7, #32]
 801186e:	1e59      	subs	r1, r3, #1
 8011870:	69fb      	ldr	r3, [r7, #28]
 8011872:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011876:	429a      	cmp	r2, r3
 8011878:	d30f      	bcc.n	801189a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801187a:	6a3b      	ldr	r3, [r7, #32]
 801187c:	1e5a      	subs	r2, r3, #1
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	425b      	negs	r3, r3
 8011882:	401a      	ands	r2, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	699b      	ldr	r3, [r3, #24]
 801188c:	683a      	ldr	r2, [r7, #0]
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	63bb      	str	r3, [r7, #56]	; 0x38
 8011898:	e022      	b.n	80118e0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	689b      	ldr	r3, [r3, #8]
 801189e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80118a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d119      	bne.n	80118da <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2100      	movs	r1, #0
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fe f84f 	bl	800f94e <create_chain>
 80118b0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	d104      	bne.n	80118c2 <f_lseek+0x2a2>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	2202      	movs	r2, #2
 80118bc:	755a      	strb	r2, [r3, #21]
 80118be:	2302      	movs	r3, #2
 80118c0:	e0ce      	b.n	8011a60 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80118c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118c8:	d104      	bne.n	80118d4 <f_lseek+0x2b4>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	2201      	movs	r2, #1
 80118ce:	755a      	strb	r2, [r3, #21]
 80118d0:	2301      	movs	r3, #1
 80118d2:	e0c5      	b.n	8011a60 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118d8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118de:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80118e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d067      	beq.n	80119b6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80118e6:	e03a      	b.n	801195e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80118e8:	683a      	ldr	r2, [r7, #0]
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	1ad3      	subs	r3, r2, r3
 80118ee:	603b      	str	r3, [r7, #0]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	699a      	ldr	r2, [r3, #24]
 80118f4:	69fb      	ldr	r3, [r7, #28]
 80118f6:	441a      	add	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	7d1b      	ldrb	r3, [r3, #20]
 8011900:	f003 0302 	and.w	r3, r3, #2
 8011904:	2b00      	cmp	r3, #0
 8011906:	d00b      	beq.n	8011920 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801190c:	4618      	mov	r0, r3
 801190e:	f7fe f81e 	bl	800f94e <create_chain>
 8011912:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011916:	2b00      	cmp	r3, #0
 8011918:	d108      	bne.n	801192c <f_lseek+0x30c>
							ofs = 0; break;
 801191a:	2300      	movs	r3, #0
 801191c:	603b      	str	r3, [r7, #0]
 801191e:	e022      	b.n	8011966 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011924:	4618      	mov	r0, r3
 8011926:	f7fd fdc6 	bl	800f4b6 <get_fat>
 801192a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801192c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011932:	d104      	bne.n	801193e <f_lseek+0x31e>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2201      	movs	r2, #1
 8011938:	755a      	strb	r2, [r3, #21]
 801193a:	2301      	movs	r3, #1
 801193c:	e090      	b.n	8011a60 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801193e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011940:	2b01      	cmp	r3, #1
 8011942:	d904      	bls.n	801194e <f_lseek+0x32e>
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	69db      	ldr	r3, [r3, #28]
 8011948:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801194a:	429a      	cmp	r2, r3
 801194c:	d304      	bcc.n	8011958 <f_lseek+0x338>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	2202      	movs	r2, #2
 8011952:	755a      	strb	r2, [r3, #21]
 8011954:	2302      	movs	r3, #2
 8011956:	e083      	b.n	8011a60 <f_lseek+0x440>
					fp->clust = clst;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801195c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801195e:	683a      	ldr	r2, [r7, #0]
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	429a      	cmp	r2, r3
 8011964:	d8c0      	bhi.n	80118e8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	699a      	ldr	r2, [r3, #24]
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	441a      	add	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	899b      	ldrh	r3, [r3, #12]
 8011976:	461a      	mov	r2, r3
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	fbb3 f1f2 	udiv	r1, r3, r2
 801197e:	fb02 f201 	mul.w	r2, r2, r1
 8011982:	1a9b      	subs	r3, r3, r2
 8011984:	2b00      	cmp	r3, #0
 8011986:	d016      	beq.n	80119b6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801198c:	4618      	mov	r0, r3
 801198e:	f7fd fd73 	bl	800f478 <clust2sect>
 8011992:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011996:	2b00      	cmp	r3, #0
 8011998:	d104      	bne.n	80119a4 <f_lseek+0x384>
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	2202      	movs	r2, #2
 801199e:	755a      	strb	r2, [r3, #21]
 80119a0:	2302      	movs	r3, #2
 80119a2:	e05d      	b.n	8011a60 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	899b      	ldrh	r3, [r3, #12]
 80119a8:	461a      	mov	r2, r3
 80119aa:	683b      	ldr	r3, [r7, #0]
 80119ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80119b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119b2:	4413      	add	r3, r2
 80119b4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	699a      	ldr	r2, [r3, #24]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	68db      	ldr	r3, [r3, #12]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d90a      	bls.n	80119d8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	699a      	ldr	r2, [r3, #24]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	7d1b      	ldrb	r3, [r3, #20]
 80119ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119d2:	b2da      	uxtb	r2, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	699b      	ldr	r3, [r3, #24]
 80119dc:	68ba      	ldr	r2, [r7, #8]
 80119de:	8992      	ldrh	r2, [r2, #12]
 80119e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80119e4:	fb02 f201 	mul.w	r2, r2, r1
 80119e8:	1a9b      	subs	r3, r3, r2
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d036      	beq.n	8011a5c <f_lseek+0x43c>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6a1b      	ldr	r3, [r3, #32]
 80119f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119f4:	429a      	cmp	r2, r3
 80119f6:	d031      	beq.n	8011a5c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	7d1b      	ldrb	r3, [r3, #20]
 80119fc:	b25b      	sxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	da18      	bge.n	8011a34 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	7858      	ldrb	r0, [r3, #1]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	6a1a      	ldr	r2, [r3, #32]
 8011a10:	2301      	movs	r3, #1
 8011a12:	f7fd f9a5 	bl	800ed60 <disk_write>
 8011a16:	4603      	mov	r3, r0
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d004      	beq.n	8011a26 <f_lseek+0x406>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	2201      	movs	r2, #1
 8011a20:	755a      	strb	r2, [r3, #21]
 8011a22:	2301      	movs	r3, #1
 8011a24:	e01c      	b.n	8011a60 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	7d1b      	ldrb	r3, [r3, #20]
 8011a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a2e:	b2da      	uxtb	r2, r3
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	7858      	ldrb	r0, [r3, #1]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011a3e:	2301      	movs	r3, #1
 8011a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a42:	f7fd f96d 	bl	800ed20 <disk_read>
 8011a46:	4603      	mov	r3, r0
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d004      	beq.n	8011a56 <f_lseek+0x436>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2201      	movs	r2, #1
 8011a50:	755a      	strb	r2, [r3, #21]
 8011a52:	2301      	movs	r3, #1
 8011a54:	e004      	b.n	8011a60 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a5a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011a5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011a60:	4618      	mov	r0, r3
 8011a62:	3740      	adds	r7, #64	; 0x40
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}

08011a68 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	b09e      	sub	sp, #120	; 0x78
 8011a6c:	af00      	add	r7, sp, #0
 8011a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011a70:	2300      	movs	r3, #0
 8011a72:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011a74:	f107 010c 	add.w	r1, r7, #12
 8011a78:	1d3b      	adds	r3, r7, #4
 8011a7a:	2202      	movs	r2, #2
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe fd17 	bl	80104b0 <find_volume>
 8011a82:	4603      	mov	r3, r0
 8011a84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011a8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f040 80a4 	bne.w	8011bde <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fe fbd6 	bl	8010250 <follow_path>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011aaa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d108      	bne.n	8011ac4 <f_unlink+0x5c>
 8011ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011ab6:	f003 0320 	and.w	r3, r3, #32
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d002      	beq.n	8011ac4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011abe:	2306      	movs	r3, #6
 8011ac0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011ac4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d108      	bne.n	8011ade <f_unlink+0x76>
 8011acc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ad0:	2102      	movs	r1, #2
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	f7fd fa82 	bl	800efdc <chk_lock>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011ade:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d17b      	bne.n	8011bde <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011ae6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011aea:	b25b      	sxtb	r3, r3
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	da03      	bge.n	8011af8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011af0:	2306      	movs	r3, #6
 8011af2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011af6:	e008      	b.n	8011b0a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011af8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d002      	beq.n	8011b0a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011b04:	2307      	movs	r3, #7
 8011b06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011b0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d13d      	bne.n	8011b8e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b16:	4611      	mov	r1, r2
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7fe f98e 	bl	800fe3a <ld_clust>
 8011b1e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011b20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011b24:	f003 0310 	and.w	r3, r3, #16
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d030      	beq.n	8011b8e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	699b      	ldr	r3, [r3, #24]
 8011b30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d103      	bne.n	8011b3e <f_unlink+0xd6>
						res = FR_DENIED;
 8011b36:	2307      	movs	r3, #7
 8011b38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011b3c:	e027      	b.n	8011b8e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011b42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b44:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011b46:	f107 0310 	add.w	r3, r7, #16
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fd ffce 	bl	800faee <dir_sdi>
 8011b52:	4603      	mov	r3, r0
 8011b54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011b58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d116      	bne.n	8011b8e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011b60:	f107 0310 	add.w	r3, r7, #16
 8011b64:	2100      	movs	r1, #0
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe f9a6 	bl	800feb8 <dir_read>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011b72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d102      	bne.n	8011b80 <f_unlink+0x118>
 8011b7a:	2307      	movs	r3, #7
 8011b7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011b80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b84:	2b04      	cmp	r3, #4
 8011b86:	d102      	bne.n	8011b8e <f_unlink+0x126>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011b8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d123      	bne.n	8011bde <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011b96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f7fe fa70 	bl	8010080 <dir_remove>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011ba6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d10c      	bne.n	8011bc8 <f_unlink+0x160>
 8011bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d009      	beq.n	8011bc8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011bb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011bb8:	2200      	movs	r2, #0
 8011bba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7fd fe61 	bl	800f884 <remove_chain>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011bc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d106      	bne.n	8011bde <f_unlink+0x176>
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fd fbe0 	bl	800f398 <sync_fs>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3778      	adds	r7, #120	; 0x78
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b096      	sub	sp, #88	; 0x58
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011bf4:	f107 0108 	add.w	r1, r7, #8
 8011bf8:	1d3b      	adds	r3, r7, #4
 8011bfa:	2202      	movs	r2, #2
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7fe fc57 	bl	80104b0 <find_volume>
 8011c02:	4603      	mov	r3, r0
 8011c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011c08:	68bb      	ldr	r3, [r7, #8]
 8011c0a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011c0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	f040 80fe 	bne.w	8011e12 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	f107 030c 	add.w	r3, r7, #12
 8011c1c:	4611      	mov	r1, r2
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f7fe fb16 	bl	8010250 <follow_path>
 8011c24:	4603      	mov	r3, r0
 8011c26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011c2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d102      	bne.n	8011c38 <f_mkdir+0x4c>
 8011c32:	2308      	movs	r3, #8
 8011c34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c3c:	2b04      	cmp	r3, #4
 8011c3e:	d108      	bne.n	8011c52 <f_mkdir+0x66>
 8011c40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011c44:	f003 0320 	and.w	r3, r3, #32
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d002      	beq.n	8011c52 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011c4c:	2306      	movs	r3, #6
 8011c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011c56:	2b04      	cmp	r3, #4
 8011c58:	f040 80db 	bne.w	8011e12 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011c5c:	f107 030c 	add.w	r3, r7, #12
 8011c60:	2100      	movs	r1, #0
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fd fe73 	bl	800f94e <create_chain>
 8011c68:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	895b      	ldrh	r3, [r3, #10]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	899b      	ldrh	r3, [r3, #12]
 8011c74:	fb03 f302 	mul.w	r3, r3, r2
 8011c78:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d102      	bne.n	8011c8c <f_mkdir+0xa0>
 8011c86:	2307      	movs	r3, #7
 8011c88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d102      	bne.n	8011c98 <f_mkdir+0xac>
 8011c92:	2302      	movs	r3, #2
 8011c94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9e:	d102      	bne.n	8011ca6 <f_mkdir+0xba>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d106      	bne.n	8011cbc <f_mkdir+0xd0>
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f7fd faff 	bl	800f2b4 <sync_window>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011cbc:	4b58      	ldr	r3, [pc, #352]	; (8011e20 <f_mkdir+0x234>)
 8011cbe:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d16c      	bne.n	8011da2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fd fbd3 	bl	800f478 <clust2sect>
 8011cd2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	3338      	adds	r3, #56	; 0x38
 8011cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	899b      	ldrh	r3, [r3, #12]
 8011cde:	461a      	mov	r2, r3
 8011ce0:	2100      	movs	r1, #0
 8011ce2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011ce4:	f7fd f91d 	bl	800ef22 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011ce8:	220b      	movs	r2, #11
 8011cea:	2120      	movs	r1, #32
 8011cec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011cee:	f7fd f918 	bl	800ef22 <mem_set>
					dir[DIR_Name] = '.';
 8011cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cf4:	222e      	movs	r2, #46	; 0x2e
 8011cf6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cfa:	330b      	adds	r3, #11
 8011cfc:	2210      	movs	r2, #16
 8011cfe:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d02:	3316      	adds	r3, #22
 8011d04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fd f8be 	bl	800ee88 <st_dword>
					st_clust(fs, dir, dcl);
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d12:	4618      	mov	r0, r3
 8011d14:	f7fe f8b0 	bl	800fe78 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d1a:	3320      	adds	r3, #32
 8011d1c:	2220      	movs	r2, #32
 8011d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fd f8dd 	bl	800eee0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d28:	3321      	adds	r3, #33	; 0x21
 8011d2a:	222e      	movs	r2, #46	; 0x2e
 8011d2c:	701a      	strb	r2, [r3, #0]
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011d32:	68bb      	ldr	r3, [r7, #8]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	2b03      	cmp	r3, #3
 8011d38:	d106      	bne.n	8011d48 <f_mkdir+0x15c>
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d101      	bne.n	8011d48 <f_mkdir+0x15c>
 8011d44:	2300      	movs	r3, #0
 8011d46:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011d48:	68b8      	ldr	r0, [r7, #8]
 8011d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011d4c:	3320      	adds	r3, #32
 8011d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d50:	4619      	mov	r1, r3
 8011d52:	f7fe f891 	bl	800fe78 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	895b      	ldrh	r3, [r3, #10]
 8011d5a:	653b      	str	r3, [r7, #80]	; 0x50
 8011d5c:	e01c      	b.n	8011d98 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d60:	1c5a      	adds	r2, r3, #1
 8011d62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011d64:	68ba      	ldr	r2, [r7, #8]
 8011d66:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011d68:	68bb      	ldr	r3, [r7, #8]
 8011d6a:	2201      	movs	r2, #1
 8011d6c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	4618      	mov	r0, r3
 8011d72:	f7fd fa9f 	bl	800f2b4 <sync_window>
 8011d76:	4603      	mov	r3, r0
 8011d78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d10d      	bne.n	8011da0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011d84:	68bb      	ldr	r3, [r7, #8]
 8011d86:	899b      	ldrh	r3, [r3, #12]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	2100      	movs	r1, #0
 8011d8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011d8e:	f7fd f8c8 	bl	800ef22 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d94:	3b01      	subs	r3, #1
 8011d96:	653b      	str	r3, [r7, #80]	; 0x50
 8011d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d1df      	bne.n	8011d5e <f_mkdir+0x172>
 8011d9e:	e000      	b.n	8011da2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011da0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011da2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d107      	bne.n	8011dba <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011daa:	f107 030c 	add.w	r3, r7, #12
 8011dae:	4618      	mov	r0, r3
 8011db0:	f7fe f934 	bl	801001c <dir_register>
 8011db4:	4603      	mov	r3, r0
 8011db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011dba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d120      	bne.n	8011e04 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dc8:	3316      	adds	r3, #22
 8011dca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fd f85b 	bl	800ee88 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011dd8:	4618      	mov	r0, r3
 8011dda:	f7fe f84d 	bl	800fe78 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011de0:	330b      	adds	r3, #11
 8011de2:	2210      	movs	r2, #16
 8011de4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	2201      	movs	r2, #1
 8011dea:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d10e      	bne.n	8011e12 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	4618      	mov	r0, r3
 8011df8:	f7fd face 	bl	800f398 <sync_fs>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011e02:	e006      	b.n	8011e12 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011e04:	f107 030c 	add.w	r3, r7, #12
 8011e08:	2200      	movs	r2, #0
 8011e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7fd fd39 	bl	800f884 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011e12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3758      	adds	r7, #88	; 0x58
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}
 8011e1e:	bf00      	nop
 8011e20:	274a0000 	.word	0x274a0000

08011e24 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b088      	sub	sp, #32
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011e30:	2300      	movs	r3, #0
 8011e32:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e38:	e017      	b.n	8011e6a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011e3a:	f107 0310 	add.w	r3, r7, #16
 8011e3e:	f107 0114 	add.w	r1, r7, #20
 8011e42:	2201      	movs	r2, #1
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7ff f803 	bl	8010e50 <f_read>
		if (rc != 1) break;
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	d112      	bne.n	8011e76 <f_gets+0x52>
		c = s[0];
 8011e50:	7d3b      	ldrb	r3, [r7, #20]
 8011e52:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011e54:	69bb      	ldr	r3, [r7, #24]
 8011e56:	1c5a      	adds	r2, r3, #1
 8011e58:	61ba      	str	r2, [r7, #24]
 8011e5a:	7dfa      	ldrb	r2, [r7, #23]
 8011e5c:	701a      	strb	r2, [r3, #0]
		n++;
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	3301      	adds	r3, #1
 8011e62:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011e64:	7dfb      	ldrb	r3, [r7, #23]
 8011e66:	2b0a      	cmp	r3, #10
 8011e68:	d007      	beq.n	8011e7a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	69fa      	ldr	r2, [r7, #28]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	dbe2      	blt.n	8011e3a <f_gets+0x16>
 8011e74:	e002      	b.n	8011e7c <f_gets+0x58>
		if (rc != 1) break;
 8011e76:	bf00      	nop
 8011e78:	e000      	b.n	8011e7c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011e7a:	bf00      	nop
	}
	*p = 0;
 8011e7c:	69bb      	ldr	r3, [r7, #24]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <f_gets+0x68>
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	e000      	b.n	8011e8e <f_gets+0x6a>
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3720      	adds	r7, #32
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
	...

08011e98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b087      	sub	sp, #28
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	60f8      	str	r0, [r7, #12]
 8011ea0:	60b9      	str	r1, [r7, #8]
 8011ea2:	4613      	mov	r3, r2
 8011ea4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011eaa:	2300      	movs	r3, #0
 8011eac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011eae:	4b1f      	ldr	r3, [pc, #124]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011eb0:	7a5b      	ldrb	r3, [r3, #9]
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d131      	bne.n	8011f1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011eb8:	4b1c      	ldr	r3, [pc, #112]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011eba:	7a5b      	ldrb	r3, [r3, #9]
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	461a      	mov	r2, r3
 8011ec0:	4b1a      	ldr	r3, [pc, #104]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ec2:	2100      	movs	r1, #0
 8011ec4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011ec6:	4b19      	ldr	r3, [pc, #100]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ec8:	7a5b      	ldrb	r3, [r3, #9]
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	4a17      	ldr	r2, [pc, #92]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	4413      	add	r3, r2
 8011ed2:	68fa      	ldr	r2, [r7, #12]
 8011ed4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011ed6:	4b15      	ldr	r3, [pc, #84]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ed8:	7a5b      	ldrb	r3, [r3, #9]
 8011eda:	b2db      	uxtb	r3, r3
 8011edc:	461a      	mov	r2, r3
 8011ede:	4b13      	ldr	r3, [pc, #76]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ee0:	4413      	add	r3, r2
 8011ee2:	79fa      	ldrb	r2, [r7, #7]
 8011ee4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011ee6:	4b11      	ldr	r3, [pc, #68]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ee8:	7a5b      	ldrb	r3, [r3, #9]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	1c5a      	adds	r2, r3, #1
 8011eee:	b2d1      	uxtb	r1, r2
 8011ef0:	4a0e      	ldr	r2, [pc, #56]	; (8011f2c <FATFS_LinkDriverEx+0x94>)
 8011ef2:	7251      	strb	r1, [r2, #9]
 8011ef4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ef6:	7dbb      	ldrb	r3, [r7, #22]
 8011ef8:	3330      	adds	r3, #48	; 0x30
 8011efa:	b2da      	uxtb	r2, r3
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	3301      	adds	r3, #1
 8011f04:	223a      	movs	r2, #58	; 0x3a
 8011f06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	3302      	adds	r3, #2
 8011f0c:	222f      	movs	r2, #47	; 0x2f
 8011f0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	3303      	adds	r3, #3
 8011f14:	2200      	movs	r2, #0
 8011f16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011f18:	2300      	movs	r3, #0
 8011f1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011f1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	371c      	adds	r7, #28
 8011f22:	46bd      	mov	sp, r7
 8011f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	200335f8 	.word	0x200335f8

08011f30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
 8011f38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7ff ffaa 	bl	8011e98 <FATFS_LinkDriverEx>
 8011f44:	4603      	mov	r3, r0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3708      	adds	r7, #8
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}

08011f4e <__cxa_guard_acquire>:
 8011f4e:	6803      	ldr	r3, [r0, #0]
 8011f50:	07db      	lsls	r3, r3, #31
 8011f52:	d406      	bmi.n	8011f62 <__cxa_guard_acquire+0x14>
 8011f54:	7843      	ldrb	r3, [r0, #1]
 8011f56:	b103      	cbz	r3, 8011f5a <__cxa_guard_acquire+0xc>
 8011f58:	deff      	udf	#255	; 0xff
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	7043      	strb	r3, [r0, #1]
 8011f5e:	4618      	mov	r0, r3
 8011f60:	4770      	bx	lr
 8011f62:	2000      	movs	r0, #0
 8011f64:	4770      	bx	lr

08011f66 <__cxa_guard_release>:
 8011f66:	2301      	movs	r3, #1
 8011f68:	6003      	str	r3, [r0, #0]
 8011f6a:	4770      	bx	lr
 8011f6c:	0000      	movs	r0, r0
	...

08011f70 <cos>:
 8011f70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011f72:	ec51 0b10 	vmov	r0, r1, d0
 8011f76:	4a1e      	ldr	r2, [pc, #120]	; (8011ff0 <cos+0x80>)
 8011f78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	dc06      	bgt.n	8011f8e <cos+0x1e>
 8011f80:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011fe8 <cos+0x78>
 8011f84:	f000 fa74 	bl	8012470 <__kernel_cos>
 8011f88:	ec51 0b10 	vmov	r0, r1, d0
 8011f8c:	e007      	b.n	8011f9e <cos+0x2e>
 8011f8e:	4a19      	ldr	r2, [pc, #100]	; (8011ff4 <cos+0x84>)
 8011f90:	4293      	cmp	r3, r2
 8011f92:	dd09      	ble.n	8011fa8 <cos+0x38>
 8011f94:	ee10 2a10 	vmov	r2, s0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	f7ee f98d 	bl	80002b8 <__aeabi_dsub>
 8011f9e:	ec41 0b10 	vmov	d0, r0, r1
 8011fa2:	b005      	add	sp, #20
 8011fa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8011fa8:	4668      	mov	r0, sp
 8011faa:	f000 f86d 	bl	8012088 <__ieee754_rem_pio2>
 8011fae:	f000 0003 	and.w	r0, r0, #3
 8011fb2:	2801      	cmp	r0, #1
 8011fb4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011fb8:	ed9d 0b00 	vldr	d0, [sp]
 8011fbc:	d007      	beq.n	8011fce <cos+0x5e>
 8011fbe:	2802      	cmp	r0, #2
 8011fc0:	d00e      	beq.n	8011fe0 <cos+0x70>
 8011fc2:	2800      	cmp	r0, #0
 8011fc4:	d0de      	beq.n	8011f84 <cos+0x14>
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	f000 fe5a 	bl	8012c80 <__kernel_sin>
 8011fcc:	e7dc      	b.n	8011f88 <cos+0x18>
 8011fce:	f000 fe57 	bl	8012c80 <__kernel_sin>
 8011fd2:	ec53 2b10 	vmov	r2, r3, d0
 8011fd6:	ee10 0a10 	vmov	r0, s0
 8011fda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011fde:	e7de      	b.n	8011f9e <cos+0x2e>
 8011fe0:	f000 fa46 	bl	8012470 <__kernel_cos>
 8011fe4:	e7f5      	b.n	8011fd2 <cos+0x62>
 8011fe6:	bf00      	nop
	...
 8011ff0:	3fe921fb 	.word	0x3fe921fb
 8011ff4:	7fefffff 	.word	0x7fefffff

08011ff8 <sin>:
 8011ff8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ffa:	ec51 0b10 	vmov	r0, r1, d0
 8011ffe:	4a20      	ldr	r2, [pc, #128]	; (8012080 <sin+0x88>)
 8012000:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012004:	4293      	cmp	r3, r2
 8012006:	dc07      	bgt.n	8012018 <sin+0x20>
 8012008:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012078 <sin+0x80>
 801200c:	2000      	movs	r0, #0
 801200e:	f000 fe37 	bl	8012c80 <__kernel_sin>
 8012012:	ec51 0b10 	vmov	r0, r1, d0
 8012016:	e007      	b.n	8012028 <sin+0x30>
 8012018:	4a1a      	ldr	r2, [pc, #104]	; (8012084 <sin+0x8c>)
 801201a:	4293      	cmp	r3, r2
 801201c:	dd09      	ble.n	8012032 <sin+0x3a>
 801201e:	ee10 2a10 	vmov	r2, s0
 8012022:	460b      	mov	r3, r1
 8012024:	f7ee f948 	bl	80002b8 <__aeabi_dsub>
 8012028:	ec41 0b10 	vmov	d0, r0, r1
 801202c:	b005      	add	sp, #20
 801202e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012032:	4668      	mov	r0, sp
 8012034:	f000 f828 	bl	8012088 <__ieee754_rem_pio2>
 8012038:	f000 0003 	and.w	r0, r0, #3
 801203c:	2801      	cmp	r0, #1
 801203e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012042:	ed9d 0b00 	vldr	d0, [sp]
 8012046:	d004      	beq.n	8012052 <sin+0x5a>
 8012048:	2802      	cmp	r0, #2
 801204a:	d005      	beq.n	8012058 <sin+0x60>
 801204c:	b970      	cbnz	r0, 801206c <sin+0x74>
 801204e:	2001      	movs	r0, #1
 8012050:	e7dd      	b.n	801200e <sin+0x16>
 8012052:	f000 fa0d 	bl	8012470 <__kernel_cos>
 8012056:	e7dc      	b.n	8012012 <sin+0x1a>
 8012058:	2001      	movs	r0, #1
 801205a:	f000 fe11 	bl	8012c80 <__kernel_sin>
 801205e:	ec53 2b10 	vmov	r2, r3, d0
 8012062:	ee10 0a10 	vmov	r0, s0
 8012066:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801206a:	e7dd      	b.n	8012028 <sin+0x30>
 801206c:	f000 fa00 	bl	8012470 <__kernel_cos>
 8012070:	e7f5      	b.n	801205e <sin+0x66>
 8012072:	bf00      	nop
 8012074:	f3af 8000 	nop.w
	...
 8012080:	3fe921fb 	.word	0x3fe921fb
 8012084:	7fefffff 	.word	0x7fefffff

08012088 <__ieee754_rem_pio2>:
 8012088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801208c:	ec57 6b10 	vmov	r6, r7, d0
 8012090:	4bc3      	ldr	r3, [pc, #780]	; (80123a0 <__ieee754_rem_pio2+0x318>)
 8012092:	b08d      	sub	sp, #52	; 0x34
 8012094:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012098:	4598      	cmp	r8, r3
 801209a:	4604      	mov	r4, r0
 801209c:	9704      	str	r7, [sp, #16]
 801209e:	dc07      	bgt.n	80120b0 <__ieee754_rem_pio2+0x28>
 80120a0:	2200      	movs	r2, #0
 80120a2:	2300      	movs	r3, #0
 80120a4:	ed84 0b00 	vstr	d0, [r4]
 80120a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80120ac:	2500      	movs	r5, #0
 80120ae:	e027      	b.n	8012100 <__ieee754_rem_pio2+0x78>
 80120b0:	4bbc      	ldr	r3, [pc, #752]	; (80123a4 <__ieee754_rem_pio2+0x31c>)
 80120b2:	4598      	cmp	r8, r3
 80120b4:	dc75      	bgt.n	80121a2 <__ieee754_rem_pio2+0x11a>
 80120b6:	9b04      	ldr	r3, [sp, #16]
 80120b8:	4dbb      	ldr	r5, [pc, #748]	; (80123a8 <__ieee754_rem_pio2+0x320>)
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	ee10 0a10 	vmov	r0, s0
 80120c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8012368 <__ieee754_rem_pio2+0x2e0>)
 80120c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c6:	4639      	mov	r1, r7
 80120c8:	dd36      	ble.n	8012138 <__ieee754_rem_pio2+0xb0>
 80120ca:	f7ee f8f5 	bl	80002b8 <__aeabi_dsub>
 80120ce:	45a8      	cmp	r8, r5
 80120d0:	4606      	mov	r6, r0
 80120d2:	460f      	mov	r7, r1
 80120d4:	d018      	beq.n	8012108 <__ieee754_rem_pio2+0x80>
 80120d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012370 <__ieee754_rem_pio2+0x2e8>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	f7ee f8ec 	bl	80002b8 <__aeabi_dsub>
 80120e0:	4602      	mov	r2, r0
 80120e2:	460b      	mov	r3, r1
 80120e4:	e9c4 2300 	strd	r2, r3, [r4]
 80120e8:	4630      	mov	r0, r6
 80120ea:	4639      	mov	r1, r7
 80120ec:	f7ee f8e4 	bl	80002b8 <__aeabi_dsub>
 80120f0:	a39f      	add	r3, pc, #636	; (adr r3, 8012370 <__ieee754_rem_pio2+0x2e8>)
 80120f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120f6:	f7ee f8df 	bl	80002b8 <__aeabi_dsub>
 80120fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80120fe:	2501      	movs	r5, #1
 8012100:	4628      	mov	r0, r5
 8012102:	b00d      	add	sp, #52	; 0x34
 8012104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012108:	a39b      	add	r3, pc, #620	; (adr r3, 8012378 <__ieee754_rem_pio2+0x2f0>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f8d3 	bl	80002b8 <__aeabi_dsub>
 8012112:	a39b      	add	r3, pc, #620	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2f8>)
 8012114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012118:	4606      	mov	r6, r0
 801211a:	460f      	mov	r7, r1
 801211c:	f7ee f8cc 	bl	80002b8 <__aeabi_dsub>
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	e9c4 2300 	strd	r2, r3, [r4]
 8012128:	4630      	mov	r0, r6
 801212a:	4639      	mov	r1, r7
 801212c:	f7ee f8c4 	bl	80002b8 <__aeabi_dsub>
 8012130:	a393      	add	r3, pc, #588	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2f8>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	e7de      	b.n	80120f6 <__ieee754_rem_pio2+0x6e>
 8012138:	f7ee f8c0 	bl	80002bc <__adddf3>
 801213c:	45a8      	cmp	r8, r5
 801213e:	4606      	mov	r6, r0
 8012140:	460f      	mov	r7, r1
 8012142:	d016      	beq.n	8012172 <__ieee754_rem_pio2+0xea>
 8012144:	a38a      	add	r3, pc, #552	; (adr r3, 8012370 <__ieee754_rem_pio2+0x2e8>)
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	f7ee f8b7 	bl	80002bc <__adddf3>
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	e9c4 2300 	strd	r2, r3, [r4]
 8012156:	4630      	mov	r0, r6
 8012158:	4639      	mov	r1, r7
 801215a:	f7ee f8ad 	bl	80002b8 <__aeabi_dsub>
 801215e:	a384      	add	r3, pc, #528	; (adr r3, 8012370 <__ieee754_rem_pio2+0x2e8>)
 8012160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012164:	f7ee f8aa 	bl	80002bc <__adddf3>
 8012168:	f04f 35ff 	mov.w	r5, #4294967295
 801216c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012170:	e7c6      	b.n	8012100 <__ieee754_rem_pio2+0x78>
 8012172:	a381      	add	r3, pc, #516	; (adr r3, 8012378 <__ieee754_rem_pio2+0x2f0>)
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	f7ee f8a0 	bl	80002bc <__adddf3>
 801217c:	a380      	add	r3, pc, #512	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2f8>)
 801217e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012182:	4606      	mov	r6, r0
 8012184:	460f      	mov	r7, r1
 8012186:	f7ee f899 	bl	80002bc <__adddf3>
 801218a:	4602      	mov	r2, r0
 801218c:	460b      	mov	r3, r1
 801218e:	e9c4 2300 	strd	r2, r3, [r4]
 8012192:	4630      	mov	r0, r6
 8012194:	4639      	mov	r1, r7
 8012196:	f7ee f88f 	bl	80002b8 <__aeabi_dsub>
 801219a:	a379      	add	r3, pc, #484	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2f8>)
 801219c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121a0:	e7e0      	b.n	8012164 <__ieee754_rem_pio2+0xdc>
 80121a2:	4b82      	ldr	r3, [pc, #520]	; (80123ac <__ieee754_rem_pio2+0x324>)
 80121a4:	4598      	cmp	r8, r3
 80121a6:	f300 80d0 	bgt.w	801234a <__ieee754_rem_pio2+0x2c2>
 80121aa:	f000 fe23 	bl	8012df4 <fabs>
 80121ae:	ec57 6b10 	vmov	r6, r7, d0
 80121b2:	ee10 0a10 	vmov	r0, s0
 80121b6:	a374      	add	r3, pc, #464	; (adr r3, 8012388 <__ieee754_rem_pio2+0x300>)
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	4639      	mov	r1, r7
 80121be:	f7ee fa33 	bl	8000628 <__aeabi_dmul>
 80121c2:	2200      	movs	r2, #0
 80121c4:	4b7a      	ldr	r3, [pc, #488]	; (80123b0 <__ieee754_rem_pio2+0x328>)
 80121c6:	f7ee f879 	bl	80002bc <__adddf3>
 80121ca:	f7ee fcdd 	bl	8000b88 <__aeabi_d2iz>
 80121ce:	4605      	mov	r5, r0
 80121d0:	f7ee f9c0 	bl	8000554 <__aeabi_i2d>
 80121d4:	a364      	add	r3, pc, #400	; (adr r3, 8012368 <__ieee754_rem_pio2+0x2e0>)
 80121d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121de:	f7ee fa23 	bl	8000628 <__aeabi_dmul>
 80121e2:	4602      	mov	r2, r0
 80121e4:	460b      	mov	r3, r1
 80121e6:	4630      	mov	r0, r6
 80121e8:	4639      	mov	r1, r7
 80121ea:	f7ee f865 	bl	80002b8 <__aeabi_dsub>
 80121ee:	a360      	add	r3, pc, #384	; (adr r3, 8012370 <__ieee754_rem_pio2+0x2e8>)
 80121f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f4:	4682      	mov	sl, r0
 80121f6:	468b      	mov	fp, r1
 80121f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121fc:	f7ee fa14 	bl	8000628 <__aeabi_dmul>
 8012200:	2d1f      	cmp	r5, #31
 8012202:	4606      	mov	r6, r0
 8012204:	460f      	mov	r7, r1
 8012206:	dc0c      	bgt.n	8012222 <__ieee754_rem_pio2+0x19a>
 8012208:	1e6a      	subs	r2, r5, #1
 801220a:	4b6a      	ldr	r3, [pc, #424]	; (80123b4 <__ieee754_rem_pio2+0x32c>)
 801220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012210:	4543      	cmp	r3, r8
 8012212:	d006      	beq.n	8012222 <__ieee754_rem_pio2+0x19a>
 8012214:	4632      	mov	r2, r6
 8012216:	463b      	mov	r3, r7
 8012218:	4650      	mov	r0, sl
 801221a:	4659      	mov	r1, fp
 801221c:	f7ee f84c 	bl	80002b8 <__aeabi_dsub>
 8012220:	e00e      	b.n	8012240 <__ieee754_rem_pio2+0x1b8>
 8012222:	4632      	mov	r2, r6
 8012224:	463b      	mov	r3, r7
 8012226:	4650      	mov	r0, sl
 8012228:	4659      	mov	r1, fp
 801222a:	f7ee f845 	bl	80002b8 <__aeabi_dsub>
 801222e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012232:	9305      	str	r3, [sp, #20]
 8012234:	9a05      	ldr	r2, [sp, #20]
 8012236:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801223a:	1ad3      	subs	r3, r2, r3
 801223c:	2b10      	cmp	r3, #16
 801223e:	dc02      	bgt.n	8012246 <__ieee754_rem_pio2+0x1be>
 8012240:	e9c4 0100 	strd	r0, r1, [r4]
 8012244:	e039      	b.n	80122ba <__ieee754_rem_pio2+0x232>
 8012246:	a34c      	add	r3, pc, #304	; (adr r3, 8012378 <__ieee754_rem_pio2+0x2f0>)
 8012248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012250:	f7ee f9ea 	bl	8000628 <__aeabi_dmul>
 8012254:	4606      	mov	r6, r0
 8012256:	460f      	mov	r7, r1
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4650      	mov	r0, sl
 801225e:	4659      	mov	r1, fp
 8012260:	f7ee f82a 	bl	80002b8 <__aeabi_dsub>
 8012264:	4602      	mov	r2, r0
 8012266:	460b      	mov	r3, r1
 8012268:	4680      	mov	r8, r0
 801226a:	4689      	mov	r9, r1
 801226c:	4650      	mov	r0, sl
 801226e:	4659      	mov	r1, fp
 8012270:	f7ee f822 	bl	80002b8 <__aeabi_dsub>
 8012274:	4632      	mov	r2, r6
 8012276:	463b      	mov	r3, r7
 8012278:	f7ee f81e 	bl	80002b8 <__aeabi_dsub>
 801227c:	a340      	add	r3, pc, #256	; (adr r3, 8012380 <__ieee754_rem_pio2+0x2f8>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	4606      	mov	r6, r0
 8012284:	460f      	mov	r7, r1
 8012286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801228a:	f7ee f9cd 	bl	8000628 <__aeabi_dmul>
 801228e:	4632      	mov	r2, r6
 8012290:	463b      	mov	r3, r7
 8012292:	f7ee f811 	bl	80002b8 <__aeabi_dsub>
 8012296:	4602      	mov	r2, r0
 8012298:	460b      	mov	r3, r1
 801229a:	4606      	mov	r6, r0
 801229c:	460f      	mov	r7, r1
 801229e:	4640      	mov	r0, r8
 80122a0:	4649      	mov	r1, r9
 80122a2:	f7ee f809 	bl	80002b8 <__aeabi_dsub>
 80122a6:	9a05      	ldr	r2, [sp, #20]
 80122a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80122ac:	1ad3      	subs	r3, r2, r3
 80122ae:	2b31      	cmp	r3, #49	; 0x31
 80122b0:	dc20      	bgt.n	80122f4 <__ieee754_rem_pio2+0x26c>
 80122b2:	e9c4 0100 	strd	r0, r1, [r4]
 80122b6:	46c2      	mov	sl, r8
 80122b8:	46cb      	mov	fp, r9
 80122ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80122be:	4650      	mov	r0, sl
 80122c0:	4642      	mov	r2, r8
 80122c2:	464b      	mov	r3, r9
 80122c4:	4659      	mov	r1, fp
 80122c6:	f7ed fff7 	bl	80002b8 <__aeabi_dsub>
 80122ca:	463b      	mov	r3, r7
 80122cc:	4632      	mov	r2, r6
 80122ce:	f7ed fff3 	bl	80002b8 <__aeabi_dsub>
 80122d2:	9b04      	ldr	r3, [sp, #16]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80122da:	f6bf af11 	bge.w	8012100 <__ieee754_rem_pio2+0x78>
 80122de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80122e2:	6063      	str	r3, [r4, #4]
 80122e4:	f8c4 8000 	str.w	r8, [r4]
 80122e8:	60a0      	str	r0, [r4, #8]
 80122ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122ee:	60e3      	str	r3, [r4, #12]
 80122f0:	426d      	negs	r5, r5
 80122f2:	e705      	b.n	8012100 <__ieee754_rem_pio2+0x78>
 80122f4:	a326      	add	r3, pc, #152	; (adr r3, 8012390 <__ieee754_rem_pio2+0x308>)
 80122f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122fe:	f7ee f993 	bl	8000628 <__aeabi_dmul>
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	4602      	mov	r2, r0
 8012308:	460b      	mov	r3, r1
 801230a:	4640      	mov	r0, r8
 801230c:	4649      	mov	r1, r9
 801230e:	f7ed ffd3 	bl	80002b8 <__aeabi_dsub>
 8012312:	4602      	mov	r2, r0
 8012314:	460b      	mov	r3, r1
 8012316:	4682      	mov	sl, r0
 8012318:	468b      	mov	fp, r1
 801231a:	4640      	mov	r0, r8
 801231c:	4649      	mov	r1, r9
 801231e:	f7ed ffcb 	bl	80002b8 <__aeabi_dsub>
 8012322:	4632      	mov	r2, r6
 8012324:	463b      	mov	r3, r7
 8012326:	f7ed ffc7 	bl	80002b8 <__aeabi_dsub>
 801232a:	a31b      	add	r3, pc, #108	; (adr r3, 8012398 <__ieee754_rem_pio2+0x310>)
 801232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012330:	4606      	mov	r6, r0
 8012332:	460f      	mov	r7, r1
 8012334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012338:	f7ee f976 	bl	8000628 <__aeabi_dmul>
 801233c:	4632      	mov	r2, r6
 801233e:	463b      	mov	r3, r7
 8012340:	f7ed ffba 	bl	80002b8 <__aeabi_dsub>
 8012344:	4606      	mov	r6, r0
 8012346:	460f      	mov	r7, r1
 8012348:	e764      	b.n	8012214 <__ieee754_rem_pio2+0x18c>
 801234a:	4b1b      	ldr	r3, [pc, #108]	; (80123b8 <__ieee754_rem_pio2+0x330>)
 801234c:	4598      	cmp	r8, r3
 801234e:	dd35      	ble.n	80123bc <__ieee754_rem_pio2+0x334>
 8012350:	ee10 2a10 	vmov	r2, s0
 8012354:	463b      	mov	r3, r7
 8012356:	4630      	mov	r0, r6
 8012358:	4639      	mov	r1, r7
 801235a:	f7ed ffad 	bl	80002b8 <__aeabi_dsub>
 801235e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012362:	e9c4 0100 	strd	r0, r1, [r4]
 8012366:	e6a1      	b.n	80120ac <__ieee754_rem_pio2+0x24>
 8012368:	54400000 	.word	0x54400000
 801236c:	3ff921fb 	.word	0x3ff921fb
 8012370:	1a626331 	.word	0x1a626331
 8012374:	3dd0b461 	.word	0x3dd0b461
 8012378:	1a600000 	.word	0x1a600000
 801237c:	3dd0b461 	.word	0x3dd0b461
 8012380:	2e037073 	.word	0x2e037073
 8012384:	3ba3198a 	.word	0x3ba3198a
 8012388:	6dc9c883 	.word	0x6dc9c883
 801238c:	3fe45f30 	.word	0x3fe45f30
 8012390:	2e000000 	.word	0x2e000000
 8012394:	3ba3198a 	.word	0x3ba3198a
 8012398:	252049c1 	.word	0x252049c1
 801239c:	397b839a 	.word	0x397b839a
 80123a0:	3fe921fb 	.word	0x3fe921fb
 80123a4:	4002d97b 	.word	0x4002d97b
 80123a8:	3ff921fb 	.word	0x3ff921fb
 80123ac:	413921fb 	.word	0x413921fb
 80123b0:	3fe00000 	.word	0x3fe00000
 80123b4:	080184c0 	.word	0x080184c0
 80123b8:	7fefffff 	.word	0x7fefffff
 80123bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80123c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80123c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80123c8:	4630      	mov	r0, r6
 80123ca:	460f      	mov	r7, r1
 80123cc:	f7ee fbdc 	bl	8000b88 <__aeabi_d2iz>
 80123d0:	f7ee f8c0 	bl	8000554 <__aeabi_i2d>
 80123d4:	4602      	mov	r2, r0
 80123d6:	460b      	mov	r3, r1
 80123d8:	4630      	mov	r0, r6
 80123da:	4639      	mov	r1, r7
 80123dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80123e0:	f7ed ff6a 	bl	80002b8 <__aeabi_dsub>
 80123e4:	2200      	movs	r2, #0
 80123e6:	4b1f      	ldr	r3, [pc, #124]	; (8012464 <__ieee754_rem_pio2+0x3dc>)
 80123e8:	f7ee f91e 	bl	8000628 <__aeabi_dmul>
 80123ec:	460f      	mov	r7, r1
 80123ee:	4606      	mov	r6, r0
 80123f0:	f7ee fbca 	bl	8000b88 <__aeabi_d2iz>
 80123f4:	f7ee f8ae 	bl	8000554 <__aeabi_i2d>
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4630      	mov	r0, r6
 80123fe:	4639      	mov	r1, r7
 8012400:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012404:	f7ed ff58 	bl	80002b8 <__aeabi_dsub>
 8012408:	2200      	movs	r2, #0
 801240a:	4b16      	ldr	r3, [pc, #88]	; (8012464 <__ieee754_rem_pio2+0x3dc>)
 801240c:	f7ee f90c 	bl	8000628 <__aeabi_dmul>
 8012410:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012414:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012418:	f04f 0803 	mov.w	r8, #3
 801241c:	2600      	movs	r6, #0
 801241e:	2700      	movs	r7, #0
 8012420:	4632      	mov	r2, r6
 8012422:	463b      	mov	r3, r7
 8012424:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012428:	f108 3aff 	add.w	sl, r8, #4294967295
 801242c:	f7ee fb64 	bl	8000af8 <__aeabi_dcmpeq>
 8012430:	b9b0      	cbnz	r0, 8012460 <__ieee754_rem_pio2+0x3d8>
 8012432:	4b0d      	ldr	r3, [pc, #52]	; (8012468 <__ieee754_rem_pio2+0x3e0>)
 8012434:	9301      	str	r3, [sp, #4]
 8012436:	2302      	movs	r3, #2
 8012438:	9300      	str	r3, [sp, #0]
 801243a:	462a      	mov	r2, r5
 801243c:	4643      	mov	r3, r8
 801243e:	4621      	mov	r1, r4
 8012440:	a806      	add	r0, sp, #24
 8012442:	f000 f8dd 	bl	8012600 <__kernel_rem_pio2>
 8012446:	9b04      	ldr	r3, [sp, #16]
 8012448:	2b00      	cmp	r3, #0
 801244a:	4605      	mov	r5, r0
 801244c:	f6bf ae58 	bge.w	8012100 <__ieee754_rem_pio2+0x78>
 8012450:	6863      	ldr	r3, [r4, #4]
 8012452:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012456:	6063      	str	r3, [r4, #4]
 8012458:	68e3      	ldr	r3, [r4, #12]
 801245a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801245e:	e746      	b.n	80122ee <__ieee754_rem_pio2+0x266>
 8012460:	46d0      	mov	r8, sl
 8012462:	e7dd      	b.n	8012420 <__ieee754_rem_pio2+0x398>
 8012464:	41700000 	.word	0x41700000
 8012468:	08018540 	.word	0x08018540
 801246c:	00000000 	.word	0x00000000

08012470 <__kernel_cos>:
 8012470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012474:	ec59 8b10 	vmov	r8, r9, d0
 8012478:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801247c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012480:	ed2d 8b02 	vpush	{d8}
 8012484:	eeb0 8a41 	vmov.f32	s16, s2
 8012488:	eef0 8a61 	vmov.f32	s17, s3
 801248c:	da07      	bge.n	801249e <__kernel_cos+0x2e>
 801248e:	ee10 0a10 	vmov	r0, s0
 8012492:	4649      	mov	r1, r9
 8012494:	f7ee fb78 	bl	8000b88 <__aeabi_d2iz>
 8012498:	2800      	cmp	r0, #0
 801249a:	f000 8089 	beq.w	80125b0 <__kernel_cos+0x140>
 801249e:	4642      	mov	r2, r8
 80124a0:	464b      	mov	r3, r9
 80124a2:	4640      	mov	r0, r8
 80124a4:	4649      	mov	r1, r9
 80124a6:	f7ee f8bf 	bl	8000628 <__aeabi_dmul>
 80124aa:	2200      	movs	r2, #0
 80124ac:	4b4e      	ldr	r3, [pc, #312]	; (80125e8 <__kernel_cos+0x178>)
 80124ae:	4604      	mov	r4, r0
 80124b0:	460d      	mov	r5, r1
 80124b2:	f7ee f8b9 	bl	8000628 <__aeabi_dmul>
 80124b6:	a340      	add	r3, pc, #256	; (adr r3, 80125b8 <__kernel_cos+0x148>)
 80124b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124bc:	4682      	mov	sl, r0
 80124be:	468b      	mov	fp, r1
 80124c0:	4620      	mov	r0, r4
 80124c2:	4629      	mov	r1, r5
 80124c4:	f7ee f8b0 	bl	8000628 <__aeabi_dmul>
 80124c8:	a33d      	add	r3, pc, #244	; (adr r3, 80125c0 <__kernel_cos+0x150>)
 80124ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ce:	f7ed fef5 	bl	80002bc <__adddf3>
 80124d2:	4622      	mov	r2, r4
 80124d4:	462b      	mov	r3, r5
 80124d6:	f7ee f8a7 	bl	8000628 <__aeabi_dmul>
 80124da:	a33b      	add	r3, pc, #236	; (adr r3, 80125c8 <__kernel_cos+0x158>)
 80124dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e0:	f7ed feea 	bl	80002b8 <__aeabi_dsub>
 80124e4:	4622      	mov	r2, r4
 80124e6:	462b      	mov	r3, r5
 80124e8:	f7ee f89e 	bl	8000628 <__aeabi_dmul>
 80124ec:	a338      	add	r3, pc, #224	; (adr r3, 80125d0 <__kernel_cos+0x160>)
 80124ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f2:	f7ed fee3 	bl	80002bc <__adddf3>
 80124f6:	4622      	mov	r2, r4
 80124f8:	462b      	mov	r3, r5
 80124fa:	f7ee f895 	bl	8000628 <__aeabi_dmul>
 80124fe:	a336      	add	r3, pc, #216	; (adr r3, 80125d8 <__kernel_cos+0x168>)
 8012500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012504:	f7ed fed8 	bl	80002b8 <__aeabi_dsub>
 8012508:	4622      	mov	r2, r4
 801250a:	462b      	mov	r3, r5
 801250c:	f7ee f88c 	bl	8000628 <__aeabi_dmul>
 8012510:	a333      	add	r3, pc, #204	; (adr r3, 80125e0 <__kernel_cos+0x170>)
 8012512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012516:	f7ed fed1 	bl	80002bc <__adddf3>
 801251a:	4622      	mov	r2, r4
 801251c:	462b      	mov	r3, r5
 801251e:	f7ee f883 	bl	8000628 <__aeabi_dmul>
 8012522:	4622      	mov	r2, r4
 8012524:	462b      	mov	r3, r5
 8012526:	f7ee f87f 	bl	8000628 <__aeabi_dmul>
 801252a:	ec53 2b18 	vmov	r2, r3, d8
 801252e:	4604      	mov	r4, r0
 8012530:	460d      	mov	r5, r1
 8012532:	4640      	mov	r0, r8
 8012534:	4649      	mov	r1, r9
 8012536:	f7ee f877 	bl	8000628 <__aeabi_dmul>
 801253a:	460b      	mov	r3, r1
 801253c:	4602      	mov	r2, r0
 801253e:	4629      	mov	r1, r5
 8012540:	4620      	mov	r0, r4
 8012542:	f7ed feb9 	bl	80002b8 <__aeabi_dsub>
 8012546:	4b29      	ldr	r3, [pc, #164]	; (80125ec <__kernel_cos+0x17c>)
 8012548:	429e      	cmp	r6, r3
 801254a:	4680      	mov	r8, r0
 801254c:	4689      	mov	r9, r1
 801254e:	dc11      	bgt.n	8012574 <__kernel_cos+0x104>
 8012550:	4602      	mov	r2, r0
 8012552:	460b      	mov	r3, r1
 8012554:	4650      	mov	r0, sl
 8012556:	4659      	mov	r1, fp
 8012558:	f7ed feae 	bl	80002b8 <__aeabi_dsub>
 801255c:	460b      	mov	r3, r1
 801255e:	4924      	ldr	r1, [pc, #144]	; (80125f0 <__kernel_cos+0x180>)
 8012560:	4602      	mov	r2, r0
 8012562:	2000      	movs	r0, #0
 8012564:	f7ed fea8 	bl	80002b8 <__aeabi_dsub>
 8012568:	ecbd 8b02 	vpop	{d8}
 801256c:	ec41 0b10 	vmov	d0, r0, r1
 8012570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012574:	4b1f      	ldr	r3, [pc, #124]	; (80125f4 <__kernel_cos+0x184>)
 8012576:	491e      	ldr	r1, [pc, #120]	; (80125f0 <__kernel_cos+0x180>)
 8012578:	429e      	cmp	r6, r3
 801257a:	bfcc      	ite	gt
 801257c:	4d1e      	ldrgt	r5, [pc, #120]	; (80125f8 <__kernel_cos+0x188>)
 801257e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012582:	2400      	movs	r4, #0
 8012584:	4622      	mov	r2, r4
 8012586:	462b      	mov	r3, r5
 8012588:	2000      	movs	r0, #0
 801258a:	f7ed fe95 	bl	80002b8 <__aeabi_dsub>
 801258e:	4622      	mov	r2, r4
 8012590:	4606      	mov	r6, r0
 8012592:	460f      	mov	r7, r1
 8012594:	462b      	mov	r3, r5
 8012596:	4650      	mov	r0, sl
 8012598:	4659      	mov	r1, fp
 801259a:	f7ed fe8d 	bl	80002b8 <__aeabi_dsub>
 801259e:	4642      	mov	r2, r8
 80125a0:	464b      	mov	r3, r9
 80125a2:	f7ed fe89 	bl	80002b8 <__aeabi_dsub>
 80125a6:	4602      	mov	r2, r0
 80125a8:	460b      	mov	r3, r1
 80125aa:	4630      	mov	r0, r6
 80125ac:	4639      	mov	r1, r7
 80125ae:	e7d9      	b.n	8012564 <__kernel_cos+0xf4>
 80125b0:	2000      	movs	r0, #0
 80125b2:	490f      	ldr	r1, [pc, #60]	; (80125f0 <__kernel_cos+0x180>)
 80125b4:	e7d8      	b.n	8012568 <__kernel_cos+0xf8>
 80125b6:	bf00      	nop
 80125b8:	be8838d4 	.word	0xbe8838d4
 80125bc:	bda8fae9 	.word	0xbda8fae9
 80125c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80125c4:	3e21ee9e 	.word	0x3e21ee9e
 80125c8:	809c52ad 	.word	0x809c52ad
 80125cc:	3e927e4f 	.word	0x3e927e4f
 80125d0:	19cb1590 	.word	0x19cb1590
 80125d4:	3efa01a0 	.word	0x3efa01a0
 80125d8:	16c15177 	.word	0x16c15177
 80125dc:	3f56c16c 	.word	0x3f56c16c
 80125e0:	5555554c 	.word	0x5555554c
 80125e4:	3fa55555 	.word	0x3fa55555
 80125e8:	3fe00000 	.word	0x3fe00000
 80125ec:	3fd33332 	.word	0x3fd33332
 80125f0:	3ff00000 	.word	0x3ff00000
 80125f4:	3fe90000 	.word	0x3fe90000
 80125f8:	3fd20000 	.word	0x3fd20000
 80125fc:	00000000 	.word	0x00000000

08012600 <__kernel_rem_pio2>:
 8012600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012604:	ed2d 8b02 	vpush	{d8}
 8012608:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801260c:	1ed4      	subs	r4, r2, #3
 801260e:	9308      	str	r3, [sp, #32]
 8012610:	9101      	str	r1, [sp, #4]
 8012612:	4bc5      	ldr	r3, [pc, #788]	; (8012928 <__kernel_rem_pio2+0x328>)
 8012614:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012616:	9009      	str	r0, [sp, #36]	; 0x24
 8012618:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801261c:	9304      	str	r3, [sp, #16]
 801261e:	9b08      	ldr	r3, [sp, #32]
 8012620:	3b01      	subs	r3, #1
 8012622:	9307      	str	r3, [sp, #28]
 8012624:	2318      	movs	r3, #24
 8012626:	fb94 f4f3 	sdiv	r4, r4, r3
 801262a:	f06f 0317 	mvn.w	r3, #23
 801262e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012632:	fb04 3303 	mla	r3, r4, r3, r3
 8012636:	eb03 0a02 	add.w	sl, r3, r2
 801263a:	9b04      	ldr	r3, [sp, #16]
 801263c:	9a07      	ldr	r2, [sp, #28]
 801263e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012918 <__kernel_rem_pio2+0x318>
 8012642:	eb03 0802 	add.w	r8, r3, r2
 8012646:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012648:	1aa7      	subs	r7, r4, r2
 801264a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801264e:	ae22      	add	r6, sp, #136	; 0x88
 8012650:	2500      	movs	r5, #0
 8012652:	4545      	cmp	r5, r8
 8012654:	dd13      	ble.n	801267e <__kernel_rem_pio2+0x7e>
 8012656:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012918 <__kernel_rem_pio2+0x318>
 801265a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801265e:	2600      	movs	r6, #0
 8012660:	9b04      	ldr	r3, [sp, #16]
 8012662:	429e      	cmp	r6, r3
 8012664:	dc32      	bgt.n	80126cc <__kernel_rem_pio2+0xcc>
 8012666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012668:	9302      	str	r3, [sp, #8]
 801266a:	9b08      	ldr	r3, [sp, #32]
 801266c:	199d      	adds	r5, r3, r6
 801266e:	ab22      	add	r3, sp, #136	; 0x88
 8012670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012674:	9306      	str	r3, [sp, #24]
 8012676:	ec59 8b18 	vmov	r8, r9, d8
 801267a:	2700      	movs	r7, #0
 801267c:	e01f      	b.n	80126be <__kernel_rem_pio2+0xbe>
 801267e:	42ef      	cmn	r7, r5
 8012680:	d407      	bmi.n	8012692 <__kernel_rem_pio2+0x92>
 8012682:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012686:	f7ed ff65 	bl	8000554 <__aeabi_i2d>
 801268a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801268e:	3501      	adds	r5, #1
 8012690:	e7df      	b.n	8012652 <__kernel_rem_pio2+0x52>
 8012692:	ec51 0b18 	vmov	r0, r1, d8
 8012696:	e7f8      	b.n	801268a <__kernel_rem_pio2+0x8a>
 8012698:	9906      	ldr	r1, [sp, #24]
 801269a:	9d02      	ldr	r5, [sp, #8]
 801269c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80126a0:	9106      	str	r1, [sp, #24]
 80126a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80126a6:	9502      	str	r5, [sp, #8]
 80126a8:	f7ed ffbe 	bl	8000628 <__aeabi_dmul>
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	4640      	mov	r0, r8
 80126b2:	4649      	mov	r1, r9
 80126b4:	f7ed fe02 	bl	80002bc <__adddf3>
 80126b8:	3701      	adds	r7, #1
 80126ba:	4680      	mov	r8, r0
 80126bc:	4689      	mov	r9, r1
 80126be:	9b07      	ldr	r3, [sp, #28]
 80126c0:	429f      	cmp	r7, r3
 80126c2:	dde9      	ble.n	8012698 <__kernel_rem_pio2+0x98>
 80126c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80126c8:	3601      	adds	r6, #1
 80126ca:	e7c9      	b.n	8012660 <__kernel_rem_pio2+0x60>
 80126cc:	9b04      	ldr	r3, [sp, #16]
 80126ce:	aa0e      	add	r2, sp, #56	; 0x38
 80126d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126d4:	930c      	str	r3, [sp, #48]	; 0x30
 80126d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80126d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80126dc:	9c04      	ldr	r4, [sp, #16]
 80126de:	930b      	str	r3, [sp, #44]	; 0x2c
 80126e0:	ab9a      	add	r3, sp, #616	; 0x268
 80126e2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80126e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126ee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80126f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80126f6:	ab9a      	add	r3, sp, #616	; 0x268
 80126f8:	445b      	add	r3, fp
 80126fa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80126fe:	2500      	movs	r5, #0
 8012700:	1b63      	subs	r3, r4, r5
 8012702:	2b00      	cmp	r3, #0
 8012704:	dc78      	bgt.n	80127f8 <__kernel_rem_pio2+0x1f8>
 8012706:	4650      	mov	r0, sl
 8012708:	ec49 8b10 	vmov	d0, r8, r9
 801270c:	f000 fc00 	bl	8012f10 <scalbn>
 8012710:	ec57 6b10 	vmov	r6, r7, d0
 8012714:	2200      	movs	r2, #0
 8012716:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801271a:	ee10 0a10 	vmov	r0, s0
 801271e:	4639      	mov	r1, r7
 8012720:	f7ed ff82 	bl	8000628 <__aeabi_dmul>
 8012724:	ec41 0b10 	vmov	d0, r0, r1
 8012728:	f000 fb6e 	bl	8012e08 <floor>
 801272c:	2200      	movs	r2, #0
 801272e:	ec51 0b10 	vmov	r0, r1, d0
 8012732:	4b7e      	ldr	r3, [pc, #504]	; (801292c <__kernel_rem_pio2+0x32c>)
 8012734:	f7ed ff78 	bl	8000628 <__aeabi_dmul>
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	4630      	mov	r0, r6
 801273e:	4639      	mov	r1, r7
 8012740:	f7ed fdba 	bl	80002b8 <__aeabi_dsub>
 8012744:	460f      	mov	r7, r1
 8012746:	4606      	mov	r6, r0
 8012748:	f7ee fa1e 	bl	8000b88 <__aeabi_d2iz>
 801274c:	9006      	str	r0, [sp, #24]
 801274e:	f7ed ff01 	bl	8000554 <__aeabi_i2d>
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	4630      	mov	r0, r6
 8012758:	4639      	mov	r1, r7
 801275a:	f7ed fdad 	bl	80002b8 <__aeabi_dsub>
 801275e:	f1ba 0f00 	cmp.w	sl, #0
 8012762:	4606      	mov	r6, r0
 8012764:	460f      	mov	r7, r1
 8012766:	dd6c      	ble.n	8012842 <__kernel_rem_pio2+0x242>
 8012768:	1e62      	subs	r2, r4, #1
 801276a:	ab0e      	add	r3, sp, #56	; 0x38
 801276c:	f1ca 0118 	rsb	r1, sl, #24
 8012770:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012774:	9d06      	ldr	r5, [sp, #24]
 8012776:	fa40 f301 	asr.w	r3, r0, r1
 801277a:	441d      	add	r5, r3
 801277c:	408b      	lsls	r3, r1
 801277e:	1ac0      	subs	r0, r0, r3
 8012780:	ab0e      	add	r3, sp, #56	; 0x38
 8012782:	9506      	str	r5, [sp, #24]
 8012784:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012788:	f1ca 0317 	rsb	r3, sl, #23
 801278c:	fa40 f303 	asr.w	r3, r0, r3
 8012790:	9302      	str	r3, [sp, #8]
 8012792:	9b02      	ldr	r3, [sp, #8]
 8012794:	2b00      	cmp	r3, #0
 8012796:	dd62      	ble.n	801285e <__kernel_rem_pio2+0x25e>
 8012798:	9b06      	ldr	r3, [sp, #24]
 801279a:	2200      	movs	r2, #0
 801279c:	3301      	adds	r3, #1
 801279e:	9306      	str	r3, [sp, #24]
 80127a0:	4615      	mov	r5, r2
 80127a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80127a6:	4294      	cmp	r4, r2
 80127a8:	f300 8095 	bgt.w	80128d6 <__kernel_rem_pio2+0x2d6>
 80127ac:	f1ba 0f00 	cmp.w	sl, #0
 80127b0:	dd07      	ble.n	80127c2 <__kernel_rem_pio2+0x1c2>
 80127b2:	f1ba 0f01 	cmp.w	sl, #1
 80127b6:	f000 80a2 	beq.w	80128fe <__kernel_rem_pio2+0x2fe>
 80127ba:	f1ba 0f02 	cmp.w	sl, #2
 80127be:	f000 80c1 	beq.w	8012944 <__kernel_rem_pio2+0x344>
 80127c2:	9b02      	ldr	r3, [sp, #8]
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	d14a      	bne.n	801285e <__kernel_rem_pio2+0x25e>
 80127c8:	4632      	mov	r2, r6
 80127ca:	463b      	mov	r3, r7
 80127cc:	2000      	movs	r0, #0
 80127ce:	4958      	ldr	r1, [pc, #352]	; (8012930 <__kernel_rem_pio2+0x330>)
 80127d0:	f7ed fd72 	bl	80002b8 <__aeabi_dsub>
 80127d4:	4606      	mov	r6, r0
 80127d6:	460f      	mov	r7, r1
 80127d8:	2d00      	cmp	r5, #0
 80127da:	d040      	beq.n	801285e <__kernel_rem_pio2+0x25e>
 80127dc:	4650      	mov	r0, sl
 80127de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012920 <__kernel_rem_pio2+0x320>
 80127e2:	f000 fb95 	bl	8012f10 <scalbn>
 80127e6:	4630      	mov	r0, r6
 80127e8:	4639      	mov	r1, r7
 80127ea:	ec53 2b10 	vmov	r2, r3, d0
 80127ee:	f7ed fd63 	bl	80002b8 <__aeabi_dsub>
 80127f2:	4606      	mov	r6, r0
 80127f4:	460f      	mov	r7, r1
 80127f6:	e032      	b.n	801285e <__kernel_rem_pio2+0x25e>
 80127f8:	2200      	movs	r2, #0
 80127fa:	4b4e      	ldr	r3, [pc, #312]	; (8012934 <__kernel_rem_pio2+0x334>)
 80127fc:	4640      	mov	r0, r8
 80127fe:	4649      	mov	r1, r9
 8012800:	f7ed ff12 	bl	8000628 <__aeabi_dmul>
 8012804:	f7ee f9c0 	bl	8000b88 <__aeabi_d2iz>
 8012808:	f7ed fea4 	bl	8000554 <__aeabi_i2d>
 801280c:	2200      	movs	r2, #0
 801280e:	4b4a      	ldr	r3, [pc, #296]	; (8012938 <__kernel_rem_pio2+0x338>)
 8012810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012814:	f7ed ff08 	bl	8000628 <__aeabi_dmul>
 8012818:	4602      	mov	r2, r0
 801281a:	460b      	mov	r3, r1
 801281c:	4640      	mov	r0, r8
 801281e:	4649      	mov	r1, r9
 8012820:	f7ed fd4a 	bl	80002b8 <__aeabi_dsub>
 8012824:	f7ee f9b0 	bl	8000b88 <__aeabi_d2iz>
 8012828:	ab0e      	add	r3, sp, #56	; 0x38
 801282a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801282e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012832:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012836:	f7ed fd41 	bl	80002bc <__adddf3>
 801283a:	3501      	adds	r5, #1
 801283c:	4680      	mov	r8, r0
 801283e:	4689      	mov	r9, r1
 8012840:	e75e      	b.n	8012700 <__kernel_rem_pio2+0x100>
 8012842:	d105      	bne.n	8012850 <__kernel_rem_pio2+0x250>
 8012844:	1e63      	subs	r3, r4, #1
 8012846:	aa0e      	add	r2, sp, #56	; 0x38
 8012848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801284c:	15c3      	asrs	r3, r0, #23
 801284e:	e79f      	b.n	8012790 <__kernel_rem_pio2+0x190>
 8012850:	2200      	movs	r2, #0
 8012852:	4b3a      	ldr	r3, [pc, #232]	; (801293c <__kernel_rem_pio2+0x33c>)
 8012854:	f7ee f96e 	bl	8000b34 <__aeabi_dcmpge>
 8012858:	2800      	cmp	r0, #0
 801285a:	d139      	bne.n	80128d0 <__kernel_rem_pio2+0x2d0>
 801285c:	9002      	str	r0, [sp, #8]
 801285e:	2200      	movs	r2, #0
 8012860:	2300      	movs	r3, #0
 8012862:	4630      	mov	r0, r6
 8012864:	4639      	mov	r1, r7
 8012866:	f7ee f947 	bl	8000af8 <__aeabi_dcmpeq>
 801286a:	2800      	cmp	r0, #0
 801286c:	f000 80c7 	beq.w	80129fe <__kernel_rem_pio2+0x3fe>
 8012870:	1e65      	subs	r5, r4, #1
 8012872:	462b      	mov	r3, r5
 8012874:	2200      	movs	r2, #0
 8012876:	9904      	ldr	r1, [sp, #16]
 8012878:	428b      	cmp	r3, r1
 801287a:	da6a      	bge.n	8012952 <__kernel_rem_pio2+0x352>
 801287c:	2a00      	cmp	r2, #0
 801287e:	f000 8088 	beq.w	8012992 <__kernel_rem_pio2+0x392>
 8012882:	ab0e      	add	r3, sp, #56	; 0x38
 8012884:	f1aa 0a18 	sub.w	sl, sl, #24
 8012888:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801288c:	2b00      	cmp	r3, #0
 801288e:	f000 80b4 	beq.w	80129fa <__kernel_rem_pio2+0x3fa>
 8012892:	4650      	mov	r0, sl
 8012894:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012920 <__kernel_rem_pio2+0x320>
 8012898:	f000 fb3a 	bl	8012f10 <scalbn>
 801289c:	00ec      	lsls	r4, r5, #3
 801289e:	ab72      	add	r3, sp, #456	; 0x1c8
 80128a0:	191e      	adds	r6, r3, r4
 80128a2:	ec59 8b10 	vmov	r8, r9, d0
 80128a6:	f106 0a08 	add.w	sl, r6, #8
 80128aa:	462f      	mov	r7, r5
 80128ac:	2f00      	cmp	r7, #0
 80128ae:	f280 80df 	bge.w	8012a70 <__kernel_rem_pio2+0x470>
 80128b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012918 <__kernel_rem_pio2+0x318>
 80128b6:	f04f 0a00 	mov.w	sl, #0
 80128ba:	eba5 030a 	sub.w	r3, r5, sl
 80128be:	2b00      	cmp	r3, #0
 80128c0:	f2c0 810a 	blt.w	8012ad8 <__kernel_rem_pio2+0x4d8>
 80128c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012940 <__kernel_rem_pio2+0x340>
 80128c8:	ec59 8b18 	vmov	r8, r9, d8
 80128cc:	2700      	movs	r7, #0
 80128ce:	e0f5      	b.n	8012abc <__kernel_rem_pio2+0x4bc>
 80128d0:	2302      	movs	r3, #2
 80128d2:	9302      	str	r3, [sp, #8]
 80128d4:	e760      	b.n	8012798 <__kernel_rem_pio2+0x198>
 80128d6:	ab0e      	add	r3, sp, #56	; 0x38
 80128d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128dc:	b94d      	cbnz	r5, 80128f2 <__kernel_rem_pio2+0x2f2>
 80128de:	b12b      	cbz	r3, 80128ec <__kernel_rem_pio2+0x2ec>
 80128e0:	a80e      	add	r0, sp, #56	; 0x38
 80128e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80128e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80128ea:	2301      	movs	r3, #1
 80128ec:	3201      	adds	r2, #1
 80128ee:	461d      	mov	r5, r3
 80128f0:	e759      	b.n	80127a6 <__kernel_rem_pio2+0x1a6>
 80128f2:	a80e      	add	r0, sp, #56	; 0x38
 80128f4:	1acb      	subs	r3, r1, r3
 80128f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80128fa:	462b      	mov	r3, r5
 80128fc:	e7f6      	b.n	80128ec <__kernel_rem_pio2+0x2ec>
 80128fe:	1e62      	subs	r2, r4, #1
 8012900:	ab0e      	add	r3, sp, #56	; 0x38
 8012902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012906:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801290a:	a90e      	add	r1, sp, #56	; 0x38
 801290c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012910:	e757      	b.n	80127c2 <__kernel_rem_pio2+0x1c2>
 8012912:	bf00      	nop
 8012914:	f3af 8000 	nop.w
	...
 8012924:	3ff00000 	.word	0x3ff00000
 8012928:	08018688 	.word	0x08018688
 801292c:	40200000 	.word	0x40200000
 8012930:	3ff00000 	.word	0x3ff00000
 8012934:	3e700000 	.word	0x3e700000
 8012938:	41700000 	.word	0x41700000
 801293c:	3fe00000 	.word	0x3fe00000
 8012940:	08018648 	.word	0x08018648
 8012944:	1e62      	subs	r2, r4, #1
 8012946:	ab0e      	add	r3, sp, #56	; 0x38
 8012948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801294c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012950:	e7db      	b.n	801290a <__kernel_rem_pio2+0x30a>
 8012952:	a90e      	add	r1, sp, #56	; 0x38
 8012954:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012958:	3b01      	subs	r3, #1
 801295a:	430a      	orrs	r2, r1
 801295c:	e78b      	b.n	8012876 <__kernel_rem_pio2+0x276>
 801295e:	3301      	adds	r3, #1
 8012960:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012964:	2900      	cmp	r1, #0
 8012966:	d0fa      	beq.n	801295e <__kernel_rem_pio2+0x35e>
 8012968:	9a08      	ldr	r2, [sp, #32]
 801296a:	4422      	add	r2, r4
 801296c:	00d2      	lsls	r2, r2, #3
 801296e:	a922      	add	r1, sp, #136	; 0x88
 8012970:	18e3      	adds	r3, r4, r3
 8012972:	9206      	str	r2, [sp, #24]
 8012974:	440a      	add	r2, r1
 8012976:	9302      	str	r3, [sp, #8]
 8012978:	f10b 0108 	add.w	r1, fp, #8
 801297c:	f102 0308 	add.w	r3, r2, #8
 8012980:	1c66      	adds	r6, r4, #1
 8012982:	910a      	str	r1, [sp, #40]	; 0x28
 8012984:	2500      	movs	r5, #0
 8012986:	930d      	str	r3, [sp, #52]	; 0x34
 8012988:	9b02      	ldr	r3, [sp, #8]
 801298a:	42b3      	cmp	r3, r6
 801298c:	da04      	bge.n	8012998 <__kernel_rem_pio2+0x398>
 801298e:	461c      	mov	r4, r3
 8012990:	e6a6      	b.n	80126e0 <__kernel_rem_pio2+0xe0>
 8012992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012994:	2301      	movs	r3, #1
 8012996:	e7e3      	b.n	8012960 <__kernel_rem_pio2+0x360>
 8012998:	9b06      	ldr	r3, [sp, #24]
 801299a:	18ef      	adds	r7, r5, r3
 801299c:	ab22      	add	r3, sp, #136	; 0x88
 801299e:	441f      	add	r7, r3
 80129a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80129a6:	f7ed fdd5 	bl	8000554 <__aeabi_i2d>
 80129aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129ac:	461c      	mov	r4, r3
 80129ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80129b0:	e9c7 0100 	strd	r0, r1, [r7]
 80129b4:	eb03 0b05 	add.w	fp, r3, r5
 80129b8:	2700      	movs	r7, #0
 80129ba:	f04f 0800 	mov.w	r8, #0
 80129be:	f04f 0900 	mov.w	r9, #0
 80129c2:	9b07      	ldr	r3, [sp, #28]
 80129c4:	429f      	cmp	r7, r3
 80129c6:	dd08      	ble.n	80129da <__kernel_rem_pio2+0x3da>
 80129c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ca:	aa72      	add	r2, sp, #456	; 0x1c8
 80129cc:	18eb      	adds	r3, r5, r3
 80129ce:	4413      	add	r3, r2
 80129d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80129d4:	3601      	adds	r6, #1
 80129d6:	3508      	adds	r5, #8
 80129d8:	e7d6      	b.n	8012988 <__kernel_rem_pio2+0x388>
 80129da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80129de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80129e2:	f7ed fe21 	bl	8000628 <__aeabi_dmul>
 80129e6:	4602      	mov	r2, r0
 80129e8:	460b      	mov	r3, r1
 80129ea:	4640      	mov	r0, r8
 80129ec:	4649      	mov	r1, r9
 80129ee:	f7ed fc65 	bl	80002bc <__adddf3>
 80129f2:	3701      	adds	r7, #1
 80129f4:	4680      	mov	r8, r0
 80129f6:	4689      	mov	r9, r1
 80129f8:	e7e3      	b.n	80129c2 <__kernel_rem_pio2+0x3c2>
 80129fa:	3d01      	subs	r5, #1
 80129fc:	e741      	b.n	8012882 <__kernel_rem_pio2+0x282>
 80129fe:	f1ca 0000 	rsb	r0, sl, #0
 8012a02:	ec47 6b10 	vmov	d0, r6, r7
 8012a06:	f000 fa83 	bl	8012f10 <scalbn>
 8012a0a:	ec57 6b10 	vmov	r6, r7, d0
 8012a0e:	2200      	movs	r2, #0
 8012a10:	4b99      	ldr	r3, [pc, #612]	; (8012c78 <__kernel_rem_pio2+0x678>)
 8012a12:	ee10 0a10 	vmov	r0, s0
 8012a16:	4639      	mov	r1, r7
 8012a18:	f7ee f88c 	bl	8000b34 <__aeabi_dcmpge>
 8012a1c:	b1f8      	cbz	r0, 8012a5e <__kernel_rem_pio2+0x45e>
 8012a1e:	2200      	movs	r2, #0
 8012a20:	4b96      	ldr	r3, [pc, #600]	; (8012c7c <__kernel_rem_pio2+0x67c>)
 8012a22:	4630      	mov	r0, r6
 8012a24:	4639      	mov	r1, r7
 8012a26:	f7ed fdff 	bl	8000628 <__aeabi_dmul>
 8012a2a:	f7ee f8ad 	bl	8000b88 <__aeabi_d2iz>
 8012a2e:	4680      	mov	r8, r0
 8012a30:	f7ed fd90 	bl	8000554 <__aeabi_i2d>
 8012a34:	2200      	movs	r2, #0
 8012a36:	4b90      	ldr	r3, [pc, #576]	; (8012c78 <__kernel_rem_pio2+0x678>)
 8012a38:	f7ed fdf6 	bl	8000628 <__aeabi_dmul>
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	4602      	mov	r2, r0
 8012a40:	4639      	mov	r1, r7
 8012a42:	4630      	mov	r0, r6
 8012a44:	f7ed fc38 	bl	80002b8 <__aeabi_dsub>
 8012a48:	f7ee f89e 	bl	8000b88 <__aeabi_d2iz>
 8012a4c:	1c65      	adds	r5, r4, #1
 8012a4e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a50:	f10a 0a18 	add.w	sl, sl, #24
 8012a54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012a5c:	e719      	b.n	8012892 <__kernel_rem_pio2+0x292>
 8012a5e:	4630      	mov	r0, r6
 8012a60:	4639      	mov	r1, r7
 8012a62:	f7ee f891 	bl	8000b88 <__aeabi_d2iz>
 8012a66:	ab0e      	add	r3, sp, #56	; 0x38
 8012a68:	4625      	mov	r5, r4
 8012a6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a6e:	e710      	b.n	8012892 <__kernel_rem_pio2+0x292>
 8012a70:	ab0e      	add	r3, sp, #56	; 0x38
 8012a72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012a76:	f7ed fd6d 	bl	8000554 <__aeabi_i2d>
 8012a7a:	4642      	mov	r2, r8
 8012a7c:	464b      	mov	r3, r9
 8012a7e:	f7ed fdd3 	bl	8000628 <__aeabi_dmul>
 8012a82:	2200      	movs	r2, #0
 8012a84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012a88:	4b7c      	ldr	r3, [pc, #496]	; (8012c7c <__kernel_rem_pio2+0x67c>)
 8012a8a:	4640      	mov	r0, r8
 8012a8c:	4649      	mov	r1, r9
 8012a8e:	f7ed fdcb 	bl	8000628 <__aeabi_dmul>
 8012a92:	3f01      	subs	r7, #1
 8012a94:	4680      	mov	r8, r0
 8012a96:	4689      	mov	r9, r1
 8012a98:	e708      	b.n	80128ac <__kernel_rem_pio2+0x2ac>
 8012a9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012aa6:	f7ed fdbf 	bl	8000628 <__aeabi_dmul>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	460b      	mov	r3, r1
 8012aae:	4640      	mov	r0, r8
 8012ab0:	4649      	mov	r1, r9
 8012ab2:	f7ed fc03 	bl	80002bc <__adddf3>
 8012ab6:	3701      	adds	r7, #1
 8012ab8:	4680      	mov	r8, r0
 8012aba:	4689      	mov	r9, r1
 8012abc:	9b04      	ldr	r3, [sp, #16]
 8012abe:	429f      	cmp	r7, r3
 8012ac0:	dc01      	bgt.n	8012ac6 <__kernel_rem_pio2+0x4c6>
 8012ac2:	45ba      	cmp	sl, r7
 8012ac4:	dae9      	bge.n	8012a9a <__kernel_rem_pio2+0x49a>
 8012ac6:	ab4a      	add	r3, sp, #296	; 0x128
 8012ac8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012acc:	e9c3 8900 	strd	r8, r9, [r3]
 8012ad0:	f10a 0a01 	add.w	sl, sl, #1
 8012ad4:	3e08      	subs	r6, #8
 8012ad6:	e6f0      	b.n	80128ba <__kernel_rem_pio2+0x2ba>
 8012ad8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d85b      	bhi.n	8012b96 <__kernel_rem_pio2+0x596>
 8012ade:	e8df f003 	tbb	[pc, r3]
 8012ae2:	264a      	.short	0x264a
 8012ae4:	0226      	.short	0x0226
 8012ae6:	ab9a      	add	r3, sp, #616	; 0x268
 8012ae8:	441c      	add	r4, r3
 8012aea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012aee:	46a2      	mov	sl, r4
 8012af0:	46ab      	mov	fp, r5
 8012af2:	f1bb 0f00 	cmp.w	fp, #0
 8012af6:	dc6c      	bgt.n	8012bd2 <__kernel_rem_pio2+0x5d2>
 8012af8:	46a2      	mov	sl, r4
 8012afa:	46ab      	mov	fp, r5
 8012afc:	f1bb 0f01 	cmp.w	fp, #1
 8012b00:	f300 8086 	bgt.w	8012c10 <__kernel_rem_pio2+0x610>
 8012b04:	2000      	movs	r0, #0
 8012b06:	2100      	movs	r1, #0
 8012b08:	2d01      	cmp	r5, #1
 8012b0a:	f300 80a0 	bgt.w	8012c4e <__kernel_rem_pio2+0x64e>
 8012b0e:	9b02      	ldr	r3, [sp, #8]
 8012b10:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012b14:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f040 809e 	bne.w	8012c5a <__kernel_rem_pio2+0x65a>
 8012b1e:	9b01      	ldr	r3, [sp, #4]
 8012b20:	e9c3 7800 	strd	r7, r8, [r3]
 8012b24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012b28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012b2c:	e033      	b.n	8012b96 <__kernel_rem_pio2+0x596>
 8012b2e:	3408      	adds	r4, #8
 8012b30:	ab4a      	add	r3, sp, #296	; 0x128
 8012b32:	441c      	add	r4, r3
 8012b34:	462e      	mov	r6, r5
 8012b36:	2000      	movs	r0, #0
 8012b38:	2100      	movs	r1, #0
 8012b3a:	2e00      	cmp	r6, #0
 8012b3c:	da3a      	bge.n	8012bb4 <__kernel_rem_pio2+0x5b4>
 8012b3e:	9b02      	ldr	r3, [sp, #8]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d03d      	beq.n	8012bc0 <__kernel_rem_pio2+0x5c0>
 8012b44:	4602      	mov	r2, r0
 8012b46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b4a:	9c01      	ldr	r4, [sp, #4]
 8012b4c:	e9c4 2300 	strd	r2, r3, [r4]
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012b58:	f7ed fbae 	bl	80002b8 <__aeabi_dsub>
 8012b5c:	ae4c      	add	r6, sp, #304	; 0x130
 8012b5e:	2401      	movs	r4, #1
 8012b60:	42a5      	cmp	r5, r4
 8012b62:	da30      	bge.n	8012bc6 <__kernel_rem_pio2+0x5c6>
 8012b64:	9b02      	ldr	r3, [sp, #8]
 8012b66:	b113      	cbz	r3, 8012b6e <__kernel_rem_pio2+0x56e>
 8012b68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b6c:	4619      	mov	r1, r3
 8012b6e:	9b01      	ldr	r3, [sp, #4]
 8012b70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b74:	e00f      	b.n	8012b96 <__kernel_rem_pio2+0x596>
 8012b76:	ab9a      	add	r3, sp, #616	; 0x268
 8012b78:	441c      	add	r4, r3
 8012b7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b7e:	2000      	movs	r0, #0
 8012b80:	2100      	movs	r1, #0
 8012b82:	2d00      	cmp	r5, #0
 8012b84:	da10      	bge.n	8012ba8 <__kernel_rem_pio2+0x5a8>
 8012b86:	9b02      	ldr	r3, [sp, #8]
 8012b88:	b113      	cbz	r3, 8012b90 <__kernel_rem_pio2+0x590>
 8012b8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b8e:	4619      	mov	r1, r3
 8012b90:	9b01      	ldr	r3, [sp, #4]
 8012b92:	e9c3 0100 	strd	r0, r1, [r3]
 8012b96:	9b06      	ldr	r3, [sp, #24]
 8012b98:	f003 0007 	and.w	r0, r3, #7
 8012b9c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012ba0:	ecbd 8b02 	vpop	{d8}
 8012ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bac:	f7ed fb86 	bl	80002bc <__adddf3>
 8012bb0:	3d01      	subs	r5, #1
 8012bb2:	e7e6      	b.n	8012b82 <__kernel_rem_pio2+0x582>
 8012bb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bb8:	f7ed fb80 	bl	80002bc <__adddf3>
 8012bbc:	3e01      	subs	r6, #1
 8012bbe:	e7bc      	b.n	8012b3a <__kernel_rem_pio2+0x53a>
 8012bc0:	4602      	mov	r2, r0
 8012bc2:	460b      	mov	r3, r1
 8012bc4:	e7c1      	b.n	8012b4a <__kernel_rem_pio2+0x54a>
 8012bc6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012bca:	f7ed fb77 	bl	80002bc <__adddf3>
 8012bce:	3401      	adds	r4, #1
 8012bd0:	e7c6      	b.n	8012b60 <__kernel_rem_pio2+0x560>
 8012bd2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012bd6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012bda:	4640      	mov	r0, r8
 8012bdc:	ec53 2b17 	vmov	r2, r3, d7
 8012be0:	4649      	mov	r1, r9
 8012be2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012be6:	f7ed fb69 	bl	80002bc <__adddf3>
 8012bea:	4602      	mov	r2, r0
 8012bec:	460b      	mov	r3, r1
 8012bee:	4606      	mov	r6, r0
 8012bf0:	460f      	mov	r7, r1
 8012bf2:	4640      	mov	r0, r8
 8012bf4:	4649      	mov	r1, r9
 8012bf6:	f7ed fb5f 	bl	80002b8 <__aeabi_dsub>
 8012bfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bfe:	f7ed fb5d 	bl	80002bc <__adddf3>
 8012c02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c06:	e9ca 0100 	strd	r0, r1, [sl]
 8012c0a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012c0e:	e770      	b.n	8012af2 <__kernel_rem_pio2+0x4f2>
 8012c10:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012c14:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012c18:	4630      	mov	r0, r6
 8012c1a:	ec53 2b17 	vmov	r2, r3, d7
 8012c1e:	4639      	mov	r1, r7
 8012c20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012c24:	f7ed fb4a 	bl	80002bc <__adddf3>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	460b      	mov	r3, r1
 8012c2c:	4680      	mov	r8, r0
 8012c2e:	4689      	mov	r9, r1
 8012c30:	4630      	mov	r0, r6
 8012c32:	4639      	mov	r1, r7
 8012c34:	f7ed fb40 	bl	80002b8 <__aeabi_dsub>
 8012c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c3c:	f7ed fb3e 	bl	80002bc <__adddf3>
 8012c40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c44:	e9ca 0100 	strd	r0, r1, [sl]
 8012c48:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012c4c:	e756      	b.n	8012afc <__kernel_rem_pio2+0x4fc>
 8012c4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012c52:	f7ed fb33 	bl	80002bc <__adddf3>
 8012c56:	3d01      	subs	r5, #1
 8012c58:	e756      	b.n	8012b08 <__kernel_rem_pio2+0x508>
 8012c5a:	9b01      	ldr	r3, [sp, #4]
 8012c5c:	9a01      	ldr	r2, [sp, #4]
 8012c5e:	601f      	str	r7, [r3, #0]
 8012c60:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012c64:	605c      	str	r4, [r3, #4]
 8012c66:	609d      	str	r5, [r3, #8]
 8012c68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c6c:	60d3      	str	r3, [r2, #12]
 8012c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c72:	6110      	str	r0, [r2, #16]
 8012c74:	6153      	str	r3, [r2, #20]
 8012c76:	e78e      	b.n	8012b96 <__kernel_rem_pio2+0x596>
 8012c78:	41700000 	.word	0x41700000
 8012c7c:	3e700000 	.word	0x3e700000

08012c80 <__kernel_sin>:
 8012c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c84:	ec55 4b10 	vmov	r4, r5, d0
 8012c88:	b085      	sub	sp, #20
 8012c8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c92:	ed8d 1b00 	vstr	d1, [sp]
 8012c96:	9002      	str	r0, [sp, #8]
 8012c98:	da06      	bge.n	8012ca8 <__kernel_sin+0x28>
 8012c9a:	ee10 0a10 	vmov	r0, s0
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	f7ed ff72 	bl	8000b88 <__aeabi_d2iz>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d051      	beq.n	8012d4c <__kernel_sin+0xcc>
 8012ca8:	4622      	mov	r2, r4
 8012caa:	462b      	mov	r3, r5
 8012cac:	4620      	mov	r0, r4
 8012cae:	4629      	mov	r1, r5
 8012cb0:	f7ed fcba 	bl	8000628 <__aeabi_dmul>
 8012cb4:	4682      	mov	sl, r0
 8012cb6:	468b      	mov	fp, r1
 8012cb8:	4602      	mov	r2, r0
 8012cba:	460b      	mov	r3, r1
 8012cbc:	4620      	mov	r0, r4
 8012cbe:	4629      	mov	r1, r5
 8012cc0:	f7ed fcb2 	bl	8000628 <__aeabi_dmul>
 8012cc4:	a341      	add	r3, pc, #260	; (adr r3, 8012dcc <__kernel_sin+0x14c>)
 8012cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cca:	4680      	mov	r8, r0
 8012ccc:	4689      	mov	r9, r1
 8012cce:	4650      	mov	r0, sl
 8012cd0:	4659      	mov	r1, fp
 8012cd2:	f7ed fca9 	bl	8000628 <__aeabi_dmul>
 8012cd6:	a33f      	add	r3, pc, #252	; (adr r3, 8012dd4 <__kernel_sin+0x154>)
 8012cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cdc:	f7ed faec 	bl	80002b8 <__aeabi_dsub>
 8012ce0:	4652      	mov	r2, sl
 8012ce2:	465b      	mov	r3, fp
 8012ce4:	f7ed fca0 	bl	8000628 <__aeabi_dmul>
 8012ce8:	a33c      	add	r3, pc, #240	; (adr r3, 8012ddc <__kernel_sin+0x15c>)
 8012cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cee:	f7ed fae5 	bl	80002bc <__adddf3>
 8012cf2:	4652      	mov	r2, sl
 8012cf4:	465b      	mov	r3, fp
 8012cf6:	f7ed fc97 	bl	8000628 <__aeabi_dmul>
 8012cfa:	a33a      	add	r3, pc, #232	; (adr r3, 8012de4 <__kernel_sin+0x164>)
 8012cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d00:	f7ed fada 	bl	80002b8 <__aeabi_dsub>
 8012d04:	4652      	mov	r2, sl
 8012d06:	465b      	mov	r3, fp
 8012d08:	f7ed fc8e 	bl	8000628 <__aeabi_dmul>
 8012d0c:	a337      	add	r3, pc, #220	; (adr r3, 8012dec <__kernel_sin+0x16c>)
 8012d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d12:	f7ed fad3 	bl	80002bc <__adddf3>
 8012d16:	9b02      	ldr	r3, [sp, #8]
 8012d18:	4606      	mov	r6, r0
 8012d1a:	460f      	mov	r7, r1
 8012d1c:	b9db      	cbnz	r3, 8012d56 <__kernel_sin+0xd6>
 8012d1e:	4602      	mov	r2, r0
 8012d20:	460b      	mov	r3, r1
 8012d22:	4650      	mov	r0, sl
 8012d24:	4659      	mov	r1, fp
 8012d26:	f7ed fc7f 	bl	8000628 <__aeabi_dmul>
 8012d2a:	a325      	add	r3, pc, #148	; (adr r3, 8012dc0 <__kernel_sin+0x140>)
 8012d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d30:	f7ed fac2 	bl	80002b8 <__aeabi_dsub>
 8012d34:	4642      	mov	r2, r8
 8012d36:	464b      	mov	r3, r9
 8012d38:	f7ed fc76 	bl	8000628 <__aeabi_dmul>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	460b      	mov	r3, r1
 8012d40:	4620      	mov	r0, r4
 8012d42:	4629      	mov	r1, r5
 8012d44:	f7ed faba 	bl	80002bc <__adddf3>
 8012d48:	4604      	mov	r4, r0
 8012d4a:	460d      	mov	r5, r1
 8012d4c:	ec45 4b10 	vmov	d0, r4, r5
 8012d50:	b005      	add	sp, #20
 8012d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d56:	2200      	movs	r2, #0
 8012d58:	4b1b      	ldr	r3, [pc, #108]	; (8012dc8 <__kernel_sin+0x148>)
 8012d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d5e:	f7ed fc63 	bl	8000628 <__aeabi_dmul>
 8012d62:	4632      	mov	r2, r6
 8012d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d68:	463b      	mov	r3, r7
 8012d6a:	4640      	mov	r0, r8
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	f7ed fc5b 	bl	8000628 <__aeabi_dmul>
 8012d72:	4602      	mov	r2, r0
 8012d74:	460b      	mov	r3, r1
 8012d76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d7a:	f7ed fa9d 	bl	80002b8 <__aeabi_dsub>
 8012d7e:	4652      	mov	r2, sl
 8012d80:	465b      	mov	r3, fp
 8012d82:	f7ed fc51 	bl	8000628 <__aeabi_dmul>
 8012d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d8a:	f7ed fa95 	bl	80002b8 <__aeabi_dsub>
 8012d8e:	a30c      	add	r3, pc, #48	; (adr r3, 8012dc0 <__kernel_sin+0x140>)
 8012d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d94:	4606      	mov	r6, r0
 8012d96:	460f      	mov	r7, r1
 8012d98:	4640      	mov	r0, r8
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	f7ed fc44 	bl	8000628 <__aeabi_dmul>
 8012da0:	4602      	mov	r2, r0
 8012da2:	460b      	mov	r3, r1
 8012da4:	4630      	mov	r0, r6
 8012da6:	4639      	mov	r1, r7
 8012da8:	f7ed fa88 	bl	80002bc <__adddf3>
 8012dac:	4602      	mov	r2, r0
 8012dae:	460b      	mov	r3, r1
 8012db0:	4620      	mov	r0, r4
 8012db2:	4629      	mov	r1, r5
 8012db4:	f7ed fa80 	bl	80002b8 <__aeabi_dsub>
 8012db8:	e7c6      	b.n	8012d48 <__kernel_sin+0xc8>
 8012dba:	bf00      	nop
 8012dbc:	f3af 8000 	nop.w
 8012dc0:	55555549 	.word	0x55555549
 8012dc4:	3fc55555 	.word	0x3fc55555
 8012dc8:	3fe00000 	.word	0x3fe00000
 8012dcc:	5acfd57c 	.word	0x5acfd57c
 8012dd0:	3de5d93a 	.word	0x3de5d93a
 8012dd4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012dd8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012ddc:	57b1fe7d 	.word	0x57b1fe7d
 8012de0:	3ec71de3 	.word	0x3ec71de3
 8012de4:	19c161d5 	.word	0x19c161d5
 8012de8:	3f2a01a0 	.word	0x3f2a01a0
 8012dec:	1110f8a6 	.word	0x1110f8a6
 8012df0:	3f811111 	.word	0x3f811111

08012df4 <fabs>:
 8012df4:	ec51 0b10 	vmov	r0, r1, d0
 8012df8:	ee10 2a10 	vmov	r2, s0
 8012dfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e00:	ec43 2b10 	vmov	d0, r2, r3
 8012e04:	4770      	bx	lr
	...

08012e08 <floor>:
 8012e08:	ec51 0b10 	vmov	r0, r1, d0
 8012e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012e14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012e18:	2e13      	cmp	r6, #19
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	ee10 5a10 	vmov	r5, s0
 8012e20:	4680      	mov	r8, r0
 8012e22:	dc34      	bgt.n	8012e8e <floor+0x86>
 8012e24:	2e00      	cmp	r6, #0
 8012e26:	da16      	bge.n	8012e56 <floor+0x4e>
 8012e28:	a335      	add	r3, pc, #212	; (adr r3, 8012f00 <floor+0xf8>)
 8012e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2e:	f7ed fa45 	bl	80002bc <__adddf3>
 8012e32:	2200      	movs	r2, #0
 8012e34:	2300      	movs	r3, #0
 8012e36:	f7ed fe87 	bl	8000b48 <__aeabi_dcmpgt>
 8012e3a:	b148      	cbz	r0, 8012e50 <floor+0x48>
 8012e3c:	2c00      	cmp	r4, #0
 8012e3e:	da59      	bge.n	8012ef4 <floor+0xec>
 8012e40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012e44:	4a30      	ldr	r2, [pc, #192]	; (8012f08 <floor+0x100>)
 8012e46:	432b      	orrs	r3, r5
 8012e48:	2500      	movs	r5, #0
 8012e4a:	42ab      	cmp	r3, r5
 8012e4c:	bf18      	it	ne
 8012e4e:	4614      	movne	r4, r2
 8012e50:	4621      	mov	r1, r4
 8012e52:	4628      	mov	r0, r5
 8012e54:	e025      	b.n	8012ea2 <floor+0x9a>
 8012e56:	4f2d      	ldr	r7, [pc, #180]	; (8012f0c <floor+0x104>)
 8012e58:	4137      	asrs	r7, r6
 8012e5a:	ea01 0307 	and.w	r3, r1, r7
 8012e5e:	4303      	orrs	r3, r0
 8012e60:	d01f      	beq.n	8012ea2 <floor+0x9a>
 8012e62:	a327      	add	r3, pc, #156	; (adr r3, 8012f00 <floor+0xf8>)
 8012e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e68:	f7ed fa28 	bl	80002bc <__adddf3>
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	2300      	movs	r3, #0
 8012e70:	f7ed fe6a 	bl	8000b48 <__aeabi_dcmpgt>
 8012e74:	2800      	cmp	r0, #0
 8012e76:	d0eb      	beq.n	8012e50 <floor+0x48>
 8012e78:	2c00      	cmp	r4, #0
 8012e7a:	bfbe      	ittt	lt
 8012e7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012e80:	fa43 f606 	asrlt.w	r6, r3, r6
 8012e84:	19a4      	addlt	r4, r4, r6
 8012e86:	ea24 0407 	bic.w	r4, r4, r7
 8012e8a:	2500      	movs	r5, #0
 8012e8c:	e7e0      	b.n	8012e50 <floor+0x48>
 8012e8e:	2e33      	cmp	r6, #51	; 0x33
 8012e90:	dd0b      	ble.n	8012eaa <floor+0xa2>
 8012e92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012e96:	d104      	bne.n	8012ea2 <floor+0x9a>
 8012e98:	ee10 2a10 	vmov	r2, s0
 8012e9c:	460b      	mov	r3, r1
 8012e9e:	f7ed fa0d 	bl	80002bc <__adddf3>
 8012ea2:	ec41 0b10 	vmov	d0, r0, r1
 8012ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012eaa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012eae:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb2:	fa23 f707 	lsr.w	r7, r3, r7
 8012eb6:	4207      	tst	r7, r0
 8012eb8:	d0f3      	beq.n	8012ea2 <floor+0x9a>
 8012eba:	a311      	add	r3, pc, #68	; (adr r3, 8012f00 <floor+0xf8>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	f7ed f9fc 	bl	80002bc <__adddf3>
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	f7ed fe3e 	bl	8000b48 <__aeabi_dcmpgt>
 8012ecc:	2800      	cmp	r0, #0
 8012ece:	d0bf      	beq.n	8012e50 <floor+0x48>
 8012ed0:	2c00      	cmp	r4, #0
 8012ed2:	da02      	bge.n	8012eda <floor+0xd2>
 8012ed4:	2e14      	cmp	r6, #20
 8012ed6:	d103      	bne.n	8012ee0 <floor+0xd8>
 8012ed8:	3401      	adds	r4, #1
 8012eda:	ea25 0507 	bic.w	r5, r5, r7
 8012ede:	e7b7      	b.n	8012e50 <floor+0x48>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012ee6:	fa03 f606 	lsl.w	r6, r3, r6
 8012eea:	4435      	add	r5, r6
 8012eec:	4545      	cmp	r5, r8
 8012eee:	bf38      	it	cc
 8012ef0:	18e4      	addcc	r4, r4, r3
 8012ef2:	e7f2      	b.n	8012eda <floor+0xd2>
 8012ef4:	2500      	movs	r5, #0
 8012ef6:	462c      	mov	r4, r5
 8012ef8:	e7aa      	b.n	8012e50 <floor+0x48>
 8012efa:	bf00      	nop
 8012efc:	f3af 8000 	nop.w
 8012f00:	8800759c 	.word	0x8800759c
 8012f04:	7e37e43c 	.word	0x7e37e43c
 8012f08:	bff00000 	.word	0xbff00000
 8012f0c:	000fffff 	.word	0x000fffff

08012f10 <scalbn>:
 8012f10:	b570      	push	{r4, r5, r6, lr}
 8012f12:	ec55 4b10 	vmov	r4, r5, d0
 8012f16:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012f1a:	4606      	mov	r6, r0
 8012f1c:	462b      	mov	r3, r5
 8012f1e:	b9aa      	cbnz	r2, 8012f4c <scalbn+0x3c>
 8012f20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f24:	4323      	orrs	r3, r4
 8012f26:	d03b      	beq.n	8012fa0 <scalbn+0x90>
 8012f28:	4b31      	ldr	r3, [pc, #196]	; (8012ff0 <scalbn+0xe0>)
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	ee10 0a10 	vmov	r0, s0
 8012f32:	f7ed fb79 	bl	8000628 <__aeabi_dmul>
 8012f36:	4b2f      	ldr	r3, [pc, #188]	; (8012ff4 <scalbn+0xe4>)
 8012f38:	429e      	cmp	r6, r3
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	460d      	mov	r5, r1
 8012f3e:	da12      	bge.n	8012f66 <scalbn+0x56>
 8012f40:	a327      	add	r3, pc, #156	; (adr r3, 8012fe0 <scalbn+0xd0>)
 8012f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f46:	f7ed fb6f 	bl	8000628 <__aeabi_dmul>
 8012f4a:	e009      	b.n	8012f60 <scalbn+0x50>
 8012f4c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012f50:	428a      	cmp	r2, r1
 8012f52:	d10c      	bne.n	8012f6e <scalbn+0x5e>
 8012f54:	ee10 2a10 	vmov	r2, s0
 8012f58:	4620      	mov	r0, r4
 8012f5a:	4629      	mov	r1, r5
 8012f5c:	f7ed f9ae 	bl	80002bc <__adddf3>
 8012f60:	4604      	mov	r4, r0
 8012f62:	460d      	mov	r5, r1
 8012f64:	e01c      	b.n	8012fa0 <scalbn+0x90>
 8012f66:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012f6a:	460b      	mov	r3, r1
 8012f6c:	3a36      	subs	r2, #54	; 0x36
 8012f6e:	4432      	add	r2, r6
 8012f70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012f74:	428a      	cmp	r2, r1
 8012f76:	dd0b      	ble.n	8012f90 <scalbn+0x80>
 8012f78:	ec45 4b11 	vmov	d1, r4, r5
 8012f7c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012fe8 <scalbn+0xd8>
 8012f80:	f000 f83c 	bl	8012ffc <copysign>
 8012f84:	a318      	add	r3, pc, #96	; (adr r3, 8012fe8 <scalbn+0xd8>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	ec51 0b10 	vmov	r0, r1, d0
 8012f8e:	e7da      	b.n	8012f46 <scalbn+0x36>
 8012f90:	2a00      	cmp	r2, #0
 8012f92:	dd08      	ble.n	8012fa6 <scalbn+0x96>
 8012f94:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f98:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f9c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fa0:	ec45 4b10 	vmov	d0, r4, r5
 8012fa4:	bd70      	pop	{r4, r5, r6, pc}
 8012fa6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012faa:	da0d      	bge.n	8012fc8 <scalbn+0xb8>
 8012fac:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012fb0:	429e      	cmp	r6, r3
 8012fb2:	ec45 4b11 	vmov	d1, r4, r5
 8012fb6:	dce1      	bgt.n	8012f7c <scalbn+0x6c>
 8012fb8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012fe0 <scalbn+0xd0>
 8012fbc:	f000 f81e 	bl	8012ffc <copysign>
 8012fc0:	a307      	add	r3, pc, #28	; (adr r3, 8012fe0 <scalbn+0xd0>)
 8012fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc6:	e7e0      	b.n	8012f8a <scalbn+0x7a>
 8012fc8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012fcc:	3236      	adds	r2, #54	; 0x36
 8012fce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fd6:	4620      	mov	r0, r4
 8012fd8:	4629      	mov	r1, r5
 8012fda:	2200      	movs	r2, #0
 8012fdc:	4b06      	ldr	r3, [pc, #24]	; (8012ff8 <scalbn+0xe8>)
 8012fde:	e7b2      	b.n	8012f46 <scalbn+0x36>
 8012fe0:	c2f8f359 	.word	0xc2f8f359
 8012fe4:	01a56e1f 	.word	0x01a56e1f
 8012fe8:	8800759c 	.word	0x8800759c
 8012fec:	7e37e43c 	.word	0x7e37e43c
 8012ff0:	43500000 	.word	0x43500000
 8012ff4:	ffff3cb0 	.word	0xffff3cb0
 8012ff8:	3c900000 	.word	0x3c900000

08012ffc <copysign>:
 8012ffc:	ec51 0b10 	vmov	r0, r1, d0
 8013000:	ee11 0a90 	vmov	r0, s3
 8013004:	ee10 2a10 	vmov	r2, s0
 8013008:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801300c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013010:	ea41 0300 	orr.w	r3, r1, r0
 8013014:	ec43 2b10 	vmov	d0, r2, r3
 8013018:	4770      	bx	lr
	...

0801301c <__errno>:
 801301c:	4b01      	ldr	r3, [pc, #4]	; (8013024 <__errno+0x8>)
 801301e:	6818      	ldr	r0, [r3, #0]
 8013020:	4770      	bx	lr
 8013022:	bf00      	nop
 8013024:	2000000c 	.word	0x2000000c

08013028 <__libc_init_array>:
 8013028:	b570      	push	{r4, r5, r6, lr}
 801302a:	4e0d      	ldr	r6, [pc, #52]	; (8013060 <__libc_init_array+0x38>)
 801302c:	4c0d      	ldr	r4, [pc, #52]	; (8013064 <__libc_init_array+0x3c>)
 801302e:	1ba4      	subs	r4, r4, r6
 8013030:	10a4      	asrs	r4, r4, #2
 8013032:	2500      	movs	r5, #0
 8013034:	42a5      	cmp	r5, r4
 8013036:	d109      	bne.n	801304c <__libc_init_array+0x24>
 8013038:	4e0b      	ldr	r6, [pc, #44]	; (8013068 <__libc_init_array+0x40>)
 801303a:	4c0c      	ldr	r4, [pc, #48]	; (801306c <__libc_init_array+0x44>)
 801303c:	f004 ff38 	bl	8017eb0 <_init>
 8013040:	1ba4      	subs	r4, r4, r6
 8013042:	10a4      	asrs	r4, r4, #2
 8013044:	2500      	movs	r5, #0
 8013046:	42a5      	cmp	r5, r4
 8013048:	d105      	bne.n	8013056 <__libc_init_array+0x2e>
 801304a:	bd70      	pop	{r4, r5, r6, pc}
 801304c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013050:	4798      	blx	r3
 8013052:	3501      	adds	r5, #1
 8013054:	e7ee      	b.n	8013034 <__libc_init_array+0xc>
 8013056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801305a:	4798      	blx	r3
 801305c:	3501      	adds	r5, #1
 801305e:	e7f2      	b.n	8013046 <__libc_init_array+0x1e>
 8013060:	080189dc 	.word	0x080189dc
 8013064:	080189dc 	.word	0x080189dc
 8013068:	080189dc 	.word	0x080189dc
 801306c:	080189e4 	.word	0x080189e4

08013070 <memcpy>:
 8013070:	b510      	push	{r4, lr}
 8013072:	1e43      	subs	r3, r0, #1
 8013074:	440a      	add	r2, r1
 8013076:	4291      	cmp	r1, r2
 8013078:	d100      	bne.n	801307c <memcpy+0xc>
 801307a:	bd10      	pop	{r4, pc}
 801307c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013084:	e7f7      	b.n	8013076 <memcpy+0x6>

08013086 <memset>:
 8013086:	4402      	add	r2, r0
 8013088:	4603      	mov	r3, r0
 801308a:	4293      	cmp	r3, r2
 801308c:	d100      	bne.n	8013090 <memset+0xa>
 801308e:	4770      	bx	lr
 8013090:	f803 1b01 	strb.w	r1, [r3], #1
 8013094:	e7f9      	b.n	801308a <memset+0x4>

08013096 <__cvt>:
 8013096:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801309a:	ec55 4b10 	vmov	r4, r5, d0
 801309e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80130a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80130a4:	2d00      	cmp	r5, #0
 80130a6:	460e      	mov	r6, r1
 80130a8:	4691      	mov	r9, r2
 80130aa:	4619      	mov	r1, r3
 80130ac:	bfb8      	it	lt
 80130ae:	4622      	movlt	r2, r4
 80130b0:	462b      	mov	r3, r5
 80130b2:	f027 0720 	bic.w	r7, r7, #32
 80130b6:	bfbb      	ittet	lt
 80130b8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80130bc:	461d      	movlt	r5, r3
 80130be:	2300      	movge	r3, #0
 80130c0:	232d      	movlt	r3, #45	; 0x2d
 80130c2:	bfb8      	it	lt
 80130c4:	4614      	movlt	r4, r2
 80130c6:	2f46      	cmp	r7, #70	; 0x46
 80130c8:	700b      	strb	r3, [r1, #0]
 80130ca:	d004      	beq.n	80130d6 <__cvt+0x40>
 80130cc:	2f45      	cmp	r7, #69	; 0x45
 80130ce:	d100      	bne.n	80130d2 <__cvt+0x3c>
 80130d0:	3601      	adds	r6, #1
 80130d2:	2102      	movs	r1, #2
 80130d4:	e000      	b.n	80130d8 <__cvt+0x42>
 80130d6:	2103      	movs	r1, #3
 80130d8:	ab03      	add	r3, sp, #12
 80130da:	9301      	str	r3, [sp, #4]
 80130dc:	ab02      	add	r3, sp, #8
 80130de:	9300      	str	r3, [sp, #0]
 80130e0:	4632      	mov	r2, r6
 80130e2:	4653      	mov	r3, sl
 80130e4:	ec45 4b10 	vmov	d0, r4, r5
 80130e8:	f001 ffb2 	bl	8015050 <_dtoa_r>
 80130ec:	2f47      	cmp	r7, #71	; 0x47
 80130ee:	4680      	mov	r8, r0
 80130f0:	d102      	bne.n	80130f8 <__cvt+0x62>
 80130f2:	f019 0f01 	tst.w	r9, #1
 80130f6:	d026      	beq.n	8013146 <__cvt+0xb0>
 80130f8:	2f46      	cmp	r7, #70	; 0x46
 80130fa:	eb08 0906 	add.w	r9, r8, r6
 80130fe:	d111      	bne.n	8013124 <__cvt+0x8e>
 8013100:	f898 3000 	ldrb.w	r3, [r8]
 8013104:	2b30      	cmp	r3, #48	; 0x30
 8013106:	d10a      	bne.n	801311e <__cvt+0x88>
 8013108:	2200      	movs	r2, #0
 801310a:	2300      	movs	r3, #0
 801310c:	4620      	mov	r0, r4
 801310e:	4629      	mov	r1, r5
 8013110:	f7ed fcf2 	bl	8000af8 <__aeabi_dcmpeq>
 8013114:	b918      	cbnz	r0, 801311e <__cvt+0x88>
 8013116:	f1c6 0601 	rsb	r6, r6, #1
 801311a:	f8ca 6000 	str.w	r6, [sl]
 801311e:	f8da 3000 	ldr.w	r3, [sl]
 8013122:	4499      	add	r9, r3
 8013124:	2200      	movs	r2, #0
 8013126:	2300      	movs	r3, #0
 8013128:	4620      	mov	r0, r4
 801312a:	4629      	mov	r1, r5
 801312c:	f7ed fce4 	bl	8000af8 <__aeabi_dcmpeq>
 8013130:	b938      	cbnz	r0, 8013142 <__cvt+0xac>
 8013132:	2230      	movs	r2, #48	; 0x30
 8013134:	9b03      	ldr	r3, [sp, #12]
 8013136:	454b      	cmp	r3, r9
 8013138:	d205      	bcs.n	8013146 <__cvt+0xb0>
 801313a:	1c59      	adds	r1, r3, #1
 801313c:	9103      	str	r1, [sp, #12]
 801313e:	701a      	strb	r2, [r3, #0]
 8013140:	e7f8      	b.n	8013134 <__cvt+0x9e>
 8013142:	f8cd 900c 	str.w	r9, [sp, #12]
 8013146:	9b03      	ldr	r3, [sp, #12]
 8013148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801314a:	eba3 0308 	sub.w	r3, r3, r8
 801314e:	4640      	mov	r0, r8
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	b004      	add	sp, #16
 8013154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013158 <__exponent>:
 8013158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801315a:	2900      	cmp	r1, #0
 801315c:	4604      	mov	r4, r0
 801315e:	bfba      	itte	lt
 8013160:	4249      	neglt	r1, r1
 8013162:	232d      	movlt	r3, #45	; 0x2d
 8013164:	232b      	movge	r3, #43	; 0x2b
 8013166:	2909      	cmp	r1, #9
 8013168:	f804 2b02 	strb.w	r2, [r4], #2
 801316c:	7043      	strb	r3, [r0, #1]
 801316e:	dd20      	ble.n	80131b2 <__exponent+0x5a>
 8013170:	f10d 0307 	add.w	r3, sp, #7
 8013174:	461f      	mov	r7, r3
 8013176:	260a      	movs	r6, #10
 8013178:	fb91 f5f6 	sdiv	r5, r1, r6
 801317c:	fb06 1115 	mls	r1, r6, r5, r1
 8013180:	3130      	adds	r1, #48	; 0x30
 8013182:	2d09      	cmp	r5, #9
 8013184:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013188:	f103 32ff 	add.w	r2, r3, #4294967295
 801318c:	4629      	mov	r1, r5
 801318e:	dc09      	bgt.n	80131a4 <__exponent+0x4c>
 8013190:	3130      	adds	r1, #48	; 0x30
 8013192:	3b02      	subs	r3, #2
 8013194:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013198:	42bb      	cmp	r3, r7
 801319a:	4622      	mov	r2, r4
 801319c:	d304      	bcc.n	80131a8 <__exponent+0x50>
 801319e:	1a10      	subs	r0, r2, r0
 80131a0:	b003      	add	sp, #12
 80131a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131a4:	4613      	mov	r3, r2
 80131a6:	e7e7      	b.n	8013178 <__exponent+0x20>
 80131a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131ac:	f804 2b01 	strb.w	r2, [r4], #1
 80131b0:	e7f2      	b.n	8013198 <__exponent+0x40>
 80131b2:	2330      	movs	r3, #48	; 0x30
 80131b4:	4419      	add	r1, r3
 80131b6:	7083      	strb	r3, [r0, #2]
 80131b8:	1d02      	adds	r2, r0, #4
 80131ba:	70c1      	strb	r1, [r0, #3]
 80131bc:	e7ef      	b.n	801319e <__exponent+0x46>
	...

080131c0 <_printf_float>:
 80131c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	b08d      	sub	sp, #52	; 0x34
 80131c6:	460c      	mov	r4, r1
 80131c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80131cc:	4616      	mov	r6, r2
 80131ce:	461f      	mov	r7, r3
 80131d0:	4605      	mov	r5, r0
 80131d2:	f003 f9a9 	bl	8016528 <_localeconv_r>
 80131d6:	6803      	ldr	r3, [r0, #0]
 80131d8:	9304      	str	r3, [sp, #16]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7ed f810 	bl	8000200 <strlen>
 80131e0:	2300      	movs	r3, #0
 80131e2:	930a      	str	r3, [sp, #40]	; 0x28
 80131e4:	f8d8 3000 	ldr.w	r3, [r8]
 80131e8:	9005      	str	r0, [sp, #20]
 80131ea:	3307      	adds	r3, #7
 80131ec:	f023 0307 	bic.w	r3, r3, #7
 80131f0:	f103 0208 	add.w	r2, r3, #8
 80131f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80131f8:	f8d4 b000 	ldr.w	fp, [r4]
 80131fc:	f8c8 2000 	str.w	r2, [r8]
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013208:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801320c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013210:	9307      	str	r3, [sp, #28]
 8013212:	f8cd 8018 	str.w	r8, [sp, #24]
 8013216:	f04f 32ff 	mov.w	r2, #4294967295
 801321a:	4ba7      	ldr	r3, [pc, #668]	; (80134b8 <_printf_float+0x2f8>)
 801321c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013220:	f7ed fc9c 	bl	8000b5c <__aeabi_dcmpun>
 8013224:	bb70      	cbnz	r0, 8013284 <_printf_float+0xc4>
 8013226:	f04f 32ff 	mov.w	r2, #4294967295
 801322a:	4ba3      	ldr	r3, [pc, #652]	; (80134b8 <_printf_float+0x2f8>)
 801322c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013230:	f7ed fc76 	bl	8000b20 <__aeabi_dcmple>
 8013234:	bb30      	cbnz	r0, 8013284 <_printf_float+0xc4>
 8013236:	2200      	movs	r2, #0
 8013238:	2300      	movs	r3, #0
 801323a:	4640      	mov	r0, r8
 801323c:	4649      	mov	r1, r9
 801323e:	f7ed fc65 	bl	8000b0c <__aeabi_dcmplt>
 8013242:	b110      	cbz	r0, 801324a <_printf_float+0x8a>
 8013244:	232d      	movs	r3, #45	; 0x2d
 8013246:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801324a:	4a9c      	ldr	r2, [pc, #624]	; (80134bc <_printf_float+0x2fc>)
 801324c:	4b9c      	ldr	r3, [pc, #624]	; (80134c0 <_printf_float+0x300>)
 801324e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013252:	bf8c      	ite	hi
 8013254:	4690      	movhi	r8, r2
 8013256:	4698      	movls	r8, r3
 8013258:	2303      	movs	r3, #3
 801325a:	f02b 0204 	bic.w	r2, fp, #4
 801325e:	6123      	str	r3, [r4, #16]
 8013260:	6022      	str	r2, [r4, #0]
 8013262:	f04f 0900 	mov.w	r9, #0
 8013266:	9700      	str	r7, [sp, #0]
 8013268:	4633      	mov	r3, r6
 801326a:	aa0b      	add	r2, sp, #44	; 0x2c
 801326c:	4621      	mov	r1, r4
 801326e:	4628      	mov	r0, r5
 8013270:	f000 f9e6 	bl	8013640 <_printf_common>
 8013274:	3001      	adds	r0, #1
 8013276:	f040 808d 	bne.w	8013394 <_printf_float+0x1d4>
 801327a:	f04f 30ff 	mov.w	r0, #4294967295
 801327e:	b00d      	add	sp, #52	; 0x34
 8013280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013284:	4642      	mov	r2, r8
 8013286:	464b      	mov	r3, r9
 8013288:	4640      	mov	r0, r8
 801328a:	4649      	mov	r1, r9
 801328c:	f7ed fc66 	bl	8000b5c <__aeabi_dcmpun>
 8013290:	b110      	cbz	r0, 8013298 <_printf_float+0xd8>
 8013292:	4a8c      	ldr	r2, [pc, #560]	; (80134c4 <_printf_float+0x304>)
 8013294:	4b8c      	ldr	r3, [pc, #560]	; (80134c8 <_printf_float+0x308>)
 8013296:	e7da      	b.n	801324e <_printf_float+0x8e>
 8013298:	6861      	ldr	r1, [r4, #4]
 801329a:	1c4b      	adds	r3, r1, #1
 801329c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80132a0:	a80a      	add	r0, sp, #40	; 0x28
 80132a2:	d13e      	bne.n	8013322 <_printf_float+0x162>
 80132a4:	2306      	movs	r3, #6
 80132a6:	6063      	str	r3, [r4, #4]
 80132a8:	2300      	movs	r3, #0
 80132aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80132ae:	ab09      	add	r3, sp, #36	; 0x24
 80132b0:	9300      	str	r3, [sp, #0]
 80132b2:	ec49 8b10 	vmov	d0, r8, r9
 80132b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80132ba:	6022      	str	r2, [r4, #0]
 80132bc:	f8cd a004 	str.w	sl, [sp, #4]
 80132c0:	6861      	ldr	r1, [r4, #4]
 80132c2:	4628      	mov	r0, r5
 80132c4:	f7ff fee7 	bl	8013096 <__cvt>
 80132c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80132cc:	2b47      	cmp	r3, #71	; 0x47
 80132ce:	4680      	mov	r8, r0
 80132d0:	d109      	bne.n	80132e6 <_printf_float+0x126>
 80132d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132d4:	1cd8      	adds	r0, r3, #3
 80132d6:	db02      	blt.n	80132de <_printf_float+0x11e>
 80132d8:	6862      	ldr	r2, [r4, #4]
 80132da:	4293      	cmp	r3, r2
 80132dc:	dd47      	ble.n	801336e <_printf_float+0x1ae>
 80132de:	f1aa 0a02 	sub.w	sl, sl, #2
 80132e2:	fa5f fa8a 	uxtb.w	sl, sl
 80132e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80132ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80132ec:	d824      	bhi.n	8013338 <_printf_float+0x178>
 80132ee:	3901      	subs	r1, #1
 80132f0:	4652      	mov	r2, sl
 80132f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80132f6:	9109      	str	r1, [sp, #36]	; 0x24
 80132f8:	f7ff ff2e 	bl	8013158 <__exponent>
 80132fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132fe:	1813      	adds	r3, r2, r0
 8013300:	2a01      	cmp	r2, #1
 8013302:	4681      	mov	r9, r0
 8013304:	6123      	str	r3, [r4, #16]
 8013306:	dc02      	bgt.n	801330e <_printf_float+0x14e>
 8013308:	6822      	ldr	r2, [r4, #0]
 801330a:	07d1      	lsls	r1, r2, #31
 801330c:	d501      	bpl.n	8013312 <_printf_float+0x152>
 801330e:	3301      	adds	r3, #1
 8013310:	6123      	str	r3, [r4, #16]
 8013312:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013316:	2b00      	cmp	r3, #0
 8013318:	d0a5      	beq.n	8013266 <_printf_float+0xa6>
 801331a:	232d      	movs	r3, #45	; 0x2d
 801331c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013320:	e7a1      	b.n	8013266 <_printf_float+0xa6>
 8013322:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013326:	f000 8177 	beq.w	8013618 <_printf_float+0x458>
 801332a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801332e:	d1bb      	bne.n	80132a8 <_printf_float+0xe8>
 8013330:	2900      	cmp	r1, #0
 8013332:	d1b9      	bne.n	80132a8 <_printf_float+0xe8>
 8013334:	2301      	movs	r3, #1
 8013336:	e7b6      	b.n	80132a6 <_printf_float+0xe6>
 8013338:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801333c:	d119      	bne.n	8013372 <_printf_float+0x1b2>
 801333e:	2900      	cmp	r1, #0
 8013340:	6863      	ldr	r3, [r4, #4]
 8013342:	dd0c      	ble.n	801335e <_printf_float+0x19e>
 8013344:	6121      	str	r1, [r4, #16]
 8013346:	b913      	cbnz	r3, 801334e <_printf_float+0x18e>
 8013348:	6822      	ldr	r2, [r4, #0]
 801334a:	07d2      	lsls	r2, r2, #31
 801334c:	d502      	bpl.n	8013354 <_printf_float+0x194>
 801334e:	3301      	adds	r3, #1
 8013350:	440b      	add	r3, r1
 8013352:	6123      	str	r3, [r4, #16]
 8013354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013356:	65a3      	str	r3, [r4, #88]	; 0x58
 8013358:	f04f 0900 	mov.w	r9, #0
 801335c:	e7d9      	b.n	8013312 <_printf_float+0x152>
 801335e:	b913      	cbnz	r3, 8013366 <_printf_float+0x1a6>
 8013360:	6822      	ldr	r2, [r4, #0]
 8013362:	07d0      	lsls	r0, r2, #31
 8013364:	d501      	bpl.n	801336a <_printf_float+0x1aa>
 8013366:	3302      	adds	r3, #2
 8013368:	e7f3      	b.n	8013352 <_printf_float+0x192>
 801336a:	2301      	movs	r3, #1
 801336c:	e7f1      	b.n	8013352 <_printf_float+0x192>
 801336e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013372:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013376:	4293      	cmp	r3, r2
 8013378:	db05      	blt.n	8013386 <_printf_float+0x1c6>
 801337a:	6822      	ldr	r2, [r4, #0]
 801337c:	6123      	str	r3, [r4, #16]
 801337e:	07d1      	lsls	r1, r2, #31
 8013380:	d5e8      	bpl.n	8013354 <_printf_float+0x194>
 8013382:	3301      	adds	r3, #1
 8013384:	e7e5      	b.n	8013352 <_printf_float+0x192>
 8013386:	2b00      	cmp	r3, #0
 8013388:	bfd4      	ite	le
 801338a:	f1c3 0302 	rsble	r3, r3, #2
 801338e:	2301      	movgt	r3, #1
 8013390:	4413      	add	r3, r2
 8013392:	e7de      	b.n	8013352 <_printf_float+0x192>
 8013394:	6823      	ldr	r3, [r4, #0]
 8013396:	055a      	lsls	r2, r3, #21
 8013398:	d407      	bmi.n	80133aa <_printf_float+0x1ea>
 801339a:	6923      	ldr	r3, [r4, #16]
 801339c:	4642      	mov	r2, r8
 801339e:	4631      	mov	r1, r6
 80133a0:	4628      	mov	r0, r5
 80133a2:	47b8      	blx	r7
 80133a4:	3001      	adds	r0, #1
 80133a6:	d12b      	bne.n	8013400 <_printf_float+0x240>
 80133a8:	e767      	b.n	801327a <_printf_float+0xba>
 80133aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80133ae:	f240 80dc 	bls.w	801356a <_printf_float+0x3aa>
 80133b2:	2200      	movs	r2, #0
 80133b4:	2300      	movs	r3, #0
 80133b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80133ba:	f7ed fb9d 	bl	8000af8 <__aeabi_dcmpeq>
 80133be:	2800      	cmp	r0, #0
 80133c0:	d033      	beq.n	801342a <_printf_float+0x26a>
 80133c2:	2301      	movs	r3, #1
 80133c4:	4a41      	ldr	r2, [pc, #260]	; (80134cc <_printf_float+0x30c>)
 80133c6:	4631      	mov	r1, r6
 80133c8:	4628      	mov	r0, r5
 80133ca:	47b8      	blx	r7
 80133cc:	3001      	adds	r0, #1
 80133ce:	f43f af54 	beq.w	801327a <_printf_float+0xba>
 80133d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80133d6:	429a      	cmp	r2, r3
 80133d8:	db02      	blt.n	80133e0 <_printf_float+0x220>
 80133da:	6823      	ldr	r3, [r4, #0]
 80133dc:	07d8      	lsls	r0, r3, #31
 80133de:	d50f      	bpl.n	8013400 <_printf_float+0x240>
 80133e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80133e4:	4631      	mov	r1, r6
 80133e6:	4628      	mov	r0, r5
 80133e8:	47b8      	blx	r7
 80133ea:	3001      	adds	r0, #1
 80133ec:	f43f af45 	beq.w	801327a <_printf_float+0xba>
 80133f0:	f04f 0800 	mov.w	r8, #0
 80133f4:	f104 091a 	add.w	r9, r4, #26
 80133f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133fa:	3b01      	subs	r3, #1
 80133fc:	4543      	cmp	r3, r8
 80133fe:	dc09      	bgt.n	8013414 <_printf_float+0x254>
 8013400:	6823      	ldr	r3, [r4, #0]
 8013402:	079b      	lsls	r3, r3, #30
 8013404:	f100 8103 	bmi.w	801360e <_printf_float+0x44e>
 8013408:	68e0      	ldr	r0, [r4, #12]
 801340a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801340c:	4298      	cmp	r0, r3
 801340e:	bfb8      	it	lt
 8013410:	4618      	movlt	r0, r3
 8013412:	e734      	b.n	801327e <_printf_float+0xbe>
 8013414:	2301      	movs	r3, #1
 8013416:	464a      	mov	r2, r9
 8013418:	4631      	mov	r1, r6
 801341a:	4628      	mov	r0, r5
 801341c:	47b8      	blx	r7
 801341e:	3001      	adds	r0, #1
 8013420:	f43f af2b 	beq.w	801327a <_printf_float+0xba>
 8013424:	f108 0801 	add.w	r8, r8, #1
 8013428:	e7e6      	b.n	80133f8 <_printf_float+0x238>
 801342a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801342c:	2b00      	cmp	r3, #0
 801342e:	dc2b      	bgt.n	8013488 <_printf_float+0x2c8>
 8013430:	2301      	movs	r3, #1
 8013432:	4a26      	ldr	r2, [pc, #152]	; (80134cc <_printf_float+0x30c>)
 8013434:	4631      	mov	r1, r6
 8013436:	4628      	mov	r0, r5
 8013438:	47b8      	blx	r7
 801343a:	3001      	adds	r0, #1
 801343c:	f43f af1d 	beq.w	801327a <_printf_float+0xba>
 8013440:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013442:	b923      	cbnz	r3, 801344e <_printf_float+0x28e>
 8013444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013446:	b913      	cbnz	r3, 801344e <_printf_float+0x28e>
 8013448:	6823      	ldr	r3, [r4, #0]
 801344a:	07d9      	lsls	r1, r3, #31
 801344c:	d5d8      	bpl.n	8013400 <_printf_float+0x240>
 801344e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013452:	4631      	mov	r1, r6
 8013454:	4628      	mov	r0, r5
 8013456:	47b8      	blx	r7
 8013458:	3001      	adds	r0, #1
 801345a:	f43f af0e 	beq.w	801327a <_printf_float+0xba>
 801345e:	f04f 0900 	mov.w	r9, #0
 8013462:	f104 0a1a 	add.w	sl, r4, #26
 8013466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013468:	425b      	negs	r3, r3
 801346a:	454b      	cmp	r3, r9
 801346c:	dc01      	bgt.n	8013472 <_printf_float+0x2b2>
 801346e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013470:	e794      	b.n	801339c <_printf_float+0x1dc>
 8013472:	2301      	movs	r3, #1
 8013474:	4652      	mov	r2, sl
 8013476:	4631      	mov	r1, r6
 8013478:	4628      	mov	r0, r5
 801347a:	47b8      	blx	r7
 801347c:	3001      	adds	r0, #1
 801347e:	f43f aefc 	beq.w	801327a <_printf_float+0xba>
 8013482:	f109 0901 	add.w	r9, r9, #1
 8013486:	e7ee      	b.n	8013466 <_printf_float+0x2a6>
 8013488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801348a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801348c:	429a      	cmp	r2, r3
 801348e:	bfa8      	it	ge
 8013490:	461a      	movge	r2, r3
 8013492:	2a00      	cmp	r2, #0
 8013494:	4691      	mov	r9, r2
 8013496:	dd07      	ble.n	80134a8 <_printf_float+0x2e8>
 8013498:	4613      	mov	r3, r2
 801349a:	4631      	mov	r1, r6
 801349c:	4642      	mov	r2, r8
 801349e:	4628      	mov	r0, r5
 80134a0:	47b8      	blx	r7
 80134a2:	3001      	adds	r0, #1
 80134a4:	f43f aee9 	beq.w	801327a <_printf_float+0xba>
 80134a8:	f104 031a 	add.w	r3, r4, #26
 80134ac:	f04f 0b00 	mov.w	fp, #0
 80134b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80134b4:	9306      	str	r3, [sp, #24]
 80134b6:	e015      	b.n	80134e4 <_printf_float+0x324>
 80134b8:	7fefffff 	.word	0x7fefffff
 80134bc:	080186a0 	.word	0x080186a0
 80134c0:	0801869c 	.word	0x0801869c
 80134c4:	080186a8 	.word	0x080186a8
 80134c8:	080186a4 	.word	0x080186a4
 80134cc:	080188cb 	.word	0x080188cb
 80134d0:	2301      	movs	r3, #1
 80134d2:	9a06      	ldr	r2, [sp, #24]
 80134d4:	4631      	mov	r1, r6
 80134d6:	4628      	mov	r0, r5
 80134d8:	47b8      	blx	r7
 80134da:	3001      	adds	r0, #1
 80134dc:	f43f aecd 	beq.w	801327a <_printf_float+0xba>
 80134e0:	f10b 0b01 	add.w	fp, fp, #1
 80134e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80134e8:	ebaa 0309 	sub.w	r3, sl, r9
 80134ec:	455b      	cmp	r3, fp
 80134ee:	dcef      	bgt.n	80134d0 <_printf_float+0x310>
 80134f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134f4:	429a      	cmp	r2, r3
 80134f6:	44d0      	add	r8, sl
 80134f8:	db15      	blt.n	8013526 <_printf_float+0x366>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	07da      	lsls	r2, r3, #31
 80134fe:	d412      	bmi.n	8013526 <_printf_float+0x366>
 8013500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013502:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013504:	eba3 020a 	sub.w	r2, r3, sl
 8013508:	eba3 0a01 	sub.w	sl, r3, r1
 801350c:	4592      	cmp	sl, r2
 801350e:	bfa8      	it	ge
 8013510:	4692      	movge	sl, r2
 8013512:	f1ba 0f00 	cmp.w	sl, #0
 8013516:	dc0e      	bgt.n	8013536 <_printf_float+0x376>
 8013518:	f04f 0800 	mov.w	r8, #0
 801351c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013520:	f104 091a 	add.w	r9, r4, #26
 8013524:	e019      	b.n	801355a <_printf_float+0x39a>
 8013526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801352a:	4631      	mov	r1, r6
 801352c:	4628      	mov	r0, r5
 801352e:	47b8      	blx	r7
 8013530:	3001      	adds	r0, #1
 8013532:	d1e5      	bne.n	8013500 <_printf_float+0x340>
 8013534:	e6a1      	b.n	801327a <_printf_float+0xba>
 8013536:	4653      	mov	r3, sl
 8013538:	4642      	mov	r2, r8
 801353a:	4631      	mov	r1, r6
 801353c:	4628      	mov	r0, r5
 801353e:	47b8      	blx	r7
 8013540:	3001      	adds	r0, #1
 8013542:	d1e9      	bne.n	8013518 <_printf_float+0x358>
 8013544:	e699      	b.n	801327a <_printf_float+0xba>
 8013546:	2301      	movs	r3, #1
 8013548:	464a      	mov	r2, r9
 801354a:	4631      	mov	r1, r6
 801354c:	4628      	mov	r0, r5
 801354e:	47b8      	blx	r7
 8013550:	3001      	adds	r0, #1
 8013552:	f43f ae92 	beq.w	801327a <_printf_float+0xba>
 8013556:	f108 0801 	add.w	r8, r8, #1
 801355a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801355e:	1a9b      	subs	r3, r3, r2
 8013560:	eba3 030a 	sub.w	r3, r3, sl
 8013564:	4543      	cmp	r3, r8
 8013566:	dcee      	bgt.n	8013546 <_printf_float+0x386>
 8013568:	e74a      	b.n	8013400 <_printf_float+0x240>
 801356a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801356c:	2a01      	cmp	r2, #1
 801356e:	dc01      	bgt.n	8013574 <_printf_float+0x3b4>
 8013570:	07db      	lsls	r3, r3, #31
 8013572:	d53a      	bpl.n	80135ea <_printf_float+0x42a>
 8013574:	2301      	movs	r3, #1
 8013576:	4642      	mov	r2, r8
 8013578:	4631      	mov	r1, r6
 801357a:	4628      	mov	r0, r5
 801357c:	47b8      	blx	r7
 801357e:	3001      	adds	r0, #1
 8013580:	f43f ae7b 	beq.w	801327a <_printf_float+0xba>
 8013584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013588:	4631      	mov	r1, r6
 801358a:	4628      	mov	r0, r5
 801358c:	47b8      	blx	r7
 801358e:	3001      	adds	r0, #1
 8013590:	f108 0801 	add.w	r8, r8, #1
 8013594:	f43f ae71 	beq.w	801327a <_printf_float+0xba>
 8013598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801359a:	2200      	movs	r2, #0
 801359c:	f103 3aff 	add.w	sl, r3, #4294967295
 80135a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80135a4:	2300      	movs	r3, #0
 80135a6:	f7ed faa7 	bl	8000af8 <__aeabi_dcmpeq>
 80135aa:	b9c8      	cbnz	r0, 80135e0 <_printf_float+0x420>
 80135ac:	4653      	mov	r3, sl
 80135ae:	4642      	mov	r2, r8
 80135b0:	4631      	mov	r1, r6
 80135b2:	4628      	mov	r0, r5
 80135b4:	47b8      	blx	r7
 80135b6:	3001      	adds	r0, #1
 80135b8:	d10e      	bne.n	80135d8 <_printf_float+0x418>
 80135ba:	e65e      	b.n	801327a <_printf_float+0xba>
 80135bc:	2301      	movs	r3, #1
 80135be:	4652      	mov	r2, sl
 80135c0:	4631      	mov	r1, r6
 80135c2:	4628      	mov	r0, r5
 80135c4:	47b8      	blx	r7
 80135c6:	3001      	adds	r0, #1
 80135c8:	f43f ae57 	beq.w	801327a <_printf_float+0xba>
 80135cc:	f108 0801 	add.w	r8, r8, #1
 80135d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80135d2:	3b01      	subs	r3, #1
 80135d4:	4543      	cmp	r3, r8
 80135d6:	dcf1      	bgt.n	80135bc <_printf_float+0x3fc>
 80135d8:	464b      	mov	r3, r9
 80135da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80135de:	e6de      	b.n	801339e <_printf_float+0x1de>
 80135e0:	f04f 0800 	mov.w	r8, #0
 80135e4:	f104 0a1a 	add.w	sl, r4, #26
 80135e8:	e7f2      	b.n	80135d0 <_printf_float+0x410>
 80135ea:	2301      	movs	r3, #1
 80135ec:	e7df      	b.n	80135ae <_printf_float+0x3ee>
 80135ee:	2301      	movs	r3, #1
 80135f0:	464a      	mov	r2, r9
 80135f2:	4631      	mov	r1, r6
 80135f4:	4628      	mov	r0, r5
 80135f6:	47b8      	blx	r7
 80135f8:	3001      	adds	r0, #1
 80135fa:	f43f ae3e 	beq.w	801327a <_printf_float+0xba>
 80135fe:	f108 0801 	add.w	r8, r8, #1
 8013602:	68e3      	ldr	r3, [r4, #12]
 8013604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013606:	1a9b      	subs	r3, r3, r2
 8013608:	4543      	cmp	r3, r8
 801360a:	dcf0      	bgt.n	80135ee <_printf_float+0x42e>
 801360c:	e6fc      	b.n	8013408 <_printf_float+0x248>
 801360e:	f04f 0800 	mov.w	r8, #0
 8013612:	f104 0919 	add.w	r9, r4, #25
 8013616:	e7f4      	b.n	8013602 <_printf_float+0x442>
 8013618:	2900      	cmp	r1, #0
 801361a:	f43f ae8b 	beq.w	8013334 <_printf_float+0x174>
 801361e:	2300      	movs	r3, #0
 8013620:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013624:	ab09      	add	r3, sp, #36	; 0x24
 8013626:	9300      	str	r3, [sp, #0]
 8013628:	ec49 8b10 	vmov	d0, r8, r9
 801362c:	6022      	str	r2, [r4, #0]
 801362e:	f8cd a004 	str.w	sl, [sp, #4]
 8013632:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013636:	4628      	mov	r0, r5
 8013638:	f7ff fd2d 	bl	8013096 <__cvt>
 801363c:	4680      	mov	r8, r0
 801363e:	e648      	b.n	80132d2 <_printf_float+0x112>

08013640 <_printf_common>:
 8013640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013644:	4691      	mov	r9, r2
 8013646:	461f      	mov	r7, r3
 8013648:	688a      	ldr	r2, [r1, #8]
 801364a:	690b      	ldr	r3, [r1, #16]
 801364c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013650:	4293      	cmp	r3, r2
 8013652:	bfb8      	it	lt
 8013654:	4613      	movlt	r3, r2
 8013656:	f8c9 3000 	str.w	r3, [r9]
 801365a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801365e:	4606      	mov	r6, r0
 8013660:	460c      	mov	r4, r1
 8013662:	b112      	cbz	r2, 801366a <_printf_common+0x2a>
 8013664:	3301      	adds	r3, #1
 8013666:	f8c9 3000 	str.w	r3, [r9]
 801366a:	6823      	ldr	r3, [r4, #0]
 801366c:	0699      	lsls	r1, r3, #26
 801366e:	bf42      	ittt	mi
 8013670:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013674:	3302      	addmi	r3, #2
 8013676:	f8c9 3000 	strmi.w	r3, [r9]
 801367a:	6825      	ldr	r5, [r4, #0]
 801367c:	f015 0506 	ands.w	r5, r5, #6
 8013680:	d107      	bne.n	8013692 <_printf_common+0x52>
 8013682:	f104 0a19 	add.w	sl, r4, #25
 8013686:	68e3      	ldr	r3, [r4, #12]
 8013688:	f8d9 2000 	ldr.w	r2, [r9]
 801368c:	1a9b      	subs	r3, r3, r2
 801368e:	42ab      	cmp	r3, r5
 8013690:	dc28      	bgt.n	80136e4 <_printf_common+0xa4>
 8013692:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013696:	6822      	ldr	r2, [r4, #0]
 8013698:	3300      	adds	r3, #0
 801369a:	bf18      	it	ne
 801369c:	2301      	movne	r3, #1
 801369e:	0692      	lsls	r2, r2, #26
 80136a0:	d42d      	bmi.n	80136fe <_printf_common+0xbe>
 80136a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80136a6:	4639      	mov	r1, r7
 80136a8:	4630      	mov	r0, r6
 80136aa:	47c0      	blx	r8
 80136ac:	3001      	adds	r0, #1
 80136ae:	d020      	beq.n	80136f2 <_printf_common+0xb2>
 80136b0:	6823      	ldr	r3, [r4, #0]
 80136b2:	68e5      	ldr	r5, [r4, #12]
 80136b4:	f8d9 2000 	ldr.w	r2, [r9]
 80136b8:	f003 0306 	and.w	r3, r3, #6
 80136bc:	2b04      	cmp	r3, #4
 80136be:	bf08      	it	eq
 80136c0:	1aad      	subeq	r5, r5, r2
 80136c2:	68a3      	ldr	r3, [r4, #8]
 80136c4:	6922      	ldr	r2, [r4, #16]
 80136c6:	bf0c      	ite	eq
 80136c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136cc:	2500      	movne	r5, #0
 80136ce:	4293      	cmp	r3, r2
 80136d0:	bfc4      	itt	gt
 80136d2:	1a9b      	subgt	r3, r3, r2
 80136d4:	18ed      	addgt	r5, r5, r3
 80136d6:	f04f 0900 	mov.w	r9, #0
 80136da:	341a      	adds	r4, #26
 80136dc:	454d      	cmp	r5, r9
 80136de:	d11a      	bne.n	8013716 <_printf_common+0xd6>
 80136e0:	2000      	movs	r0, #0
 80136e2:	e008      	b.n	80136f6 <_printf_common+0xb6>
 80136e4:	2301      	movs	r3, #1
 80136e6:	4652      	mov	r2, sl
 80136e8:	4639      	mov	r1, r7
 80136ea:	4630      	mov	r0, r6
 80136ec:	47c0      	blx	r8
 80136ee:	3001      	adds	r0, #1
 80136f0:	d103      	bne.n	80136fa <_printf_common+0xba>
 80136f2:	f04f 30ff 	mov.w	r0, #4294967295
 80136f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136fa:	3501      	adds	r5, #1
 80136fc:	e7c3      	b.n	8013686 <_printf_common+0x46>
 80136fe:	18e1      	adds	r1, r4, r3
 8013700:	1c5a      	adds	r2, r3, #1
 8013702:	2030      	movs	r0, #48	; 0x30
 8013704:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013708:	4422      	add	r2, r4
 801370a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801370e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013712:	3302      	adds	r3, #2
 8013714:	e7c5      	b.n	80136a2 <_printf_common+0x62>
 8013716:	2301      	movs	r3, #1
 8013718:	4622      	mov	r2, r4
 801371a:	4639      	mov	r1, r7
 801371c:	4630      	mov	r0, r6
 801371e:	47c0      	blx	r8
 8013720:	3001      	adds	r0, #1
 8013722:	d0e6      	beq.n	80136f2 <_printf_common+0xb2>
 8013724:	f109 0901 	add.w	r9, r9, #1
 8013728:	e7d8      	b.n	80136dc <_printf_common+0x9c>
	...

0801372c <_printf_i>:
 801372c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013730:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013734:	460c      	mov	r4, r1
 8013736:	7e09      	ldrb	r1, [r1, #24]
 8013738:	b085      	sub	sp, #20
 801373a:	296e      	cmp	r1, #110	; 0x6e
 801373c:	4617      	mov	r7, r2
 801373e:	4606      	mov	r6, r0
 8013740:	4698      	mov	r8, r3
 8013742:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013744:	f000 80b3 	beq.w	80138ae <_printf_i+0x182>
 8013748:	d822      	bhi.n	8013790 <_printf_i+0x64>
 801374a:	2963      	cmp	r1, #99	; 0x63
 801374c:	d036      	beq.n	80137bc <_printf_i+0x90>
 801374e:	d80a      	bhi.n	8013766 <_printf_i+0x3a>
 8013750:	2900      	cmp	r1, #0
 8013752:	f000 80b9 	beq.w	80138c8 <_printf_i+0x19c>
 8013756:	2958      	cmp	r1, #88	; 0x58
 8013758:	f000 8083 	beq.w	8013862 <_printf_i+0x136>
 801375c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013760:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013764:	e032      	b.n	80137cc <_printf_i+0xa0>
 8013766:	2964      	cmp	r1, #100	; 0x64
 8013768:	d001      	beq.n	801376e <_printf_i+0x42>
 801376a:	2969      	cmp	r1, #105	; 0x69
 801376c:	d1f6      	bne.n	801375c <_printf_i+0x30>
 801376e:	6820      	ldr	r0, [r4, #0]
 8013770:	6813      	ldr	r3, [r2, #0]
 8013772:	0605      	lsls	r5, r0, #24
 8013774:	f103 0104 	add.w	r1, r3, #4
 8013778:	d52a      	bpl.n	80137d0 <_printf_i+0xa4>
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	6011      	str	r1, [r2, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	da03      	bge.n	801378a <_printf_i+0x5e>
 8013782:	222d      	movs	r2, #45	; 0x2d
 8013784:	425b      	negs	r3, r3
 8013786:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801378a:	486f      	ldr	r0, [pc, #444]	; (8013948 <_printf_i+0x21c>)
 801378c:	220a      	movs	r2, #10
 801378e:	e039      	b.n	8013804 <_printf_i+0xd8>
 8013790:	2973      	cmp	r1, #115	; 0x73
 8013792:	f000 809d 	beq.w	80138d0 <_printf_i+0x1a4>
 8013796:	d808      	bhi.n	80137aa <_printf_i+0x7e>
 8013798:	296f      	cmp	r1, #111	; 0x6f
 801379a:	d020      	beq.n	80137de <_printf_i+0xb2>
 801379c:	2970      	cmp	r1, #112	; 0x70
 801379e:	d1dd      	bne.n	801375c <_printf_i+0x30>
 80137a0:	6823      	ldr	r3, [r4, #0]
 80137a2:	f043 0320 	orr.w	r3, r3, #32
 80137a6:	6023      	str	r3, [r4, #0]
 80137a8:	e003      	b.n	80137b2 <_printf_i+0x86>
 80137aa:	2975      	cmp	r1, #117	; 0x75
 80137ac:	d017      	beq.n	80137de <_printf_i+0xb2>
 80137ae:	2978      	cmp	r1, #120	; 0x78
 80137b0:	d1d4      	bne.n	801375c <_printf_i+0x30>
 80137b2:	2378      	movs	r3, #120	; 0x78
 80137b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80137b8:	4864      	ldr	r0, [pc, #400]	; (801394c <_printf_i+0x220>)
 80137ba:	e055      	b.n	8013868 <_printf_i+0x13c>
 80137bc:	6813      	ldr	r3, [r2, #0]
 80137be:	1d19      	adds	r1, r3, #4
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	6011      	str	r1, [r2, #0]
 80137c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80137c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80137cc:	2301      	movs	r3, #1
 80137ce:	e08c      	b.n	80138ea <_printf_i+0x1be>
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	6011      	str	r1, [r2, #0]
 80137d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80137d8:	bf18      	it	ne
 80137da:	b21b      	sxthne	r3, r3
 80137dc:	e7cf      	b.n	801377e <_printf_i+0x52>
 80137de:	6813      	ldr	r3, [r2, #0]
 80137e0:	6825      	ldr	r5, [r4, #0]
 80137e2:	1d18      	adds	r0, r3, #4
 80137e4:	6010      	str	r0, [r2, #0]
 80137e6:	0628      	lsls	r0, r5, #24
 80137e8:	d501      	bpl.n	80137ee <_printf_i+0xc2>
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	e002      	b.n	80137f4 <_printf_i+0xc8>
 80137ee:	0668      	lsls	r0, r5, #25
 80137f0:	d5fb      	bpl.n	80137ea <_printf_i+0xbe>
 80137f2:	881b      	ldrh	r3, [r3, #0]
 80137f4:	4854      	ldr	r0, [pc, #336]	; (8013948 <_printf_i+0x21c>)
 80137f6:	296f      	cmp	r1, #111	; 0x6f
 80137f8:	bf14      	ite	ne
 80137fa:	220a      	movne	r2, #10
 80137fc:	2208      	moveq	r2, #8
 80137fe:	2100      	movs	r1, #0
 8013800:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013804:	6865      	ldr	r5, [r4, #4]
 8013806:	60a5      	str	r5, [r4, #8]
 8013808:	2d00      	cmp	r5, #0
 801380a:	f2c0 8095 	blt.w	8013938 <_printf_i+0x20c>
 801380e:	6821      	ldr	r1, [r4, #0]
 8013810:	f021 0104 	bic.w	r1, r1, #4
 8013814:	6021      	str	r1, [r4, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d13d      	bne.n	8013896 <_printf_i+0x16a>
 801381a:	2d00      	cmp	r5, #0
 801381c:	f040 808e 	bne.w	801393c <_printf_i+0x210>
 8013820:	4665      	mov	r5, ip
 8013822:	2a08      	cmp	r2, #8
 8013824:	d10b      	bne.n	801383e <_printf_i+0x112>
 8013826:	6823      	ldr	r3, [r4, #0]
 8013828:	07db      	lsls	r3, r3, #31
 801382a:	d508      	bpl.n	801383e <_printf_i+0x112>
 801382c:	6923      	ldr	r3, [r4, #16]
 801382e:	6862      	ldr	r2, [r4, #4]
 8013830:	429a      	cmp	r2, r3
 8013832:	bfde      	ittt	le
 8013834:	2330      	movle	r3, #48	; 0x30
 8013836:	f805 3c01 	strble.w	r3, [r5, #-1]
 801383a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801383e:	ebac 0305 	sub.w	r3, ip, r5
 8013842:	6123      	str	r3, [r4, #16]
 8013844:	f8cd 8000 	str.w	r8, [sp]
 8013848:	463b      	mov	r3, r7
 801384a:	aa03      	add	r2, sp, #12
 801384c:	4621      	mov	r1, r4
 801384e:	4630      	mov	r0, r6
 8013850:	f7ff fef6 	bl	8013640 <_printf_common>
 8013854:	3001      	adds	r0, #1
 8013856:	d14d      	bne.n	80138f4 <_printf_i+0x1c8>
 8013858:	f04f 30ff 	mov.w	r0, #4294967295
 801385c:	b005      	add	sp, #20
 801385e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013862:	4839      	ldr	r0, [pc, #228]	; (8013948 <_printf_i+0x21c>)
 8013864:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013868:	6813      	ldr	r3, [r2, #0]
 801386a:	6821      	ldr	r1, [r4, #0]
 801386c:	1d1d      	adds	r5, r3, #4
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	6015      	str	r5, [r2, #0]
 8013872:	060a      	lsls	r2, r1, #24
 8013874:	d50b      	bpl.n	801388e <_printf_i+0x162>
 8013876:	07ca      	lsls	r2, r1, #31
 8013878:	bf44      	itt	mi
 801387a:	f041 0120 	orrmi.w	r1, r1, #32
 801387e:	6021      	strmi	r1, [r4, #0]
 8013880:	b91b      	cbnz	r3, 801388a <_printf_i+0x15e>
 8013882:	6822      	ldr	r2, [r4, #0]
 8013884:	f022 0220 	bic.w	r2, r2, #32
 8013888:	6022      	str	r2, [r4, #0]
 801388a:	2210      	movs	r2, #16
 801388c:	e7b7      	b.n	80137fe <_printf_i+0xd2>
 801388e:	064d      	lsls	r5, r1, #25
 8013890:	bf48      	it	mi
 8013892:	b29b      	uxthmi	r3, r3
 8013894:	e7ef      	b.n	8013876 <_printf_i+0x14a>
 8013896:	4665      	mov	r5, ip
 8013898:	fbb3 f1f2 	udiv	r1, r3, r2
 801389c:	fb02 3311 	mls	r3, r2, r1, r3
 80138a0:	5cc3      	ldrb	r3, [r0, r3]
 80138a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80138a6:	460b      	mov	r3, r1
 80138a8:	2900      	cmp	r1, #0
 80138aa:	d1f5      	bne.n	8013898 <_printf_i+0x16c>
 80138ac:	e7b9      	b.n	8013822 <_printf_i+0xf6>
 80138ae:	6813      	ldr	r3, [r2, #0]
 80138b0:	6825      	ldr	r5, [r4, #0]
 80138b2:	6961      	ldr	r1, [r4, #20]
 80138b4:	1d18      	adds	r0, r3, #4
 80138b6:	6010      	str	r0, [r2, #0]
 80138b8:	0628      	lsls	r0, r5, #24
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	d501      	bpl.n	80138c2 <_printf_i+0x196>
 80138be:	6019      	str	r1, [r3, #0]
 80138c0:	e002      	b.n	80138c8 <_printf_i+0x19c>
 80138c2:	066a      	lsls	r2, r5, #25
 80138c4:	d5fb      	bpl.n	80138be <_printf_i+0x192>
 80138c6:	8019      	strh	r1, [r3, #0]
 80138c8:	2300      	movs	r3, #0
 80138ca:	6123      	str	r3, [r4, #16]
 80138cc:	4665      	mov	r5, ip
 80138ce:	e7b9      	b.n	8013844 <_printf_i+0x118>
 80138d0:	6813      	ldr	r3, [r2, #0]
 80138d2:	1d19      	adds	r1, r3, #4
 80138d4:	6011      	str	r1, [r2, #0]
 80138d6:	681d      	ldr	r5, [r3, #0]
 80138d8:	6862      	ldr	r2, [r4, #4]
 80138da:	2100      	movs	r1, #0
 80138dc:	4628      	mov	r0, r5
 80138de:	f7ec fc97 	bl	8000210 <memchr>
 80138e2:	b108      	cbz	r0, 80138e8 <_printf_i+0x1bc>
 80138e4:	1b40      	subs	r0, r0, r5
 80138e6:	6060      	str	r0, [r4, #4]
 80138e8:	6863      	ldr	r3, [r4, #4]
 80138ea:	6123      	str	r3, [r4, #16]
 80138ec:	2300      	movs	r3, #0
 80138ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138f2:	e7a7      	b.n	8013844 <_printf_i+0x118>
 80138f4:	6923      	ldr	r3, [r4, #16]
 80138f6:	462a      	mov	r2, r5
 80138f8:	4639      	mov	r1, r7
 80138fa:	4630      	mov	r0, r6
 80138fc:	47c0      	blx	r8
 80138fe:	3001      	adds	r0, #1
 8013900:	d0aa      	beq.n	8013858 <_printf_i+0x12c>
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	079b      	lsls	r3, r3, #30
 8013906:	d413      	bmi.n	8013930 <_printf_i+0x204>
 8013908:	68e0      	ldr	r0, [r4, #12]
 801390a:	9b03      	ldr	r3, [sp, #12]
 801390c:	4298      	cmp	r0, r3
 801390e:	bfb8      	it	lt
 8013910:	4618      	movlt	r0, r3
 8013912:	e7a3      	b.n	801385c <_printf_i+0x130>
 8013914:	2301      	movs	r3, #1
 8013916:	464a      	mov	r2, r9
 8013918:	4639      	mov	r1, r7
 801391a:	4630      	mov	r0, r6
 801391c:	47c0      	blx	r8
 801391e:	3001      	adds	r0, #1
 8013920:	d09a      	beq.n	8013858 <_printf_i+0x12c>
 8013922:	3501      	adds	r5, #1
 8013924:	68e3      	ldr	r3, [r4, #12]
 8013926:	9a03      	ldr	r2, [sp, #12]
 8013928:	1a9b      	subs	r3, r3, r2
 801392a:	42ab      	cmp	r3, r5
 801392c:	dcf2      	bgt.n	8013914 <_printf_i+0x1e8>
 801392e:	e7eb      	b.n	8013908 <_printf_i+0x1dc>
 8013930:	2500      	movs	r5, #0
 8013932:	f104 0919 	add.w	r9, r4, #25
 8013936:	e7f5      	b.n	8013924 <_printf_i+0x1f8>
 8013938:	2b00      	cmp	r3, #0
 801393a:	d1ac      	bne.n	8013896 <_printf_i+0x16a>
 801393c:	7803      	ldrb	r3, [r0, #0]
 801393e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013942:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013946:	e76c      	b.n	8013822 <_printf_i+0xf6>
 8013948:	080186ac 	.word	0x080186ac
 801394c:	080186bd 	.word	0x080186bd

08013950 <_scanf_float>:
 8013950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013954:	469a      	mov	sl, r3
 8013956:	688b      	ldr	r3, [r1, #8]
 8013958:	4616      	mov	r6, r2
 801395a:	1e5a      	subs	r2, r3, #1
 801395c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013960:	b087      	sub	sp, #28
 8013962:	bf83      	ittte	hi
 8013964:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013968:	189b      	addhi	r3, r3, r2
 801396a:	9301      	strhi	r3, [sp, #4]
 801396c:	2300      	movls	r3, #0
 801396e:	bf86      	itte	hi
 8013970:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013974:	608b      	strhi	r3, [r1, #8]
 8013976:	9301      	strls	r3, [sp, #4]
 8013978:	680b      	ldr	r3, [r1, #0]
 801397a:	4688      	mov	r8, r1
 801397c:	f04f 0b00 	mov.w	fp, #0
 8013980:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013984:	f848 3b1c 	str.w	r3, [r8], #28
 8013988:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801398c:	4607      	mov	r7, r0
 801398e:	460c      	mov	r4, r1
 8013990:	4645      	mov	r5, r8
 8013992:	465a      	mov	r2, fp
 8013994:	46d9      	mov	r9, fp
 8013996:	f8cd b008 	str.w	fp, [sp, #8]
 801399a:	68a1      	ldr	r1, [r4, #8]
 801399c:	b181      	cbz	r1, 80139c0 <_scanf_float+0x70>
 801399e:	6833      	ldr	r3, [r6, #0]
 80139a0:	781b      	ldrb	r3, [r3, #0]
 80139a2:	2b49      	cmp	r3, #73	; 0x49
 80139a4:	d071      	beq.n	8013a8a <_scanf_float+0x13a>
 80139a6:	d84d      	bhi.n	8013a44 <_scanf_float+0xf4>
 80139a8:	2b39      	cmp	r3, #57	; 0x39
 80139aa:	d840      	bhi.n	8013a2e <_scanf_float+0xde>
 80139ac:	2b31      	cmp	r3, #49	; 0x31
 80139ae:	f080 8088 	bcs.w	8013ac2 <_scanf_float+0x172>
 80139b2:	2b2d      	cmp	r3, #45	; 0x2d
 80139b4:	f000 8090 	beq.w	8013ad8 <_scanf_float+0x188>
 80139b8:	d815      	bhi.n	80139e6 <_scanf_float+0x96>
 80139ba:	2b2b      	cmp	r3, #43	; 0x2b
 80139bc:	f000 808c 	beq.w	8013ad8 <_scanf_float+0x188>
 80139c0:	f1b9 0f00 	cmp.w	r9, #0
 80139c4:	d003      	beq.n	80139ce <_scanf_float+0x7e>
 80139c6:	6823      	ldr	r3, [r4, #0]
 80139c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80139cc:	6023      	str	r3, [r4, #0]
 80139ce:	3a01      	subs	r2, #1
 80139d0:	2a01      	cmp	r2, #1
 80139d2:	f200 80ea 	bhi.w	8013baa <_scanf_float+0x25a>
 80139d6:	4545      	cmp	r5, r8
 80139d8:	f200 80dc 	bhi.w	8013b94 <_scanf_float+0x244>
 80139dc:	2601      	movs	r6, #1
 80139de:	4630      	mov	r0, r6
 80139e0:	b007      	add	sp, #28
 80139e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139e6:	2b2e      	cmp	r3, #46	; 0x2e
 80139e8:	f000 809f 	beq.w	8013b2a <_scanf_float+0x1da>
 80139ec:	2b30      	cmp	r3, #48	; 0x30
 80139ee:	d1e7      	bne.n	80139c0 <_scanf_float+0x70>
 80139f0:	6820      	ldr	r0, [r4, #0]
 80139f2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80139f6:	d064      	beq.n	8013ac2 <_scanf_float+0x172>
 80139f8:	9b01      	ldr	r3, [sp, #4]
 80139fa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80139fe:	6020      	str	r0, [r4, #0]
 8013a00:	f109 0901 	add.w	r9, r9, #1
 8013a04:	b11b      	cbz	r3, 8013a0e <_scanf_float+0xbe>
 8013a06:	3b01      	subs	r3, #1
 8013a08:	3101      	adds	r1, #1
 8013a0a:	9301      	str	r3, [sp, #4]
 8013a0c:	60a1      	str	r1, [r4, #8]
 8013a0e:	68a3      	ldr	r3, [r4, #8]
 8013a10:	3b01      	subs	r3, #1
 8013a12:	60a3      	str	r3, [r4, #8]
 8013a14:	6923      	ldr	r3, [r4, #16]
 8013a16:	3301      	adds	r3, #1
 8013a18:	6123      	str	r3, [r4, #16]
 8013a1a:	6873      	ldr	r3, [r6, #4]
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	6073      	str	r3, [r6, #4]
 8013a22:	f340 80ac 	ble.w	8013b7e <_scanf_float+0x22e>
 8013a26:	6833      	ldr	r3, [r6, #0]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	6033      	str	r3, [r6, #0]
 8013a2c:	e7b5      	b.n	801399a <_scanf_float+0x4a>
 8013a2e:	2b45      	cmp	r3, #69	; 0x45
 8013a30:	f000 8085 	beq.w	8013b3e <_scanf_float+0x1ee>
 8013a34:	2b46      	cmp	r3, #70	; 0x46
 8013a36:	d06a      	beq.n	8013b0e <_scanf_float+0x1be>
 8013a38:	2b41      	cmp	r3, #65	; 0x41
 8013a3a:	d1c1      	bne.n	80139c0 <_scanf_float+0x70>
 8013a3c:	2a01      	cmp	r2, #1
 8013a3e:	d1bf      	bne.n	80139c0 <_scanf_float+0x70>
 8013a40:	2202      	movs	r2, #2
 8013a42:	e046      	b.n	8013ad2 <_scanf_float+0x182>
 8013a44:	2b65      	cmp	r3, #101	; 0x65
 8013a46:	d07a      	beq.n	8013b3e <_scanf_float+0x1ee>
 8013a48:	d818      	bhi.n	8013a7c <_scanf_float+0x12c>
 8013a4a:	2b54      	cmp	r3, #84	; 0x54
 8013a4c:	d066      	beq.n	8013b1c <_scanf_float+0x1cc>
 8013a4e:	d811      	bhi.n	8013a74 <_scanf_float+0x124>
 8013a50:	2b4e      	cmp	r3, #78	; 0x4e
 8013a52:	d1b5      	bne.n	80139c0 <_scanf_float+0x70>
 8013a54:	2a00      	cmp	r2, #0
 8013a56:	d146      	bne.n	8013ae6 <_scanf_float+0x196>
 8013a58:	f1b9 0f00 	cmp.w	r9, #0
 8013a5c:	d145      	bne.n	8013aea <_scanf_float+0x19a>
 8013a5e:	6821      	ldr	r1, [r4, #0]
 8013a60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013a64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013a68:	d13f      	bne.n	8013aea <_scanf_float+0x19a>
 8013a6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013a6e:	6021      	str	r1, [r4, #0]
 8013a70:	2201      	movs	r2, #1
 8013a72:	e02e      	b.n	8013ad2 <_scanf_float+0x182>
 8013a74:	2b59      	cmp	r3, #89	; 0x59
 8013a76:	d01e      	beq.n	8013ab6 <_scanf_float+0x166>
 8013a78:	2b61      	cmp	r3, #97	; 0x61
 8013a7a:	e7de      	b.n	8013a3a <_scanf_float+0xea>
 8013a7c:	2b6e      	cmp	r3, #110	; 0x6e
 8013a7e:	d0e9      	beq.n	8013a54 <_scanf_float+0x104>
 8013a80:	d815      	bhi.n	8013aae <_scanf_float+0x15e>
 8013a82:	2b66      	cmp	r3, #102	; 0x66
 8013a84:	d043      	beq.n	8013b0e <_scanf_float+0x1be>
 8013a86:	2b69      	cmp	r3, #105	; 0x69
 8013a88:	d19a      	bne.n	80139c0 <_scanf_float+0x70>
 8013a8a:	f1bb 0f00 	cmp.w	fp, #0
 8013a8e:	d138      	bne.n	8013b02 <_scanf_float+0x1b2>
 8013a90:	f1b9 0f00 	cmp.w	r9, #0
 8013a94:	d197      	bne.n	80139c6 <_scanf_float+0x76>
 8013a96:	6821      	ldr	r1, [r4, #0]
 8013a98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013a9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013aa0:	d195      	bne.n	80139ce <_scanf_float+0x7e>
 8013aa2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013aa6:	6021      	str	r1, [r4, #0]
 8013aa8:	f04f 0b01 	mov.w	fp, #1
 8013aac:	e011      	b.n	8013ad2 <_scanf_float+0x182>
 8013aae:	2b74      	cmp	r3, #116	; 0x74
 8013ab0:	d034      	beq.n	8013b1c <_scanf_float+0x1cc>
 8013ab2:	2b79      	cmp	r3, #121	; 0x79
 8013ab4:	d184      	bne.n	80139c0 <_scanf_float+0x70>
 8013ab6:	f1bb 0f07 	cmp.w	fp, #7
 8013aba:	d181      	bne.n	80139c0 <_scanf_float+0x70>
 8013abc:	f04f 0b08 	mov.w	fp, #8
 8013ac0:	e007      	b.n	8013ad2 <_scanf_float+0x182>
 8013ac2:	eb12 0f0b 	cmn.w	r2, fp
 8013ac6:	f47f af7b 	bne.w	80139c0 <_scanf_float+0x70>
 8013aca:	6821      	ldr	r1, [r4, #0]
 8013acc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013ad0:	6021      	str	r1, [r4, #0]
 8013ad2:	702b      	strb	r3, [r5, #0]
 8013ad4:	3501      	adds	r5, #1
 8013ad6:	e79a      	b.n	8013a0e <_scanf_float+0xbe>
 8013ad8:	6821      	ldr	r1, [r4, #0]
 8013ada:	0608      	lsls	r0, r1, #24
 8013adc:	f57f af70 	bpl.w	80139c0 <_scanf_float+0x70>
 8013ae0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013ae4:	e7f4      	b.n	8013ad0 <_scanf_float+0x180>
 8013ae6:	2a02      	cmp	r2, #2
 8013ae8:	d047      	beq.n	8013b7a <_scanf_float+0x22a>
 8013aea:	f1bb 0f01 	cmp.w	fp, #1
 8013aee:	d003      	beq.n	8013af8 <_scanf_float+0x1a8>
 8013af0:	f1bb 0f04 	cmp.w	fp, #4
 8013af4:	f47f af64 	bne.w	80139c0 <_scanf_float+0x70>
 8013af8:	f10b 0b01 	add.w	fp, fp, #1
 8013afc:	fa5f fb8b 	uxtb.w	fp, fp
 8013b00:	e7e7      	b.n	8013ad2 <_scanf_float+0x182>
 8013b02:	f1bb 0f03 	cmp.w	fp, #3
 8013b06:	d0f7      	beq.n	8013af8 <_scanf_float+0x1a8>
 8013b08:	f1bb 0f05 	cmp.w	fp, #5
 8013b0c:	e7f2      	b.n	8013af4 <_scanf_float+0x1a4>
 8013b0e:	f1bb 0f02 	cmp.w	fp, #2
 8013b12:	f47f af55 	bne.w	80139c0 <_scanf_float+0x70>
 8013b16:	f04f 0b03 	mov.w	fp, #3
 8013b1a:	e7da      	b.n	8013ad2 <_scanf_float+0x182>
 8013b1c:	f1bb 0f06 	cmp.w	fp, #6
 8013b20:	f47f af4e 	bne.w	80139c0 <_scanf_float+0x70>
 8013b24:	f04f 0b07 	mov.w	fp, #7
 8013b28:	e7d3      	b.n	8013ad2 <_scanf_float+0x182>
 8013b2a:	6821      	ldr	r1, [r4, #0]
 8013b2c:	0588      	lsls	r0, r1, #22
 8013b2e:	f57f af47 	bpl.w	80139c0 <_scanf_float+0x70>
 8013b32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013b36:	6021      	str	r1, [r4, #0]
 8013b38:	f8cd 9008 	str.w	r9, [sp, #8]
 8013b3c:	e7c9      	b.n	8013ad2 <_scanf_float+0x182>
 8013b3e:	6821      	ldr	r1, [r4, #0]
 8013b40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013b44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013b48:	d006      	beq.n	8013b58 <_scanf_float+0x208>
 8013b4a:	0548      	lsls	r0, r1, #21
 8013b4c:	f57f af38 	bpl.w	80139c0 <_scanf_float+0x70>
 8013b50:	f1b9 0f00 	cmp.w	r9, #0
 8013b54:	f43f af3b 	beq.w	80139ce <_scanf_float+0x7e>
 8013b58:	0588      	lsls	r0, r1, #22
 8013b5a:	bf58      	it	pl
 8013b5c:	9802      	ldrpl	r0, [sp, #8]
 8013b5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013b62:	bf58      	it	pl
 8013b64:	eba9 0000 	subpl.w	r0, r9, r0
 8013b68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013b6c:	bf58      	it	pl
 8013b6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013b72:	6021      	str	r1, [r4, #0]
 8013b74:	f04f 0900 	mov.w	r9, #0
 8013b78:	e7ab      	b.n	8013ad2 <_scanf_float+0x182>
 8013b7a:	2203      	movs	r2, #3
 8013b7c:	e7a9      	b.n	8013ad2 <_scanf_float+0x182>
 8013b7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013b82:	9205      	str	r2, [sp, #20]
 8013b84:	4631      	mov	r1, r6
 8013b86:	4638      	mov	r0, r7
 8013b88:	4798      	blx	r3
 8013b8a:	9a05      	ldr	r2, [sp, #20]
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	f43f af04 	beq.w	801399a <_scanf_float+0x4a>
 8013b92:	e715      	b.n	80139c0 <_scanf_float+0x70>
 8013b94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013b98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013b9c:	4632      	mov	r2, r6
 8013b9e:	4638      	mov	r0, r7
 8013ba0:	4798      	blx	r3
 8013ba2:	6923      	ldr	r3, [r4, #16]
 8013ba4:	3b01      	subs	r3, #1
 8013ba6:	6123      	str	r3, [r4, #16]
 8013ba8:	e715      	b.n	80139d6 <_scanf_float+0x86>
 8013baa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013bae:	2b06      	cmp	r3, #6
 8013bb0:	d80a      	bhi.n	8013bc8 <_scanf_float+0x278>
 8013bb2:	f1bb 0f02 	cmp.w	fp, #2
 8013bb6:	d968      	bls.n	8013c8a <_scanf_float+0x33a>
 8013bb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8013bbc:	fa5f fb8b 	uxtb.w	fp, fp
 8013bc0:	eba5 0b0b 	sub.w	fp, r5, fp
 8013bc4:	455d      	cmp	r5, fp
 8013bc6:	d14b      	bne.n	8013c60 <_scanf_float+0x310>
 8013bc8:	6823      	ldr	r3, [r4, #0]
 8013bca:	05da      	lsls	r2, r3, #23
 8013bcc:	d51f      	bpl.n	8013c0e <_scanf_float+0x2be>
 8013bce:	055b      	lsls	r3, r3, #21
 8013bd0:	d468      	bmi.n	8013ca4 <_scanf_float+0x354>
 8013bd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013bd6:	6923      	ldr	r3, [r4, #16]
 8013bd8:	2965      	cmp	r1, #101	; 0x65
 8013bda:	f103 33ff 	add.w	r3, r3, #4294967295
 8013bde:	f105 3bff 	add.w	fp, r5, #4294967295
 8013be2:	6123      	str	r3, [r4, #16]
 8013be4:	d00d      	beq.n	8013c02 <_scanf_float+0x2b2>
 8013be6:	2945      	cmp	r1, #69	; 0x45
 8013be8:	d00b      	beq.n	8013c02 <_scanf_float+0x2b2>
 8013bea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013bee:	4632      	mov	r2, r6
 8013bf0:	4638      	mov	r0, r7
 8013bf2:	4798      	blx	r3
 8013bf4:	6923      	ldr	r3, [r4, #16]
 8013bf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	f1a5 0b02 	sub.w	fp, r5, #2
 8013c00:	6123      	str	r3, [r4, #16]
 8013c02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c06:	4632      	mov	r2, r6
 8013c08:	4638      	mov	r0, r7
 8013c0a:	4798      	blx	r3
 8013c0c:	465d      	mov	r5, fp
 8013c0e:	6826      	ldr	r6, [r4, #0]
 8013c10:	f016 0610 	ands.w	r6, r6, #16
 8013c14:	d17a      	bne.n	8013d0c <_scanf_float+0x3bc>
 8013c16:	702e      	strb	r6, [r5, #0]
 8013c18:	6823      	ldr	r3, [r4, #0]
 8013c1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013c22:	d142      	bne.n	8013caa <_scanf_float+0x35a>
 8013c24:	9b02      	ldr	r3, [sp, #8]
 8013c26:	eba9 0303 	sub.w	r3, r9, r3
 8013c2a:	425a      	negs	r2, r3
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d149      	bne.n	8013cc4 <_scanf_float+0x374>
 8013c30:	2200      	movs	r2, #0
 8013c32:	4641      	mov	r1, r8
 8013c34:	4638      	mov	r0, r7
 8013c36:	f000 ffdf 	bl	8014bf8 <_strtod_r>
 8013c3a:	6825      	ldr	r5, [r4, #0]
 8013c3c:	f8da 3000 	ldr.w	r3, [sl]
 8013c40:	f015 0f02 	tst.w	r5, #2
 8013c44:	f103 0204 	add.w	r2, r3, #4
 8013c48:	ec59 8b10 	vmov	r8, r9, d0
 8013c4c:	f8ca 2000 	str.w	r2, [sl]
 8013c50:	d043      	beq.n	8013cda <_scanf_float+0x38a>
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	e9c3 8900 	strd	r8, r9, [r3]
 8013c58:	68e3      	ldr	r3, [r4, #12]
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	60e3      	str	r3, [r4, #12]
 8013c5e:	e6be      	b.n	80139de <_scanf_float+0x8e>
 8013c60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013c68:	4632      	mov	r2, r6
 8013c6a:	4638      	mov	r0, r7
 8013c6c:	4798      	blx	r3
 8013c6e:	6923      	ldr	r3, [r4, #16]
 8013c70:	3b01      	subs	r3, #1
 8013c72:	6123      	str	r3, [r4, #16]
 8013c74:	e7a6      	b.n	8013bc4 <_scanf_float+0x274>
 8013c76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013c7e:	4632      	mov	r2, r6
 8013c80:	4638      	mov	r0, r7
 8013c82:	4798      	blx	r3
 8013c84:	6923      	ldr	r3, [r4, #16]
 8013c86:	3b01      	subs	r3, #1
 8013c88:	6123      	str	r3, [r4, #16]
 8013c8a:	4545      	cmp	r5, r8
 8013c8c:	d8f3      	bhi.n	8013c76 <_scanf_float+0x326>
 8013c8e:	e6a5      	b.n	80139dc <_scanf_float+0x8c>
 8013c90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013c98:	4632      	mov	r2, r6
 8013c9a:	4638      	mov	r0, r7
 8013c9c:	4798      	blx	r3
 8013c9e:	6923      	ldr	r3, [r4, #16]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	6123      	str	r3, [r4, #16]
 8013ca4:	4545      	cmp	r5, r8
 8013ca6:	d8f3      	bhi.n	8013c90 <_scanf_float+0x340>
 8013ca8:	e698      	b.n	80139dc <_scanf_float+0x8c>
 8013caa:	9b03      	ldr	r3, [sp, #12]
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d0bf      	beq.n	8013c30 <_scanf_float+0x2e0>
 8013cb0:	9904      	ldr	r1, [sp, #16]
 8013cb2:	230a      	movs	r3, #10
 8013cb4:	4632      	mov	r2, r6
 8013cb6:	3101      	adds	r1, #1
 8013cb8:	4638      	mov	r0, r7
 8013cba:	f001 f829 	bl	8014d10 <_strtol_r>
 8013cbe:	9b03      	ldr	r3, [sp, #12]
 8013cc0:	9d04      	ldr	r5, [sp, #16]
 8013cc2:	1ac2      	subs	r2, r0, r3
 8013cc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013cc8:	429d      	cmp	r5, r3
 8013cca:	bf28      	it	cs
 8013ccc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013cd0:	490f      	ldr	r1, [pc, #60]	; (8013d10 <_scanf_float+0x3c0>)
 8013cd2:	4628      	mov	r0, r5
 8013cd4:	f000 f8e8 	bl	8013ea8 <siprintf>
 8013cd8:	e7aa      	b.n	8013c30 <_scanf_float+0x2e0>
 8013cda:	f015 0504 	ands.w	r5, r5, #4
 8013cde:	d1b8      	bne.n	8013c52 <_scanf_float+0x302>
 8013ce0:	681f      	ldr	r7, [r3, #0]
 8013ce2:	ee10 2a10 	vmov	r2, s0
 8013ce6:	464b      	mov	r3, r9
 8013ce8:	ee10 0a10 	vmov	r0, s0
 8013cec:	4649      	mov	r1, r9
 8013cee:	f7ec ff35 	bl	8000b5c <__aeabi_dcmpun>
 8013cf2:	b128      	cbz	r0, 8013d00 <_scanf_float+0x3b0>
 8013cf4:	4628      	mov	r0, r5
 8013cf6:	f000 f89d 	bl	8013e34 <nanf>
 8013cfa:	ed87 0a00 	vstr	s0, [r7]
 8013cfe:	e7ab      	b.n	8013c58 <_scanf_float+0x308>
 8013d00:	4640      	mov	r0, r8
 8013d02:	4649      	mov	r1, r9
 8013d04:	f7ec ff88 	bl	8000c18 <__aeabi_d2f>
 8013d08:	6038      	str	r0, [r7, #0]
 8013d0a:	e7a5      	b.n	8013c58 <_scanf_float+0x308>
 8013d0c:	2600      	movs	r6, #0
 8013d0e:	e666      	b.n	80139de <_scanf_float+0x8e>
 8013d10:	080186ce 	.word	0x080186ce

08013d14 <iprintf>:
 8013d14:	b40f      	push	{r0, r1, r2, r3}
 8013d16:	4b0a      	ldr	r3, [pc, #40]	; (8013d40 <iprintf+0x2c>)
 8013d18:	b513      	push	{r0, r1, r4, lr}
 8013d1a:	681c      	ldr	r4, [r3, #0]
 8013d1c:	b124      	cbz	r4, 8013d28 <iprintf+0x14>
 8013d1e:	69a3      	ldr	r3, [r4, #24]
 8013d20:	b913      	cbnz	r3, 8013d28 <iprintf+0x14>
 8013d22:	4620      	mov	r0, r4
 8013d24:	f002 f83c 	bl	8015da0 <__sinit>
 8013d28:	ab05      	add	r3, sp, #20
 8013d2a:	9a04      	ldr	r2, [sp, #16]
 8013d2c:	68a1      	ldr	r1, [r4, #8]
 8013d2e:	9301      	str	r3, [sp, #4]
 8013d30:	4620      	mov	r0, r4
 8013d32:	f003 fc73 	bl	801761c <_vfiprintf_r>
 8013d36:	b002      	add	sp, #8
 8013d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d3c:	b004      	add	sp, #16
 8013d3e:	4770      	bx	lr
 8013d40:	2000000c 	.word	0x2000000c

08013d44 <putchar>:
 8013d44:	b538      	push	{r3, r4, r5, lr}
 8013d46:	4b08      	ldr	r3, [pc, #32]	; (8013d68 <putchar+0x24>)
 8013d48:	681c      	ldr	r4, [r3, #0]
 8013d4a:	4605      	mov	r5, r0
 8013d4c:	b124      	cbz	r4, 8013d58 <putchar+0x14>
 8013d4e:	69a3      	ldr	r3, [r4, #24]
 8013d50:	b913      	cbnz	r3, 8013d58 <putchar+0x14>
 8013d52:	4620      	mov	r0, r4
 8013d54:	f002 f824 	bl	8015da0 <__sinit>
 8013d58:	68a2      	ldr	r2, [r4, #8]
 8013d5a:	4629      	mov	r1, r5
 8013d5c:	4620      	mov	r0, r4
 8013d5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013d62:	f003 bec9 	b.w	8017af8 <_putc_r>
 8013d66:	bf00      	nop
 8013d68:	2000000c 	.word	0x2000000c

08013d6c <_puts_r>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	460e      	mov	r6, r1
 8013d70:	4605      	mov	r5, r0
 8013d72:	b118      	cbz	r0, 8013d7c <_puts_r+0x10>
 8013d74:	6983      	ldr	r3, [r0, #24]
 8013d76:	b90b      	cbnz	r3, 8013d7c <_puts_r+0x10>
 8013d78:	f002 f812 	bl	8015da0 <__sinit>
 8013d7c:	69ab      	ldr	r3, [r5, #24]
 8013d7e:	68ac      	ldr	r4, [r5, #8]
 8013d80:	b913      	cbnz	r3, 8013d88 <_puts_r+0x1c>
 8013d82:	4628      	mov	r0, r5
 8013d84:	f002 f80c 	bl	8015da0 <__sinit>
 8013d88:	4b23      	ldr	r3, [pc, #140]	; (8013e18 <_puts_r+0xac>)
 8013d8a:	429c      	cmp	r4, r3
 8013d8c:	d117      	bne.n	8013dbe <_puts_r+0x52>
 8013d8e:	686c      	ldr	r4, [r5, #4]
 8013d90:	89a3      	ldrh	r3, [r4, #12]
 8013d92:	071b      	lsls	r3, r3, #28
 8013d94:	d51d      	bpl.n	8013dd2 <_puts_r+0x66>
 8013d96:	6923      	ldr	r3, [r4, #16]
 8013d98:	b1db      	cbz	r3, 8013dd2 <_puts_r+0x66>
 8013d9a:	3e01      	subs	r6, #1
 8013d9c:	68a3      	ldr	r3, [r4, #8]
 8013d9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013da2:	3b01      	subs	r3, #1
 8013da4:	60a3      	str	r3, [r4, #8]
 8013da6:	b9e9      	cbnz	r1, 8013de4 <_puts_r+0x78>
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	da2e      	bge.n	8013e0a <_puts_r+0x9e>
 8013dac:	4622      	mov	r2, r4
 8013dae:	210a      	movs	r1, #10
 8013db0:	4628      	mov	r0, r5
 8013db2:	f000 ffdf 	bl	8014d74 <__swbuf_r>
 8013db6:	3001      	adds	r0, #1
 8013db8:	d011      	beq.n	8013dde <_puts_r+0x72>
 8013dba:	200a      	movs	r0, #10
 8013dbc:	e011      	b.n	8013de2 <_puts_r+0x76>
 8013dbe:	4b17      	ldr	r3, [pc, #92]	; (8013e1c <_puts_r+0xb0>)
 8013dc0:	429c      	cmp	r4, r3
 8013dc2:	d101      	bne.n	8013dc8 <_puts_r+0x5c>
 8013dc4:	68ac      	ldr	r4, [r5, #8]
 8013dc6:	e7e3      	b.n	8013d90 <_puts_r+0x24>
 8013dc8:	4b15      	ldr	r3, [pc, #84]	; (8013e20 <_puts_r+0xb4>)
 8013dca:	429c      	cmp	r4, r3
 8013dcc:	bf08      	it	eq
 8013dce:	68ec      	ldreq	r4, [r5, #12]
 8013dd0:	e7de      	b.n	8013d90 <_puts_r+0x24>
 8013dd2:	4621      	mov	r1, r4
 8013dd4:	4628      	mov	r0, r5
 8013dd6:	f001 f831 	bl	8014e3c <__swsetup_r>
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d0dd      	beq.n	8013d9a <_puts_r+0x2e>
 8013dde:	f04f 30ff 	mov.w	r0, #4294967295
 8013de2:	bd70      	pop	{r4, r5, r6, pc}
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	da04      	bge.n	8013df2 <_puts_r+0x86>
 8013de8:	69a2      	ldr	r2, [r4, #24]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	dc06      	bgt.n	8013dfc <_puts_r+0x90>
 8013dee:	290a      	cmp	r1, #10
 8013df0:	d004      	beq.n	8013dfc <_puts_r+0x90>
 8013df2:	6823      	ldr	r3, [r4, #0]
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	6022      	str	r2, [r4, #0]
 8013df8:	7019      	strb	r1, [r3, #0]
 8013dfa:	e7cf      	b.n	8013d9c <_puts_r+0x30>
 8013dfc:	4622      	mov	r2, r4
 8013dfe:	4628      	mov	r0, r5
 8013e00:	f000 ffb8 	bl	8014d74 <__swbuf_r>
 8013e04:	3001      	adds	r0, #1
 8013e06:	d1c9      	bne.n	8013d9c <_puts_r+0x30>
 8013e08:	e7e9      	b.n	8013dde <_puts_r+0x72>
 8013e0a:	6823      	ldr	r3, [r4, #0]
 8013e0c:	200a      	movs	r0, #10
 8013e0e:	1c5a      	adds	r2, r3, #1
 8013e10:	6022      	str	r2, [r4, #0]
 8013e12:	7018      	strb	r0, [r3, #0]
 8013e14:	e7e5      	b.n	8013de2 <_puts_r+0x76>
 8013e16:	bf00      	nop
 8013e18:	08018758 	.word	0x08018758
 8013e1c:	08018778 	.word	0x08018778
 8013e20:	08018738 	.word	0x08018738

08013e24 <puts>:
 8013e24:	4b02      	ldr	r3, [pc, #8]	; (8013e30 <puts+0xc>)
 8013e26:	4601      	mov	r1, r0
 8013e28:	6818      	ldr	r0, [r3, #0]
 8013e2a:	f7ff bf9f 	b.w	8013d6c <_puts_r>
 8013e2e:	bf00      	nop
 8013e30:	2000000c 	.word	0x2000000c

08013e34 <nanf>:
 8013e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013e3c <nanf+0x8>
 8013e38:	4770      	bx	lr
 8013e3a:	bf00      	nop
 8013e3c:	7fc00000 	.word	0x7fc00000

08013e40 <sniprintf>:
 8013e40:	b40c      	push	{r2, r3}
 8013e42:	b530      	push	{r4, r5, lr}
 8013e44:	4b17      	ldr	r3, [pc, #92]	; (8013ea4 <sniprintf+0x64>)
 8013e46:	1e0c      	subs	r4, r1, #0
 8013e48:	b09d      	sub	sp, #116	; 0x74
 8013e4a:	681d      	ldr	r5, [r3, #0]
 8013e4c:	da08      	bge.n	8013e60 <sniprintf+0x20>
 8013e4e:	238b      	movs	r3, #139	; 0x8b
 8013e50:	602b      	str	r3, [r5, #0]
 8013e52:	f04f 30ff 	mov.w	r0, #4294967295
 8013e56:	b01d      	add	sp, #116	; 0x74
 8013e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013e5c:	b002      	add	sp, #8
 8013e5e:	4770      	bx	lr
 8013e60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013e64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013e68:	bf14      	ite	ne
 8013e6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013e6e:	4623      	moveq	r3, r4
 8013e70:	9304      	str	r3, [sp, #16]
 8013e72:	9307      	str	r3, [sp, #28]
 8013e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013e78:	9002      	str	r0, [sp, #8]
 8013e7a:	9006      	str	r0, [sp, #24]
 8013e7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013e80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013e82:	ab21      	add	r3, sp, #132	; 0x84
 8013e84:	a902      	add	r1, sp, #8
 8013e86:	4628      	mov	r0, r5
 8013e88:	9301      	str	r3, [sp, #4]
 8013e8a:	f003 f8fb 	bl	8017084 <_svfiprintf_r>
 8013e8e:	1c43      	adds	r3, r0, #1
 8013e90:	bfbc      	itt	lt
 8013e92:	238b      	movlt	r3, #139	; 0x8b
 8013e94:	602b      	strlt	r3, [r5, #0]
 8013e96:	2c00      	cmp	r4, #0
 8013e98:	d0dd      	beq.n	8013e56 <sniprintf+0x16>
 8013e9a:	9b02      	ldr	r3, [sp, #8]
 8013e9c:	2200      	movs	r2, #0
 8013e9e:	701a      	strb	r2, [r3, #0]
 8013ea0:	e7d9      	b.n	8013e56 <sniprintf+0x16>
 8013ea2:	bf00      	nop
 8013ea4:	2000000c 	.word	0x2000000c

08013ea8 <siprintf>:
 8013ea8:	b40e      	push	{r1, r2, r3}
 8013eaa:	b500      	push	{lr}
 8013eac:	b09c      	sub	sp, #112	; 0x70
 8013eae:	ab1d      	add	r3, sp, #116	; 0x74
 8013eb0:	9002      	str	r0, [sp, #8]
 8013eb2:	9006      	str	r0, [sp, #24]
 8013eb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013eb8:	4809      	ldr	r0, [pc, #36]	; (8013ee0 <siprintf+0x38>)
 8013eba:	9107      	str	r1, [sp, #28]
 8013ebc:	9104      	str	r1, [sp, #16]
 8013ebe:	4909      	ldr	r1, [pc, #36]	; (8013ee4 <siprintf+0x3c>)
 8013ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ec4:	9105      	str	r1, [sp, #20]
 8013ec6:	6800      	ldr	r0, [r0, #0]
 8013ec8:	9301      	str	r3, [sp, #4]
 8013eca:	a902      	add	r1, sp, #8
 8013ecc:	f003 f8da 	bl	8017084 <_svfiprintf_r>
 8013ed0:	9b02      	ldr	r3, [sp, #8]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	701a      	strb	r2, [r3, #0]
 8013ed6:	b01c      	add	sp, #112	; 0x70
 8013ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013edc:	b003      	add	sp, #12
 8013ede:	4770      	bx	lr
 8013ee0:	2000000c 	.word	0x2000000c
 8013ee4:	ffff0208 	.word	0xffff0208

08013ee8 <siscanf>:
 8013ee8:	b40e      	push	{r1, r2, r3}
 8013eea:	b530      	push	{r4, r5, lr}
 8013eec:	b09c      	sub	sp, #112	; 0x70
 8013eee:	ac1f      	add	r4, sp, #124	; 0x7c
 8013ef0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013ef4:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ef8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013efc:	9002      	str	r0, [sp, #8]
 8013efe:	9006      	str	r0, [sp, #24]
 8013f00:	f7ec f97e 	bl	8000200 <strlen>
 8013f04:	4b0b      	ldr	r3, [pc, #44]	; (8013f34 <siscanf+0x4c>)
 8013f06:	9003      	str	r0, [sp, #12]
 8013f08:	9007      	str	r0, [sp, #28]
 8013f0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013f0c:	480a      	ldr	r0, [pc, #40]	; (8013f38 <siscanf+0x50>)
 8013f0e:	9401      	str	r4, [sp, #4]
 8013f10:	2300      	movs	r3, #0
 8013f12:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f14:	9314      	str	r3, [sp, #80]	; 0x50
 8013f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f1a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f1e:	462a      	mov	r2, r5
 8013f20:	4623      	mov	r3, r4
 8013f22:	a902      	add	r1, sp, #8
 8013f24:	6800      	ldr	r0, [r0, #0]
 8013f26:	f003 f9ff 	bl	8017328 <__ssvfiscanf_r>
 8013f2a:	b01c      	add	sp, #112	; 0x70
 8013f2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f30:	b003      	add	sp, #12
 8013f32:	4770      	bx	lr
 8013f34:	08013f5f 	.word	0x08013f5f
 8013f38:	2000000c 	.word	0x2000000c

08013f3c <__sread>:
 8013f3c:	b510      	push	{r4, lr}
 8013f3e:	460c      	mov	r4, r1
 8013f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f44:	f003 fe0e 	bl	8017b64 <_read_r>
 8013f48:	2800      	cmp	r0, #0
 8013f4a:	bfab      	itete	ge
 8013f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8013f50:	181b      	addge	r3, r3, r0
 8013f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f56:	bfac      	ite	ge
 8013f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f5a:	81a3      	strhlt	r3, [r4, #12]
 8013f5c:	bd10      	pop	{r4, pc}

08013f5e <__seofread>:
 8013f5e:	2000      	movs	r0, #0
 8013f60:	4770      	bx	lr

08013f62 <__swrite>:
 8013f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f66:	461f      	mov	r7, r3
 8013f68:	898b      	ldrh	r3, [r1, #12]
 8013f6a:	05db      	lsls	r3, r3, #23
 8013f6c:	4605      	mov	r5, r0
 8013f6e:	460c      	mov	r4, r1
 8013f70:	4616      	mov	r6, r2
 8013f72:	d505      	bpl.n	8013f80 <__swrite+0x1e>
 8013f74:	2302      	movs	r3, #2
 8013f76:	2200      	movs	r2, #0
 8013f78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f7c:	f002 fae2 	bl	8016544 <_lseek_r>
 8013f80:	89a3      	ldrh	r3, [r4, #12]
 8013f82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f8a:	81a3      	strh	r3, [r4, #12]
 8013f8c:	4632      	mov	r2, r6
 8013f8e:	463b      	mov	r3, r7
 8013f90:	4628      	mov	r0, r5
 8013f92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f96:	f000 bf3f 	b.w	8014e18 <_write_r>

08013f9a <__sseek>:
 8013f9a:	b510      	push	{r4, lr}
 8013f9c:	460c      	mov	r4, r1
 8013f9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fa2:	f002 facf 	bl	8016544 <_lseek_r>
 8013fa6:	1c43      	adds	r3, r0, #1
 8013fa8:	89a3      	ldrh	r3, [r4, #12]
 8013faa:	bf15      	itete	ne
 8013fac:	6560      	strne	r0, [r4, #84]	; 0x54
 8013fae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013fb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013fb6:	81a3      	strheq	r3, [r4, #12]
 8013fb8:	bf18      	it	ne
 8013fba:	81a3      	strhne	r3, [r4, #12]
 8013fbc:	bd10      	pop	{r4, pc}

08013fbe <__sclose>:
 8013fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fc2:	f000 bfa9 	b.w	8014f18 <_close_r>

08013fc6 <strcpy>:
 8013fc6:	4603      	mov	r3, r0
 8013fc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013fcc:	f803 2b01 	strb.w	r2, [r3], #1
 8013fd0:	2a00      	cmp	r2, #0
 8013fd2:	d1f9      	bne.n	8013fc8 <strcpy+0x2>
 8013fd4:	4770      	bx	lr

08013fd6 <sulp>:
 8013fd6:	b570      	push	{r4, r5, r6, lr}
 8013fd8:	4604      	mov	r4, r0
 8013fda:	460d      	mov	r5, r1
 8013fdc:	ec45 4b10 	vmov	d0, r4, r5
 8013fe0:	4616      	mov	r6, r2
 8013fe2:	f002 fe0b 	bl	8016bfc <__ulp>
 8013fe6:	ec51 0b10 	vmov	r0, r1, d0
 8013fea:	b17e      	cbz	r6, 801400c <sulp+0x36>
 8013fec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013ff0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dd09      	ble.n	801400c <sulp+0x36>
 8013ff8:	051b      	lsls	r3, r3, #20
 8013ffa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013ffe:	2400      	movs	r4, #0
 8014000:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014004:	4622      	mov	r2, r4
 8014006:	462b      	mov	r3, r5
 8014008:	f7ec fb0e 	bl	8000628 <__aeabi_dmul>
 801400c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014010 <_strtod_l>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	461f      	mov	r7, r3
 8014016:	b0a1      	sub	sp, #132	; 0x84
 8014018:	2300      	movs	r3, #0
 801401a:	4681      	mov	r9, r0
 801401c:	4638      	mov	r0, r7
 801401e:	460e      	mov	r6, r1
 8014020:	9217      	str	r2, [sp, #92]	; 0x5c
 8014022:	931c      	str	r3, [sp, #112]	; 0x70
 8014024:	f002 fa7e 	bl	8016524 <__localeconv_l>
 8014028:	4680      	mov	r8, r0
 801402a:	6800      	ldr	r0, [r0, #0]
 801402c:	f7ec f8e8 	bl	8000200 <strlen>
 8014030:	f04f 0a00 	mov.w	sl, #0
 8014034:	4604      	mov	r4, r0
 8014036:	f04f 0b00 	mov.w	fp, #0
 801403a:	961b      	str	r6, [sp, #108]	; 0x6c
 801403c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801403e:	781a      	ldrb	r2, [r3, #0]
 8014040:	2a0d      	cmp	r2, #13
 8014042:	d832      	bhi.n	80140aa <_strtod_l+0x9a>
 8014044:	2a09      	cmp	r2, #9
 8014046:	d236      	bcs.n	80140b6 <_strtod_l+0xa6>
 8014048:	2a00      	cmp	r2, #0
 801404a:	d03e      	beq.n	80140ca <_strtod_l+0xba>
 801404c:	2300      	movs	r3, #0
 801404e:	930d      	str	r3, [sp, #52]	; 0x34
 8014050:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014052:	782b      	ldrb	r3, [r5, #0]
 8014054:	2b30      	cmp	r3, #48	; 0x30
 8014056:	f040 80ac 	bne.w	80141b2 <_strtod_l+0x1a2>
 801405a:	786b      	ldrb	r3, [r5, #1]
 801405c:	2b58      	cmp	r3, #88	; 0x58
 801405e:	d001      	beq.n	8014064 <_strtod_l+0x54>
 8014060:	2b78      	cmp	r3, #120	; 0x78
 8014062:	d167      	bne.n	8014134 <_strtod_l+0x124>
 8014064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014066:	9301      	str	r3, [sp, #4]
 8014068:	ab1c      	add	r3, sp, #112	; 0x70
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	9702      	str	r7, [sp, #8]
 801406e:	ab1d      	add	r3, sp, #116	; 0x74
 8014070:	4a88      	ldr	r2, [pc, #544]	; (8014294 <_strtod_l+0x284>)
 8014072:	a91b      	add	r1, sp, #108	; 0x6c
 8014074:	4648      	mov	r0, r9
 8014076:	f001 ff6c 	bl	8015f52 <__gethex>
 801407a:	f010 0407 	ands.w	r4, r0, #7
 801407e:	4606      	mov	r6, r0
 8014080:	d005      	beq.n	801408e <_strtod_l+0x7e>
 8014082:	2c06      	cmp	r4, #6
 8014084:	d12b      	bne.n	80140de <_strtod_l+0xce>
 8014086:	3501      	adds	r5, #1
 8014088:	2300      	movs	r3, #0
 801408a:	951b      	str	r5, [sp, #108]	; 0x6c
 801408c:	930d      	str	r3, [sp, #52]	; 0x34
 801408e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014090:	2b00      	cmp	r3, #0
 8014092:	f040 859a 	bne.w	8014bca <_strtod_l+0xbba>
 8014096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014098:	b1e3      	cbz	r3, 80140d4 <_strtod_l+0xc4>
 801409a:	4652      	mov	r2, sl
 801409c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80140a0:	ec43 2b10 	vmov	d0, r2, r3
 80140a4:	b021      	add	sp, #132	; 0x84
 80140a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140aa:	2a2b      	cmp	r2, #43	; 0x2b
 80140ac:	d015      	beq.n	80140da <_strtod_l+0xca>
 80140ae:	2a2d      	cmp	r2, #45	; 0x2d
 80140b0:	d004      	beq.n	80140bc <_strtod_l+0xac>
 80140b2:	2a20      	cmp	r2, #32
 80140b4:	d1ca      	bne.n	801404c <_strtod_l+0x3c>
 80140b6:	3301      	adds	r3, #1
 80140b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80140ba:	e7bf      	b.n	801403c <_strtod_l+0x2c>
 80140bc:	2201      	movs	r2, #1
 80140be:	920d      	str	r2, [sp, #52]	; 0x34
 80140c0:	1c5a      	adds	r2, r3, #1
 80140c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80140c4:	785b      	ldrb	r3, [r3, #1]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d1c2      	bne.n	8014050 <_strtod_l+0x40>
 80140ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80140cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	f040 8579 	bne.w	8014bc6 <_strtod_l+0xbb6>
 80140d4:	4652      	mov	r2, sl
 80140d6:	465b      	mov	r3, fp
 80140d8:	e7e2      	b.n	80140a0 <_strtod_l+0x90>
 80140da:	2200      	movs	r2, #0
 80140dc:	e7ef      	b.n	80140be <_strtod_l+0xae>
 80140de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80140e0:	b13a      	cbz	r2, 80140f2 <_strtod_l+0xe2>
 80140e2:	2135      	movs	r1, #53	; 0x35
 80140e4:	a81e      	add	r0, sp, #120	; 0x78
 80140e6:	f002 fe81 	bl	8016dec <__copybits>
 80140ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80140ec:	4648      	mov	r0, r9
 80140ee:	f002 faed 	bl	80166cc <_Bfree>
 80140f2:	3c01      	subs	r4, #1
 80140f4:	2c04      	cmp	r4, #4
 80140f6:	d806      	bhi.n	8014106 <_strtod_l+0xf6>
 80140f8:	e8df f004 	tbb	[pc, r4]
 80140fc:	1714030a 	.word	0x1714030a
 8014100:	0a          	.byte	0x0a
 8014101:	00          	.byte	0x00
 8014102:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014106:	0730      	lsls	r0, r6, #28
 8014108:	d5c1      	bpl.n	801408e <_strtod_l+0x7e>
 801410a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801410e:	e7be      	b.n	801408e <_strtod_l+0x7e>
 8014110:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014114:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014116:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801411a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801411e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014122:	e7f0      	b.n	8014106 <_strtod_l+0xf6>
 8014124:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014298 <_strtod_l+0x288>
 8014128:	e7ed      	b.n	8014106 <_strtod_l+0xf6>
 801412a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801412e:	f04f 3aff 	mov.w	sl, #4294967295
 8014132:	e7e8      	b.n	8014106 <_strtod_l+0xf6>
 8014134:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014136:	1c5a      	adds	r2, r3, #1
 8014138:	921b      	str	r2, [sp, #108]	; 0x6c
 801413a:	785b      	ldrb	r3, [r3, #1]
 801413c:	2b30      	cmp	r3, #48	; 0x30
 801413e:	d0f9      	beq.n	8014134 <_strtod_l+0x124>
 8014140:	2b00      	cmp	r3, #0
 8014142:	d0a4      	beq.n	801408e <_strtod_l+0x7e>
 8014144:	2301      	movs	r3, #1
 8014146:	2500      	movs	r5, #0
 8014148:	9306      	str	r3, [sp, #24]
 801414a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801414c:	9308      	str	r3, [sp, #32]
 801414e:	9507      	str	r5, [sp, #28]
 8014150:	9505      	str	r5, [sp, #20]
 8014152:	220a      	movs	r2, #10
 8014154:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014156:	7807      	ldrb	r7, [r0, #0]
 8014158:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801415c:	b2d9      	uxtb	r1, r3
 801415e:	2909      	cmp	r1, #9
 8014160:	d929      	bls.n	80141b6 <_strtod_l+0x1a6>
 8014162:	4622      	mov	r2, r4
 8014164:	f8d8 1000 	ldr.w	r1, [r8]
 8014168:	f003 fd50 	bl	8017c0c <strncmp>
 801416c:	2800      	cmp	r0, #0
 801416e:	d031      	beq.n	80141d4 <_strtod_l+0x1c4>
 8014170:	2000      	movs	r0, #0
 8014172:	9c05      	ldr	r4, [sp, #20]
 8014174:	9004      	str	r0, [sp, #16]
 8014176:	463b      	mov	r3, r7
 8014178:	4602      	mov	r2, r0
 801417a:	2b65      	cmp	r3, #101	; 0x65
 801417c:	d001      	beq.n	8014182 <_strtod_l+0x172>
 801417e:	2b45      	cmp	r3, #69	; 0x45
 8014180:	d114      	bne.n	80141ac <_strtod_l+0x19c>
 8014182:	b924      	cbnz	r4, 801418e <_strtod_l+0x17e>
 8014184:	b910      	cbnz	r0, 801418c <_strtod_l+0x17c>
 8014186:	9b06      	ldr	r3, [sp, #24]
 8014188:	2b00      	cmp	r3, #0
 801418a:	d09e      	beq.n	80140ca <_strtod_l+0xba>
 801418c:	2400      	movs	r4, #0
 801418e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014190:	1c73      	adds	r3, r6, #1
 8014192:	931b      	str	r3, [sp, #108]	; 0x6c
 8014194:	7873      	ldrb	r3, [r6, #1]
 8014196:	2b2b      	cmp	r3, #43	; 0x2b
 8014198:	d078      	beq.n	801428c <_strtod_l+0x27c>
 801419a:	2b2d      	cmp	r3, #45	; 0x2d
 801419c:	d070      	beq.n	8014280 <_strtod_l+0x270>
 801419e:	f04f 0c00 	mov.w	ip, #0
 80141a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80141a6:	2f09      	cmp	r7, #9
 80141a8:	d97c      	bls.n	80142a4 <_strtod_l+0x294>
 80141aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80141ac:	f04f 0e00 	mov.w	lr, #0
 80141b0:	e09a      	b.n	80142e8 <_strtod_l+0x2d8>
 80141b2:	2300      	movs	r3, #0
 80141b4:	e7c7      	b.n	8014146 <_strtod_l+0x136>
 80141b6:	9905      	ldr	r1, [sp, #20]
 80141b8:	2908      	cmp	r1, #8
 80141ba:	bfdd      	ittte	le
 80141bc:	9907      	ldrle	r1, [sp, #28]
 80141be:	fb02 3301 	mlale	r3, r2, r1, r3
 80141c2:	9307      	strle	r3, [sp, #28]
 80141c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80141c8:	9b05      	ldr	r3, [sp, #20]
 80141ca:	3001      	adds	r0, #1
 80141cc:	3301      	adds	r3, #1
 80141ce:	9305      	str	r3, [sp, #20]
 80141d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80141d2:	e7bf      	b.n	8014154 <_strtod_l+0x144>
 80141d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141d6:	191a      	adds	r2, r3, r4
 80141d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80141da:	9a05      	ldr	r2, [sp, #20]
 80141dc:	5d1b      	ldrb	r3, [r3, r4]
 80141de:	2a00      	cmp	r2, #0
 80141e0:	d037      	beq.n	8014252 <_strtod_l+0x242>
 80141e2:	9c05      	ldr	r4, [sp, #20]
 80141e4:	4602      	mov	r2, r0
 80141e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80141ea:	2909      	cmp	r1, #9
 80141ec:	d913      	bls.n	8014216 <_strtod_l+0x206>
 80141ee:	2101      	movs	r1, #1
 80141f0:	9104      	str	r1, [sp, #16]
 80141f2:	e7c2      	b.n	801417a <_strtod_l+0x16a>
 80141f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141f6:	1c5a      	adds	r2, r3, #1
 80141f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80141fa:	785b      	ldrb	r3, [r3, #1]
 80141fc:	3001      	adds	r0, #1
 80141fe:	2b30      	cmp	r3, #48	; 0x30
 8014200:	d0f8      	beq.n	80141f4 <_strtod_l+0x1e4>
 8014202:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014206:	2a08      	cmp	r2, #8
 8014208:	f200 84e4 	bhi.w	8014bd4 <_strtod_l+0xbc4>
 801420c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801420e:	9208      	str	r2, [sp, #32]
 8014210:	4602      	mov	r2, r0
 8014212:	2000      	movs	r0, #0
 8014214:	4604      	mov	r4, r0
 8014216:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801421a:	f100 0101 	add.w	r1, r0, #1
 801421e:	d012      	beq.n	8014246 <_strtod_l+0x236>
 8014220:	440a      	add	r2, r1
 8014222:	eb00 0c04 	add.w	ip, r0, r4
 8014226:	4621      	mov	r1, r4
 8014228:	270a      	movs	r7, #10
 801422a:	458c      	cmp	ip, r1
 801422c:	d113      	bne.n	8014256 <_strtod_l+0x246>
 801422e:	1821      	adds	r1, r4, r0
 8014230:	2908      	cmp	r1, #8
 8014232:	f104 0401 	add.w	r4, r4, #1
 8014236:	4404      	add	r4, r0
 8014238:	dc19      	bgt.n	801426e <_strtod_l+0x25e>
 801423a:	9b07      	ldr	r3, [sp, #28]
 801423c:	210a      	movs	r1, #10
 801423e:	fb01 e303 	mla	r3, r1, r3, lr
 8014242:	9307      	str	r3, [sp, #28]
 8014244:	2100      	movs	r1, #0
 8014246:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014248:	1c58      	adds	r0, r3, #1
 801424a:	901b      	str	r0, [sp, #108]	; 0x6c
 801424c:	785b      	ldrb	r3, [r3, #1]
 801424e:	4608      	mov	r0, r1
 8014250:	e7c9      	b.n	80141e6 <_strtod_l+0x1d6>
 8014252:	9805      	ldr	r0, [sp, #20]
 8014254:	e7d3      	b.n	80141fe <_strtod_l+0x1ee>
 8014256:	2908      	cmp	r1, #8
 8014258:	f101 0101 	add.w	r1, r1, #1
 801425c:	dc03      	bgt.n	8014266 <_strtod_l+0x256>
 801425e:	9b07      	ldr	r3, [sp, #28]
 8014260:	437b      	muls	r3, r7
 8014262:	9307      	str	r3, [sp, #28]
 8014264:	e7e1      	b.n	801422a <_strtod_l+0x21a>
 8014266:	2910      	cmp	r1, #16
 8014268:	bfd8      	it	le
 801426a:	437d      	mulle	r5, r7
 801426c:	e7dd      	b.n	801422a <_strtod_l+0x21a>
 801426e:	2c10      	cmp	r4, #16
 8014270:	bfdc      	itt	le
 8014272:	210a      	movle	r1, #10
 8014274:	fb01 e505 	mlale	r5, r1, r5, lr
 8014278:	e7e4      	b.n	8014244 <_strtod_l+0x234>
 801427a:	2301      	movs	r3, #1
 801427c:	9304      	str	r3, [sp, #16]
 801427e:	e781      	b.n	8014184 <_strtod_l+0x174>
 8014280:	f04f 0c01 	mov.w	ip, #1
 8014284:	1cb3      	adds	r3, r6, #2
 8014286:	931b      	str	r3, [sp, #108]	; 0x6c
 8014288:	78b3      	ldrb	r3, [r6, #2]
 801428a:	e78a      	b.n	80141a2 <_strtod_l+0x192>
 801428c:	f04f 0c00 	mov.w	ip, #0
 8014290:	e7f8      	b.n	8014284 <_strtod_l+0x274>
 8014292:	bf00      	nop
 8014294:	080186d4 	.word	0x080186d4
 8014298:	7ff00000 	.word	0x7ff00000
 801429c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801429e:	1c5f      	adds	r7, r3, #1
 80142a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80142a2:	785b      	ldrb	r3, [r3, #1]
 80142a4:	2b30      	cmp	r3, #48	; 0x30
 80142a6:	d0f9      	beq.n	801429c <_strtod_l+0x28c>
 80142a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80142ac:	2f08      	cmp	r7, #8
 80142ae:	f63f af7d 	bhi.w	80141ac <_strtod_l+0x19c>
 80142b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80142b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142b8:	930a      	str	r3, [sp, #40]	; 0x28
 80142ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142bc:	1c5f      	adds	r7, r3, #1
 80142be:	971b      	str	r7, [sp, #108]	; 0x6c
 80142c0:	785b      	ldrb	r3, [r3, #1]
 80142c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80142c6:	f1b8 0f09 	cmp.w	r8, #9
 80142ca:	d937      	bls.n	801433c <_strtod_l+0x32c>
 80142cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80142ce:	1a7f      	subs	r7, r7, r1
 80142d0:	2f08      	cmp	r7, #8
 80142d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80142d6:	dc37      	bgt.n	8014348 <_strtod_l+0x338>
 80142d8:	45be      	cmp	lr, r7
 80142da:	bfa8      	it	ge
 80142dc:	46be      	movge	lr, r7
 80142de:	f1bc 0f00 	cmp.w	ip, #0
 80142e2:	d001      	beq.n	80142e8 <_strtod_l+0x2d8>
 80142e4:	f1ce 0e00 	rsb	lr, lr, #0
 80142e8:	2c00      	cmp	r4, #0
 80142ea:	d151      	bne.n	8014390 <_strtod_l+0x380>
 80142ec:	2800      	cmp	r0, #0
 80142ee:	f47f aece 	bne.w	801408e <_strtod_l+0x7e>
 80142f2:	9a06      	ldr	r2, [sp, #24]
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	f47f aeca 	bne.w	801408e <_strtod_l+0x7e>
 80142fa:	9a04      	ldr	r2, [sp, #16]
 80142fc:	2a00      	cmp	r2, #0
 80142fe:	f47f aee4 	bne.w	80140ca <_strtod_l+0xba>
 8014302:	2b4e      	cmp	r3, #78	; 0x4e
 8014304:	d027      	beq.n	8014356 <_strtod_l+0x346>
 8014306:	dc21      	bgt.n	801434c <_strtod_l+0x33c>
 8014308:	2b49      	cmp	r3, #73	; 0x49
 801430a:	f47f aede 	bne.w	80140ca <_strtod_l+0xba>
 801430e:	49a0      	ldr	r1, [pc, #640]	; (8014590 <_strtod_l+0x580>)
 8014310:	a81b      	add	r0, sp, #108	; 0x6c
 8014312:	f002 f851 	bl	80163b8 <__match>
 8014316:	2800      	cmp	r0, #0
 8014318:	f43f aed7 	beq.w	80140ca <_strtod_l+0xba>
 801431c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801431e:	499d      	ldr	r1, [pc, #628]	; (8014594 <_strtod_l+0x584>)
 8014320:	3b01      	subs	r3, #1
 8014322:	a81b      	add	r0, sp, #108	; 0x6c
 8014324:	931b      	str	r3, [sp, #108]	; 0x6c
 8014326:	f002 f847 	bl	80163b8 <__match>
 801432a:	b910      	cbnz	r0, 8014332 <_strtod_l+0x322>
 801432c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801432e:	3301      	adds	r3, #1
 8014330:	931b      	str	r3, [sp, #108]	; 0x6c
 8014332:	f8df b274 	ldr.w	fp, [pc, #628]	; 80145a8 <_strtod_l+0x598>
 8014336:	f04f 0a00 	mov.w	sl, #0
 801433a:	e6a8      	b.n	801408e <_strtod_l+0x7e>
 801433c:	210a      	movs	r1, #10
 801433e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014342:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014346:	e7b8      	b.n	80142ba <_strtod_l+0x2aa>
 8014348:	46be      	mov	lr, r7
 801434a:	e7c8      	b.n	80142de <_strtod_l+0x2ce>
 801434c:	2b69      	cmp	r3, #105	; 0x69
 801434e:	d0de      	beq.n	801430e <_strtod_l+0x2fe>
 8014350:	2b6e      	cmp	r3, #110	; 0x6e
 8014352:	f47f aeba 	bne.w	80140ca <_strtod_l+0xba>
 8014356:	4990      	ldr	r1, [pc, #576]	; (8014598 <_strtod_l+0x588>)
 8014358:	a81b      	add	r0, sp, #108	; 0x6c
 801435a:	f002 f82d 	bl	80163b8 <__match>
 801435e:	2800      	cmp	r0, #0
 8014360:	f43f aeb3 	beq.w	80140ca <_strtod_l+0xba>
 8014364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	2b28      	cmp	r3, #40	; 0x28
 801436a:	d10e      	bne.n	801438a <_strtod_l+0x37a>
 801436c:	aa1e      	add	r2, sp, #120	; 0x78
 801436e:	498b      	ldr	r1, [pc, #556]	; (801459c <_strtod_l+0x58c>)
 8014370:	a81b      	add	r0, sp, #108	; 0x6c
 8014372:	f002 f835 	bl	80163e0 <__hexnan>
 8014376:	2805      	cmp	r0, #5
 8014378:	d107      	bne.n	801438a <_strtod_l+0x37a>
 801437a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801437c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014380:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014384:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014388:	e681      	b.n	801408e <_strtod_l+0x7e>
 801438a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80145b0 <_strtod_l+0x5a0>
 801438e:	e7d2      	b.n	8014336 <_strtod_l+0x326>
 8014390:	ebae 0302 	sub.w	r3, lr, r2
 8014394:	9306      	str	r3, [sp, #24]
 8014396:	9b05      	ldr	r3, [sp, #20]
 8014398:	9807      	ldr	r0, [sp, #28]
 801439a:	2b00      	cmp	r3, #0
 801439c:	bf08      	it	eq
 801439e:	4623      	moveq	r3, r4
 80143a0:	2c10      	cmp	r4, #16
 80143a2:	9305      	str	r3, [sp, #20]
 80143a4:	46a0      	mov	r8, r4
 80143a6:	bfa8      	it	ge
 80143a8:	f04f 0810 	movge.w	r8, #16
 80143ac:	f7ec f8c2 	bl	8000534 <__aeabi_ui2d>
 80143b0:	2c09      	cmp	r4, #9
 80143b2:	4682      	mov	sl, r0
 80143b4:	468b      	mov	fp, r1
 80143b6:	dc13      	bgt.n	80143e0 <_strtod_l+0x3d0>
 80143b8:	9b06      	ldr	r3, [sp, #24]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	f43f ae67 	beq.w	801408e <_strtod_l+0x7e>
 80143c0:	9b06      	ldr	r3, [sp, #24]
 80143c2:	dd7a      	ble.n	80144ba <_strtod_l+0x4aa>
 80143c4:	2b16      	cmp	r3, #22
 80143c6:	dc61      	bgt.n	801448c <_strtod_l+0x47c>
 80143c8:	4a75      	ldr	r2, [pc, #468]	; (80145a0 <_strtod_l+0x590>)
 80143ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80143ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80143d2:	4652      	mov	r2, sl
 80143d4:	465b      	mov	r3, fp
 80143d6:	f7ec f927 	bl	8000628 <__aeabi_dmul>
 80143da:	4682      	mov	sl, r0
 80143dc:	468b      	mov	fp, r1
 80143de:	e656      	b.n	801408e <_strtod_l+0x7e>
 80143e0:	4b6f      	ldr	r3, [pc, #444]	; (80145a0 <_strtod_l+0x590>)
 80143e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80143e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80143ea:	f7ec f91d 	bl	8000628 <__aeabi_dmul>
 80143ee:	4606      	mov	r6, r0
 80143f0:	4628      	mov	r0, r5
 80143f2:	460f      	mov	r7, r1
 80143f4:	f7ec f89e 	bl	8000534 <__aeabi_ui2d>
 80143f8:	4602      	mov	r2, r0
 80143fa:	460b      	mov	r3, r1
 80143fc:	4630      	mov	r0, r6
 80143fe:	4639      	mov	r1, r7
 8014400:	f7eb ff5c 	bl	80002bc <__adddf3>
 8014404:	2c0f      	cmp	r4, #15
 8014406:	4682      	mov	sl, r0
 8014408:	468b      	mov	fp, r1
 801440a:	ddd5      	ble.n	80143b8 <_strtod_l+0x3a8>
 801440c:	9b06      	ldr	r3, [sp, #24]
 801440e:	eba4 0808 	sub.w	r8, r4, r8
 8014412:	4498      	add	r8, r3
 8014414:	f1b8 0f00 	cmp.w	r8, #0
 8014418:	f340 8096 	ble.w	8014548 <_strtod_l+0x538>
 801441c:	f018 030f 	ands.w	r3, r8, #15
 8014420:	d00a      	beq.n	8014438 <_strtod_l+0x428>
 8014422:	495f      	ldr	r1, [pc, #380]	; (80145a0 <_strtod_l+0x590>)
 8014424:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014428:	4652      	mov	r2, sl
 801442a:	465b      	mov	r3, fp
 801442c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014430:	f7ec f8fa 	bl	8000628 <__aeabi_dmul>
 8014434:	4682      	mov	sl, r0
 8014436:	468b      	mov	fp, r1
 8014438:	f038 080f 	bics.w	r8, r8, #15
 801443c:	d073      	beq.n	8014526 <_strtod_l+0x516>
 801443e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014442:	dd47      	ble.n	80144d4 <_strtod_l+0x4c4>
 8014444:	2400      	movs	r4, #0
 8014446:	46a0      	mov	r8, r4
 8014448:	9407      	str	r4, [sp, #28]
 801444a:	9405      	str	r4, [sp, #20]
 801444c:	2322      	movs	r3, #34	; 0x22
 801444e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80145a8 <_strtod_l+0x598>
 8014452:	f8c9 3000 	str.w	r3, [r9]
 8014456:	f04f 0a00 	mov.w	sl, #0
 801445a:	9b07      	ldr	r3, [sp, #28]
 801445c:	2b00      	cmp	r3, #0
 801445e:	f43f ae16 	beq.w	801408e <_strtod_l+0x7e>
 8014462:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014464:	4648      	mov	r0, r9
 8014466:	f002 f931 	bl	80166cc <_Bfree>
 801446a:	9905      	ldr	r1, [sp, #20]
 801446c:	4648      	mov	r0, r9
 801446e:	f002 f92d 	bl	80166cc <_Bfree>
 8014472:	4641      	mov	r1, r8
 8014474:	4648      	mov	r0, r9
 8014476:	f002 f929 	bl	80166cc <_Bfree>
 801447a:	9907      	ldr	r1, [sp, #28]
 801447c:	4648      	mov	r0, r9
 801447e:	f002 f925 	bl	80166cc <_Bfree>
 8014482:	4621      	mov	r1, r4
 8014484:	4648      	mov	r0, r9
 8014486:	f002 f921 	bl	80166cc <_Bfree>
 801448a:	e600      	b.n	801408e <_strtod_l+0x7e>
 801448c:	9a06      	ldr	r2, [sp, #24]
 801448e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014492:	4293      	cmp	r3, r2
 8014494:	dbba      	blt.n	801440c <_strtod_l+0x3fc>
 8014496:	4d42      	ldr	r5, [pc, #264]	; (80145a0 <_strtod_l+0x590>)
 8014498:	f1c4 040f 	rsb	r4, r4, #15
 801449c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80144a0:	4652      	mov	r2, sl
 80144a2:	465b      	mov	r3, fp
 80144a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144a8:	f7ec f8be 	bl	8000628 <__aeabi_dmul>
 80144ac:	9b06      	ldr	r3, [sp, #24]
 80144ae:	1b1c      	subs	r4, r3, r4
 80144b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80144b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144b8:	e78d      	b.n	80143d6 <_strtod_l+0x3c6>
 80144ba:	f113 0f16 	cmn.w	r3, #22
 80144be:	dba5      	blt.n	801440c <_strtod_l+0x3fc>
 80144c0:	4a37      	ldr	r2, [pc, #220]	; (80145a0 <_strtod_l+0x590>)
 80144c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80144c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80144ca:	4650      	mov	r0, sl
 80144cc:	4659      	mov	r1, fp
 80144ce:	f7ec f9d5 	bl	800087c <__aeabi_ddiv>
 80144d2:	e782      	b.n	80143da <_strtod_l+0x3ca>
 80144d4:	2300      	movs	r3, #0
 80144d6:	4e33      	ldr	r6, [pc, #204]	; (80145a4 <_strtod_l+0x594>)
 80144d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80144dc:	4650      	mov	r0, sl
 80144de:	4659      	mov	r1, fp
 80144e0:	461d      	mov	r5, r3
 80144e2:	f1b8 0f01 	cmp.w	r8, #1
 80144e6:	dc21      	bgt.n	801452c <_strtod_l+0x51c>
 80144e8:	b10b      	cbz	r3, 80144ee <_strtod_l+0x4de>
 80144ea:	4682      	mov	sl, r0
 80144ec:	468b      	mov	fp, r1
 80144ee:	4b2d      	ldr	r3, [pc, #180]	; (80145a4 <_strtod_l+0x594>)
 80144f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80144f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80144f8:	4652      	mov	r2, sl
 80144fa:	465b      	mov	r3, fp
 80144fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014500:	f7ec f892 	bl	8000628 <__aeabi_dmul>
 8014504:	4b28      	ldr	r3, [pc, #160]	; (80145a8 <_strtod_l+0x598>)
 8014506:	460a      	mov	r2, r1
 8014508:	400b      	ands	r3, r1
 801450a:	4928      	ldr	r1, [pc, #160]	; (80145ac <_strtod_l+0x59c>)
 801450c:	428b      	cmp	r3, r1
 801450e:	4682      	mov	sl, r0
 8014510:	d898      	bhi.n	8014444 <_strtod_l+0x434>
 8014512:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014516:	428b      	cmp	r3, r1
 8014518:	bf86      	itte	hi
 801451a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80145b4 <_strtod_l+0x5a4>
 801451e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014522:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014526:	2300      	movs	r3, #0
 8014528:	9304      	str	r3, [sp, #16]
 801452a:	e077      	b.n	801461c <_strtod_l+0x60c>
 801452c:	f018 0f01 	tst.w	r8, #1
 8014530:	d006      	beq.n	8014540 <_strtod_l+0x530>
 8014532:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	f7ec f875 	bl	8000628 <__aeabi_dmul>
 801453e:	2301      	movs	r3, #1
 8014540:	3501      	adds	r5, #1
 8014542:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014546:	e7cc      	b.n	80144e2 <_strtod_l+0x4d2>
 8014548:	d0ed      	beq.n	8014526 <_strtod_l+0x516>
 801454a:	f1c8 0800 	rsb	r8, r8, #0
 801454e:	f018 020f 	ands.w	r2, r8, #15
 8014552:	d00a      	beq.n	801456a <_strtod_l+0x55a>
 8014554:	4b12      	ldr	r3, [pc, #72]	; (80145a0 <_strtod_l+0x590>)
 8014556:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801455a:	4650      	mov	r0, sl
 801455c:	4659      	mov	r1, fp
 801455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014562:	f7ec f98b 	bl	800087c <__aeabi_ddiv>
 8014566:	4682      	mov	sl, r0
 8014568:	468b      	mov	fp, r1
 801456a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801456e:	d0da      	beq.n	8014526 <_strtod_l+0x516>
 8014570:	f1b8 0f1f 	cmp.w	r8, #31
 8014574:	dd20      	ble.n	80145b8 <_strtod_l+0x5a8>
 8014576:	2400      	movs	r4, #0
 8014578:	46a0      	mov	r8, r4
 801457a:	9407      	str	r4, [sp, #28]
 801457c:	9405      	str	r4, [sp, #20]
 801457e:	2322      	movs	r3, #34	; 0x22
 8014580:	f04f 0a00 	mov.w	sl, #0
 8014584:	f04f 0b00 	mov.w	fp, #0
 8014588:	f8c9 3000 	str.w	r3, [r9]
 801458c:	e765      	b.n	801445a <_strtod_l+0x44a>
 801458e:	bf00      	nop
 8014590:	080186a1 	.word	0x080186a1
 8014594:	0801872b 	.word	0x0801872b
 8014598:	080186a9 	.word	0x080186a9
 801459c:	080186e8 	.word	0x080186e8
 80145a0:	080187d0 	.word	0x080187d0
 80145a4:	080187a8 	.word	0x080187a8
 80145a8:	7ff00000 	.word	0x7ff00000
 80145ac:	7ca00000 	.word	0x7ca00000
 80145b0:	fff80000 	.word	0xfff80000
 80145b4:	7fefffff 	.word	0x7fefffff
 80145b8:	f018 0310 	ands.w	r3, r8, #16
 80145bc:	bf18      	it	ne
 80145be:	236a      	movne	r3, #106	; 0x6a
 80145c0:	4da0      	ldr	r5, [pc, #640]	; (8014844 <_strtod_l+0x834>)
 80145c2:	9304      	str	r3, [sp, #16]
 80145c4:	4650      	mov	r0, sl
 80145c6:	4659      	mov	r1, fp
 80145c8:	2300      	movs	r3, #0
 80145ca:	f1b8 0f00 	cmp.w	r8, #0
 80145ce:	f300 810a 	bgt.w	80147e6 <_strtod_l+0x7d6>
 80145d2:	b10b      	cbz	r3, 80145d8 <_strtod_l+0x5c8>
 80145d4:	4682      	mov	sl, r0
 80145d6:	468b      	mov	fp, r1
 80145d8:	9b04      	ldr	r3, [sp, #16]
 80145da:	b1bb      	cbz	r3, 801460c <_strtod_l+0x5fc>
 80145dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80145e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	4659      	mov	r1, fp
 80145e8:	dd10      	ble.n	801460c <_strtod_l+0x5fc>
 80145ea:	2b1f      	cmp	r3, #31
 80145ec:	f340 8107 	ble.w	80147fe <_strtod_l+0x7ee>
 80145f0:	2b34      	cmp	r3, #52	; 0x34
 80145f2:	bfde      	ittt	le
 80145f4:	3b20      	suble	r3, #32
 80145f6:	f04f 32ff 	movle.w	r2, #4294967295
 80145fa:	fa02 f303 	lslle.w	r3, r2, r3
 80145fe:	f04f 0a00 	mov.w	sl, #0
 8014602:	bfcc      	ite	gt
 8014604:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014608:	ea03 0b01 	andle.w	fp, r3, r1
 801460c:	2200      	movs	r2, #0
 801460e:	2300      	movs	r3, #0
 8014610:	4650      	mov	r0, sl
 8014612:	4659      	mov	r1, fp
 8014614:	f7ec fa70 	bl	8000af8 <__aeabi_dcmpeq>
 8014618:	2800      	cmp	r0, #0
 801461a:	d1ac      	bne.n	8014576 <_strtod_l+0x566>
 801461c:	9b07      	ldr	r3, [sp, #28]
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	9a05      	ldr	r2, [sp, #20]
 8014622:	9908      	ldr	r1, [sp, #32]
 8014624:	4623      	mov	r3, r4
 8014626:	4648      	mov	r0, r9
 8014628:	f002 f8a2 	bl	8016770 <__s2b>
 801462c:	9007      	str	r0, [sp, #28]
 801462e:	2800      	cmp	r0, #0
 8014630:	f43f af08 	beq.w	8014444 <_strtod_l+0x434>
 8014634:	9a06      	ldr	r2, [sp, #24]
 8014636:	9b06      	ldr	r3, [sp, #24]
 8014638:	2a00      	cmp	r2, #0
 801463a:	f1c3 0300 	rsb	r3, r3, #0
 801463e:	bfa8      	it	ge
 8014640:	2300      	movge	r3, #0
 8014642:	930e      	str	r3, [sp, #56]	; 0x38
 8014644:	2400      	movs	r4, #0
 8014646:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801464a:	9316      	str	r3, [sp, #88]	; 0x58
 801464c:	46a0      	mov	r8, r4
 801464e:	9b07      	ldr	r3, [sp, #28]
 8014650:	4648      	mov	r0, r9
 8014652:	6859      	ldr	r1, [r3, #4]
 8014654:	f002 f806 	bl	8016664 <_Balloc>
 8014658:	9005      	str	r0, [sp, #20]
 801465a:	2800      	cmp	r0, #0
 801465c:	f43f aef6 	beq.w	801444c <_strtod_l+0x43c>
 8014660:	9b07      	ldr	r3, [sp, #28]
 8014662:	691a      	ldr	r2, [r3, #16]
 8014664:	3202      	adds	r2, #2
 8014666:	f103 010c 	add.w	r1, r3, #12
 801466a:	0092      	lsls	r2, r2, #2
 801466c:	300c      	adds	r0, #12
 801466e:	f7fe fcff 	bl	8013070 <memcpy>
 8014672:	aa1e      	add	r2, sp, #120	; 0x78
 8014674:	a91d      	add	r1, sp, #116	; 0x74
 8014676:	ec4b ab10 	vmov	d0, sl, fp
 801467a:	4648      	mov	r0, r9
 801467c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014680:	f002 fb32 	bl	8016ce8 <__d2b>
 8014684:	901c      	str	r0, [sp, #112]	; 0x70
 8014686:	2800      	cmp	r0, #0
 8014688:	f43f aee0 	beq.w	801444c <_strtod_l+0x43c>
 801468c:	2101      	movs	r1, #1
 801468e:	4648      	mov	r0, r9
 8014690:	f002 f8fa 	bl	8016888 <__i2b>
 8014694:	4680      	mov	r8, r0
 8014696:	2800      	cmp	r0, #0
 8014698:	f43f aed8 	beq.w	801444c <_strtod_l+0x43c>
 801469c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801469e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80146a0:	2e00      	cmp	r6, #0
 80146a2:	bfab      	itete	ge
 80146a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80146a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80146a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80146aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80146ac:	bfac      	ite	ge
 80146ae:	18f7      	addge	r7, r6, r3
 80146b0:	1b9d      	sublt	r5, r3, r6
 80146b2:	9b04      	ldr	r3, [sp, #16]
 80146b4:	1af6      	subs	r6, r6, r3
 80146b6:	4416      	add	r6, r2
 80146b8:	4b63      	ldr	r3, [pc, #396]	; (8014848 <_strtod_l+0x838>)
 80146ba:	3e01      	subs	r6, #1
 80146bc:	429e      	cmp	r6, r3
 80146be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80146c2:	f280 80af 	bge.w	8014824 <_strtod_l+0x814>
 80146c6:	1b9b      	subs	r3, r3, r6
 80146c8:	2b1f      	cmp	r3, #31
 80146ca:	eba2 0203 	sub.w	r2, r2, r3
 80146ce:	f04f 0101 	mov.w	r1, #1
 80146d2:	f300 809b 	bgt.w	801480c <_strtod_l+0x7fc>
 80146d6:	fa01 f303 	lsl.w	r3, r1, r3
 80146da:	930f      	str	r3, [sp, #60]	; 0x3c
 80146dc:	2300      	movs	r3, #0
 80146de:	930a      	str	r3, [sp, #40]	; 0x28
 80146e0:	18be      	adds	r6, r7, r2
 80146e2:	9b04      	ldr	r3, [sp, #16]
 80146e4:	42b7      	cmp	r7, r6
 80146e6:	4415      	add	r5, r2
 80146e8:	441d      	add	r5, r3
 80146ea:	463b      	mov	r3, r7
 80146ec:	bfa8      	it	ge
 80146ee:	4633      	movge	r3, r6
 80146f0:	42ab      	cmp	r3, r5
 80146f2:	bfa8      	it	ge
 80146f4:	462b      	movge	r3, r5
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	bfc2      	ittt	gt
 80146fa:	1af6      	subgt	r6, r6, r3
 80146fc:	1aed      	subgt	r5, r5, r3
 80146fe:	1aff      	subgt	r7, r7, r3
 8014700:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014702:	b1bb      	cbz	r3, 8014734 <_strtod_l+0x724>
 8014704:	4641      	mov	r1, r8
 8014706:	461a      	mov	r2, r3
 8014708:	4648      	mov	r0, r9
 801470a:	f002 f95d 	bl	80169c8 <__pow5mult>
 801470e:	4680      	mov	r8, r0
 8014710:	2800      	cmp	r0, #0
 8014712:	f43f ae9b 	beq.w	801444c <_strtod_l+0x43c>
 8014716:	4601      	mov	r1, r0
 8014718:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801471a:	4648      	mov	r0, r9
 801471c:	f002 f8bd 	bl	801689a <__multiply>
 8014720:	900c      	str	r0, [sp, #48]	; 0x30
 8014722:	2800      	cmp	r0, #0
 8014724:	f43f ae92 	beq.w	801444c <_strtod_l+0x43c>
 8014728:	991c      	ldr	r1, [sp, #112]	; 0x70
 801472a:	4648      	mov	r0, r9
 801472c:	f001 ffce 	bl	80166cc <_Bfree>
 8014730:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014732:	931c      	str	r3, [sp, #112]	; 0x70
 8014734:	2e00      	cmp	r6, #0
 8014736:	dc7a      	bgt.n	801482e <_strtod_l+0x81e>
 8014738:	9b06      	ldr	r3, [sp, #24]
 801473a:	2b00      	cmp	r3, #0
 801473c:	dd08      	ble.n	8014750 <_strtod_l+0x740>
 801473e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014740:	9905      	ldr	r1, [sp, #20]
 8014742:	4648      	mov	r0, r9
 8014744:	f002 f940 	bl	80169c8 <__pow5mult>
 8014748:	9005      	str	r0, [sp, #20]
 801474a:	2800      	cmp	r0, #0
 801474c:	f43f ae7e 	beq.w	801444c <_strtod_l+0x43c>
 8014750:	2d00      	cmp	r5, #0
 8014752:	dd08      	ble.n	8014766 <_strtod_l+0x756>
 8014754:	462a      	mov	r2, r5
 8014756:	9905      	ldr	r1, [sp, #20]
 8014758:	4648      	mov	r0, r9
 801475a:	f002 f983 	bl	8016a64 <__lshift>
 801475e:	9005      	str	r0, [sp, #20]
 8014760:	2800      	cmp	r0, #0
 8014762:	f43f ae73 	beq.w	801444c <_strtod_l+0x43c>
 8014766:	2f00      	cmp	r7, #0
 8014768:	dd08      	ble.n	801477c <_strtod_l+0x76c>
 801476a:	4641      	mov	r1, r8
 801476c:	463a      	mov	r2, r7
 801476e:	4648      	mov	r0, r9
 8014770:	f002 f978 	bl	8016a64 <__lshift>
 8014774:	4680      	mov	r8, r0
 8014776:	2800      	cmp	r0, #0
 8014778:	f43f ae68 	beq.w	801444c <_strtod_l+0x43c>
 801477c:	9a05      	ldr	r2, [sp, #20]
 801477e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014780:	4648      	mov	r0, r9
 8014782:	f002 f9dd 	bl	8016b40 <__mdiff>
 8014786:	4604      	mov	r4, r0
 8014788:	2800      	cmp	r0, #0
 801478a:	f43f ae5f 	beq.w	801444c <_strtod_l+0x43c>
 801478e:	68c3      	ldr	r3, [r0, #12]
 8014790:	930c      	str	r3, [sp, #48]	; 0x30
 8014792:	2300      	movs	r3, #0
 8014794:	60c3      	str	r3, [r0, #12]
 8014796:	4641      	mov	r1, r8
 8014798:	f002 f9b8 	bl	8016b0c <__mcmp>
 801479c:	2800      	cmp	r0, #0
 801479e:	da55      	bge.n	801484c <_strtod_l+0x83c>
 80147a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147a2:	b9e3      	cbnz	r3, 80147de <_strtod_l+0x7ce>
 80147a4:	f1ba 0f00 	cmp.w	sl, #0
 80147a8:	d119      	bne.n	80147de <_strtod_l+0x7ce>
 80147aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80147ae:	b9b3      	cbnz	r3, 80147de <_strtod_l+0x7ce>
 80147b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80147b4:	0d1b      	lsrs	r3, r3, #20
 80147b6:	051b      	lsls	r3, r3, #20
 80147b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80147bc:	d90f      	bls.n	80147de <_strtod_l+0x7ce>
 80147be:	6963      	ldr	r3, [r4, #20]
 80147c0:	b913      	cbnz	r3, 80147c8 <_strtod_l+0x7b8>
 80147c2:	6923      	ldr	r3, [r4, #16]
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	dd0a      	ble.n	80147de <_strtod_l+0x7ce>
 80147c8:	4621      	mov	r1, r4
 80147ca:	2201      	movs	r2, #1
 80147cc:	4648      	mov	r0, r9
 80147ce:	f002 f949 	bl	8016a64 <__lshift>
 80147d2:	4641      	mov	r1, r8
 80147d4:	4604      	mov	r4, r0
 80147d6:	f002 f999 	bl	8016b0c <__mcmp>
 80147da:	2800      	cmp	r0, #0
 80147dc:	dc67      	bgt.n	80148ae <_strtod_l+0x89e>
 80147de:	9b04      	ldr	r3, [sp, #16]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d171      	bne.n	80148c8 <_strtod_l+0x8b8>
 80147e4:	e63d      	b.n	8014462 <_strtod_l+0x452>
 80147e6:	f018 0f01 	tst.w	r8, #1
 80147ea:	d004      	beq.n	80147f6 <_strtod_l+0x7e6>
 80147ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147f0:	f7eb ff1a 	bl	8000628 <__aeabi_dmul>
 80147f4:	2301      	movs	r3, #1
 80147f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80147fa:	3508      	adds	r5, #8
 80147fc:	e6e5      	b.n	80145ca <_strtod_l+0x5ba>
 80147fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014802:	fa02 f303 	lsl.w	r3, r2, r3
 8014806:	ea03 0a0a 	and.w	sl, r3, sl
 801480a:	e6ff      	b.n	801460c <_strtod_l+0x5fc>
 801480c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014810:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014814:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014818:	36e2      	adds	r6, #226	; 0xe2
 801481a:	fa01 f306 	lsl.w	r3, r1, r6
 801481e:	930a      	str	r3, [sp, #40]	; 0x28
 8014820:	910f      	str	r1, [sp, #60]	; 0x3c
 8014822:	e75d      	b.n	80146e0 <_strtod_l+0x6d0>
 8014824:	2300      	movs	r3, #0
 8014826:	930a      	str	r3, [sp, #40]	; 0x28
 8014828:	2301      	movs	r3, #1
 801482a:	930f      	str	r3, [sp, #60]	; 0x3c
 801482c:	e758      	b.n	80146e0 <_strtod_l+0x6d0>
 801482e:	4632      	mov	r2, r6
 8014830:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014832:	4648      	mov	r0, r9
 8014834:	f002 f916 	bl	8016a64 <__lshift>
 8014838:	901c      	str	r0, [sp, #112]	; 0x70
 801483a:	2800      	cmp	r0, #0
 801483c:	f47f af7c 	bne.w	8014738 <_strtod_l+0x728>
 8014840:	e604      	b.n	801444c <_strtod_l+0x43c>
 8014842:	bf00      	nop
 8014844:	08018700 	.word	0x08018700
 8014848:	fffffc02 	.word	0xfffffc02
 801484c:	465d      	mov	r5, fp
 801484e:	f040 8086 	bne.w	801495e <_strtod_l+0x94e>
 8014852:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014854:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014858:	b32a      	cbz	r2, 80148a6 <_strtod_l+0x896>
 801485a:	4aaf      	ldr	r2, [pc, #700]	; (8014b18 <_strtod_l+0xb08>)
 801485c:	4293      	cmp	r3, r2
 801485e:	d153      	bne.n	8014908 <_strtod_l+0x8f8>
 8014860:	9b04      	ldr	r3, [sp, #16]
 8014862:	4650      	mov	r0, sl
 8014864:	b1d3      	cbz	r3, 801489c <_strtod_l+0x88c>
 8014866:	4aad      	ldr	r2, [pc, #692]	; (8014b1c <_strtod_l+0xb0c>)
 8014868:	402a      	ands	r2, r5
 801486a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801486e:	f04f 31ff 	mov.w	r1, #4294967295
 8014872:	d816      	bhi.n	80148a2 <_strtod_l+0x892>
 8014874:	0d12      	lsrs	r2, r2, #20
 8014876:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801487a:	fa01 f303 	lsl.w	r3, r1, r3
 801487e:	4298      	cmp	r0, r3
 8014880:	d142      	bne.n	8014908 <_strtod_l+0x8f8>
 8014882:	4ba7      	ldr	r3, [pc, #668]	; (8014b20 <_strtod_l+0xb10>)
 8014884:	429d      	cmp	r5, r3
 8014886:	d102      	bne.n	801488e <_strtod_l+0x87e>
 8014888:	3001      	adds	r0, #1
 801488a:	f43f addf 	beq.w	801444c <_strtod_l+0x43c>
 801488e:	4ba3      	ldr	r3, [pc, #652]	; (8014b1c <_strtod_l+0xb0c>)
 8014890:	402b      	ands	r3, r5
 8014892:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014896:	f04f 0a00 	mov.w	sl, #0
 801489a:	e7a0      	b.n	80147de <_strtod_l+0x7ce>
 801489c:	f04f 33ff 	mov.w	r3, #4294967295
 80148a0:	e7ed      	b.n	801487e <_strtod_l+0x86e>
 80148a2:	460b      	mov	r3, r1
 80148a4:	e7eb      	b.n	801487e <_strtod_l+0x86e>
 80148a6:	bb7b      	cbnz	r3, 8014908 <_strtod_l+0x8f8>
 80148a8:	f1ba 0f00 	cmp.w	sl, #0
 80148ac:	d12c      	bne.n	8014908 <_strtod_l+0x8f8>
 80148ae:	9904      	ldr	r1, [sp, #16]
 80148b0:	4a9a      	ldr	r2, [pc, #616]	; (8014b1c <_strtod_l+0xb0c>)
 80148b2:	465b      	mov	r3, fp
 80148b4:	b1f1      	cbz	r1, 80148f4 <_strtod_l+0x8e4>
 80148b6:	ea02 010b 	and.w	r1, r2, fp
 80148ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80148be:	dc19      	bgt.n	80148f4 <_strtod_l+0x8e4>
 80148c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80148c4:	f77f ae5b 	ble.w	801457e <_strtod_l+0x56e>
 80148c8:	4a96      	ldr	r2, [pc, #600]	; (8014b24 <_strtod_l+0xb14>)
 80148ca:	2300      	movs	r3, #0
 80148cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80148d0:	4650      	mov	r0, sl
 80148d2:	4659      	mov	r1, fp
 80148d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80148d8:	f7eb fea6 	bl	8000628 <__aeabi_dmul>
 80148dc:	4682      	mov	sl, r0
 80148de:	468b      	mov	fp, r1
 80148e0:	2900      	cmp	r1, #0
 80148e2:	f47f adbe 	bne.w	8014462 <_strtod_l+0x452>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	f47f adbb 	bne.w	8014462 <_strtod_l+0x452>
 80148ec:	2322      	movs	r3, #34	; 0x22
 80148ee:	f8c9 3000 	str.w	r3, [r9]
 80148f2:	e5b6      	b.n	8014462 <_strtod_l+0x452>
 80148f4:	4013      	ands	r3, r2
 80148f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80148fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80148fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014902:	f04f 3aff 	mov.w	sl, #4294967295
 8014906:	e76a      	b.n	80147de <_strtod_l+0x7ce>
 8014908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801490a:	b193      	cbz	r3, 8014932 <_strtod_l+0x922>
 801490c:	422b      	tst	r3, r5
 801490e:	f43f af66 	beq.w	80147de <_strtod_l+0x7ce>
 8014912:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014914:	9a04      	ldr	r2, [sp, #16]
 8014916:	4650      	mov	r0, sl
 8014918:	4659      	mov	r1, fp
 801491a:	b173      	cbz	r3, 801493a <_strtod_l+0x92a>
 801491c:	f7ff fb5b 	bl	8013fd6 <sulp>
 8014920:	4602      	mov	r2, r0
 8014922:	460b      	mov	r3, r1
 8014924:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014928:	f7eb fcc8 	bl	80002bc <__adddf3>
 801492c:	4682      	mov	sl, r0
 801492e:	468b      	mov	fp, r1
 8014930:	e755      	b.n	80147de <_strtod_l+0x7ce>
 8014932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014934:	ea13 0f0a 	tst.w	r3, sl
 8014938:	e7e9      	b.n	801490e <_strtod_l+0x8fe>
 801493a:	f7ff fb4c 	bl	8013fd6 <sulp>
 801493e:	4602      	mov	r2, r0
 8014940:	460b      	mov	r3, r1
 8014942:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014946:	f7eb fcb7 	bl	80002b8 <__aeabi_dsub>
 801494a:	2200      	movs	r2, #0
 801494c:	2300      	movs	r3, #0
 801494e:	4682      	mov	sl, r0
 8014950:	468b      	mov	fp, r1
 8014952:	f7ec f8d1 	bl	8000af8 <__aeabi_dcmpeq>
 8014956:	2800      	cmp	r0, #0
 8014958:	f47f ae11 	bne.w	801457e <_strtod_l+0x56e>
 801495c:	e73f      	b.n	80147de <_strtod_l+0x7ce>
 801495e:	4641      	mov	r1, r8
 8014960:	4620      	mov	r0, r4
 8014962:	f002 fa10 	bl	8016d86 <__ratio>
 8014966:	ec57 6b10 	vmov	r6, r7, d0
 801496a:	2200      	movs	r2, #0
 801496c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014970:	ee10 0a10 	vmov	r0, s0
 8014974:	4639      	mov	r1, r7
 8014976:	f7ec f8d3 	bl	8000b20 <__aeabi_dcmple>
 801497a:	2800      	cmp	r0, #0
 801497c:	d077      	beq.n	8014a6e <_strtod_l+0xa5e>
 801497e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014980:	2b00      	cmp	r3, #0
 8014982:	d04a      	beq.n	8014a1a <_strtod_l+0xa0a>
 8014984:	4b68      	ldr	r3, [pc, #416]	; (8014b28 <_strtod_l+0xb18>)
 8014986:	2200      	movs	r2, #0
 8014988:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801498c:	4f66      	ldr	r7, [pc, #408]	; (8014b28 <_strtod_l+0xb18>)
 801498e:	2600      	movs	r6, #0
 8014990:	4b62      	ldr	r3, [pc, #392]	; (8014b1c <_strtod_l+0xb0c>)
 8014992:	402b      	ands	r3, r5
 8014994:	930f      	str	r3, [sp, #60]	; 0x3c
 8014996:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014998:	4b64      	ldr	r3, [pc, #400]	; (8014b2c <_strtod_l+0xb1c>)
 801499a:	429a      	cmp	r2, r3
 801499c:	f040 80ce 	bne.w	8014b3c <_strtod_l+0xb2c>
 80149a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80149a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80149a8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80149ac:	ec4b ab10 	vmov	d0, sl, fp
 80149b0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80149b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80149b8:	f002 f920 	bl	8016bfc <__ulp>
 80149bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80149c0:	ec53 2b10 	vmov	r2, r3, d0
 80149c4:	f7eb fe30 	bl	8000628 <__aeabi_dmul>
 80149c8:	4652      	mov	r2, sl
 80149ca:	465b      	mov	r3, fp
 80149cc:	f7eb fc76 	bl	80002bc <__adddf3>
 80149d0:	460b      	mov	r3, r1
 80149d2:	4952      	ldr	r1, [pc, #328]	; (8014b1c <_strtod_l+0xb0c>)
 80149d4:	4a56      	ldr	r2, [pc, #344]	; (8014b30 <_strtod_l+0xb20>)
 80149d6:	4019      	ands	r1, r3
 80149d8:	4291      	cmp	r1, r2
 80149da:	4682      	mov	sl, r0
 80149dc:	d95b      	bls.n	8014a96 <_strtod_l+0xa86>
 80149de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149e0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80149e4:	4293      	cmp	r3, r2
 80149e6:	d103      	bne.n	80149f0 <_strtod_l+0x9e0>
 80149e8:	9b08      	ldr	r3, [sp, #32]
 80149ea:	3301      	adds	r3, #1
 80149ec:	f43f ad2e 	beq.w	801444c <_strtod_l+0x43c>
 80149f0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014b20 <_strtod_l+0xb10>
 80149f4:	f04f 3aff 	mov.w	sl, #4294967295
 80149f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80149fa:	4648      	mov	r0, r9
 80149fc:	f001 fe66 	bl	80166cc <_Bfree>
 8014a00:	9905      	ldr	r1, [sp, #20]
 8014a02:	4648      	mov	r0, r9
 8014a04:	f001 fe62 	bl	80166cc <_Bfree>
 8014a08:	4641      	mov	r1, r8
 8014a0a:	4648      	mov	r0, r9
 8014a0c:	f001 fe5e 	bl	80166cc <_Bfree>
 8014a10:	4621      	mov	r1, r4
 8014a12:	4648      	mov	r0, r9
 8014a14:	f001 fe5a 	bl	80166cc <_Bfree>
 8014a18:	e619      	b.n	801464e <_strtod_l+0x63e>
 8014a1a:	f1ba 0f00 	cmp.w	sl, #0
 8014a1e:	d11a      	bne.n	8014a56 <_strtod_l+0xa46>
 8014a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014a24:	b9eb      	cbnz	r3, 8014a62 <_strtod_l+0xa52>
 8014a26:	2200      	movs	r2, #0
 8014a28:	4b3f      	ldr	r3, [pc, #252]	; (8014b28 <_strtod_l+0xb18>)
 8014a2a:	4630      	mov	r0, r6
 8014a2c:	4639      	mov	r1, r7
 8014a2e:	f7ec f86d 	bl	8000b0c <__aeabi_dcmplt>
 8014a32:	b9c8      	cbnz	r0, 8014a68 <_strtod_l+0xa58>
 8014a34:	4630      	mov	r0, r6
 8014a36:	4639      	mov	r1, r7
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4b3e      	ldr	r3, [pc, #248]	; (8014b34 <_strtod_l+0xb24>)
 8014a3c:	f7eb fdf4 	bl	8000628 <__aeabi_dmul>
 8014a40:	4606      	mov	r6, r0
 8014a42:	460f      	mov	r7, r1
 8014a44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014a48:	9618      	str	r6, [sp, #96]	; 0x60
 8014a4a:	9319      	str	r3, [sp, #100]	; 0x64
 8014a4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014a50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014a54:	e79c      	b.n	8014990 <_strtod_l+0x980>
 8014a56:	f1ba 0f01 	cmp.w	sl, #1
 8014a5a:	d102      	bne.n	8014a62 <_strtod_l+0xa52>
 8014a5c:	2d00      	cmp	r5, #0
 8014a5e:	f43f ad8e 	beq.w	801457e <_strtod_l+0x56e>
 8014a62:	2200      	movs	r2, #0
 8014a64:	4b34      	ldr	r3, [pc, #208]	; (8014b38 <_strtod_l+0xb28>)
 8014a66:	e78f      	b.n	8014988 <_strtod_l+0x978>
 8014a68:	2600      	movs	r6, #0
 8014a6a:	4f32      	ldr	r7, [pc, #200]	; (8014b34 <_strtod_l+0xb24>)
 8014a6c:	e7ea      	b.n	8014a44 <_strtod_l+0xa34>
 8014a6e:	4b31      	ldr	r3, [pc, #196]	; (8014b34 <_strtod_l+0xb24>)
 8014a70:	4630      	mov	r0, r6
 8014a72:	4639      	mov	r1, r7
 8014a74:	2200      	movs	r2, #0
 8014a76:	f7eb fdd7 	bl	8000628 <__aeabi_dmul>
 8014a7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	460f      	mov	r7, r1
 8014a80:	b933      	cbnz	r3, 8014a90 <_strtod_l+0xa80>
 8014a82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a86:	9010      	str	r0, [sp, #64]	; 0x40
 8014a88:	9311      	str	r3, [sp, #68]	; 0x44
 8014a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014a8e:	e7df      	b.n	8014a50 <_strtod_l+0xa40>
 8014a90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014a94:	e7f9      	b.n	8014a8a <_strtod_l+0xa7a>
 8014a96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014a9a:	9b04      	ldr	r3, [sp, #16]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d1ab      	bne.n	80149f8 <_strtod_l+0x9e8>
 8014aa0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014aa4:	0d1b      	lsrs	r3, r3, #20
 8014aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014aa8:	051b      	lsls	r3, r3, #20
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	465d      	mov	r5, fp
 8014aae:	d1a3      	bne.n	80149f8 <_strtod_l+0x9e8>
 8014ab0:	4639      	mov	r1, r7
 8014ab2:	4630      	mov	r0, r6
 8014ab4:	f7ec f868 	bl	8000b88 <__aeabi_d2iz>
 8014ab8:	f7eb fd4c 	bl	8000554 <__aeabi_i2d>
 8014abc:	460b      	mov	r3, r1
 8014abe:	4602      	mov	r2, r0
 8014ac0:	4639      	mov	r1, r7
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	f7eb fbf8 	bl	80002b8 <__aeabi_dsub>
 8014ac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aca:	4606      	mov	r6, r0
 8014acc:	460f      	mov	r7, r1
 8014ace:	b933      	cbnz	r3, 8014ade <_strtod_l+0xace>
 8014ad0:	f1ba 0f00 	cmp.w	sl, #0
 8014ad4:	d103      	bne.n	8014ade <_strtod_l+0xace>
 8014ad6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014ada:	2d00      	cmp	r5, #0
 8014adc:	d06d      	beq.n	8014bba <_strtod_l+0xbaa>
 8014ade:	a30a      	add	r3, pc, #40	; (adr r3, 8014b08 <_strtod_l+0xaf8>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	4630      	mov	r0, r6
 8014ae6:	4639      	mov	r1, r7
 8014ae8:	f7ec f810 	bl	8000b0c <__aeabi_dcmplt>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	f47f acb8 	bne.w	8014462 <_strtod_l+0x452>
 8014af2:	a307      	add	r3, pc, #28	; (adr r3, 8014b10 <_strtod_l+0xb00>)
 8014af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af8:	4630      	mov	r0, r6
 8014afa:	4639      	mov	r1, r7
 8014afc:	f7ec f824 	bl	8000b48 <__aeabi_dcmpgt>
 8014b00:	2800      	cmp	r0, #0
 8014b02:	f43f af79 	beq.w	80149f8 <_strtod_l+0x9e8>
 8014b06:	e4ac      	b.n	8014462 <_strtod_l+0x452>
 8014b08:	94a03595 	.word	0x94a03595
 8014b0c:	3fdfffff 	.word	0x3fdfffff
 8014b10:	35afe535 	.word	0x35afe535
 8014b14:	3fe00000 	.word	0x3fe00000
 8014b18:	000fffff 	.word	0x000fffff
 8014b1c:	7ff00000 	.word	0x7ff00000
 8014b20:	7fefffff 	.word	0x7fefffff
 8014b24:	39500000 	.word	0x39500000
 8014b28:	3ff00000 	.word	0x3ff00000
 8014b2c:	7fe00000 	.word	0x7fe00000
 8014b30:	7c9fffff 	.word	0x7c9fffff
 8014b34:	3fe00000 	.word	0x3fe00000
 8014b38:	bff00000 	.word	0xbff00000
 8014b3c:	9b04      	ldr	r3, [sp, #16]
 8014b3e:	b333      	cbz	r3, 8014b8e <_strtod_l+0xb7e>
 8014b40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014b42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014b46:	d822      	bhi.n	8014b8e <_strtod_l+0xb7e>
 8014b48:	a327      	add	r3, pc, #156	; (adr r3, 8014be8 <_strtod_l+0xbd8>)
 8014b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4e:	4630      	mov	r0, r6
 8014b50:	4639      	mov	r1, r7
 8014b52:	f7eb ffe5 	bl	8000b20 <__aeabi_dcmple>
 8014b56:	b1a0      	cbz	r0, 8014b82 <_strtod_l+0xb72>
 8014b58:	4639      	mov	r1, r7
 8014b5a:	4630      	mov	r0, r6
 8014b5c:	f7ec f83c 	bl	8000bd8 <__aeabi_d2uiz>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	bf08      	it	eq
 8014b64:	2001      	moveq	r0, #1
 8014b66:	f7eb fce5 	bl	8000534 <__aeabi_ui2d>
 8014b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b6c:	4606      	mov	r6, r0
 8014b6e:	460f      	mov	r7, r1
 8014b70:	bb03      	cbnz	r3, 8014bb4 <_strtod_l+0xba4>
 8014b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b76:	9012      	str	r0, [sp, #72]	; 0x48
 8014b78:	9313      	str	r3, [sp, #76]	; 0x4c
 8014b7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014b7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014b86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014b8a:	1a9b      	subs	r3, r3, r2
 8014b8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014b8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014b92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014b96:	f002 f831 	bl	8016bfc <__ulp>
 8014b9a:	4650      	mov	r0, sl
 8014b9c:	ec53 2b10 	vmov	r2, r3, d0
 8014ba0:	4659      	mov	r1, fp
 8014ba2:	f7eb fd41 	bl	8000628 <__aeabi_dmul>
 8014ba6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014baa:	f7eb fb87 	bl	80002bc <__adddf3>
 8014bae:	4682      	mov	sl, r0
 8014bb0:	468b      	mov	fp, r1
 8014bb2:	e772      	b.n	8014a9a <_strtod_l+0xa8a>
 8014bb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014bb8:	e7df      	b.n	8014b7a <_strtod_l+0xb6a>
 8014bba:	a30d      	add	r3, pc, #52	; (adr r3, 8014bf0 <_strtod_l+0xbe0>)
 8014bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc0:	f7eb ffa4 	bl	8000b0c <__aeabi_dcmplt>
 8014bc4:	e79c      	b.n	8014b00 <_strtod_l+0xaf0>
 8014bc6:	2300      	movs	r3, #0
 8014bc8:	930d      	str	r3, [sp, #52]	; 0x34
 8014bca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014bcc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014bce:	6013      	str	r3, [r2, #0]
 8014bd0:	f7ff ba61 	b.w	8014096 <_strtod_l+0x86>
 8014bd4:	2b65      	cmp	r3, #101	; 0x65
 8014bd6:	f04f 0200 	mov.w	r2, #0
 8014bda:	f43f ab4e 	beq.w	801427a <_strtod_l+0x26a>
 8014bde:	2101      	movs	r1, #1
 8014be0:	4614      	mov	r4, r2
 8014be2:	9104      	str	r1, [sp, #16]
 8014be4:	f7ff bacb 	b.w	801417e <_strtod_l+0x16e>
 8014be8:	ffc00000 	.word	0xffc00000
 8014bec:	41dfffff 	.word	0x41dfffff
 8014bf0:	94a03595 	.word	0x94a03595
 8014bf4:	3fcfffff 	.word	0x3fcfffff

08014bf8 <_strtod_r>:
 8014bf8:	4b05      	ldr	r3, [pc, #20]	; (8014c10 <_strtod_r+0x18>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	b410      	push	{r4}
 8014bfe:	6a1b      	ldr	r3, [r3, #32]
 8014c00:	4c04      	ldr	r4, [pc, #16]	; (8014c14 <_strtod_r+0x1c>)
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	bf08      	it	eq
 8014c06:	4623      	moveq	r3, r4
 8014c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c0c:	f7ff ba00 	b.w	8014010 <_strtod_l>
 8014c10:	2000000c 	.word	0x2000000c
 8014c14:	20000070 	.word	0x20000070

08014c18 <_strtol_l.isra.0>:
 8014c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c1c:	4680      	mov	r8, r0
 8014c1e:	4689      	mov	r9, r1
 8014c20:	4692      	mov	sl, r2
 8014c22:	461e      	mov	r6, r3
 8014c24:	460f      	mov	r7, r1
 8014c26:	463d      	mov	r5, r7
 8014c28:	9808      	ldr	r0, [sp, #32]
 8014c2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014c2e:	f001 fc67 	bl	8016500 <__locale_ctype_ptr_l>
 8014c32:	4420      	add	r0, r4
 8014c34:	7843      	ldrb	r3, [r0, #1]
 8014c36:	f013 0308 	ands.w	r3, r3, #8
 8014c3a:	d132      	bne.n	8014ca2 <_strtol_l.isra.0+0x8a>
 8014c3c:	2c2d      	cmp	r4, #45	; 0x2d
 8014c3e:	d132      	bne.n	8014ca6 <_strtol_l.isra.0+0x8e>
 8014c40:	787c      	ldrb	r4, [r7, #1]
 8014c42:	1cbd      	adds	r5, r7, #2
 8014c44:	2201      	movs	r2, #1
 8014c46:	2e00      	cmp	r6, #0
 8014c48:	d05d      	beq.n	8014d06 <_strtol_l.isra.0+0xee>
 8014c4a:	2e10      	cmp	r6, #16
 8014c4c:	d109      	bne.n	8014c62 <_strtol_l.isra.0+0x4a>
 8014c4e:	2c30      	cmp	r4, #48	; 0x30
 8014c50:	d107      	bne.n	8014c62 <_strtol_l.isra.0+0x4a>
 8014c52:	782b      	ldrb	r3, [r5, #0]
 8014c54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014c58:	2b58      	cmp	r3, #88	; 0x58
 8014c5a:	d14f      	bne.n	8014cfc <_strtol_l.isra.0+0xe4>
 8014c5c:	786c      	ldrb	r4, [r5, #1]
 8014c5e:	2610      	movs	r6, #16
 8014c60:	3502      	adds	r5, #2
 8014c62:	2a00      	cmp	r2, #0
 8014c64:	bf14      	ite	ne
 8014c66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014c6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014c6e:	2700      	movs	r7, #0
 8014c70:	fbb1 fcf6 	udiv	ip, r1, r6
 8014c74:	4638      	mov	r0, r7
 8014c76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014c7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014c7e:	2b09      	cmp	r3, #9
 8014c80:	d817      	bhi.n	8014cb2 <_strtol_l.isra.0+0x9a>
 8014c82:	461c      	mov	r4, r3
 8014c84:	42a6      	cmp	r6, r4
 8014c86:	dd23      	ble.n	8014cd0 <_strtol_l.isra.0+0xb8>
 8014c88:	1c7b      	adds	r3, r7, #1
 8014c8a:	d007      	beq.n	8014c9c <_strtol_l.isra.0+0x84>
 8014c8c:	4584      	cmp	ip, r0
 8014c8e:	d31c      	bcc.n	8014cca <_strtol_l.isra.0+0xb2>
 8014c90:	d101      	bne.n	8014c96 <_strtol_l.isra.0+0x7e>
 8014c92:	45a6      	cmp	lr, r4
 8014c94:	db19      	blt.n	8014cca <_strtol_l.isra.0+0xb2>
 8014c96:	fb00 4006 	mla	r0, r0, r6, r4
 8014c9a:	2701      	movs	r7, #1
 8014c9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014ca0:	e7eb      	b.n	8014c7a <_strtol_l.isra.0+0x62>
 8014ca2:	462f      	mov	r7, r5
 8014ca4:	e7bf      	b.n	8014c26 <_strtol_l.isra.0+0xe>
 8014ca6:	2c2b      	cmp	r4, #43	; 0x2b
 8014ca8:	bf04      	itt	eq
 8014caa:	1cbd      	addeq	r5, r7, #2
 8014cac:	787c      	ldrbeq	r4, [r7, #1]
 8014cae:	461a      	mov	r2, r3
 8014cb0:	e7c9      	b.n	8014c46 <_strtol_l.isra.0+0x2e>
 8014cb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014cb6:	2b19      	cmp	r3, #25
 8014cb8:	d801      	bhi.n	8014cbe <_strtol_l.isra.0+0xa6>
 8014cba:	3c37      	subs	r4, #55	; 0x37
 8014cbc:	e7e2      	b.n	8014c84 <_strtol_l.isra.0+0x6c>
 8014cbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014cc2:	2b19      	cmp	r3, #25
 8014cc4:	d804      	bhi.n	8014cd0 <_strtol_l.isra.0+0xb8>
 8014cc6:	3c57      	subs	r4, #87	; 0x57
 8014cc8:	e7dc      	b.n	8014c84 <_strtol_l.isra.0+0x6c>
 8014cca:	f04f 37ff 	mov.w	r7, #4294967295
 8014cce:	e7e5      	b.n	8014c9c <_strtol_l.isra.0+0x84>
 8014cd0:	1c7b      	adds	r3, r7, #1
 8014cd2:	d108      	bne.n	8014ce6 <_strtol_l.isra.0+0xce>
 8014cd4:	2322      	movs	r3, #34	; 0x22
 8014cd6:	f8c8 3000 	str.w	r3, [r8]
 8014cda:	4608      	mov	r0, r1
 8014cdc:	f1ba 0f00 	cmp.w	sl, #0
 8014ce0:	d107      	bne.n	8014cf2 <_strtol_l.isra.0+0xda>
 8014ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ce6:	b102      	cbz	r2, 8014cea <_strtol_l.isra.0+0xd2>
 8014ce8:	4240      	negs	r0, r0
 8014cea:	f1ba 0f00 	cmp.w	sl, #0
 8014cee:	d0f8      	beq.n	8014ce2 <_strtol_l.isra.0+0xca>
 8014cf0:	b10f      	cbz	r7, 8014cf6 <_strtol_l.isra.0+0xde>
 8014cf2:	f105 39ff 	add.w	r9, r5, #4294967295
 8014cf6:	f8ca 9000 	str.w	r9, [sl]
 8014cfa:	e7f2      	b.n	8014ce2 <_strtol_l.isra.0+0xca>
 8014cfc:	2430      	movs	r4, #48	; 0x30
 8014cfe:	2e00      	cmp	r6, #0
 8014d00:	d1af      	bne.n	8014c62 <_strtol_l.isra.0+0x4a>
 8014d02:	2608      	movs	r6, #8
 8014d04:	e7ad      	b.n	8014c62 <_strtol_l.isra.0+0x4a>
 8014d06:	2c30      	cmp	r4, #48	; 0x30
 8014d08:	d0a3      	beq.n	8014c52 <_strtol_l.isra.0+0x3a>
 8014d0a:	260a      	movs	r6, #10
 8014d0c:	e7a9      	b.n	8014c62 <_strtol_l.isra.0+0x4a>
	...

08014d10 <_strtol_r>:
 8014d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d12:	4c06      	ldr	r4, [pc, #24]	; (8014d2c <_strtol_r+0x1c>)
 8014d14:	4d06      	ldr	r5, [pc, #24]	; (8014d30 <_strtol_r+0x20>)
 8014d16:	6824      	ldr	r4, [r4, #0]
 8014d18:	6a24      	ldr	r4, [r4, #32]
 8014d1a:	2c00      	cmp	r4, #0
 8014d1c:	bf08      	it	eq
 8014d1e:	462c      	moveq	r4, r5
 8014d20:	9400      	str	r4, [sp, #0]
 8014d22:	f7ff ff79 	bl	8014c18 <_strtol_l.isra.0>
 8014d26:	b003      	add	sp, #12
 8014d28:	bd30      	pop	{r4, r5, pc}
 8014d2a:	bf00      	nop
 8014d2c:	2000000c 	.word	0x2000000c
 8014d30:	20000070 	.word	0x20000070

08014d34 <_vsiprintf_r>:
 8014d34:	b500      	push	{lr}
 8014d36:	b09b      	sub	sp, #108	; 0x6c
 8014d38:	9100      	str	r1, [sp, #0]
 8014d3a:	9104      	str	r1, [sp, #16]
 8014d3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014d40:	9105      	str	r1, [sp, #20]
 8014d42:	9102      	str	r1, [sp, #8]
 8014d44:	4905      	ldr	r1, [pc, #20]	; (8014d5c <_vsiprintf_r+0x28>)
 8014d46:	9103      	str	r1, [sp, #12]
 8014d48:	4669      	mov	r1, sp
 8014d4a:	f002 f99b 	bl	8017084 <_svfiprintf_r>
 8014d4e:	9b00      	ldr	r3, [sp, #0]
 8014d50:	2200      	movs	r2, #0
 8014d52:	701a      	strb	r2, [r3, #0]
 8014d54:	b01b      	add	sp, #108	; 0x6c
 8014d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d5a:	bf00      	nop
 8014d5c:	ffff0208 	.word	0xffff0208

08014d60 <vsiprintf>:
 8014d60:	4613      	mov	r3, r2
 8014d62:	460a      	mov	r2, r1
 8014d64:	4601      	mov	r1, r0
 8014d66:	4802      	ldr	r0, [pc, #8]	; (8014d70 <vsiprintf+0x10>)
 8014d68:	6800      	ldr	r0, [r0, #0]
 8014d6a:	f7ff bfe3 	b.w	8014d34 <_vsiprintf_r>
 8014d6e:	bf00      	nop
 8014d70:	2000000c 	.word	0x2000000c

08014d74 <__swbuf_r>:
 8014d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d76:	460e      	mov	r6, r1
 8014d78:	4614      	mov	r4, r2
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	b118      	cbz	r0, 8014d86 <__swbuf_r+0x12>
 8014d7e:	6983      	ldr	r3, [r0, #24]
 8014d80:	b90b      	cbnz	r3, 8014d86 <__swbuf_r+0x12>
 8014d82:	f001 f80d 	bl	8015da0 <__sinit>
 8014d86:	4b21      	ldr	r3, [pc, #132]	; (8014e0c <__swbuf_r+0x98>)
 8014d88:	429c      	cmp	r4, r3
 8014d8a:	d12a      	bne.n	8014de2 <__swbuf_r+0x6e>
 8014d8c:	686c      	ldr	r4, [r5, #4]
 8014d8e:	69a3      	ldr	r3, [r4, #24]
 8014d90:	60a3      	str	r3, [r4, #8]
 8014d92:	89a3      	ldrh	r3, [r4, #12]
 8014d94:	071a      	lsls	r2, r3, #28
 8014d96:	d52e      	bpl.n	8014df6 <__swbuf_r+0x82>
 8014d98:	6923      	ldr	r3, [r4, #16]
 8014d9a:	b363      	cbz	r3, 8014df6 <__swbuf_r+0x82>
 8014d9c:	6923      	ldr	r3, [r4, #16]
 8014d9e:	6820      	ldr	r0, [r4, #0]
 8014da0:	1ac0      	subs	r0, r0, r3
 8014da2:	6963      	ldr	r3, [r4, #20]
 8014da4:	b2f6      	uxtb	r6, r6
 8014da6:	4283      	cmp	r3, r0
 8014da8:	4637      	mov	r7, r6
 8014daa:	dc04      	bgt.n	8014db6 <__swbuf_r+0x42>
 8014dac:	4621      	mov	r1, r4
 8014dae:	4628      	mov	r0, r5
 8014db0:	f000 ff8c 	bl	8015ccc <_fflush_r>
 8014db4:	bb28      	cbnz	r0, 8014e02 <__swbuf_r+0x8e>
 8014db6:	68a3      	ldr	r3, [r4, #8]
 8014db8:	3b01      	subs	r3, #1
 8014dba:	60a3      	str	r3, [r4, #8]
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	1c5a      	adds	r2, r3, #1
 8014dc0:	6022      	str	r2, [r4, #0]
 8014dc2:	701e      	strb	r6, [r3, #0]
 8014dc4:	6963      	ldr	r3, [r4, #20]
 8014dc6:	3001      	adds	r0, #1
 8014dc8:	4283      	cmp	r3, r0
 8014dca:	d004      	beq.n	8014dd6 <__swbuf_r+0x62>
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	07db      	lsls	r3, r3, #31
 8014dd0:	d519      	bpl.n	8014e06 <__swbuf_r+0x92>
 8014dd2:	2e0a      	cmp	r6, #10
 8014dd4:	d117      	bne.n	8014e06 <__swbuf_r+0x92>
 8014dd6:	4621      	mov	r1, r4
 8014dd8:	4628      	mov	r0, r5
 8014dda:	f000 ff77 	bl	8015ccc <_fflush_r>
 8014dde:	b190      	cbz	r0, 8014e06 <__swbuf_r+0x92>
 8014de0:	e00f      	b.n	8014e02 <__swbuf_r+0x8e>
 8014de2:	4b0b      	ldr	r3, [pc, #44]	; (8014e10 <__swbuf_r+0x9c>)
 8014de4:	429c      	cmp	r4, r3
 8014de6:	d101      	bne.n	8014dec <__swbuf_r+0x78>
 8014de8:	68ac      	ldr	r4, [r5, #8]
 8014dea:	e7d0      	b.n	8014d8e <__swbuf_r+0x1a>
 8014dec:	4b09      	ldr	r3, [pc, #36]	; (8014e14 <__swbuf_r+0xa0>)
 8014dee:	429c      	cmp	r4, r3
 8014df0:	bf08      	it	eq
 8014df2:	68ec      	ldreq	r4, [r5, #12]
 8014df4:	e7cb      	b.n	8014d8e <__swbuf_r+0x1a>
 8014df6:	4621      	mov	r1, r4
 8014df8:	4628      	mov	r0, r5
 8014dfa:	f000 f81f 	bl	8014e3c <__swsetup_r>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d0cc      	beq.n	8014d9c <__swbuf_r+0x28>
 8014e02:	f04f 37ff 	mov.w	r7, #4294967295
 8014e06:	4638      	mov	r0, r7
 8014e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e0a:	bf00      	nop
 8014e0c:	08018758 	.word	0x08018758
 8014e10:	08018778 	.word	0x08018778
 8014e14:	08018738 	.word	0x08018738

08014e18 <_write_r>:
 8014e18:	b538      	push	{r3, r4, r5, lr}
 8014e1a:	4c07      	ldr	r4, [pc, #28]	; (8014e38 <_write_r+0x20>)
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	4608      	mov	r0, r1
 8014e20:	4611      	mov	r1, r2
 8014e22:	2200      	movs	r2, #0
 8014e24:	6022      	str	r2, [r4, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	f7ef fa2d 	bl	8004286 <_write>
 8014e2c:	1c43      	adds	r3, r0, #1
 8014e2e:	d102      	bne.n	8014e36 <_write_r+0x1e>
 8014e30:	6823      	ldr	r3, [r4, #0]
 8014e32:	b103      	cbz	r3, 8014e36 <_write_r+0x1e>
 8014e34:	602b      	str	r3, [r5, #0]
 8014e36:	bd38      	pop	{r3, r4, r5, pc}
 8014e38:	20037fa4 	.word	0x20037fa4

08014e3c <__swsetup_r>:
 8014e3c:	4b32      	ldr	r3, [pc, #200]	; (8014f08 <__swsetup_r+0xcc>)
 8014e3e:	b570      	push	{r4, r5, r6, lr}
 8014e40:	681d      	ldr	r5, [r3, #0]
 8014e42:	4606      	mov	r6, r0
 8014e44:	460c      	mov	r4, r1
 8014e46:	b125      	cbz	r5, 8014e52 <__swsetup_r+0x16>
 8014e48:	69ab      	ldr	r3, [r5, #24]
 8014e4a:	b913      	cbnz	r3, 8014e52 <__swsetup_r+0x16>
 8014e4c:	4628      	mov	r0, r5
 8014e4e:	f000 ffa7 	bl	8015da0 <__sinit>
 8014e52:	4b2e      	ldr	r3, [pc, #184]	; (8014f0c <__swsetup_r+0xd0>)
 8014e54:	429c      	cmp	r4, r3
 8014e56:	d10f      	bne.n	8014e78 <__swsetup_r+0x3c>
 8014e58:	686c      	ldr	r4, [r5, #4]
 8014e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e5e:	b29a      	uxth	r2, r3
 8014e60:	0715      	lsls	r5, r2, #28
 8014e62:	d42c      	bmi.n	8014ebe <__swsetup_r+0x82>
 8014e64:	06d0      	lsls	r0, r2, #27
 8014e66:	d411      	bmi.n	8014e8c <__swsetup_r+0x50>
 8014e68:	2209      	movs	r2, #9
 8014e6a:	6032      	str	r2, [r6, #0]
 8014e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014e70:	81a3      	strh	r3, [r4, #12]
 8014e72:	f04f 30ff 	mov.w	r0, #4294967295
 8014e76:	e03e      	b.n	8014ef6 <__swsetup_r+0xba>
 8014e78:	4b25      	ldr	r3, [pc, #148]	; (8014f10 <__swsetup_r+0xd4>)
 8014e7a:	429c      	cmp	r4, r3
 8014e7c:	d101      	bne.n	8014e82 <__swsetup_r+0x46>
 8014e7e:	68ac      	ldr	r4, [r5, #8]
 8014e80:	e7eb      	b.n	8014e5a <__swsetup_r+0x1e>
 8014e82:	4b24      	ldr	r3, [pc, #144]	; (8014f14 <__swsetup_r+0xd8>)
 8014e84:	429c      	cmp	r4, r3
 8014e86:	bf08      	it	eq
 8014e88:	68ec      	ldreq	r4, [r5, #12]
 8014e8a:	e7e6      	b.n	8014e5a <__swsetup_r+0x1e>
 8014e8c:	0751      	lsls	r1, r2, #29
 8014e8e:	d512      	bpl.n	8014eb6 <__swsetup_r+0x7a>
 8014e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014e92:	b141      	cbz	r1, 8014ea6 <__swsetup_r+0x6a>
 8014e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014e98:	4299      	cmp	r1, r3
 8014e9a:	d002      	beq.n	8014ea2 <__swsetup_r+0x66>
 8014e9c:	4630      	mov	r0, r6
 8014e9e:	f001 ffef 	bl	8016e80 <_free_r>
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8014ea6:	89a3      	ldrh	r3, [r4, #12]
 8014ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014eac:	81a3      	strh	r3, [r4, #12]
 8014eae:	2300      	movs	r3, #0
 8014eb0:	6063      	str	r3, [r4, #4]
 8014eb2:	6923      	ldr	r3, [r4, #16]
 8014eb4:	6023      	str	r3, [r4, #0]
 8014eb6:	89a3      	ldrh	r3, [r4, #12]
 8014eb8:	f043 0308 	orr.w	r3, r3, #8
 8014ebc:	81a3      	strh	r3, [r4, #12]
 8014ebe:	6923      	ldr	r3, [r4, #16]
 8014ec0:	b94b      	cbnz	r3, 8014ed6 <__swsetup_r+0x9a>
 8014ec2:	89a3      	ldrh	r3, [r4, #12]
 8014ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014ecc:	d003      	beq.n	8014ed6 <__swsetup_r+0x9a>
 8014ece:	4621      	mov	r1, r4
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	f001 fb6d 	bl	80165b0 <__smakebuf_r>
 8014ed6:	89a2      	ldrh	r2, [r4, #12]
 8014ed8:	f012 0301 	ands.w	r3, r2, #1
 8014edc:	d00c      	beq.n	8014ef8 <__swsetup_r+0xbc>
 8014ede:	2300      	movs	r3, #0
 8014ee0:	60a3      	str	r3, [r4, #8]
 8014ee2:	6963      	ldr	r3, [r4, #20]
 8014ee4:	425b      	negs	r3, r3
 8014ee6:	61a3      	str	r3, [r4, #24]
 8014ee8:	6923      	ldr	r3, [r4, #16]
 8014eea:	b953      	cbnz	r3, 8014f02 <__swsetup_r+0xc6>
 8014eec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ef0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014ef4:	d1ba      	bne.n	8014e6c <__swsetup_r+0x30>
 8014ef6:	bd70      	pop	{r4, r5, r6, pc}
 8014ef8:	0792      	lsls	r2, r2, #30
 8014efa:	bf58      	it	pl
 8014efc:	6963      	ldrpl	r3, [r4, #20]
 8014efe:	60a3      	str	r3, [r4, #8]
 8014f00:	e7f2      	b.n	8014ee8 <__swsetup_r+0xac>
 8014f02:	2000      	movs	r0, #0
 8014f04:	e7f7      	b.n	8014ef6 <__swsetup_r+0xba>
 8014f06:	bf00      	nop
 8014f08:	2000000c 	.word	0x2000000c
 8014f0c:	08018758 	.word	0x08018758
 8014f10:	08018778 	.word	0x08018778
 8014f14:	08018738 	.word	0x08018738

08014f18 <_close_r>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	4c06      	ldr	r4, [pc, #24]	; (8014f34 <_close_r+0x1c>)
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	4605      	mov	r5, r0
 8014f20:	4608      	mov	r0, r1
 8014f22:	6023      	str	r3, [r4, #0]
 8014f24:	f7f0 ff13 	bl	8005d4e <_close>
 8014f28:	1c43      	adds	r3, r0, #1
 8014f2a:	d102      	bne.n	8014f32 <_close_r+0x1a>
 8014f2c:	6823      	ldr	r3, [r4, #0]
 8014f2e:	b103      	cbz	r3, 8014f32 <_close_r+0x1a>
 8014f30:	602b      	str	r3, [r5, #0]
 8014f32:	bd38      	pop	{r3, r4, r5, pc}
 8014f34:	20037fa4 	.word	0x20037fa4

08014f38 <quorem>:
 8014f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f3c:	6903      	ldr	r3, [r0, #16]
 8014f3e:	690c      	ldr	r4, [r1, #16]
 8014f40:	42a3      	cmp	r3, r4
 8014f42:	4680      	mov	r8, r0
 8014f44:	f2c0 8082 	blt.w	801504c <quorem+0x114>
 8014f48:	3c01      	subs	r4, #1
 8014f4a:	f101 0714 	add.w	r7, r1, #20
 8014f4e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014f52:	f100 0614 	add.w	r6, r0, #20
 8014f56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014f5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014f5e:	eb06 030c 	add.w	r3, r6, ip
 8014f62:	3501      	adds	r5, #1
 8014f64:	eb07 090c 	add.w	r9, r7, ip
 8014f68:	9301      	str	r3, [sp, #4]
 8014f6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8014f6e:	b395      	cbz	r5, 8014fd6 <quorem+0x9e>
 8014f70:	f04f 0a00 	mov.w	sl, #0
 8014f74:	4638      	mov	r0, r7
 8014f76:	46b6      	mov	lr, r6
 8014f78:	46d3      	mov	fp, sl
 8014f7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8014f7e:	b293      	uxth	r3, r2
 8014f80:	fb05 a303 	mla	r3, r5, r3, sl
 8014f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	ebab 0303 	sub.w	r3, fp, r3
 8014f8e:	0c12      	lsrs	r2, r2, #16
 8014f90:	f8de b000 	ldr.w	fp, [lr]
 8014f94:	fb05 a202 	mla	r2, r5, r2, sl
 8014f98:	fa13 f38b 	uxtah	r3, r3, fp
 8014f9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014fa0:	fa1f fb82 	uxth.w	fp, r2
 8014fa4:	f8de 2000 	ldr.w	r2, [lr]
 8014fa8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014fb0:	b29b      	uxth	r3, r3
 8014fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fb6:	4581      	cmp	r9, r0
 8014fb8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014fbc:	f84e 3b04 	str.w	r3, [lr], #4
 8014fc0:	d2db      	bcs.n	8014f7a <quorem+0x42>
 8014fc2:	f856 300c 	ldr.w	r3, [r6, ip]
 8014fc6:	b933      	cbnz	r3, 8014fd6 <quorem+0x9e>
 8014fc8:	9b01      	ldr	r3, [sp, #4]
 8014fca:	3b04      	subs	r3, #4
 8014fcc:	429e      	cmp	r6, r3
 8014fce:	461a      	mov	r2, r3
 8014fd0:	d330      	bcc.n	8015034 <quorem+0xfc>
 8014fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	f001 fd98 	bl	8016b0c <__mcmp>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	db25      	blt.n	801502c <quorem+0xf4>
 8014fe0:	3501      	adds	r5, #1
 8014fe2:	4630      	mov	r0, r6
 8014fe4:	f04f 0c00 	mov.w	ip, #0
 8014fe8:	f857 2b04 	ldr.w	r2, [r7], #4
 8014fec:	f8d0 e000 	ldr.w	lr, [r0]
 8014ff0:	b293      	uxth	r3, r2
 8014ff2:	ebac 0303 	sub.w	r3, ip, r3
 8014ff6:	0c12      	lsrs	r2, r2, #16
 8014ff8:	fa13 f38e 	uxtah	r3, r3, lr
 8014ffc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015004:	b29b      	uxth	r3, r3
 8015006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801500a:	45b9      	cmp	r9, r7
 801500c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015010:	f840 3b04 	str.w	r3, [r0], #4
 8015014:	d2e8      	bcs.n	8014fe8 <quorem+0xb0>
 8015016:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801501a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801501e:	b92a      	cbnz	r2, 801502c <quorem+0xf4>
 8015020:	3b04      	subs	r3, #4
 8015022:	429e      	cmp	r6, r3
 8015024:	461a      	mov	r2, r3
 8015026:	d30b      	bcc.n	8015040 <quorem+0x108>
 8015028:	f8c8 4010 	str.w	r4, [r8, #16]
 801502c:	4628      	mov	r0, r5
 801502e:	b003      	add	sp, #12
 8015030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015034:	6812      	ldr	r2, [r2, #0]
 8015036:	3b04      	subs	r3, #4
 8015038:	2a00      	cmp	r2, #0
 801503a:	d1ca      	bne.n	8014fd2 <quorem+0x9a>
 801503c:	3c01      	subs	r4, #1
 801503e:	e7c5      	b.n	8014fcc <quorem+0x94>
 8015040:	6812      	ldr	r2, [r2, #0]
 8015042:	3b04      	subs	r3, #4
 8015044:	2a00      	cmp	r2, #0
 8015046:	d1ef      	bne.n	8015028 <quorem+0xf0>
 8015048:	3c01      	subs	r4, #1
 801504a:	e7ea      	b.n	8015022 <quorem+0xea>
 801504c:	2000      	movs	r0, #0
 801504e:	e7ee      	b.n	801502e <quorem+0xf6>

08015050 <_dtoa_r>:
 8015050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015054:	ec57 6b10 	vmov	r6, r7, d0
 8015058:	b097      	sub	sp, #92	; 0x5c
 801505a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801505c:	9106      	str	r1, [sp, #24]
 801505e:	4604      	mov	r4, r0
 8015060:	920b      	str	r2, [sp, #44]	; 0x2c
 8015062:	9312      	str	r3, [sp, #72]	; 0x48
 8015064:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015068:	e9cd 6700 	strd	r6, r7, [sp]
 801506c:	b93d      	cbnz	r5, 801507e <_dtoa_r+0x2e>
 801506e:	2010      	movs	r0, #16
 8015070:	f001 fade 	bl	8016630 <malloc>
 8015074:	6260      	str	r0, [r4, #36]	; 0x24
 8015076:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801507a:	6005      	str	r5, [r0, #0]
 801507c:	60c5      	str	r5, [r0, #12]
 801507e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015080:	6819      	ldr	r1, [r3, #0]
 8015082:	b151      	cbz	r1, 801509a <_dtoa_r+0x4a>
 8015084:	685a      	ldr	r2, [r3, #4]
 8015086:	604a      	str	r2, [r1, #4]
 8015088:	2301      	movs	r3, #1
 801508a:	4093      	lsls	r3, r2
 801508c:	608b      	str	r3, [r1, #8]
 801508e:	4620      	mov	r0, r4
 8015090:	f001 fb1c 	bl	80166cc <_Bfree>
 8015094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015096:	2200      	movs	r2, #0
 8015098:	601a      	str	r2, [r3, #0]
 801509a:	1e3b      	subs	r3, r7, #0
 801509c:	bfbb      	ittet	lt
 801509e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80150a2:	9301      	strlt	r3, [sp, #4]
 80150a4:	2300      	movge	r3, #0
 80150a6:	2201      	movlt	r2, #1
 80150a8:	bfac      	ite	ge
 80150aa:	f8c8 3000 	strge.w	r3, [r8]
 80150ae:	f8c8 2000 	strlt.w	r2, [r8]
 80150b2:	4baf      	ldr	r3, [pc, #700]	; (8015370 <_dtoa_r+0x320>)
 80150b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80150b8:	ea33 0308 	bics.w	r3, r3, r8
 80150bc:	d114      	bne.n	80150e8 <_dtoa_r+0x98>
 80150be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80150c4:	6013      	str	r3, [r2, #0]
 80150c6:	9b00      	ldr	r3, [sp, #0]
 80150c8:	b923      	cbnz	r3, 80150d4 <_dtoa_r+0x84>
 80150ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80150ce:	2800      	cmp	r0, #0
 80150d0:	f000 8542 	beq.w	8015b58 <_dtoa_r+0xb08>
 80150d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015384 <_dtoa_r+0x334>
 80150da:	2b00      	cmp	r3, #0
 80150dc:	f000 8544 	beq.w	8015b68 <_dtoa_r+0xb18>
 80150e0:	f10b 0303 	add.w	r3, fp, #3
 80150e4:	f000 bd3e 	b.w	8015b64 <_dtoa_r+0xb14>
 80150e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80150ec:	2200      	movs	r2, #0
 80150ee:	2300      	movs	r3, #0
 80150f0:	4630      	mov	r0, r6
 80150f2:	4639      	mov	r1, r7
 80150f4:	f7eb fd00 	bl	8000af8 <__aeabi_dcmpeq>
 80150f8:	4681      	mov	r9, r0
 80150fa:	b168      	cbz	r0, 8015118 <_dtoa_r+0xc8>
 80150fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80150fe:	2301      	movs	r3, #1
 8015100:	6013      	str	r3, [r2, #0]
 8015102:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015104:	2b00      	cmp	r3, #0
 8015106:	f000 8524 	beq.w	8015b52 <_dtoa_r+0xb02>
 801510a:	4b9a      	ldr	r3, [pc, #616]	; (8015374 <_dtoa_r+0x324>)
 801510c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801510e:	f103 3bff 	add.w	fp, r3, #4294967295
 8015112:	6013      	str	r3, [r2, #0]
 8015114:	f000 bd28 	b.w	8015b68 <_dtoa_r+0xb18>
 8015118:	aa14      	add	r2, sp, #80	; 0x50
 801511a:	a915      	add	r1, sp, #84	; 0x54
 801511c:	ec47 6b10 	vmov	d0, r6, r7
 8015120:	4620      	mov	r0, r4
 8015122:	f001 fde1 	bl	8016ce8 <__d2b>
 8015126:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801512a:	9004      	str	r0, [sp, #16]
 801512c:	2d00      	cmp	r5, #0
 801512e:	d07c      	beq.n	801522a <_dtoa_r+0x1da>
 8015130:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015134:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015138:	46b2      	mov	sl, r6
 801513a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801513e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015142:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015146:	2200      	movs	r2, #0
 8015148:	4b8b      	ldr	r3, [pc, #556]	; (8015378 <_dtoa_r+0x328>)
 801514a:	4650      	mov	r0, sl
 801514c:	4659      	mov	r1, fp
 801514e:	f7eb f8b3 	bl	80002b8 <__aeabi_dsub>
 8015152:	a381      	add	r3, pc, #516	; (adr r3, 8015358 <_dtoa_r+0x308>)
 8015154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015158:	f7eb fa66 	bl	8000628 <__aeabi_dmul>
 801515c:	a380      	add	r3, pc, #512	; (adr r3, 8015360 <_dtoa_r+0x310>)
 801515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015162:	f7eb f8ab 	bl	80002bc <__adddf3>
 8015166:	4606      	mov	r6, r0
 8015168:	4628      	mov	r0, r5
 801516a:	460f      	mov	r7, r1
 801516c:	f7eb f9f2 	bl	8000554 <__aeabi_i2d>
 8015170:	a37d      	add	r3, pc, #500	; (adr r3, 8015368 <_dtoa_r+0x318>)
 8015172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015176:	f7eb fa57 	bl	8000628 <__aeabi_dmul>
 801517a:	4602      	mov	r2, r0
 801517c:	460b      	mov	r3, r1
 801517e:	4630      	mov	r0, r6
 8015180:	4639      	mov	r1, r7
 8015182:	f7eb f89b 	bl	80002bc <__adddf3>
 8015186:	4606      	mov	r6, r0
 8015188:	460f      	mov	r7, r1
 801518a:	f7eb fcfd 	bl	8000b88 <__aeabi_d2iz>
 801518e:	2200      	movs	r2, #0
 8015190:	4682      	mov	sl, r0
 8015192:	2300      	movs	r3, #0
 8015194:	4630      	mov	r0, r6
 8015196:	4639      	mov	r1, r7
 8015198:	f7eb fcb8 	bl	8000b0c <__aeabi_dcmplt>
 801519c:	b148      	cbz	r0, 80151b2 <_dtoa_r+0x162>
 801519e:	4650      	mov	r0, sl
 80151a0:	f7eb f9d8 	bl	8000554 <__aeabi_i2d>
 80151a4:	4632      	mov	r2, r6
 80151a6:	463b      	mov	r3, r7
 80151a8:	f7eb fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80151ac:	b908      	cbnz	r0, 80151b2 <_dtoa_r+0x162>
 80151ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151b2:	f1ba 0f16 	cmp.w	sl, #22
 80151b6:	d859      	bhi.n	801526c <_dtoa_r+0x21c>
 80151b8:	4970      	ldr	r1, [pc, #448]	; (801537c <_dtoa_r+0x32c>)
 80151ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80151be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80151c6:	f7eb fcbf 	bl	8000b48 <__aeabi_dcmpgt>
 80151ca:	2800      	cmp	r0, #0
 80151cc:	d050      	beq.n	8015270 <_dtoa_r+0x220>
 80151ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80151d2:	2300      	movs	r3, #0
 80151d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80151d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80151d8:	1b5d      	subs	r5, r3, r5
 80151da:	f1b5 0801 	subs.w	r8, r5, #1
 80151de:	bf49      	itett	mi
 80151e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80151e4:	2300      	movpl	r3, #0
 80151e6:	9305      	strmi	r3, [sp, #20]
 80151e8:	f04f 0800 	movmi.w	r8, #0
 80151ec:	bf58      	it	pl
 80151ee:	9305      	strpl	r3, [sp, #20]
 80151f0:	f1ba 0f00 	cmp.w	sl, #0
 80151f4:	db3e      	blt.n	8015274 <_dtoa_r+0x224>
 80151f6:	2300      	movs	r3, #0
 80151f8:	44d0      	add	r8, sl
 80151fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80151fe:	9307      	str	r3, [sp, #28]
 8015200:	9b06      	ldr	r3, [sp, #24]
 8015202:	2b09      	cmp	r3, #9
 8015204:	f200 8090 	bhi.w	8015328 <_dtoa_r+0x2d8>
 8015208:	2b05      	cmp	r3, #5
 801520a:	bfc4      	itt	gt
 801520c:	3b04      	subgt	r3, #4
 801520e:	9306      	strgt	r3, [sp, #24]
 8015210:	9b06      	ldr	r3, [sp, #24]
 8015212:	f1a3 0302 	sub.w	r3, r3, #2
 8015216:	bfcc      	ite	gt
 8015218:	2500      	movgt	r5, #0
 801521a:	2501      	movle	r5, #1
 801521c:	2b03      	cmp	r3, #3
 801521e:	f200 808f 	bhi.w	8015340 <_dtoa_r+0x2f0>
 8015222:	e8df f003 	tbb	[pc, r3]
 8015226:	7f7d      	.short	0x7f7d
 8015228:	7131      	.short	0x7131
 801522a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801522e:	441d      	add	r5, r3
 8015230:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015234:	2820      	cmp	r0, #32
 8015236:	dd13      	ble.n	8015260 <_dtoa_r+0x210>
 8015238:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801523c:	9b00      	ldr	r3, [sp, #0]
 801523e:	fa08 f800 	lsl.w	r8, r8, r0
 8015242:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015246:	fa23 f000 	lsr.w	r0, r3, r0
 801524a:	ea48 0000 	orr.w	r0, r8, r0
 801524e:	f7eb f971 	bl	8000534 <__aeabi_ui2d>
 8015252:	2301      	movs	r3, #1
 8015254:	4682      	mov	sl, r0
 8015256:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801525a:	3d01      	subs	r5, #1
 801525c:	9313      	str	r3, [sp, #76]	; 0x4c
 801525e:	e772      	b.n	8015146 <_dtoa_r+0xf6>
 8015260:	9b00      	ldr	r3, [sp, #0]
 8015262:	f1c0 0020 	rsb	r0, r0, #32
 8015266:	fa03 f000 	lsl.w	r0, r3, r0
 801526a:	e7f0      	b.n	801524e <_dtoa_r+0x1fe>
 801526c:	2301      	movs	r3, #1
 801526e:	e7b1      	b.n	80151d4 <_dtoa_r+0x184>
 8015270:	900f      	str	r0, [sp, #60]	; 0x3c
 8015272:	e7b0      	b.n	80151d6 <_dtoa_r+0x186>
 8015274:	9b05      	ldr	r3, [sp, #20]
 8015276:	eba3 030a 	sub.w	r3, r3, sl
 801527a:	9305      	str	r3, [sp, #20]
 801527c:	f1ca 0300 	rsb	r3, sl, #0
 8015280:	9307      	str	r3, [sp, #28]
 8015282:	2300      	movs	r3, #0
 8015284:	930e      	str	r3, [sp, #56]	; 0x38
 8015286:	e7bb      	b.n	8015200 <_dtoa_r+0x1b0>
 8015288:	2301      	movs	r3, #1
 801528a:	930a      	str	r3, [sp, #40]	; 0x28
 801528c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801528e:	2b00      	cmp	r3, #0
 8015290:	dd59      	ble.n	8015346 <_dtoa_r+0x2f6>
 8015292:	9302      	str	r3, [sp, #8]
 8015294:	4699      	mov	r9, r3
 8015296:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015298:	2200      	movs	r2, #0
 801529a:	6072      	str	r2, [r6, #4]
 801529c:	2204      	movs	r2, #4
 801529e:	f102 0014 	add.w	r0, r2, #20
 80152a2:	4298      	cmp	r0, r3
 80152a4:	6871      	ldr	r1, [r6, #4]
 80152a6:	d953      	bls.n	8015350 <_dtoa_r+0x300>
 80152a8:	4620      	mov	r0, r4
 80152aa:	f001 f9db 	bl	8016664 <_Balloc>
 80152ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152b0:	6030      	str	r0, [r6, #0]
 80152b2:	f1b9 0f0e 	cmp.w	r9, #14
 80152b6:	f8d3 b000 	ldr.w	fp, [r3]
 80152ba:	f200 80e6 	bhi.w	801548a <_dtoa_r+0x43a>
 80152be:	2d00      	cmp	r5, #0
 80152c0:	f000 80e3 	beq.w	801548a <_dtoa_r+0x43a>
 80152c4:	ed9d 7b00 	vldr	d7, [sp]
 80152c8:	f1ba 0f00 	cmp.w	sl, #0
 80152cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80152d0:	dd74      	ble.n	80153bc <_dtoa_r+0x36c>
 80152d2:	4a2a      	ldr	r2, [pc, #168]	; (801537c <_dtoa_r+0x32c>)
 80152d4:	f00a 030f 	and.w	r3, sl, #15
 80152d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80152dc:	ed93 7b00 	vldr	d7, [r3]
 80152e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80152e4:	06f0      	lsls	r0, r6, #27
 80152e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80152ea:	d565      	bpl.n	80153b8 <_dtoa_r+0x368>
 80152ec:	4b24      	ldr	r3, [pc, #144]	; (8015380 <_dtoa_r+0x330>)
 80152ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80152f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80152f6:	f7eb fac1 	bl	800087c <__aeabi_ddiv>
 80152fa:	e9cd 0100 	strd	r0, r1, [sp]
 80152fe:	f006 060f 	and.w	r6, r6, #15
 8015302:	2503      	movs	r5, #3
 8015304:	4f1e      	ldr	r7, [pc, #120]	; (8015380 <_dtoa_r+0x330>)
 8015306:	e04c      	b.n	80153a2 <_dtoa_r+0x352>
 8015308:	2301      	movs	r3, #1
 801530a:	930a      	str	r3, [sp, #40]	; 0x28
 801530c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801530e:	4453      	add	r3, sl
 8015310:	f103 0901 	add.w	r9, r3, #1
 8015314:	9302      	str	r3, [sp, #8]
 8015316:	464b      	mov	r3, r9
 8015318:	2b01      	cmp	r3, #1
 801531a:	bfb8      	it	lt
 801531c:	2301      	movlt	r3, #1
 801531e:	e7ba      	b.n	8015296 <_dtoa_r+0x246>
 8015320:	2300      	movs	r3, #0
 8015322:	e7b2      	b.n	801528a <_dtoa_r+0x23a>
 8015324:	2300      	movs	r3, #0
 8015326:	e7f0      	b.n	801530a <_dtoa_r+0x2ba>
 8015328:	2501      	movs	r5, #1
 801532a:	2300      	movs	r3, #0
 801532c:	9306      	str	r3, [sp, #24]
 801532e:	950a      	str	r5, [sp, #40]	; 0x28
 8015330:	f04f 33ff 	mov.w	r3, #4294967295
 8015334:	9302      	str	r3, [sp, #8]
 8015336:	4699      	mov	r9, r3
 8015338:	2200      	movs	r2, #0
 801533a:	2312      	movs	r3, #18
 801533c:	920b      	str	r2, [sp, #44]	; 0x2c
 801533e:	e7aa      	b.n	8015296 <_dtoa_r+0x246>
 8015340:	2301      	movs	r3, #1
 8015342:	930a      	str	r3, [sp, #40]	; 0x28
 8015344:	e7f4      	b.n	8015330 <_dtoa_r+0x2e0>
 8015346:	2301      	movs	r3, #1
 8015348:	9302      	str	r3, [sp, #8]
 801534a:	4699      	mov	r9, r3
 801534c:	461a      	mov	r2, r3
 801534e:	e7f5      	b.n	801533c <_dtoa_r+0x2ec>
 8015350:	3101      	adds	r1, #1
 8015352:	6071      	str	r1, [r6, #4]
 8015354:	0052      	lsls	r2, r2, #1
 8015356:	e7a2      	b.n	801529e <_dtoa_r+0x24e>
 8015358:	636f4361 	.word	0x636f4361
 801535c:	3fd287a7 	.word	0x3fd287a7
 8015360:	8b60c8b3 	.word	0x8b60c8b3
 8015364:	3fc68a28 	.word	0x3fc68a28
 8015368:	509f79fb 	.word	0x509f79fb
 801536c:	3fd34413 	.word	0x3fd34413
 8015370:	7ff00000 	.word	0x7ff00000
 8015374:	080188cc 	.word	0x080188cc
 8015378:	3ff80000 	.word	0x3ff80000
 801537c:	080187d0 	.word	0x080187d0
 8015380:	080187a8 	.word	0x080187a8
 8015384:	08018731 	.word	0x08018731
 8015388:	07f1      	lsls	r1, r6, #31
 801538a:	d508      	bpl.n	801539e <_dtoa_r+0x34e>
 801538c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015394:	f7eb f948 	bl	8000628 <__aeabi_dmul>
 8015398:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801539c:	3501      	adds	r5, #1
 801539e:	1076      	asrs	r6, r6, #1
 80153a0:	3708      	adds	r7, #8
 80153a2:	2e00      	cmp	r6, #0
 80153a4:	d1f0      	bne.n	8015388 <_dtoa_r+0x338>
 80153a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80153aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153ae:	f7eb fa65 	bl	800087c <__aeabi_ddiv>
 80153b2:	e9cd 0100 	strd	r0, r1, [sp]
 80153b6:	e01a      	b.n	80153ee <_dtoa_r+0x39e>
 80153b8:	2502      	movs	r5, #2
 80153ba:	e7a3      	b.n	8015304 <_dtoa_r+0x2b4>
 80153bc:	f000 80a0 	beq.w	8015500 <_dtoa_r+0x4b0>
 80153c0:	f1ca 0600 	rsb	r6, sl, #0
 80153c4:	4b9f      	ldr	r3, [pc, #636]	; (8015644 <_dtoa_r+0x5f4>)
 80153c6:	4fa0      	ldr	r7, [pc, #640]	; (8015648 <_dtoa_r+0x5f8>)
 80153c8:	f006 020f 	and.w	r2, r6, #15
 80153cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80153d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80153d8:	f7eb f926 	bl	8000628 <__aeabi_dmul>
 80153dc:	e9cd 0100 	strd	r0, r1, [sp]
 80153e0:	1136      	asrs	r6, r6, #4
 80153e2:	2300      	movs	r3, #0
 80153e4:	2502      	movs	r5, #2
 80153e6:	2e00      	cmp	r6, #0
 80153e8:	d17f      	bne.n	80154ea <_dtoa_r+0x49a>
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d1e1      	bne.n	80153b2 <_dtoa_r+0x362>
 80153ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f000 8087 	beq.w	8015504 <_dtoa_r+0x4b4>
 80153f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80153fa:	2200      	movs	r2, #0
 80153fc:	4b93      	ldr	r3, [pc, #588]	; (801564c <_dtoa_r+0x5fc>)
 80153fe:	4630      	mov	r0, r6
 8015400:	4639      	mov	r1, r7
 8015402:	f7eb fb83 	bl	8000b0c <__aeabi_dcmplt>
 8015406:	2800      	cmp	r0, #0
 8015408:	d07c      	beq.n	8015504 <_dtoa_r+0x4b4>
 801540a:	f1b9 0f00 	cmp.w	r9, #0
 801540e:	d079      	beq.n	8015504 <_dtoa_r+0x4b4>
 8015410:	9b02      	ldr	r3, [sp, #8]
 8015412:	2b00      	cmp	r3, #0
 8015414:	dd35      	ble.n	8015482 <_dtoa_r+0x432>
 8015416:	f10a 33ff 	add.w	r3, sl, #4294967295
 801541a:	9308      	str	r3, [sp, #32]
 801541c:	4639      	mov	r1, r7
 801541e:	2200      	movs	r2, #0
 8015420:	4b8b      	ldr	r3, [pc, #556]	; (8015650 <_dtoa_r+0x600>)
 8015422:	4630      	mov	r0, r6
 8015424:	f7eb f900 	bl	8000628 <__aeabi_dmul>
 8015428:	e9cd 0100 	strd	r0, r1, [sp]
 801542c:	9f02      	ldr	r7, [sp, #8]
 801542e:	3501      	adds	r5, #1
 8015430:	4628      	mov	r0, r5
 8015432:	f7eb f88f 	bl	8000554 <__aeabi_i2d>
 8015436:	e9dd 2300 	ldrd	r2, r3, [sp]
 801543a:	f7eb f8f5 	bl	8000628 <__aeabi_dmul>
 801543e:	2200      	movs	r2, #0
 8015440:	4b84      	ldr	r3, [pc, #528]	; (8015654 <_dtoa_r+0x604>)
 8015442:	f7ea ff3b 	bl	80002bc <__adddf3>
 8015446:	4605      	mov	r5, r0
 8015448:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801544c:	2f00      	cmp	r7, #0
 801544e:	d15d      	bne.n	801550c <_dtoa_r+0x4bc>
 8015450:	2200      	movs	r2, #0
 8015452:	4b81      	ldr	r3, [pc, #516]	; (8015658 <_dtoa_r+0x608>)
 8015454:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015458:	f7ea ff2e 	bl	80002b8 <__aeabi_dsub>
 801545c:	462a      	mov	r2, r5
 801545e:	4633      	mov	r3, r6
 8015460:	e9cd 0100 	strd	r0, r1, [sp]
 8015464:	f7eb fb70 	bl	8000b48 <__aeabi_dcmpgt>
 8015468:	2800      	cmp	r0, #0
 801546a:	f040 8288 	bne.w	801597e <_dtoa_r+0x92e>
 801546e:	462a      	mov	r2, r5
 8015470:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015478:	f7eb fb48 	bl	8000b0c <__aeabi_dcmplt>
 801547c:	2800      	cmp	r0, #0
 801547e:	f040 827c 	bne.w	801597a <_dtoa_r+0x92a>
 8015482:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015486:	e9cd 2300 	strd	r2, r3, [sp]
 801548a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801548c:	2b00      	cmp	r3, #0
 801548e:	f2c0 8150 	blt.w	8015732 <_dtoa_r+0x6e2>
 8015492:	f1ba 0f0e 	cmp.w	sl, #14
 8015496:	f300 814c 	bgt.w	8015732 <_dtoa_r+0x6e2>
 801549a:	4b6a      	ldr	r3, [pc, #424]	; (8015644 <_dtoa_r+0x5f4>)
 801549c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80154a0:	ed93 7b00 	vldr	d7, [r3]
 80154a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80154ac:	f280 80d8 	bge.w	8015660 <_dtoa_r+0x610>
 80154b0:	f1b9 0f00 	cmp.w	r9, #0
 80154b4:	f300 80d4 	bgt.w	8015660 <_dtoa_r+0x610>
 80154b8:	f040 825e 	bne.w	8015978 <_dtoa_r+0x928>
 80154bc:	2200      	movs	r2, #0
 80154be:	4b66      	ldr	r3, [pc, #408]	; (8015658 <_dtoa_r+0x608>)
 80154c0:	ec51 0b17 	vmov	r0, r1, d7
 80154c4:	f7eb f8b0 	bl	8000628 <__aeabi_dmul>
 80154c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154cc:	f7eb fb32 	bl	8000b34 <__aeabi_dcmpge>
 80154d0:	464f      	mov	r7, r9
 80154d2:	464e      	mov	r6, r9
 80154d4:	2800      	cmp	r0, #0
 80154d6:	f040 8234 	bne.w	8015942 <_dtoa_r+0x8f2>
 80154da:	2331      	movs	r3, #49	; 0x31
 80154dc:	f10b 0501 	add.w	r5, fp, #1
 80154e0:	f88b 3000 	strb.w	r3, [fp]
 80154e4:	f10a 0a01 	add.w	sl, sl, #1
 80154e8:	e22f      	b.n	801594a <_dtoa_r+0x8fa>
 80154ea:	07f2      	lsls	r2, r6, #31
 80154ec:	d505      	bpl.n	80154fa <_dtoa_r+0x4aa>
 80154ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80154f2:	f7eb f899 	bl	8000628 <__aeabi_dmul>
 80154f6:	3501      	adds	r5, #1
 80154f8:	2301      	movs	r3, #1
 80154fa:	1076      	asrs	r6, r6, #1
 80154fc:	3708      	adds	r7, #8
 80154fe:	e772      	b.n	80153e6 <_dtoa_r+0x396>
 8015500:	2502      	movs	r5, #2
 8015502:	e774      	b.n	80153ee <_dtoa_r+0x39e>
 8015504:	f8cd a020 	str.w	sl, [sp, #32]
 8015508:	464f      	mov	r7, r9
 801550a:	e791      	b.n	8015430 <_dtoa_r+0x3e0>
 801550c:	4b4d      	ldr	r3, [pc, #308]	; (8015644 <_dtoa_r+0x5f4>)
 801550e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015512:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015518:	2b00      	cmp	r3, #0
 801551a:	d047      	beq.n	80155ac <_dtoa_r+0x55c>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	2000      	movs	r0, #0
 8015522:	494e      	ldr	r1, [pc, #312]	; (801565c <_dtoa_r+0x60c>)
 8015524:	f7eb f9aa 	bl	800087c <__aeabi_ddiv>
 8015528:	462a      	mov	r2, r5
 801552a:	4633      	mov	r3, r6
 801552c:	f7ea fec4 	bl	80002b8 <__aeabi_dsub>
 8015530:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015534:	465d      	mov	r5, fp
 8015536:	e9dd 0100 	ldrd	r0, r1, [sp]
 801553a:	f7eb fb25 	bl	8000b88 <__aeabi_d2iz>
 801553e:	4606      	mov	r6, r0
 8015540:	f7eb f808 	bl	8000554 <__aeabi_i2d>
 8015544:	4602      	mov	r2, r0
 8015546:	460b      	mov	r3, r1
 8015548:	e9dd 0100 	ldrd	r0, r1, [sp]
 801554c:	f7ea feb4 	bl	80002b8 <__aeabi_dsub>
 8015550:	3630      	adds	r6, #48	; 0x30
 8015552:	f805 6b01 	strb.w	r6, [r5], #1
 8015556:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801555a:	e9cd 0100 	strd	r0, r1, [sp]
 801555e:	f7eb fad5 	bl	8000b0c <__aeabi_dcmplt>
 8015562:	2800      	cmp	r0, #0
 8015564:	d163      	bne.n	801562e <_dtoa_r+0x5de>
 8015566:	e9dd 2300 	ldrd	r2, r3, [sp]
 801556a:	2000      	movs	r0, #0
 801556c:	4937      	ldr	r1, [pc, #220]	; (801564c <_dtoa_r+0x5fc>)
 801556e:	f7ea fea3 	bl	80002b8 <__aeabi_dsub>
 8015572:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015576:	f7eb fac9 	bl	8000b0c <__aeabi_dcmplt>
 801557a:	2800      	cmp	r0, #0
 801557c:	f040 80b7 	bne.w	80156ee <_dtoa_r+0x69e>
 8015580:	eba5 030b 	sub.w	r3, r5, fp
 8015584:	429f      	cmp	r7, r3
 8015586:	f77f af7c 	ble.w	8015482 <_dtoa_r+0x432>
 801558a:	2200      	movs	r2, #0
 801558c:	4b30      	ldr	r3, [pc, #192]	; (8015650 <_dtoa_r+0x600>)
 801558e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015592:	f7eb f849 	bl	8000628 <__aeabi_dmul>
 8015596:	2200      	movs	r2, #0
 8015598:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801559c:	4b2c      	ldr	r3, [pc, #176]	; (8015650 <_dtoa_r+0x600>)
 801559e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155a2:	f7eb f841 	bl	8000628 <__aeabi_dmul>
 80155a6:	e9cd 0100 	strd	r0, r1, [sp]
 80155aa:	e7c4      	b.n	8015536 <_dtoa_r+0x4e6>
 80155ac:	462a      	mov	r2, r5
 80155ae:	4633      	mov	r3, r6
 80155b0:	f7eb f83a 	bl	8000628 <__aeabi_dmul>
 80155b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80155b8:	eb0b 0507 	add.w	r5, fp, r7
 80155bc:	465e      	mov	r6, fp
 80155be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155c2:	f7eb fae1 	bl	8000b88 <__aeabi_d2iz>
 80155c6:	4607      	mov	r7, r0
 80155c8:	f7ea ffc4 	bl	8000554 <__aeabi_i2d>
 80155cc:	3730      	adds	r7, #48	; 0x30
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155d6:	f7ea fe6f 	bl	80002b8 <__aeabi_dsub>
 80155da:	f806 7b01 	strb.w	r7, [r6], #1
 80155de:	42ae      	cmp	r6, r5
 80155e0:	e9cd 0100 	strd	r0, r1, [sp]
 80155e4:	f04f 0200 	mov.w	r2, #0
 80155e8:	d126      	bne.n	8015638 <_dtoa_r+0x5e8>
 80155ea:	4b1c      	ldr	r3, [pc, #112]	; (801565c <_dtoa_r+0x60c>)
 80155ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80155f0:	f7ea fe64 	bl	80002bc <__adddf3>
 80155f4:	4602      	mov	r2, r0
 80155f6:	460b      	mov	r3, r1
 80155f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80155fc:	f7eb faa4 	bl	8000b48 <__aeabi_dcmpgt>
 8015600:	2800      	cmp	r0, #0
 8015602:	d174      	bne.n	80156ee <_dtoa_r+0x69e>
 8015604:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015608:	2000      	movs	r0, #0
 801560a:	4914      	ldr	r1, [pc, #80]	; (801565c <_dtoa_r+0x60c>)
 801560c:	f7ea fe54 	bl	80002b8 <__aeabi_dsub>
 8015610:	4602      	mov	r2, r0
 8015612:	460b      	mov	r3, r1
 8015614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015618:	f7eb fa78 	bl	8000b0c <__aeabi_dcmplt>
 801561c:	2800      	cmp	r0, #0
 801561e:	f43f af30 	beq.w	8015482 <_dtoa_r+0x432>
 8015622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015626:	2b30      	cmp	r3, #48	; 0x30
 8015628:	f105 32ff 	add.w	r2, r5, #4294967295
 801562c:	d002      	beq.n	8015634 <_dtoa_r+0x5e4>
 801562e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015632:	e04a      	b.n	80156ca <_dtoa_r+0x67a>
 8015634:	4615      	mov	r5, r2
 8015636:	e7f4      	b.n	8015622 <_dtoa_r+0x5d2>
 8015638:	4b05      	ldr	r3, [pc, #20]	; (8015650 <_dtoa_r+0x600>)
 801563a:	f7ea fff5 	bl	8000628 <__aeabi_dmul>
 801563e:	e9cd 0100 	strd	r0, r1, [sp]
 8015642:	e7bc      	b.n	80155be <_dtoa_r+0x56e>
 8015644:	080187d0 	.word	0x080187d0
 8015648:	080187a8 	.word	0x080187a8
 801564c:	3ff00000 	.word	0x3ff00000
 8015650:	40240000 	.word	0x40240000
 8015654:	401c0000 	.word	0x401c0000
 8015658:	40140000 	.word	0x40140000
 801565c:	3fe00000 	.word	0x3fe00000
 8015660:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015664:	465d      	mov	r5, fp
 8015666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801566a:	4630      	mov	r0, r6
 801566c:	4639      	mov	r1, r7
 801566e:	f7eb f905 	bl	800087c <__aeabi_ddiv>
 8015672:	f7eb fa89 	bl	8000b88 <__aeabi_d2iz>
 8015676:	4680      	mov	r8, r0
 8015678:	f7ea ff6c 	bl	8000554 <__aeabi_i2d>
 801567c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015680:	f7ea ffd2 	bl	8000628 <__aeabi_dmul>
 8015684:	4602      	mov	r2, r0
 8015686:	460b      	mov	r3, r1
 8015688:	4630      	mov	r0, r6
 801568a:	4639      	mov	r1, r7
 801568c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015690:	f7ea fe12 	bl	80002b8 <__aeabi_dsub>
 8015694:	f805 6b01 	strb.w	r6, [r5], #1
 8015698:	eba5 060b 	sub.w	r6, r5, fp
 801569c:	45b1      	cmp	r9, r6
 801569e:	4602      	mov	r2, r0
 80156a0:	460b      	mov	r3, r1
 80156a2:	d139      	bne.n	8015718 <_dtoa_r+0x6c8>
 80156a4:	f7ea fe0a 	bl	80002bc <__adddf3>
 80156a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80156ac:	4606      	mov	r6, r0
 80156ae:	460f      	mov	r7, r1
 80156b0:	f7eb fa4a 	bl	8000b48 <__aeabi_dcmpgt>
 80156b4:	b9c8      	cbnz	r0, 80156ea <_dtoa_r+0x69a>
 80156b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80156ba:	4630      	mov	r0, r6
 80156bc:	4639      	mov	r1, r7
 80156be:	f7eb fa1b 	bl	8000af8 <__aeabi_dcmpeq>
 80156c2:	b110      	cbz	r0, 80156ca <_dtoa_r+0x67a>
 80156c4:	f018 0f01 	tst.w	r8, #1
 80156c8:	d10f      	bne.n	80156ea <_dtoa_r+0x69a>
 80156ca:	9904      	ldr	r1, [sp, #16]
 80156cc:	4620      	mov	r0, r4
 80156ce:	f000 fffd 	bl	80166cc <_Bfree>
 80156d2:	2300      	movs	r3, #0
 80156d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80156d6:	702b      	strb	r3, [r5, #0]
 80156d8:	f10a 0301 	add.w	r3, sl, #1
 80156dc:	6013      	str	r3, [r2, #0]
 80156de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	f000 8241 	beq.w	8015b68 <_dtoa_r+0xb18>
 80156e6:	601d      	str	r5, [r3, #0]
 80156e8:	e23e      	b.n	8015b68 <_dtoa_r+0xb18>
 80156ea:	f8cd a020 	str.w	sl, [sp, #32]
 80156ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80156f2:	2a39      	cmp	r2, #57	; 0x39
 80156f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80156f8:	d108      	bne.n	801570c <_dtoa_r+0x6bc>
 80156fa:	459b      	cmp	fp, r3
 80156fc:	d10a      	bne.n	8015714 <_dtoa_r+0x6c4>
 80156fe:	9b08      	ldr	r3, [sp, #32]
 8015700:	3301      	adds	r3, #1
 8015702:	9308      	str	r3, [sp, #32]
 8015704:	2330      	movs	r3, #48	; 0x30
 8015706:	f88b 3000 	strb.w	r3, [fp]
 801570a:	465b      	mov	r3, fp
 801570c:	781a      	ldrb	r2, [r3, #0]
 801570e:	3201      	adds	r2, #1
 8015710:	701a      	strb	r2, [r3, #0]
 8015712:	e78c      	b.n	801562e <_dtoa_r+0x5de>
 8015714:	461d      	mov	r5, r3
 8015716:	e7ea      	b.n	80156ee <_dtoa_r+0x69e>
 8015718:	2200      	movs	r2, #0
 801571a:	4b9b      	ldr	r3, [pc, #620]	; (8015988 <_dtoa_r+0x938>)
 801571c:	f7ea ff84 	bl	8000628 <__aeabi_dmul>
 8015720:	2200      	movs	r2, #0
 8015722:	2300      	movs	r3, #0
 8015724:	4606      	mov	r6, r0
 8015726:	460f      	mov	r7, r1
 8015728:	f7eb f9e6 	bl	8000af8 <__aeabi_dcmpeq>
 801572c:	2800      	cmp	r0, #0
 801572e:	d09a      	beq.n	8015666 <_dtoa_r+0x616>
 8015730:	e7cb      	b.n	80156ca <_dtoa_r+0x67a>
 8015732:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015734:	2a00      	cmp	r2, #0
 8015736:	f000 808b 	beq.w	8015850 <_dtoa_r+0x800>
 801573a:	9a06      	ldr	r2, [sp, #24]
 801573c:	2a01      	cmp	r2, #1
 801573e:	dc6e      	bgt.n	801581e <_dtoa_r+0x7ce>
 8015740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015742:	2a00      	cmp	r2, #0
 8015744:	d067      	beq.n	8015816 <_dtoa_r+0x7c6>
 8015746:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801574a:	9f07      	ldr	r7, [sp, #28]
 801574c:	9d05      	ldr	r5, [sp, #20]
 801574e:	9a05      	ldr	r2, [sp, #20]
 8015750:	2101      	movs	r1, #1
 8015752:	441a      	add	r2, r3
 8015754:	4620      	mov	r0, r4
 8015756:	9205      	str	r2, [sp, #20]
 8015758:	4498      	add	r8, r3
 801575a:	f001 f895 	bl	8016888 <__i2b>
 801575e:	4606      	mov	r6, r0
 8015760:	2d00      	cmp	r5, #0
 8015762:	dd0c      	ble.n	801577e <_dtoa_r+0x72e>
 8015764:	f1b8 0f00 	cmp.w	r8, #0
 8015768:	dd09      	ble.n	801577e <_dtoa_r+0x72e>
 801576a:	4545      	cmp	r5, r8
 801576c:	9a05      	ldr	r2, [sp, #20]
 801576e:	462b      	mov	r3, r5
 8015770:	bfa8      	it	ge
 8015772:	4643      	movge	r3, r8
 8015774:	1ad2      	subs	r2, r2, r3
 8015776:	9205      	str	r2, [sp, #20]
 8015778:	1aed      	subs	r5, r5, r3
 801577a:	eba8 0803 	sub.w	r8, r8, r3
 801577e:	9b07      	ldr	r3, [sp, #28]
 8015780:	b1eb      	cbz	r3, 80157be <_dtoa_r+0x76e>
 8015782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015784:	2b00      	cmp	r3, #0
 8015786:	d067      	beq.n	8015858 <_dtoa_r+0x808>
 8015788:	b18f      	cbz	r7, 80157ae <_dtoa_r+0x75e>
 801578a:	4631      	mov	r1, r6
 801578c:	463a      	mov	r2, r7
 801578e:	4620      	mov	r0, r4
 8015790:	f001 f91a 	bl	80169c8 <__pow5mult>
 8015794:	9a04      	ldr	r2, [sp, #16]
 8015796:	4601      	mov	r1, r0
 8015798:	4606      	mov	r6, r0
 801579a:	4620      	mov	r0, r4
 801579c:	f001 f87d 	bl	801689a <__multiply>
 80157a0:	9904      	ldr	r1, [sp, #16]
 80157a2:	9008      	str	r0, [sp, #32]
 80157a4:	4620      	mov	r0, r4
 80157a6:	f000 ff91 	bl	80166cc <_Bfree>
 80157aa:	9b08      	ldr	r3, [sp, #32]
 80157ac:	9304      	str	r3, [sp, #16]
 80157ae:	9b07      	ldr	r3, [sp, #28]
 80157b0:	1bda      	subs	r2, r3, r7
 80157b2:	d004      	beq.n	80157be <_dtoa_r+0x76e>
 80157b4:	9904      	ldr	r1, [sp, #16]
 80157b6:	4620      	mov	r0, r4
 80157b8:	f001 f906 	bl	80169c8 <__pow5mult>
 80157bc:	9004      	str	r0, [sp, #16]
 80157be:	2101      	movs	r1, #1
 80157c0:	4620      	mov	r0, r4
 80157c2:	f001 f861 	bl	8016888 <__i2b>
 80157c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157c8:	4607      	mov	r7, r0
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	f000 81d0 	beq.w	8015b70 <_dtoa_r+0xb20>
 80157d0:	461a      	mov	r2, r3
 80157d2:	4601      	mov	r1, r0
 80157d4:	4620      	mov	r0, r4
 80157d6:	f001 f8f7 	bl	80169c8 <__pow5mult>
 80157da:	9b06      	ldr	r3, [sp, #24]
 80157dc:	2b01      	cmp	r3, #1
 80157de:	4607      	mov	r7, r0
 80157e0:	dc40      	bgt.n	8015864 <_dtoa_r+0x814>
 80157e2:	9b00      	ldr	r3, [sp, #0]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d139      	bne.n	801585c <_dtoa_r+0x80c>
 80157e8:	9b01      	ldr	r3, [sp, #4]
 80157ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d136      	bne.n	8015860 <_dtoa_r+0x810>
 80157f2:	9b01      	ldr	r3, [sp, #4]
 80157f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80157f8:	0d1b      	lsrs	r3, r3, #20
 80157fa:	051b      	lsls	r3, r3, #20
 80157fc:	b12b      	cbz	r3, 801580a <_dtoa_r+0x7ba>
 80157fe:	9b05      	ldr	r3, [sp, #20]
 8015800:	3301      	adds	r3, #1
 8015802:	9305      	str	r3, [sp, #20]
 8015804:	f108 0801 	add.w	r8, r8, #1
 8015808:	2301      	movs	r3, #1
 801580a:	9307      	str	r3, [sp, #28]
 801580c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801580e:	2b00      	cmp	r3, #0
 8015810:	d12a      	bne.n	8015868 <_dtoa_r+0x818>
 8015812:	2001      	movs	r0, #1
 8015814:	e030      	b.n	8015878 <_dtoa_r+0x828>
 8015816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015818:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801581c:	e795      	b.n	801574a <_dtoa_r+0x6fa>
 801581e:	9b07      	ldr	r3, [sp, #28]
 8015820:	f109 37ff 	add.w	r7, r9, #4294967295
 8015824:	42bb      	cmp	r3, r7
 8015826:	bfbf      	itttt	lt
 8015828:	9b07      	ldrlt	r3, [sp, #28]
 801582a:	9707      	strlt	r7, [sp, #28]
 801582c:	1afa      	sublt	r2, r7, r3
 801582e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015830:	bfbb      	ittet	lt
 8015832:	189b      	addlt	r3, r3, r2
 8015834:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015836:	1bdf      	subge	r7, r3, r7
 8015838:	2700      	movlt	r7, #0
 801583a:	f1b9 0f00 	cmp.w	r9, #0
 801583e:	bfb5      	itete	lt
 8015840:	9b05      	ldrlt	r3, [sp, #20]
 8015842:	9d05      	ldrge	r5, [sp, #20]
 8015844:	eba3 0509 	sublt.w	r5, r3, r9
 8015848:	464b      	movge	r3, r9
 801584a:	bfb8      	it	lt
 801584c:	2300      	movlt	r3, #0
 801584e:	e77e      	b.n	801574e <_dtoa_r+0x6fe>
 8015850:	9f07      	ldr	r7, [sp, #28]
 8015852:	9d05      	ldr	r5, [sp, #20]
 8015854:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015856:	e783      	b.n	8015760 <_dtoa_r+0x710>
 8015858:	9a07      	ldr	r2, [sp, #28]
 801585a:	e7ab      	b.n	80157b4 <_dtoa_r+0x764>
 801585c:	2300      	movs	r3, #0
 801585e:	e7d4      	b.n	801580a <_dtoa_r+0x7ba>
 8015860:	9b00      	ldr	r3, [sp, #0]
 8015862:	e7d2      	b.n	801580a <_dtoa_r+0x7ba>
 8015864:	2300      	movs	r3, #0
 8015866:	9307      	str	r3, [sp, #28]
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801586e:	6918      	ldr	r0, [r3, #16]
 8015870:	f000 ffbc 	bl	80167ec <__hi0bits>
 8015874:	f1c0 0020 	rsb	r0, r0, #32
 8015878:	4440      	add	r0, r8
 801587a:	f010 001f 	ands.w	r0, r0, #31
 801587e:	d047      	beq.n	8015910 <_dtoa_r+0x8c0>
 8015880:	f1c0 0320 	rsb	r3, r0, #32
 8015884:	2b04      	cmp	r3, #4
 8015886:	dd3b      	ble.n	8015900 <_dtoa_r+0x8b0>
 8015888:	9b05      	ldr	r3, [sp, #20]
 801588a:	f1c0 001c 	rsb	r0, r0, #28
 801588e:	4403      	add	r3, r0
 8015890:	9305      	str	r3, [sp, #20]
 8015892:	4405      	add	r5, r0
 8015894:	4480      	add	r8, r0
 8015896:	9b05      	ldr	r3, [sp, #20]
 8015898:	2b00      	cmp	r3, #0
 801589a:	dd05      	ble.n	80158a8 <_dtoa_r+0x858>
 801589c:	461a      	mov	r2, r3
 801589e:	9904      	ldr	r1, [sp, #16]
 80158a0:	4620      	mov	r0, r4
 80158a2:	f001 f8df 	bl	8016a64 <__lshift>
 80158a6:	9004      	str	r0, [sp, #16]
 80158a8:	f1b8 0f00 	cmp.w	r8, #0
 80158ac:	dd05      	ble.n	80158ba <_dtoa_r+0x86a>
 80158ae:	4639      	mov	r1, r7
 80158b0:	4642      	mov	r2, r8
 80158b2:	4620      	mov	r0, r4
 80158b4:	f001 f8d6 	bl	8016a64 <__lshift>
 80158b8:	4607      	mov	r7, r0
 80158ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80158bc:	b353      	cbz	r3, 8015914 <_dtoa_r+0x8c4>
 80158be:	4639      	mov	r1, r7
 80158c0:	9804      	ldr	r0, [sp, #16]
 80158c2:	f001 f923 	bl	8016b0c <__mcmp>
 80158c6:	2800      	cmp	r0, #0
 80158c8:	da24      	bge.n	8015914 <_dtoa_r+0x8c4>
 80158ca:	2300      	movs	r3, #0
 80158cc:	220a      	movs	r2, #10
 80158ce:	9904      	ldr	r1, [sp, #16]
 80158d0:	4620      	mov	r0, r4
 80158d2:	f000 ff12 	bl	80166fa <__multadd>
 80158d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158d8:	9004      	str	r0, [sp, #16]
 80158da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80158de:	2b00      	cmp	r3, #0
 80158e0:	f000 814d 	beq.w	8015b7e <_dtoa_r+0xb2e>
 80158e4:	2300      	movs	r3, #0
 80158e6:	4631      	mov	r1, r6
 80158e8:	220a      	movs	r2, #10
 80158ea:	4620      	mov	r0, r4
 80158ec:	f000 ff05 	bl	80166fa <__multadd>
 80158f0:	9b02      	ldr	r3, [sp, #8]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	4606      	mov	r6, r0
 80158f6:	dc4f      	bgt.n	8015998 <_dtoa_r+0x948>
 80158f8:	9b06      	ldr	r3, [sp, #24]
 80158fa:	2b02      	cmp	r3, #2
 80158fc:	dd4c      	ble.n	8015998 <_dtoa_r+0x948>
 80158fe:	e011      	b.n	8015924 <_dtoa_r+0x8d4>
 8015900:	d0c9      	beq.n	8015896 <_dtoa_r+0x846>
 8015902:	9a05      	ldr	r2, [sp, #20]
 8015904:	331c      	adds	r3, #28
 8015906:	441a      	add	r2, r3
 8015908:	9205      	str	r2, [sp, #20]
 801590a:	441d      	add	r5, r3
 801590c:	4498      	add	r8, r3
 801590e:	e7c2      	b.n	8015896 <_dtoa_r+0x846>
 8015910:	4603      	mov	r3, r0
 8015912:	e7f6      	b.n	8015902 <_dtoa_r+0x8b2>
 8015914:	f1b9 0f00 	cmp.w	r9, #0
 8015918:	dc38      	bgt.n	801598c <_dtoa_r+0x93c>
 801591a:	9b06      	ldr	r3, [sp, #24]
 801591c:	2b02      	cmp	r3, #2
 801591e:	dd35      	ble.n	801598c <_dtoa_r+0x93c>
 8015920:	f8cd 9008 	str.w	r9, [sp, #8]
 8015924:	9b02      	ldr	r3, [sp, #8]
 8015926:	b963      	cbnz	r3, 8015942 <_dtoa_r+0x8f2>
 8015928:	4639      	mov	r1, r7
 801592a:	2205      	movs	r2, #5
 801592c:	4620      	mov	r0, r4
 801592e:	f000 fee4 	bl	80166fa <__multadd>
 8015932:	4601      	mov	r1, r0
 8015934:	4607      	mov	r7, r0
 8015936:	9804      	ldr	r0, [sp, #16]
 8015938:	f001 f8e8 	bl	8016b0c <__mcmp>
 801593c:	2800      	cmp	r0, #0
 801593e:	f73f adcc 	bgt.w	80154da <_dtoa_r+0x48a>
 8015942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015944:	465d      	mov	r5, fp
 8015946:	ea6f 0a03 	mvn.w	sl, r3
 801594a:	f04f 0900 	mov.w	r9, #0
 801594e:	4639      	mov	r1, r7
 8015950:	4620      	mov	r0, r4
 8015952:	f000 febb 	bl	80166cc <_Bfree>
 8015956:	2e00      	cmp	r6, #0
 8015958:	f43f aeb7 	beq.w	80156ca <_dtoa_r+0x67a>
 801595c:	f1b9 0f00 	cmp.w	r9, #0
 8015960:	d005      	beq.n	801596e <_dtoa_r+0x91e>
 8015962:	45b1      	cmp	r9, r6
 8015964:	d003      	beq.n	801596e <_dtoa_r+0x91e>
 8015966:	4649      	mov	r1, r9
 8015968:	4620      	mov	r0, r4
 801596a:	f000 feaf 	bl	80166cc <_Bfree>
 801596e:	4631      	mov	r1, r6
 8015970:	4620      	mov	r0, r4
 8015972:	f000 feab 	bl	80166cc <_Bfree>
 8015976:	e6a8      	b.n	80156ca <_dtoa_r+0x67a>
 8015978:	2700      	movs	r7, #0
 801597a:	463e      	mov	r6, r7
 801597c:	e7e1      	b.n	8015942 <_dtoa_r+0x8f2>
 801597e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015982:	463e      	mov	r6, r7
 8015984:	e5a9      	b.n	80154da <_dtoa_r+0x48a>
 8015986:	bf00      	nop
 8015988:	40240000 	.word	0x40240000
 801598c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801598e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015992:	2b00      	cmp	r3, #0
 8015994:	f000 80fa 	beq.w	8015b8c <_dtoa_r+0xb3c>
 8015998:	2d00      	cmp	r5, #0
 801599a:	dd05      	ble.n	80159a8 <_dtoa_r+0x958>
 801599c:	4631      	mov	r1, r6
 801599e:	462a      	mov	r2, r5
 80159a0:	4620      	mov	r0, r4
 80159a2:	f001 f85f 	bl	8016a64 <__lshift>
 80159a6:	4606      	mov	r6, r0
 80159a8:	9b07      	ldr	r3, [sp, #28]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d04c      	beq.n	8015a48 <_dtoa_r+0x9f8>
 80159ae:	6871      	ldr	r1, [r6, #4]
 80159b0:	4620      	mov	r0, r4
 80159b2:	f000 fe57 	bl	8016664 <_Balloc>
 80159b6:	6932      	ldr	r2, [r6, #16]
 80159b8:	3202      	adds	r2, #2
 80159ba:	4605      	mov	r5, r0
 80159bc:	0092      	lsls	r2, r2, #2
 80159be:	f106 010c 	add.w	r1, r6, #12
 80159c2:	300c      	adds	r0, #12
 80159c4:	f7fd fb54 	bl	8013070 <memcpy>
 80159c8:	2201      	movs	r2, #1
 80159ca:	4629      	mov	r1, r5
 80159cc:	4620      	mov	r0, r4
 80159ce:	f001 f849 	bl	8016a64 <__lshift>
 80159d2:	9b00      	ldr	r3, [sp, #0]
 80159d4:	f8cd b014 	str.w	fp, [sp, #20]
 80159d8:	f003 0301 	and.w	r3, r3, #1
 80159dc:	46b1      	mov	r9, r6
 80159de:	9307      	str	r3, [sp, #28]
 80159e0:	4606      	mov	r6, r0
 80159e2:	4639      	mov	r1, r7
 80159e4:	9804      	ldr	r0, [sp, #16]
 80159e6:	f7ff faa7 	bl	8014f38 <quorem>
 80159ea:	4649      	mov	r1, r9
 80159ec:	4605      	mov	r5, r0
 80159ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80159f2:	9804      	ldr	r0, [sp, #16]
 80159f4:	f001 f88a 	bl	8016b0c <__mcmp>
 80159f8:	4632      	mov	r2, r6
 80159fa:	9000      	str	r0, [sp, #0]
 80159fc:	4639      	mov	r1, r7
 80159fe:	4620      	mov	r0, r4
 8015a00:	f001 f89e 	bl	8016b40 <__mdiff>
 8015a04:	68c3      	ldr	r3, [r0, #12]
 8015a06:	4602      	mov	r2, r0
 8015a08:	bb03      	cbnz	r3, 8015a4c <_dtoa_r+0x9fc>
 8015a0a:	4601      	mov	r1, r0
 8015a0c:	9008      	str	r0, [sp, #32]
 8015a0e:	9804      	ldr	r0, [sp, #16]
 8015a10:	f001 f87c 	bl	8016b0c <__mcmp>
 8015a14:	9a08      	ldr	r2, [sp, #32]
 8015a16:	4603      	mov	r3, r0
 8015a18:	4611      	mov	r1, r2
 8015a1a:	4620      	mov	r0, r4
 8015a1c:	9308      	str	r3, [sp, #32]
 8015a1e:	f000 fe55 	bl	80166cc <_Bfree>
 8015a22:	9b08      	ldr	r3, [sp, #32]
 8015a24:	b9a3      	cbnz	r3, 8015a50 <_dtoa_r+0xa00>
 8015a26:	9a06      	ldr	r2, [sp, #24]
 8015a28:	b992      	cbnz	r2, 8015a50 <_dtoa_r+0xa00>
 8015a2a:	9a07      	ldr	r2, [sp, #28]
 8015a2c:	b982      	cbnz	r2, 8015a50 <_dtoa_r+0xa00>
 8015a2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015a32:	d029      	beq.n	8015a88 <_dtoa_r+0xa38>
 8015a34:	9b00      	ldr	r3, [sp, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	dd01      	ble.n	8015a3e <_dtoa_r+0x9ee>
 8015a3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015a3e:	9b05      	ldr	r3, [sp, #20]
 8015a40:	1c5d      	adds	r5, r3, #1
 8015a42:	f883 8000 	strb.w	r8, [r3]
 8015a46:	e782      	b.n	801594e <_dtoa_r+0x8fe>
 8015a48:	4630      	mov	r0, r6
 8015a4a:	e7c2      	b.n	80159d2 <_dtoa_r+0x982>
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	e7e3      	b.n	8015a18 <_dtoa_r+0x9c8>
 8015a50:	9a00      	ldr	r2, [sp, #0]
 8015a52:	2a00      	cmp	r2, #0
 8015a54:	db04      	blt.n	8015a60 <_dtoa_r+0xa10>
 8015a56:	d125      	bne.n	8015aa4 <_dtoa_r+0xa54>
 8015a58:	9a06      	ldr	r2, [sp, #24]
 8015a5a:	bb1a      	cbnz	r2, 8015aa4 <_dtoa_r+0xa54>
 8015a5c:	9a07      	ldr	r2, [sp, #28]
 8015a5e:	bb0a      	cbnz	r2, 8015aa4 <_dtoa_r+0xa54>
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	ddec      	ble.n	8015a3e <_dtoa_r+0x9ee>
 8015a64:	2201      	movs	r2, #1
 8015a66:	9904      	ldr	r1, [sp, #16]
 8015a68:	4620      	mov	r0, r4
 8015a6a:	f000 fffb 	bl	8016a64 <__lshift>
 8015a6e:	4639      	mov	r1, r7
 8015a70:	9004      	str	r0, [sp, #16]
 8015a72:	f001 f84b 	bl	8016b0c <__mcmp>
 8015a76:	2800      	cmp	r0, #0
 8015a78:	dc03      	bgt.n	8015a82 <_dtoa_r+0xa32>
 8015a7a:	d1e0      	bne.n	8015a3e <_dtoa_r+0x9ee>
 8015a7c:	f018 0f01 	tst.w	r8, #1
 8015a80:	d0dd      	beq.n	8015a3e <_dtoa_r+0x9ee>
 8015a82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015a86:	d1d8      	bne.n	8015a3a <_dtoa_r+0x9ea>
 8015a88:	9b05      	ldr	r3, [sp, #20]
 8015a8a:	9a05      	ldr	r2, [sp, #20]
 8015a8c:	1c5d      	adds	r5, r3, #1
 8015a8e:	2339      	movs	r3, #57	; 0x39
 8015a90:	7013      	strb	r3, [r2, #0]
 8015a92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015a96:	2b39      	cmp	r3, #57	; 0x39
 8015a98:	f105 32ff 	add.w	r2, r5, #4294967295
 8015a9c:	d04f      	beq.n	8015b3e <_dtoa_r+0xaee>
 8015a9e:	3301      	adds	r3, #1
 8015aa0:	7013      	strb	r3, [r2, #0]
 8015aa2:	e754      	b.n	801594e <_dtoa_r+0x8fe>
 8015aa4:	9a05      	ldr	r2, [sp, #20]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f102 0501 	add.w	r5, r2, #1
 8015aac:	dd06      	ble.n	8015abc <_dtoa_r+0xa6c>
 8015aae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015ab2:	d0e9      	beq.n	8015a88 <_dtoa_r+0xa38>
 8015ab4:	f108 0801 	add.w	r8, r8, #1
 8015ab8:	9b05      	ldr	r3, [sp, #20]
 8015aba:	e7c2      	b.n	8015a42 <_dtoa_r+0x9f2>
 8015abc:	9a02      	ldr	r2, [sp, #8]
 8015abe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015ac2:	eba5 030b 	sub.w	r3, r5, fp
 8015ac6:	4293      	cmp	r3, r2
 8015ac8:	d021      	beq.n	8015b0e <_dtoa_r+0xabe>
 8015aca:	2300      	movs	r3, #0
 8015acc:	220a      	movs	r2, #10
 8015ace:	9904      	ldr	r1, [sp, #16]
 8015ad0:	4620      	mov	r0, r4
 8015ad2:	f000 fe12 	bl	80166fa <__multadd>
 8015ad6:	45b1      	cmp	r9, r6
 8015ad8:	9004      	str	r0, [sp, #16]
 8015ada:	f04f 0300 	mov.w	r3, #0
 8015ade:	f04f 020a 	mov.w	r2, #10
 8015ae2:	4649      	mov	r1, r9
 8015ae4:	4620      	mov	r0, r4
 8015ae6:	d105      	bne.n	8015af4 <_dtoa_r+0xaa4>
 8015ae8:	f000 fe07 	bl	80166fa <__multadd>
 8015aec:	4681      	mov	r9, r0
 8015aee:	4606      	mov	r6, r0
 8015af0:	9505      	str	r5, [sp, #20]
 8015af2:	e776      	b.n	80159e2 <_dtoa_r+0x992>
 8015af4:	f000 fe01 	bl	80166fa <__multadd>
 8015af8:	4631      	mov	r1, r6
 8015afa:	4681      	mov	r9, r0
 8015afc:	2300      	movs	r3, #0
 8015afe:	220a      	movs	r2, #10
 8015b00:	4620      	mov	r0, r4
 8015b02:	f000 fdfa 	bl	80166fa <__multadd>
 8015b06:	4606      	mov	r6, r0
 8015b08:	e7f2      	b.n	8015af0 <_dtoa_r+0xaa0>
 8015b0a:	f04f 0900 	mov.w	r9, #0
 8015b0e:	2201      	movs	r2, #1
 8015b10:	9904      	ldr	r1, [sp, #16]
 8015b12:	4620      	mov	r0, r4
 8015b14:	f000 ffa6 	bl	8016a64 <__lshift>
 8015b18:	4639      	mov	r1, r7
 8015b1a:	9004      	str	r0, [sp, #16]
 8015b1c:	f000 fff6 	bl	8016b0c <__mcmp>
 8015b20:	2800      	cmp	r0, #0
 8015b22:	dcb6      	bgt.n	8015a92 <_dtoa_r+0xa42>
 8015b24:	d102      	bne.n	8015b2c <_dtoa_r+0xadc>
 8015b26:	f018 0f01 	tst.w	r8, #1
 8015b2a:	d1b2      	bne.n	8015a92 <_dtoa_r+0xa42>
 8015b2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b30:	2b30      	cmp	r3, #48	; 0x30
 8015b32:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b36:	f47f af0a 	bne.w	801594e <_dtoa_r+0x8fe>
 8015b3a:	4615      	mov	r5, r2
 8015b3c:	e7f6      	b.n	8015b2c <_dtoa_r+0xadc>
 8015b3e:	4593      	cmp	fp, r2
 8015b40:	d105      	bne.n	8015b4e <_dtoa_r+0xafe>
 8015b42:	2331      	movs	r3, #49	; 0x31
 8015b44:	f10a 0a01 	add.w	sl, sl, #1
 8015b48:	f88b 3000 	strb.w	r3, [fp]
 8015b4c:	e6ff      	b.n	801594e <_dtoa_r+0x8fe>
 8015b4e:	4615      	mov	r5, r2
 8015b50:	e79f      	b.n	8015a92 <_dtoa_r+0xa42>
 8015b52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015bb8 <_dtoa_r+0xb68>
 8015b56:	e007      	b.n	8015b68 <_dtoa_r+0xb18>
 8015b58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015bbc <_dtoa_r+0xb6c>
 8015b5e:	b11b      	cbz	r3, 8015b68 <_dtoa_r+0xb18>
 8015b60:	f10b 0308 	add.w	r3, fp, #8
 8015b64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015b66:	6013      	str	r3, [r2, #0]
 8015b68:	4658      	mov	r0, fp
 8015b6a:	b017      	add	sp, #92	; 0x5c
 8015b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b70:	9b06      	ldr	r3, [sp, #24]
 8015b72:	2b01      	cmp	r3, #1
 8015b74:	f77f ae35 	ble.w	80157e2 <_dtoa_r+0x792>
 8015b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015b7a:	9307      	str	r3, [sp, #28]
 8015b7c:	e649      	b.n	8015812 <_dtoa_r+0x7c2>
 8015b7e:	9b02      	ldr	r3, [sp, #8]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	dc03      	bgt.n	8015b8c <_dtoa_r+0xb3c>
 8015b84:	9b06      	ldr	r3, [sp, #24]
 8015b86:	2b02      	cmp	r3, #2
 8015b88:	f73f aecc 	bgt.w	8015924 <_dtoa_r+0x8d4>
 8015b8c:	465d      	mov	r5, fp
 8015b8e:	4639      	mov	r1, r7
 8015b90:	9804      	ldr	r0, [sp, #16]
 8015b92:	f7ff f9d1 	bl	8014f38 <quorem>
 8015b96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015b9a:	f805 8b01 	strb.w	r8, [r5], #1
 8015b9e:	9a02      	ldr	r2, [sp, #8]
 8015ba0:	eba5 030b 	sub.w	r3, r5, fp
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	ddb0      	ble.n	8015b0a <_dtoa_r+0xaba>
 8015ba8:	2300      	movs	r3, #0
 8015baa:	220a      	movs	r2, #10
 8015bac:	9904      	ldr	r1, [sp, #16]
 8015bae:	4620      	mov	r0, r4
 8015bb0:	f000 fda3 	bl	80166fa <__multadd>
 8015bb4:	9004      	str	r0, [sp, #16]
 8015bb6:	e7ea      	b.n	8015b8e <_dtoa_r+0xb3e>
 8015bb8:	080188cb 	.word	0x080188cb
 8015bbc:	08018728 	.word	0x08018728

08015bc0 <__sflush_r>:
 8015bc0:	898a      	ldrh	r2, [r1, #12]
 8015bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bc6:	4605      	mov	r5, r0
 8015bc8:	0710      	lsls	r0, r2, #28
 8015bca:	460c      	mov	r4, r1
 8015bcc:	d458      	bmi.n	8015c80 <__sflush_r+0xc0>
 8015bce:	684b      	ldr	r3, [r1, #4]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	dc05      	bgt.n	8015be0 <__sflush_r+0x20>
 8015bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	dc02      	bgt.n	8015be0 <__sflush_r+0x20>
 8015bda:	2000      	movs	r0, #0
 8015bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015be2:	2e00      	cmp	r6, #0
 8015be4:	d0f9      	beq.n	8015bda <__sflush_r+0x1a>
 8015be6:	2300      	movs	r3, #0
 8015be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015bec:	682f      	ldr	r7, [r5, #0]
 8015bee:	6a21      	ldr	r1, [r4, #32]
 8015bf0:	602b      	str	r3, [r5, #0]
 8015bf2:	d032      	beq.n	8015c5a <__sflush_r+0x9a>
 8015bf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015bf6:	89a3      	ldrh	r3, [r4, #12]
 8015bf8:	075a      	lsls	r2, r3, #29
 8015bfa:	d505      	bpl.n	8015c08 <__sflush_r+0x48>
 8015bfc:	6863      	ldr	r3, [r4, #4]
 8015bfe:	1ac0      	subs	r0, r0, r3
 8015c00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c02:	b10b      	cbz	r3, 8015c08 <__sflush_r+0x48>
 8015c04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c06:	1ac0      	subs	r0, r0, r3
 8015c08:	2300      	movs	r3, #0
 8015c0a:	4602      	mov	r2, r0
 8015c0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c0e:	6a21      	ldr	r1, [r4, #32]
 8015c10:	4628      	mov	r0, r5
 8015c12:	47b0      	blx	r6
 8015c14:	1c43      	adds	r3, r0, #1
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	d106      	bne.n	8015c28 <__sflush_r+0x68>
 8015c1a:	6829      	ldr	r1, [r5, #0]
 8015c1c:	291d      	cmp	r1, #29
 8015c1e:	d848      	bhi.n	8015cb2 <__sflush_r+0xf2>
 8015c20:	4a29      	ldr	r2, [pc, #164]	; (8015cc8 <__sflush_r+0x108>)
 8015c22:	40ca      	lsrs	r2, r1
 8015c24:	07d6      	lsls	r6, r2, #31
 8015c26:	d544      	bpl.n	8015cb2 <__sflush_r+0xf2>
 8015c28:	2200      	movs	r2, #0
 8015c2a:	6062      	str	r2, [r4, #4]
 8015c2c:	04d9      	lsls	r1, r3, #19
 8015c2e:	6922      	ldr	r2, [r4, #16]
 8015c30:	6022      	str	r2, [r4, #0]
 8015c32:	d504      	bpl.n	8015c3e <__sflush_r+0x7e>
 8015c34:	1c42      	adds	r2, r0, #1
 8015c36:	d101      	bne.n	8015c3c <__sflush_r+0x7c>
 8015c38:	682b      	ldr	r3, [r5, #0]
 8015c3a:	b903      	cbnz	r3, 8015c3e <__sflush_r+0x7e>
 8015c3c:	6560      	str	r0, [r4, #84]	; 0x54
 8015c3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c40:	602f      	str	r7, [r5, #0]
 8015c42:	2900      	cmp	r1, #0
 8015c44:	d0c9      	beq.n	8015bda <__sflush_r+0x1a>
 8015c46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c4a:	4299      	cmp	r1, r3
 8015c4c:	d002      	beq.n	8015c54 <__sflush_r+0x94>
 8015c4e:	4628      	mov	r0, r5
 8015c50:	f001 f916 	bl	8016e80 <_free_r>
 8015c54:	2000      	movs	r0, #0
 8015c56:	6360      	str	r0, [r4, #52]	; 0x34
 8015c58:	e7c0      	b.n	8015bdc <__sflush_r+0x1c>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	47b0      	blx	r6
 8015c60:	1c41      	adds	r1, r0, #1
 8015c62:	d1c8      	bne.n	8015bf6 <__sflush_r+0x36>
 8015c64:	682b      	ldr	r3, [r5, #0]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d0c5      	beq.n	8015bf6 <__sflush_r+0x36>
 8015c6a:	2b1d      	cmp	r3, #29
 8015c6c:	d001      	beq.n	8015c72 <__sflush_r+0xb2>
 8015c6e:	2b16      	cmp	r3, #22
 8015c70:	d101      	bne.n	8015c76 <__sflush_r+0xb6>
 8015c72:	602f      	str	r7, [r5, #0]
 8015c74:	e7b1      	b.n	8015bda <__sflush_r+0x1a>
 8015c76:	89a3      	ldrh	r3, [r4, #12]
 8015c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c7c:	81a3      	strh	r3, [r4, #12]
 8015c7e:	e7ad      	b.n	8015bdc <__sflush_r+0x1c>
 8015c80:	690f      	ldr	r7, [r1, #16]
 8015c82:	2f00      	cmp	r7, #0
 8015c84:	d0a9      	beq.n	8015bda <__sflush_r+0x1a>
 8015c86:	0793      	lsls	r3, r2, #30
 8015c88:	680e      	ldr	r6, [r1, #0]
 8015c8a:	bf08      	it	eq
 8015c8c:	694b      	ldreq	r3, [r1, #20]
 8015c8e:	600f      	str	r7, [r1, #0]
 8015c90:	bf18      	it	ne
 8015c92:	2300      	movne	r3, #0
 8015c94:	eba6 0807 	sub.w	r8, r6, r7
 8015c98:	608b      	str	r3, [r1, #8]
 8015c9a:	f1b8 0f00 	cmp.w	r8, #0
 8015c9e:	dd9c      	ble.n	8015bda <__sflush_r+0x1a>
 8015ca0:	4643      	mov	r3, r8
 8015ca2:	463a      	mov	r2, r7
 8015ca4:	6a21      	ldr	r1, [r4, #32]
 8015ca6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ca8:	4628      	mov	r0, r5
 8015caa:	47b0      	blx	r6
 8015cac:	2800      	cmp	r0, #0
 8015cae:	dc06      	bgt.n	8015cbe <__sflush_r+0xfe>
 8015cb0:	89a3      	ldrh	r3, [r4, #12]
 8015cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cb6:	81a3      	strh	r3, [r4, #12]
 8015cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8015cbc:	e78e      	b.n	8015bdc <__sflush_r+0x1c>
 8015cbe:	4407      	add	r7, r0
 8015cc0:	eba8 0800 	sub.w	r8, r8, r0
 8015cc4:	e7e9      	b.n	8015c9a <__sflush_r+0xda>
 8015cc6:	bf00      	nop
 8015cc8:	20400001 	.word	0x20400001

08015ccc <_fflush_r>:
 8015ccc:	b538      	push	{r3, r4, r5, lr}
 8015cce:	690b      	ldr	r3, [r1, #16]
 8015cd0:	4605      	mov	r5, r0
 8015cd2:	460c      	mov	r4, r1
 8015cd4:	b1db      	cbz	r3, 8015d0e <_fflush_r+0x42>
 8015cd6:	b118      	cbz	r0, 8015ce0 <_fflush_r+0x14>
 8015cd8:	6983      	ldr	r3, [r0, #24]
 8015cda:	b90b      	cbnz	r3, 8015ce0 <_fflush_r+0x14>
 8015cdc:	f000 f860 	bl	8015da0 <__sinit>
 8015ce0:	4b0c      	ldr	r3, [pc, #48]	; (8015d14 <_fflush_r+0x48>)
 8015ce2:	429c      	cmp	r4, r3
 8015ce4:	d109      	bne.n	8015cfa <_fflush_r+0x2e>
 8015ce6:	686c      	ldr	r4, [r5, #4]
 8015ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cec:	b17b      	cbz	r3, 8015d0e <_fflush_r+0x42>
 8015cee:	4621      	mov	r1, r4
 8015cf0:	4628      	mov	r0, r5
 8015cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cf6:	f7ff bf63 	b.w	8015bc0 <__sflush_r>
 8015cfa:	4b07      	ldr	r3, [pc, #28]	; (8015d18 <_fflush_r+0x4c>)
 8015cfc:	429c      	cmp	r4, r3
 8015cfe:	d101      	bne.n	8015d04 <_fflush_r+0x38>
 8015d00:	68ac      	ldr	r4, [r5, #8]
 8015d02:	e7f1      	b.n	8015ce8 <_fflush_r+0x1c>
 8015d04:	4b05      	ldr	r3, [pc, #20]	; (8015d1c <_fflush_r+0x50>)
 8015d06:	429c      	cmp	r4, r3
 8015d08:	bf08      	it	eq
 8015d0a:	68ec      	ldreq	r4, [r5, #12]
 8015d0c:	e7ec      	b.n	8015ce8 <_fflush_r+0x1c>
 8015d0e:	2000      	movs	r0, #0
 8015d10:	bd38      	pop	{r3, r4, r5, pc}
 8015d12:	bf00      	nop
 8015d14:	08018758 	.word	0x08018758
 8015d18:	08018778 	.word	0x08018778
 8015d1c:	08018738 	.word	0x08018738

08015d20 <std>:
 8015d20:	2300      	movs	r3, #0
 8015d22:	b510      	push	{r4, lr}
 8015d24:	4604      	mov	r4, r0
 8015d26:	e9c0 3300 	strd	r3, r3, [r0]
 8015d2a:	6083      	str	r3, [r0, #8]
 8015d2c:	8181      	strh	r1, [r0, #12]
 8015d2e:	6643      	str	r3, [r0, #100]	; 0x64
 8015d30:	81c2      	strh	r2, [r0, #14]
 8015d32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015d36:	6183      	str	r3, [r0, #24]
 8015d38:	4619      	mov	r1, r3
 8015d3a:	2208      	movs	r2, #8
 8015d3c:	305c      	adds	r0, #92	; 0x5c
 8015d3e:	f7fd f9a2 	bl	8013086 <memset>
 8015d42:	4b05      	ldr	r3, [pc, #20]	; (8015d58 <std+0x38>)
 8015d44:	6263      	str	r3, [r4, #36]	; 0x24
 8015d46:	4b05      	ldr	r3, [pc, #20]	; (8015d5c <std+0x3c>)
 8015d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8015d4a:	4b05      	ldr	r3, [pc, #20]	; (8015d60 <std+0x40>)
 8015d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015d4e:	4b05      	ldr	r3, [pc, #20]	; (8015d64 <std+0x44>)
 8015d50:	6224      	str	r4, [r4, #32]
 8015d52:	6323      	str	r3, [r4, #48]	; 0x30
 8015d54:	bd10      	pop	{r4, pc}
 8015d56:	bf00      	nop
 8015d58:	08013f3d 	.word	0x08013f3d
 8015d5c:	08013f63 	.word	0x08013f63
 8015d60:	08013f9b 	.word	0x08013f9b
 8015d64:	08013fbf 	.word	0x08013fbf

08015d68 <_cleanup_r>:
 8015d68:	4901      	ldr	r1, [pc, #4]	; (8015d70 <_cleanup_r+0x8>)
 8015d6a:	f000 b885 	b.w	8015e78 <_fwalk_reent>
 8015d6e:	bf00      	nop
 8015d70:	08015ccd 	.word	0x08015ccd

08015d74 <__sfmoreglue>:
 8015d74:	b570      	push	{r4, r5, r6, lr}
 8015d76:	1e4a      	subs	r2, r1, #1
 8015d78:	2568      	movs	r5, #104	; 0x68
 8015d7a:	4355      	muls	r5, r2
 8015d7c:	460e      	mov	r6, r1
 8015d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015d82:	f001 f8cb 	bl	8016f1c <_malloc_r>
 8015d86:	4604      	mov	r4, r0
 8015d88:	b140      	cbz	r0, 8015d9c <__sfmoreglue+0x28>
 8015d8a:	2100      	movs	r1, #0
 8015d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8015d90:	300c      	adds	r0, #12
 8015d92:	60a0      	str	r0, [r4, #8]
 8015d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015d98:	f7fd f975 	bl	8013086 <memset>
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	bd70      	pop	{r4, r5, r6, pc}

08015da0 <__sinit>:
 8015da0:	6983      	ldr	r3, [r0, #24]
 8015da2:	b510      	push	{r4, lr}
 8015da4:	4604      	mov	r4, r0
 8015da6:	bb33      	cbnz	r3, 8015df6 <__sinit+0x56>
 8015da8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015dac:	6503      	str	r3, [r0, #80]	; 0x50
 8015dae:	4b12      	ldr	r3, [pc, #72]	; (8015df8 <__sinit+0x58>)
 8015db0:	4a12      	ldr	r2, [pc, #72]	; (8015dfc <__sinit+0x5c>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	6282      	str	r2, [r0, #40]	; 0x28
 8015db6:	4298      	cmp	r0, r3
 8015db8:	bf04      	itt	eq
 8015dba:	2301      	moveq	r3, #1
 8015dbc:	6183      	streq	r3, [r0, #24]
 8015dbe:	f000 f81f 	bl	8015e00 <__sfp>
 8015dc2:	6060      	str	r0, [r4, #4]
 8015dc4:	4620      	mov	r0, r4
 8015dc6:	f000 f81b 	bl	8015e00 <__sfp>
 8015dca:	60a0      	str	r0, [r4, #8]
 8015dcc:	4620      	mov	r0, r4
 8015dce:	f000 f817 	bl	8015e00 <__sfp>
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	60e0      	str	r0, [r4, #12]
 8015dd6:	2104      	movs	r1, #4
 8015dd8:	6860      	ldr	r0, [r4, #4]
 8015dda:	f7ff ffa1 	bl	8015d20 <std>
 8015dde:	2201      	movs	r2, #1
 8015de0:	2109      	movs	r1, #9
 8015de2:	68a0      	ldr	r0, [r4, #8]
 8015de4:	f7ff ff9c 	bl	8015d20 <std>
 8015de8:	2202      	movs	r2, #2
 8015dea:	2112      	movs	r1, #18
 8015dec:	68e0      	ldr	r0, [r4, #12]
 8015dee:	f7ff ff97 	bl	8015d20 <std>
 8015df2:	2301      	movs	r3, #1
 8015df4:	61a3      	str	r3, [r4, #24]
 8015df6:	bd10      	pop	{r4, pc}
 8015df8:	08018698 	.word	0x08018698
 8015dfc:	08015d69 	.word	0x08015d69

08015e00 <__sfp>:
 8015e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e02:	4b1b      	ldr	r3, [pc, #108]	; (8015e70 <__sfp+0x70>)
 8015e04:	681e      	ldr	r6, [r3, #0]
 8015e06:	69b3      	ldr	r3, [r6, #24]
 8015e08:	4607      	mov	r7, r0
 8015e0a:	b913      	cbnz	r3, 8015e12 <__sfp+0x12>
 8015e0c:	4630      	mov	r0, r6
 8015e0e:	f7ff ffc7 	bl	8015da0 <__sinit>
 8015e12:	3648      	adds	r6, #72	; 0x48
 8015e14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015e18:	3b01      	subs	r3, #1
 8015e1a:	d503      	bpl.n	8015e24 <__sfp+0x24>
 8015e1c:	6833      	ldr	r3, [r6, #0]
 8015e1e:	b133      	cbz	r3, 8015e2e <__sfp+0x2e>
 8015e20:	6836      	ldr	r6, [r6, #0]
 8015e22:	e7f7      	b.n	8015e14 <__sfp+0x14>
 8015e24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015e28:	b16d      	cbz	r5, 8015e46 <__sfp+0x46>
 8015e2a:	3468      	adds	r4, #104	; 0x68
 8015e2c:	e7f4      	b.n	8015e18 <__sfp+0x18>
 8015e2e:	2104      	movs	r1, #4
 8015e30:	4638      	mov	r0, r7
 8015e32:	f7ff ff9f 	bl	8015d74 <__sfmoreglue>
 8015e36:	6030      	str	r0, [r6, #0]
 8015e38:	2800      	cmp	r0, #0
 8015e3a:	d1f1      	bne.n	8015e20 <__sfp+0x20>
 8015e3c:	230c      	movs	r3, #12
 8015e3e:	603b      	str	r3, [r7, #0]
 8015e40:	4604      	mov	r4, r0
 8015e42:	4620      	mov	r0, r4
 8015e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015e46:	4b0b      	ldr	r3, [pc, #44]	; (8015e74 <__sfp+0x74>)
 8015e48:	6665      	str	r5, [r4, #100]	; 0x64
 8015e4a:	e9c4 5500 	strd	r5, r5, [r4]
 8015e4e:	60a5      	str	r5, [r4, #8]
 8015e50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015e54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015e58:	2208      	movs	r2, #8
 8015e5a:	4629      	mov	r1, r5
 8015e5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015e60:	f7fd f911 	bl	8013086 <memset>
 8015e64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015e68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015e6c:	e7e9      	b.n	8015e42 <__sfp+0x42>
 8015e6e:	bf00      	nop
 8015e70:	08018698 	.word	0x08018698
 8015e74:	ffff0001 	.word	0xffff0001

08015e78 <_fwalk_reent>:
 8015e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e7c:	4680      	mov	r8, r0
 8015e7e:	4689      	mov	r9, r1
 8015e80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015e84:	2600      	movs	r6, #0
 8015e86:	b914      	cbnz	r4, 8015e8e <_fwalk_reent+0x16>
 8015e88:	4630      	mov	r0, r6
 8015e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015e92:	3f01      	subs	r7, #1
 8015e94:	d501      	bpl.n	8015e9a <_fwalk_reent+0x22>
 8015e96:	6824      	ldr	r4, [r4, #0]
 8015e98:	e7f5      	b.n	8015e86 <_fwalk_reent+0xe>
 8015e9a:	89ab      	ldrh	r3, [r5, #12]
 8015e9c:	2b01      	cmp	r3, #1
 8015e9e:	d907      	bls.n	8015eb0 <_fwalk_reent+0x38>
 8015ea0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	d003      	beq.n	8015eb0 <_fwalk_reent+0x38>
 8015ea8:	4629      	mov	r1, r5
 8015eaa:	4640      	mov	r0, r8
 8015eac:	47c8      	blx	r9
 8015eae:	4306      	orrs	r6, r0
 8015eb0:	3568      	adds	r5, #104	; 0x68
 8015eb2:	e7ee      	b.n	8015e92 <_fwalk_reent+0x1a>

08015eb4 <rshift>:
 8015eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015eb6:	6906      	ldr	r6, [r0, #16]
 8015eb8:	114b      	asrs	r3, r1, #5
 8015eba:	429e      	cmp	r6, r3
 8015ebc:	f100 0414 	add.w	r4, r0, #20
 8015ec0:	dd30      	ble.n	8015f24 <rshift+0x70>
 8015ec2:	f011 011f 	ands.w	r1, r1, #31
 8015ec6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015eca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015ece:	d108      	bne.n	8015ee2 <rshift+0x2e>
 8015ed0:	4621      	mov	r1, r4
 8015ed2:	42b2      	cmp	r2, r6
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	d211      	bcs.n	8015efc <rshift+0x48>
 8015ed8:	f852 3b04 	ldr.w	r3, [r2], #4
 8015edc:	f841 3b04 	str.w	r3, [r1], #4
 8015ee0:	e7f7      	b.n	8015ed2 <rshift+0x1e>
 8015ee2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015ee6:	f1c1 0c20 	rsb	ip, r1, #32
 8015eea:	40cd      	lsrs	r5, r1
 8015eec:	3204      	adds	r2, #4
 8015eee:	4623      	mov	r3, r4
 8015ef0:	42b2      	cmp	r2, r6
 8015ef2:	4617      	mov	r7, r2
 8015ef4:	d30c      	bcc.n	8015f10 <rshift+0x5c>
 8015ef6:	601d      	str	r5, [r3, #0]
 8015ef8:	b105      	cbz	r5, 8015efc <rshift+0x48>
 8015efa:	3304      	adds	r3, #4
 8015efc:	1b1a      	subs	r2, r3, r4
 8015efe:	42a3      	cmp	r3, r4
 8015f00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015f04:	bf08      	it	eq
 8015f06:	2300      	moveq	r3, #0
 8015f08:	6102      	str	r2, [r0, #16]
 8015f0a:	bf08      	it	eq
 8015f0c:	6143      	streq	r3, [r0, #20]
 8015f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015f10:	683f      	ldr	r7, [r7, #0]
 8015f12:	fa07 f70c 	lsl.w	r7, r7, ip
 8015f16:	433d      	orrs	r5, r7
 8015f18:	f843 5b04 	str.w	r5, [r3], #4
 8015f1c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015f20:	40cd      	lsrs	r5, r1
 8015f22:	e7e5      	b.n	8015ef0 <rshift+0x3c>
 8015f24:	4623      	mov	r3, r4
 8015f26:	e7e9      	b.n	8015efc <rshift+0x48>

08015f28 <__hexdig_fun>:
 8015f28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015f2c:	2b09      	cmp	r3, #9
 8015f2e:	d802      	bhi.n	8015f36 <__hexdig_fun+0xe>
 8015f30:	3820      	subs	r0, #32
 8015f32:	b2c0      	uxtb	r0, r0
 8015f34:	4770      	bx	lr
 8015f36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015f3a:	2b05      	cmp	r3, #5
 8015f3c:	d801      	bhi.n	8015f42 <__hexdig_fun+0x1a>
 8015f3e:	3847      	subs	r0, #71	; 0x47
 8015f40:	e7f7      	b.n	8015f32 <__hexdig_fun+0xa>
 8015f42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015f46:	2b05      	cmp	r3, #5
 8015f48:	d801      	bhi.n	8015f4e <__hexdig_fun+0x26>
 8015f4a:	3827      	subs	r0, #39	; 0x27
 8015f4c:	e7f1      	b.n	8015f32 <__hexdig_fun+0xa>
 8015f4e:	2000      	movs	r0, #0
 8015f50:	4770      	bx	lr

08015f52 <__gethex>:
 8015f52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f56:	b08b      	sub	sp, #44	; 0x2c
 8015f58:	468a      	mov	sl, r1
 8015f5a:	9002      	str	r0, [sp, #8]
 8015f5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015f5e:	9306      	str	r3, [sp, #24]
 8015f60:	4690      	mov	r8, r2
 8015f62:	f000 fadf 	bl	8016524 <__localeconv_l>
 8015f66:	6803      	ldr	r3, [r0, #0]
 8015f68:	9303      	str	r3, [sp, #12]
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7ea f948 	bl	8000200 <strlen>
 8015f70:	9b03      	ldr	r3, [sp, #12]
 8015f72:	9001      	str	r0, [sp, #4]
 8015f74:	4403      	add	r3, r0
 8015f76:	f04f 0b00 	mov.w	fp, #0
 8015f7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015f7e:	9307      	str	r3, [sp, #28]
 8015f80:	f8da 3000 	ldr.w	r3, [sl]
 8015f84:	3302      	adds	r3, #2
 8015f86:	461f      	mov	r7, r3
 8015f88:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015f8c:	2830      	cmp	r0, #48	; 0x30
 8015f8e:	d06c      	beq.n	801606a <__gethex+0x118>
 8015f90:	f7ff ffca 	bl	8015f28 <__hexdig_fun>
 8015f94:	4604      	mov	r4, r0
 8015f96:	2800      	cmp	r0, #0
 8015f98:	d16a      	bne.n	8016070 <__gethex+0x11e>
 8015f9a:	9a01      	ldr	r2, [sp, #4]
 8015f9c:	9903      	ldr	r1, [sp, #12]
 8015f9e:	4638      	mov	r0, r7
 8015fa0:	f001 fe34 	bl	8017c0c <strncmp>
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d166      	bne.n	8016076 <__gethex+0x124>
 8015fa8:	9b01      	ldr	r3, [sp, #4]
 8015faa:	5cf8      	ldrb	r0, [r7, r3]
 8015fac:	18fe      	adds	r6, r7, r3
 8015fae:	f7ff ffbb 	bl	8015f28 <__hexdig_fun>
 8015fb2:	2800      	cmp	r0, #0
 8015fb4:	d062      	beq.n	801607c <__gethex+0x12a>
 8015fb6:	4633      	mov	r3, r6
 8015fb8:	7818      	ldrb	r0, [r3, #0]
 8015fba:	2830      	cmp	r0, #48	; 0x30
 8015fbc:	461f      	mov	r7, r3
 8015fbe:	f103 0301 	add.w	r3, r3, #1
 8015fc2:	d0f9      	beq.n	8015fb8 <__gethex+0x66>
 8015fc4:	f7ff ffb0 	bl	8015f28 <__hexdig_fun>
 8015fc8:	fab0 f580 	clz	r5, r0
 8015fcc:	096d      	lsrs	r5, r5, #5
 8015fce:	4634      	mov	r4, r6
 8015fd0:	f04f 0b01 	mov.w	fp, #1
 8015fd4:	463a      	mov	r2, r7
 8015fd6:	4616      	mov	r6, r2
 8015fd8:	3201      	adds	r2, #1
 8015fda:	7830      	ldrb	r0, [r6, #0]
 8015fdc:	f7ff ffa4 	bl	8015f28 <__hexdig_fun>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	d1f8      	bne.n	8015fd6 <__gethex+0x84>
 8015fe4:	9a01      	ldr	r2, [sp, #4]
 8015fe6:	9903      	ldr	r1, [sp, #12]
 8015fe8:	4630      	mov	r0, r6
 8015fea:	f001 fe0f 	bl	8017c0c <strncmp>
 8015fee:	b950      	cbnz	r0, 8016006 <__gethex+0xb4>
 8015ff0:	b954      	cbnz	r4, 8016008 <__gethex+0xb6>
 8015ff2:	9b01      	ldr	r3, [sp, #4]
 8015ff4:	18f4      	adds	r4, r6, r3
 8015ff6:	4622      	mov	r2, r4
 8015ff8:	4616      	mov	r6, r2
 8015ffa:	3201      	adds	r2, #1
 8015ffc:	7830      	ldrb	r0, [r6, #0]
 8015ffe:	f7ff ff93 	bl	8015f28 <__hexdig_fun>
 8016002:	2800      	cmp	r0, #0
 8016004:	d1f8      	bne.n	8015ff8 <__gethex+0xa6>
 8016006:	b10c      	cbz	r4, 801600c <__gethex+0xba>
 8016008:	1ba4      	subs	r4, r4, r6
 801600a:	00a4      	lsls	r4, r4, #2
 801600c:	7833      	ldrb	r3, [r6, #0]
 801600e:	2b50      	cmp	r3, #80	; 0x50
 8016010:	d001      	beq.n	8016016 <__gethex+0xc4>
 8016012:	2b70      	cmp	r3, #112	; 0x70
 8016014:	d140      	bne.n	8016098 <__gethex+0x146>
 8016016:	7873      	ldrb	r3, [r6, #1]
 8016018:	2b2b      	cmp	r3, #43	; 0x2b
 801601a:	d031      	beq.n	8016080 <__gethex+0x12e>
 801601c:	2b2d      	cmp	r3, #45	; 0x2d
 801601e:	d033      	beq.n	8016088 <__gethex+0x136>
 8016020:	1c71      	adds	r1, r6, #1
 8016022:	f04f 0900 	mov.w	r9, #0
 8016026:	7808      	ldrb	r0, [r1, #0]
 8016028:	f7ff ff7e 	bl	8015f28 <__hexdig_fun>
 801602c:	1e43      	subs	r3, r0, #1
 801602e:	b2db      	uxtb	r3, r3
 8016030:	2b18      	cmp	r3, #24
 8016032:	d831      	bhi.n	8016098 <__gethex+0x146>
 8016034:	f1a0 0210 	sub.w	r2, r0, #16
 8016038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801603c:	f7ff ff74 	bl	8015f28 <__hexdig_fun>
 8016040:	1e43      	subs	r3, r0, #1
 8016042:	b2db      	uxtb	r3, r3
 8016044:	2b18      	cmp	r3, #24
 8016046:	d922      	bls.n	801608e <__gethex+0x13c>
 8016048:	f1b9 0f00 	cmp.w	r9, #0
 801604c:	d000      	beq.n	8016050 <__gethex+0xfe>
 801604e:	4252      	negs	r2, r2
 8016050:	4414      	add	r4, r2
 8016052:	f8ca 1000 	str.w	r1, [sl]
 8016056:	b30d      	cbz	r5, 801609c <__gethex+0x14a>
 8016058:	f1bb 0f00 	cmp.w	fp, #0
 801605c:	bf0c      	ite	eq
 801605e:	2706      	moveq	r7, #6
 8016060:	2700      	movne	r7, #0
 8016062:	4638      	mov	r0, r7
 8016064:	b00b      	add	sp, #44	; 0x2c
 8016066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801606a:	f10b 0b01 	add.w	fp, fp, #1
 801606e:	e78a      	b.n	8015f86 <__gethex+0x34>
 8016070:	2500      	movs	r5, #0
 8016072:	462c      	mov	r4, r5
 8016074:	e7ae      	b.n	8015fd4 <__gethex+0x82>
 8016076:	463e      	mov	r6, r7
 8016078:	2501      	movs	r5, #1
 801607a:	e7c7      	b.n	801600c <__gethex+0xba>
 801607c:	4604      	mov	r4, r0
 801607e:	e7fb      	b.n	8016078 <__gethex+0x126>
 8016080:	f04f 0900 	mov.w	r9, #0
 8016084:	1cb1      	adds	r1, r6, #2
 8016086:	e7ce      	b.n	8016026 <__gethex+0xd4>
 8016088:	f04f 0901 	mov.w	r9, #1
 801608c:	e7fa      	b.n	8016084 <__gethex+0x132>
 801608e:	230a      	movs	r3, #10
 8016090:	fb03 0202 	mla	r2, r3, r2, r0
 8016094:	3a10      	subs	r2, #16
 8016096:	e7cf      	b.n	8016038 <__gethex+0xe6>
 8016098:	4631      	mov	r1, r6
 801609a:	e7da      	b.n	8016052 <__gethex+0x100>
 801609c:	1bf3      	subs	r3, r6, r7
 801609e:	3b01      	subs	r3, #1
 80160a0:	4629      	mov	r1, r5
 80160a2:	2b07      	cmp	r3, #7
 80160a4:	dc49      	bgt.n	801613a <__gethex+0x1e8>
 80160a6:	9802      	ldr	r0, [sp, #8]
 80160a8:	f000 fadc 	bl	8016664 <_Balloc>
 80160ac:	9b01      	ldr	r3, [sp, #4]
 80160ae:	f100 0914 	add.w	r9, r0, #20
 80160b2:	f04f 0b00 	mov.w	fp, #0
 80160b6:	f1c3 0301 	rsb	r3, r3, #1
 80160ba:	4605      	mov	r5, r0
 80160bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80160c0:	46da      	mov	sl, fp
 80160c2:	9308      	str	r3, [sp, #32]
 80160c4:	42b7      	cmp	r7, r6
 80160c6:	d33b      	bcc.n	8016140 <__gethex+0x1ee>
 80160c8:	9804      	ldr	r0, [sp, #16]
 80160ca:	f840 ab04 	str.w	sl, [r0], #4
 80160ce:	eba0 0009 	sub.w	r0, r0, r9
 80160d2:	1080      	asrs	r0, r0, #2
 80160d4:	6128      	str	r0, [r5, #16]
 80160d6:	0147      	lsls	r7, r0, #5
 80160d8:	4650      	mov	r0, sl
 80160da:	f000 fb87 	bl	80167ec <__hi0bits>
 80160de:	f8d8 6000 	ldr.w	r6, [r8]
 80160e2:	1a3f      	subs	r7, r7, r0
 80160e4:	42b7      	cmp	r7, r6
 80160e6:	dd64      	ble.n	80161b2 <__gethex+0x260>
 80160e8:	1bbf      	subs	r7, r7, r6
 80160ea:	4639      	mov	r1, r7
 80160ec:	4628      	mov	r0, r5
 80160ee:	f000 fe97 	bl	8016e20 <__any_on>
 80160f2:	4682      	mov	sl, r0
 80160f4:	b178      	cbz	r0, 8016116 <__gethex+0x1c4>
 80160f6:	1e7b      	subs	r3, r7, #1
 80160f8:	1159      	asrs	r1, r3, #5
 80160fa:	f003 021f 	and.w	r2, r3, #31
 80160fe:	f04f 0a01 	mov.w	sl, #1
 8016102:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016106:	fa0a f202 	lsl.w	r2, sl, r2
 801610a:	420a      	tst	r2, r1
 801610c:	d003      	beq.n	8016116 <__gethex+0x1c4>
 801610e:	4553      	cmp	r3, sl
 8016110:	dc46      	bgt.n	80161a0 <__gethex+0x24e>
 8016112:	f04f 0a02 	mov.w	sl, #2
 8016116:	4639      	mov	r1, r7
 8016118:	4628      	mov	r0, r5
 801611a:	f7ff fecb 	bl	8015eb4 <rshift>
 801611e:	443c      	add	r4, r7
 8016120:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016124:	42a3      	cmp	r3, r4
 8016126:	da52      	bge.n	80161ce <__gethex+0x27c>
 8016128:	4629      	mov	r1, r5
 801612a:	9802      	ldr	r0, [sp, #8]
 801612c:	f000 face 	bl	80166cc <_Bfree>
 8016130:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016132:	2300      	movs	r3, #0
 8016134:	6013      	str	r3, [r2, #0]
 8016136:	27a3      	movs	r7, #163	; 0xa3
 8016138:	e793      	b.n	8016062 <__gethex+0x110>
 801613a:	3101      	adds	r1, #1
 801613c:	105b      	asrs	r3, r3, #1
 801613e:	e7b0      	b.n	80160a2 <__gethex+0x150>
 8016140:	1e73      	subs	r3, r6, #1
 8016142:	9305      	str	r3, [sp, #20]
 8016144:	9a07      	ldr	r2, [sp, #28]
 8016146:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801614a:	4293      	cmp	r3, r2
 801614c:	d018      	beq.n	8016180 <__gethex+0x22e>
 801614e:	f1bb 0f20 	cmp.w	fp, #32
 8016152:	d107      	bne.n	8016164 <__gethex+0x212>
 8016154:	9b04      	ldr	r3, [sp, #16]
 8016156:	f8c3 a000 	str.w	sl, [r3]
 801615a:	3304      	adds	r3, #4
 801615c:	f04f 0a00 	mov.w	sl, #0
 8016160:	9304      	str	r3, [sp, #16]
 8016162:	46d3      	mov	fp, sl
 8016164:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016168:	f7ff fede 	bl	8015f28 <__hexdig_fun>
 801616c:	f000 000f 	and.w	r0, r0, #15
 8016170:	fa00 f00b 	lsl.w	r0, r0, fp
 8016174:	ea4a 0a00 	orr.w	sl, sl, r0
 8016178:	f10b 0b04 	add.w	fp, fp, #4
 801617c:	9b05      	ldr	r3, [sp, #20]
 801617e:	e00d      	b.n	801619c <__gethex+0x24a>
 8016180:	9b05      	ldr	r3, [sp, #20]
 8016182:	9a08      	ldr	r2, [sp, #32]
 8016184:	4413      	add	r3, r2
 8016186:	42bb      	cmp	r3, r7
 8016188:	d3e1      	bcc.n	801614e <__gethex+0x1fc>
 801618a:	4618      	mov	r0, r3
 801618c:	9a01      	ldr	r2, [sp, #4]
 801618e:	9903      	ldr	r1, [sp, #12]
 8016190:	9309      	str	r3, [sp, #36]	; 0x24
 8016192:	f001 fd3b 	bl	8017c0c <strncmp>
 8016196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016198:	2800      	cmp	r0, #0
 801619a:	d1d8      	bne.n	801614e <__gethex+0x1fc>
 801619c:	461e      	mov	r6, r3
 801619e:	e791      	b.n	80160c4 <__gethex+0x172>
 80161a0:	1eb9      	subs	r1, r7, #2
 80161a2:	4628      	mov	r0, r5
 80161a4:	f000 fe3c 	bl	8016e20 <__any_on>
 80161a8:	2800      	cmp	r0, #0
 80161aa:	d0b2      	beq.n	8016112 <__gethex+0x1c0>
 80161ac:	f04f 0a03 	mov.w	sl, #3
 80161b0:	e7b1      	b.n	8016116 <__gethex+0x1c4>
 80161b2:	da09      	bge.n	80161c8 <__gethex+0x276>
 80161b4:	1bf7      	subs	r7, r6, r7
 80161b6:	4629      	mov	r1, r5
 80161b8:	463a      	mov	r2, r7
 80161ba:	9802      	ldr	r0, [sp, #8]
 80161bc:	f000 fc52 	bl	8016a64 <__lshift>
 80161c0:	1be4      	subs	r4, r4, r7
 80161c2:	4605      	mov	r5, r0
 80161c4:	f100 0914 	add.w	r9, r0, #20
 80161c8:	f04f 0a00 	mov.w	sl, #0
 80161cc:	e7a8      	b.n	8016120 <__gethex+0x1ce>
 80161ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80161d2:	42a0      	cmp	r0, r4
 80161d4:	dd6a      	ble.n	80162ac <__gethex+0x35a>
 80161d6:	1b04      	subs	r4, r0, r4
 80161d8:	42a6      	cmp	r6, r4
 80161da:	dc2e      	bgt.n	801623a <__gethex+0x2e8>
 80161dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80161e0:	2b02      	cmp	r3, #2
 80161e2:	d022      	beq.n	801622a <__gethex+0x2d8>
 80161e4:	2b03      	cmp	r3, #3
 80161e6:	d024      	beq.n	8016232 <__gethex+0x2e0>
 80161e8:	2b01      	cmp	r3, #1
 80161ea:	d115      	bne.n	8016218 <__gethex+0x2c6>
 80161ec:	42a6      	cmp	r6, r4
 80161ee:	d113      	bne.n	8016218 <__gethex+0x2c6>
 80161f0:	2e01      	cmp	r6, #1
 80161f2:	dc0b      	bgt.n	801620c <__gethex+0x2ba>
 80161f4:	9a06      	ldr	r2, [sp, #24]
 80161f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80161fa:	6013      	str	r3, [r2, #0]
 80161fc:	2301      	movs	r3, #1
 80161fe:	612b      	str	r3, [r5, #16]
 8016200:	f8c9 3000 	str.w	r3, [r9]
 8016204:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016206:	2762      	movs	r7, #98	; 0x62
 8016208:	601d      	str	r5, [r3, #0]
 801620a:	e72a      	b.n	8016062 <__gethex+0x110>
 801620c:	1e71      	subs	r1, r6, #1
 801620e:	4628      	mov	r0, r5
 8016210:	f000 fe06 	bl	8016e20 <__any_on>
 8016214:	2800      	cmp	r0, #0
 8016216:	d1ed      	bne.n	80161f4 <__gethex+0x2a2>
 8016218:	4629      	mov	r1, r5
 801621a:	9802      	ldr	r0, [sp, #8]
 801621c:	f000 fa56 	bl	80166cc <_Bfree>
 8016220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016222:	2300      	movs	r3, #0
 8016224:	6013      	str	r3, [r2, #0]
 8016226:	2750      	movs	r7, #80	; 0x50
 8016228:	e71b      	b.n	8016062 <__gethex+0x110>
 801622a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801622c:	2b00      	cmp	r3, #0
 801622e:	d0e1      	beq.n	80161f4 <__gethex+0x2a2>
 8016230:	e7f2      	b.n	8016218 <__gethex+0x2c6>
 8016232:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016234:	2b00      	cmp	r3, #0
 8016236:	d1dd      	bne.n	80161f4 <__gethex+0x2a2>
 8016238:	e7ee      	b.n	8016218 <__gethex+0x2c6>
 801623a:	1e67      	subs	r7, r4, #1
 801623c:	f1ba 0f00 	cmp.w	sl, #0
 8016240:	d131      	bne.n	80162a6 <__gethex+0x354>
 8016242:	b127      	cbz	r7, 801624e <__gethex+0x2fc>
 8016244:	4639      	mov	r1, r7
 8016246:	4628      	mov	r0, r5
 8016248:	f000 fdea 	bl	8016e20 <__any_on>
 801624c:	4682      	mov	sl, r0
 801624e:	117a      	asrs	r2, r7, #5
 8016250:	2301      	movs	r3, #1
 8016252:	f007 071f 	and.w	r7, r7, #31
 8016256:	fa03 f707 	lsl.w	r7, r3, r7
 801625a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801625e:	4621      	mov	r1, r4
 8016260:	421f      	tst	r7, r3
 8016262:	4628      	mov	r0, r5
 8016264:	bf18      	it	ne
 8016266:	f04a 0a02 	orrne.w	sl, sl, #2
 801626a:	1b36      	subs	r6, r6, r4
 801626c:	f7ff fe22 	bl	8015eb4 <rshift>
 8016270:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016274:	2702      	movs	r7, #2
 8016276:	f1ba 0f00 	cmp.w	sl, #0
 801627a:	d048      	beq.n	801630e <__gethex+0x3bc>
 801627c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016280:	2b02      	cmp	r3, #2
 8016282:	d015      	beq.n	80162b0 <__gethex+0x35e>
 8016284:	2b03      	cmp	r3, #3
 8016286:	d017      	beq.n	80162b8 <__gethex+0x366>
 8016288:	2b01      	cmp	r3, #1
 801628a:	d109      	bne.n	80162a0 <__gethex+0x34e>
 801628c:	f01a 0f02 	tst.w	sl, #2
 8016290:	d006      	beq.n	80162a0 <__gethex+0x34e>
 8016292:	f8d9 3000 	ldr.w	r3, [r9]
 8016296:	ea4a 0a03 	orr.w	sl, sl, r3
 801629a:	f01a 0f01 	tst.w	sl, #1
 801629e:	d10e      	bne.n	80162be <__gethex+0x36c>
 80162a0:	f047 0710 	orr.w	r7, r7, #16
 80162a4:	e033      	b.n	801630e <__gethex+0x3bc>
 80162a6:	f04f 0a01 	mov.w	sl, #1
 80162aa:	e7d0      	b.n	801624e <__gethex+0x2fc>
 80162ac:	2701      	movs	r7, #1
 80162ae:	e7e2      	b.n	8016276 <__gethex+0x324>
 80162b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162b2:	f1c3 0301 	rsb	r3, r3, #1
 80162b6:	9315      	str	r3, [sp, #84]	; 0x54
 80162b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d0f0      	beq.n	80162a0 <__gethex+0x34e>
 80162be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80162c2:	f105 0314 	add.w	r3, r5, #20
 80162c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80162ca:	eb03 010a 	add.w	r1, r3, sl
 80162ce:	f04f 0c00 	mov.w	ip, #0
 80162d2:	4618      	mov	r0, r3
 80162d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80162d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80162dc:	d01c      	beq.n	8016318 <__gethex+0x3c6>
 80162de:	3201      	adds	r2, #1
 80162e0:	6002      	str	r2, [r0, #0]
 80162e2:	2f02      	cmp	r7, #2
 80162e4:	f105 0314 	add.w	r3, r5, #20
 80162e8:	d138      	bne.n	801635c <__gethex+0x40a>
 80162ea:	f8d8 2000 	ldr.w	r2, [r8]
 80162ee:	3a01      	subs	r2, #1
 80162f0:	42b2      	cmp	r2, r6
 80162f2:	d10a      	bne.n	801630a <__gethex+0x3b8>
 80162f4:	1171      	asrs	r1, r6, #5
 80162f6:	2201      	movs	r2, #1
 80162f8:	f006 061f 	and.w	r6, r6, #31
 80162fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016300:	fa02 f606 	lsl.w	r6, r2, r6
 8016304:	421e      	tst	r6, r3
 8016306:	bf18      	it	ne
 8016308:	4617      	movne	r7, r2
 801630a:	f047 0720 	orr.w	r7, r7, #32
 801630e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016310:	601d      	str	r5, [r3, #0]
 8016312:	9b06      	ldr	r3, [sp, #24]
 8016314:	601c      	str	r4, [r3, #0]
 8016316:	e6a4      	b.n	8016062 <__gethex+0x110>
 8016318:	4299      	cmp	r1, r3
 801631a:	f843 cc04 	str.w	ip, [r3, #-4]
 801631e:	d8d8      	bhi.n	80162d2 <__gethex+0x380>
 8016320:	68ab      	ldr	r3, [r5, #8]
 8016322:	4599      	cmp	r9, r3
 8016324:	db12      	blt.n	801634c <__gethex+0x3fa>
 8016326:	6869      	ldr	r1, [r5, #4]
 8016328:	9802      	ldr	r0, [sp, #8]
 801632a:	3101      	adds	r1, #1
 801632c:	f000 f99a 	bl	8016664 <_Balloc>
 8016330:	692a      	ldr	r2, [r5, #16]
 8016332:	3202      	adds	r2, #2
 8016334:	f105 010c 	add.w	r1, r5, #12
 8016338:	4683      	mov	fp, r0
 801633a:	0092      	lsls	r2, r2, #2
 801633c:	300c      	adds	r0, #12
 801633e:	f7fc fe97 	bl	8013070 <memcpy>
 8016342:	4629      	mov	r1, r5
 8016344:	9802      	ldr	r0, [sp, #8]
 8016346:	f000 f9c1 	bl	80166cc <_Bfree>
 801634a:	465d      	mov	r5, fp
 801634c:	692b      	ldr	r3, [r5, #16]
 801634e:	1c5a      	adds	r2, r3, #1
 8016350:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016354:	612a      	str	r2, [r5, #16]
 8016356:	2201      	movs	r2, #1
 8016358:	615a      	str	r2, [r3, #20]
 801635a:	e7c2      	b.n	80162e2 <__gethex+0x390>
 801635c:	692a      	ldr	r2, [r5, #16]
 801635e:	454a      	cmp	r2, r9
 8016360:	dd0b      	ble.n	801637a <__gethex+0x428>
 8016362:	2101      	movs	r1, #1
 8016364:	4628      	mov	r0, r5
 8016366:	f7ff fda5 	bl	8015eb4 <rshift>
 801636a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801636e:	3401      	adds	r4, #1
 8016370:	42a3      	cmp	r3, r4
 8016372:	f6ff aed9 	blt.w	8016128 <__gethex+0x1d6>
 8016376:	2701      	movs	r7, #1
 8016378:	e7c7      	b.n	801630a <__gethex+0x3b8>
 801637a:	f016 061f 	ands.w	r6, r6, #31
 801637e:	d0fa      	beq.n	8016376 <__gethex+0x424>
 8016380:	449a      	add	sl, r3
 8016382:	f1c6 0620 	rsb	r6, r6, #32
 8016386:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801638a:	f000 fa2f 	bl	80167ec <__hi0bits>
 801638e:	42b0      	cmp	r0, r6
 8016390:	dbe7      	blt.n	8016362 <__gethex+0x410>
 8016392:	e7f0      	b.n	8016376 <__gethex+0x424>

08016394 <L_shift>:
 8016394:	f1c2 0208 	rsb	r2, r2, #8
 8016398:	0092      	lsls	r2, r2, #2
 801639a:	b570      	push	{r4, r5, r6, lr}
 801639c:	f1c2 0620 	rsb	r6, r2, #32
 80163a0:	6843      	ldr	r3, [r0, #4]
 80163a2:	6804      	ldr	r4, [r0, #0]
 80163a4:	fa03 f506 	lsl.w	r5, r3, r6
 80163a8:	432c      	orrs	r4, r5
 80163aa:	40d3      	lsrs	r3, r2
 80163ac:	6004      	str	r4, [r0, #0]
 80163ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80163b2:	4288      	cmp	r0, r1
 80163b4:	d3f4      	bcc.n	80163a0 <L_shift+0xc>
 80163b6:	bd70      	pop	{r4, r5, r6, pc}

080163b8 <__match>:
 80163b8:	b530      	push	{r4, r5, lr}
 80163ba:	6803      	ldr	r3, [r0, #0]
 80163bc:	3301      	adds	r3, #1
 80163be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80163c2:	b914      	cbnz	r4, 80163ca <__match+0x12>
 80163c4:	6003      	str	r3, [r0, #0]
 80163c6:	2001      	movs	r0, #1
 80163c8:	bd30      	pop	{r4, r5, pc}
 80163ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80163d2:	2d19      	cmp	r5, #25
 80163d4:	bf98      	it	ls
 80163d6:	3220      	addls	r2, #32
 80163d8:	42a2      	cmp	r2, r4
 80163da:	d0f0      	beq.n	80163be <__match+0x6>
 80163dc:	2000      	movs	r0, #0
 80163de:	e7f3      	b.n	80163c8 <__match+0x10>

080163e0 <__hexnan>:
 80163e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163e4:	680b      	ldr	r3, [r1, #0]
 80163e6:	6801      	ldr	r1, [r0, #0]
 80163e8:	115f      	asrs	r7, r3, #5
 80163ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80163ee:	f013 031f 	ands.w	r3, r3, #31
 80163f2:	b087      	sub	sp, #28
 80163f4:	bf18      	it	ne
 80163f6:	3704      	addne	r7, #4
 80163f8:	2500      	movs	r5, #0
 80163fa:	1f3e      	subs	r6, r7, #4
 80163fc:	4682      	mov	sl, r0
 80163fe:	4690      	mov	r8, r2
 8016400:	9301      	str	r3, [sp, #4]
 8016402:	f847 5c04 	str.w	r5, [r7, #-4]
 8016406:	46b1      	mov	r9, r6
 8016408:	4634      	mov	r4, r6
 801640a:	9502      	str	r5, [sp, #8]
 801640c:	46ab      	mov	fp, r5
 801640e:	784a      	ldrb	r2, [r1, #1]
 8016410:	1c4b      	adds	r3, r1, #1
 8016412:	9303      	str	r3, [sp, #12]
 8016414:	b342      	cbz	r2, 8016468 <__hexnan+0x88>
 8016416:	4610      	mov	r0, r2
 8016418:	9105      	str	r1, [sp, #20]
 801641a:	9204      	str	r2, [sp, #16]
 801641c:	f7ff fd84 	bl	8015f28 <__hexdig_fun>
 8016420:	2800      	cmp	r0, #0
 8016422:	d143      	bne.n	80164ac <__hexnan+0xcc>
 8016424:	9a04      	ldr	r2, [sp, #16]
 8016426:	9905      	ldr	r1, [sp, #20]
 8016428:	2a20      	cmp	r2, #32
 801642a:	d818      	bhi.n	801645e <__hexnan+0x7e>
 801642c:	9b02      	ldr	r3, [sp, #8]
 801642e:	459b      	cmp	fp, r3
 8016430:	dd13      	ble.n	801645a <__hexnan+0x7a>
 8016432:	454c      	cmp	r4, r9
 8016434:	d206      	bcs.n	8016444 <__hexnan+0x64>
 8016436:	2d07      	cmp	r5, #7
 8016438:	dc04      	bgt.n	8016444 <__hexnan+0x64>
 801643a:	462a      	mov	r2, r5
 801643c:	4649      	mov	r1, r9
 801643e:	4620      	mov	r0, r4
 8016440:	f7ff ffa8 	bl	8016394 <L_shift>
 8016444:	4544      	cmp	r4, r8
 8016446:	d944      	bls.n	80164d2 <__hexnan+0xf2>
 8016448:	2300      	movs	r3, #0
 801644a:	f1a4 0904 	sub.w	r9, r4, #4
 801644e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016452:	f8cd b008 	str.w	fp, [sp, #8]
 8016456:	464c      	mov	r4, r9
 8016458:	461d      	mov	r5, r3
 801645a:	9903      	ldr	r1, [sp, #12]
 801645c:	e7d7      	b.n	801640e <__hexnan+0x2e>
 801645e:	2a29      	cmp	r2, #41	; 0x29
 8016460:	d14a      	bne.n	80164f8 <__hexnan+0x118>
 8016462:	3102      	adds	r1, #2
 8016464:	f8ca 1000 	str.w	r1, [sl]
 8016468:	f1bb 0f00 	cmp.w	fp, #0
 801646c:	d044      	beq.n	80164f8 <__hexnan+0x118>
 801646e:	454c      	cmp	r4, r9
 8016470:	d206      	bcs.n	8016480 <__hexnan+0xa0>
 8016472:	2d07      	cmp	r5, #7
 8016474:	dc04      	bgt.n	8016480 <__hexnan+0xa0>
 8016476:	462a      	mov	r2, r5
 8016478:	4649      	mov	r1, r9
 801647a:	4620      	mov	r0, r4
 801647c:	f7ff ff8a 	bl	8016394 <L_shift>
 8016480:	4544      	cmp	r4, r8
 8016482:	d928      	bls.n	80164d6 <__hexnan+0xf6>
 8016484:	4643      	mov	r3, r8
 8016486:	f854 2b04 	ldr.w	r2, [r4], #4
 801648a:	f843 2b04 	str.w	r2, [r3], #4
 801648e:	42a6      	cmp	r6, r4
 8016490:	d2f9      	bcs.n	8016486 <__hexnan+0xa6>
 8016492:	2200      	movs	r2, #0
 8016494:	f843 2b04 	str.w	r2, [r3], #4
 8016498:	429e      	cmp	r6, r3
 801649a:	d2fb      	bcs.n	8016494 <__hexnan+0xb4>
 801649c:	6833      	ldr	r3, [r6, #0]
 801649e:	b91b      	cbnz	r3, 80164a8 <__hexnan+0xc8>
 80164a0:	4546      	cmp	r6, r8
 80164a2:	d127      	bne.n	80164f4 <__hexnan+0x114>
 80164a4:	2301      	movs	r3, #1
 80164a6:	6033      	str	r3, [r6, #0]
 80164a8:	2005      	movs	r0, #5
 80164aa:	e026      	b.n	80164fa <__hexnan+0x11a>
 80164ac:	3501      	adds	r5, #1
 80164ae:	2d08      	cmp	r5, #8
 80164b0:	f10b 0b01 	add.w	fp, fp, #1
 80164b4:	dd06      	ble.n	80164c4 <__hexnan+0xe4>
 80164b6:	4544      	cmp	r4, r8
 80164b8:	d9cf      	bls.n	801645a <__hexnan+0x7a>
 80164ba:	2300      	movs	r3, #0
 80164bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80164c0:	2501      	movs	r5, #1
 80164c2:	3c04      	subs	r4, #4
 80164c4:	6822      	ldr	r2, [r4, #0]
 80164c6:	f000 000f 	and.w	r0, r0, #15
 80164ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80164ce:	6020      	str	r0, [r4, #0]
 80164d0:	e7c3      	b.n	801645a <__hexnan+0x7a>
 80164d2:	2508      	movs	r5, #8
 80164d4:	e7c1      	b.n	801645a <__hexnan+0x7a>
 80164d6:	9b01      	ldr	r3, [sp, #4]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d0df      	beq.n	801649c <__hexnan+0xbc>
 80164dc:	f04f 32ff 	mov.w	r2, #4294967295
 80164e0:	f1c3 0320 	rsb	r3, r3, #32
 80164e4:	fa22 f303 	lsr.w	r3, r2, r3
 80164e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80164ec:	401a      	ands	r2, r3
 80164ee:	f847 2c04 	str.w	r2, [r7, #-4]
 80164f2:	e7d3      	b.n	801649c <__hexnan+0xbc>
 80164f4:	3e04      	subs	r6, #4
 80164f6:	e7d1      	b.n	801649c <__hexnan+0xbc>
 80164f8:	2004      	movs	r0, #4
 80164fa:	b007      	add	sp, #28
 80164fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016500 <__locale_ctype_ptr_l>:
 8016500:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016504:	4770      	bx	lr
	...

08016508 <__locale_ctype_ptr>:
 8016508:	4b04      	ldr	r3, [pc, #16]	; (801651c <__locale_ctype_ptr+0x14>)
 801650a:	4a05      	ldr	r2, [pc, #20]	; (8016520 <__locale_ctype_ptr+0x18>)
 801650c:	681b      	ldr	r3, [r3, #0]
 801650e:	6a1b      	ldr	r3, [r3, #32]
 8016510:	2b00      	cmp	r3, #0
 8016512:	bf08      	it	eq
 8016514:	4613      	moveq	r3, r2
 8016516:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801651a:	4770      	bx	lr
 801651c:	2000000c 	.word	0x2000000c
 8016520:	20000070 	.word	0x20000070

08016524 <__localeconv_l>:
 8016524:	30f0      	adds	r0, #240	; 0xf0
 8016526:	4770      	bx	lr

08016528 <_localeconv_r>:
 8016528:	4b04      	ldr	r3, [pc, #16]	; (801653c <_localeconv_r+0x14>)
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	6a18      	ldr	r0, [r3, #32]
 801652e:	4b04      	ldr	r3, [pc, #16]	; (8016540 <_localeconv_r+0x18>)
 8016530:	2800      	cmp	r0, #0
 8016532:	bf08      	it	eq
 8016534:	4618      	moveq	r0, r3
 8016536:	30f0      	adds	r0, #240	; 0xf0
 8016538:	4770      	bx	lr
 801653a:	bf00      	nop
 801653c:	2000000c 	.word	0x2000000c
 8016540:	20000070 	.word	0x20000070

08016544 <_lseek_r>:
 8016544:	b538      	push	{r3, r4, r5, lr}
 8016546:	4c07      	ldr	r4, [pc, #28]	; (8016564 <_lseek_r+0x20>)
 8016548:	4605      	mov	r5, r0
 801654a:	4608      	mov	r0, r1
 801654c:	4611      	mov	r1, r2
 801654e:	2200      	movs	r2, #0
 8016550:	6022      	str	r2, [r4, #0]
 8016552:	461a      	mov	r2, r3
 8016554:	f7ef fc22 	bl	8005d9c <_lseek>
 8016558:	1c43      	adds	r3, r0, #1
 801655a:	d102      	bne.n	8016562 <_lseek_r+0x1e>
 801655c:	6823      	ldr	r3, [r4, #0]
 801655e:	b103      	cbz	r3, 8016562 <_lseek_r+0x1e>
 8016560:	602b      	str	r3, [r5, #0]
 8016562:	bd38      	pop	{r3, r4, r5, pc}
 8016564:	20037fa4 	.word	0x20037fa4

08016568 <__swhatbuf_r>:
 8016568:	b570      	push	{r4, r5, r6, lr}
 801656a:	460e      	mov	r6, r1
 801656c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016570:	2900      	cmp	r1, #0
 8016572:	b096      	sub	sp, #88	; 0x58
 8016574:	4614      	mov	r4, r2
 8016576:	461d      	mov	r5, r3
 8016578:	da07      	bge.n	801658a <__swhatbuf_r+0x22>
 801657a:	2300      	movs	r3, #0
 801657c:	602b      	str	r3, [r5, #0]
 801657e:	89b3      	ldrh	r3, [r6, #12]
 8016580:	061a      	lsls	r2, r3, #24
 8016582:	d410      	bmi.n	80165a6 <__swhatbuf_r+0x3e>
 8016584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016588:	e00e      	b.n	80165a8 <__swhatbuf_r+0x40>
 801658a:	466a      	mov	r2, sp
 801658c:	f001 fc24 	bl	8017dd8 <_fstat_r>
 8016590:	2800      	cmp	r0, #0
 8016592:	dbf2      	blt.n	801657a <__swhatbuf_r+0x12>
 8016594:	9a01      	ldr	r2, [sp, #4]
 8016596:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801659a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801659e:	425a      	negs	r2, r3
 80165a0:	415a      	adcs	r2, r3
 80165a2:	602a      	str	r2, [r5, #0]
 80165a4:	e7ee      	b.n	8016584 <__swhatbuf_r+0x1c>
 80165a6:	2340      	movs	r3, #64	; 0x40
 80165a8:	2000      	movs	r0, #0
 80165aa:	6023      	str	r3, [r4, #0]
 80165ac:	b016      	add	sp, #88	; 0x58
 80165ae:	bd70      	pop	{r4, r5, r6, pc}

080165b0 <__smakebuf_r>:
 80165b0:	898b      	ldrh	r3, [r1, #12]
 80165b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165b4:	079d      	lsls	r5, r3, #30
 80165b6:	4606      	mov	r6, r0
 80165b8:	460c      	mov	r4, r1
 80165ba:	d507      	bpl.n	80165cc <__smakebuf_r+0x1c>
 80165bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80165c0:	6023      	str	r3, [r4, #0]
 80165c2:	6123      	str	r3, [r4, #16]
 80165c4:	2301      	movs	r3, #1
 80165c6:	6163      	str	r3, [r4, #20]
 80165c8:	b002      	add	sp, #8
 80165ca:	bd70      	pop	{r4, r5, r6, pc}
 80165cc:	ab01      	add	r3, sp, #4
 80165ce:	466a      	mov	r2, sp
 80165d0:	f7ff ffca 	bl	8016568 <__swhatbuf_r>
 80165d4:	9900      	ldr	r1, [sp, #0]
 80165d6:	4605      	mov	r5, r0
 80165d8:	4630      	mov	r0, r6
 80165da:	f000 fc9f 	bl	8016f1c <_malloc_r>
 80165de:	b948      	cbnz	r0, 80165f4 <__smakebuf_r+0x44>
 80165e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165e4:	059a      	lsls	r2, r3, #22
 80165e6:	d4ef      	bmi.n	80165c8 <__smakebuf_r+0x18>
 80165e8:	f023 0303 	bic.w	r3, r3, #3
 80165ec:	f043 0302 	orr.w	r3, r3, #2
 80165f0:	81a3      	strh	r3, [r4, #12]
 80165f2:	e7e3      	b.n	80165bc <__smakebuf_r+0xc>
 80165f4:	4b0d      	ldr	r3, [pc, #52]	; (801662c <__smakebuf_r+0x7c>)
 80165f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80165f8:	89a3      	ldrh	r3, [r4, #12]
 80165fa:	6020      	str	r0, [r4, #0]
 80165fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016600:	81a3      	strh	r3, [r4, #12]
 8016602:	9b00      	ldr	r3, [sp, #0]
 8016604:	6163      	str	r3, [r4, #20]
 8016606:	9b01      	ldr	r3, [sp, #4]
 8016608:	6120      	str	r0, [r4, #16]
 801660a:	b15b      	cbz	r3, 8016624 <__smakebuf_r+0x74>
 801660c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016610:	4630      	mov	r0, r6
 8016612:	f001 fbf3 	bl	8017dfc <_isatty_r>
 8016616:	b128      	cbz	r0, 8016624 <__smakebuf_r+0x74>
 8016618:	89a3      	ldrh	r3, [r4, #12]
 801661a:	f023 0303 	bic.w	r3, r3, #3
 801661e:	f043 0301 	orr.w	r3, r3, #1
 8016622:	81a3      	strh	r3, [r4, #12]
 8016624:	89a3      	ldrh	r3, [r4, #12]
 8016626:	431d      	orrs	r5, r3
 8016628:	81a5      	strh	r5, [r4, #12]
 801662a:	e7cd      	b.n	80165c8 <__smakebuf_r+0x18>
 801662c:	08015d69 	.word	0x08015d69

08016630 <malloc>:
 8016630:	4b02      	ldr	r3, [pc, #8]	; (801663c <malloc+0xc>)
 8016632:	4601      	mov	r1, r0
 8016634:	6818      	ldr	r0, [r3, #0]
 8016636:	f000 bc71 	b.w	8016f1c <_malloc_r>
 801663a:	bf00      	nop
 801663c:	2000000c 	.word	0x2000000c

08016640 <__ascii_mbtowc>:
 8016640:	b082      	sub	sp, #8
 8016642:	b901      	cbnz	r1, 8016646 <__ascii_mbtowc+0x6>
 8016644:	a901      	add	r1, sp, #4
 8016646:	b142      	cbz	r2, 801665a <__ascii_mbtowc+0x1a>
 8016648:	b14b      	cbz	r3, 801665e <__ascii_mbtowc+0x1e>
 801664a:	7813      	ldrb	r3, [r2, #0]
 801664c:	600b      	str	r3, [r1, #0]
 801664e:	7812      	ldrb	r2, [r2, #0]
 8016650:	1c10      	adds	r0, r2, #0
 8016652:	bf18      	it	ne
 8016654:	2001      	movne	r0, #1
 8016656:	b002      	add	sp, #8
 8016658:	4770      	bx	lr
 801665a:	4610      	mov	r0, r2
 801665c:	e7fb      	b.n	8016656 <__ascii_mbtowc+0x16>
 801665e:	f06f 0001 	mvn.w	r0, #1
 8016662:	e7f8      	b.n	8016656 <__ascii_mbtowc+0x16>

08016664 <_Balloc>:
 8016664:	b570      	push	{r4, r5, r6, lr}
 8016666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016668:	4604      	mov	r4, r0
 801666a:	460e      	mov	r6, r1
 801666c:	b93d      	cbnz	r5, 801667e <_Balloc+0x1a>
 801666e:	2010      	movs	r0, #16
 8016670:	f7ff ffde 	bl	8016630 <malloc>
 8016674:	6260      	str	r0, [r4, #36]	; 0x24
 8016676:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801667a:	6005      	str	r5, [r0, #0]
 801667c:	60c5      	str	r5, [r0, #12]
 801667e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016680:	68eb      	ldr	r3, [r5, #12]
 8016682:	b183      	cbz	r3, 80166a6 <_Balloc+0x42>
 8016684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016686:	68db      	ldr	r3, [r3, #12]
 8016688:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801668c:	b9b8      	cbnz	r0, 80166be <_Balloc+0x5a>
 801668e:	2101      	movs	r1, #1
 8016690:	fa01 f506 	lsl.w	r5, r1, r6
 8016694:	1d6a      	adds	r2, r5, #5
 8016696:	0092      	lsls	r2, r2, #2
 8016698:	4620      	mov	r0, r4
 801669a:	f000 fbe2 	bl	8016e62 <_calloc_r>
 801669e:	b160      	cbz	r0, 80166ba <_Balloc+0x56>
 80166a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80166a4:	e00e      	b.n	80166c4 <_Balloc+0x60>
 80166a6:	2221      	movs	r2, #33	; 0x21
 80166a8:	2104      	movs	r1, #4
 80166aa:	4620      	mov	r0, r4
 80166ac:	f000 fbd9 	bl	8016e62 <_calloc_r>
 80166b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166b2:	60e8      	str	r0, [r5, #12]
 80166b4:	68db      	ldr	r3, [r3, #12]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d1e4      	bne.n	8016684 <_Balloc+0x20>
 80166ba:	2000      	movs	r0, #0
 80166bc:	bd70      	pop	{r4, r5, r6, pc}
 80166be:	6802      	ldr	r2, [r0, #0]
 80166c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80166c4:	2300      	movs	r3, #0
 80166c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80166ca:	e7f7      	b.n	80166bc <_Balloc+0x58>

080166cc <_Bfree>:
 80166cc:	b570      	push	{r4, r5, r6, lr}
 80166ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80166d0:	4606      	mov	r6, r0
 80166d2:	460d      	mov	r5, r1
 80166d4:	b93c      	cbnz	r4, 80166e6 <_Bfree+0x1a>
 80166d6:	2010      	movs	r0, #16
 80166d8:	f7ff ffaa 	bl	8016630 <malloc>
 80166dc:	6270      	str	r0, [r6, #36]	; 0x24
 80166de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80166e2:	6004      	str	r4, [r0, #0]
 80166e4:	60c4      	str	r4, [r0, #12]
 80166e6:	b13d      	cbz	r5, 80166f8 <_Bfree+0x2c>
 80166e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80166ea:	686a      	ldr	r2, [r5, #4]
 80166ec:	68db      	ldr	r3, [r3, #12]
 80166ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80166f2:	6029      	str	r1, [r5, #0]
 80166f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80166f8:	bd70      	pop	{r4, r5, r6, pc}

080166fa <__multadd>:
 80166fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166fe:	690d      	ldr	r5, [r1, #16]
 8016700:	461f      	mov	r7, r3
 8016702:	4606      	mov	r6, r0
 8016704:	460c      	mov	r4, r1
 8016706:	f101 0c14 	add.w	ip, r1, #20
 801670a:	2300      	movs	r3, #0
 801670c:	f8dc 0000 	ldr.w	r0, [ip]
 8016710:	b281      	uxth	r1, r0
 8016712:	fb02 7101 	mla	r1, r2, r1, r7
 8016716:	0c0f      	lsrs	r7, r1, #16
 8016718:	0c00      	lsrs	r0, r0, #16
 801671a:	fb02 7000 	mla	r0, r2, r0, r7
 801671e:	b289      	uxth	r1, r1
 8016720:	3301      	adds	r3, #1
 8016722:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016726:	429d      	cmp	r5, r3
 8016728:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801672c:	f84c 1b04 	str.w	r1, [ip], #4
 8016730:	dcec      	bgt.n	801670c <__multadd+0x12>
 8016732:	b1d7      	cbz	r7, 801676a <__multadd+0x70>
 8016734:	68a3      	ldr	r3, [r4, #8]
 8016736:	42ab      	cmp	r3, r5
 8016738:	dc12      	bgt.n	8016760 <__multadd+0x66>
 801673a:	6861      	ldr	r1, [r4, #4]
 801673c:	4630      	mov	r0, r6
 801673e:	3101      	adds	r1, #1
 8016740:	f7ff ff90 	bl	8016664 <_Balloc>
 8016744:	6922      	ldr	r2, [r4, #16]
 8016746:	3202      	adds	r2, #2
 8016748:	f104 010c 	add.w	r1, r4, #12
 801674c:	4680      	mov	r8, r0
 801674e:	0092      	lsls	r2, r2, #2
 8016750:	300c      	adds	r0, #12
 8016752:	f7fc fc8d 	bl	8013070 <memcpy>
 8016756:	4621      	mov	r1, r4
 8016758:	4630      	mov	r0, r6
 801675a:	f7ff ffb7 	bl	80166cc <_Bfree>
 801675e:	4644      	mov	r4, r8
 8016760:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016764:	3501      	adds	r5, #1
 8016766:	615f      	str	r7, [r3, #20]
 8016768:	6125      	str	r5, [r4, #16]
 801676a:	4620      	mov	r0, r4
 801676c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016770 <__s2b>:
 8016770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016774:	460c      	mov	r4, r1
 8016776:	4615      	mov	r5, r2
 8016778:	461f      	mov	r7, r3
 801677a:	2209      	movs	r2, #9
 801677c:	3308      	adds	r3, #8
 801677e:	4606      	mov	r6, r0
 8016780:	fb93 f3f2 	sdiv	r3, r3, r2
 8016784:	2100      	movs	r1, #0
 8016786:	2201      	movs	r2, #1
 8016788:	429a      	cmp	r2, r3
 801678a:	db20      	blt.n	80167ce <__s2b+0x5e>
 801678c:	4630      	mov	r0, r6
 801678e:	f7ff ff69 	bl	8016664 <_Balloc>
 8016792:	9b08      	ldr	r3, [sp, #32]
 8016794:	6143      	str	r3, [r0, #20]
 8016796:	2d09      	cmp	r5, #9
 8016798:	f04f 0301 	mov.w	r3, #1
 801679c:	6103      	str	r3, [r0, #16]
 801679e:	dd19      	ble.n	80167d4 <__s2b+0x64>
 80167a0:	f104 0809 	add.w	r8, r4, #9
 80167a4:	46c1      	mov	r9, r8
 80167a6:	442c      	add	r4, r5
 80167a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80167ac:	4601      	mov	r1, r0
 80167ae:	3b30      	subs	r3, #48	; 0x30
 80167b0:	220a      	movs	r2, #10
 80167b2:	4630      	mov	r0, r6
 80167b4:	f7ff ffa1 	bl	80166fa <__multadd>
 80167b8:	45a1      	cmp	r9, r4
 80167ba:	d1f5      	bne.n	80167a8 <__s2b+0x38>
 80167bc:	eb08 0405 	add.w	r4, r8, r5
 80167c0:	3c08      	subs	r4, #8
 80167c2:	1b2d      	subs	r5, r5, r4
 80167c4:	1963      	adds	r3, r4, r5
 80167c6:	42bb      	cmp	r3, r7
 80167c8:	db07      	blt.n	80167da <__s2b+0x6a>
 80167ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167ce:	0052      	lsls	r2, r2, #1
 80167d0:	3101      	adds	r1, #1
 80167d2:	e7d9      	b.n	8016788 <__s2b+0x18>
 80167d4:	340a      	adds	r4, #10
 80167d6:	2509      	movs	r5, #9
 80167d8:	e7f3      	b.n	80167c2 <__s2b+0x52>
 80167da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80167de:	4601      	mov	r1, r0
 80167e0:	3b30      	subs	r3, #48	; 0x30
 80167e2:	220a      	movs	r2, #10
 80167e4:	4630      	mov	r0, r6
 80167e6:	f7ff ff88 	bl	80166fa <__multadd>
 80167ea:	e7eb      	b.n	80167c4 <__s2b+0x54>

080167ec <__hi0bits>:
 80167ec:	0c02      	lsrs	r2, r0, #16
 80167ee:	0412      	lsls	r2, r2, #16
 80167f0:	4603      	mov	r3, r0
 80167f2:	b9b2      	cbnz	r2, 8016822 <__hi0bits+0x36>
 80167f4:	0403      	lsls	r3, r0, #16
 80167f6:	2010      	movs	r0, #16
 80167f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80167fc:	bf04      	itt	eq
 80167fe:	021b      	lsleq	r3, r3, #8
 8016800:	3008      	addeq	r0, #8
 8016802:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016806:	bf04      	itt	eq
 8016808:	011b      	lsleq	r3, r3, #4
 801680a:	3004      	addeq	r0, #4
 801680c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016810:	bf04      	itt	eq
 8016812:	009b      	lsleq	r3, r3, #2
 8016814:	3002      	addeq	r0, #2
 8016816:	2b00      	cmp	r3, #0
 8016818:	db06      	blt.n	8016828 <__hi0bits+0x3c>
 801681a:	005b      	lsls	r3, r3, #1
 801681c:	d503      	bpl.n	8016826 <__hi0bits+0x3a>
 801681e:	3001      	adds	r0, #1
 8016820:	4770      	bx	lr
 8016822:	2000      	movs	r0, #0
 8016824:	e7e8      	b.n	80167f8 <__hi0bits+0xc>
 8016826:	2020      	movs	r0, #32
 8016828:	4770      	bx	lr

0801682a <__lo0bits>:
 801682a:	6803      	ldr	r3, [r0, #0]
 801682c:	f013 0207 	ands.w	r2, r3, #7
 8016830:	4601      	mov	r1, r0
 8016832:	d00b      	beq.n	801684c <__lo0bits+0x22>
 8016834:	07da      	lsls	r2, r3, #31
 8016836:	d423      	bmi.n	8016880 <__lo0bits+0x56>
 8016838:	0798      	lsls	r0, r3, #30
 801683a:	bf49      	itett	mi
 801683c:	085b      	lsrmi	r3, r3, #1
 801683e:	089b      	lsrpl	r3, r3, #2
 8016840:	2001      	movmi	r0, #1
 8016842:	600b      	strmi	r3, [r1, #0]
 8016844:	bf5c      	itt	pl
 8016846:	600b      	strpl	r3, [r1, #0]
 8016848:	2002      	movpl	r0, #2
 801684a:	4770      	bx	lr
 801684c:	b298      	uxth	r0, r3
 801684e:	b9a8      	cbnz	r0, 801687c <__lo0bits+0x52>
 8016850:	0c1b      	lsrs	r3, r3, #16
 8016852:	2010      	movs	r0, #16
 8016854:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016858:	bf04      	itt	eq
 801685a:	0a1b      	lsreq	r3, r3, #8
 801685c:	3008      	addeq	r0, #8
 801685e:	071a      	lsls	r2, r3, #28
 8016860:	bf04      	itt	eq
 8016862:	091b      	lsreq	r3, r3, #4
 8016864:	3004      	addeq	r0, #4
 8016866:	079a      	lsls	r2, r3, #30
 8016868:	bf04      	itt	eq
 801686a:	089b      	lsreq	r3, r3, #2
 801686c:	3002      	addeq	r0, #2
 801686e:	07da      	lsls	r2, r3, #31
 8016870:	d402      	bmi.n	8016878 <__lo0bits+0x4e>
 8016872:	085b      	lsrs	r3, r3, #1
 8016874:	d006      	beq.n	8016884 <__lo0bits+0x5a>
 8016876:	3001      	adds	r0, #1
 8016878:	600b      	str	r3, [r1, #0]
 801687a:	4770      	bx	lr
 801687c:	4610      	mov	r0, r2
 801687e:	e7e9      	b.n	8016854 <__lo0bits+0x2a>
 8016880:	2000      	movs	r0, #0
 8016882:	4770      	bx	lr
 8016884:	2020      	movs	r0, #32
 8016886:	4770      	bx	lr

08016888 <__i2b>:
 8016888:	b510      	push	{r4, lr}
 801688a:	460c      	mov	r4, r1
 801688c:	2101      	movs	r1, #1
 801688e:	f7ff fee9 	bl	8016664 <_Balloc>
 8016892:	2201      	movs	r2, #1
 8016894:	6144      	str	r4, [r0, #20]
 8016896:	6102      	str	r2, [r0, #16]
 8016898:	bd10      	pop	{r4, pc}

0801689a <__multiply>:
 801689a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801689e:	4614      	mov	r4, r2
 80168a0:	690a      	ldr	r2, [r1, #16]
 80168a2:	6923      	ldr	r3, [r4, #16]
 80168a4:	429a      	cmp	r2, r3
 80168a6:	bfb8      	it	lt
 80168a8:	460b      	movlt	r3, r1
 80168aa:	4688      	mov	r8, r1
 80168ac:	bfbc      	itt	lt
 80168ae:	46a0      	movlt	r8, r4
 80168b0:	461c      	movlt	r4, r3
 80168b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80168b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80168ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80168be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80168c2:	eb07 0609 	add.w	r6, r7, r9
 80168c6:	42b3      	cmp	r3, r6
 80168c8:	bfb8      	it	lt
 80168ca:	3101      	addlt	r1, #1
 80168cc:	f7ff feca 	bl	8016664 <_Balloc>
 80168d0:	f100 0514 	add.w	r5, r0, #20
 80168d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80168d8:	462b      	mov	r3, r5
 80168da:	2200      	movs	r2, #0
 80168dc:	4573      	cmp	r3, lr
 80168de:	d316      	bcc.n	801690e <__multiply+0x74>
 80168e0:	f104 0214 	add.w	r2, r4, #20
 80168e4:	f108 0114 	add.w	r1, r8, #20
 80168e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80168ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80168f0:	9300      	str	r3, [sp, #0]
 80168f2:	9b00      	ldr	r3, [sp, #0]
 80168f4:	9201      	str	r2, [sp, #4]
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d80c      	bhi.n	8016914 <__multiply+0x7a>
 80168fa:	2e00      	cmp	r6, #0
 80168fc:	dd03      	ble.n	8016906 <__multiply+0x6c>
 80168fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016902:	2b00      	cmp	r3, #0
 8016904:	d05d      	beq.n	80169c2 <__multiply+0x128>
 8016906:	6106      	str	r6, [r0, #16]
 8016908:	b003      	add	sp, #12
 801690a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801690e:	f843 2b04 	str.w	r2, [r3], #4
 8016912:	e7e3      	b.n	80168dc <__multiply+0x42>
 8016914:	f8b2 b000 	ldrh.w	fp, [r2]
 8016918:	f1bb 0f00 	cmp.w	fp, #0
 801691c:	d023      	beq.n	8016966 <__multiply+0xcc>
 801691e:	4689      	mov	r9, r1
 8016920:	46ac      	mov	ip, r5
 8016922:	f04f 0800 	mov.w	r8, #0
 8016926:	f859 4b04 	ldr.w	r4, [r9], #4
 801692a:	f8dc a000 	ldr.w	sl, [ip]
 801692e:	b2a3      	uxth	r3, r4
 8016930:	fa1f fa8a 	uxth.w	sl, sl
 8016934:	fb0b a303 	mla	r3, fp, r3, sl
 8016938:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801693c:	f8dc 4000 	ldr.w	r4, [ip]
 8016940:	4443      	add	r3, r8
 8016942:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016946:	fb0b 840a 	mla	r4, fp, sl, r8
 801694a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801694e:	46e2      	mov	sl, ip
 8016950:	b29b      	uxth	r3, r3
 8016952:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016956:	454f      	cmp	r7, r9
 8016958:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801695c:	f84a 3b04 	str.w	r3, [sl], #4
 8016960:	d82b      	bhi.n	80169ba <__multiply+0x120>
 8016962:	f8cc 8004 	str.w	r8, [ip, #4]
 8016966:	9b01      	ldr	r3, [sp, #4]
 8016968:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801696c:	3204      	adds	r2, #4
 801696e:	f1ba 0f00 	cmp.w	sl, #0
 8016972:	d020      	beq.n	80169b6 <__multiply+0x11c>
 8016974:	682b      	ldr	r3, [r5, #0]
 8016976:	4689      	mov	r9, r1
 8016978:	46a8      	mov	r8, r5
 801697a:	f04f 0b00 	mov.w	fp, #0
 801697e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016982:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016986:	fb0a 440c 	mla	r4, sl, ip, r4
 801698a:	445c      	add	r4, fp
 801698c:	46c4      	mov	ip, r8
 801698e:	b29b      	uxth	r3, r3
 8016990:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016994:	f84c 3b04 	str.w	r3, [ip], #4
 8016998:	f859 3b04 	ldr.w	r3, [r9], #4
 801699c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80169a0:	0c1b      	lsrs	r3, r3, #16
 80169a2:	fb0a b303 	mla	r3, sl, r3, fp
 80169a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80169aa:	454f      	cmp	r7, r9
 80169ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80169b0:	d805      	bhi.n	80169be <__multiply+0x124>
 80169b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80169b6:	3504      	adds	r5, #4
 80169b8:	e79b      	b.n	80168f2 <__multiply+0x58>
 80169ba:	46d4      	mov	ip, sl
 80169bc:	e7b3      	b.n	8016926 <__multiply+0x8c>
 80169be:	46e0      	mov	r8, ip
 80169c0:	e7dd      	b.n	801697e <__multiply+0xe4>
 80169c2:	3e01      	subs	r6, #1
 80169c4:	e799      	b.n	80168fa <__multiply+0x60>
	...

080169c8 <__pow5mult>:
 80169c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169cc:	4615      	mov	r5, r2
 80169ce:	f012 0203 	ands.w	r2, r2, #3
 80169d2:	4606      	mov	r6, r0
 80169d4:	460f      	mov	r7, r1
 80169d6:	d007      	beq.n	80169e8 <__pow5mult+0x20>
 80169d8:	3a01      	subs	r2, #1
 80169da:	4c21      	ldr	r4, [pc, #132]	; (8016a60 <__pow5mult+0x98>)
 80169dc:	2300      	movs	r3, #0
 80169de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80169e2:	f7ff fe8a 	bl	80166fa <__multadd>
 80169e6:	4607      	mov	r7, r0
 80169e8:	10ad      	asrs	r5, r5, #2
 80169ea:	d035      	beq.n	8016a58 <__pow5mult+0x90>
 80169ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80169ee:	b93c      	cbnz	r4, 8016a00 <__pow5mult+0x38>
 80169f0:	2010      	movs	r0, #16
 80169f2:	f7ff fe1d 	bl	8016630 <malloc>
 80169f6:	6270      	str	r0, [r6, #36]	; 0x24
 80169f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80169fc:	6004      	str	r4, [r0, #0]
 80169fe:	60c4      	str	r4, [r0, #12]
 8016a00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016a04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016a08:	b94c      	cbnz	r4, 8016a1e <__pow5mult+0x56>
 8016a0a:	f240 2171 	movw	r1, #625	; 0x271
 8016a0e:	4630      	mov	r0, r6
 8016a10:	f7ff ff3a 	bl	8016888 <__i2b>
 8016a14:	2300      	movs	r3, #0
 8016a16:	f8c8 0008 	str.w	r0, [r8, #8]
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	6003      	str	r3, [r0, #0]
 8016a1e:	f04f 0800 	mov.w	r8, #0
 8016a22:	07eb      	lsls	r3, r5, #31
 8016a24:	d50a      	bpl.n	8016a3c <__pow5mult+0x74>
 8016a26:	4639      	mov	r1, r7
 8016a28:	4622      	mov	r2, r4
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	f7ff ff35 	bl	801689a <__multiply>
 8016a30:	4639      	mov	r1, r7
 8016a32:	4681      	mov	r9, r0
 8016a34:	4630      	mov	r0, r6
 8016a36:	f7ff fe49 	bl	80166cc <_Bfree>
 8016a3a:	464f      	mov	r7, r9
 8016a3c:	106d      	asrs	r5, r5, #1
 8016a3e:	d00b      	beq.n	8016a58 <__pow5mult+0x90>
 8016a40:	6820      	ldr	r0, [r4, #0]
 8016a42:	b938      	cbnz	r0, 8016a54 <__pow5mult+0x8c>
 8016a44:	4622      	mov	r2, r4
 8016a46:	4621      	mov	r1, r4
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f7ff ff26 	bl	801689a <__multiply>
 8016a4e:	6020      	str	r0, [r4, #0]
 8016a50:	f8c0 8000 	str.w	r8, [r0]
 8016a54:	4604      	mov	r4, r0
 8016a56:	e7e4      	b.n	8016a22 <__pow5mult+0x5a>
 8016a58:	4638      	mov	r0, r7
 8016a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a5e:	bf00      	nop
 8016a60:	08018898 	.word	0x08018898

08016a64 <__lshift>:
 8016a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a68:	460c      	mov	r4, r1
 8016a6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016a6e:	6923      	ldr	r3, [r4, #16]
 8016a70:	6849      	ldr	r1, [r1, #4]
 8016a72:	eb0a 0903 	add.w	r9, sl, r3
 8016a76:	68a3      	ldr	r3, [r4, #8]
 8016a78:	4607      	mov	r7, r0
 8016a7a:	4616      	mov	r6, r2
 8016a7c:	f109 0501 	add.w	r5, r9, #1
 8016a80:	42ab      	cmp	r3, r5
 8016a82:	db32      	blt.n	8016aea <__lshift+0x86>
 8016a84:	4638      	mov	r0, r7
 8016a86:	f7ff fded 	bl	8016664 <_Balloc>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	4680      	mov	r8, r0
 8016a8e:	f100 0114 	add.w	r1, r0, #20
 8016a92:	461a      	mov	r2, r3
 8016a94:	4553      	cmp	r3, sl
 8016a96:	db2b      	blt.n	8016af0 <__lshift+0x8c>
 8016a98:	6920      	ldr	r0, [r4, #16]
 8016a9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a9e:	f104 0314 	add.w	r3, r4, #20
 8016aa2:	f016 021f 	ands.w	r2, r6, #31
 8016aa6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016aaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016aae:	d025      	beq.n	8016afc <__lshift+0x98>
 8016ab0:	f1c2 0e20 	rsb	lr, r2, #32
 8016ab4:	2000      	movs	r0, #0
 8016ab6:	681e      	ldr	r6, [r3, #0]
 8016ab8:	468a      	mov	sl, r1
 8016aba:	4096      	lsls	r6, r2
 8016abc:	4330      	orrs	r0, r6
 8016abe:	f84a 0b04 	str.w	r0, [sl], #4
 8016ac2:	f853 0b04 	ldr.w	r0, [r3], #4
 8016ac6:	459c      	cmp	ip, r3
 8016ac8:	fa20 f00e 	lsr.w	r0, r0, lr
 8016acc:	d814      	bhi.n	8016af8 <__lshift+0x94>
 8016ace:	6048      	str	r0, [r1, #4]
 8016ad0:	b108      	cbz	r0, 8016ad6 <__lshift+0x72>
 8016ad2:	f109 0502 	add.w	r5, r9, #2
 8016ad6:	3d01      	subs	r5, #1
 8016ad8:	4638      	mov	r0, r7
 8016ada:	f8c8 5010 	str.w	r5, [r8, #16]
 8016ade:	4621      	mov	r1, r4
 8016ae0:	f7ff fdf4 	bl	80166cc <_Bfree>
 8016ae4:	4640      	mov	r0, r8
 8016ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aea:	3101      	adds	r1, #1
 8016aec:	005b      	lsls	r3, r3, #1
 8016aee:	e7c7      	b.n	8016a80 <__lshift+0x1c>
 8016af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016af4:	3301      	adds	r3, #1
 8016af6:	e7cd      	b.n	8016a94 <__lshift+0x30>
 8016af8:	4651      	mov	r1, sl
 8016afa:	e7dc      	b.n	8016ab6 <__lshift+0x52>
 8016afc:	3904      	subs	r1, #4
 8016afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b02:	f841 2f04 	str.w	r2, [r1, #4]!
 8016b06:	459c      	cmp	ip, r3
 8016b08:	d8f9      	bhi.n	8016afe <__lshift+0x9a>
 8016b0a:	e7e4      	b.n	8016ad6 <__lshift+0x72>

08016b0c <__mcmp>:
 8016b0c:	6903      	ldr	r3, [r0, #16]
 8016b0e:	690a      	ldr	r2, [r1, #16]
 8016b10:	1a9b      	subs	r3, r3, r2
 8016b12:	b530      	push	{r4, r5, lr}
 8016b14:	d10c      	bne.n	8016b30 <__mcmp+0x24>
 8016b16:	0092      	lsls	r2, r2, #2
 8016b18:	3014      	adds	r0, #20
 8016b1a:	3114      	adds	r1, #20
 8016b1c:	1884      	adds	r4, r0, r2
 8016b1e:	4411      	add	r1, r2
 8016b20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016b24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016b28:	4295      	cmp	r5, r2
 8016b2a:	d003      	beq.n	8016b34 <__mcmp+0x28>
 8016b2c:	d305      	bcc.n	8016b3a <__mcmp+0x2e>
 8016b2e:	2301      	movs	r3, #1
 8016b30:	4618      	mov	r0, r3
 8016b32:	bd30      	pop	{r4, r5, pc}
 8016b34:	42a0      	cmp	r0, r4
 8016b36:	d3f3      	bcc.n	8016b20 <__mcmp+0x14>
 8016b38:	e7fa      	b.n	8016b30 <__mcmp+0x24>
 8016b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b3e:	e7f7      	b.n	8016b30 <__mcmp+0x24>

08016b40 <__mdiff>:
 8016b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b44:	460d      	mov	r5, r1
 8016b46:	4607      	mov	r7, r0
 8016b48:	4611      	mov	r1, r2
 8016b4a:	4628      	mov	r0, r5
 8016b4c:	4614      	mov	r4, r2
 8016b4e:	f7ff ffdd 	bl	8016b0c <__mcmp>
 8016b52:	1e06      	subs	r6, r0, #0
 8016b54:	d108      	bne.n	8016b68 <__mdiff+0x28>
 8016b56:	4631      	mov	r1, r6
 8016b58:	4638      	mov	r0, r7
 8016b5a:	f7ff fd83 	bl	8016664 <_Balloc>
 8016b5e:	2301      	movs	r3, #1
 8016b60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b68:	bfa4      	itt	ge
 8016b6a:	4623      	movge	r3, r4
 8016b6c:	462c      	movge	r4, r5
 8016b6e:	4638      	mov	r0, r7
 8016b70:	6861      	ldr	r1, [r4, #4]
 8016b72:	bfa6      	itte	ge
 8016b74:	461d      	movge	r5, r3
 8016b76:	2600      	movge	r6, #0
 8016b78:	2601      	movlt	r6, #1
 8016b7a:	f7ff fd73 	bl	8016664 <_Balloc>
 8016b7e:	692b      	ldr	r3, [r5, #16]
 8016b80:	60c6      	str	r6, [r0, #12]
 8016b82:	6926      	ldr	r6, [r4, #16]
 8016b84:	f105 0914 	add.w	r9, r5, #20
 8016b88:	f104 0214 	add.w	r2, r4, #20
 8016b8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016b90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016b94:	f100 0514 	add.w	r5, r0, #20
 8016b98:	f04f 0e00 	mov.w	lr, #0
 8016b9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016ba0:	f859 4b04 	ldr.w	r4, [r9], #4
 8016ba4:	fa1e f18a 	uxtah	r1, lr, sl
 8016ba8:	b2a3      	uxth	r3, r4
 8016baa:	1ac9      	subs	r1, r1, r3
 8016bac:	0c23      	lsrs	r3, r4, #16
 8016bae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016bb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016bb6:	b289      	uxth	r1, r1
 8016bb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016bbc:	45c8      	cmp	r8, r9
 8016bbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016bc2:	4694      	mov	ip, r2
 8016bc4:	f845 3b04 	str.w	r3, [r5], #4
 8016bc8:	d8e8      	bhi.n	8016b9c <__mdiff+0x5c>
 8016bca:	45bc      	cmp	ip, r7
 8016bcc:	d304      	bcc.n	8016bd8 <__mdiff+0x98>
 8016bce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016bd2:	b183      	cbz	r3, 8016bf6 <__mdiff+0xb6>
 8016bd4:	6106      	str	r6, [r0, #16]
 8016bd6:	e7c5      	b.n	8016b64 <__mdiff+0x24>
 8016bd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016bdc:	fa1e f381 	uxtah	r3, lr, r1
 8016be0:	141a      	asrs	r2, r3, #16
 8016be2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016bec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016bf0:	f845 3b04 	str.w	r3, [r5], #4
 8016bf4:	e7e9      	b.n	8016bca <__mdiff+0x8a>
 8016bf6:	3e01      	subs	r6, #1
 8016bf8:	e7e9      	b.n	8016bce <__mdiff+0x8e>
	...

08016bfc <__ulp>:
 8016bfc:	4b12      	ldr	r3, [pc, #72]	; (8016c48 <__ulp+0x4c>)
 8016bfe:	ee10 2a90 	vmov	r2, s1
 8016c02:	401a      	ands	r2, r3
 8016c04:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	dd04      	ble.n	8016c16 <__ulp+0x1a>
 8016c0c:	2000      	movs	r0, #0
 8016c0e:	4619      	mov	r1, r3
 8016c10:	ec41 0b10 	vmov	d0, r0, r1
 8016c14:	4770      	bx	lr
 8016c16:	425b      	negs	r3, r3
 8016c18:	151b      	asrs	r3, r3, #20
 8016c1a:	2b13      	cmp	r3, #19
 8016c1c:	f04f 0000 	mov.w	r0, #0
 8016c20:	f04f 0100 	mov.w	r1, #0
 8016c24:	dc04      	bgt.n	8016c30 <__ulp+0x34>
 8016c26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016c2a:	fa42 f103 	asr.w	r1, r2, r3
 8016c2e:	e7ef      	b.n	8016c10 <__ulp+0x14>
 8016c30:	3b14      	subs	r3, #20
 8016c32:	2b1e      	cmp	r3, #30
 8016c34:	f04f 0201 	mov.w	r2, #1
 8016c38:	bfda      	itte	le
 8016c3a:	f1c3 031f 	rsble	r3, r3, #31
 8016c3e:	fa02 f303 	lslle.w	r3, r2, r3
 8016c42:	4613      	movgt	r3, r2
 8016c44:	4618      	mov	r0, r3
 8016c46:	e7e3      	b.n	8016c10 <__ulp+0x14>
 8016c48:	7ff00000 	.word	0x7ff00000

08016c4c <__b2d>:
 8016c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c4e:	6905      	ldr	r5, [r0, #16]
 8016c50:	f100 0714 	add.w	r7, r0, #20
 8016c54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016c58:	1f2e      	subs	r6, r5, #4
 8016c5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016c5e:	4620      	mov	r0, r4
 8016c60:	f7ff fdc4 	bl	80167ec <__hi0bits>
 8016c64:	f1c0 0320 	rsb	r3, r0, #32
 8016c68:	280a      	cmp	r0, #10
 8016c6a:	600b      	str	r3, [r1, #0]
 8016c6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016ce4 <__b2d+0x98>
 8016c70:	dc14      	bgt.n	8016c9c <__b2d+0x50>
 8016c72:	f1c0 0e0b 	rsb	lr, r0, #11
 8016c76:	fa24 f10e 	lsr.w	r1, r4, lr
 8016c7a:	42b7      	cmp	r7, r6
 8016c7c:	ea41 030c 	orr.w	r3, r1, ip
 8016c80:	bf34      	ite	cc
 8016c82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016c86:	2100      	movcs	r1, #0
 8016c88:	3015      	adds	r0, #21
 8016c8a:	fa04 f000 	lsl.w	r0, r4, r0
 8016c8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016c92:	ea40 0201 	orr.w	r2, r0, r1
 8016c96:	ec43 2b10 	vmov	d0, r2, r3
 8016c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c9c:	42b7      	cmp	r7, r6
 8016c9e:	bf3a      	itte	cc
 8016ca0:	f1a5 0608 	subcc.w	r6, r5, #8
 8016ca4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016ca8:	2100      	movcs	r1, #0
 8016caa:	380b      	subs	r0, #11
 8016cac:	d015      	beq.n	8016cda <__b2d+0x8e>
 8016cae:	4084      	lsls	r4, r0
 8016cb0:	f1c0 0520 	rsb	r5, r0, #32
 8016cb4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016cb8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016cbc:	42be      	cmp	r6, r7
 8016cbe:	fa21 fc05 	lsr.w	ip, r1, r5
 8016cc2:	ea44 030c 	orr.w	r3, r4, ip
 8016cc6:	bf8c      	ite	hi
 8016cc8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016ccc:	2400      	movls	r4, #0
 8016cce:	fa01 f000 	lsl.w	r0, r1, r0
 8016cd2:	40ec      	lsrs	r4, r5
 8016cd4:	ea40 0204 	orr.w	r2, r0, r4
 8016cd8:	e7dd      	b.n	8016c96 <__b2d+0x4a>
 8016cda:	ea44 030c 	orr.w	r3, r4, ip
 8016cde:	460a      	mov	r2, r1
 8016ce0:	e7d9      	b.n	8016c96 <__b2d+0x4a>
 8016ce2:	bf00      	nop
 8016ce4:	3ff00000 	.word	0x3ff00000

08016ce8 <__d2b>:
 8016ce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016cec:	460e      	mov	r6, r1
 8016cee:	2101      	movs	r1, #1
 8016cf0:	ec59 8b10 	vmov	r8, r9, d0
 8016cf4:	4615      	mov	r5, r2
 8016cf6:	f7ff fcb5 	bl	8016664 <_Balloc>
 8016cfa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016cfe:	4607      	mov	r7, r0
 8016d00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016d04:	bb34      	cbnz	r4, 8016d54 <__d2b+0x6c>
 8016d06:	9301      	str	r3, [sp, #4]
 8016d08:	f1b8 0300 	subs.w	r3, r8, #0
 8016d0c:	d027      	beq.n	8016d5e <__d2b+0x76>
 8016d0e:	a802      	add	r0, sp, #8
 8016d10:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016d14:	f7ff fd89 	bl	801682a <__lo0bits>
 8016d18:	9900      	ldr	r1, [sp, #0]
 8016d1a:	b1f0      	cbz	r0, 8016d5a <__d2b+0x72>
 8016d1c:	9a01      	ldr	r2, [sp, #4]
 8016d1e:	f1c0 0320 	rsb	r3, r0, #32
 8016d22:	fa02 f303 	lsl.w	r3, r2, r3
 8016d26:	430b      	orrs	r3, r1
 8016d28:	40c2      	lsrs	r2, r0
 8016d2a:	617b      	str	r3, [r7, #20]
 8016d2c:	9201      	str	r2, [sp, #4]
 8016d2e:	9b01      	ldr	r3, [sp, #4]
 8016d30:	61bb      	str	r3, [r7, #24]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	bf14      	ite	ne
 8016d36:	2102      	movne	r1, #2
 8016d38:	2101      	moveq	r1, #1
 8016d3a:	6139      	str	r1, [r7, #16]
 8016d3c:	b1c4      	cbz	r4, 8016d70 <__d2b+0x88>
 8016d3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016d42:	4404      	add	r4, r0
 8016d44:	6034      	str	r4, [r6, #0]
 8016d46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016d4a:	6028      	str	r0, [r5, #0]
 8016d4c:	4638      	mov	r0, r7
 8016d4e:	b003      	add	sp, #12
 8016d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016d58:	e7d5      	b.n	8016d06 <__d2b+0x1e>
 8016d5a:	6179      	str	r1, [r7, #20]
 8016d5c:	e7e7      	b.n	8016d2e <__d2b+0x46>
 8016d5e:	a801      	add	r0, sp, #4
 8016d60:	f7ff fd63 	bl	801682a <__lo0bits>
 8016d64:	9b01      	ldr	r3, [sp, #4]
 8016d66:	617b      	str	r3, [r7, #20]
 8016d68:	2101      	movs	r1, #1
 8016d6a:	6139      	str	r1, [r7, #16]
 8016d6c:	3020      	adds	r0, #32
 8016d6e:	e7e5      	b.n	8016d3c <__d2b+0x54>
 8016d70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016d74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016d78:	6030      	str	r0, [r6, #0]
 8016d7a:	6918      	ldr	r0, [r3, #16]
 8016d7c:	f7ff fd36 	bl	80167ec <__hi0bits>
 8016d80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016d84:	e7e1      	b.n	8016d4a <__d2b+0x62>

08016d86 <__ratio>:
 8016d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d8a:	4688      	mov	r8, r1
 8016d8c:	4669      	mov	r1, sp
 8016d8e:	4681      	mov	r9, r0
 8016d90:	f7ff ff5c 	bl	8016c4c <__b2d>
 8016d94:	a901      	add	r1, sp, #4
 8016d96:	4640      	mov	r0, r8
 8016d98:	ec57 6b10 	vmov	r6, r7, d0
 8016d9c:	f7ff ff56 	bl	8016c4c <__b2d>
 8016da0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016da4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016da8:	eba3 0c02 	sub.w	ip, r3, r2
 8016dac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016db0:	1a9b      	subs	r3, r3, r2
 8016db2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016db6:	ec5b ab10 	vmov	sl, fp, d0
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	bfce      	itee	gt
 8016dbe:	463a      	movgt	r2, r7
 8016dc0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016dc4:	465a      	movle	r2, fp
 8016dc6:	4659      	mov	r1, fp
 8016dc8:	463d      	mov	r5, r7
 8016dca:	bfd4      	ite	le
 8016dcc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016dd0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016dd4:	4630      	mov	r0, r6
 8016dd6:	ee10 2a10 	vmov	r2, s0
 8016dda:	460b      	mov	r3, r1
 8016ddc:	4629      	mov	r1, r5
 8016dde:	f7e9 fd4d 	bl	800087c <__aeabi_ddiv>
 8016de2:	ec41 0b10 	vmov	d0, r0, r1
 8016de6:	b003      	add	sp, #12
 8016de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016dec <__copybits>:
 8016dec:	3901      	subs	r1, #1
 8016dee:	b510      	push	{r4, lr}
 8016df0:	1149      	asrs	r1, r1, #5
 8016df2:	6914      	ldr	r4, [r2, #16]
 8016df4:	3101      	adds	r1, #1
 8016df6:	f102 0314 	add.w	r3, r2, #20
 8016dfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016dfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016e02:	42a3      	cmp	r3, r4
 8016e04:	4602      	mov	r2, r0
 8016e06:	d303      	bcc.n	8016e10 <__copybits+0x24>
 8016e08:	2300      	movs	r3, #0
 8016e0a:	428a      	cmp	r2, r1
 8016e0c:	d305      	bcc.n	8016e1a <__copybits+0x2e>
 8016e0e:	bd10      	pop	{r4, pc}
 8016e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e14:	f840 2b04 	str.w	r2, [r0], #4
 8016e18:	e7f3      	b.n	8016e02 <__copybits+0x16>
 8016e1a:	f842 3b04 	str.w	r3, [r2], #4
 8016e1e:	e7f4      	b.n	8016e0a <__copybits+0x1e>

08016e20 <__any_on>:
 8016e20:	f100 0214 	add.w	r2, r0, #20
 8016e24:	6900      	ldr	r0, [r0, #16]
 8016e26:	114b      	asrs	r3, r1, #5
 8016e28:	4298      	cmp	r0, r3
 8016e2a:	b510      	push	{r4, lr}
 8016e2c:	db11      	blt.n	8016e52 <__any_on+0x32>
 8016e2e:	dd0a      	ble.n	8016e46 <__any_on+0x26>
 8016e30:	f011 011f 	ands.w	r1, r1, #31
 8016e34:	d007      	beq.n	8016e46 <__any_on+0x26>
 8016e36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016e3a:	fa24 f001 	lsr.w	r0, r4, r1
 8016e3e:	fa00 f101 	lsl.w	r1, r0, r1
 8016e42:	428c      	cmp	r4, r1
 8016e44:	d10b      	bne.n	8016e5e <__any_on+0x3e>
 8016e46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016e4a:	4293      	cmp	r3, r2
 8016e4c:	d803      	bhi.n	8016e56 <__any_on+0x36>
 8016e4e:	2000      	movs	r0, #0
 8016e50:	bd10      	pop	{r4, pc}
 8016e52:	4603      	mov	r3, r0
 8016e54:	e7f7      	b.n	8016e46 <__any_on+0x26>
 8016e56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016e5a:	2900      	cmp	r1, #0
 8016e5c:	d0f5      	beq.n	8016e4a <__any_on+0x2a>
 8016e5e:	2001      	movs	r0, #1
 8016e60:	e7f6      	b.n	8016e50 <__any_on+0x30>

08016e62 <_calloc_r>:
 8016e62:	b538      	push	{r3, r4, r5, lr}
 8016e64:	fb02 f401 	mul.w	r4, r2, r1
 8016e68:	4621      	mov	r1, r4
 8016e6a:	f000 f857 	bl	8016f1c <_malloc_r>
 8016e6e:	4605      	mov	r5, r0
 8016e70:	b118      	cbz	r0, 8016e7a <_calloc_r+0x18>
 8016e72:	4622      	mov	r2, r4
 8016e74:	2100      	movs	r1, #0
 8016e76:	f7fc f906 	bl	8013086 <memset>
 8016e7a:	4628      	mov	r0, r5
 8016e7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016e80 <_free_r>:
 8016e80:	b538      	push	{r3, r4, r5, lr}
 8016e82:	4605      	mov	r5, r0
 8016e84:	2900      	cmp	r1, #0
 8016e86:	d045      	beq.n	8016f14 <_free_r+0x94>
 8016e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016e8c:	1f0c      	subs	r4, r1, #4
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	bfb8      	it	lt
 8016e92:	18e4      	addlt	r4, r4, r3
 8016e94:	f000 ffdb 	bl	8017e4e <__malloc_lock>
 8016e98:	4a1f      	ldr	r2, [pc, #124]	; (8016f18 <_free_r+0x98>)
 8016e9a:	6813      	ldr	r3, [r2, #0]
 8016e9c:	4610      	mov	r0, r2
 8016e9e:	b933      	cbnz	r3, 8016eae <_free_r+0x2e>
 8016ea0:	6063      	str	r3, [r4, #4]
 8016ea2:	6014      	str	r4, [r2, #0]
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016eaa:	f000 bfd1 	b.w	8017e50 <__malloc_unlock>
 8016eae:	42a3      	cmp	r3, r4
 8016eb0:	d90c      	bls.n	8016ecc <_free_r+0x4c>
 8016eb2:	6821      	ldr	r1, [r4, #0]
 8016eb4:	1862      	adds	r2, r4, r1
 8016eb6:	4293      	cmp	r3, r2
 8016eb8:	bf04      	itt	eq
 8016eba:	681a      	ldreq	r2, [r3, #0]
 8016ebc:	685b      	ldreq	r3, [r3, #4]
 8016ebe:	6063      	str	r3, [r4, #4]
 8016ec0:	bf04      	itt	eq
 8016ec2:	1852      	addeq	r2, r2, r1
 8016ec4:	6022      	streq	r2, [r4, #0]
 8016ec6:	6004      	str	r4, [r0, #0]
 8016ec8:	e7ec      	b.n	8016ea4 <_free_r+0x24>
 8016eca:	4613      	mov	r3, r2
 8016ecc:	685a      	ldr	r2, [r3, #4]
 8016ece:	b10a      	cbz	r2, 8016ed4 <_free_r+0x54>
 8016ed0:	42a2      	cmp	r2, r4
 8016ed2:	d9fa      	bls.n	8016eca <_free_r+0x4a>
 8016ed4:	6819      	ldr	r1, [r3, #0]
 8016ed6:	1858      	adds	r0, r3, r1
 8016ed8:	42a0      	cmp	r0, r4
 8016eda:	d10b      	bne.n	8016ef4 <_free_r+0x74>
 8016edc:	6820      	ldr	r0, [r4, #0]
 8016ede:	4401      	add	r1, r0
 8016ee0:	1858      	adds	r0, r3, r1
 8016ee2:	4282      	cmp	r2, r0
 8016ee4:	6019      	str	r1, [r3, #0]
 8016ee6:	d1dd      	bne.n	8016ea4 <_free_r+0x24>
 8016ee8:	6810      	ldr	r0, [r2, #0]
 8016eea:	6852      	ldr	r2, [r2, #4]
 8016eec:	605a      	str	r2, [r3, #4]
 8016eee:	4401      	add	r1, r0
 8016ef0:	6019      	str	r1, [r3, #0]
 8016ef2:	e7d7      	b.n	8016ea4 <_free_r+0x24>
 8016ef4:	d902      	bls.n	8016efc <_free_r+0x7c>
 8016ef6:	230c      	movs	r3, #12
 8016ef8:	602b      	str	r3, [r5, #0]
 8016efa:	e7d3      	b.n	8016ea4 <_free_r+0x24>
 8016efc:	6820      	ldr	r0, [r4, #0]
 8016efe:	1821      	adds	r1, r4, r0
 8016f00:	428a      	cmp	r2, r1
 8016f02:	bf04      	itt	eq
 8016f04:	6811      	ldreq	r1, [r2, #0]
 8016f06:	6852      	ldreq	r2, [r2, #4]
 8016f08:	6062      	str	r2, [r4, #4]
 8016f0a:	bf04      	itt	eq
 8016f0c:	1809      	addeq	r1, r1, r0
 8016f0e:	6021      	streq	r1, [r4, #0]
 8016f10:	605c      	str	r4, [r3, #4]
 8016f12:	e7c7      	b.n	8016ea4 <_free_r+0x24>
 8016f14:	bd38      	pop	{r3, r4, r5, pc}
 8016f16:	bf00      	nop
 8016f18:	20033604 	.word	0x20033604

08016f1c <_malloc_r>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	1ccd      	adds	r5, r1, #3
 8016f20:	f025 0503 	bic.w	r5, r5, #3
 8016f24:	3508      	adds	r5, #8
 8016f26:	2d0c      	cmp	r5, #12
 8016f28:	bf38      	it	cc
 8016f2a:	250c      	movcc	r5, #12
 8016f2c:	2d00      	cmp	r5, #0
 8016f2e:	4606      	mov	r6, r0
 8016f30:	db01      	blt.n	8016f36 <_malloc_r+0x1a>
 8016f32:	42a9      	cmp	r1, r5
 8016f34:	d903      	bls.n	8016f3e <_malloc_r+0x22>
 8016f36:	230c      	movs	r3, #12
 8016f38:	6033      	str	r3, [r6, #0]
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	bd70      	pop	{r4, r5, r6, pc}
 8016f3e:	f000 ff86 	bl	8017e4e <__malloc_lock>
 8016f42:	4a21      	ldr	r2, [pc, #132]	; (8016fc8 <_malloc_r+0xac>)
 8016f44:	6814      	ldr	r4, [r2, #0]
 8016f46:	4621      	mov	r1, r4
 8016f48:	b991      	cbnz	r1, 8016f70 <_malloc_r+0x54>
 8016f4a:	4c20      	ldr	r4, [pc, #128]	; (8016fcc <_malloc_r+0xb0>)
 8016f4c:	6823      	ldr	r3, [r4, #0]
 8016f4e:	b91b      	cbnz	r3, 8016f58 <_malloc_r+0x3c>
 8016f50:	4630      	mov	r0, r6
 8016f52:	f000 fe19 	bl	8017b88 <_sbrk_r>
 8016f56:	6020      	str	r0, [r4, #0]
 8016f58:	4629      	mov	r1, r5
 8016f5a:	4630      	mov	r0, r6
 8016f5c:	f000 fe14 	bl	8017b88 <_sbrk_r>
 8016f60:	1c43      	adds	r3, r0, #1
 8016f62:	d124      	bne.n	8016fae <_malloc_r+0x92>
 8016f64:	230c      	movs	r3, #12
 8016f66:	6033      	str	r3, [r6, #0]
 8016f68:	4630      	mov	r0, r6
 8016f6a:	f000 ff71 	bl	8017e50 <__malloc_unlock>
 8016f6e:	e7e4      	b.n	8016f3a <_malloc_r+0x1e>
 8016f70:	680b      	ldr	r3, [r1, #0]
 8016f72:	1b5b      	subs	r3, r3, r5
 8016f74:	d418      	bmi.n	8016fa8 <_malloc_r+0x8c>
 8016f76:	2b0b      	cmp	r3, #11
 8016f78:	d90f      	bls.n	8016f9a <_malloc_r+0x7e>
 8016f7a:	600b      	str	r3, [r1, #0]
 8016f7c:	50cd      	str	r5, [r1, r3]
 8016f7e:	18cc      	adds	r4, r1, r3
 8016f80:	4630      	mov	r0, r6
 8016f82:	f000 ff65 	bl	8017e50 <__malloc_unlock>
 8016f86:	f104 000b 	add.w	r0, r4, #11
 8016f8a:	1d23      	adds	r3, r4, #4
 8016f8c:	f020 0007 	bic.w	r0, r0, #7
 8016f90:	1ac3      	subs	r3, r0, r3
 8016f92:	d0d3      	beq.n	8016f3c <_malloc_r+0x20>
 8016f94:	425a      	negs	r2, r3
 8016f96:	50e2      	str	r2, [r4, r3]
 8016f98:	e7d0      	b.n	8016f3c <_malloc_r+0x20>
 8016f9a:	428c      	cmp	r4, r1
 8016f9c:	684b      	ldr	r3, [r1, #4]
 8016f9e:	bf16      	itet	ne
 8016fa0:	6063      	strne	r3, [r4, #4]
 8016fa2:	6013      	streq	r3, [r2, #0]
 8016fa4:	460c      	movne	r4, r1
 8016fa6:	e7eb      	b.n	8016f80 <_malloc_r+0x64>
 8016fa8:	460c      	mov	r4, r1
 8016faa:	6849      	ldr	r1, [r1, #4]
 8016fac:	e7cc      	b.n	8016f48 <_malloc_r+0x2c>
 8016fae:	1cc4      	adds	r4, r0, #3
 8016fb0:	f024 0403 	bic.w	r4, r4, #3
 8016fb4:	42a0      	cmp	r0, r4
 8016fb6:	d005      	beq.n	8016fc4 <_malloc_r+0xa8>
 8016fb8:	1a21      	subs	r1, r4, r0
 8016fba:	4630      	mov	r0, r6
 8016fbc:	f000 fde4 	bl	8017b88 <_sbrk_r>
 8016fc0:	3001      	adds	r0, #1
 8016fc2:	d0cf      	beq.n	8016f64 <_malloc_r+0x48>
 8016fc4:	6025      	str	r5, [r4, #0]
 8016fc6:	e7db      	b.n	8016f80 <_malloc_r+0x64>
 8016fc8:	20033604 	.word	0x20033604
 8016fcc:	20033608 	.word	0x20033608

08016fd0 <__ssputs_r>:
 8016fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fd4:	688e      	ldr	r6, [r1, #8]
 8016fd6:	429e      	cmp	r6, r3
 8016fd8:	4682      	mov	sl, r0
 8016fda:	460c      	mov	r4, r1
 8016fdc:	4690      	mov	r8, r2
 8016fde:	4699      	mov	r9, r3
 8016fe0:	d837      	bhi.n	8017052 <__ssputs_r+0x82>
 8016fe2:	898a      	ldrh	r2, [r1, #12]
 8016fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fe8:	d031      	beq.n	801704e <__ssputs_r+0x7e>
 8016fea:	6825      	ldr	r5, [r4, #0]
 8016fec:	6909      	ldr	r1, [r1, #16]
 8016fee:	1a6f      	subs	r7, r5, r1
 8016ff0:	6965      	ldr	r5, [r4, #20]
 8016ff2:	2302      	movs	r3, #2
 8016ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ff8:	fb95 f5f3 	sdiv	r5, r5, r3
 8016ffc:	f109 0301 	add.w	r3, r9, #1
 8017000:	443b      	add	r3, r7
 8017002:	429d      	cmp	r5, r3
 8017004:	bf38      	it	cc
 8017006:	461d      	movcc	r5, r3
 8017008:	0553      	lsls	r3, r2, #21
 801700a:	d530      	bpl.n	801706e <__ssputs_r+0x9e>
 801700c:	4629      	mov	r1, r5
 801700e:	f7ff ff85 	bl	8016f1c <_malloc_r>
 8017012:	4606      	mov	r6, r0
 8017014:	b950      	cbnz	r0, 801702c <__ssputs_r+0x5c>
 8017016:	230c      	movs	r3, #12
 8017018:	f8ca 3000 	str.w	r3, [sl]
 801701c:	89a3      	ldrh	r3, [r4, #12]
 801701e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017022:	81a3      	strh	r3, [r4, #12]
 8017024:	f04f 30ff 	mov.w	r0, #4294967295
 8017028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801702c:	463a      	mov	r2, r7
 801702e:	6921      	ldr	r1, [r4, #16]
 8017030:	f7fc f81e 	bl	8013070 <memcpy>
 8017034:	89a3      	ldrh	r3, [r4, #12]
 8017036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801703a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801703e:	81a3      	strh	r3, [r4, #12]
 8017040:	6126      	str	r6, [r4, #16]
 8017042:	6165      	str	r5, [r4, #20]
 8017044:	443e      	add	r6, r7
 8017046:	1bed      	subs	r5, r5, r7
 8017048:	6026      	str	r6, [r4, #0]
 801704a:	60a5      	str	r5, [r4, #8]
 801704c:	464e      	mov	r6, r9
 801704e:	454e      	cmp	r6, r9
 8017050:	d900      	bls.n	8017054 <__ssputs_r+0x84>
 8017052:	464e      	mov	r6, r9
 8017054:	4632      	mov	r2, r6
 8017056:	4641      	mov	r1, r8
 8017058:	6820      	ldr	r0, [r4, #0]
 801705a:	f000 fedf 	bl	8017e1c <memmove>
 801705e:	68a3      	ldr	r3, [r4, #8]
 8017060:	1b9b      	subs	r3, r3, r6
 8017062:	60a3      	str	r3, [r4, #8]
 8017064:	6823      	ldr	r3, [r4, #0]
 8017066:	441e      	add	r6, r3
 8017068:	6026      	str	r6, [r4, #0]
 801706a:	2000      	movs	r0, #0
 801706c:	e7dc      	b.n	8017028 <__ssputs_r+0x58>
 801706e:	462a      	mov	r2, r5
 8017070:	f000 feef 	bl	8017e52 <_realloc_r>
 8017074:	4606      	mov	r6, r0
 8017076:	2800      	cmp	r0, #0
 8017078:	d1e2      	bne.n	8017040 <__ssputs_r+0x70>
 801707a:	6921      	ldr	r1, [r4, #16]
 801707c:	4650      	mov	r0, sl
 801707e:	f7ff feff 	bl	8016e80 <_free_r>
 8017082:	e7c8      	b.n	8017016 <__ssputs_r+0x46>

08017084 <_svfiprintf_r>:
 8017084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017088:	461d      	mov	r5, r3
 801708a:	898b      	ldrh	r3, [r1, #12]
 801708c:	061f      	lsls	r7, r3, #24
 801708e:	b09d      	sub	sp, #116	; 0x74
 8017090:	4680      	mov	r8, r0
 8017092:	460c      	mov	r4, r1
 8017094:	4616      	mov	r6, r2
 8017096:	d50f      	bpl.n	80170b8 <_svfiprintf_r+0x34>
 8017098:	690b      	ldr	r3, [r1, #16]
 801709a:	b96b      	cbnz	r3, 80170b8 <_svfiprintf_r+0x34>
 801709c:	2140      	movs	r1, #64	; 0x40
 801709e:	f7ff ff3d 	bl	8016f1c <_malloc_r>
 80170a2:	6020      	str	r0, [r4, #0]
 80170a4:	6120      	str	r0, [r4, #16]
 80170a6:	b928      	cbnz	r0, 80170b4 <_svfiprintf_r+0x30>
 80170a8:	230c      	movs	r3, #12
 80170aa:	f8c8 3000 	str.w	r3, [r8]
 80170ae:	f04f 30ff 	mov.w	r0, #4294967295
 80170b2:	e0c8      	b.n	8017246 <_svfiprintf_r+0x1c2>
 80170b4:	2340      	movs	r3, #64	; 0x40
 80170b6:	6163      	str	r3, [r4, #20]
 80170b8:	2300      	movs	r3, #0
 80170ba:	9309      	str	r3, [sp, #36]	; 0x24
 80170bc:	2320      	movs	r3, #32
 80170be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170c2:	2330      	movs	r3, #48	; 0x30
 80170c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170c8:	9503      	str	r5, [sp, #12]
 80170ca:	f04f 0b01 	mov.w	fp, #1
 80170ce:	4637      	mov	r7, r6
 80170d0:	463d      	mov	r5, r7
 80170d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80170d6:	b10b      	cbz	r3, 80170dc <_svfiprintf_r+0x58>
 80170d8:	2b25      	cmp	r3, #37	; 0x25
 80170da:	d13e      	bne.n	801715a <_svfiprintf_r+0xd6>
 80170dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80170e0:	d00b      	beq.n	80170fa <_svfiprintf_r+0x76>
 80170e2:	4653      	mov	r3, sl
 80170e4:	4632      	mov	r2, r6
 80170e6:	4621      	mov	r1, r4
 80170e8:	4640      	mov	r0, r8
 80170ea:	f7ff ff71 	bl	8016fd0 <__ssputs_r>
 80170ee:	3001      	adds	r0, #1
 80170f0:	f000 80a4 	beq.w	801723c <_svfiprintf_r+0x1b8>
 80170f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170f6:	4453      	add	r3, sl
 80170f8:	9309      	str	r3, [sp, #36]	; 0x24
 80170fa:	783b      	ldrb	r3, [r7, #0]
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f000 809d 	beq.w	801723c <_svfiprintf_r+0x1b8>
 8017102:	2300      	movs	r3, #0
 8017104:	f04f 32ff 	mov.w	r2, #4294967295
 8017108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801710c:	9304      	str	r3, [sp, #16]
 801710e:	9307      	str	r3, [sp, #28]
 8017110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017114:	931a      	str	r3, [sp, #104]	; 0x68
 8017116:	462f      	mov	r7, r5
 8017118:	2205      	movs	r2, #5
 801711a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801711e:	4850      	ldr	r0, [pc, #320]	; (8017260 <_svfiprintf_r+0x1dc>)
 8017120:	f7e9 f876 	bl	8000210 <memchr>
 8017124:	9b04      	ldr	r3, [sp, #16]
 8017126:	b9d0      	cbnz	r0, 801715e <_svfiprintf_r+0xda>
 8017128:	06d9      	lsls	r1, r3, #27
 801712a:	bf44      	itt	mi
 801712c:	2220      	movmi	r2, #32
 801712e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017132:	071a      	lsls	r2, r3, #28
 8017134:	bf44      	itt	mi
 8017136:	222b      	movmi	r2, #43	; 0x2b
 8017138:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801713c:	782a      	ldrb	r2, [r5, #0]
 801713e:	2a2a      	cmp	r2, #42	; 0x2a
 8017140:	d015      	beq.n	801716e <_svfiprintf_r+0xea>
 8017142:	9a07      	ldr	r2, [sp, #28]
 8017144:	462f      	mov	r7, r5
 8017146:	2000      	movs	r0, #0
 8017148:	250a      	movs	r5, #10
 801714a:	4639      	mov	r1, r7
 801714c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017150:	3b30      	subs	r3, #48	; 0x30
 8017152:	2b09      	cmp	r3, #9
 8017154:	d94d      	bls.n	80171f2 <_svfiprintf_r+0x16e>
 8017156:	b1b8      	cbz	r0, 8017188 <_svfiprintf_r+0x104>
 8017158:	e00f      	b.n	801717a <_svfiprintf_r+0xf6>
 801715a:	462f      	mov	r7, r5
 801715c:	e7b8      	b.n	80170d0 <_svfiprintf_r+0x4c>
 801715e:	4a40      	ldr	r2, [pc, #256]	; (8017260 <_svfiprintf_r+0x1dc>)
 8017160:	1a80      	subs	r0, r0, r2
 8017162:	fa0b f000 	lsl.w	r0, fp, r0
 8017166:	4318      	orrs	r0, r3
 8017168:	9004      	str	r0, [sp, #16]
 801716a:	463d      	mov	r5, r7
 801716c:	e7d3      	b.n	8017116 <_svfiprintf_r+0x92>
 801716e:	9a03      	ldr	r2, [sp, #12]
 8017170:	1d11      	adds	r1, r2, #4
 8017172:	6812      	ldr	r2, [r2, #0]
 8017174:	9103      	str	r1, [sp, #12]
 8017176:	2a00      	cmp	r2, #0
 8017178:	db01      	blt.n	801717e <_svfiprintf_r+0xfa>
 801717a:	9207      	str	r2, [sp, #28]
 801717c:	e004      	b.n	8017188 <_svfiprintf_r+0x104>
 801717e:	4252      	negs	r2, r2
 8017180:	f043 0302 	orr.w	r3, r3, #2
 8017184:	9207      	str	r2, [sp, #28]
 8017186:	9304      	str	r3, [sp, #16]
 8017188:	783b      	ldrb	r3, [r7, #0]
 801718a:	2b2e      	cmp	r3, #46	; 0x2e
 801718c:	d10c      	bne.n	80171a8 <_svfiprintf_r+0x124>
 801718e:	787b      	ldrb	r3, [r7, #1]
 8017190:	2b2a      	cmp	r3, #42	; 0x2a
 8017192:	d133      	bne.n	80171fc <_svfiprintf_r+0x178>
 8017194:	9b03      	ldr	r3, [sp, #12]
 8017196:	1d1a      	adds	r2, r3, #4
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	9203      	str	r2, [sp, #12]
 801719c:	2b00      	cmp	r3, #0
 801719e:	bfb8      	it	lt
 80171a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80171a4:	3702      	adds	r7, #2
 80171a6:	9305      	str	r3, [sp, #20]
 80171a8:	4d2e      	ldr	r5, [pc, #184]	; (8017264 <_svfiprintf_r+0x1e0>)
 80171aa:	7839      	ldrb	r1, [r7, #0]
 80171ac:	2203      	movs	r2, #3
 80171ae:	4628      	mov	r0, r5
 80171b0:	f7e9 f82e 	bl	8000210 <memchr>
 80171b4:	b138      	cbz	r0, 80171c6 <_svfiprintf_r+0x142>
 80171b6:	2340      	movs	r3, #64	; 0x40
 80171b8:	1b40      	subs	r0, r0, r5
 80171ba:	fa03 f000 	lsl.w	r0, r3, r0
 80171be:	9b04      	ldr	r3, [sp, #16]
 80171c0:	4303      	orrs	r3, r0
 80171c2:	3701      	adds	r7, #1
 80171c4:	9304      	str	r3, [sp, #16]
 80171c6:	7839      	ldrb	r1, [r7, #0]
 80171c8:	4827      	ldr	r0, [pc, #156]	; (8017268 <_svfiprintf_r+0x1e4>)
 80171ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171ce:	2206      	movs	r2, #6
 80171d0:	1c7e      	adds	r6, r7, #1
 80171d2:	f7e9 f81d 	bl	8000210 <memchr>
 80171d6:	2800      	cmp	r0, #0
 80171d8:	d038      	beq.n	801724c <_svfiprintf_r+0x1c8>
 80171da:	4b24      	ldr	r3, [pc, #144]	; (801726c <_svfiprintf_r+0x1e8>)
 80171dc:	bb13      	cbnz	r3, 8017224 <_svfiprintf_r+0x1a0>
 80171de:	9b03      	ldr	r3, [sp, #12]
 80171e0:	3307      	adds	r3, #7
 80171e2:	f023 0307 	bic.w	r3, r3, #7
 80171e6:	3308      	adds	r3, #8
 80171e8:	9303      	str	r3, [sp, #12]
 80171ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171ec:	444b      	add	r3, r9
 80171ee:	9309      	str	r3, [sp, #36]	; 0x24
 80171f0:	e76d      	b.n	80170ce <_svfiprintf_r+0x4a>
 80171f2:	fb05 3202 	mla	r2, r5, r2, r3
 80171f6:	2001      	movs	r0, #1
 80171f8:	460f      	mov	r7, r1
 80171fa:	e7a6      	b.n	801714a <_svfiprintf_r+0xc6>
 80171fc:	2300      	movs	r3, #0
 80171fe:	3701      	adds	r7, #1
 8017200:	9305      	str	r3, [sp, #20]
 8017202:	4619      	mov	r1, r3
 8017204:	250a      	movs	r5, #10
 8017206:	4638      	mov	r0, r7
 8017208:	f810 2b01 	ldrb.w	r2, [r0], #1
 801720c:	3a30      	subs	r2, #48	; 0x30
 801720e:	2a09      	cmp	r2, #9
 8017210:	d903      	bls.n	801721a <_svfiprintf_r+0x196>
 8017212:	2b00      	cmp	r3, #0
 8017214:	d0c8      	beq.n	80171a8 <_svfiprintf_r+0x124>
 8017216:	9105      	str	r1, [sp, #20]
 8017218:	e7c6      	b.n	80171a8 <_svfiprintf_r+0x124>
 801721a:	fb05 2101 	mla	r1, r5, r1, r2
 801721e:	2301      	movs	r3, #1
 8017220:	4607      	mov	r7, r0
 8017222:	e7f0      	b.n	8017206 <_svfiprintf_r+0x182>
 8017224:	ab03      	add	r3, sp, #12
 8017226:	9300      	str	r3, [sp, #0]
 8017228:	4622      	mov	r2, r4
 801722a:	4b11      	ldr	r3, [pc, #68]	; (8017270 <_svfiprintf_r+0x1ec>)
 801722c:	a904      	add	r1, sp, #16
 801722e:	4640      	mov	r0, r8
 8017230:	f7fb ffc6 	bl	80131c0 <_printf_float>
 8017234:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017238:	4681      	mov	r9, r0
 801723a:	d1d6      	bne.n	80171ea <_svfiprintf_r+0x166>
 801723c:	89a3      	ldrh	r3, [r4, #12]
 801723e:	065b      	lsls	r3, r3, #25
 8017240:	f53f af35 	bmi.w	80170ae <_svfiprintf_r+0x2a>
 8017244:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017246:	b01d      	add	sp, #116	; 0x74
 8017248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801724c:	ab03      	add	r3, sp, #12
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	4622      	mov	r2, r4
 8017252:	4b07      	ldr	r3, [pc, #28]	; (8017270 <_svfiprintf_r+0x1ec>)
 8017254:	a904      	add	r1, sp, #16
 8017256:	4640      	mov	r0, r8
 8017258:	f7fc fa68 	bl	801372c <_printf_i>
 801725c:	e7ea      	b.n	8017234 <_svfiprintf_r+0x1b0>
 801725e:	bf00      	nop
 8017260:	080188a4 	.word	0x080188a4
 8017264:	080188aa 	.word	0x080188aa
 8017268:	080188ae 	.word	0x080188ae
 801726c:	080131c1 	.word	0x080131c1
 8017270:	08016fd1 	.word	0x08016fd1

08017274 <_sungetc_r>:
 8017274:	b538      	push	{r3, r4, r5, lr}
 8017276:	1c4b      	adds	r3, r1, #1
 8017278:	4614      	mov	r4, r2
 801727a:	d103      	bne.n	8017284 <_sungetc_r+0x10>
 801727c:	f04f 35ff 	mov.w	r5, #4294967295
 8017280:	4628      	mov	r0, r5
 8017282:	bd38      	pop	{r3, r4, r5, pc}
 8017284:	8993      	ldrh	r3, [r2, #12]
 8017286:	f023 0320 	bic.w	r3, r3, #32
 801728a:	8193      	strh	r3, [r2, #12]
 801728c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801728e:	6852      	ldr	r2, [r2, #4]
 8017290:	b2cd      	uxtb	r5, r1
 8017292:	b18b      	cbz	r3, 80172b8 <_sungetc_r+0x44>
 8017294:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017296:	4293      	cmp	r3, r2
 8017298:	dd08      	ble.n	80172ac <_sungetc_r+0x38>
 801729a:	6823      	ldr	r3, [r4, #0]
 801729c:	1e5a      	subs	r2, r3, #1
 801729e:	6022      	str	r2, [r4, #0]
 80172a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80172a4:	6863      	ldr	r3, [r4, #4]
 80172a6:	3301      	adds	r3, #1
 80172a8:	6063      	str	r3, [r4, #4]
 80172aa:	e7e9      	b.n	8017280 <_sungetc_r+0xc>
 80172ac:	4621      	mov	r1, r4
 80172ae:	f000 fd4b 	bl	8017d48 <__submore>
 80172b2:	2800      	cmp	r0, #0
 80172b4:	d0f1      	beq.n	801729a <_sungetc_r+0x26>
 80172b6:	e7e1      	b.n	801727c <_sungetc_r+0x8>
 80172b8:	6921      	ldr	r1, [r4, #16]
 80172ba:	6823      	ldr	r3, [r4, #0]
 80172bc:	b151      	cbz	r1, 80172d4 <_sungetc_r+0x60>
 80172be:	4299      	cmp	r1, r3
 80172c0:	d208      	bcs.n	80172d4 <_sungetc_r+0x60>
 80172c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80172c6:	42a9      	cmp	r1, r5
 80172c8:	d104      	bne.n	80172d4 <_sungetc_r+0x60>
 80172ca:	3b01      	subs	r3, #1
 80172cc:	3201      	adds	r2, #1
 80172ce:	6023      	str	r3, [r4, #0]
 80172d0:	6062      	str	r2, [r4, #4]
 80172d2:	e7d5      	b.n	8017280 <_sungetc_r+0xc>
 80172d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80172d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172dc:	6363      	str	r3, [r4, #52]	; 0x34
 80172de:	2303      	movs	r3, #3
 80172e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80172e2:	4623      	mov	r3, r4
 80172e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80172e8:	6023      	str	r3, [r4, #0]
 80172ea:	2301      	movs	r3, #1
 80172ec:	e7dc      	b.n	80172a8 <_sungetc_r+0x34>

080172ee <__ssrefill_r>:
 80172ee:	b510      	push	{r4, lr}
 80172f0:	460c      	mov	r4, r1
 80172f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80172f4:	b169      	cbz	r1, 8017312 <__ssrefill_r+0x24>
 80172f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172fa:	4299      	cmp	r1, r3
 80172fc:	d001      	beq.n	8017302 <__ssrefill_r+0x14>
 80172fe:	f7ff fdbf 	bl	8016e80 <_free_r>
 8017302:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017304:	6063      	str	r3, [r4, #4]
 8017306:	2000      	movs	r0, #0
 8017308:	6360      	str	r0, [r4, #52]	; 0x34
 801730a:	b113      	cbz	r3, 8017312 <__ssrefill_r+0x24>
 801730c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801730e:	6023      	str	r3, [r4, #0]
 8017310:	bd10      	pop	{r4, pc}
 8017312:	6923      	ldr	r3, [r4, #16]
 8017314:	6023      	str	r3, [r4, #0]
 8017316:	2300      	movs	r3, #0
 8017318:	6063      	str	r3, [r4, #4]
 801731a:	89a3      	ldrh	r3, [r4, #12]
 801731c:	f043 0320 	orr.w	r3, r3, #32
 8017320:	81a3      	strh	r3, [r4, #12]
 8017322:	f04f 30ff 	mov.w	r0, #4294967295
 8017326:	e7f3      	b.n	8017310 <__ssrefill_r+0x22>

08017328 <__ssvfiscanf_r>:
 8017328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801732c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017330:	460c      	mov	r4, r1
 8017332:	2100      	movs	r1, #0
 8017334:	9144      	str	r1, [sp, #272]	; 0x110
 8017336:	9145      	str	r1, [sp, #276]	; 0x114
 8017338:	499f      	ldr	r1, [pc, #636]	; (80175b8 <__ssvfiscanf_r+0x290>)
 801733a:	91a0      	str	r1, [sp, #640]	; 0x280
 801733c:	f10d 0804 	add.w	r8, sp, #4
 8017340:	499e      	ldr	r1, [pc, #632]	; (80175bc <__ssvfiscanf_r+0x294>)
 8017342:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80175c0 <__ssvfiscanf_r+0x298>
 8017346:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801734a:	4606      	mov	r6, r0
 801734c:	4692      	mov	sl, r2
 801734e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017350:	9300      	str	r3, [sp, #0]
 8017352:	270a      	movs	r7, #10
 8017354:	f89a 3000 	ldrb.w	r3, [sl]
 8017358:	2b00      	cmp	r3, #0
 801735a:	f000 812a 	beq.w	80175b2 <__ssvfiscanf_r+0x28a>
 801735e:	4655      	mov	r5, sl
 8017360:	f7ff f8d2 	bl	8016508 <__locale_ctype_ptr>
 8017364:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017368:	4458      	add	r0, fp
 801736a:	7843      	ldrb	r3, [r0, #1]
 801736c:	f013 0308 	ands.w	r3, r3, #8
 8017370:	d01c      	beq.n	80173ac <__ssvfiscanf_r+0x84>
 8017372:	6863      	ldr	r3, [r4, #4]
 8017374:	2b00      	cmp	r3, #0
 8017376:	dd12      	ble.n	801739e <__ssvfiscanf_r+0x76>
 8017378:	f7ff f8c6 	bl	8016508 <__locale_ctype_ptr>
 801737c:	6823      	ldr	r3, [r4, #0]
 801737e:	781a      	ldrb	r2, [r3, #0]
 8017380:	4410      	add	r0, r2
 8017382:	7842      	ldrb	r2, [r0, #1]
 8017384:	0712      	lsls	r2, r2, #28
 8017386:	d401      	bmi.n	801738c <__ssvfiscanf_r+0x64>
 8017388:	46aa      	mov	sl, r5
 801738a:	e7e3      	b.n	8017354 <__ssvfiscanf_r+0x2c>
 801738c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801738e:	3201      	adds	r2, #1
 8017390:	9245      	str	r2, [sp, #276]	; 0x114
 8017392:	6862      	ldr	r2, [r4, #4]
 8017394:	3301      	adds	r3, #1
 8017396:	3a01      	subs	r2, #1
 8017398:	6062      	str	r2, [r4, #4]
 801739a:	6023      	str	r3, [r4, #0]
 801739c:	e7e9      	b.n	8017372 <__ssvfiscanf_r+0x4a>
 801739e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173a0:	4621      	mov	r1, r4
 80173a2:	4630      	mov	r0, r6
 80173a4:	4798      	blx	r3
 80173a6:	2800      	cmp	r0, #0
 80173a8:	d0e6      	beq.n	8017378 <__ssvfiscanf_r+0x50>
 80173aa:	e7ed      	b.n	8017388 <__ssvfiscanf_r+0x60>
 80173ac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80173b0:	f040 8082 	bne.w	80174b8 <__ssvfiscanf_r+0x190>
 80173b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80173b6:	9341      	str	r3, [sp, #260]	; 0x104
 80173b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80173bc:	2b2a      	cmp	r3, #42	; 0x2a
 80173be:	d103      	bne.n	80173c8 <__ssvfiscanf_r+0xa0>
 80173c0:	2310      	movs	r3, #16
 80173c2:	9341      	str	r3, [sp, #260]	; 0x104
 80173c4:	f10a 0502 	add.w	r5, sl, #2
 80173c8:	46aa      	mov	sl, r5
 80173ca:	f815 1b01 	ldrb.w	r1, [r5], #1
 80173ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80173d2:	2a09      	cmp	r2, #9
 80173d4:	d922      	bls.n	801741c <__ssvfiscanf_r+0xf4>
 80173d6:	2203      	movs	r2, #3
 80173d8:	4879      	ldr	r0, [pc, #484]	; (80175c0 <__ssvfiscanf_r+0x298>)
 80173da:	f7e8 ff19 	bl	8000210 <memchr>
 80173de:	b138      	cbz	r0, 80173f0 <__ssvfiscanf_r+0xc8>
 80173e0:	eba0 0309 	sub.w	r3, r0, r9
 80173e4:	2001      	movs	r0, #1
 80173e6:	4098      	lsls	r0, r3
 80173e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80173ea:	4318      	orrs	r0, r3
 80173ec:	9041      	str	r0, [sp, #260]	; 0x104
 80173ee:	46aa      	mov	sl, r5
 80173f0:	f89a 3000 	ldrb.w	r3, [sl]
 80173f4:	2b67      	cmp	r3, #103	; 0x67
 80173f6:	f10a 0501 	add.w	r5, sl, #1
 80173fa:	d82b      	bhi.n	8017454 <__ssvfiscanf_r+0x12c>
 80173fc:	2b65      	cmp	r3, #101	; 0x65
 80173fe:	f080 809f 	bcs.w	8017540 <__ssvfiscanf_r+0x218>
 8017402:	2b47      	cmp	r3, #71	; 0x47
 8017404:	d810      	bhi.n	8017428 <__ssvfiscanf_r+0x100>
 8017406:	2b45      	cmp	r3, #69	; 0x45
 8017408:	f080 809a 	bcs.w	8017540 <__ssvfiscanf_r+0x218>
 801740c:	2b00      	cmp	r3, #0
 801740e:	d06c      	beq.n	80174ea <__ssvfiscanf_r+0x1c2>
 8017410:	2b25      	cmp	r3, #37	; 0x25
 8017412:	d051      	beq.n	80174b8 <__ssvfiscanf_r+0x190>
 8017414:	2303      	movs	r3, #3
 8017416:	9347      	str	r3, [sp, #284]	; 0x11c
 8017418:	9742      	str	r7, [sp, #264]	; 0x108
 801741a:	e027      	b.n	801746c <__ssvfiscanf_r+0x144>
 801741c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801741e:	fb07 1303 	mla	r3, r7, r3, r1
 8017422:	3b30      	subs	r3, #48	; 0x30
 8017424:	9343      	str	r3, [sp, #268]	; 0x10c
 8017426:	e7cf      	b.n	80173c8 <__ssvfiscanf_r+0xa0>
 8017428:	2b5b      	cmp	r3, #91	; 0x5b
 801742a:	d06a      	beq.n	8017502 <__ssvfiscanf_r+0x1da>
 801742c:	d80c      	bhi.n	8017448 <__ssvfiscanf_r+0x120>
 801742e:	2b58      	cmp	r3, #88	; 0x58
 8017430:	d1f0      	bne.n	8017414 <__ssvfiscanf_r+0xec>
 8017432:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017438:	9241      	str	r2, [sp, #260]	; 0x104
 801743a:	2210      	movs	r2, #16
 801743c:	9242      	str	r2, [sp, #264]	; 0x108
 801743e:	2b6e      	cmp	r3, #110	; 0x6e
 8017440:	bf8c      	ite	hi
 8017442:	2304      	movhi	r3, #4
 8017444:	2303      	movls	r3, #3
 8017446:	e010      	b.n	801746a <__ssvfiscanf_r+0x142>
 8017448:	2b63      	cmp	r3, #99	; 0x63
 801744a:	d065      	beq.n	8017518 <__ssvfiscanf_r+0x1f0>
 801744c:	2b64      	cmp	r3, #100	; 0x64
 801744e:	d1e1      	bne.n	8017414 <__ssvfiscanf_r+0xec>
 8017450:	9742      	str	r7, [sp, #264]	; 0x108
 8017452:	e7f4      	b.n	801743e <__ssvfiscanf_r+0x116>
 8017454:	2b70      	cmp	r3, #112	; 0x70
 8017456:	d04b      	beq.n	80174f0 <__ssvfiscanf_r+0x1c8>
 8017458:	d826      	bhi.n	80174a8 <__ssvfiscanf_r+0x180>
 801745a:	2b6e      	cmp	r3, #110	; 0x6e
 801745c:	d062      	beq.n	8017524 <__ssvfiscanf_r+0x1fc>
 801745e:	d84c      	bhi.n	80174fa <__ssvfiscanf_r+0x1d2>
 8017460:	2b69      	cmp	r3, #105	; 0x69
 8017462:	d1d7      	bne.n	8017414 <__ssvfiscanf_r+0xec>
 8017464:	2300      	movs	r3, #0
 8017466:	9342      	str	r3, [sp, #264]	; 0x108
 8017468:	2303      	movs	r3, #3
 801746a:	9347      	str	r3, [sp, #284]	; 0x11c
 801746c:	6863      	ldr	r3, [r4, #4]
 801746e:	2b00      	cmp	r3, #0
 8017470:	dd68      	ble.n	8017544 <__ssvfiscanf_r+0x21c>
 8017472:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017474:	0659      	lsls	r1, r3, #25
 8017476:	d407      	bmi.n	8017488 <__ssvfiscanf_r+0x160>
 8017478:	f7ff f846 	bl	8016508 <__locale_ctype_ptr>
 801747c:	6823      	ldr	r3, [r4, #0]
 801747e:	781a      	ldrb	r2, [r3, #0]
 8017480:	4410      	add	r0, r2
 8017482:	7842      	ldrb	r2, [r0, #1]
 8017484:	0712      	lsls	r2, r2, #28
 8017486:	d464      	bmi.n	8017552 <__ssvfiscanf_r+0x22a>
 8017488:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801748a:	2b02      	cmp	r3, #2
 801748c:	dc73      	bgt.n	8017576 <__ssvfiscanf_r+0x24e>
 801748e:	466b      	mov	r3, sp
 8017490:	4622      	mov	r2, r4
 8017492:	a941      	add	r1, sp, #260	; 0x104
 8017494:	4630      	mov	r0, r6
 8017496:	f000 f9d7 	bl	8017848 <_scanf_chars>
 801749a:	2801      	cmp	r0, #1
 801749c:	f000 8089 	beq.w	80175b2 <__ssvfiscanf_r+0x28a>
 80174a0:	2802      	cmp	r0, #2
 80174a2:	f47f af71 	bne.w	8017388 <__ssvfiscanf_r+0x60>
 80174a6:	e01d      	b.n	80174e4 <__ssvfiscanf_r+0x1bc>
 80174a8:	2b75      	cmp	r3, #117	; 0x75
 80174aa:	d0d1      	beq.n	8017450 <__ssvfiscanf_r+0x128>
 80174ac:	2b78      	cmp	r3, #120	; 0x78
 80174ae:	d0c0      	beq.n	8017432 <__ssvfiscanf_r+0x10a>
 80174b0:	2b73      	cmp	r3, #115	; 0x73
 80174b2:	d1af      	bne.n	8017414 <__ssvfiscanf_r+0xec>
 80174b4:	2302      	movs	r3, #2
 80174b6:	e7d8      	b.n	801746a <__ssvfiscanf_r+0x142>
 80174b8:	6863      	ldr	r3, [r4, #4]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	dd0c      	ble.n	80174d8 <__ssvfiscanf_r+0x1b0>
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	781a      	ldrb	r2, [r3, #0]
 80174c2:	455a      	cmp	r2, fp
 80174c4:	d175      	bne.n	80175b2 <__ssvfiscanf_r+0x28a>
 80174c6:	3301      	adds	r3, #1
 80174c8:	6862      	ldr	r2, [r4, #4]
 80174ca:	6023      	str	r3, [r4, #0]
 80174cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80174ce:	3a01      	subs	r2, #1
 80174d0:	3301      	adds	r3, #1
 80174d2:	6062      	str	r2, [r4, #4]
 80174d4:	9345      	str	r3, [sp, #276]	; 0x114
 80174d6:	e757      	b.n	8017388 <__ssvfiscanf_r+0x60>
 80174d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174da:	4621      	mov	r1, r4
 80174dc:	4630      	mov	r0, r6
 80174de:	4798      	blx	r3
 80174e0:	2800      	cmp	r0, #0
 80174e2:	d0ec      	beq.n	80174be <__ssvfiscanf_r+0x196>
 80174e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80174e6:	2800      	cmp	r0, #0
 80174e8:	d159      	bne.n	801759e <__ssvfiscanf_r+0x276>
 80174ea:	f04f 30ff 	mov.w	r0, #4294967295
 80174ee:	e05c      	b.n	80175aa <__ssvfiscanf_r+0x282>
 80174f0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80174f2:	f042 0220 	orr.w	r2, r2, #32
 80174f6:	9241      	str	r2, [sp, #260]	; 0x104
 80174f8:	e79b      	b.n	8017432 <__ssvfiscanf_r+0x10a>
 80174fa:	2308      	movs	r3, #8
 80174fc:	9342      	str	r3, [sp, #264]	; 0x108
 80174fe:	2304      	movs	r3, #4
 8017500:	e7b3      	b.n	801746a <__ssvfiscanf_r+0x142>
 8017502:	4629      	mov	r1, r5
 8017504:	4640      	mov	r0, r8
 8017506:	f000 fb4f 	bl	8017ba8 <__sccl>
 801750a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801750c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017510:	9341      	str	r3, [sp, #260]	; 0x104
 8017512:	4605      	mov	r5, r0
 8017514:	2301      	movs	r3, #1
 8017516:	e7a8      	b.n	801746a <__ssvfiscanf_r+0x142>
 8017518:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801751a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801751e:	9341      	str	r3, [sp, #260]	; 0x104
 8017520:	2300      	movs	r3, #0
 8017522:	e7a2      	b.n	801746a <__ssvfiscanf_r+0x142>
 8017524:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017526:	06c3      	lsls	r3, r0, #27
 8017528:	f53f af2e 	bmi.w	8017388 <__ssvfiscanf_r+0x60>
 801752c:	9b00      	ldr	r3, [sp, #0]
 801752e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017530:	1d19      	adds	r1, r3, #4
 8017532:	9100      	str	r1, [sp, #0]
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	07c0      	lsls	r0, r0, #31
 8017538:	bf4c      	ite	mi
 801753a:	801a      	strhmi	r2, [r3, #0]
 801753c:	601a      	strpl	r2, [r3, #0]
 801753e:	e723      	b.n	8017388 <__ssvfiscanf_r+0x60>
 8017540:	2305      	movs	r3, #5
 8017542:	e792      	b.n	801746a <__ssvfiscanf_r+0x142>
 8017544:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017546:	4621      	mov	r1, r4
 8017548:	4630      	mov	r0, r6
 801754a:	4798      	blx	r3
 801754c:	2800      	cmp	r0, #0
 801754e:	d090      	beq.n	8017472 <__ssvfiscanf_r+0x14a>
 8017550:	e7c8      	b.n	80174e4 <__ssvfiscanf_r+0x1bc>
 8017552:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017554:	3201      	adds	r2, #1
 8017556:	9245      	str	r2, [sp, #276]	; 0x114
 8017558:	6862      	ldr	r2, [r4, #4]
 801755a:	3a01      	subs	r2, #1
 801755c:	2a00      	cmp	r2, #0
 801755e:	6062      	str	r2, [r4, #4]
 8017560:	dd02      	ble.n	8017568 <__ssvfiscanf_r+0x240>
 8017562:	3301      	adds	r3, #1
 8017564:	6023      	str	r3, [r4, #0]
 8017566:	e787      	b.n	8017478 <__ssvfiscanf_r+0x150>
 8017568:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801756a:	4621      	mov	r1, r4
 801756c:	4630      	mov	r0, r6
 801756e:	4798      	blx	r3
 8017570:	2800      	cmp	r0, #0
 8017572:	d081      	beq.n	8017478 <__ssvfiscanf_r+0x150>
 8017574:	e7b6      	b.n	80174e4 <__ssvfiscanf_r+0x1bc>
 8017576:	2b04      	cmp	r3, #4
 8017578:	dc06      	bgt.n	8017588 <__ssvfiscanf_r+0x260>
 801757a:	466b      	mov	r3, sp
 801757c:	4622      	mov	r2, r4
 801757e:	a941      	add	r1, sp, #260	; 0x104
 8017580:	4630      	mov	r0, r6
 8017582:	f000 f9c5 	bl	8017910 <_scanf_i>
 8017586:	e788      	b.n	801749a <__ssvfiscanf_r+0x172>
 8017588:	4b0e      	ldr	r3, [pc, #56]	; (80175c4 <__ssvfiscanf_r+0x29c>)
 801758a:	2b00      	cmp	r3, #0
 801758c:	f43f aefc 	beq.w	8017388 <__ssvfiscanf_r+0x60>
 8017590:	466b      	mov	r3, sp
 8017592:	4622      	mov	r2, r4
 8017594:	a941      	add	r1, sp, #260	; 0x104
 8017596:	4630      	mov	r0, r6
 8017598:	f7fc f9da 	bl	8013950 <_scanf_float>
 801759c:	e77d      	b.n	801749a <__ssvfiscanf_r+0x172>
 801759e:	89a3      	ldrh	r3, [r4, #12]
 80175a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80175a4:	bf18      	it	ne
 80175a6:	f04f 30ff 	movne.w	r0, #4294967295
 80175aa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80175ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80175b4:	e7f9      	b.n	80175aa <__ssvfiscanf_r+0x282>
 80175b6:	bf00      	nop
 80175b8:	08017275 	.word	0x08017275
 80175bc:	080172ef 	.word	0x080172ef
 80175c0:	080188aa 	.word	0x080188aa
 80175c4:	08013951 	.word	0x08013951

080175c8 <__sfputc_r>:
 80175c8:	6893      	ldr	r3, [r2, #8]
 80175ca:	3b01      	subs	r3, #1
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	b410      	push	{r4}
 80175d0:	6093      	str	r3, [r2, #8]
 80175d2:	da08      	bge.n	80175e6 <__sfputc_r+0x1e>
 80175d4:	6994      	ldr	r4, [r2, #24]
 80175d6:	42a3      	cmp	r3, r4
 80175d8:	db01      	blt.n	80175de <__sfputc_r+0x16>
 80175da:	290a      	cmp	r1, #10
 80175dc:	d103      	bne.n	80175e6 <__sfputc_r+0x1e>
 80175de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175e2:	f7fd bbc7 	b.w	8014d74 <__swbuf_r>
 80175e6:	6813      	ldr	r3, [r2, #0]
 80175e8:	1c58      	adds	r0, r3, #1
 80175ea:	6010      	str	r0, [r2, #0]
 80175ec:	7019      	strb	r1, [r3, #0]
 80175ee:	4608      	mov	r0, r1
 80175f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80175f4:	4770      	bx	lr

080175f6 <__sfputs_r>:
 80175f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80175f8:	4606      	mov	r6, r0
 80175fa:	460f      	mov	r7, r1
 80175fc:	4614      	mov	r4, r2
 80175fe:	18d5      	adds	r5, r2, r3
 8017600:	42ac      	cmp	r4, r5
 8017602:	d101      	bne.n	8017608 <__sfputs_r+0x12>
 8017604:	2000      	movs	r0, #0
 8017606:	e007      	b.n	8017618 <__sfputs_r+0x22>
 8017608:	463a      	mov	r2, r7
 801760a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801760e:	4630      	mov	r0, r6
 8017610:	f7ff ffda 	bl	80175c8 <__sfputc_r>
 8017614:	1c43      	adds	r3, r0, #1
 8017616:	d1f3      	bne.n	8017600 <__sfputs_r+0xa>
 8017618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801761c <_vfiprintf_r>:
 801761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017620:	460c      	mov	r4, r1
 8017622:	b09d      	sub	sp, #116	; 0x74
 8017624:	4617      	mov	r7, r2
 8017626:	461d      	mov	r5, r3
 8017628:	4606      	mov	r6, r0
 801762a:	b118      	cbz	r0, 8017634 <_vfiprintf_r+0x18>
 801762c:	6983      	ldr	r3, [r0, #24]
 801762e:	b90b      	cbnz	r3, 8017634 <_vfiprintf_r+0x18>
 8017630:	f7fe fbb6 	bl	8015da0 <__sinit>
 8017634:	4b7c      	ldr	r3, [pc, #496]	; (8017828 <_vfiprintf_r+0x20c>)
 8017636:	429c      	cmp	r4, r3
 8017638:	d158      	bne.n	80176ec <_vfiprintf_r+0xd0>
 801763a:	6874      	ldr	r4, [r6, #4]
 801763c:	89a3      	ldrh	r3, [r4, #12]
 801763e:	0718      	lsls	r0, r3, #28
 8017640:	d55e      	bpl.n	8017700 <_vfiprintf_r+0xe4>
 8017642:	6923      	ldr	r3, [r4, #16]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d05b      	beq.n	8017700 <_vfiprintf_r+0xe4>
 8017648:	2300      	movs	r3, #0
 801764a:	9309      	str	r3, [sp, #36]	; 0x24
 801764c:	2320      	movs	r3, #32
 801764e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017652:	2330      	movs	r3, #48	; 0x30
 8017654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017658:	9503      	str	r5, [sp, #12]
 801765a:	f04f 0b01 	mov.w	fp, #1
 801765e:	46b8      	mov	r8, r7
 8017660:	4645      	mov	r5, r8
 8017662:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017666:	b10b      	cbz	r3, 801766c <_vfiprintf_r+0x50>
 8017668:	2b25      	cmp	r3, #37	; 0x25
 801766a:	d154      	bne.n	8017716 <_vfiprintf_r+0xfa>
 801766c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017670:	d00b      	beq.n	801768a <_vfiprintf_r+0x6e>
 8017672:	4653      	mov	r3, sl
 8017674:	463a      	mov	r2, r7
 8017676:	4621      	mov	r1, r4
 8017678:	4630      	mov	r0, r6
 801767a:	f7ff ffbc 	bl	80175f6 <__sfputs_r>
 801767e:	3001      	adds	r0, #1
 8017680:	f000 80c2 	beq.w	8017808 <_vfiprintf_r+0x1ec>
 8017684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017686:	4453      	add	r3, sl
 8017688:	9309      	str	r3, [sp, #36]	; 0x24
 801768a:	f898 3000 	ldrb.w	r3, [r8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	f000 80ba 	beq.w	8017808 <_vfiprintf_r+0x1ec>
 8017694:	2300      	movs	r3, #0
 8017696:	f04f 32ff 	mov.w	r2, #4294967295
 801769a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801769e:	9304      	str	r3, [sp, #16]
 80176a0:	9307      	str	r3, [sp, #28]
 80176a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80176a6:	931a      	str	r3, [sp, #104]	; 0x68
 80176a8:	46a8      	mov	r8, r5
 80176aa:	2205      	movs	r2, #5
 80176ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80176b0:	485e      	ldr	r0, [pc, #376]	; (801782c <_vfiprintf_r+0x210>)
 80176b2:	f7e8 fdad 	bl	8000210 <memchr>
 80176b6:	9b04      	ldr	r3, [sp, #16]
 80176b8:	bb78      	cbnz	r0, 801771a <_vfiprintf_r+0xfe>
 80176ba:	06d9      	lsls	r1, r3, #27
 80176bc:	bf44      	itt	mi
 80176be:	2220      	movmi	r2, #32
 80176c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176c4:	071a      	lsls	r2, r3, #28
 80176c6:	bf44      	itt	mi
 80176c8:	222b      	movmi	r2, #43	; 0x2b
 80176ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80176ce:	782a      	ldrb	r2, [r5, #0]
 80176d0:	2a2a      	cmp	r2, #42	; 0x2a
 80176d2:	d02a      	beq.n	801772a <_vfiprintf_r+0x10e>
 80176d4:	9a07      	ldr	r2, [sp, #28]
 80176d6:	46a8      	mov	r8, r5
 80176d8:	2000      	movs	r0, #0
 80176da:	250a      	movs	r5, #10
 80176dc:	4641      	mov	r1, r8
 80176de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80176e2:	3b30      	subs	r3, #48	; 0x30
 80176e4:	2b09      	cmp	r3, #9
 80176e6:	d969      	bls.n	80177bc <_vfiprintf_r+0x1a0>
 80176e8:	b360      	cbz	r0, 8017744 <_vfiprintf_r+0x128>
 80176ea:	e024      	b.n	8017736 <_vfiprintf_r+0x11a>
 80176ec:	4b50      	ldr	r3, [pc, #320]	; (8017830 <_vfiprintf_r+0x214>)
 80176ee:	429c      	cmp	r4, r3
 80176f0:	d101      	bne.n	80176f6 <_vfiprintf_r+0xda>
 80176f2:	68b4      	ldr	r4, [r6, #8]
 80176f4:	e7a2      	b.n	801763c <_vfiprintf_r+0x20>
 80176f6:	4b4f      	ldr	r3, [pc, #316]	; (8017834 <_vfiprintf_r+0x218>)
 80176f8:	429c      	cmp	r4, r3
 80176fa:	bf08      	it	eq
 80176fc:	68f4      	ldreq	r4, [r6, #12]
 80176fe:	e79d      	b.n	801763c <_vfiprintf_r+0x20>
 8017700:	4621      	mov	r1, r4
 8017702:	4630      	mov	r0, r6
 8017704:	f7fd fb9a 	bl	8014e3c <__swsetup_r>
 8017708:	2800      	cmp	r0, #0
 801770a:	d09d      	beq.n	8017648 <_vfiprintf_r+0x2c>
 801770c:	f04f 30ff 	mov.w	r0, #4294967295
 8017710:	b01d      	add	sp, #116	; 0x74
 8017712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017716:	46a8      	mov	r8, r5
 8017718:	e7a2      	b.n	8017660 <_vfiprintf_r+0x44>
 801771a:	4a44      	ldr	r2, [pc, #272]	; (801782c <_vfiprintf_r+0x210>)
 801771c:	1a80      	subs	r0, r0, r2
 801771e:	fa0b f000 	lsl.w	r0, fp, r0
 8017722:	4318      	orrs	r0, r3
 8017724:	9004      	str	r0, [sp, #16]
 8017726:	4645      	mov	r5, r8
 8017728:	e7be      	b.n	80176a8 <_vfiprintf_r+0x8c>
 801772a:	9a03      	ldr	r2, [sp, #12]
 801772c:	1d11      	adds	r1, r2, #4
 801772e:	6812      	ldr	r2, [r2, #0]
 8017730:	9103      	str	r1, [sp, #12]
 8017732:	2a00      	cmp	r2, #0
 8017734:	db01      	blt.n	801773a <_vfiprintf_r+0x11e>
 8017736:	9207      	str	r2, [sp, #28]
 8017738:	e004      	b.n	8017744 <_vfiprintf_r+0x128>
 801773a:	4252      	negs	r2, r2
 801773c:	f043 0302 	orr.w	r3, r3, #2
 8017740:	9207      	str	r2, [sp, #28]
 8017742:	9304      	str	r3, [sp, #16]
 8017744:	f898 3000 	ldrb.w	r3, [r8]
 8017748:	2b2e      	cmp	r3, #46	; 0x2e
 801774a:	d10e      	bne.n	801776a <_vfiprintf_r+0x14e>
 801774c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017750:	2b2a      	cmp	r3, #42	; 0x2a
 8017752:	d138      	bne.n	80177c6 <_vfiprintf_r+0x1aa>
 8017754:	9b03      	ldr	r3, [sp, #12]
 8017756:	1d1a      	adds	r2, r3, #4
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	9203      	str	r2, [sp, #12]
 801775c:	2b00      	cmp	r3, #0
 801775e:	bfb8      	it	lt
 8017760:	f04f 33ff 	movlt.w	r3, #4294967295
 8017764:	f108 0802 	add.w	r8, r8, #2
 8017768:	9305      	str	r3, [sp, #20]
 801776a:	4d33      	ldr	r5, [pc, #204]	; (8017838 <_vfiprintf_r+0x21c>)
 801776c:	f898 1000 	ldrb.w	r1, [r8]
 8017770:	2203      	movs	r2, #3
 8017772:	4628      	mov	r0, r5
 8017774:	f7e8 fd4c 	bl	8000210 <memchr>
 8017778:	b140      	cbz	r0, 801778c <_vfiprintf_r+0x170>
 801777a:	2340      	movs	r3, #64	; 0x40
 801777c:	1b40      	subs	r0, r0, r5
 801777e:	fa03 f000 	lsl.w	r0, r3, r0
 8017782:	9b04      	ldr	r3, [sp, #16]
 8017784:	4303      	orrs	r3, r0
 8017786:	f108 0801 	add.w	r8, r8, #1
 801778a:	9304      	str	r3, [sp, #16]
 801778c:	f898 1000 	ldrb.w	r1, [r8]
 8017790:	482a      	ldr	r0, [pc, #168]	; (801783c <_vfiprintf_r+0x220>)
 8017792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017796:	2206      	movs	r2, #6
 8017798:	f108 0701 	add.w	r7, r8, #1
 801779c:	f7e8 fd38 	bl	8000210 <memchr>
 80177a0:	2800      	cmp	r0, #0
 80177a2:	d037      	beq.n	8017814 <_vfiprintf_r+0x1f8>
 80177a4:	4b26      	ldr	r3, [pc, #152]	; (8017840 <_vfiprintf_r+0x224>)
 80177a6:	bb1b      	cbnz	r3, 80177f0 <_vfiprintf_r+0x1d4>
 80177a8:	9b03      	ldr	r3, [sp, #12]
 80177aa:	3307      	adds	r3, #7
 80177ac:	f023 0307 	bic.w	r3, r3, #7
 80177b0:	3308      	adds	r3, #8
 80177b2:	9303      	str	r3, [sp, #12]
 80177b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b6:	444b      	add	r3, r9
 80177b8:	9309      	str	r3, [sp, #36]	; 0x24
 80177ba:	e750      	b.n	801765e <_vfiprintf_r+0x42>
 80177bc:	fb05 3202 	mla	r2, r5, r2, r3
 80177c0:	2001      	movs	r0, #1
 80177c2:	4688      	mov	r8, r1
 80177c4:	e78a      	b.n	80176dc <_vfiprintf_r+0xc0>
 80177c6:	2300      	movs	r3, #0
 80177c8:	f108 0801 	add.w	r8, r8, #1
 80177cc:	9305      	str	r3, [sp, #20]
 80177ce:	4619      	mov	r1, r3
 80177d0:	250a      	movs	r5, #10
 80177d2:	4640      	mov	r0, r8
 80177d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80177d8:	3a30      	subs	r2, #48	; 0x30
 80177da:	2a09      	cmp	r2, #9
 80177dc:	d903      	bls.n	80177e6 <_vfiprintf_r+0x1ca>
 80177de:	2b00      	cmp	r3, #0
 80177e0:	d0c3      	beq.n	801776a <_vfiprintf_r+0x14e>
 80177e2:	9105      	str	r1, [sp, #20]
 80177e4:	e7c1      	b.n	801776a <_vfiprintf_r+0x14e>
 80177e6:	fb05 2101 	mla	r1, r5, r1, r2
 80177ea:	2301      	movs	r3, #1
 80177ec:	4680      	mov	r8, r0
 80177ee:	e7f0      	b.n	80177d2 <_vfiprintf_r+0x1b6>
 80177f0:	ab03      	add	r3, sp, #12
 80177f2:	9300      	str	r3, [sp, #0]
 80177f4:	4622      	mov	r2, r4
 80177f6:	4b13      	ldr	r3, [pc, #76]	; (8017844 <_vfiprintf_r+0x228>)
 80177f8:	a904      	add	r1, sp, #16
 80177fa:	4630      	mov	r0, r6
 80177fc:	f7fb fce0 	bl	80131c0 <_printf_float>
 8017800:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017804:	4681      	mov	r9, r0
 8017806:	d1d5      	bne.n	80177b4 <_vfiprintf_r+0x198>
 8017808:	89a3      	ldrh	r3, [r4, #12]
 801780a:	065b      	lsls	r3, r3, #25
 801780c:	f53f af7e 	bmi.w	801770c <_vfiprintf_r+0xf0>
 8017810:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017812:	e77d      	b.n	8017710 <_vfiprintf_r+0xf4>
 8017814:	ab03      	add	r3, sp, #12
 8017816:	9300      	str	r3, [sp, #0]
 8017818:	4622      	mov	r2, r4
 801781a:	4b0a      	ldr	r3, [pc, #40]	; (8017844 <_vfiprintf_r+0x228>)
 801781c:	a904      	add	r1, sp, #16
 801781e:	4630      	mov	r0, r6
 8017820:	f7fb ff84 	bl	801372c <_printf_i>
 8017824:	e7ec      	b.n	8017800 <_vfiprintf_r+0x1e4>
 8017826:	bf00      	nop
 8017828:	08018758 	.word	0x08018758
 801782c:	080188a4 	.word	0x080188a4
 8017830:	08018778 	.word	0x08018778
 8017834:	08018738 	.word	0x08018738
 8017838:	080188aa 	.word	0x080188aa
 801783c:	080188ae 	.word	0x080188ae
 8017840:	080131c1 	.word	0x080131c1
 8017844:	080175f7 	.word	0x080175f7

08017848 <_scanf_chars>:
 8017848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801784c:	4615      	mov	r5, r2
 801784e:	688a      	ldr	r2, [r1, #8]
 8017850:	4680      	mov	r8, r0
 8017852:	460c      	mov	r4, r1
 8017854:	b932      	cbnz	r2, 8017864 <_scanf_chars+0x1c>
 8017856:	698a      	ldr	r2, [r1, #24]
 8017858:	2a00      	cmp	r2, #0
 801785a:	bf14      	ite	ne
 801785c:	f04f 32ff 	movne.w	r2, #4294967295
 8017860:	2201      	moveq	r2, #1
 8017862:	608a      	str	r2, [r1, #8]
 8017864:	6822      	ldr	r2, [r4, #0]
 8017866:	06d1      	lsls	r1, r2, #27
 8017868:	bf5f      	itttt	pl
 801786a:	681a      	ldrpl	r2, [r3, #0]
 801786c:	1d11      	addpl	r1, r2, #4
 801786e:	6019      	strpl	r1, [r3, #0]
 8017870:	6817      	ldrpl	r7, [r2, #0]
 8017872:	2600      	movs	r6, #0
 8017874:	69a3      	ldr	r3, [r4, #24]
 8017876:	b1db      	cbz	r3, 80178b0 <_scanf_chars+0x68>
 8017878:	2b01      	cmp	r3, #1
 801787a:	d107      	bne.n	801788c <_scanf_chars+0x44>
 801787c:	682b      	ldr	r3, [r5, #0]
 801787e:	6962      	ldr	r2, [r4, #20]
 8017880:	781b      	ldrb	r3, [r3, #0]
 8017882:	5cd3      	ldrb	r3, [r2, r3]
 8017884:	b9a3      	cbnz	r3, 80178b0 <_scanf_chars+0x68>
 8017886:	2e00      	cmp	r6, #0
 8017888:	d132      	bne.n	80178f0 <_scanf_chars+0xa8>
 801788a:	e006      	b.n	801789a <_scanf_chars+0x52>
 801788c:	2b02      	cmp	r3, #2
 801788e:	d007      	beq.n	80178a0 <_scanf_chars+0x58>
 8017890:	2e00      	cmp	r6, #0
 8017892:	d12d      	bne.n	80178f0 <_scanf_chars+0xa8>
 8017894:	69a3      	ldr	r3, [r4, #24]
 8017896:	2b01      	cmp	r3, #1
 8017898:	d12a      	bne.n	80178f0 <_scanf_chars+0xa8>
 801789a:	2001      	movs	r0, #1
 801789c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178a0:	f7fe fe32 	bl	8016508 <__locale_ctype_ptr>
 80178a4:	682b      	ldr	r3, [r5, #0]
 80178a6:	781b      	ldrb	r3, [r3, #0]
 80178a8:	4418      	add	r0, r3
 80178aa:	7843      	ldrb	r3, [r0, #1]
 80178ac:	071b      	lsls	r3, r3, #28
 80178ae:	d4ef      	bmi.n	8017890 <_scanf_chars+0x48>
 80178b0:	6823      	ldr	r3, [r4, #0]
 80178b2:	06da      	lsls	r2, r3, #27
 80178b4:	bf5e      	ittt	pl
 80178b6:	682b      	ldrpl	r3, [r5, #0]
 80178b8:	781b      	ldrbpl	r3, [r3, #0]
 80178ba:	703b      	strbpl	r3, [r7, #0]
 80178bc:	682a      	ldr	r2, [r5, #0]
 80178be:	686b      	ldr	r3, [r5, #4]
 80178c0:	f102 0201 	add.w	r2, r2, #1
 80178c4:	602a      	str	r2, [r5, #0]
 80178c6:	68a2      	ldr	r2, [r4, #8]
 80178c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80178cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80178d0:	606b      	str	r3, [r5, #4]
 80178d2:	f106 0601 	add.w	r6, r6, #1
 80178d6:	bf58      	it	pl
 80178d8:	3701      	addpl	r7, #1
 80178da:	60a2      	str	r2, [r4, #8]
 80178dc:	b142      	cbz	r2, 80178f0 <_scanf_chars+0xa8>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	dcc8      	bgt.n	8017874 <_scanf_chars+0x2c>
 80178e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80178e6:	4629      	mov	r1, r5
 80178e8:	4640      	mov	r0, r8
 80178ea:	4798      	blx	r3
 80178ec:	2800      	cmp	r0, #0
 80178ee:	d0c1      	beq.n	8017874 <_scanf_chars+0x2c>
 80178f0:	6823      	ldr	r3, [r4, #0]
 80178f2:	f013 0310 	ands.w	r3, r3, #16
 80178f6:	d105      	bne.n	8017904 <_scanf_chars+0xbc>
 80178f8:	68e2      	ldr	r2, [r4, #12]
 80178fa:	3201      	adds	r2, #1
 80178fc:	60e2      	str	r2, [r4, #12]
 80178fe:	69a2      	ldr	r2, [r4, #24]
 8017900:	b102      	cbz	r2, 8017904 <_scanf_chars+0xbc>
 8017902:	703b      	strb	r3, [r7, #0]
 8017904:	6923      	ldr	r3, [r4, #16]
 8017906:	441e      	add	r6, r3
 8017908:	6126      	str	r6, [r4, #16]
 801790a:	2000      	movs	r0, #0
 801790c:	e7c6      	b.n	801789c <_scanf_chars+0x54>
	...

08017910 <_scanf_i>:
 8017910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017914:	469a      	mov	sl, r3
 8017916:	4b74      	ldr	r3, [pc, #464]	; (8017ae8 <_scanf_i+0x1d8>)
 8017918:	460c      	mov	r4, r1
 801791a:	4683      	mov	fp, r0
 801791c:	4616      	mov	r6, r2
 801791e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017922:	b087      	sub	sp, #28
 8017924:	ab03      	add	r3, sp, #12
 8017926:	68a7      	ldr	r7, [r4, #8]
 8017928:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801792c:	4b6f      	ldr	r3, [pc, #444]	; (8017aec <_scanf_i+0x1dc>)
 801792e:	69a1      	ldr	r1, [r4, #24]
 8017930:	4a6f      	ldr	r2, [pc, #444]	; (8017af0 <_scanf_i+0x1e0>)
 8017932:	2903      	cmp	r1, #3
 8017934:	bf08      	it	eq
 8017936:	461a      	moveq	r2, r3
 8017938:	1e7b      	subs	r3, r7, #1
 801793a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801793e:	bf84      	itt	hi
 8017940:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017944:	60a3      	strhi	r3, [r4, #8]
 8017946:	6823      	ldr	r3, [r4, #0]
 8017948:	9200      	str	r2, [sp, #0]
 801794a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801794e:	bf88      	it	hi
 8017950:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017954:	f104 091c 	add.w	r9, r4, #28
 8017958:	6023      	str	r3, [r4, #0]
 801795a:	bf8c      	ite	hi
 801795c:	197f      	addhi	r7, r7, r5
 801795e:	2700      	movls	r7, #0
 8017960:	464b      	mov	r3, r9
 8017962:	f04f 0800 	mov.w	r8, #0
 8017966:	9301      	str	r3, [sp, #4]
 8017968:	6831      	ldr	r1, [r6, #0]
 801796a:	ab03      	add	r3, sp, #12
 801796c:	2202      	movs	r2, #2
 801796e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017972:	7809      	ldrb	r1, [r1, #0]
 8017974:	f7e8 fc4c 	bl	8000210 <memchr>
 8017978:	9b01      	ldr	r3, [sp, #4]
 801797a:	b330      	cbz	r0, 80179ca <_scanf_i+0xba>
 801797c:	f1b8 0f01 	cmp.w	r8, #1
 8017980:	d15a      	bne.n	8017a38 <_scanf_i+0x128>
 8017982:	6862      	ldr	r2, [r4, #4]
 8017984:	b92a      	cbnz	r2, 8017992 <_scanf_i+0x82>
 8017986:	6822      	ldr	r2, [r4, #0]
 8017988:	2108      	movs	r1, #8
 801798a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801798e:	6061      	str	r1, [r4, #4]
 8017990:	6022      	str	r2, [r4, #0]
 8017992:	6822      	ldr	r2, [r4, #0]
 8017994:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017998:	6022      	str	r2, [r4, #0]
 801799a:	68a2      	ldr	r2, [r4, #8]
 801799c:	1e51      	subs	r1, r2, #1
 801799e:	60a1      	str	r1, [r4, #8]
 80179a0:	b19a      	cbz	r2, 80179ca <_scanf_i+0xba>
 80179a2:	6832      	ldr	r2, [r6, #0]
 80179a4:	1c51      	adds	r1, r2, #1
 80179a6:	6031      	str	r1, [r6, #0]
 80179a8:	7812      	ldrb	r2, [r2, #0]
 80179aa:	701a      	strb	r2, [r3, #0]
 80179ac:	1c5d      	adds	r5, r3, #1
 80179ae:	6873      	ldr	r3, [r6, #4]
 80179b0:	3b01      	subs	r3, #1
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	6073      	str	r3, [r6, #4]
 80179b6:	dc07      	bgt.n	80179c8 <_scanf_i+0xb8>
 80179b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179bc:	4631      	mov	r1, r6
 80179be:	4658      	mov	r0, fp
 80179c0:	4798      	blx	r3
 80179c2:	2800      	cmp	r0, #0
 80179c4:	f040 8086 	bne.w	8017ad4 <_scanf_i+0x1c4>
 80179c8:	462b      	mov	r3, r5
 80179ca:	f108 0801 	add.w	r8, r8, #1
 80179ce:	f1b8 0f03 	cmp.w	r8, #3
 80179d2:	d1c8      	bne.n	8017966 <_scanf_i+0x56>
 80179d4:	6862      	ldr	r2, [r4, #4]
 80179d6:	b90a      	cbnz	r2, 80179dc <_scanf_i+0xcc>
 80179d8:	220a      	movs	r2, #10
 80179da:	6062      	str	r2, [r4, #4]
 80179dc:	6862      	ldr	r2, [r4, #4]
 80179de:	4945      	ldr	r1, [pc, #276]	; (8017af4 <_scanf_i+0x1e4>)
 80179e0:	6960      	ldr	r0, [r4, #20]
 80179e2:	9301      	str	r3, [sp, #4]
 80179e4:	1a89      	subs	r1, r1, r2
 80179e6:	f000 f8df 	bl	8017ba8 <__sccl>
 80179ea:	9b01      	ldr	r3, [sp, #4]
 80179ec:	f04f 0800 	mov.w	r8, #0
 80179f0:	461d      	mov	r5, r3
 80179f2:	68a3      	ldr	r3, [r4, #8]
 80179f4:	6822      	ldr	r2, [r4, #0]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d03a      	beq.n	8017a70 <_scanf_i+0x160>
 80179fa:	6831      	ldr	r1, [r6, #0]
 80179fc:	6960      	ldr	r0, [r4, #20]
 80179fe:	f891 c000 	ldrb.w	ip, [r1]
 8017a02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017a06:	2800      	cmp	r0, #0
 8017a08:	d032      	beq.n	8017a70 <_scanf_i+0x160>
 8017a0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017a0e:	d121      	bne.n	8017a54 <_scanf_i+0x144>
 8017a10:	0510      	lsls	r0, r2, #20
 8017a12:	d51f      	bpl.n	8017a54 <_scanf_i+0x144>
 8017a14:	f108 0801 	add.w	r8, r8, #1
 8017a18:	b117      	cbz	r7, 8017a20 <_scanf_i+0x110>
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	3f01      	subs	r7, #1
 8017a1e:	60a3      	str	r3, [r4, #8]
 8017a20:	6873      	ldr	r3, [r6, #4]
 8017a22:	3b01      	subs	r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	6073      	str	r3, [r6, #4]
 8017a28:	dd1b      	ble.n	8017a62 <_scanf_i+0x152>
 8017a2a:	6833      	ldr	r3, [r6, #0]
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	6033      	str	r3, [r6, #0]
 8017a30:	68a3      	ldr	r3, [r4, #8]
 8017a32:	3b01      	subs	r3, #1
 8017a34:	60a3      	str	r3, [r4, #8]
 8017a36:	e7dc      	b.n	80179f2 <_scanf_i+0xe2>
 8017a38:	f1b8 0f02 	cmp.w	r8, #2
 8017a3c:	d1ad      	bne.n	801799a <_scanf_i+0x8a>
 8017a3e:	6822      	ldr	r2, [r4, #0]
 8017a40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017a44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017a48:	d1bf      	bne.n	80179ca <_scanf_i+0xba>
 8017a4a:	2110      	movs	r1, #16
 8017a4c:	6061      	str	r1, [r4, #4]
 8017a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017a52:	e7a1      	b.n	8017998 <_scanf_i+0x88>
 8017a54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017a58:	6022      	str	r2, [r4, #0]
 8017a5a:	780b      	ldrb	r3, [r1, #0]
 8017a5c:	702b      	strb	r3, [r5, #0]
 8017a5e:	3501      	adds	r5, #1
 8017a60:	e7de      	b.n	8017a20 <_scanf_i+0x110>
 8017a62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017a66:	4631      	mov	r1, r6
 8017a68:	4658      	mov	r0, fp
 8017a6a:	4798      	blx	r3
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	d0df      	beq.n	8017a30 <_scanf_i+0x120>
 8017a70:	6823      	ldr	r3, [r4, #0]
 8017a72:	05d9      	lsls	r1, r3, #23
 8017a74:	d50c      	bpl.n	8017a90 <_scanf_i+0x180>
 8017a76:	454d      	cmp	r5, r9
 8017a78:	d908      	bls.n	8017a8c <_scanf_i+0x17c>
 8017a7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017a82:	4632      	mov	r2, r6
 8017a84:	4658      	mov	r0, fp
 8017a86:	4798      	blx	r3
 8017a88:	1e6f      	subs	r7, r5, #1
 8017a8a:	463d      	mov	r5, r7
 8017a8c:	454d      	cmp	r5, r9
 8017a8e:	d029      	beq.n	8017ae4 <_scanf_i+0x1d4>
 8017a90:	6822      	ldr	r2, [r4, #0]
 8017a92:	f012 0210 	ands.w	r2, r2, #16
 8017a96:	d113      	bne.n	8017ac0 <_scanf_i+0x1b0>
 8017a98:	702a      	strb	r2, [r5, #0]
 8017a9a:	6863      	ldr	r3, [r4, #4]
 8017a9c:	9e00      	ldr	r6, [sp, #0]
 8017a9e:	4649      	mov	r1, r9
 8017aa0:	4658      	mov	r0, fp
 8017aa2:	47b0      	blx	r6
 8017aa4:	f8da 3000 	ldr.w	r3, [sl]
 8017aa8:	6821      	ldr	r1, [r4, #0]
 8017aaa:	1d1a      	adds	r2, r3, #4
 8017aac:	f8ca 2000 	str.w	r2, [sl]
 8017ab0:	f011 0f20 	tst.w	r1, #32
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	d010      	beq.n	8017ada <_scanf_i+0x1ca>
 8017ab8:	6018      	str	r0, [r3, #0]
 8017aba:	68e3      	ldr	r3, [r4, #12]
 8017abc:	3301      	adds	r3, #1
 8017abe:	60e3      	str	r3, [r4, #12]
 8017ac0:	eba5 0509 	sub.w	r5, r5, r9
 8017ac4:	44a8      	add	r8, r5
 8017ac6:	6925      	ldr	r5, [r4, #16]
 8017ac8:	4445      	add	r5, r8
 8017aca:	6125      	str	r5, [r4, #16]
 8017acc:	2000      	movs	r0, #0
 8017ace:	b007      	add	sp, #28
 8017ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ad4:	f04f 0800 	mov.w	r8, #0
 8017ad8:	e7ca      	b.n	8017a70 <_scanf_i+0x160>
 8017ada:	07ca      	lsls	r2, r1, #31
 8017adc:	bf4c      	ite	mi
 8017ade:	8018      	strhmi	r0, [r3, #0]
 8017ae0:	6018      	strpl	r0, [r3, #0]
 8017ae2:	e7ea      	b.n	8017aba <_scanf_i+0x1aa>
 8017ae4:	2001      	movs	r0, #1
 8017ae6:	e7f2      	b.n	8017ace <_scanf_i+0x1be>
 8017ae8:	08018400 	.word	0x08018400
 8017aec:	08014d11 	.word	0x08014d11
 8017af0:	08017d25 	.word	0x08017d25
 8017af4:	080188c5 	.word	0x080188c5

08017af8 <_putc_r>:
 8017af8:	b570      	push	{r4, r5, r6, lr}
 8017afa:	460d      	mov	r5, r1
 8017afc:	4614      	mov	r4, r2
 8017afe:	4606      	mov	r6, r0
 8017b00:	b118      	cbz	r0, 8017b0a <_putc_r+0x12>
 8017b02:	6983      	ldr	r3, [r0, #24]
 8017b04:	b90b      	cbnz	r3, 8017b0a <_putc_r+0x12>
 8017b06:	f7fe f94b 	bl	8015da0 <__sinit>
 8017b0a:	4b13      	ldr	r3, [pc, #76]	; (8017b58 <_putc_r+0x60>)
 8017b0c:	429c      	cmp	r4, r3
 8017b0e:	d112      	bne.n	8017b36 <_putc_r+0x3e>
 8017b10:	6874      	ldr	r4, [r6, #4]
 8017b12:	68a3      	ldr	r3, [r4, #8]
 8017b14:	3b01      	subs	r3, #1
 8017b16:	2b00      	cmp	r3, #0
 8017b18:	60a3      	str	r3, [r4, #8]
 8017b1a:	da16      	bge.n	8017b4a <_putc_r+0x52>
 8017b1c:	69a2      	ldr	r2, [r4, #24]
 8017b1e:	4293      	cmp	r3, r2
 8017b20:	db02      	blt.n	8017b28 <_putc_r+0x30>
 8017b22:	b2eb      	uxtb	r3, r5
 8017b24:	2b0a      	cmp	r3, #10
 8017b26:	d110      	bne.n	8017b4a <_putc_r+0x52>
 8017b28:	4622      	mov	r2, r4
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	4630      	mov	r0, r6
 8017b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b32:	f7fd b91f 	b.w	8014d74 <__swbuf_r>
 8017b36:	4b09      	ldr	r3, [pc, #36]	; (8017b5c <_putc_r+0x64>)
 8017b38:	429c      	cmp	r4, r3
 8017b3a:	d101      	bne.n	8017b40 <_putc_r+0x48>
 8017b3c:	68b4      	ldr	r4, [r6, #8]
 8017b3e:	e7e8      	b.n	8017b12 <_putc_r+0x1a>
 8017b40:	4b07      	ldr	r3, [pc, #28]	; (8017b60 <_putc_r+0x68>)
 8017b42:	429c      	cmp	r4, r3
 8017b44:	bf08      	it	eq
 8017b46:	68f4      	ldreq	r4, [r6, #12]
 8017b48:	e7e3      	b.n	8017b12 <_putc_r+0x1a>
 8017b4a:	6823      	ldr	r3, [r4, #0]
 8017b4c:	1c5a      	adds	r2, r3, #1
 8017b4e:	6022      	str	r2, [r4, #0]
 8017b50:	701d      	strb	r5, [r3, #0]
 8017b52:	b2e8      	uxtb	r0, r5
 8017b54:	bd70      	pop	{r4, r5, r6, pc}
 8017b56:	bf00      	nop
 8017b58:	08018758 	.word	0x08018758
 8017b5c:	08018778 	.word	0x08018778
 8017b60:	08018738 	.word	0x08018738

08017b64 <_read_r>:
 8017b64:	b538      	push	{r3, r4, r5, lr}
 8017b66:	4c07      	ldr	r4, [pc, #28]	; (8017b84 <_read_r+0x20>)
 8017b68:	4605      	mov	r5, r0
 8017b6a:	4608      	mov	r0, r1
 8017b6c:	4611      	mov	r1, r2
 8017b6e:	2200      	movs	r2, #0
 8017b70:	6022      	str	r2, [r4, #0]
 8017b72:	461a      	mov	r2, r3
 8017b74:	f7ee f8ce 	bl	8005d14 <_read>
 8017b78:	1c43      	adds	r3, r0, #1
 8017b7a:	d102      	bne.n	8017b82 <_read_r+0x1e>
 8017b7c:	6823      	ldr	r3, [r4, #0]
 8017b7e:	b103      	cbz	r3, 8017b82 <_read_r+0x1e>
 8017b80:	602b      	str	r3, [r5, #0]
 8017b82:	bd38      	pop	{r3, r4, r5, pc}
 8017b84:	20037fa4 	.word	0x20037fa4

08017b88 <_sbrk_r>:
 8017b88:	b538      	push	{r3, r4, r5, lr}
 8017b8a:	4c06      	ldr	r4, [pc, #24]	; (8017ba4 <_sbrk_r+0x1c>)
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	4605      	mov	r5, r0
 8017b90:	4608      	mov	r0, r1
 8017b92:	6023      	str	r3, [r4, #0]
 8017b94:	f7ee f910 	bl	8005db8 <_sbrk>
 8017b98:	1c43      	adds	r3, r0, #1
 8017b9a:	d102      	bne.n	8017ba2 <_sbrk_r+0x1a>
 8017b9c:	6823      	ldr	r3, [r4, #0]
 8017b9e:	b103      	cbz	r3, 8017ba2 <_sbrk_r+0x1a>
 8017ba0:	602b      	str	r3, [r5, #0]
 8017ba2:	bd38      	pop	{r3, r4, r5, pc}
 8017ba4:	20037fa4 	.word	0x20037fa4

08017ba8 <__sccl>:
 8017ba8:	b570      	push	{r4, r5, r6, lr}
 8017baa:	780b      	ldrb	r3, [r1, #0]
 8017bac:	2b5e      	cmp	r3, #94	; 0x5e
 8017bae:	bf13      	iteet	ne
 8017bb0:	1c4a      	addne	r2, r1, #1
 8017bb2:	1c8a      	addeq	r2, r1, #2
 8017bb4:	784b      	ldrbeq	r3, [r1, #1]
 8017bb6:	2100      	movne	r1, #0
 8017bb8:	bf08      	it	eq
 8017bba:	2101      	moveq	r1, #1
 8017bbc:	1e44      	subs	r4, r0, #1
 8017bbe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017bc2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017bc6:	42ac      	cmp	r4, r5
 8017bc8:	d1fb      	bne.n	8017bc2 <__sccl+0x1a>
 8017bca:	b913      	cbnz	r3, 8017bd2 <__sccl+0x2a>
 8017bcc:	3a01      	subs	r2, #1
 8017bce:	4610      	mov	r0, r2
 8017bd0:	bd70      	pop	{r4, r5, r6, pc}
 8017bd2:	f081 0401 	eor.w	r4, r1, #1
 8017bd6:	54c4      	strb	r4, [r0, r3]
 8017bd8:	1c51      	adds	r1, r2, #1
 8017bda:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017bde:	2d2d      	cmp	r5, #45	; 0x2d
 8017be0:	f101 36ff 	add.w	r6, r1, #4294967295
 8017be4:	460a      	mov	r2, r1
 8017be6:	d006      	beq.n	8017bf6 <__sccl+0x4e>
 8017be8:	2d5d      	cmp	r5, #93	; 0x5d
 8017bea:	d0f0      	beq.n	8017bce <__sccl+0x26>
 8017bec:	b90d      	cbnz	r5, 8017bf2 <__sccl+0x4a>
 8017bee:	4632      	mov	r2, r6
 8017bf0:	e7ed      	b.n	8017bce <__sccl+0x26>
 8017bf2:	462b      	mov	r3, r5
 8017bf4:	e7ef      	b.n	8017bd6 <__sccl+0x2e>
 8017bf6:	780e      	ldrb	r6, [r1, #0]
 8017bf8:	2e5d      	cmp	r6, #93	; 0x5d
 8017bfa:	d0fa      	beq.n	8017bf2 <__sccl+0x4a>
 8017bfc:	42b3      	cmp	r3, r6
 8017bfe:	dcf8      	bgt.n	8017bf2 <__sccl+0x4a>
 8017c00:	3301      	adds	r3, #1
 8017c02:	429e      	cmp	r6, r3
 8017c04:	54c4      	strb	r4, [r0, r3]
 8017c06:	dcfb      	bgt.n	8017c00 <__sccl+0x58>
 8017c08:	3102      	adds	r1, #2
 8017c0a:	e7e6      	b.n	8017bda <__sccl+0x32>

08017c0c <strncmp>:
 8017c0c:	b510      	push	{r4, lr}
 8017c0e:	b16a      	cbz	r2, 8017c2c <strncmp+0x20>
 8017c10:	3901      	subs	r1, #1
 8017c12:	1884      	adds	r4, r0, r2
 8017c14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017c18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	d103      	bne.n	8017c28 <strncmp+0x1c>
 8017c20:	42a0      	cmp	r0, r4
 8017c22:	d001      	beq.n	8017c28 <strncmp+0x1c>
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d1f5      	bne.n	8017c14 <strncmp+0x8>
 8017c28:	1a98      	subs	r0, r3, r2
 8017c2a:	bd10      	pop	{r4, pc}
 8017c2c:	4610      	mov	r0, r2
 8017c2e:	e7fc      	b.n	8017c2a <strncmp+0x1e>

08017c30 <_strtoul_l.isra.0>:
 8017c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c34:	4680      	mov	r8, r0
 8017c36:	4689      	mov	r9, r1
 8017c38:	4692      	mov	sl, r2
 8017c3a:	461e      	mov	r6, r3
 8017c3c:	460f      	mov	r7, r1
 8017c3e:	463d      	mov	r5, r7
 8017c40:	9808      	ldr	r0, [sp, #32]
 8017c42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017c46:	f7fe fc5b 	bl	8016500 <__locale_ctype_ptr_l>
 8017c4a:	4420      	add	r0, r4
 8017c4c:	7843      	ldrb	r3, [r0, #1]
 8017c4e:	f013 0308 	ands.w	r3, r3, #8
 8017c52:	d130      	bne.n	8017cb6 <_strtoul_l.isra.0+0x86>
 8017c54:	2c2d      	cmp	r4, #45	; 0x2d
 8017c56:	d130      	bne.n	8017cba <_strtoul_l.isra.0+0x8a>
 8017c58:	787c      	ldrb	r4, [r7, #1]
 8017c5a:	1cbd      	adds	r5, r7, #2
 8017c5c:	2101      	movs	r1, #1
 8017c5e:	2e00      	cmp	r6, #0
 8017c60:	d05c      	beq.n	8017d1c <_strtoul_l.isra.0+0xec>
 8017c62:	2e10      	cmp	r6, #16
 8017c64:	d109      	bne.n	8017c7a <_strtoul_l.isra.0+0x4a>
 8017c66:	2c30      	cmp	r4, #48	; 0x30
 8017c68:	d107      	bne.n	8017c7a <_strtoul_l.isra.0+0x4a>
 8017c6a:	782b      	ldrb	r3, [r5, #0]
 8017c6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017c70:	2b58      	cmp	r3, #88	; 0x58
 8017c72:	d14e      	bne.n	8017d12 <_strtoul_l.isra.0+0xe2>
 8017c74:	786c      	ldrb	r4, [r5, #1]
 8017c76:	2610      	movs	r6, #16
 8017c78:	3502      	adds	r5, #2
 8017c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017c7e:	2300      	movs	r3, #0
 8017c80:	fbb2 f2f6 	udiv	r2, r2, r6
 8017c84:	fb06 fc02 	mul.w	ip, r6, r2
 8017c88:	ea6f 0c0c 	mvn.w	ip, ip
 8017c8c:	4618      	mov	r0, r3
 8017c8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017c92:	2f09      	cmp	r7, #9
 8017c94:	d817      	bhi.n	8017cc6 <_strtoul_l.isra.0+0x96>
 8017c96:	463c      	mov	r4, r7
 8017c98:	42a6      	cmp	r6, r4
 8017c9a:	dd23      	ble.n	8017ce4 <_strtoul_l.isra.0+0xb4>
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	db1e      	blt.n	8017cde <_strtoul_l.isra.0+0xae>
 8017ca0:	4282      	cmp	r2, r0
 8017ca2:	d31c      	bcc.n	8017cde <_strtoul_l.isra.0+0xae>
 8017ca4:	d101      	bne.n	8017caa <_strtoul_l.isra.0+0x7a>
 8017ca6:	45a4      	cmp	ip, r4
 8017ca8:	db19      	blt.n	8017cde <_strtoul_l.isra.0+0xae>
 8017caa:	fb00 4006 	mla	r0, r0, r6, r4
 8017cae:	2301      	movs	r3, #1
 8017cb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017cb4:	e7eb      	b.n	8017c8e <_strtoul_l.isra.0+0x5e>
 8017cb6:	462f      	mov	r7, r5
 8017cb8:	e7c1      	b.n	8017c3e <_strtoul_l.isra.0+0xe>
 8017cba:	2c2b      	cmp	r4, #43	; 0x2b
 8017cbc:	bf04      	itt	eq
 8017cbe:	1cbd      	addeq	r5, r7, #2
 8017cc0:	787c      	ldrbeq	r4, [r7, #1]
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	e7cb      	b.n	8017c5e <_strtoul_l.isra.0+0x2e>
 8017cc6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017cca:	2f19      	cmp	r7, #25
 8017ccc:	d801      	bhi.n	8017cd2 <_strtoul_l.isra.0+0xa2>
 8017cce:	3c37      	subs	r4, #55	; 0x37
 8017cd0:	e7e2      	b.n	8017c98 <_strtoul_l.isra.0+0x68>
 8017cd2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017cd6:	2f19      	cmp	r7, #25
 8017cd8:	d804      	bhi.n	8017ce4 <_strtoul_l.isra.0+0xb4>
 8017cda:	3c57      	subs	r4, #87	; 0x57
 8017cdc:	e7dc      	b.n	8017c98 <_strtoul_l.isra.0+0x68>
 8017cde:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce2:	e7e5      	b.n	8017cb0 <_strtoul_l.isra.0+0x80>
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	da09      	bge.n	8017cfc <_strtoul_l.isra.0+0xcc>
 8017ce8:	2322      	movs	r3, #34	; 0x22
 8017cea:	f8c8 3000 	str.w	r3, [r8]
 8017cee:	f04f 30ff 	mov.w	r0, #4294967295
 8017cf2:	f1ba 0f00 	cmp.w	sl, #0
 8017cf6:	d107      	bne.n	8017d08 <_strtoul_l.isra.0+0xd8>
 8017cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017cfc:	b101      	cbz	r1, 8017d00 <_strtoul_l.isra.0+0xd0>
 8017cfe:	4240      	negs	r0, r0
 8017d00:	f1ba 0f00 	cmp.w	sl, #0
 8017d04:	d0f8      	beq.n	8017cf8 <_strtoul_l.isra.0+0xc8>
 8017d06:	b10b      	cbz	r3, 8017d0c <_strtoul_l.isra.0+0xdc>
 8017d08:	f105 39ff 	add.w	r9, r5, #4294967295
 8017d0c:	f8ca 9000 	str.w	r9, [sl]
 8017d10:	e7f2      	b.n	8017cf8 <_strtoul_l.isra.0+0xc8>
 8017d12:	2430      	movs	r4, #48	; 0x30
 8017d14:	2e00      	cmp	r6, #0
 8017d16:	d1b0      	bne.n	8017c7a <_strtoul_l.isra.0+0x4a>
 8017d18:	2608      	movs	r6, #8
 8017d1a:	e7ae      	b.n	8017c7a <_strtoul_l.isra.0+0x4a>
 8017d1c:	2c30      	cmp	r4, #48	; 0x30
 8017d1e:	d0a4      	beq.n	8017c6a <_strtoul_l.isra.0+0x3a>
 8017d20:	260a      	movs	r6, #10
 8017d22:	e7aa      	b.n	8017c7a <_strtoul_l.isra.0+0x4a>

08017d24 <_strtoul_r>:
 8017d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017d26:	4c06      	ldr	r4, [pc, #24]	; (8017d40 <_strtoul_r+0x1c>)
 8017d28:	4d06      	ldr	r5, [pc, #24]	; (8017d44 <_strtoul_r+0x20>)
 8017d2a:	6824      	ldr	r4, [r4, #0]
 8017d2c:	6a24      	ldr	r4, [r4, #32]
 8017d2e:	2c00      	cmp	r4, #0
 8017d30:	bf08      	it	eq
 8017d32:	462c      	moveq	r4, r5
 8017d34:	9400      	str	r4, [sp, #0]
 8017d36:	f7ff ff7b 	bl	8017c30 <_strtoul_l.isra.0>
 8017d3a:	b003      	add	sp, #12
 8017d3c:	bd30      	pop	{r4, r5, pc}
 8017d3e:	bf00      	nop
 8017d40:	2000000c 	.word	0x2000000c
 8017d44:	20000070 	.word	0x20000070

08017d48 <__submore>:
 8017d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d4c:	460c      	mov	r4, r1
 8017d4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d54:	4299      	cmp	r1, r3
 8017d56:	d11d      	bne.n	8017d94 <__submore+0x4c>
 8017d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017d5c:	f7ff f8de 	bl	8016f1c <_malloc_r>
 8017d60:	b918      	cbnz	r0, 8017d6a <__submore+0x22>
 8017d62:	f04f 30ff 	mov.w	r0, #4294967295
 8017d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017d70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017d74:	6360      	str	r0, [r4, #52]	; 0x34
 8017d76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017d7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017d7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017d82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017d86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017d8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017d8e:	6020      	str	r0, [r4, #0]
 8017d90:	2000      	movs	r0, #0
 8017d92:	e7e8      	b.n	8017d66 <__submore+0x1e>
 8017d94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017d96:	0077      	lsls	r7, r6, #1
 8017d98:	463a      	mov	r2, r7
 8017d9a:	f000 f85a 	bl	8017e52 <_realloc_r>
 8017d9e:	4605      	mov	r5, r0
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d0de      	beq.n	8017d62 <__submore+0x1a>
 8017da4:	eb00 0806 	add.w	r8, r0, r6
 8017da8:	4601      	mov	r1, r0
 8017daa:	4632      	mov	r2, r6
 8017dac:	4640      	mov	r0, r8
 8017dae:	f7fb f95f 	bl	8013070 <memcpy>
 8017db2:	f8c4 8000 	str.w	r8, [r4]
 8017db6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017dba:	e7e9      	b.n	8017d90 <__submore+0x48>

08017dbc <__ascii_wctomb>:
 8017dbc:	b149      	cbz	r1, 8017dd2 <__ascii_wctomb+0x16>
 8017dbe:	2aff      	cmp	r2, #255	; 0xff
 8017dc0:	bf85      	ittet	hi
 8017dc2:	238a      	movhi	r3, #138	; 0x8a
 8017dc4:	6003      	strhi	r3, [r0, #0]
 8017dc6:	700a      	strbls	r2, [r1, #0]
 8017dc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8017dcc:	bf98      	it	ls
 8017dce:	2001      	movls	r0, #1
 8017dd0:	4770      	bx	lr
 8017dd2:	4608      	mov	r0, r1
 8017dd4:	4770      	bx	lr
	...

08017dd8 <_fstat_r>:
 8017dd8:	b538      	push	{r3, r4, r5, lr}
 8017dda:	4c07      	ldr	r4, [pc, #28]	; (8017df8 <_fstat_r+0x20>)
 8017ddc:	2300      	movs	r3, #0
 8017dde:	4605      	mov	r5, r0
 8017de0:	4608      	mov	r0, r1
 8017de2:	4611      	mov	r1, r2
 8017de4:	6023      	str	r3, [r4, #0]
 8017de6:	f7ed ffbe 	bl	8005d66 <_fstat>
 8017dea:	1c43      	adds	r3, r0, #1
 8017dec:	d102      	bne.n	8017df4 <_fstat_r+0x1c>
 8017dee:	6823      	ldr	r3, [r4, #0]
 8017df0:	b103      	cbz	r3, 8017df4 <_fstat_r+0x1c>
 8017df2:	602b      	str	r3, [r5, #0]
 8017df4:	bd38      	pop	{r3, r4, r5, pc}
 8017df6:	bf00      	nop
 8017df8:	20037fa4 	.word	0x20037fa4

08017dfc <_isatty_r>:
 8017dfc:	b538      	push	{r3, r4, r5, lr}
 8017dfe:	4c06      	ldr	r4, [pc, #24]	; (8017e18 <_isatty_r+0x1c>)
 8017e00:	2300      	movs	r3, #0
 8017e02:	4605      	mov	r5, r0
 8017e04:	4608      	mov	r0, r1
 8017e06:	6023      	str	r3, [r4, #0]
 8017e08:	f7ed ffbd 	bl	8005d86 <_isatty>
 8017e0c:	1c43      	adds	r3, r0, #1
 8017e0e:	d102      	bne.n	8017e16 <_isatty_r+0x1a>
 8017e10:	6823      	ldr	r3, [r4, #0]
 8017e12:	b103      	cbz	r3, 8017e16 <_isatty_r+0x1a>
 8017e14:	602b      	str	r3, [r5, #0]
 8017e16:	bd38      	pop	{r3, r4, r5, pc}
 8017e18:	20037fa4 	.word	0x20037fa4

08017e1c <memmove>:
 8017e1c:	4288      	cmp	r0, r1
 8017e1e:	b510      	push	{r4, lr}
 8017e20:	eb01 0302 	add.w	r3, r1, r2
 8017e24:	d807      	bhi.n	8017e36 <memmove+0x1a>
 8017e26:	1e42      	subs	r2, r0, #1
 8017e28:	4299      	cmp	r1, r3
 8017e2a:	d00a      	beq.n	8017e42 <memmove+0x26>
 8017e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017e30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017e34:	e7f8      	b.n	8017e28 <memmove+0xc>
 8017e36:	4283      	cmp	r3, r0
 8017e38:	d9f5      	bls.n	8017e26 <memmove+0xa>
 8017e3a:	1881      	adds	r1, r0, r2
 8017e3c:	1ad2      	subs	r2, r2, r3
 8017e3e:	42d3      	cmn	r3, r2
 8017e40:	d100      	bne.n	8017e44 <memmove+0x28>
 8017e42:	bd10      	pop	{r4, pc}
 8017e44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017e4c:	e7f7      	b.n	8017e3e <memmove+0x22>

08017e4e <__malloc_lock>:
 8017e4e:	4770      	bx	lr

08017e50 <__malloc_unlock>:
 8017e50:	4770      	bx	lr

08017e52 <_realloc_r>:
 8017e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e54:	4607      	mov	r7, r0
 8017e56:	4614      	mov	r4, r2
 8017e58:	460e      	mov	r6, r1
 8017e5a:	b921      	cbnz	r1, 8017e66 <_realloc_r+0x14>
 8017e5c:	4611      	mov	r1, r2
 8017e5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e62:	f7ff b85b 	b.w	8016f1c <_malloc_r>
 8017e66:	b922      	cbnz	r2, 8017e72 <_realloc_r+0x20>
 8017e68:	f7ff f80a 	bl	8016e80 <_free_r>
 8017e6c:	4625      	mov	r5, r4
 8017e6e:	4628      	mov	r0, r5
 8017e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e72:	f000 f814 	bl	8017e9e <_malloc_usable_size_r>
 8017e76:	42a0      	cmp	r0, r4
 8017e78:	d20f      	bcs.n	8017e9a <_realloc_r+0x48>
 8017e7a:	4621      	mov	r1, r4
 8017e7c:	4638      	mov	r0, r7
 8017e7e:	f7ff f84d 	bl	8016f1c <_malloc_r>
 8017e82:	4605      	mov	r5, r0
 8017e84:	2800      	cmp	r0, #0
 8017e86:	d0f2      	beq.n	8017e6e <_realloc_r+0x1c>
 8017e88:	4631      	mov	r1, r6
 8017e8a:	4622      	mov	r2, r4
 8017e8c:	f7fb f8f0 	bl	8013070 <memcpy>
 8017e90:	4631      	mov	r1, r6
 8017e92:	4638      	mov	r0, r7
 8017e94:	f7fe fff4 	bl	8016e80 <_free_r>
 8017e98:	e7e9      	b.n	8017e6e <_realloc_r+0x1c>
 8017e9a:	4635      	mov	r5, r6
 8017e9c:	e7e7      	b.n	8017e6e <_realloc_r+0x1c>

08017e9e <_malloc_usable_size_r>:
 8017e9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017ea2:	1f18      	subs	r0, r3, #4
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	bfbc      	itt	lt
 8017ea8:	580b      	ldrlt	r3, [r1, r0]
 8017eaa:	18c0      	addlt	r0, r0, r3
 8017eac:	4770      	bx	lr
	...

08017eb0 <_init>:
 8017eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017eb2:	bf00      	nop
 8017eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017eb6:	bc08      	pop	{r3}
 8017eb8:	469e      	mov	lr, r3
 8017eba:	4770      	bx	lr

08017ebc <_fini>:
 8017ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ebe:	bf00      	nop
 8017ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ec2:	bc08      	pop	{r3}
 8017ec4:	469e      	mov	lr, r3
 8017ec6:	4770      	bx	lr
