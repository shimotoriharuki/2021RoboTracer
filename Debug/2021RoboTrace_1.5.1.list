
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e08  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b0c  08017fc8  08017fc8  00027fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018ad4  08018ad4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018ad4  08018ad4  00028ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018adc  08018adc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018adc  08018adc  00028adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018ae4  08018ae4  00028ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018ae8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00037dc8  200001e0  08018cc4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20037fa8  08018cc4  00037fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003845c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007ae6  00000000  00000000  00068668  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002238  00000000  00000000  00070150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f68  00000000  00000000  00072388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003776a  00000000  00000000  000742f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025d43  00000000  00000000  000aba5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110c10  00000000  00000000  000d179d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e23ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6a4  00000000  00000000  001e2428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017fb0 	.word	0x08017fb0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017fb0 	.word	0x08017fb0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 ff3c 	bl	8008e54 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20035a9c 	.word	0x20035a9c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 ff24 	bl	8008e54 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20035a9c 	.word	0x20035a9c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 fdad 	bl	8008b80 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f006 fb14 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f006 fb0e 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fb08 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f006 fb02 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f006 fafc 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f006 faf6 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f006 faf0 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f006 faea 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f006 fae4 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f006 fade 	bl	8007654 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f006 fad2 	bl	8007654 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f006 facc 	bl	8007654 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fe99 	bl	8014e60 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011ac:	213c      	movs	r1, #60	; 0x3c
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <_ZN7Encoder4initEv+0x30>)
 80011b0:	f00b fce8 	bl	800cb84 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4808      	ldr	r0, [pc, #32]	; (80011d8 <_ZN7Encoder4initEv+0x34>)
 80011b8:	f00b fce4 	bl	800cb84 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011bc:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_ZN7Encoder4initEv+0x38>)
 80011be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011c4:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <_ZN7Encoder4initEv+0x3c>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20035cf0 	.word	0x20035cf0
 80011d8:	200359d4 	.word	0x200359d4
 80011dc:	40010000 	.word	0x40010000
 80011e0:	40010400 	.word	0x40010400
 80011e4:	00000000 	.word	0x00000000

080011e8 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011e8:	b5b0      	push	{r4, r5, r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f0:	4b6f      	ldr	r3, [pc, #444]	; (80013b0 <_ZN7Encoder9updateCntEv+0x1c8>)
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	ee07 3a90 	vmov	s15, r3
 80011f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011fc:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001200:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001204:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800120c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001210:	4b6a      	ldr	r3, [pc, #424]	; (80013bc <_ZN7Encoder9updateCntEv+0x1d4>)
 8001212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80013b4 <_ZN7Encoder9updateCntEv+0x1cc>
 8001220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001224:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80013b8 <_ZN7Encoder9updateCntEv+0x1d0>
 8001228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800122c:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4a63      	ldr	r2, [pc, #396]	; (80013c0 <_ZN7Encoder9updateCntEv+0x1d8>)
 8001234:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f99d 	bl	8000578 <__aeabi_f2d>
 800123e:	a356      	add	r3, pc, #344	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f9f0 	bl	8000628 <__aeabi_dmul>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4625      	mov	r5, r4
 800124e:	461c      	mov	r4, r3
 8001250:	4b5c      	ldr	r3, [pc, #368]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f98f 	bl	8000578 <__aeabi_f2d>
 800125a:	a351      	add	r3, pc, #324	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff f9e2 	bl	8000628 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4620      	mov	r0, r4
 800126a:	4629      	mov	r1, r5
 800126c:	f7ff f826 	bl	80002bc <__adddf3>
 8001270:	4603      	mov	r3, r0
 8001272:	460c      	mov	r4, r1
 8001274:	4618      	mov	r0, r3
 8001276:	4621      	mov	r1, r4
 8001278:	f7ff fcce 	bl	8000c18 <__aeabi_d2f>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f977 	bl	8000578 <__aeabi_f2d>
 800128a:	a343      	add	r3, pc, #268	; (adr r3, 8001398 <_ZN7Encoder9updateCntEv+0x1b0>)
 800128c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001290:	f7ff f9ca 	bl	8000628 <__aeabi_dmul>
 8001294:	4603      	mov	r3, r0
 8001296:	460c      	mov	r4, r1
 8001298:	4625      	mov	r5, r4
 800129a:	461c      	mov	r4, r3
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f969 	bl	8000578 <__aeabi_f2d>
 80012a6:	a33e      	add	r3, pc, #248	; (adr r3, 80013a0 <_ZN7Encoder9updateCntEv+0x1b8>)
 80012a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ac:	f7ff f9bc 	bl	8000628 <__aeabi_dmul>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7ff f800 	bl	80002bc <__adddf3>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fca8 	bl	8000c18 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a3e      	ldr	r2, [pc, #248]	; (80013cc <_ZN7Encoder9updateCntEv+0x1e4>)
 80012d4:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a3a      	ldr	r2, [pc, #232]	; (80013c4 <_ZN7Encoder9updateCntEv+0x1dc>)
 80012dc:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a39      	ldr	r2, [pc, #228]	; (80013c8 <_ZN7Encoder9updateCntEv+0x1e0>)
 80012e4:	6013      	str	r3, [r2, #0]


	total_cnt_l_ += cnt_l_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	ed93 7a03 	vldr	s14, [r3, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edc3 7a03 	vstr	s15, [r3, #12]
	total_cnt_r_ += cnt_r_;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	edd3 7a01 	vldr	s15, [r3, #4]
 8001308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	edc3 7a04 	vstr	s15, [r3, #16]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a01 	vldr	s15, [r3, #4]
 800131e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001322:	ee17 0a90 	vmov	r0, s15
 8001326:	f7ff f927 	bl	8000578 <__aeabi_f2d>
 800132a:	a31f      	add	r3, pc, #124	; (adr r3, 80013a8 <_ZN7Encoder9updateCntEv+0x1c0>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f97a 	bl	8000628 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001344:	f7ff fa9a 	bl	800087c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc62 	bl	8000c18 <__aeabi_d2f>
 8001354:	4602      	mov	r2, r0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]
	total_distance_ += distance_;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	edd3 7a02 	vldr	s15, [r3, #8]
 8001366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edc3 7a05 	vstr	s15, [r3, #20]
	cross_line_ignore_distance_ += distance_;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ed93 7a06 	vldr	s14, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a02 	vldr	s15, [r3, #8]
 800137c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edc3 7a06 	vstr	s15, [r3, #24]
	monitor_distance = total_distance_;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a11      	ldr	r2, [pc, #68]	; (80013d0 <_ZN7Encoder9updateCntEv+0x1e8>)
 800138c:	6013      	str	r3, [r2, #0]
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bdb0      	pop	{r4, r5, r7, pc}
 8001396:	bf00      	nop
 8001398:	9999999a 	.word	0x9999999a
 800139c:	3fa99999 	.word	0x3fa99999
 80013a0:	66666666 	.word	0x66666666
 80013a4:	3fee6666 	.word	0x3fee6666
 80013a8:	1ab1d998 	.word	0x1ab1d998
 80013ac:	3f7830b5 	.word	0x3f7830b5
 80013b0:	40010000 	.word	0x40010000
 80013b4:	47000000 	.word	0x47000000
 80013b8:	3f912547 	.word	0x3f912547
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000200 	.word	0x20000200
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000020c 	.word	0x2000020c
 80013cc:	20000204 	.word	0x20000204
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	return distance_;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	ee07 3a90 	vmov	s15, r3
}
 800140c:	eeb0 0a67 	vmov.f32	s0, s15
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	ee07 3a90 	vmov	s15, r3
}
 800142a:	eeb0 0a67 	vmov.f32	s0, s15
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 800146c:	4b08      	ldr	r3, [pc, #32]	; (8001490 <_ZN7Encoder8clearCntEv+0x3c>)
 800146e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001472:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001474:	4b07      	ldr	r3, [pc, #28]	; (8001494 <_ZN7Encoder8clearCntEv+0x40>)
 8001476:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40010000 	.word	0x40010000
 8001494:	40010400 	.word	0x40010400

08001498 <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	total_distance_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	ee07 3a90 	vmov	s15, r3
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
 8001506:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 800150c:	6839      	ldr	r1, [r7, #0]
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f978 	bl	8001804 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001514:	f000 f98c 	bl	8001830 <fopen_folder_and_file>

	return ret;
 8001518:	7bfb      	ldrb	r3, [r7, #15]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800152e:	4804      	ldr	r0, [pc, #16]	; (8001540 <user_fclose+0x1c>)
 8001530:	f010 f882 	bl	8011638 <f_close>

	return ret;
 8001534:	79fb      	ldrb	r3, [r7, #7]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200348e0 	.word	0x200348e0

08001544 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b087      	sub	sp, #28
 8001548:	af02      	add	r7, sp, #8
 800154a:	4603      	mov	r3, r0
 800154c:	6039      	str	r1, [r7, #0]
 800154e:	80fb      	strh	r3, [r7, #6]
 8001550:	4613      	mov	r3, r2
 8001552:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e030      	b.n	80015c0 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800155e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	4413      	add	r3, r2
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f804 	bl	8000578 <__aeabi_f2d>
 8001570:	4603      	mov	r3, r0
 8001572:	460c      	mov	r4, r1
 8001574:	e9cd 3400 	strd	r3, r4, [sp]
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <sd_write_float+0x94>)
 800157a:	2180      	movs	r1, #128	; 0x80
 800157c:	4817      	ldr	r0, [pc, #92]	; (80015dc <sd_write_float+0x98>)
 800157e:	f012 fcdf 	bl	8013f40 <sniprintf>

		if(state == ADD_WRITE){
 8001582:	797b      	ldrb	r3, [r7, #5]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d106      	bne.n	8001596 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001588:	4b15      	ldr	r3, [pc, #84]	; (80015e0 <sd_write_float+0x9c>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	4814      	ldr	r0, [pc, #80]	; (80015e0 <sd_write_float+0x9c>)
 8001590:	f010 f8c6 	bl	8011720 <f_lseek>
 8001594:	e003      	b.n	800159e <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001596:	2100      	movs	r1, #0
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <sd_write_float+0x9c>)
 800159a:	f010 f8c1 	bl	8011720 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800159e:	480f      	ldr	r0, [pc, #60]	; (80015dc <sd_write_float+0x98>)
 80015a0:	f7fe fe2e 	bl	8000200 <strlen>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <sd_write_float+0xa0>)
 80015a8:	490c      	ldr	r1, [pc, #48]	; (80015dc <sd_write_float+0x98>)
 80015aa:	480d      	ldr	r0, [pc, #52]	; (80015e0 <sd_write_float+0x9c>)
 80015ac:	f00f fe2f 	bl	801120e <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015b0:	f000 f958 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	3301      	adds	r3, #1
 80015bc:	b29b      	uxth	r3, r3
 80015be:	81fb      	strh	r3, [r7, #14]
 80015c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbc8      	blt.n	800155e <sd_write_float+0x1a>
	}
	return ret;
 80015cc:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd90      	pop	{r4, r7, pc}
 80015d6:	bf00      	nop
 80015d8:	08017fc8 	.word	0x08017fc8
 80015dc:	20034850 	.word	0x20034850
 80015e0:	200348e0 	.word	0x200348e0
 80015e4:	200348d0 	.word	0x200348d0

080015e8 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f000 f900 	bl	8001804 <create_path>

	if(state == OVER_WRITE){
 8001604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001608:	2b00      	cmp	r3, #0
 800160a:	d108      	bne.n	800161e <sd_write_array_float+0x36>
		f_chdir(dirpath);
 800160c:	4822      	ldr	r0, [pc, #136]	; (8001698 <sd_write_array_float+0xb0>)
 800160e:	f010 f83d 	bl	801168c <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001612:	4822      	ldr	r0, [pc, #136]	; (800169c <sd_write_array_float+0xb4>)
 8001614:	f010 faa8 	bl	8011b68 <f_unlink>
		f_chdir("..");
 8001618:	4821      	ldr	r0, [pc, #132]	; (80016a0 <sd_write_array_float+0xb8>)
 800161a:	f010 f837 	bl	801168c <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800161e:	f000 f907 	bl	8001830 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001622:	2300      	movs	r3, #0
 8001624:	82fb      	strh	r3, [r7, #22]
 8001626:	e028      	b.n	800167a <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001628:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff9f 	bl	8000578 <__aeabi_f2d>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	e9cd 3400 	strd	r3, r4, [sp]
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <sd_write_array_float+0xbc>)
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	4818      	ldr	r0, [pc, #96]	; (80016a8 <sd_write_array_float+0xc0>)
 8001648:	f012 fc7a 	bl	8013f40 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <sd_write_array_float+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4619      	mov	r1, r3
 8001652:	4816      	ldr	r0, [pc, #88]	; (80016ac <sd_write_array_float+0xc4>)
 8001654:	f010 f864 	bl	8011720 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001658:	4813      	ldr	r0, [pc, #76]	; (80016a8 <sd_write_array_float+0xc0>)
 800165a:	f7fe fdd1 	bl	8000200 <strlen>
 800165e:	4602      	mov	r2, r0
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <sd_write_array_float+0xc8>)
 8001662:	4911      	ldr	r1, [pc, #68]	; (80016a8 <sd_write_array_float+0xc0>)
 8001664:	4811      	ldr	r0, [pc, #68]	; (80016ac <sd_write_array_float+0xc4>)
 8001666:	f00f fdd2 	bl	801120e <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 800166a:	f000 f8fb 	bl	8001864 <bufclear>
	for(short i = 0 ; i < size; i++){
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	b29b      	uxth	r3, r3
 8001674:	3301      	adds	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	82fb      	strh	r3, [r7, #22]
 800167a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800167e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001682:	429a      	cmp	r2, r3
 8001684:	dbd0      	blt.n	8001628 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001686:	4809      	ldr	r0, [pc, #36]	; (80016ac <sd_write_array_float+0xc4>)
 8001688:	f00f ffd6 	bl	8011638 <f_close>

	return ret;
 800168c:	7d7b      	ldrb	r3, [r7, #21]
}
 800168e:	4618      	mov	r0, r3
 8001690:	371c      	adds	r7, #28
 8001692:	46bd      	mov	sp, r7
 8001694:	bd90      	pop	{r4, r7, pc}
 8001696:	bf00      	nop
 8001698:	20034750 	.word	0x20034750
 800169c:	20033610 	.word	0x20033610
 80016a0:	08017fe4 	.word	0x08017fe4
 80016a4:	08017fc8 	.word	0x08017fc8
 80016a8:	20034850 	.word	0x20034850
 80016ac:	200348e0 	.word	0x200348e0
 80016b0:	200348d0 	.word	0x200348d0

080016b4 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	603b      	str	r3, [r7, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f898 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016d4:	f000 f8ac 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016d8:	e019      	b.n	800170e <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	4413      	add	r3, r2
 80016e4:	461a      	mov	r2, r3
 80016e6:	4913      	ldr	r1, [pc, #76]	; (8001734 <sd_read_array_float+0x80>)
 80016e8:	4813      	ldr	r0, [pc, #76]	; (8001738 <sd_read_array_float+0x84>)
 80016ea:	f012 fc7d 	bl	8013fe8 <siscanf>
		i++;
 80016ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80016fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80016fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001702:	429a      	cmp	r2, r3
 8001704:	db03      	blt.n	800170e <sd_read_array_float+0x5a>
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	3b01      	subs	r3, #1
 800170a:	b29b      	uxth	r3, r3
 800170c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800170e:	4a0b      	ldr	r2, [pc, #44]	; (800173c <sd_read_array_float+0x88>)
 8001710:	2180      	movs	r1, #128	; 0x80
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <sd_read_array_float+0x84>)
 8001714:	f010 fc06 	bl	8011f24 <f_gets>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1dd      	bne.n	80016da <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800171e:	f000 f8a1 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001722:	4806      	ldr	r0, [pc, #24]	; (800173c <sd_read_array_float+0x88>)
 8001724:	f00f ff88 	bl	8011638 <f_close>

	return ret;
 8001728:	7d7b      	ldrb	r3, [r7, #21]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	08017fd4 	.word	0x08017fd4
 8001738:	20034850 	.word	0x20034850
 800173c:	200348e0 	.word	0x200348e0

08001740 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f852 	bl	8001804 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001760:	f000 f866 	bl	8001830 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001764:	e019      	b.n	800179a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	4913      	ldr	r1, [pc, #76]	; (80017c0 <sd_read_array_double+0x80>)
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <sd_read_array_double+0x84>)
 8001776:	f012 fc37 	bl	8013fe8 <siscanf>
		i++;
 800177a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800177e:	b29b      	uxth	r3, r3
 8001780:	3301      	adds	r3, #1
 8001782:	b29b      	uxth	r3, r3
 8001784:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001786:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800178a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178e:	429a      	cmp	r2, r3
 8001790:	db03      	blt.n	800179a <sd_read_array_double+0x5a>
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	3b01      	subs	r3, #1
 8001796:	b29b      	uxth	r3, r3
 8001798:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <sd_read_array_double+0x88>)
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	4809      	ldr	r0, [pc, #36]	; (80017c4 <sd_read_array_double+0x84>)
 80017a0:	f010 fbc0 	bl	8011f24 <f_gets>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1dd      	bne.n	8001766 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017aa:	f000 f85b 	bl	8001864 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ae:	4806      	ldr	r0, [pc, #24]	; (80017c8 <sd_read_array_double+0x88>)
 80017b0:	f00f ff42 	bl	8011638 <f_close>

	return ret;
 80017b4:	7d7b      	ldrb	r3, [r7, #21]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	08017fe0 	.word	0x08017fe0
 80017c4:	20034850 	.word	0x20034850
 80017c8:	200348e0 	.word	0x200348e0

080017cc <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017d6:	2201      	movs	r2, #1
 80017d8:	4908      	ldr	r1, [pc, #32]	; (80017fc <sd_mount+0x30>)
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_mount+0x34>)
 80017dc:	f00f f9a4 	bl	8010b28 <f_mount>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <sd_mount+0x20>
 80017e6:	2301      	movs	r3, #1
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	e001      	b.n	80017f0 <sd_mount+0x24>
	else ret = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	71fb      	strb	r3, [r7, #7]

	return ret;
 80017f0:	79fb      	ldrb	r3, [r7, #7]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08017ff0 	.word	0x08017ff0
 8001800:	20033710 	.word	0x20033710

08001804 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800180e:	6879      	ldr	r1, [r7, #4]
 8001810:	4805      	ldr	r0, [pc, #20]	; (8001828 <create_path+0x24>)
 8001812:	f012 fc58 	bl	80140c6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001816:	6839      	ldr	r1, [r7, #0]
 8001818:	4804      	ldr	r0, [pc, #16]	; (800182c <create_path+0x28>)
 800181a:	f012 fc54 	bl	80140c6 <strcpy>

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20034750 	.word	0x20034750
 800182c:	20033610 	.word	0x20033610

08001830 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001834:	4807      	ldr	r0, [pc, #28]	; (8001854 <fopen_folder_and_file+0x24>)
 8001836:	f010 fa59 	bl	8011cec <f_mkdir>

	f_chdir(dirpath);
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <fopen_folder_and_file+0x24>)
 800183c:	f00f ff26 	bl	801168c <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001840:	2213      	movs	r2, #19
 8001842:	4905      	ldr	r1, [pc, #20]	; (8001858 <fopen_folder_and_file+0x28>)
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <fopen_folder_and_file+0x2c>)
 8001846:	f00f f9b5 	bl	8010bb4 <f_open>

	f_chdir("..");
 800184a:	4805      	ldr	r0, [pc, #20]	; (8001860 <fopen_folder_and_file+0x30>)
 800184c:	f00f ff1e 	bl	801168c <f_chdir>


}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20034750 	.word	0x20034750
 8001858:	20033610 	.word	0x20033610
 800185c:	200348e0 	.word	0x200348e0
 8001860:	08017fe4 	.word	0x08017fe4

08001864 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 800186a:	2300      	movs	r3, #0
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	e007      	b.n	8001880 <bufclear+0x1c>
		buffer[i] = '\0';
 8001870:	4a08      	ldr	r2, [pc, #32]	; (8001894 <bufclear+0x30>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3301      	adds	r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	ddf4      	ble.n	8001870 <bufclear+0xc>
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20034850 	.word	0x20034850

08001898 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018b2:	480e      	ldr	r0, [pc, #56]	; (80018ec <read_byte+0x54>)
 80018b4:	f007 f964 	bl	8008b80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018b8:	f107 010f 	add.w	r1, r7, #15
 80018bc:	2364      	movs	r3, #100	; 0x64
 80018be:	2201      	movs	r2, #1
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <read_byte+0x58>)
 80018c2:	f00a fb25 	bl	800bf10 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018c6:	f107 010e 	add.w	r1, r7, #14
 80018ca:	2364      	movs	r3, #100	; 0x64
 80018cc:	2201      	movs	r2, #1
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <read_byte+0x58>)
 80018d0:	f00a fc52 	bl	800c178 <HAL_SPI_Receive>
	CS_SET;
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4804      	ldr	r0, [pc, #16]	; (80018ec <read_byte+0x54>)
 80018dc:	f007 f950 	bl	8008b80 <HAL_GPIO_WritePin>

	return val;
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400
 80018f0:	2003597c 	.word	0x2003597c

080018f4 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800190a:	b2db      	uxtb	r3, r3
 800190c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	480c      	ldr	r0, [pc, #48]	; (8001948 <write_byte+0x54>)
 8001916:	f007 f933 	bl	8008b80 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800191a:	f107 010f 	add.w	r1, r7, #15
 800191e:	2364      	movs	r3, #100	; 0x64
 8001920:	2201      	movs	r2, #1
 8001922:	480a      	ldr	r0, [pc, #40]	; (800194c <write_byte+0x58>)
 8001924:	f00a faf4 	bl	800bf10 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001928:	1db9      	adds	r1, r7, #6
 800192a:	2364      	movs	r3, #100	; 0x64
 800192c:	2201      	movs	r2, #1
 800192e:	4807      	ldr	r0, [pc, #28]	; (800194c <write_byte+0x58>)
 8001930:	f00a faee 	bl	800bf10 <HAL_SPI_Transmit>
	CS_SET;
 8001934:	2201      	movs	r2, #1
 8001936:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193a:	4803      	ldr	r0, [pc, #12]	; (8001948 <write_byte+0x54>)
 800193c:	f007 f920 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40020400 	.word	0x40020400
 800194c:	2003597c 	.word	0x2003597c

08001950 <IMU_init>:

uint16_t IMU_init() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff ff9c 	bl	8001898 <read_byte>
 8001960:	4603      	mov	r3, r0
 8001962:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	2be0      	cmp	r3, #224	; 0xe0
 8001968:	d119      	bne.n	800199e <IMU_init+0x4e>
		ret = 1;
 800196a:	2301      	movs	r3, #1
 800196c:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800196e:	2101      	movs	r1, #1
 8001970:	2006      	movs	r0, #6
 8001972:	f7ff ffbf 	bl	80018f4 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001976:	2110      	movs	r1, #16
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff ffbb 	bl	80018f4 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800197e:	2120      	movs	r1, #32
 8001980:	207f      	movs	r0, #127	; 0x7f
 8001982:	f7ff ffb7 	bl	80018f4 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001986:	2106      	movs	r1, #6
 8001988:	2001      	movs	r0, #1
 800198a:	f7ff ffb3 	bl	80018f4 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800198e:	2106      	movs	r1, #6
 8001990:	2014      	movs	r0, #20
 8001992:	f7ff ffaf 	bl	80018f4 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001996:	2100      	movs	r1, #0
 8001998:	207f      	movs	r0, #127	; 0x7f
 800199a:	f7ff ffab 	bl	80018f4 <write_byte>
	}
	return ret;
 800199e:	88fb      	ldrh	r3, [r7, #6]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <read_gyro_data>:

void read_gyro_data() {
 80019a8:	b598      	push	{r3, r4, r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019ac:	2033      	movs	r0, #51	; 0x33
 80019ae:	f7ff ff73 	bl	8001898 <read_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21c      	sxth	r4, r3
 80019b8:	2034      	movs	r0, #52	; 0x34
 80019ba:	f7ff ff6d 	bl	8001898 <read_byte>
 80019be:	4603      	mov	r3, r0
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	4323      	orrs	r3, r4
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <read_gyro_data+0x64>)
 80019c8:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019ca:	2035      	movs	r0, #53	; 0x35
 80019cc:	f7ff ff64 	bl	8001898 <read_byte>
 80019d0:	4603      	mov	r3, r0
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	b21c      	sxth	r4, r3
 80019d6:	2036      	movs	r0, #54	; 0x36
 80019d8:	f7ff ff5e 	bl	8001898 <read_byte>
 80019dc:	4603      	mov	r3, r0
 80019de:	b21b      	sxth	r3, r3
 80019e0:	4323      	orrs	r3, r4
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <read_gyro_data+0x68>)
 80019e6:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80019e8:	2037      	movs	r0, #55	; 0x37
 80019ea:	f7ff ff55 	bl	8001898 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2038      	movs	r0, #56	; 0x38
 80019f6:	f7ff ff4f 	bl	8001898 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <read_gyro_data+0x6c>)
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	bd98      	pop	{r3, r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20035918 	.word	0x20035918
 8001a10:	20035916 	.word	0x20035916
 8001a14:	20035910 	.word	0x20035910

08001a18 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	801a      	strh	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	809a      	strh	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	80da      	strh	r2, [r3, #6]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	811a      	strh	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	815a      	strh	r2, [r3, #10]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
{

}
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a64:	f7ff ff74 	bl	8001950 <IMU_init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <_ZN3IMU4initEv+0x50>)
 8001a72:	f012 f9cf 	bl	8013e14 <iprintf>

	lcd_clear();
 8001a76:	f7ff fb13 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f7ff fb1f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <_ZN3IMU4initEv+0x54>)
 8001a84:	f7ff fb46 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	f7ff fb18 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a90:	89fb      	ldrh	r3, [r7, #14]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <_ZN3IMU4initEv+0x58>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a9e:	f005 fdd9 	bl	8007654 <HAL_Delay>

}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	08017ff4 	.word	0x08017ff4
 8001ab0:	08018004 	.word	0x08018004
 8001ab4:	08018010 	.word	0x08018010

08001ab8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ac0:	f7ff ff72 	bl	80019a8 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	b21a      	sxth	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	b21a      	sxth	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ad8:	4b21      	ldr	r3, [pc, #132]	; (8001b60 <_ZN3IMU12updateValuesEv+0xa8>)
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	b21a      	sxth	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd33 	bl	8000554 <__aeabi_i2d>
 8001aee:	a316      	add	r3, pc, #88	; (adr r3, 8001b48 <_ZN3IMU12updateValuesEv+0x90>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fd98 	bl	8000628 <__aeabi_dmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4625      	mov	r5, r4
 8001afe:	461c      	mov	r4, r3
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7fe fd24 	bl	8000554 <__aeabi_i2d>
 8001b0c:	a310      	add	r3, pc, #64	; (adr r3, 8001b50 <_ZN3IMU12updateValuesEv+0x98>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fd89 	bl	8000628 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	f7fe fbcd 	bl	80002bc <__adddf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4618      	mov	r0, r3
 8001b28:	4621      	mov	r1, r4
 8001b2a:	f7ff f82d 	bl	8000b88 <__aeabi_d2iz>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <_ZN3IMU12updateValuesEv+0xac>)
 8001b3e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bdb0      	pop	{r4, r5, r7, pc}
 8001b48:	eb851eb8 	.word	0xeb851eb8
 8001b4c:	3f9eb851 	.word	0x3f9eb851
 8001b50:	70a3d70a 	.word	0x70a3d70a
 8001b54:	3fef0a3d 	.word	0x3fef0a3d
 8001b58:	20035918 	.word	0x20035918
 8001b5c:	20035916 	.word	0x20035916
 8001b60:	20035910 	.word	0x20035910
 8001b64:	20000210 	.word	0x20000210

08001b68 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f7fe fcf3 	bl	8000578 <__aeabi_f2d>
 8001b92:	a316      	add	r3, pc, #88	; (adr r3, 8001bec <_ZN3IMU8getOmegaEv+0x84>)
 8001b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b98:	f7fe fe70 	bl	800087c <__aeabi_ddiv>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001ba6:	a313      	add	r3, pc, #76	; (adr r3, 8001bf4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	4620      	mov	r0, r4
 8001bae:	4629      	mov	r1, r5
 8001bb0:	f7fe fd3a 	bl	8000628 <__aeabi_dmul>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	460c      	mov	r4, r1
 8001bb8:	4618      	mov	r0, r3
 8001bba:	4621      	mov	r1, r4
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b09      	ldr	r3, [pc, #36]	; (8001be8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bc2:	f7fe fe5b 	bl	800087c <__aeabi_ddiv>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	4621      	mov	r1, r4
 8001bce:	f7ff f823 	bl	8000c18 <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	ee07 3a90 	vmov	s15, r3
}
 8001bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bdb0      	pop	{r4, r5, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	f3af 8000 	nop.w
 8001be8:	40668000 	.word	0x40668000
 8001bec:	66666666 	.word	0x66666666
 8001bf0:	40306666 	.word	0x40306666
 8001bf4:	54411744 	.word	0x54411744
 8001bf8:	400921fb 	.word	0x400921fb

08001bfc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bfe:	b08b      	sub	sp, #44	; 0x2c
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c04:	466b      	mov	r3, sp
 8001c06:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c0c:	f005 fd22 	bl	8007654 <HAL_Delay>
	lcd_clear();
 8001c10:	f7ff fa46 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c14:	2100      	movs	r1, #0
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7ff fa52 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c1c:	4840      	ldr	r0, [pc, #256]	; (8001d20 <_ZN3IMU11calibrationEv+0x124>)
 8001c1e:	f7ff fa79 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c22:	2101      	movs	r1, #1
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fa4b 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c2a:	483e      	ldr	r0, [pc, #248]	; (8001d24 <_ZN3IMU11calibrationEv+0x128>)
 8001c2c:	f7ff fa72 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c30:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c34:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c36:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c3a:	1e5d      	subs	r5, r3, #1
 8001c3c:	61bd      	str	r5, [r7, #24]
 8001c3e:	462b      	mov	r3, r5
 8001c40:	3301      	adds	r3, #1
 8001c42:	4619      	mov	r1, r3
 8001c44:	f04f 0200 	mov.w	r2, #0
 8001c48:	f04f 0300 	mov.w	r3, #0
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	0154      	lsls	r4, r2, #5
 8001c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c56:	014b      	lsls	r3, r1, #5
 8001c58:	462b      	mov	r3, r5
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	f04f 0400 	mov.w	r4, #0
 8001c6a:	0154      	lsls	r4, r2, #5
 8001c6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c70:	014b      	lsls	r3, r1, #5
 8001c72:	462b      	mov	r3, r5
 8001c74:	3301      	adds	r3, #1
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	3303      	adds	r3, #3
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	466b      	mov	r3, sp
 8001c86:	3303      	adds	r3, #3
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	83fb      	strh	r3, [r7, #30]
 8001c92:	8bfa      	ldrh	r2, [r7, #30]
 8001c94:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	da13      	bge.n	8001cc4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	ee07 2a90 	vmov	s15, r2
 8001ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f005 fccc 	bl	8007654 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	83fb      	strh	r3, [r7, #30]
 8001cc2:	e7e6      	b.n	8001c92 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	462b      	mov	r3, r5
 8001ccc:	3301      	adds	r3, #1
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d00e      	beq.n	8001cfa <_ZN3IMU11calibrationEv+0xfe>
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	edd3 7a00 	vldr	s15, [r3]
 8001ce6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cee:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	e7ec      	b.n	8001cd4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001cfa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d14:	46b5      	mov	sp, r6
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	08018014 	.word	0x08018014
 8001d24:	08018020 	.word	0x08018020

08001d28 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460a      	mov	r2, r1
 8001d32:	71fb      	strb	r3, [r7, #7]
 8001d34:	4613      	mov	r3, r2
 8001d36:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d38:	79bb      	ldrb	r3, [r7, #6]
 8001d3a:	b299      	uxth	r1, r3
 8001d3c:	1dfa      	adds	r2, r7, #7
 8001d3e:	2364      	movs	r3, #100	; 0x64
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2301      	movs	r3, #1
 8001d44:	480c      	ldr	r0, [pc, #48]	; (8001d78 <INA260_read+0x50>)
 8001d46:	f007 f885 	bl	8008e54 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d4a:	79bb      	ldrb	r3, [r7, #6]
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <INA260_read+0x50>)
 8001d5a:	f007 f979 	bl	8009050 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d5e:	7b3b      	ldrb	r3, [r7, #12]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b21a      	sxth	r2, r3
 8001d64:	7b7b      	ldrb	r3, [r7, #13]
 8001d66:	b21b      	sxth	r3, r3
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b21b      	sxth	r3, r3
 8001d6c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20035b30 	.word	0x20035b30

08001d7c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	4604      	mov	r4, r0
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	71fb      	strb	r3, [r7, #7]
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71bb      	strb	r3, [r7, #6]
 8001d92:	460b      	mov	r3, r1
 8001d94:	717b      	strb	r3, [r7, #5]
 8001d96:	4613      	mov	r3, r2
 8001d98:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	733b      	strb	r3, [r7, #12]
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	737b      	strb	r3, [r7, #13]
 8001da2:	797b      	ldrb	r3, [r7, #5]
 8001da4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001da6:	793b      	ldrb	r3, [r7, #4]
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f107 020c 	add.w	r2, r7, #12
 8001dae:	2364      	movs	r3, #100	; 0x64
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2303      	movs	r3, #3
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <INA260_write+0x48>)
 8001db6:	f007 f84d 	bl	8008e54 <HAL_I2C_Master_Transmit>
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20035b30 	.word	0x20035b30

08001dc8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	71bb      	strb	r3, [r7, #6]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dda:	797b      	ldrb	r3, [r7, #5]
 8001ddc:	79ba      	ldrb	r2, [r7, #6]
 8001dde:	79f9      	ldrb	r1, [r7, #7]
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ffcb 	bl	8001d7c <INA260_write>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	21df      	movs	r1, #223	; 0xdf
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff ffe2 	bl	8001dc8 <setConfig>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
{

}
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4618      	mov	r0, r3
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
	...

08001e24 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e36:	f006 fe8b 	bl	8008b50 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf0c      	ite	eq
 8001e40:	2301      	moveq	r3, #1
 8001e42:	2300      	movne	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <_ZN8JoyStick8getValueEv+0x2e>
 8001e4a:	89fb      	ldrh	r3, [r7, #14]
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e52:	2101      	movs	r1, #1
 8001e54:	4823      	ldr	r0, [pc, #140]	; (8001ee4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e56:	f006 fe7b 	bl	8008b50 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <_ZN8JoyStick8getValueEv+0x4e>
 8001e6a:	89fb      	ldrh	r3, [r7, #14]
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	481a      	ldr	r0, [pc, #104]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e78:	f006 fe6a 	bl	8008b50 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf0c      	ite	eq
 8001e82:	2301      	moveq	r3, #1
 8001e84:	2300      	movne	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <_ZN8JoyStick8getValueEv+0x70>
 8001e8c:	89fb      	ldrh	r3, [r7, #14]
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e94:	2104      	movs	r1, #4
 8001e96:	4814      	ldr	r0, [pc, #80]	; (8001ee8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e98:	f006 fe5a 	bl	8008b50 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	bf0c      	ite	eq
 8001ea2:	2301      	moveq	r3, #1
 8001ea4:	2300      	movne	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <_ZN8JoyStick8getValueEv+0x90>
 8001eac:	89fb      	ldrh	r3, [r7, #14]
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001eb4:	2180      	movs	r1, #128	; 0x80
 8001eb6:	480a      	ldr	r0, [pc, #40]	; (8001ee0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001eb8:	f006 fe4a 	bl	8008b50 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf0c      	ite	eq
 8001ec2:	2301      	moveq	r3, #1
 8001ec4:	2300      	movne	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <_ZN8JoyStick8getValueEv+0xb0>
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	f043 0310 	orr.w	r3, r3, #16
 8001ed2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ed4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	40020c00 	.word	0x40020c00
 8001ee8:	40020400 	.word	0x40020400

08001eec <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	2b52      	cmp	r3, #82	; 0x52
 8001efc:	d112      	bne.n	8001f24 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f04:	4856      	ldr	r0, [pc, #344]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 fe3b 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f10:	4853      	ldr	r0, [pc, #332]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 fe35 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f16:	2201      	movs	r2, #1
 8001f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f1c:	4850      	ldr	r0, [pc, #320]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f1e:	f006 fe2f 	bl	8008b80 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f22:	e098      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b47      	cmp	r3, #71	; 0x47
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	484b      	ldr	r0, [pc, #300]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 fe25 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4848      	ldr	r0, [pc, #288]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 fe1f 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4845      	ldr	r0, [pc, #276]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f006 fe19 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001f4e:	e082      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b42      	cmp	r3, #66	; 0x42
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	4840      	ldr	r0, [pc, #256]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 fe0f 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	483d      	ldr	r0, [pc, #244]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 fe09 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	483a      	ldr	r0, [pc, #232]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f006 fe03 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001f7a:	e06c      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b43      	cmp	r3, #67	; 0x43
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4835      	ldr	r0, [pc, #212]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 fdf9 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	4832      	ldr	r0, [pc, #200]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 fdf3 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	482f      	ldr	r0, [pc, #188]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f006 fded 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001fa6:	e056      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b4d      	cmp	r3, #77	; 0x4d
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	482a      	ldr	r0, [pc, #168]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 fde3 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4827      	ldr	r0, [pc, #156]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 fddd 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4824      	ldr	r0, [pc, #144]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f006 fdd7 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001fd2:	e040      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b59      	cmp	r3, #89	; 0x59
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	481f      	ldr	r0, [pc, #124]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 fdcd 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	481c      	ldr	r0, [pc, #112]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 fdc7 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f006 fdc1 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8001ffe:	e02a      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b57      	cmp	r3, #87	; 0x57
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	4814      	ldr	r0, [pc, #80]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800200e:	f006 fdb7 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800201a:	f006 fdb1 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	480e      	ldr	r0, [pc, #56]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002026:	f006 fdab 	bl	8008b80 <HAL_GPIO_WritePin>
}
 800202a:	e014      	b.n	8002056 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b7e      	cmp	r3, #126	; 0x7e
 8002030:	d111      	bne.n	8002056 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 800203a:	f006 fda1 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4806      	ldr	r0, [pc, #24]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002046:	f006 fd9b 	bl	8008b80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800204a:	2201      	movs	r2, #1
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4803      	ldr	r0, [pc, #12]	; (8002060 <_ZN3LED9fullColorEc+0x174>)
 8002052:	f006 fd95 	bl	8008b80 <HAL_GPIO_WritePin>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40020000 	.word	0x40020000

08002064 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
 8002070:	4613      	mov	r3, r2
 8002072:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d106      	bne.n	800208a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800207c:	2201      	movs	r2, #1
 800207e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002082:	4813      	ldr	r0, [pc, #76]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 8002084:	f006 fd7c 	bl	8008b80 <HAL_GPIO_WritePin>
 8002088:	e009      	b.n	800209e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800208a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002098:	480d      	ldr	r0, [pc, #52]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 800209a:	f006 fd71 	bl	8008b80 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800209e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020a6:	2201      	movs	r2, #1
 80020a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020ae:	f006 fd67 	bl	8008b80 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020b2:	e009      	b.n	80020c8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020c2:	4803      	ldr	r0, [pc, #12]	; (80020d0 <_ZN3LED2LREaa+0x6c>)
 80020c4:	f006 fd5c 	bl	8008b80 <HAL_GPIO_WritePin>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40020000 	.word	0x40020000

080020d4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b092      	sub	sp, #72	; 0x48
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe92 	bl	8001e0c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	647b      	str	r3, [r7, #68]	; 0x44
 80020f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020f2:	331c      	adds	r3, #28
 80020f4:	633b      	str	r3, [r7, #48]	; 0x30
 80020f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80020f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d008      	beq.n	8002110 <_ZN10LineSensorC1Ev+0x3c>
 80020fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002104:	2200      	movs	r2, #0
 8002106:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210a:	3302      	adds	r3, #2
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
 800210e:	e7f2      	b.n	80020f6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	643b      	str	r3, [r7, #64]	; 0x40
 800211c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211e:	3338      	adds	r3, #56	; 0x38
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
 8002122:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	429a      	cmp	r2, r3
 8002128:	d009      	beq.n	800213e <_ZN10LineSensorC1Ev+0x6a>
 800212a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800212c:	623b      	str	r3, [r7, #32]
		s = 0;
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002138:	3304      	adds	r3, #4
 800213a:	643b      	str	r3, [r7, #64]	; 0x40
 800213c:	e7f1      	b.n	8002122 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002144:	61fb      	str	r3, [r7, #28]
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	63fb      	str	r3, [r7, #60]	; 0x3c
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3338      	adds	r3, #56	; 0x38
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	429a      	cmp	r2, r3
 8002156:	d009      	beq.n	800216c <_ZN10LineSensorC1Ev+0x98>
 8002158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800215a:	617b      	str	r3, [r7, #20]
		m = 0;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3304      	adds	r3, #4
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	e7f1      	b.n	8002150 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	63bb      	str	r3, [r7, #56]	; 0x38
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <_ZN10LineSensorC1Ev+0xc6>
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	60bb      	str	r3, [r7, #8]
		s = 1;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002190:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002194:	3304      	adds	r3, #4
 8002196:	63bb      	str	r3, [r7, #56]	; 0x38
 8002198:	e7f1      	b.n	800217e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	3748      	adds	r7, #72	; 0x48
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	220e      	movs	r2, #14
 80021b0:	4619      	mov	r1, r3
 80021b2:	4803      	ldr	r0, [pc, #12]	; (80021c0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021b4:	f005 fab4 	bl	8007720 <HAL_ADC_Start_DMA>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20035a54 	.word	0x20035a54

080021c4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b0d      	cmp	r3, #13
 80021d4:	dc2f      	bgt.n	8002236 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	3392      	adds	r3, #146	; 0x92
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3304      	adds	r3, #4
 80021e2:	ed93 7a00 	vldr	s14, [r3]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	33a0      	adds	r3, #160	; 0xa0
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	3304      	adds	r3, #4
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	460b      	mov	r3, r1
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a5b      	subs	r3, r3, r1
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	440b      	add	r3, r1
 8002222:	3306      	adds	r3, #6
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	3304      	adds	r3, #4
 800222a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3301      	adds	r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	e7cc      	b.n	80021d0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	3301      	adds	r3, #1
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002240:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002242:	4b06      	ldr	r3, [pc, #24]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d902      	bls.n	8002250 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800224a:	4b04      	ldr	r3, [pc, #16]	; (800225c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]


}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	2000021c 	.word	0x2000021c

08002260 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b08e      	sub	sp, #56	; 0x38
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002268:	2300      	movs	r3, #0
 800226a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800226e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002272:	2b0d      	cmp	r3, #13
 8002274:	f200 80b8 	bhi.w	80023e8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800227e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002282:	2b09      	cmp	r3, #9
 8002284:	d81c      	bhi.n	80022c0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002286:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800228a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800228e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4423      	add	r3, r4
 800229e:	3306      	adds	r3, #6
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	3304      	adds	r3, #4
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	008b      	lsls	r3, r1, #2
 80022aa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ae:	440b      	add	r3, r1
 80022b0:	3b30      	subs	r3, #48	; 0x30
 80022b2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022b4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022b8:	3301      	adds	r3, #1
 80022ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022be:	e7de      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022c0:	2300      	movs	r3, #0
 80022c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	d84d      	bhi.n	800236a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022d2:	3301      	adds	r3, #1
 80022d4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d83e      	bhi.n	800235e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022e0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022ea:	4413      	add	r3, r2
 80022ec:	3b30      	subs	r3, #48	; 0x30
 80022ee:	ed93 7a00 	vldr	s14, [r3]
 80022f2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fc:	4413      	add	r3, r2
 80022fe:	3b30      	subs	r3, #48	; 0x30
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800230c:	d521      	bpl.n	8002352 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800230e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002318:	4413      	add	r3, r2
 800231a:	3b30      	subs	r3, #48	; 0x30
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002320:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002324:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800232e:	440a      	add	r2, r1
 8002330:	3a30      	subs	r2, #48	; 0x30
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233a:	440b      	add	r3, r1
 800233c:	3b30      	subs	r3, #48	; 0x30
 800233e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002340:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800234a:	4413      	add	r3, r2
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002350:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002352:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002356:	3301      	adds	r3, #1
 8002358:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800235c:	e7bc      	b.n	80022d8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800235e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002362:	3301      	adds	r3, #1
 8002364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002368:	e7ad      	b.n	80022c6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe f903 	bl	8000578 <__aeabi_f2d>
 8002372:	a32a      	add	r3, pc, #168	; (adr r3, 800241c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002378:	f7fe f956 	bl	8000628 <__aeabi_dmul>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4625      	mov	r5, r4
 8002382:	461c      	mov	r4, r3
 8002384:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f1 	bl	8000578 <__aeabi_f2d>
 8002396:	a31c      	add	r3, pc, #112	; (adr r3, 8002408 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f944 	bl	8000628 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4620      	mov	r0, r4
 80023a6:	4629      	mov	r1, r5
 80023a8:	f7fd ff88 	bl	80002bc <__adddf3>
 80023ac:	4603      	mov	r3, r0
 80023ae:	460c      	mov	r4, r1
 80023b0:	461a      	mov	r2, r3
 80023b2:	4623      	mov	r3, r4
 80023b4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc2c 	bl	8000c18 <__aeabi_d2f>
 80023c0:	4601      	mov	r1, r0
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023d2:	69fa      	ldr	r2, [r7, #28]
 80023d4:	490e      	ldr	r1, [pc, #56]	; (8002410 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e0:	3301      	adds	r3, #1
 80023e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023e6:	e742      	b.n	800226e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023ee:	4a09      	ldr	r2, [pc, #36]	; (8002414 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 80023f0:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	bf00      	nop
 80023fe:	3738      	adds	r7, #56	; 0x38
 8002400:	46bd      	mov	sp, r7
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	3fee6666 	.word	0x3fee6666
 8002410:	20000220 	.word	0x20000220
 8002414:	20000214 	.word	0x20000214
 8002418:	20000218 	.word	0x20000218
 800241c:	9999999a 	.word	0x9999999a
 8002420:	3fa99999 	.word	0x3fa99999

08002424 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002424:	b590      	push	{r4, r7, lr}
 8002426:	b0a9      	sub	sp, #164	; 0xa4
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	f005 f911 	bl	8007654 <HAL_Delay>

	lcd_clear();
 8002432:	f7fe fe35 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002436:	2100      	movs	r1, #0
 8002438:	2000      	movs	r0, #0
 800243a:	f7fe fe41 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800243e:	48b1      	ldr	r0, [pc, #708]	; (8002704 <_ZN10LineSensor11calibrationEv+0x2e0>)
 8002440:	f7fe fe68 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002444:	2101      	movs	r1, #1
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fe3a 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800244c:	48ae      	ldr	r0, [pc, #696]	; (8002708 <_ZN10LineSensor11calibrationEv+0x2e4>)
 800244e:	f7fe fe61 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002452:	2300      	movs	r3, #0
 8002454:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002458:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800245c:	2b0d      	cmp	r3, #13
 800245e:	d823      	bhi.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002460:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002464:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	32b0      	adds	r2, #176	; 0xb0
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	440a      	add	r2, r1
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002478:	440b      	add	r3, r1
 800247a:	3b60      	subs	r3, #96	; 0x60
 800247c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800247e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002482:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	32b0      	adds	r2, #176	; 0xb0
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	440a      	add	r2, r1
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002496:	440b      	add	r3, r1
 8002498:	3b98      	subs	r3, #152	; 0x98
 800249a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800249c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80024a6:	e7d7      	b.n	8002458 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff fcb8 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d079      	beq.n	80025b8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ca:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ce:	2b0d      	cmp	r3, #13
 80024d0:	d850      	bhi.n	8002574 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024dc:	4413      	add	r3, r2
 80024de:	3b60      	subs	r3, #96	; 0x60
 80024e0:	ed93 7a00 	vldr	s14, [r3]
 80024e4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	33b0      	adds	r3, #176	; 0xb0
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fc:	d50f      	bpl.n	800251e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80024fe:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8002502:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	32b0      	adds	r2, #176	; 0xb0
 800250a:	0092      	lsls	r2, r2, #2
 800250c:	440a      	add	r2, r1
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002516:	440b      	add	r3, r1
 8002518:	3b60      	subs	r3, #96	; 0x60
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	e024      	b.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800251e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002528:	4413      	add	r3, r2
 800252a:	3b98      	subs	r3, #152	; 0x98
 800252c:	ed93 7a00 	vldr	s14, [r3]
 8002530:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	33b0      	adds	r3, #176	; 0xb0
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	edd3 7a00 	vldr	s15, [r3]
 8002540:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002548:	dd0e      	ble.n	8002568 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800254a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800254e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	32b0      	adds	r2, #176	; 0xb0
 8002556:	0092      	lsls	r2, r2, #2
 8002558:	440a      	add	r2, r1
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002562:	440b      	add	r3, r1
 8002564:	3b98      	subs	r3, #152	; 0x98
 8002566:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002568:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800256c:	3301      	adds	r3, #1
 800256e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002572:	e7aa      	b.n	80024ca <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fae6 	bl	8003b4c <_ZN12RotarySwitch8getValueEv>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf0c      	ite	eq
 8002586:	2301      	moveq	r3, #1
 8002588:	2300      	movne	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002596:	2201      	movs	r2, #1
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff fd61 	bl	8002064 <_ZN3LED2LREaa>
 80025a2:	e781      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025aa:	2200      	movs	r2, #0
 80025ac:	f04f 31ff 	mov.w	r1, #4294967295
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fd57 	bl	8002064 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025b6:	e777      	b.n	80024a8 <_ZN10LineSensor11calibrationEv+0x84>

		}
	}

	for(const auto &m : max_values){
 80025b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80025c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025cc:	3338      	adds	r3, #56	; 0x38
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80025d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80025d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025da:	429a      	cmp	r2, r3
 80025dc:	d016      	beq.n	800260c <_ZN10LineSensor11calibrationEv+0x1e8>
 80025de:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80025e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffc3 	bl	8000578 <__aeabi_f2d>
 80025f2:	4603      	mov	r3, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	4844      	ldr	r0, [pc, #272]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 80025fc:	f011 fc0a 	bl	8013e14 <iprintf>
	for(const auto &m : max_values){
 8002600:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002604:	3304      	adds	r3, #4
 8002606:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800260a:	e7e2      	b.n	80025d2 <_ZN10LineSensor11calibrationEv+0x1ae>
	}
		printf("\n");
 800260c:	200a      	movs	r0, #10
 800260e:	f011 fc19 	bl	8013e44 <putchar>
	for(const auto &m : min_values){
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002622:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002626:	3338      	adds	r3, #56	; 0x38
 8002628:	67fb      	str	r3, [r7, #124]	; 0x7c
 800262a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800262e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002630:	429a      	cmp	r2, r3
 8002632:	d014      	beq.n	800265e <_ZN10LineSensor11calibrationEv+0x23a>
 8002634:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002638:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800263a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f7fd ff9a 	bl	8000578 <__aeabi_f2d>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	482f      	ldr	r0, [pc, #188]	; (800270c <_ZN10LineSensor11calibrationEv+0x2e8>)
 800264e:	f011 fbe1 	bl	8013e14 <iprintf>
	for(const auto &m : min_values){
 8002652:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002656:	3304      	adds	r3, #4
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x206>
	}
		printf("\n");
 800265e:	200a      	movs	r0, #10
 8002660:	f011 fbf0 	bl	8013e44 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002664:	2300      	movs	r3, #0
 8002666:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800266a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800266e:	2b0d      	cmp	r3, #13
 8002670:	d826      	bhi.n	80026c0 <_ZN10LineSensor11calibrationEv+0x29c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002672:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800267c:	4413      	add	r3, r2
 800267e:	3b60      	subs	r3, #96	; 0x60
 8002680:	ed93 7a00 	vldr	s14, [r3]
 8002684:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800268e:	4413      	add	r3, r2
 8002690:	3b98      	subs	r3, #152	; 0x98
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800269a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800269e:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002710 <_ZN10LineSensor11calibrationEv+0x2ec>
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	3392      	adds	r3, #146	; 0x92
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80026b8:	3301      	adds	r3, #1
 80026ba:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80026be:	e7d4      	b.n	800266a <_ZN10LineSensor11calibrationEv+0x246>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026c6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026ca:	2b0d      	cmp	r3, #13
 80026cc:	d815      	bhi.n	80026fa <_ZN10LineSensor11calibrationEv+0x2d6>
		offset_values_[i] = min_values[i];
 80026ce:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80026d2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026d6:	0092      	lsls	r2, r2, #2
 80026d8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80026dc:	440a      	add	r2, r1
 80026de:	3a98      	subs	r2, #152	; 0x98
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	33a0      	adds	r3, #160	; 0xa0
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3304      	adds	r3, #4
 80026ec:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026ee:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80026f2:	3301      	adds	r3, #1
 80026f4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80026f8:	e7e5      	b.n	80026c6 <_ZN10LineSensor11calibrationEv+0x2a2>
	}


}
 80026fa:	bf00      	nop
 80026fc:	37a4      	adds	r7, #164	; 0xa4
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd90      	pop	{r4, r7, pc}
 8002702:	bf00      	nop
 8002704:	0801802c 	.word	0x0801802c
 8002708:	08018038 	.word	0x08018038
 800270c:	08018044 	.word	0x08018044
 8002710:	447a0000 	.word	0x447a0000

08002714 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	3338      	adds	r3, #56	; 0x38
 8002730:	60fb      	str	r3, [r7, #12]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	429a      	cmp	r2, r3
 8002738:	d012      	beq.n	8002760 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002780 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002750:	db02      	blt.n	8002758 <_ZN10LineSensor13emergencyStopEv+0x44>
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	3301      	adds	r3, #1
 8002756:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	3304      	adds	r3, #4
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	e7e8      	b.n	8002732 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002760:	7ffb      	ldrb	r3, [r7, #31]
 8002762:	2b0d      	cmp	r3, #13
 8002764:	d902      	bls.n	800276c <_ZN10LineSensor13emergencyStopEv+0x58>
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
 800276a:	e001      	b.n	8002770 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 800276c:	2300      	movs	r3, #0
 800276e:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002770:	7dfb      	ldrb	r3, [r7, #23]

}
 8002772:	4618      	mov	r0, r3
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	44160000 	.word	0x44160000

08002784 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>:

float mon_diff, mon_diff_lpf;

uint16_t mon_store_cnt;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger) :
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0), target_velocity_(0), logging_flag_(false)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	621a      	str	r2, [r3, #32]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	629a      	str	r2, [r3, #40]	; 0x28
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	675a      	str	r2, [r3, #116]	; 0x74
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
{
	motor_ = motor;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6a3a      	ldr	r2, [r7, #32]
 8002800:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280c:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002812:	61da      	str	r2, [r3, #28]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002814:	2300      	movs	r3, #0
 8002816:	82fb      	strh	r3, [r7, #22]
 8002818:	8afb      	ldrh	r3, [r7, #22]
 800281a:	f241 726f 	movw	r2, #5999	; 0x176f
 800281e:	4293      	cmp	r3, r2
 8002820:	d80c      	bhi.n	800283c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0xb8>
		velocityTable[i] = 0;
 8002822:	8afb      	ldrh	r3, [r7, #22]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	331e      	adds	r3, #30
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002834:	8afb      	ldrh	r3, [r7, #22]
 8002836:	3301      	adds	r3, #1
 8002838:	82fb      	strh	r3, [r7, #22]
 800283a:	e7ed      	b.n	8002818 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger+0x94>
	}
}
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4618      	mov	r0, r3
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	0000      	movs	r0, r0
 800284c:	0000      	movs	r0, r0
	...

08002850 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002850:	b5b0      	push	{r4, r5, r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800288c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002898:	ee37 7a27 	vadd.f32	s14, s14, s15
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 80028a4:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80028b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80028c4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80028d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80028dc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80028e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80028f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028fc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a1f      	ldr	r2, [pc, #124]	; (8002980 <_ZN9LineTrace9calcErrorEv+0x130>)
 8002904:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe35 	bl	8000578 <__aeabi_f2d>
 800290e:	a318      	add	r3, pc, #96	; (adr r3, 8002970 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f7fd fe88 	bl	8000628 <__aeabi_dmul>
 8002918:	4603      	mov	r3, r0
 800291a:	460c      	mov	r4, r1
 800291c:	4625      	mov	r5, r4
 800291e:	461c      	mov	r4, r3
 8002920:	4b18      	ldr	r3, [pc, #96]	; (8002984 <_ZN9LineTrace9calcErrorEv+0x134>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fe27 	bl	8000578 <__aeabi_f2d>
 800292a:	a313      	add	r3, pc, #76	; (adr r3, 8002978 <_ZN9LineTrace9calcErrorEv+0x128>)
 800292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002930:	f7fd fe7a 	bl	8000628 <__aeabi_dmul>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4620      	mov	r0, r4
 800293a:	4629      	mov	r1, r5
 800293c:	f7fd fcbe 	bl	80002bc <__adddf3>
 8002940:	4603      	mov	r3, r0
 8002942:	460c      	mov	r4, r1
 8002944:	4618      	mov	r0, r3
 8002946:	4621      	mov	r1, r4
 8002948:	f7fe f966 	bl	8000c18 <__aeabi_d2f>
 800294c:	4603      	mov	r3, r0
 800294e:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <_ZN9LineTrace9calcErrorEv+0x138>)
 8002954:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <_ZN9LineTrace9calcErrorEv+0x134>)
 800295a:	6013      	str	r3, [r2, #0]

	return diff;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	ee07 3a90 	vmov	s15, r3

}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bdb0      	pop	{r4, r5, r7, pc}
 800296c:	f3af 8000 	nop.w
 8002970:	47ae147b 	.word	0x47ae147b
 8002974:	3fb47ae1 	.word	0x3fb47ae1
 8002978:	d70a3d71 	.word	0xd70a3d71
 800297c:	3fed70a3 	.word	0x3fed70a3
 8002980:	20000258 	.word	0x20000258
 8002984:	20000264 	.word	0x20000264
 8002988:	2000025c 	.word	0x2000025c
 800298c:	00000000 	.word	0x00000000

08002990 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff59 	bl	8002850 <_ZN9LineTrace9calcErrorEv>
 800299e:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 80029ac:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <_ZN9LineTrace8pidTraceEv+0x110>)
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	}

	p = kp_ * diff;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	edd3 7a08 	vldr	s15, [r3, #32]
 80029c2:	ed97 7a05 	vldr	s14, [r7, #20]
 80029c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ca:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80029d4:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <_ZN9LineTrace8pidTraceEv+0x114>)
 80029d6:	edd3 7a00 	vldr	s15, [r3]
 80029da:	edd7 6a05 	vldr	s13, [r7, #20]
 80029de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80029e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029e6:	ee17 0a90 	vmov	r0, s15
 80029ea:	f7fd fdc5 	bl	8000578 <__aeabi_f2d>
 80029ee:	a32a      	add	r3, pc, #168	; (adr r3, 8002a98 <_ZN9LineTrace8pidTraceEv+0x108>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd ff42 	bl	800087c <__aeabi_ddiv>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	4618      	mov	r0, r3
 80029fe:	4621      	mov	r1, r4
 8002a00:	f7fe f90a 	bl	8000c18 <__aeabi_d2f>
 8002a04:	4603      	mov	r3, r0
 8002a06:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdb3 	bl	8000578 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a24:	ee17 0a90 	vmov	r0, s15
 8002a28:	f7fd fda6 	bl	8000578 <__aeabi_f2d>
 8002a2c:	a31a      	add	r3, pc, #104	; (adr r3, 8002a98 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fdf9 	bl	8000628 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	f7fd fc3d 	bl	80002bc <__adddf3>
 8002a42:	4603      	mov	r3, r0
 8002a44:	460c      	mov	r4, r1
 8002a46:	4618      	mov	r0, r3
 8002a48:	4621      	mov	r1, r4
 8002a4a:	f7fe f8e5 	bl	8000c18 <__aeabi_d2f>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a52:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002a54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a58:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8002a78:	edd7 0a02 	vldr	s1, [r7, #8]
 8002a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a80:	4610      	mov	r0, r2
 8002a82:	f001 fbd1 	bl	8004228 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002a86:	4a07      	ldr	r2, [pc, #28]	; (8002aa4 <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	6013      	str	r3, [r2, #0]

}
 8002a8c:	bf00      	nop
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}
 8002a94:	f3af 8000 	nop.w
 8002a98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a9c:	3f50624d 	.word	0x3f50624d
 8002aa0:	2000026c 	.word	0x2000026c
 8002aa4:	20000268 	.word	0x20000268

08002aa8 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalCnt();
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fe fcef 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
	odometry_->clearPotition();
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 fe94 	bl	80037ec <_ZN8Odometry13clearPotitionEv>
	//logger_->start();

	logging_flag_ = true;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002acc:	bf00      	nop
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 fc76 	bl	80033d2 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b20:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b28:	edc7 7a04 	vstr	s15, [r7, #16]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002b3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b4c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002b50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b54:	edc7 7a03 	vstr	s15, [r7, #12]
	bool flag = false;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	75fb      	strb	r3, [r7, #23]

	if(sensor_edge_val_l < 500 && sensor_edge_val_r < 500){
 8002b5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b60:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002bb0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b6c:	d50f      	bpl.n	8002b8e <_ZN9LineTrace11isCrossLineEv+0x96>
 8002b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b72:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002bb0 <_ZN9LineTrace11isCrossLineEv+0xb8>
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	d506      	bpl.n	8002b8e <_ZN9LineTrace11isCrossLineEv+0x96>
		cnt++;
 8002b80:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	3301      	adds	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b8a:	801a      	strh	r2, [r3, #0]
 8002b8c:	e002      	b.n	8002b94 <_ZN9LineTrace11isCrossLineEv+0x9c>
	}
	else{
		cnt = 0;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 5){
 8002b94:	4b07      	ldr	r3, [pc, #28]	; (8002bb4 <_ZN9LineTrace11isCrossLineEv+0xbc>)
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d901      	bls.n	8002ba0 <_ZN9LineTrace11isCrossLineEv+0xa8>
		flag = true;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	75fb      	strb	r3, [r7, #23]
		//cnt = 0;
	}

	return flag;
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	43fa0000 	.word	0x43fa0000
 8002bb4:	20000270 	.word	0x20000270

08002bb8 <_ZN9LineTrace4initEv>:

}

// -------public---------- //
void LineTrace::init()
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4912      	ldr	r1, [pc, #72]	; (8002c10 <_ZN9LineTrace4initEv+0x58>)
 8002bc8:	4812      	ldr	r0, [pc, #72]	; (8002c14 <_ZN9LineTrace4initEv+0x5c>)
 8002bca:	f7fe fd73 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8002bce:	f107 0310 	add.w	r3, r7, #16
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	4910      	ldr	r1, [pc, #64]	; (8002c18 <_ZN9LineTrace4initEv+0x60>)
 8002bd6:	480f      	ldr	r0, [pc, #60]	; (8002c14 <_ZN9LineTrace4initEv+0x5c>)
 8002bd8:	f7fe fd6c 	bl	80016b4 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8002bdc:	f107 030c 	add.w	r3, r7, #12
 8002be0:	2201      	movs	r2, #1
 8002be2:	490e      	ldr	r1, [pc, #56]	; (8002c1c <_ZN9LineTrace4initEv+0x64>)
 8002be4:	480b      	ldr	r0, [pc, #44]	; (8002c14 <_ZN9LineTrace4initEv+0x5c>)
 8002be6:	f7fe fd65 	bl	80016b4 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8002bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bee:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf2:	edd7 6a03 	vldr	s13, [r7, #12]
 8002bf6:	eeb0 1a66 	vmov.f32	s2, s13
 8002bfa:	eef0 0a47 	vmov.f32	s1, s14
 8002bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f80c 	bl	8002c20 <_ZN9LineTrace7setGainEfff>

}
 8002c08:	bf00      	nop
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	08018084 	.word	0x08018084
 8002c14:	0801808c 	.word	0x0801808c
 8002c18:	08018094 	.word	0x08018094
 8002c1c:	0801809c 	.word	0x0801809c

08002c20 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002c30:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	621a      	str	r2, [r3, #32]
	ki_ = ki;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
	kd_ = kd;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002c46:	bf00      	nop
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
	return kp_;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	ee07 3a90 	vmov	s15, r3
}
 8002c62:	eeb0 0a67 	vmov.f32	s0, s15
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	return ki_;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	ee07 3a90 	vmov	s15, r3
}
 8002c80:	eeb0 0a67 	vmov.f32	s0, s15
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	return kd_;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	ee07 3a90 	vmov	s15, r3
}
 8002c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b083      	sub	sp, #12
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d053      	beq.n	8002da2 <_ZN9LineTrace4flipEv+0xba>
		// ---- line following processing -----//
		pidTrace();
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fe48 	bl	8002990 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff fef9 	bl	8002af8 <_ZN9LineTrace11isCrossLineEv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d011      	beq.n	8002d30 <_ZN9LineTrace4flipEv+0x48>
			led_.LR(1, -1);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	330c      	adds	r3, #12
 8002d10:	f04f 32ff 	mov.w	r2, #4294967295
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff f9a4 	bl	8002064 <_ZN3LED2LREaa>
			side_sensor_->enableIgnore();
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f819 	bl	8003d58 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fbd9 	bl	80014e2 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}
		else{
		}
		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 100){
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f001 f829 	bl	8003d8c <_ZN10SideSensor13getIgnoreFlagEv>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00f      	beq.n	8002d60 <_ZN9LineTrace4flipEv+0x78>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe fbbd 	bl	80014c4 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8002d4a:	eeb0 7a40 	vmov.f32	s14, s0
 8002d4e:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002dac <_ZN9LineTrace4flipEv+0xc4>
 8002d52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	db01      	blt.n	8002d60 <_ZN9LineTrace4flipEv+0x78>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <_ZN9LineTrace4flipEv+0x7a>
 8002d60:	2300      	movs	r3, #0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00c      	beq.n	8002d80 <_ZN9LineTrace4flipEv+0x98>
			side_sensor_->disableIgnore();
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 f801 	bl	8003d72 <_ZN10SideSensor13disableIgnoreEv>
			led_.LR(0, -1);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	330c      	adds	r3, #12
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff f972 	bl	8002064 <_ZN3LED2LREaa>
		}

		// ----- emergency stop processingj:w------//
		if(line_sensor_->emergencyStop() == true){
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff fcc5 	bl	8002714 <_ZN10LineSensor13emergencyStopEv>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <_ZN9LineTrace4flipEv+0xba>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	eddf 0a06 	vldr	s1, [pc, #24]	; 8002db0 <_ZN9LineTrace4flipEv+0xc8>
 8002d98:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8002db0 <_ZN9LineTrace4flipEv+0xc8>
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f001 fa43 	bl	8004228 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		else{
			//led_.LR(0, -1);

		}
	}
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	42c80000 	.word	0x42c80000
 8002db0:	00000000 	.word	0x00000000

08002db4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	i_reset_flag_ = true;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	velocity_ctrl_->start();
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 fa82 	bl	80042da <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ffac 	bl	8003d38 <_ZN10SideSensor17resetWhiteLineCntEv>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	velocity_ctrl_->stop();
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f001 fa7f 	bl	8004300 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	330c      	adds	r3, #12
 8002e06:	2201      	movs	r2, #1
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f929 	bl	8002064 <_ZN3LED2LREaa>
	logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69d8      	ldr	r0, [r3, #28]
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <_ZN9LineTrace4stopEv+0x5c>)
 8002e18:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <_ZN9LineTrace4stopEv+0x60>)
 8002e1a:	490c      	ldr	r1, [pc, #48]	; (8002e4c <_ZN9LineTrace4stopEv+0x64>)
 8002e1c:	f000 fa29 	bl	8003272 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
	led_.LR(-1, 0);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	330c      	adds	r3, #12
 8002e24:	2200      	movs	r2, #0
 8002e26:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff f91a 	bl	8002064 <_ZN3LED2LREaa>
	logger_->resetLogs();
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fa3f 	bl	80032b8 <_ZN6Logger9resetLogsEv>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	080180a4 	.word	0x080180a4
 8002e48:	080180b0 	.word	0x080180b0
 8002e4c:	080180c0 	.word	0x080180c0

08002e50 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	737b      	strb	r3, [r7, #13]
	start();
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffa7 	bl	8002db4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8002e66:	7b7b      	ldrb	r3, [r7, #13]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d13b      	bne.n	8002ee4 <_ZN9LineTrace7runningEv+0x94>
		switch(stage){
 8002e6c:	89fb      	ldrh	r3, [r7, #14]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <_ZN9LineTrace7runningEv+0x28>
 8002e72:	2b0a      	cmp	r3, #10
 8002e74:	d013      	beq.n	8002e9e <_ZN9LineTrace7runningEv+0x4e>
 8002e76:	e034      	b.n	8002ee2 <_ZN9LineTrace7runningEv+0x92>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 ff4f 	bl	8003d20 <_ZN10SideSensor16getWhiteLineCntREv>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf0c      	ite	eq
 8002e88:	2301      	moveq	r3, #1
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d024      	beq.n	8002edc <_ZN9LineTrace7runningEv+0x8c>
				loggerStart();
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff fe08 	bl	8002aa8 <_ZN9LineTrace11loggerStartEv>
				stage = 10;
 8002e98:	230a      	movs	r3, #10
 8002e9a:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8002e9c:	e01e      	b.n	8002edc <_ZN9LineTrace7runningEv+0x8c>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 ff3c 	bl	8003d20 <_ZN10SideSensor16getWhiteLineCntREv>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d013      	beq.n	8002ee0 <_ZN9LineTrace7runningEv+0x90>
				loggerStop();
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fe0b 	bl	8002ad4 <_ZN9LineTrace10loggerStopEv>
				HAL_Delay(100); //Run through after the goal
 8002ebe:	2064      	movs	r0, #100	; 0x64
 8002ec0:	f004 fbc8 	bl	8007654 <HAL_Delay>

				setTargetVelocity(0);
 8002ec4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002ef4 <_ZN9LineTrace7runningEv+0xa4>
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff fefe 	bl	8002cca <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8002ece:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ed2:	f004 fbbf 	bl	8007654 <HAL_Delay>

				goal_flag = true;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	737b      	strb	r3, [r7, #13]

			}

			break;
 8002eda:	e001      	b.n	8002ee0 <_ZN9LineTrace7runningEv+0x90>
			break;
 8002edc:	bf00      	nop
 8002ede:	e7c2      	b.n	8002e66 <_ZN9LineTrace7runningEv+0x16>
			break;
 8002ee0:	bf00      	nop
	while(goal_flag == false){
 8002ee2:	e7c0      	b.n	8002e66 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff ff7f 	bl	8002de8 <_ZN9LineTrace4stopEv>

}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	00000000 	.word	0x00000000

08002ef8 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	ed2d 8b02 	vpush	{d8}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true && encoder_->getTotalDistance() >= 10){
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00f      	beq.n	8002f2e <_ZN9LineTrace9storeLogsEv+0x36>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fa81 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f18:	eeb0 7a40 	vmov.f32	s14, s0
 8002f1c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8002f20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f28:	db01      	blt.n	8002f2e <_ZN9LineTrace9storeLogsEv+0x36>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <_ZN9LineTrace9storeLogsEv+0x38>
 8002f2e:	2300      	movs	r3, #0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d02b      	beq.n	8002f8c <_ZN9LineTrace9storeLogsEv+0x94>
		logger_->storeDistanceAndTheta(encoder_->getTotalDistance(), odometry_->getTheta());
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	69dc      	ldr	r4, [r3, #28]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fe fa6c 	bl	800141a <_ZN7Encoder16getTotalDistanceEv>
 8002f42:	eeb0 8a40 	vmov.f32	s16, s0
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fc3d 	bl	80037ca <_ZN8Odometry8getThetaEv>
 8002f50:	ec53 2b10 	vmov	r2, r3, d0
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fe5e 	bl	8000c18 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	ee00 3a90 	vmov	s1, r3
 8002f62:	eeb0 0a48 	vmov.f32	s0, s16
 8002f66:	4620      	mov	r0, r4
 8002f68:	f000 f911 	bl	800318e <_ZN6Logger21storeDistanceAndThetaEff>
		encoder_->clearTotalCnt();
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fe fa91 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
		odometry_->clearPotition();
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fc36 	bl	80037ec <_ZN8Odometry13clearPotitionEv>
		mon_store_cnt++;
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <_ZN9LineTrace9storeLogsEv+0xa0>)
 8002f8a:	801a      	strh	r2, [r3, #0]
	}
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	ecbd 8b02 	vpop	{d8}
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	20000260 	.word	0x20000260

08002f9c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002faa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002fb8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	801a      	strh	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002fc6:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002fca:	2200      	movs	r2, #0
 8002fcc:	801a      	strh	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8002fd4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 8002fd8:	2200      	movs	r2, #0
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
	...

08002fec <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002ff8:	f7fe fbe8 	bl	80017cc <sd_mount>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b00      	cmp	r3, #0
 800300a:	d019      	beq.n	8003040 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 800300c:	481b      	ldr	r0, [pc, #108]	; (800307c <_ZN6Logger10sdCardInitEv+0x90>)
 800300e:	f010 ff89 	bl	8013f24 <puts>

	  lcd_clear();
 8003012:	f7fe f845 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003016:	2100      	movs	r1, #0
 8003018:	2000      	movs	r0, #0
 800301a:	f7fe f851 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800301e:	4818      	ldr	r0, [pc, #96]	; (8003080 <_ZN6Logger10sdCardInitEv+0x94>)
 8003020:	f7fe f878 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003024:	2101      	movs	r1, #1
 8003026:	2000      	movs	r0, #0
 8003028:	f7fe f84a 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800302c:	4815      	ldr	r0, [pc, #84]	; (8003084 <_ZN6Logger10sdCardInitEv+0x98>)
 800302e:	f7fe f871 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003032:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003036:	f004 fb0d 	bl	8007654 <HAL_Delay>

	  ret = true;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e018      	b.n	8003072 <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8003040:	4811      	ldr	r0, [pc, #68]	; (8003088 <_ZN6Logger10sdCardInitEv+0x9c>)
 8003042:	f010 ff6f 	bl	8013f24 <puts>

	  lcd_clear();
 8003046:	f7fe f82b 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800304a:	2100      	movs	r1, #0
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe f837 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003052:	480b      	ldr	r0, [pc, #44]	; (8003080 <_ZN6Logger10sdCardInitEv+0x94>)
 8003054:	f7fe f85e 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003058:	2101      	movs	r1, #1
 800305a:	2000      	movs	r0, #0
 800305c:	f7fe f830 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003060:	480a      	ldr	r0, [pc, #40]	; (800308c <_ZN6Logger10sdCardInitEv+0xa0>)
 8003062:	f7fe f857 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003066:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800306a:	f004 faf3 	bl	8007654 <HAL_Delay>

	  ret = false;
 800306e:	2300      	movs	r3, #0
 8003070:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003072:	7bfb      	ldrb	r3, [r7, #15]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	080180cc 	.word	0x080180cc
 8003080:	080180dc 	.word	0x080180dc
 8003084:	080180e8 	.word	0x080180e8
 8003088:	080180f0 	.word	0x080180f0
 800308c:	08018100 	.word	0x08018100

08003090 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d029      	beq.n	8003100 <_ZN6Logger8storeLogEf+0x70>
		store_data_float_[log_index_tim_] = data;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030b2:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030c8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030d8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030dc:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030e4:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d906      	bls.n	8003100 <_ZN6Logger8storeLogEf+0x70>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80030f8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80030fc:	2200      	movs	r2, #0
 80030fe:	801a      	strh	r2, [r3, #0]
	}
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800311e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d02c      	beq.n	8003182 <_ZN6Logger9storeLog2Ef+0x76>
		store_data_float2_[log_index_tim2_] = data;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800312e:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800313a:	3308      	adds	r3, #8
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800314a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	3301      	adds	r3, #1
 8003152:	b29a      	uxth	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800315a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800315e:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8003166:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	f241 3287 	movw	r2, #4999	; 0x1387
 8003170:	4293      	cmp	r3, r2
 8003172:	d906      	bls.n	8003182 <_ZN6Logger9storeLog2Ef+0x76>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800317a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 800317e:	2200      	movs	r2, #0
 8003180:	801a      	strh	r2, [r3, #0]
	}
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 800318e:	b480      	push	{r7}
 8003190:	b085      	sub	sp, #20
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	ed87 0a02 	vstr	s0, [r7, #8]
 800319a:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031a4:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80031b0:	3310      	adds	r3, #16
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031c0:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031da:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031ea:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031ee:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80031f6:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	f241 726f 	movw	r2, #5999	; 0x176f
 8003200:	4293      	cmp	r3, r2
 8003202:	d906      	bls.n	8003212 <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800320a:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 800320e:	2200      	movs	r2, #0
 8003210:	801a      	strh	r2, [r3, #0]
	//}
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af02      	add	r7, sp, #8
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	2300      	movs	r3, #0
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	68b8      	ldr	r0, [r7, #8]
 800323a:	f7fe f9d5 	bl	80015e8 <sd_write_array_float>
}
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af02      	add	r7, sp, #8
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003258:	3320      	adds	r3, #32
 800325a:	2200      	movs	r2, #0
 800325c:	9200      	str	r2, [sp, #0]
 800325e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	68b8      	ldr	r0, [r7, #8]
 8003266:	f7fe f9bf 	bl	80015e8 <sd_write_array_float>
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b086      	sub	sp, #24
 8003276:	af02      	add	r7, sp, #8
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	607a      	str	r2, [r7, #4]
 800327e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003286:	3340      	adds	r3, #64	; 0x40
 8003288:	2200      	movs	r2, #0
 800328a:	9200      	str	r2, [sp, #0]
 800328c:	f241 7270 	movw	r2, #6000	; 0x1770
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68b8      	ldr	r0, [r7, #8]
 8003294:	f7fe f9a8 	bl	80015e8 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	4613      	mov	r3, r2
 80032a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80032a8:	6839      	ldr	r1, [r7, #0]
 80032aa:	68b8      	ldr	r0, [r7, #8]
 80032ac:	f7fe f99c 	bl	80015e8 <sd_write_array_float>
}
 80032b0:	bf00      	nop
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZN6Logger9resetLogsEv>:
	user_fclose();
}
*/

void Logger::resetLogs()
{
 80032b8:	b480      	push	{r7}
 80032ba:	b093      	sub	sp, #76	; 0x4c
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
 80032c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
 80032c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ca:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80032ce:	3320      	adds	r3, #32
 80032d0:	633b      	str	r3, [r7, #48]	; 0x30
 80032d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d009      	beq.n	80032ee <_ZN6Logger9resetLogsEv+0x36>
 80032da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
		log = 0;
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 80032e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032e8:	3304      	adds	r3, #4
 80032ea:	647b      	str	r3, [r7, #68]	; 0x44
 80032ec:	e7f1      	b.n	80032d2 <_ZN6Logger9resetLogsEv+0x1a>
	}
	for(auto &log : store_data_float2_){
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80032f4:	3320      	adds	r3, #32
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	643b      	str	r3, [r7, #64]	; 0x40
 80032fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fe:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8003302:	3320      	adds	r3, #32
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	429a      	cmp	r2, r3
 800330c:	d009      	beq.n	8003322 <_ZN6Logger9resetLogsEv+0x6a>
 800330e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003310:	623b      	str	r3, [r7, #32]
		log = 0;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 800331a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331c:	3304      	adds	r3, #4
 800331e:	643b      	str	r3, [r7, #64]	; 0x40
 8003320:	e7f1      	b.n	8003306 <_ZN6Logger9resetLogsEv+0x4e>
	/*
	for(auto &log : store_data_uint16_){
		log = 0;
	}
	*/
	for(auto &log : store_distance_){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8003328:	3340      	adds	r3, #64	; 0x40
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003336:	3340      	adds	r3, #64	; 0x40
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	429a      	cmp	r2, r3
 8003340:	d009      	beq.n	8003356 <_ZN6Logger9resetLogsEv+0x9e>
 8003342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003344:	617b      	str	r3, [r7, #20]
		log = 0;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance_){
 800334e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003350:	3304      	adds	r3, #4
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	e7f1      	b.n	800333a <_ZN6Logger9resetLogsEv+0x82>
	}
	for(auto &log : store_theta_){
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8003368:	3340      	adds	r3, #64	; 0x40
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	429a      	cmp	r2, r3
 8003372:	d009      	beq.n	8003388 <_ZN6Logger9resetLogsEv+0xd0>
 8003374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003376:	60bb      	str	r3, [r7, #8]
		log = 0;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta_){
 8003380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003382:	3304      	adds	r3, #4
 8003384:	63bb      	str	r3, [r7, #56]	; 0x38
 8003386:	e7f1      	b.n	800336c <_ZN6Logger9resetLogsEv+0xb4>
	}

	log_index_tim_ = 0;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800338e:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8003392:	2200      	movs	r2, #0
 8003394:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 800339c:	f503 73e3 	add.w	r3, r3, #454	; 0x1c6
 80033a0:	2200      	movs	r2, #0
 80033a2:	801a      	strh	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	374c      	adds	r7, #76	; 0x4c
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <_ZN6Logger5startEv>:

void Logger::start()
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033be:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80033e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	805a      	strh	r2, [r3, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <_ZN5Motor4initEv>:

void Motor::init()
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003420:	2108      	movs	r1, #8
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <_ZN5Motor4initEv+0x20>)
 8003424:	f009 fade 	bl	800c9e4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8003428:	210c      	movs	r1, #12
 800342a:	4803      	ldr	r0, [pc, #12]	; (8003438 <_ZN5Motor4initEv+0x20>)
 800342c:	f009 fada 	bl	800c9e4 <HAL_TIM_PWM_Start>

}
 8003430:	bf00      	nop
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20035a14 	.word	0x20035a14

0800343c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da0d      	bge.n	800346a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800344e:	2200      	movs	r2, #0
 8003450:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003454:	481f      	ldr	r0, [pc, #124]	; (80034d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003456:	f005 fb93 	bl	8008b80 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003460:	b29b      	uxth	r3, r3
 8003462:	425b      	negs	r3, r3
 8003464:	b29b      	uxth	r3, r3
 8003466:	81fb      	strh	r3, [r7, #14]
 8003468:	e00a      	b.n	8003480 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800346a:	2201      	movs	r2, #1
 800346c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003470:	4818      	ldr	r0, [pc, #96]	; (80034d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003472:	f005 fb85 	bl	8008b80 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f9b3 3000 	ldrsh.w	r3, [r3]
 800347c:	b29b      	uxth	r3, r3
 800347e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003486:	2b00      	cmp	r3, #0
 8003488:	da0d      	bge.n	80034a6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800348a:	2201      	movs	r2, #1
 800348c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003490:	4810      	ldr	r0, [pc, #64]	; (80034d4 <_ZN5Motor9motorCtrlEv+0x98>)
 8003492:	f005 fb75 	bl	8008b80 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800349c:	b29b      	uxth	r3, r3
 800349e:	425b      	negs	r3, r3
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	81bb      	strh	r3, [r7, #12]
 80034a4:	e00a      	b.n	80034bc <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 80034a6:	2200      	movs	r2, #0
 80034a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80034ac:	4809      	ldr	r0, [pc, #36]	; (80034d4 <_ZN5Motor9motorCtrlEv+0x98>)
 80034ae:	f005 fb67 	bl	8008b80 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 80034bc:	89fa      	ldrh	r2, [r7, #14]
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 80034c4:	89ba      	ldrh	r2, [r7, #12]
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <_ZN5Motor9motorCtrlEv+0x9c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40020c00 	.word	0x40020c00
 80034d8:	20035a14 	.word	0x20035a14

080034dc <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6178      	str	r0, [r7, #20]
 80034e4:	ed87 0b02 	vstr	d0, [r7, #8]
 80034e8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	4b30      	ldr	r3, [pc, #192]	; (80035b4 <_ZN5Motor8setRatioEdd+0xd8>)
 80034f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034f6:	f7fd fb27 	bl	8000b48 <__aeabi_dcmpgt>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d005      	beq.n	800350c <_ZN5Motor8setRatioEdd+0x30>
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	4c2b      	ldr	r4, [pc, #172]	; (80035b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003506:	e9c7 3402 	strd	r3, r4, [r7, #8]
 800350a:	e00e      	b.n	800352a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b29      	ldr	r3, [pc, #164]	; (80035b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003516:	f7fd faf9 	bl	8000b0c <__aeabi_dcmplt>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <_ZN5Motor8setRatioEdd+0x4e>
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	4c24      	ldr	r4, [pc, #144]	; (80035b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003526:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	4b21      	ldr	r3, [pc, #132]	; (80035b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003534:	f7fd fb08 	bl	8000b48 <__aeabi_dcmpgt>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <_ZN5Motor8setRatioEdd+0x6e>
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	4c1c      	ldr	r4, [pc, #112]	; (80035b4 <_ZN5Motor8setRatioEdd+0xd8>)
 8003544:	e9c7 3400 	strd	r3, r4, [r7]
 8003548:	e00e      	b.n	8003568 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	4b1a      	ldr	r3, [pc, #104]	; (80035b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003550:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003554:	f7fd fada 	bl	8000b0c <__aeabi_dcmplt>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d004      	beq.n	8003568 <_ZN5Motor8setRatioEdd+0x8c>
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	4c15      	ldr	r4, [pc, #84]	; (80035b8 <_ZN5Motor8setRatioEdd+0xdc>)
 8003564:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_ZN5Motor8setRatioEdd+0xe0>)
 800356e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003572:	f7fd f859 	bl	8000628 <__aeabi_dmul>
 8003576:	4603      	mov	r3, r0
 8003578:	460c      	mov	r4, r1
 800357a:	4618      	mov	r0, r3
 800357c:	4621      	mov	r1, r4
 800357e:	f7fd fb03 	bl	8000b88 <__aeabi_d2iz>
 8003582:	4603      	mov	r3, r0
 8003584:	b21a      	sxth	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <_ZN5Motor8setRatioEdd+0xe0>)
 8003590:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003594:	f7fd f848 	bl	8000628 <__aeabi_dmul>
 8003598:	4603      	mov	r3, r0
 800359a:	460c      	mov	r4, r1
 800359c:	4618      	mov	r0, r3
 800359e:	4621      	mov	r1, r4
 80035a0:	f7fd faf2 	bl	8000b88 <__aeabi_d2iz>
 80035a4:	4603      	mov	r3, r0
 80035a6:	b21a      	sxth	r2, r3
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	805a      	strh	r2, [r3, #2]

}
 80035ac:	bf00      	nop
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}
 80035b4:	3ff00000 	.word	0x3ff00000
 80035b8:	bff00000 	.word	0xbff00000
 80035bc:	409c2000 	.word	0x409c2000

080035c0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 80035c0:	b490      	push	{r4, r7}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	f04f 0300 	mov.w	r3, #0
 80035d4:	f04f 0400 	mov.w	r4, #0
 80035d8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	f04f 0400 	mov.w	r4, #0
 80035e6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	f04f 0400 	mov.w	r4, #0
 80035f4:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	683a      	ldr	r2, [r7, #0]
 8003608:	609a      	str	r2, [r3, #8]
}
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bc90      	pop	{r4, r7}
 8003614:	4770      	bx	lr
	...

08003618 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8003618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	4618      	mov	r0, r3
 8003628:	f7fe fa9e 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 800362c:	ee10 3a10 	vmov	r3, s0
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ffa1 	bl	8000578 <__aeabi_f2d>
 8003636:	4603      	mov	r3, r0
 8003638:	460c      	mov	r4, r1
 800363a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7fd feda 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8003648:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800364c:	a357      	add	r3, pc, #348	; (adr r3, 80037ac <_ZN8Odometry12calcPotitionEv+0x194>)
 800364e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003652:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003656:	f7fc ffe7 	bl	8000628 <__aeabi_dmul>
 800365a:	4603      	mov	r3, r0
 800365c:	460c      	mov	r4, r1
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f7fc ff84 	bl	8000578 <__aeabi_f2d>
 8003670:	4682      	mov	sl, r0
 8003672:	468b      	mov	fp, r1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003688:	f7fd f8f8 	bl	800087c <__aeabi_ddiv>
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	4640      	mov	r0, r8
 8003692:	4649      	mov	r1, r9
 8003694:	f7fc fe12 	bl	80002bc <__adddf3>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	ec43 2b17 	vmov	d7, r2, r3
 80036a0:	eeb0 0a47 	vmov.f32	s0, s14
 80036a4:	eef0 0a67 	vmov.f32	s1, s15
 80036a8:	f00e fce2 	bl	8012070 <cos>
 80036ac:	ec53 2b10 	vmov	r2, r3, d0
 80036b0:	4650      	mov	r0, sl
 80036b2:	4659      	mov	r1, fp
 80036b4:	f7fc ffb8 	bl	8000628 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4620      	mov	r0, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	f7fc fdfc 	bl	80002bc <__adddf3>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7fc ff4f 	bl	8000578 <__aeabi_f2d>
 80036da:	4682      	mov	sl, r0
 80036dc:	468b      	mov	fp, r1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036f2:	f7fd f8c3 	bl	800087c <__aeabi_ddiv>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4640      	mov	r0, r8
 80036fc:	4649      	mov	r1, r9
 80036fe:	f7fc fddd 	bl	80002bc <__adddf3>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	ec43 2b17 	vmov	d7, r2, r3
 800370a:	eeb0 0a47 	vmov.f32	s0, s14
 800370e:	eef0 0a67 	vmov.f32	s1, s15
 8003712:	f00e fcf1 	bl	80120f8 <sin>
 8003716:	ec53 2b10 	vmov	r2, r3, d0
 800371a:	4650      	mov	r0, sl
 800371c:	4659      	mov	r1, fp
 800371e:	f7fc ff83 	bl	8000628 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fc fdc7 	bl	80002bc <__adddf3>
 800372e:	4603      	mov	r3, r0
 8003730:	460c      	mov	r4, r1
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8003744:	461a      	mov	r2, r3
 8003746:	4623      	mov	r3, r4
 8003748:	f7fc fdb8 	bl	80002bc <__adddf3>
 800374c:	4603      	mov	r3, r0
 800374e:	460c      	mov	r4, r1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800375c:	4618      	mov	r0, r3
 800375e:	4621      	mov	r1, r4
 8003760:	f7fd fa5a 	bl	8000c18 <__aeabi_d2f>
 8003764:	4602      	mov	r2, r0
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <_ZN8Odometry12calcPotitionEv+0x188>)
 8003768:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8003770:	4618      	mov	r0, r3
 8003772:	4621      	mov	r1, r4
 8003774:	f7fd fa50 	bl	8000c18 <__aeabi_d2f>
 8003778:	4602      	mov	r2, r0
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <_ZN8Odometry12calcPotitionEv+0x18c>)
 800377c:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8003784:	4618      	mov	r0, r3
 8003786:	4621      	mov	r1, r4
 8003788:	f7fd fa46 	bl	8000c18 <__aeabi_d2f>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <_ZN8Odometry12calcPotitionEv+0x190>)
 8003790:	601a      	str	r2, [r3, #0]
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800379c:	f3af 8000 	nop.w
 80037a0:	20000274 	.word	0x20000274
 80037a4:	20000278 	.word	0x20000278
 80037a8:	2000027c 	.word	0x2000027c
 80037ac:	d2f1a9fc 	.word	0xd2f1a9fc
 80037b0:	3f50624d 	.word	0x3f50624d

080037b4 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	calcPotition();
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff2b 	bl	8003618 <_ZN8Odometry12calcPotitionEv>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_ZN8Odometry8getThetaEv>:
{
	return y_;
}

double Odometry::getTheta()
{
 80037ca:	b490      	push	{r4, r7}
 80037cc:	b082      	sub	sp, #8
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
	return theta_;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80037d8:	ec44 3b17 	vmov	d7, r3, r4
}
 80037dc:	eeb0 0a47 	vmov.f32	s0, s14
 80037e0:	eef0 0a67 	vmov.f32	s1, s15
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc90      	pop	{r4, r7}
 80037ea:	4770      	bx	lr

080037ec <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80037ec:	b490      	push	{r4, r7}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	f04f 0400 	mov.w	r4, #0
 80037fe:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	f04f 0400 	mov.w	r4, #0
 800380c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f04f 0400 	mov.w	r4, #0
 800381a:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bc90      	pop	{r4, r7}
 8003826:	4770      	bx	lr

08003828 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8003828:	b490      	push	{r4, r7}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	f04f 0400 	mov.w	r4, #0
 8003840:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	f04f 0400 	mov.w	r4, #0
 800384e:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003866:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800386a:	2200      	movs	r2, #0
 800386c:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800386e:	4a29      	ldr	r2, [pc, #164]	; (8003914 <_ZN13PathFollowingC1Ev+0xec>)
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 800387c:	4a25      	ldr	r2, [pc, #148]	; (8003914 <_ZN13PathFollowingC1Ev+0xec>)
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	f04f 0400 	mov.w	r4, #0
 8003886:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <_ZN13PathFollowingC1Ev+0xec>)
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	f04f 0400 	mov.w	r4, #0
 80038a2:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80038a6:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	f04f 0400 	mov.w	r4, #0
 80038b0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	f04f 0400 	mov.w	r4, #0
 80038be:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80038c2:	4a15      	ldr	r2, [pc, #84]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	f04f 0400 	mov.w	r4, #0
 80038cc:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80038de:	4a0e      	ldr	r2, [pc, #56]	; (8003918 <_ZN13PathFollowingC1Ev+0xf0>)
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	f04f 0400 	mov.w	r4, #0
 80038e8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80038ec:	4a0b      	ldr	r2, [pc, #44]	; (800391c <_ZN13PathFollowingC1Ev+0xf4>)
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	f04f 0400 	mov.w	r4, #0
 80038f6:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80038fa:	4a08      	ldr	r2, [pc, #32]	; (800391c <_ZN13PathFollowingC1Ev+0xf4>)
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	f04f 0400 	mov.w	r4, #0
 8003904:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bc90      	pop	{r4, r7}
 8003912:	4770      	bx	lr
 8003914:	20035f18 	.word	0x20035f18
 8003918:	20035ea8 	.word	0x20035ea8
 800391c:	20035f08 	.word	0x20035f08

08003920 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8003928:	f001 fce2 	bl	80052f0 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 800392c:	f107 0318 	add.w	r3, r7, #24
 8003930:	2201      	movs	r2, #1
 8003932:	4915      	ldr	r1, [pc, #84]	; (8003988 <_ZN13PathFollowing4initEv+0x68>)
 8003934:	4815      	ldr	r0, [pc, #84]	; (800398c <_ZN13PathFollowing4initEv+0x6c>)
 8003936:	f7fd ff03 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	2201      	movs	r2, #1
 8003940:	4913      	ldr	r1, [pc, #76]	; (8003990 <_ZN13PathFollowing4initEv+0x70>)
 8003942:	4812      	ldr	r0, [pc, #72]	; (800398c <_ZN13PathFollowing4initEv+0x6c>)
 8003944:	f7fd fefc 	bl	8001740 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8003948:	f107 0308 	add.w	r3, r7, #8
 800394c:	2201      	movs	r2, #1
 800394e:	4911      	ldr	r1, [pc, #68]	; (8003994 <_ZN13PathFollowing4initEv+0x74>)
 8003950:	480e      	ldr	r0, [pc, #56]	; (800398c <_ZN13PathFollowing4initEv+0x6c>)
 8003952:	f7fd fef5 	bl	8001740 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8003956:	ed97 7b06 	vldr	d7, [r7, #24]
 800395a:	ed97 6b04 	vldr	d6, [r7, #16]
 800395e:	ed97 5b02 	vldr	d5, [r7, #8]
 8003962:	eeb0 2a45 	vmov.f32	s4, s10
 8003966:	eef0 2a65 	vmov.f32	s5, s11
 800396a:	eeb0 1a46 	vmov.f32	s2, s12
 800396e:	eef0 1a66 	vmov.f32	s3, s13
 8003972:	eeb0 0a47 	vmov.f32	s0, s14
 8003976:	eef0 0a67 	vmov.f32	s1, s15
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f80c 	bl	8003998 <_ZN13PathFollowing7setGainEddd>
}
 8003980:	bf00      	nop
 8003982:	3720      	adds	r7, #32
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	08018108 	.word	0x08018108
 800398c:	08018110 	.word	0x08018110
 8003990:	08018118 	.word	0x08018118
 8003994:	08018120 	.word	0x08018120

08003998 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8003998:	b490      	push	{r4, r7}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	61f8      	str	r0, [r7, #28]
 80039a0:	ed87 0b04 	vstr	d0, [r7, #16]
 80039a4:	ed87 1b02 	vstr	d1, [r7, #8]
 80039a8:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039ae:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80039b2:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80039b6:	4a07      	ldr	r2, [pc, #28]	; (80039d4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039b8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80039bc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80039c0:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80039c2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80039c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80039ca:	bf00      	nop
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc90      	pop	{r4, r7}
 80039d2:	4770      	bx	lr
 80039d4:	20035f18 	.word	0x20035f18

080039d8 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 80039d8:	b490      	push	{r4, r7}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <_ZN13PathFollowing8getKxValEv+0x24>)
 80039e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039e6:	ec44 3b17 	vmov	d7, r3, r4
}
 80039ea:	eeb0 0a47 	vmov.f32	s0, s14
 80039ee:	eef0 0a67 	vmov.f32	s1, s15
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bc90      	pop	{r4, r7}
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20035f18 	.word	0x20035f18

08003a00 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8003a00:	b490      	push	{r4, r7}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <_ZN13PathFollowing8getKyValEv+0x24>)
 8003a0a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003a0e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a12:	eeb0 0a47 	vmov.f32	s0, s14
 8003a16:	eef0 0a67 	vmov.f32	s1, s15
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc90      	pop	{r4, r7}
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	20035f18 	.word	0x20035f18

08003a28 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003a28:	b490      	push	{r4, r7}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <_ZN13PathFollowing8getKtValEv+0x24>)
 8003a32:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003a36:	ec44 3b17 	vmov	d7, r3, r4
}
 8003a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a3e:	eef0 0a67 	vmov.f32	s1, s15
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bc90      	pop	{r4, r7}
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20035f18 	.word	0x20035f18

08003a50 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003a58:	2088      	movs	r0, #136	; 0x88
 8003a5a:	f7fe f9c8 	bl	8001dee <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003a5e:	2080      	movs	r0, #128	; 0x80
 8003a60:	f7fe f9c5 	bl	8001dee <INA260_init>
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	0000      	movs	r0, r0
	...

08003a70 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003a70:	b590      	push	{r4, r7, lr}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003a78:	2188      	movs	r1, #136	; 0x88
 8003a7a:	2002      	movs	r0, #2
 8003a7c:	f7fe f954 	bl	8001d28 <INA260_read>
 8003a80:	4603      	mov	r3, r0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fc fd66 	bl	8000554 <__aeabi_i2d>
 8003a88:	a30c      	add	r3, pc, #48	; (adr r3, 8003abc <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fdcb 	bl	8000628 <__aeabi_dmul>
 8003a92:	4603      	mov	r3, r0
 8003a94:	460c      	mov	r4, r1
 8003a96:	4618      	mov	r0, r3
 8003a98:	4621      	mov	r1, r4
 8003a9a:	f7fd f8bd 	bl	8000c18 <__aeabi_d2f>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}
 8003ab4:	f3af 8000 	nop.w
 8003ab8:	20000280 	.word	0x20000280
 8003abc:	47ae147b 	.word	0x47ae147b
 8003ac0:	3f547ae1 	.word	0x3f547ae1

08003ac4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	ee07 3a90 	vmov	s15, r3

}
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	0000      	movs	r0, r0
 8003ae4:	0000      	movs	r0, r0
	...

08003ae8 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003af0:	2300      	movs	r3, #0
 8003af2:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7fc fd3d 	bl	8000578 <__aeabi_f2d>
 8003afe:	a311      	add	r3, pc, #68	; (adr r3, 8003b44 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fd f802 	bl	8000b0c <__aeabi_dcmplt>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d006      	beq.n	8003b1c <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003b0e:	4b0c      	ldr	r3, [pc, #48]	; (8003b40 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	4b0a      	ldr	r3, [pc, #40]	; (8003b40 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b18:	801a      	strh	r2, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d004      	beq.n	8003b34 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003b2e:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000284 	.word	0x20000284
 8003b44:	9999999a 	.word	0x9999999a
 8003b48:	401d9999 	.word	0x401d9999

08003b4c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4822      	ldr	r0, [pc, #136]	; (8003be4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003b5c:	f004 fff8 	bl	8008b50 <HAL_GPIO_ReadPin>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003b78:	2108      	movs	r1, #8
 8003b7a:	481a      	ldr	r0, [pc, #104]	; (8003be4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003b7c:	f004 ffe8 	bl	8008b50 <HAL_GPIO_ReadPin>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bf0c      	ite	eq
 8003b86:	2301      	moveq	r3, #1
 8003b88:	2300      	movne	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003b90:	89fb      	ldrh	r3, [r7, #14]
 8003b92:	f043 0302 	orr.w	r3, r3, #2
 8003b96:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003b98:	2110      	movs	r1, #16
 8003b9a:	4812      	ldr	r0, [pc, #72]	; (8003be4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003b9c:	f004 ffd8 	bl	8008b50 <HAL_GPIO_ReadPin>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003bb0:	89fb      	ldrh	r3, [r7, #14]
 8003bb2:	f043 0304 	orr.w	r3, r3, #4
 8003bb6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	480a      	ldr	r0, [pc, #40]	; (8003be4 <_ZN12RotarySwitch8getValueEv+0x98>)
 8003bbc:	f004 ffc8 	bl	8008b50 <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf0c      	ite	eq
 8003bc6:	2301      	moveq	r3, #1
 8003bc8:	2300      	movne	r3, #0
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d003      	beq.n	8003bd8 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	f043 0308 	orr.w	r3, r3, #8
 8003bd6:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003bd8:	89fb      	ldrh	r3, [r7, #14]

}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40020c00 	.word	0x40020c00

08003be8 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	801a      	strh	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	805a      	strh	r2, [r3, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	809a      	strh	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	719a      	strb	r2, [r3, #6]
{

}
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <_ZN10SideSensor12updateStatusEt>:

void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if(ignore_flag_ == false){
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	799b      	ldrb	r3, [r3, #6]
 8003c28:	f083 0301 	eor.w	r3, r3, #1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d065      	beq.n	8003cfe <_ZN10SideSensor12updateStatusEt+0xe6>

		if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003c32:	887b      	ldrh	r3, [r7, #2]
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d111      	bne.n	8003c5c <_ZN10SideSensor12updateStatusEt+0x44>
 8003c38:	4b34      	ldr	r3, [pc, #208]	; (8003d0c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00a      	beq.n	8003c5c <_ZN10SideSensor12updateStatusEt+0x44>
			status_ |= 0x01;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	881b      	ldrh	r3, [r3, #0]
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	801a      	strh	r2, [r3, #0]
			white_flag1 = true;
 8003c54:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e01a      	b.n	8003c92 <_ZN10SideSensor12updateStatusEt+0x7a>
		}
		else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d117      	bne.n	8003c92 <_ZN10SideSensor12updateStatusEt+0x7a>
 8003c62:	4b2a      	ldr	r3, [pc, #168]	; (8003d0c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d013      	beq.n	8003c92 <_ZN10SideSensor12updateStatusEt+0x7a>
			status_ ^= 0x01;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	f083 0301 	eor.w	r3, r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	801a      	strh	r2, [r3, #0]
			white_flag1 = false;
 8003c78:	4b24      	ldr	r3, [pc, #144]	; (8003d0c <_ZN10SideSensor12updateStatusEt+0xf4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]

			white_line_cnt_r_++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	889b      	ldrh	r3, [r3, #4]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	809a      	strh	r2, [r3, #4]
			mon_cnt_r = white_line_cnt_r_;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	889a      	ldrh	r2, [r3, #4]
 8003c8e:	4b20      	ldr	r3, [pc, #128]	; (8003d10 <_ZN10SideSensor12updateStatusEt+0xf8>)
 8003c90:	801a      	strh	r2, [r3, #0]

		}

		if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c98:	d111      	bne.n	8003cbe <_ZN10SideSensor12updateStatusEt+0xa6>
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	; (8003d14 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	f083 0301 	eor.w	r3, r3, #1
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00a      	beq.n	8003cbe <_ZN10SideSensor12updateStatusEt+0xa6>
			status_ |= 0x02;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	801a      	strh	r2, [r3, #0]
			white_flag2 = true;
 8003cb6:	4b17      	ldr	r3, [pc, #92]	; (8003d14 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]
 8003cbc:	e01b      	b.n	8003cf6 <_ZN10SideSensor12updateStatusEt+0xde>
		}
		else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003cbe:	887b      	ldrh	r3, [r7, #2]
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d117      	bne.n	8003cf6 <_ZN10SideSensor12updateStatusEt+0xde>
 8003cc6:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d013      	beq.n	8003cf6 <_ZN10SideSensor12updateStatusEt+0xde>
			status_ ^= 0x02;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	f083 0302 	eor.w	r3, r3, #2
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	801a      	strh	r2, [r3, #0]
			white_flag2 = false;
 8003cdc:	4b0d      	ldr	r3, [pc, #52]	; (8003d14 <_ZN10SideSensor12updateStatusEt+0xfc>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]

			white_line_cnt_l_++;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	885b      	ldrh	r3, [r3, #2]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	805a      	strh	r2, [r3, #2]
			mon_cnt_l = white_line_cnt_l_;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	885a      	ldrh	r2, [r3, #2]
 8003cf2:	4b09      	ldr	r3, [pc, #36]	; (8003d18 <_ZN10SideSensor12updateStatusEt+0x100>)
 8003cf4:	801a      	strh	r2, [r3, #0]
		}

		mon_status = status_;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	881a      	ldrh	r2, [r3, #0]
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <_ZN10SideSensor12updateStatusEt+0x104>)
 8003cfc:	801a      	strh	r2, [r3, #0]
	}

}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	2000028c 	.word	0x2000028c
 8003d10:	2000028a 	.word	0x2000028a
 8003d14:	2000028d 	.word	0x2000028d
 8003d18:	20000288 	.word	0x20000288
 8003d1c:	20000286 	.word	0x20000286

08003d20 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	809a      	strh	r2, [r3, #4]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	719a      	strb	r2, [r3, #6]
}
 8003d66:	bf00      	nop
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	719a      	strb	r2, [r3, #6]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	799b      	ldrb	r3, [r3, #6]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a10      	ldr	r2, [pc, #64]	; (8003df4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8003db4:	3308      	adds	r3, #8
 8003db6:	4611      	mov	r1, r2
 8003db8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f00f f9d7 	bl	8013170 <memcpy>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	08018144 	.word	0x08018144

08003df8 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	ed97 0a00 	vldr	s0, [r7]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f93a 	bl	8003090 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003e26:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7ff f96e 	bl	800310c <_ZN6Logger9storeLog2Ef>
	}

}
 8003e30:	bf00      	nop
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8003e46:	4908      	ldr	r1, [pc, #32]	; (8003e68 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff f9e8 	bl	800321e <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8003e54:	4904      	ldr	r1, [pc, #16]	; (8003e68 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff f9f5 	bl	8003246 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	08018338 	.word	0x08018338
 8003e68:	08018344 	.word	0x08018344
 8003e6c:	08018350 	.word	0x08018350

08003e70 <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d046      	beq.n	8003f10 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003e8e:	461a      	mov	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	3204      	adds	r2, #4
 8003e94:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ec0:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8003ec2:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8003eca:	2bf9      	cmp	r3, #249	; 0xf9
 8003ecc:	d903      	bls.n	8003ed6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	22fa      	movs	r2, #250	; 0xfa
 8003ed2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685c      	ldr	r4, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc fb49 	bl	8000578 <__aeabi_f2d>
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	460e      	mov	r6, r1
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8003ef0:	eef1 7a67 	vneg.f32	s15, s15
 8003ef4:	ee17 3a90 	vmov	r3, s15
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fc fb3d 	bl	8000578 <__aeabi_f2d>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	ec43 2b11 	vmov	d1, r2, r3
 8003f06:	ec46 5b10 	vmov	d0, r5, r6
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fae6 	bl	80034dc <_ZN5Motor8setRatioEdd>

	}

}
 8003f10:	bf00      	nop
 8003f12:	370c      	adds	r7, #12
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f18:	20000290 	.word	0x20000290

08003f1c <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fa31 	bl	80033b0 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003f56:	bf00      	nop
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
	...

08003f60 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa30 	bl	80033d2 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003fa0 <_ZN20SystemIdentification4stopEv+0x40>
 8003f8a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003fa0 <_ZN20SystemIdentification4stopEv+0x40>
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff faa4 	bl	80034dc <_ZN5Motor8setRatioEdd>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	f3af 8000 	nop.w
	...

08003fa8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	615a      	str	r2, [r3, #20]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	619a      	str	r2, [r3, #24]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	61da      	str	r2, [r3, #28]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	621a      	str	r2, [r3, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
	...

08004040 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004040:	b590      	push	{r4, r7, lr}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	f107 020c 	add.w	r2, r7, #12
 8004050:	f107 0110 	add.w	r1, r7, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f7fd f9bd 	bl	80013d4 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800405a:	ed97 7a04 	vldr	s14, [r7, #16]
 800405e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004066:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800406a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800406e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7fc fa80 	bl	8000578 <__aeabi_f2d>
 8004078:	a30b      	add	r3, pc, #44	; (adr r3, 80040a8 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fad3 	bl	8000628 <__aeabi_dmul>
 8004082:	4603      	mov	r3, r0
 8004084:	460c      	mov	r4, r1
 8004086:	4618      	mov	r0, r3
 8004088:	4621      	mov	r1, r4
 800408a:	f7fc fdc5 	bl	8000c18 <__aeabi_d2f>
 800408e:	4602      	mov	r2, r0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	ee07 3a90 	vmov	s15, r3
}
 800409c:	eeb0 0a67 	vmov.f32	s0, s15
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}
 80040a6:	bf00      	nop
 80040a8:	1ab1d998 	.word	0x1ab1d998
 80040ac:	3f7830b5 	.word	0x3f7830b5

080040b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	ed93 7a00 	vldr	s14, [r3]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	edd3 7a02 	vldr	s15, [r3, #8]
 80040c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 80040d6:	4b48      	ldr	r3, [pc, #288]	; (80041f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80040ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80040f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f4:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 80040f8:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fc fa3b 	bl	8000578 <__aeabi_f2d>
 8004102:	4604      	mov	r4, r0
 8004104:	460d      	mov	r5, r1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	ed93 7a06 	vldr	s14, [r3, #24]
 800410c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004114:	ee17 0a90 	vmov	r0, s15
 8004118:	f7fc fa2e 	bl	8000578 <__aeabi_f2d>
 800411c:	a334      	add	r3, pc, #208	; (adr r3, 80041f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa81 	bl	8000628 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc f8c5 	bl	80002bc <__adddf3>
 8004132:	4603      	mov	r3, r0
 8004134:	460c      	mov	r4, r1
 8004136:	4618      	mov	r0, r3
 8004138:	4621      	mov	r1, r4
 800413a:	f7fc fd6d 	bl	8000c18 <__aeabi_d2f>
 800413e:	4602      	mov	r2, r0
 8004140:	4b2d      	ldr	r3, [pc, #180]	; (80041f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8004142:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	ed93 7a05 	vldr	s14, [r3, #20]
 800414a:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	edd7 6a05 	vldr	s13, [r7, #20]
 8004154:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415c:	ee17 0a90 	vmov	r0, s15
 8004160:	f7fc fa0a 	bl	8000578 <__aeabi_f2d>
 8004164:	a322      	add	r3, pc, #136	; (adr r3, 80041f0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fb87 	bl	800087c <__aeabi_ddiv>
 800416e:	4603      	mov	r3, r0
 8004170:	460c      	mov	r4, r1
 8004172:	4618      	mov	r0, r3
 8004174:	4621      	mov	r1, r4
 8004176:	f7fc fd4f 	bl	8000c18 <__aeabi_d2f>
 800417a:	4603      	mov	r3, r0
 800417c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 800417e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004182:	edd7 7a03 	vldr	s15, [r7, #12]
 8004186:	ee37 7a27 	vadd.f32	s14, s14, s15
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004194:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80041a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80041a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041aa:	ee17 0a90 	vmov	r0, s15
 80041ae:	f7fc f9e3 	bl	8000578 <__aeabi_f2d>
 80041b2:	4605      	mov	r5, r0
 80041b4:	460e      	mov	r6, r1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80041bc:	ed97 7a02 	vldr	s14, [r7, #8]
 80041c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041c4:	ee17 0a90 	vmov	r0, s15
 80041c8:	f7fc f9d6 	bl	8000578 <__aeabi_f2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	ec43 2b11 	vmov	d1, r2, r3
 80041d4:	ec46 5b10 	vmov	d0, r5, r6
 80041d8:	4620      	mov	r0, r4
 80041da:	f7ff f97f 	bl	80034dc <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80041de:	4a07      	ldr	r2, [pc, #28]	; (80041fc <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ec:	f3af 8000 	nop.w
 80041f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80041f4:	3f50624d 	.word	0x3f50624d
 80041f8:	20000298 	.word	0x20000298
 80041fc:	20000294 	.word	0x20000294

08004200 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	ed87 0a02 	vstr	s0, [r7, #8]
 800420c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	605a      	str	r2, [r3, #4]
}
 800421c:	bf00      	nop
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	ed87 0a02 	vstr	s0, [r7, #8]
 8004234:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004244:	bf00      	nop
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	ed87 0a02 	vstr	s0, [r7, #8]
 800425c:	edc7 0a01 	vstr	s1, [r7, #4]
 8004260:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	615a      	str	r2, [r3, #20]
}
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	ed87 0a02 	vstr	s0, [r7, #8]
 800428e:	edc7 0a01 	vstr	s1, [r7, #4]
 8004292:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff febf 	bl	8004040 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d002      	beq.n	80042d2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff feef 	bl	80040b0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004330 <_ZN12VelocityCtrl4stopEv+0x30>
 8004318:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004330 <_ZN12VelocityCtrl4stopEv+0x30>
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff f8dd 	bl	80034dc <_ZN5Motor8setRatioEdd>

}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	f3af 8000 	nop.w
	...

08004338 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004340:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004344:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004350:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004354:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004358:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00b      	beq.n	8004378 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004360:	e000      	b.n	8004364 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004362:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d0f9      	beq.n	8004362 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800436e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004378:	687b      	ldr	r3, [r7, #4]
}
 800437a:	4618      	mov	r0, r3
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	e009      	b.n	80043ac <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	60ba      	str	r2, [r7, #8]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ffc9 	bl	8004338 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	3301      	adds	r3, #1
 80043aa:	617b      	str	r3, [r7, #20]
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	dbf1      	blt.n	8004398 <_write+0x12>
  }
  return len;
 80043b4:	687b      	ldr	r3, [r7, #4]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80043c8:	88fb      	ldrh	r3, [r7, #6]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 ff14 	bl	80061f8 <cppExit>
}
 80043d0:	bf00      	nop
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	; (8004460 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10e      	bne.n	8004408 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 80043ea:	f001 fe95 	bl	8006118 <cppFlip1ms>

		tim6_timer++;
 80043ee:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3301      	adds	r3, #1
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80043f6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d902      	bls.n	8004408 <HAL_TIM_PeriodElapsedCallback+0x30>
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a17      	ldr	r2, [pc, #92]	; (800446c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d10e      	bne.n	8004430 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8004412:	f001 fec9 	bl	80061a8 <cppFlip100ns>

		tim7_timer++;
 8004416:	4b16      	ldr	r3, [pc, #88]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3301      	adds	r3, #1
 800441c:	4a14      	ldr	r2, [pc, #80]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800441e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8004420:	4b13      	ldr	r3, [pc, #76]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d902      	bls.n	8004430 <HAL_TIM_PeriodElapsedCallback+0x58>
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10e      	bne.n	8004458 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800443a:	f001 febf 	bl	80061bc <cppFlip10ms>

		tim13_timer++;
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3301      	adds	r3, #1
 8004444:	4a0c      	ldr	r2, [pc, #48]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004446:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a06      	ldr	r2, [pc, #24]	; (8004468 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d902      	bls.n	8004458 <HAL_TIM_PeriodElapsedCallback+0x80>
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
	}

}
 8004458:	bf00      	nop
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40001000 	.word	0x40001000
 8004464:	20035b84 	.word	0x20035b84
 8004468:	0001869f 	.word	0x0001869f
 800446c:	40001400 	.word	0x40001400
 8004470:	20035bc8 	.word	0x20035bc8
 8004474:	40001c00 	.word	0x40001c00
 8004478:	20035bcc 	.word	0x20035bcc

0800447c <init>:

void init()
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8004480:	2201      	movs	r2, #1
 8004482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004486:	4808      	ldr	r0, [pc, #32]	; (80044a8 <init+0x2c>)
 8004488:	f004 fb7a 	bl	8008b80 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800448c:	4807      	ldr	r0, [pc, #28]	; (80044ac <init+0x30>)
 800448e:	f008 fa5a 	bl	800c946 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004492:	4807      	ldr	r0, [pc, #28]	; (80044b0 <init+0x34>)
 8004494:	f008 fa57 	bl	800c946 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8004498:	4806      	ldr	r0, [pc, #24]	; (80044b4 <init+0x38>)
 800449a:	f008 fa54 	bl	800c946 <HAL_TIM_Base_Start_IT>

	cppInit();
 800449e:	f001 fd91 	bl	8005fc4 <cppInit>

	//path_following_initialize();

}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	20035cb0 	.word	0x20035cb0
 80044b0:	20035e54 	.word	0x20035e54
 80044b4:	20035bd0 	.word	0x20035bd0

080044b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80044bc:	f003 f858 	bl	8007570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80044c0:	f000 f82a 	bl	8004518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80044c4:	f000 fdbc 	bl	8005040 <MX_GPIO_Init>
  MX_DMA_Init();
 80044c8:	f000 fd8a 	bl	8004fe0 <MX_DMA_Init>
  MX_I2C2_Init();
 80044cc:	f000 f9e8 	bl	80048a0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80044d0:	f000 fa14 	bl	80048fc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80044d4:	f000 fa32 	bl	800493c <MX_SPI2_Init>
  MX_TIM1_Init();
 80044d8:	f000 fa66 	bl	80049a8 <MX_TIM1_Init>
  MX_TIM4_Init();
 80044dc:	f000 fb70 	bl	8004bc0 <MX_TIM4_Init>
  MX_TIM8_Init();
 80044e0:	f000 fc3c 	bl	8004d5c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80044e4:	f000 fd52 	bl	8004f8c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80044e8:	f00a fa00 	bl	800e8ec <MX_FATFS_Init>
  MX_TIM6_Init();
 80044ec:	f000 fbcc 	bl	8004c88 <MX_TIM6_Init>
  MX_I2C1_Init();
 80044f0:	f000 f9a8 	bl	8004844 <MX_I2C1_Init>
  MX_TIM3_Init();
 80044f4:	f000 fb00 	bl	8004af8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80044f8:	f000 fc88 	bl	8004e0c <MX_TIM10_Init>
  MX_TIM11_Init();
 80044fc:	f000 fcd4 	bl	8004ea8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8004500:	f000 f898 	bl	8004634 <MX_ADC2_Init>
  MX_TIM7_Init();
 8004504:	f000 fbf6 	bl	8004cf4 <MX_TIM7_Init>
  MX_TIM13_Init();
 8004508:	f000 fd1c 	bl	8004f44 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 800450c:	f7ff ffb6 	bl	800447c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8004510:	f001 fe82 	bl	8006218 <cppLoop>
 8004514:	e7fc      	b.n	8004510 <main+0x58>
	...

08004518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b0a4      	sub	sp, #144	; 0x90
 800451c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800451e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004522:	2234      	movs	r2, #52	; 0x34
 8004524:	2100      	movs	r1, #0
 8004526:	4618      	mov	r0, r3
 8004528:	f00e fe2d 	bl	8013186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800452c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
 8004538:	60da      	str	r2, [r3, #12]
 800453a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800453c:	f107 030c 	add.w	r3, r7, #12
 8004540:	223c      	movs	r2, #60	; 0x3c
 8004542:	2100      	movs	r1, #0
 8004544:	4618      	mov	r0, r3
 8004546:	f00e fe1e 	bl	8013186 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <SystemClock_Config+0x114>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a36      	ldr	r2, [pc, #216]	; (800462c <SystemClock_Config+0x114>)
 8004554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
 800455a:	4b34      	ldr	r3, [pc, #208]	; (800462c <SystemClock_Config+0x114>)
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004562:	60bb      	str	r3, [r7, #8]
 8004564:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004566:	2300      	movs	r3, #0
 8004568:	607b      	str	r3, [r7, #4]
 800456a:	4b31      	ldr	r3, [pc, #196]	; (8004630 <SystemClock_Config+0x118>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a30      	ldr	r2, [pc, #192]	; (8004630 <SystemClock_Config+0x118>)
 8004570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b2e      	ldr	r3, [pc, #184]	; (8004630 <SystemClock_Config+0x118>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004582:	2301      	movs	r3, #1
 8004584:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800458a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800458c:	2302      	movs	r3, #2
 800458e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004590:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004594:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004596:	2308      	movs	r3, #8
 8004598:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800459a:	23b4      	movs	r3, #180	; 0xb4
 800459c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80045a0:	2302      	movs	r3, #2
 80045a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80045a6:	2308      	movs	r3, #8
 80045a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80045ac:	2302      	movs	r3, #2
 80045ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80045b6:	4618      	mov	r0, r3
 80045b8:	f005 ff1c 	bl	800a3f4 <HAL_RCC_OscConfig>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80045c2:	f000 fe91 	bl	80052e8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80045c6:	f005 fa97 	bl	8009af8 <HAL_PWREx_EnableOverDrive>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80045d0:	f000 fe8a 	bl	80052e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045d4:	230f      	movs	r3, #15
 80045d6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045d8:	2302      	movs	r3, #2
 80045da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045dc:	2300      	movs	r3, #0
 80045de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80045e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80045e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80045e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045ea:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80045ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f0:	2105      	movs	r1, #5
 80045f2:	4618      	mov	r0, r3
 80045f4:	f005 fad0 	bl	8009b98 <HAL_RCC_ClockConfig>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80045fe:	f000 fe73 	bl	80052e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8004602:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004606:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8004608:	2300      	movs	r3, #0
 800460a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800460c:	2300      	movs	r3, #0
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004610:	f107 030c 	add.w	r3, r7, #12
 8004614:	4618      	mov	r0, r3
 8004616:	f005 fcaf 	bl	8009f78 <HAL_RCCEx_PeriphCLKConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8004620:	f000 fe62 	bl	80052e8 <Error_Handler>
  }
}
 8004624:	bf00      	nop
 8004626:	3790      	adds	r7, #144	; 0x90
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40023800 	.word	0x40023800
 8004630:	40007000 	.word	0x40007000

08004634 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800463a:	463b      	mov	r3, r7
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004646:	4b7c      	ldr	r3, [pc, #496]	; (8004838 <MX_ADC2_Init+0x204>)
 8004648:	4a7c      	ldr	r2, [pc, #496]	; (800483c <MX_ADC2_Init+0x208>)
 800464a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800464c:	4b7a      	ldr	r3, [pc, #488]	; (8004838 <MX_ADC2_Init+0x204>)
 800464e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004652:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004654:	4b78      	ldr	r3, [pc, #480]	; (8004838 <MX_ADC2_Init+0x204>)
 8004656:	2200      	movs	r2, #0
 8004658:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800465a:	4b77      	ldr	r3, [pc, #476]	; (8004838 <MX_ADC2_Init+0x204>)
 800465c:	2201      	movs	r2, #1
 800465e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004660:	4b75      	ldr	r3, [pc, #468]	; (8004838 <MX_ADC2_Init+0x204>)
 8004662:	2201      	movs	r2, #1
 8004664:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004666:	4b74      	ldr	r3, [pc, #464]	; (8004838 <MX_ADC2_Init+0x204>)
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800466e:	4b72      	ldr	r3, [pc, #456]	; (8004838 <MX_ADC2_Init+0x204>)
 8004670:	2200      	movs	r2, #0
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004674:	4b70      	ldr	r3, [pc, #448]	; (8004838 <MX_ADC2_Init+0x204>)
 8004676:	4a72      	ldr	r2, [pc, #456]	; (8004840 <MX_ADC2_Init+0x20c>)
 8004678:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800467a:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <MX_ADC2_Init+0x204>)
 800467c:	2200      	movs	r2, #0
 800467e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8004680:	4b6d      	ldr	r3, [pc, #436]	; (8004838 <MX_ADC2_Init+0x204>)
 8004682:	220e      	movs	r2, #14
 8004684:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004686:	4b6c      	ldr	r3, [pc, #432]	; (8004838 <MX_ADC2_Init+0x204>)
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800468e:	4b6a      	ldr	r3, [pc, #424]	; (8004838 <MX_ADC2_Init+0x204>)
 8004690:	2201      	movs	r2, #1
 8004692:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004694:	4868      	ldr	r0, [pc, #416]	; (8004838 <MX_ADC2_Init+0x204>)
 8004696:	f002 ffff 	bl	8007698 <HAL_ADC_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80046a0:	f000 fe22 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80046a4:	230a      	movs	r3, #10
 80046a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80046ac:	2306      	movs	r3, #6
 80046ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046b0:	463b      	mov	r3, r7
 80046b2:	4619      	mov	r1, r3
 80046b4:	4860      	ldr	r0, [pc, #384]	; (8004838 <MX_ADC2_Init+0x204>)
 80046b6:	f003 f943 	bl	8007940 <HAL_ADC_ConfigChannel>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80046c0:	f000 fe12 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80046c4:	230b      	movs	r3, #11
 80046c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80046c8:	2302      	movs	r3, #2
 80046ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046cc:	463b      	mov	r3, r7
 80046ce:	4619      	mov	r1, r3
 80046d0:	4859      	ldr	r0, [pc, #356]	; (8004838 <MX_ADC2_Init+0x204>)
 80046d2:	f003 f935 	bl	8007940 <HAL_ADC_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80046dc:	f000 fe04 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80046e0:	230c      	movs	r3, #12
 80046e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80046e4:	2303      	movs	r3, #3
 80046e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80046e8:	463b      	mov	r3, r7
 80046ea:	4619      	mov	r1, r3
 80046ec:	4852      	ldr	r0, [pc, #328]	; (8004838 <MX_ADC2_Init+0x204>)
 80046ee:	f003 f927 	bl	8007940 <HAL_ADC_ConfigChannel>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80046f8:	f000 fdf6 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80046fc:	230d      	movs	r3, #13
 80046fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004700:	2304      	movs	r3, #4
 8004702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004704:	463b      	mov	r3, r7
 8004706:	4619      	mov	r1, r3
 8004708:	484b      	ldr	r0, [pc, #300]	; (8004838 <MX_ADC2_Init+0x204>)
 800470a:	f003 f919 	bl	8007940 <HAL_ADC_ConfigChannel>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d001      	beq.n	8004718 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004714:	f000 fde8 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004718:	2300      	movs	r3, #0
 800471a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800471c:	2305      	movs	r3, #5
 800471e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004720:	463b      	mov	r3, r7
 8004722:	4619      	mov	r1, r3
 8004724:	4844      	ldr	r0, [pc, #272]	; (8004838 <MX_ADC2_Init+0x204>)
 8004726:	f003 f90b 	bl	8007940 <HAL_ADC_ConfigChannel>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004730:	f000 fdda 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004734:	2301      	movs	r3, #1
 8004736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004738:	2306      	movs	r3, #6
 800473a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800473c:	463b      	mov	r3, r7
 800473e:	4619      	mov	r1, r3
 8004740:	483d      	ldr	r0, [pc, #244]	; (8004838 <MX_ADC2_Init+0x204>)
 8004742:	f003 f8fd 	bl	8007940 <HAL_ADC_ConfigChannel>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800474c:	f000 fdcc 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004750:	2302      	movs	r3, #2
 8004752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004754:	2307      	movs	r3, #7
 8004756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004758:	463b      	mov	r3, r7
 800475a:	4619      	mov	r1, r3
 800475c:	4836      	ldr	r0, [pc, #216]	; (8004838 <MX_ADC2_Init+0x204>)
 800475e:	f003 f8ef 	bl	8007940 <HAL_ADC_ConfigChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004768:	f000 fdbe 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800476c:	2303      	movs	r3, #3
 800476e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004770:	2308      	movs	r3, #8
 8004772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004774:	463b      	mov	r3, r7
 8004776:	4619      	mov	r1, r3
 8004778:	482f      	ldr	r0, [pc, #188]	; (8004838 <MX_ADC2_Init+0x204>)
 800477a:	f003 f8e1 	bl	8007940 <HAL_ADC_ConfigChannel>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004784:	f000 fdb0 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004788:	2304      	movs	r3, #4
 800478a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800478c:	2309      	movs	r3, #9
 800478e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004790:	463b      	mov	r3, r7
 8004792:	4619      	mov	r1, r3
 8004794:	4828      	ldr	r0, [pc, #160]	; (8004838 <MX_ADC2_Init+0x204>)
 8004796:	f003 f8d3 	bl	8007940 <HAL_ADC_ConfigChannel>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80047a0:	f000 fda2 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80047a4:	2305      	movs	r3, #5
 80047a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80047a8:	230a      	movs	r3, #10
 80047aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047ac:	463b      	mov	r3, r7
 80047ae:	4619      	mov	r1, r3
 80047b0:	4821      	ldr	r0, [pc, #132]	; (8004838 <MX_ADC2_Init+0x204>)
 80047b2:	f003 f8c5 	bl	8007940 <HAL_ADC_ConfigChannel>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80047bc:	f000 fd94 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80047c0:	2306      	movs	r3, #6
 80047c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80047c4:	230b      	movs	r3, #11
 80047c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047c8:	463b      	mov	r3, r7
 80047ca:	4619      	mov	r1, r3
 80047cc:	481a      	ldr	r0, [pc, #104]	; (8004838 <MX_ADC2_Init+0x204>)
 80047ce:	f003 f8b7 	bl	8007940 <HAL_ADC_ConfigChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d001      	beq.n	80047dc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80047d8:	f000 fd86 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80047dc:	2307      	movs	r3, #7
 80047de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80047e0:	230c      	movs	r3, #12
 80047e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80047e4:	463b      	mov	r3, r7
 80047e6:	4619      	mov	r1, r3
 80047e8:	4813      	ldr	r0, [pc, #76]	; (8004838 <MX_ADC2_Init+0x204>)
 80047ea:	f003 f8a9 	bl	8007940 <HAL_ADC_ConfigChannel>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80047f4:	f000 fd78 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80047f8:	2308      	movs	r3, #8
 80047fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80047fc:	230d      	movs	r3, #13
 80047fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004800:	463b      	mov	r3, r7
 8004802:	4619      	mov	r1, r3
 8004804:	480c      	ldr	r0, [pc, #48]	; (8004838 <MX_ADC2_Init+0x204>)
 8004806:	f003 f89b 	bl	8007940 <HAL_ADC_ConfigChannel>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8004810:	f000 fd6a 	bl	80052e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8004814:	2309      	movs	r3, #9
 8004816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8004818:	230e      	movs	r3, #14
 800481a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800481c:	463b      	mov	r3, r7
 800481e:	4619      	mov	r1, r3
 8004820:	4805      	ldr	r0, [pc, #20]	; (8004838 <MX_ADC2_Init+0x204>)
 8004822:	f003 f88d 	bl	8007940 <HAL_ADC_ConfigChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d001      	beq.n	8004830 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 800482c:	f000 fd5c 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	20035a54 	.word	0x20035a54
 800483c:	40012100 	.word	0x40012100
 8004840:	0f000001 	.word	0x0f000001

08004844 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004848:	4b12      	ldr	r3, [pc, #72]	; (8004894 <MX_I2C1_Init+0x50>)
 800484a:	4a13      	ldr	r2, [pc, #76]	; (8004898 <MX_I2C1_Init+0x54>)
 800484c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800484e:	4b11      	ldr	r3, [pc, #68]	; (8004894 <MX_I2C1_Init+0x50>)
 8004850:	4a12      	ldr	r2, [pc, #72]	; (800489c <MX_I2C1_Init+0x58>)
 8004852:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004854:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <MX_I2C1_Init+0x50>)
 8004856:	2200      	movs	r2, #0
 8004858:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800485a:	4b0e      	ldr	r3, [pc, #56]	; (8004894 <MX_I2C1_Init+0x50>)
 800485c:	2200      	movs	r2, #0
 800485e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <MX_I2C1_Init+0x50>)
 8004862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004866:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <MX_I2C1_Init+0x50>)
 800486a:	2200      	movs	r2, #0
 800486c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <MX_I2C1_Init+0x50>)
 8004870:	2200      	movs	r2, #0
 8004872:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004874:	4b07      	ldr	r3, [pc, #28]	; (8004894 <MX_I2C1_Init+0x50>)
 8004876:	2200      	movs	r2, #0
 8004878:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <MX_I2C1_Init+0x50>)
 800487c:	2280      	movs	r2, #128	; 0x80
 800487e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004880:	4804      	ldr	r0, [pc, #16]	; (8004894 <MX_I2C1_Init+0x50>)
 8004882:	f004 f9af 	bl	8008be4 <HAL_I2C_Init>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800488c:	f000 fd2c 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20035a9c 	.word	0x20035a9c
 8004898:	40005400 	.word	0x40005400
 800489c:	000186a0 	.word	0x000186a0

080048a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <MX_I2C2_Init+0x54>)
 80048a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80048aa:	4b11      	ldr	r3, [pc, #68]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048ac:	4a12      	ldr	r2, [pc, #72]	; (80048f8 <MX_I2C2_Init+0x58>)
 80048ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80048b0:	4b0f      	ldr	r3, [pc, #60]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80048bc:	4b0c      	ldr	r3, [pc, #48]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048d8:	2280      	movs	r2, #128	; 0x80
 80048da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80048dc:	4804      	ldr	r0, [pc, #16]	; (80048f0 <MX_I2C2_Init+0x50>)
 80048de:	f004 f981 	bl	8008be4 <HAL_I2C_Init>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d001      	beq.n	80048ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80048e8:	f000 fcfe 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	20035b30 	.word	0x20035b30
 80048f4:	40005800 	.word	0x40005800
 80048f8:	000186a0 	.word	0x000186a0

080048fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004900:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 8004902:	4a0d      	ldr	r2, [pc, #52]	; (8004938 <MX_SDIO_SD_Init+0x3c>)
 8004904:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800490c:	4b09      	ldr	r3, [pc, #36]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 800490e:	2200      	movs	r2, #0
 8004910:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 8004914:	2200      	movs	r2, #0
 8004916:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 8004920:	2200      	movs	r2, #0
 8004922:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004924:	4b03      	ldr	r3, [pc, #12]	; (8004934 <MX_SDIO_SD_Init+0x38>)
 8004926:	2200      	movs	r2, #0
 8004928:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800492a:	bf00      	nop
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	20035d30 	.word	0x20035d30
 8004938:	40012c00 	.word	0x40012c00

0800493c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004940:	4b17      	ldr	r3, [pc, #92]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <MX_SPI2_Init+0x68>)
 8004944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8004946:	4b16      	ldr	r3, [pc, #88]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800494c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800494e:	4b14      	ldr	r3, [pc, #80]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004950:	2200      	movs	r2, #0
 8004952:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004956:	2200      	movs	r2, #0
 8004958:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800495a:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <MX_SPI2_Init+0x64>)
 800495c:	2202      	movs	r2, #2
 800495e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004962:	2201      	movs	r2, #1
 8004964:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8004966:	4b0e      	ldr	r3, [pc, #56]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800496c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004970:	2228      	movs	r2, #40	; 0x28
 8004972:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004976:	2200      	movs	r2, #0
 8004978:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800497a:	4b09      	ldr	r3, [pc, #36]	; (80049a0 <MX_SPI2_Init+0x64>)
 800497c:	2200      	movs	r2, #0
 800497e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <MX_SPI2_Init+0x64>)
 8004988:	220a      	movs	r2, #10
 800498a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800498c:	4804      	ldr	r0, [pc, #16]	; (80049a0 <MX_SPI2_Init+0x64>)
 800498e:	f007 fa5b 	bl	800be48 <HAL_SPI_Init>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004998:	f000 fca6 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800499c:	bf00      	nop
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	2003597c 	.word	0x2003597c
 80049a4:	40003800 	.word	0x40003800

080049a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b09a      	sub	sp, #104	; 0x68
 80049ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80049ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80049b2:	2224      	movs	r2, #36	; 0x24
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f00e fbe5 	bl	8013186 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c6:	f107 0320 	add.w	r3, r7, #32
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	605a      	str	r2, [r3, #4]
 80049d0:	609a      	str	r2, [r3, #8]
 80049d2:	60da      	str	r2, [r3, #12]
 80049d4:	611a      	str	r2, [r3, #16]
 80049d6:	615a      	str	r2, [r3, #20]
 80049d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049da:	463b      	mov	r3, r7
 80049dc:	2220      	movs	r2, #32
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f00e fbd0 	bl	8013186 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80049e6:	4b42      	ldr	r3, [pc, #264]	; (8004af0 <MX_TIM1_Init+0x148>)
 80049e8:	4a42      	ldr	r2, [pc, #264]	; (8004af4 <MX_TIM1_Init+0x14c>)
 80049ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049ec:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <MX_TIM1_Init+0x148>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f2:	4b3f      	ldr	r3, [pc, #252]	; (8004af0 <MX_TIM1_Init+0x148>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80049f8:	4b3d      	ldr	r3, [pc, #244]	; (8004af0 <MX_TIM1_Init+0x148>)
 80049fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a00:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004a06:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a0c:	4b38      	ldr	r3, [pc, #224]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004a12:	4837      	ldr	r0, [pc, #220]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a14:	f007 ffbb 	bl	800c98e <HAL_TIM_PWM_Init>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004a1e:	f000 fc63 	bl	80052e8 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004a22:	2303      	movs	r3, #3
 8004a24:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004a26:	2300      	movs	r3, #0
 8004a28:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004a36:	2300      	movs	r3, #0
 8004a38:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004a46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4828      	ldr	r0, [pc, #160]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a4e:	f008 f807 	bl	800ca60 <HAL_TIM_Encoder_Init>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004a58:	f000 fc46 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a60:	2300      	movs	r3, #0
 8004a62:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4821      	ldr	r0, [pc, #132]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004a6c:	f008 fd2e 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004a76:	f000 fc37 	bl	80052e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a7a:	2360      	movs	r3, #96	; 0x60
 8004a7c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a82:	2300      	movs	r3, #0
 8004a84:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a86:	2300      	movs	r3, #0
 8004a88:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a96:	f107 0320 	add.w	r3, r7, #32
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4814      	ldr	r0, [pc, #80]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004aa0:	f008 f9b0 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8004aaa:	f000 fc1d 	bl	80052e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004acc:	463b      	mov	r3, r7
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4807      	ldr	r0, [pc, #28]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004ad2:	f008 fd77 	bl	800d5c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d001      	beq.n	8004ae0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8004adc:	f000 fc04 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004ae0:	4803      	ldr	r0, [pc, #12]	; (8004af0 <MX_TIM1_Init+0x148>)
 8004ae2:	f000 fff1 	bl	8005ac8 <HAL_TIM_MspPostInit>

}
 8004ae6:	bf00      	nop
 8004ae8:	3768      	adds	r7, #104	; 0x68
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	20035cf0 	.word	0x20035cf0
 8004af4:	40010000 	.word	0x40010000

08004af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	; 0x28
 8004afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afe:	f107 0320 	add.w	r3, r7, #32
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b08:	1d3b      	adds	r3, r7, #4
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	601a      	str	r2, [r3, #0]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	609a      	str	r2, [r3, #8]
 8004b12:	60da      	str	r2, [r3, #12]
 8004b14:	611a      	str	r2, [r3, #16]
 8004b16:	615a      	str	r2, [r3, #20]
 8004b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004b1a:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b1c:	4a27      	ldr	r2, [pc, #156]	; (8004bbc <MX_TIM3_Init+0xc4>)
 8004b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004b20:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b22:	2200      	movs	r2, #0
 8004b24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b26:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004b2c:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b34:	4b20      	ldr	r3, [pc, #128]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b3a:	4b1f      	ldr	r3, [pc, #124]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004b40:	481d      	ldr	r0, [pc, #116]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b42:	f007 ff24 	bl	800c98e <HAL_TIM_PWM_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004b4c:	f000 fbcc 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004b58:	f107 0320 	add.w	r3, r7, #32
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4816      	ldr	r0, [pc, #88]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b60:	f008 fcb4 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8004b6a:	f000 fbbd 	bl	80052e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004b6e:	2360      	movs	r3, #96	; 0x60
 8004b70:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004b72:	2300      	movs	r3, #0
 8004b74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004b7e:	1d3b      	adds	r3, r7, #4
 8004b80:	2200      	movs	r2, #0
 8004b82:	4619      	mov	r1, r3
 8004b84:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b86:	f008 f93d 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004b90:	f000 fbaa 	bl	80052e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004b94:	1d3b      	adds	r3, r7, #4
 8004b96:	2204      	movs	r2, #4
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4807      	ldr	r0, [pc, #28]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004b9c:	f008 f932 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004ba6:	f000 fb9f 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004baa:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <MX_TIM3_Init+0xc0>)
 8004bac:	f000 ff8c 	bl	8005ac8 <HAL_TIM_MspPostInit>

}
 8004bb0:	bf00      	nop
 8004bb2:	3728      	adds	r7, #40	; 0x28
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20035b88 	.word	0x20035b88
 8004bbc:	40000400 	.word	0x40000400

08004bc0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bc6:	f107 0320 	add.w	r3, r7, #32
 8004bca:	2200      	movs	r2, #0
 8004bcc:	601a      	str	r2, [r3, #0]
 8004bce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd0:	1d3b      	adds	r3, r7, #4
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
 8004bd8:	609a      	str	r2, [r3, #8]
 8004bda:	60da      	str	r2, [r3, #12]
 8004bdc:	611a      	str	r2, [r3, #16]
 8004bde:	615a      	str	r2, [r3, #20]
 8004be0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004be2:	4b27      	ldr	r3, [pc, #156]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004be4:	4a27      	ldr	r2, [pc, #156]	; (8004c84 <MX_TIM4_Init+0xc4>)
 8004be6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004bee:	4b24      	ldr	r3, [pc, #144]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004bf4:	4b22      	ldr	r3, [pc, #136]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004bf6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8004bfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bfc:	4b20      	ldr	r3, [pc, #128]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c02:	4b1f      	ldr	r3, [pc, #124]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004c08:	481d      	ldr	r0, [pc, #116]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c0a:	f007 fec0 	bl	800c98e <HAL_TIM_PWM_Init>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004c14:	f000 fb68 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004c20:	f107 0320 	add.w	r3, r7, #32
 8004c24:	4619      	mov	r1, r3
 8004c26:	4816      	ldr	r0, [pc, #88]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c28:	f008 fc50 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004c32:	f000 fb59 	bl	80052e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c36:	2360      	movs	r3, #96	; 0x60
 8004c38:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c46:	1d3b      	adds	r3, r7, #4
 8004c48:	2208      	movs	r2, #8
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	480c      	ldr	r0, [pc, #48]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c4e:	f008 f8d9 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004c58:	f000 fb46 	bl	80052e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c5c:	1d3b      	adds	r3, r7, #4
 8004c5e:	220c      	movs	r2, #12
 8004c60:	4619      	mov	r1, r3
 8004c62:	4807      	ldr	r0, [pc, #28]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c64:	f008 f8ce 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004c6e:	f000 fb3b 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004c72:	4803      	ldr	r0, [pc, #12]	; (8004c80 <MX_TIM4_Init+0xc0>)
 8004c74:	f000 ff28 	bl	8005ac8 <HAL_TIM_MspPostInit>

}
 8004c78:	bf00      	nop
 8004c7a:	3728      	adds	r7, #40	; 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	20035a14 	.word	0x20035a14
 8004c84:	40000800 	.word	0x40000800

08004c88 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c8e:	463b      	mov	r3, r7
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004c96:	4b15      	ldr	r3, [pc, #84]	; (8004cec <MX_TIM6_Init+0x64>)
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <MX_TIM6_Init+0x68>)
 8004c9a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8004c9c:	4b13      	ldr	r3, [pc, #76]	; (8004cec <MX_TIM6_Init+0x64>)
 8004c9e:	2259      	movs	r2, #89	; 0x59
 8004ca0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ca2:	4b12      	ldr	r3, [pc, #72]	; (8004cec <MX_TIM6_Init+0x64>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004ca8:	4b10      	ldr	r3, [pc, #64]	; (8004cec <MX_TIM6_Init+0x64>)
 8004caa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004cb0:	4b0e      	ldr	r3, [pc, #56]	; (8004cec <MX_TIM6_Init+0x64>)
 8004cb2:	2280      	movs	r2, #128	; 0x80
 8004cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004cb6:	480d      	ldr	r0, [pc, #52]	; (8004cec <MX_TIM6_Init+0x64>)
 8004cb8:	f007 fe1a 	bl	800c8f0 <HAL_TIM_Base_Init>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004cc2:	f000 fb11 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004cce:	463b      	mov	r3, r7
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4806      	ldr	r0, [pc, #24]	; (8004cec <MX_TIM6_Init+0x64>)
 8004cd4:	f008 fbfa 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8004cde:	f000 fb03 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20035cb0 	.word	0x20035cb0
 8004cf0:	40001000 	.word	0x40001000

08004cf4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004d02:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d04:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <MX_TIM7_Init+0x64>)
 8004d06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004d08:	4b12      	ldr	r3, [pc, #72]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d0a:	22b3      	movs	r2, #179	; 0xb3
 8004d0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d0e:	4b11      	ldr	r3, [pc, #68]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004d14:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d16:	2231      	movs	r2, #49	; 0x31
 8004d18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d1a:	4b0e      	ldr	r3, [pc, #56]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004d20:	480c      	ldr	r0, [pc, #48]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d22:	f007 fde5 	bl	800c8f0 <HAL_TIM_Base_Init>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8004d2c:	f000 fadc 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d30:	2300      	movs	r3, #0
 8004d32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004d38:	463b      	mov	r3, r7
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4805      	ldr	r0, [pc, #20]	; (8004d54 <MX_TIM7_Init+0x60>)
 8004d3e:	f008 fbc5 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004d48:	f000 face 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20035e54 	.word	0x20035e54
 8004d58:	40001400 	.word	0x40001400

08004d5c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08c      	sub	sp, #48	; 0x30
 8004d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	2224      	movs	r2, #36	; 0x24
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f00e fa0b 	bl	8013186 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004d70:	1d3b      	adds	r3, r7, #4
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004d78:	4b22      	ldr	r3, [pc, #136]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d7a:	4a23      	ldr	r2, [pc, #140]	; (8004e08 <MX_TIM8_Init+0xac>)
 8004d7c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004d7e:	4b21      	ldr	r3, [pc, #132]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004d84:	4b1f      	ldr	r3, [pc, #124]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d86:	2210      	movs	r2, #16
 8004d88:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004d8a:	4b1e      	ldr	r3, [pc, #120]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d90:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d92:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004d98:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d9e:	4b19      	ldr	r3, [pc, #100]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004da4:	2303      	movs	r3, #3
 8004da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004da8:	2300      	movs	r3, #0
 8004daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004db8:	2300      	movs	r3, #0
 8004dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	4619      	mov	r1, r3
 8004dce:	480d      	ldr	r0, [pc, #52]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004dd0:	f007 fe46 	bl	800ca60 <HAL_TIM_Encoder_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8004dda:	f000 fa85 	bl	80052e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004dde:	2300      	movs	r3, #0
 8004de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4806      	ldr	r0, [pc, #24]	; (8004e04 <MX_TIM8_Init+0xa8>)
 8004dec:	f008 fb6e 	bl	800d4cc <HAL_TIMEx_MasterConfigSynchronization>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004df6:	f000 fa77 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8004dfa:	bf00      	nop
 8004dfc:	3730      	adds	r7, #48	; 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200359d4 	.word	0x200359d4
 8004e08:	40010400 	.word	0x40010400

08004e0c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	609a      	str	r2, [r3, #8]
 8004e1c:	60da      	str	r2, [r3, #12]
 8004e1e:	611a      	str	r2, [r3, #16]
 8004e20:	615a      	str	r2, [r3, #20]
 8004e22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004e24:	4b1e      	ldr	r3, [pc, #120]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <MX_TIM10_Init+0x98>)
 8004e28:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8004e2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e30:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004e36:	4b1a      	ldr	r3, [pc, #104]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e3c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e3e:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e44:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e46:	2200      	movs	r2, #0
 8004e48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8004e4a:	4815      	ldr	r0, [pc, #84]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e4c:	f007 fd50 	bl	800c8f0 <HAL_TIM_Base_Init>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004e56:	f000 fa47 	bl	80052e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8004e5a:	4811      	ldr	r0, [pc, #68]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e5c:	f007 fd97 	bl	800c98e <HAL_TIM_PWM_Init>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004e66:	f000 fa3f 	bl	80052e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004e6a:	2360      	movs	r3, #96	; 0x60
 8004e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004e7a:	1d3b      	adds	r3, r7, #4
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4807      	ldr	r0, [pc, #28]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e82:	f007 ffbf 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004e8c:	f000 fa2c 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004e90:	4803      	ldr	r0, [pc, #12]	; (8004ea0 <MX_TIM10_Init+0x94>)
 8004e92:	f000 fe19 	bl	8005ac8 <HAL_TIM_MspPostInit>

}
 8004e96:	bf00      	nop
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20035af0 	.word	0x20035af0
 8004ea4:	40014400 	.word	0x40014400

08004ea8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	605a      	str	r2, [r3, #4]
 8004eb6:	609a      	str	r2, [r3, #8]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	611a      	str	r2, [r3, #16]
 8004ebc:	615a      	str	r2, [r3, #20]
 8004ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004ec0:	4b1e      	ldr	r3, [pc, #120]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ec2:	4a1f      	ldr	r2, [pc, #124]	; (8004f40 <MX_TIM11_Init+0x98>)
 8004ec4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004ec6:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ece:	2200      	movs	r2, #0
 8004ed0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004ee6:	4815      	ldr	r0, [pc, #84]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ee8:	f007 fd02 	bl	800c8f0 <HAL_TIM_Base_Init>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004ef2:	f000 f9f9 	bl	80052e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004ef6:	4811      	ldr	r0, [pc, #68]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004ef8:	f007 fd49 	bl	800c98e <HAL_TIM_PWM_Init>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004f02:	f000 f9f1 	bl	80052e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f06:	2360      	movs	r3, #96	; 0x60
 8004f08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f16:	1d3b      	adds	r3, r7, #4
 8004f18:	2200      	movs	r2, #0
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	4807      	ldr	r0, [pc, #28]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004f1e:	f007 ff71 	bl	800ce04 <HAL_TIM_PWM_ConfigChannel>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d001      	beq.n	8004f2c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004f28:	f000 f9de 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <MX_TIM11_Init+0x94>)
 8004f2e:	f000 fdcb 	bl	8005ac8 <HAL_TIM_MspPostInit>

}
 8004f32:	bf00      	nop
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20035c10 	.word	0x20035c10
 8004f40:	40014800 	.word	0x40014800

08004f44 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f4a:	4a0f      	ldr	r2, [pc, #60]	; (8004f88 <MX_TIM13_Init+0x44>)
 8004f4c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8004f4e:	4b0d      	ldr	r3, [pc, #52]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f50:	2259      	movs	r2, #89	; 0x59
 8004f52:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f5c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004f60:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f62:	4b08      	ldr	r3, [pc, #32]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004f68:	4b06      	ldr	r3, [pc, #24]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f6a:	2280      	movs	r2, #128	; 0x80
 8004f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004f6e:	4805      	ldr	r0, [pc, #20]	; (8004f84 <MX_TIM13_Init+0x40>)
 8004f70:	f007 fcbe 	bl	800c8f0 <HAL_TIM_Base_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004f7a:	f000 f9b5 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20035bd0 	.word	0x20035bd0
 8004f88:	40001c00 	.word	0x40001c00

08004f8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004f90:	4b11      	ldr	r3, [pc, #68]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <MX_USART2_UART_Init+0x50>)
 8004f94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004f96:	4b10      	ldr	r3, [pc, #64]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004f9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fb2:	220c      	movs	r2, #12
 8004fb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fb6:	4b08      	ldr	r3, [pc, #32]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004fc2:	4805      	ldr	r0, [pc, #20]	; (8004fd8 <MX_USART2_UART_Init+0x4c>)
 8004fc4:	f008 fb64 	bl	800d690 <HAL_UART_Init>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8004fce:	f000 f98b 	bl	80052e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20035db4 	.word	0x20035db4
 8004fdc:	40004400 	.word	0x40004400

08004fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	4b14      	ldr	r3, [pc, #80]	; (800503c <MX_DMA_Init+0x5c>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a13      	ldr	r2, [pc, #76]	; (800503c <MX_DMA_Init+0x5c>)
 8004ff0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b11      	ldr	r3, [pc, #68]	; (800503c <MX_DMA_Init+0x5c>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005002:	2200      	movs	r2, #0
 8005004:	2100      	movs	r1, #0
 8005006:	203a      	movs	r0, #58	; 0x3a
 8005008:	f003 f825 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800500c:	203a      	movs	r0, #58	; 0x3a
 800500e:	f003 f83e 	bl	800808e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005012:	2200      	movs	r2, #0
 8005014:	2100      	movs	r1, #0
 8005016:	203b      	movs	r0, #59	; 0x3b
 8005018:	f003 f81d 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800501c:	203b      	movs	r0, #59	; 0x3b
 800501e:	f003 f836 	bl	800808e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	2045      	movs	r0, #69	; 0x45
 8005028:	f003 f815 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800502c:	2045      	movs	r0, #69	; 0x45
 800502e:	f003 f82e 	bl	800808e <HAL_NVIC_EnableIRQ>

}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800

08005040 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b08c      	sub	sp, #48	; 0x30
 8005044:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005046:	f107 031c 	add.w	r3, r7, #28
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	60da      	str	r2, [r3, #12]
 8005054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	4b9c      	ldr	r3, [pc, #624]	; (80052cc <MX_GPIO_Init+0x28c>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a9b      	ldr	r2, [pc, #620]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005060:	f043 0310 	orr.w	r3, r3, #16
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b99      	ldr	r3, [pc, #612]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	61bb      	str	r3, [r7, #24]
 8005070:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	4b95      	ldr	r3, [pc, #596]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	4a94      	ldr	r2, [pc, #592]	; (80052cc <MX_GPIO_Init+0x28c>)
 800507c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005080:	6313      	str	r3, [r2, #48]	; 0x30
 8005082:	4b92      	ldr	r3, [pc, #584]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	4b8e      	ldr	r3, [pc, #568]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a8d      	ldr	r2, [pc, #564]	; (80052cc <MX_GPIO_Init+0x28c>)
 8005098:	f043 0304 	orr.w	r3, r3, #4
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b8b      	ldr	r3, [pc, #556]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b87      	ldr	r3, [pc, #540]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b2:	4a86      	ldr	r2, [pc, #536]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050b4:	f043 0301 	orr.w	r3, r3, #1
 80050b8:	6313      	str	r3, [r2, #48]	; 0x30
 80050ba:	4b84      	ldr	r3, [pc, #528]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	4b80      	ldr	r3, [pc, #512]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a7f      	ldr	r2, [pc, #508]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b7d      	ldr	r3, [pc, #500]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	60bb      	str	r3, [r7, #8]
 80050e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	607b      	str	r3, [r7, #4]
 80050e6:	4b79      	ldr	r3, [pc, #484]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a78      	ldr	r2, [pc, #480]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050ec:	f043 0308 	orr.w	r3, r3, #8
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b76      	ldr	r3, [pc, #472]	; (80052cc <MX_GPIO_Init+0x28c>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80050fe:	2200      	movs	r2, #0
 8005100:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005104:	4872      	ldr	r0, [pc, #456]	; (80052d0 <MX_GPIO_Init+0x290>)
 8005106:	f003 fd3b 	bl	8008b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800510a:	2200      	movs	r2, #0
 800510c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005110:	4870      	ldr	r0, [pc, #448]	; (80052d4 <MX_GPIO_Init+0x294>)
 8005112:	f003 fd35 	bl	8008b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005116:	2200      	movs	r2, #0
 8005118:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800511c:	486e      	ldr	r0, [pc, #440]	; (80052d8 <MX_GPIO_Init+0x298>)
 800511e:	f003 fd2f 	bl	8008b80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005122:	2200      	movs	r2, #0
 8005124:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005128:	486c      	ldr	r0, [pc, #432]	; (80052dc <MX_GPIO_Init+0x29c>)
 800512a:	f003 fd29 	bl	8008b80 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800512e:	2304      	movs	r3, #4
 8005130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005132:	4b6b      	ldr	r3, [pc, #428]	; (80052e0 <MX_GPIO_Init+0x2a0>)
 8005134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005136:	2300      	movs	r3, #0
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800513a:	f107 031c 	add.w	r3, r7, #28
 800513e:	4619      	mov	r1, r3
 8005140:	4863      	ldr	r0, [pc, #396]	; (80052d0 <MX_GPIO_Init+0x290>)
 8005142:	f003 fb5b 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005146:	230f      	movs	r3, #15
 8005148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800514a:	2303      	movs	r3, #3
 800514c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005152:	f107 031c 	add.w	r3, r7, #28
 8005156:	4619      	mov	r1, r3
 8005158:	4862      	ldr	r0, [pc, #392]	; (80052e4 <MX_GPIO_Init+0x2a4>)
 800515a:	f003 fb4f 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800515e:	23e1      	movs	r3, #225	; 0xe1
 8005160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005162:	2303      	movs	r3, #3
 8005164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800516a:	f107 031c 	add.w	r3, r7, #28
 800516e:	4619      	mov	r1, r3
 8005170:	485a      	ldr	r0, [pc, #360]	; (80052dc <MX_GPIO_Init+0x29c>)
 8005172:	f003 fb43 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005176:	2303      	movs	r3, #3
 8005178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800517a:	2303      	movs	r3, #3
 800517c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800517e:	2300      	movs	r3, #0
 8005180:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005182:	f107 031c 	add.w	r3, r7, #28
 8005186:	4619      	mov	r1, r3
 8005188:	4852      	ldr	r0, [pc, #328]	; (80052d4 <MX_GPIO_Init+0x294>)
 800518a:	f003 fb37 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800518e:	2304      	movs	r3, #4
 8005190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005192:	2300      	movs	r3, #0
 8005194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005196:	2301      	movs	r3, #1
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519a:	f107 031c 	add.w	r3, r7, #28
 800519e:	4619      	mov	r1, r3
 80051a0:	484c      	ldr	r0, [pc, #304]	; (80052d4 <MX_GPIO_Init+0x294>)
 80051a2:	f003 fb2b 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80051a6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80051aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80051ac:	2300      	movs	r3, #0
 80051ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80051b0:	2301      	movs	r3, #1
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	4619      	mov	r1, r3
 80051ba:	4845      	ldr	r0, [pc, #276]	; (80052d0 <MX_GPIO_Init+0x290>)
 80051bc:	f003 fb1e 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80051c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051c6:	2301      	movs	r3, #1
 80051c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ca:	2300      	movs	r3, #0
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ce:	2300      	movs	r3, #0
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051d2:	f107 031c 	add.w	r3, r7, #28
 80051d6:	4619      	mov	r1, r3
 80051d8:	483d      	ldr	r0, [pc, #244]	; (80052d0 <MX_GPIO_Init+0x290>)
 80051da:	f003 fb0f 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80051de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80051e4:	2301      	movs	r3, #1
 80051e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ec:	2300      	movs	r3, #0
 80051ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051f0:	f107 031c 	add.w	r3, r7, #28
 80051f4:	4619      	mov	r1, r3
 80051f6:	4837      	ldr	r0, [pc, #220]	; (80052d4 <MX_GPIO_Init+0x294>)
 80051f8:	f003 fb00 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80051fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005202:	4b37      	ldr	r3, [pc, #220]	; (80052e0 <MX_GPIO_Init+0x2a0>)
 8005204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800520a:	f107 031c 	add.w	r3, r7, #28
 800520e:	4619      	mov	r1, r3
 8005210:	4831      	ldr	r0, [pc, #196]	; (80052d8 <MX_GPIO_Init+0x298>)
 8005212:	f003 faf3 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005216:	f44f 7300 	mov.w	r3, #512	; 0x200
 800521a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800521c:	2301      	movs	r3, #1
 800521e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005224:	2300      	movs	r3, #0
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005228:	f107 031c 	add.w	r3, r7, #28
 800522c:	4619      	mov	r1, r3
 800522e:	482a      	ldr	r0, [pc, #168]	; (80052d8 <MX_GPIO_Init+0x298>)
 8005230:	f003 fae4 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800523a:	2301      	movs	r3, #1
 800523c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800523e:	2301      	movs	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005242:	2300      	movs	r3, #0
 8005244:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005246:	f107 031c 	add.w	r3, r7, #28
 800524a:	4619      	mov	r1, r3
 800524c:	4822      	ldr	r0, [pc, #136]	; (80052d8 <MX_GPIO_Init+0x298>)
 800524e:	f003 fad5 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005252:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005256:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005258:	2301      	movs	r3, #1
 800525a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005260:	2300      	movs	r3, #0
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005264:	f107 031c 	add.w	r3, r7, #28
 8005268:	4619      	mov	r1, r3
 800526a:	481c      	ldr	r0, [pc, #112]	; (80052dc <MX_GPIO_Init+0x29c>)
 800526c:	f003 fac6 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005270:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527e:	f107 031c 	add.w	r3, r7, #28
 8005282:	4619      	mov	r1, r3
 8005284:	4815      	ldr	r0, [pc, #84]	; (80052dc <MX_GPIO_Init+0x29c>)
 8005286:	f003 fab9 	bl	80087fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800528a:	239b      	movs	r3, #155	; 0x9b
 800528c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800528e:	2300      	movs	r3, #0
 8005290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005292:	2301      	movs	r3, #1
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005296:	f107 031c 	add.w	r3, r7, #28
 800529a:	4619      	mov	r1, r3
 800529c:	480e      	ldr	r0, [pc, #56]	; (80052d8 <MX_GPIO_Init+0x298>)
 800529e:	f003 faad 	bl	80087fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80052a2:	2200      	movs	r2, #0
 80052a4:	2100      	movs	r1, #0
 80052a6:	2008      	movs	r0, #8
 80052a8:	f002 fed5 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80052ac:	2008      	movs	r0, #8
 80052ae:	f002 feee 	bl	800808e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80052b2:	2200      	movs	r2, #0
 80052b4:	2100      	movs	r1, #0
 80052b6:	2017      	movs	r0, #23
 80052b8:	f002 fecd 	bl	8008056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80052bc:	2017      	movs	r0, #23
 80052be:	f002 fee6 	bl	800808e <HAL_NVIC_EnableIRQ>

}
 80052c2:	bf00      	nop
 80052c4:	3730      	adds	r7, #48	; 0x30
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40020400 	.word	0x40020400
 80052d8:	40020c00 	.word	0x40020c00
 80052dc:	40020000 	.word	0x40020000
 80052e0:	10310000 	.word	0x10310000
 80052e4:	40020800 	.word	0x40020800

080052e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80052ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80052ee:	e7fe      	b.n	80052ee <Error_Handler+0x6>

080052f0 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
	...

08005300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005306:	2300      	movs	r3, #0
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	4b10      	ldr	r3, [pc, #64]	; (800534c <HAL_MspInit+0x4c>)
 800530c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530e:	4a0f      	ldr	r2, [pc, #60]	; (800534c <HAL_MspInit+0x4c>)
 8005310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005314:	6453      	str	r3, [r2, #68]	; 0x44
 8005316:	4b0d      	ldr	r3, [pc, #52]	; (800534c <HAL_MspInit+0x4c>)
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005322:	2300      	movs	r3, #0
 8005324:	603b      	str	r3, [r7, #0]
 8005326:	4b09      	ldr	r3, [pc, #36]	; (800534c <HAL_MspInit+0x4c>)
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	4a08      	ldr	r2, [pc, #32]	; (800534c <HAL_MspInit+0x4c>)
 800532c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005330:	6413      	str	r3, [r2, #64]	; 0x40
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_MspInit+0x4c>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533a:	603b      	str	r3, [r7, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08c      	sub	sp, #48	; 0x30
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005358:	f107 031c 	add.w	r3, r7, #28
 800535c:	2200      	movs	r2, #0
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	605a      	str	r2, [r3, #4]
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	60da      	str	r2, [r3, #12]
 8005366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a4a      	ldr	r2, [pc, #296]	; (8005498 <HAL_ADC_MspInit+0x148>)
 800536e:	4293      	cmp	r3, r2
 8005370:	f040 808e 	bne.w	8005490 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	4b48      	ldr	r3, [pc, #288]	; (800549c <HAL_ADC_MspInit+0x14c>)
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	4a47      	ldr	r2, [pc, #284]	; (800549c <HAL_ADC_MspInit+0x14c>)
 800537e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005382:	6453      	str	r3, [r2, #68]	; 0x44
 8005384:	4b45      	ldr	r3, [pc, #276]	; (800549c <HAL_ADC_MspInit+0x14c>)
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	4b41      	ldr	r3, [pc, #260]	; (800549c <HAL_ADC_MspInit+0x14c>)
 8005396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005398:	4a40      	ldr	r2, [pc, #256]	; (800549c <HAL_ADC_MspInit+0x14c>)
 800539a:	f043 0304 	orr.w	r3, r3, #4
 800539e:	6313      	str	r3, [r2, #48]	; 0x30
 80053a0:	4b3e      	ldr	r3, [pc, #248]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	617b      	str	r3, [r7, #20]
 80053aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	4b3a      	ldr	r3, [pc, #232]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4a39      	ldr	r2, [pc, #228]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053b6:	f043 0301 	orr.w	r3, r3, #1
 80053ba:	6313      	str	r3, [r2, #48]	; 0x30
 80053bc:	4b37      	ldr	r3, [pc, #220]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	4b33      	ldr	r3, [pc, #204]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d0:	4a32      	ldr	r2, [pc, #200]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053d2:	f043 0302 	orr.w	r3, r3, #2
 80053d6:	6313      	str	r3, [r2, #48]	; 0x30
 80053d8:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_ADC_MspInit+0x14c>)
 80053da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053dc:	f003 0302 	and.w	r3, r3, #2
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80053e4:	230f      	movs	r3, #15
 80053e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80053e8:	2303      	movs	r3, #3
 80053ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f0:	f107 031c 	add.w	r3, r7, #28
 80053f4:	4619      	mov	r1, r3
 80053f6:	482a      	ldr	r0, [pc, #168]	; (80054a0 <HAL_ADC_MspInit+0x150>)
 80053f8:	f003 fa00 	bl	80087fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80053fc:	23ff      	movs	r3, #255	; 0xff
 80053fe:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005400:	2303      	movs	r3, #3
 8005402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005404:	2300      	movs	r3, #0
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005408:	f107 031c 	add.w	r3, r7, #28
 800540c:	4619      	mov	r1, r3
 800540e:	4825      	ldr	r0, [pc, #148]	; (80054a4 <HAL_ADC_MspInit+0x154>)
 8005410:	f003 f9f4 	bl	80087fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005414:	2303      	movs	r3, #3
 8005416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005418:	2303      	movs	r3, #3
 800541a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800541c:	2300      	movs	r3, #0
 800541e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005420:	f107 031c 	add.w	r3, r7, #28
 8005424:	4619      	mov	r1, r3
 8005426:	4820      	ldr	r0, [pc, #128]	; (80054a8 <HAL_ADC_MspInit+0x158>)
 8005428:	f003 f9e8 	bl	80087fc <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800542c:	4b1f      	ldr	r3, [pc, #124]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 800542e:	4a20      	ldr	r2, [pc, #128]	; (80054b0 <HAL_ADC_MspInit+0x160>)
 8005430:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005438:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800543a:	4b1c      	ldr	r3, [pc, #112]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 800543c:	2200      	movs	r2, #0
 800543e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005440:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005442:	2200      	movs	r2, #0
 8005444:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005446:	4b19      	ldr	r3, [pc, #100]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005448:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800544c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800544e:	4b17      	ldr	r3, [pc, #92]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005454:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005458:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800545c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800545e:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005460:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005464:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005468:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800546c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800546e:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005470:	2200      	movs	r2, #0
 8005472:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005474:	480d      	ldr	r0, [pc, #52]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005476:	f002 fe25 	bl	80080c4 <HAL_DMA_Init>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8005480:	f7ff ff32 	bl	80052e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a09      	ldr	r2, [pc, #36]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
 800548a:	4a08      	ldr	r2, [pc, #32]	; (80054ac <HAL_ADC_MspInit+0x15c>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005490:	bf00      	nop
 8005492:	3730      	adds	r7, #48	; 0x30
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40012100 	.word	0x40012100
 800549c:	40023800 	.word	0x40023800
 80054a0:	40020800 	.word	0x40020800
 80054a4:	40020000 	.word	0x40020000
 80054a8:	40020400 	.word	0x40020400
 80054ac:	20035df4 	.word	0x20035df4
 80054b0:	40026440 	.word	0x40026440

080054b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08c      	sub	sp, #48	; 0x30
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054bc:	f107 031c 	add.w	r3, r7, #28
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	60da      	str	r2, [r3, #12]
 80054ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a32      	ldr	r2, [pc, #200]	; (800559c <HAL_I2C_MspInit+0xe8>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d12c      	bne.n	8005530 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054d6:	2300      	movs	r3, #0
 80054d8:	61bb      	str	r3, [r7, #24]
 80054da:	4b31      	ldr	r3, [pc, #196]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 80054dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054de:	4a30      	ldr	r2, [pc, #192]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	6313      	str	r3, [r2, #48]	; 0x30
 80054e6:	4b2e      	ldr	r3, [pc, #184]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	61bb      	str	r3, [r7, #24]
 80054f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80054f2:	23c0      	movs	r3, #192	; 0xc0
 80054f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80054f6:	2312      	movs	r3, #18
 80054f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80054fa:	2301      	movs	r3, #1
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054fe:	2303      	movs	r3, #3
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005502:	2304      	movs	r3, #4
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005506:	f107 031c 	add.w	r3, r7, #28
 800550a:	4619      	mov	r1, r3
 800550c:	4825      	ldr	r0, [pc, #148]	; (80055a4 <HAL_I2C_MspInit+0xf0>)
 800550e:	f003 f975 	bl	80087fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]
 8005516:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 8005518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 800551c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005520:	6413      	str	r3, [r2, #64]	; 0x40
 8005522:	4b1f      	ldr	r3, [pc, #124]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800552e:	e031      	b.n	8005594 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a1c      	ldr	r2, [pc, #112]	; (80055a8 <HAL_I2C_MspInit+0xf4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d12c      	bne.n	8005594 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800553a:	2300      	movs	r3, #0
 800553c:	613b      	str	r3, [r7, #16]
 800553e:	4b18      	ldr	r3, [pc, #96]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	4a17      	ldr	r2, [pc, #92]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 8005544:	f043 0302 	orr.w	r3, r3, #2
 8005548:	6313      	str	r3, [r2, #48]	; 0x30
 800554a:	4b15      	ldr	r3, [pc, #84]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 800554c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	613b      	str	r3, [r7, #16]
 8005554:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005556:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800555a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800555c:	2312      	movs	r3, #18
 800555e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005560:	2301      	movs	r3, #1
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005564:	2303      	movs	r3, #3
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005568:	2304      	movs	r3, #4
 800556a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800556c:	f107 031c 	add.w	r3, r7, #28
 8005570:	4619      	mov	r1, r3
 8005572:	480c      	ldr	r0, [pc, #48]	; (80055a4 <HAL_I2C_MspInit+0xf0>)
 8005574:	f003 f942 	bl	80087fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
 800557c:	4b08      	ldr	r3, [pc, #32]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 8005582:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005586:	6413      	str	r3, [r2, #64]	; 0x40
 8005588:	4b05      	ldr	r3, [pc, #20]	; (80055a0 <HAL_I2C_MspInit+0xec>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	68fb      	ldr	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	3730      	adds	r7, #48	; 0x30
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	40005400 	.word	0x40005400
 80055a0:	40023800 	.word	0x40023800
 80055a4:	40020400 	.word	0x40020400
 80055a8:	40005800 	.word	0x40005800

080055ac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08a      	sub	sp, #40	; 0x28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055b4:	f107 0314 	add.w	r3, r7, #20
 80055b8:	2200      	movs	r2, #0
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	60da      	str	r2, [r3, #12]
 80055c2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a69      	ldr	r2, [pc, #420]	; (8005770 <HAL_SD_MspInit+0x1c4>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f040 80cb 	bne.w	8005766 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	4b67      	ldr	r3, [pc, #412]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	4a66      	ldr	r2, [pc, #408]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055de:	6453      	str	r3, [r2, #68]	; 0x44
 80055e0:	4b64      	ldr	r3, [pc, #400]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	613b      	str	r3, [r7, #16]
 80055ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	4b60      	ldr	r3, [pc, #384]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f4:	4a5f      	ldr	r2, [pc, #380]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055f6:	f043 0304 	orr.w	r3, r3, #4
 80055fa:	6313      	str	r3, [r2, #48]	; 0x30
 80055fc:	4b5d      	ldr	r3, [pc, #372]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 80055fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	60fb      	str	r3, [r7, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]
 800560c:	4b59      	ldr	r3, [pc, #356]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 800560e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005610:	4a58      	ldr	r2, [pc, #352]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 8005612:	f043 0308 	orr.w	r3, r3, #8
 8005616:	6313      	str	r3, [r2, #48]	; 0x30
 8005618:	4b56      	ldr	r3, [pc, #344]	; (8005774 <HAL_SD_MspInit+0x1c8>)
 800561a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005624:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005628:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562a:	2302      	movs	r3, #2
 800562c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005632:	2303      	movs	r3, #3
 8005634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005636:	230c      	movs	r3, #12
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800563a:	f107 0314 	add.w	r3, r7, #20
 800563e:	4619      	mov	r1, r3
 8005640:	484d      	ldr	r0, [pc, #308]	; (8005778 <HAL_SD_MspInit+0x1cc>)
 8005642:	f003 f8db 	bl	80087fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005646:	2304      	movs	r3, #4
 8005648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564a:	2302      	movs	r3, #2
 800564c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005652:	2303      	movs	r3, #3
 8005654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005656:	230c      	movs	r3, #12
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800565a:	f107 0314 	add.w	r3, r7, #20
 800565e:	4619      	mov	r1, r3
 8005660:	4846      	ldr	r0, [pc, #280]	; (800577c <HAL_SD_MspInit+0x1d0>)
 8005662:	f003 f8cb 	bl	80087fc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 8005668:	4a46      	ldr	r2, [pc, #280]	; (8005784 <HAL_SD_MspInit+0x1d8>)
 800566a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800566c:	4b44      	ldr	r3, [pc, #272]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 800566e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005672:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005674:	4b42      	ldr	r3, [pc, #264]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800567a:	4b41      	ldr	r3, [pc, #260]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 800567c:	2200      	movs	r2, #0
 800567e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005680:	4b3f      	ldr	r3, [pc, #252]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 8005682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005686:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005688:	4b3d      	ldr	r3, [pc, #244]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 800568a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800568e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005690:	4b3b      	ldr	r3, [pc, #236]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 8005692:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005696:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005698:	4b39      	ldr	r3, [pc, #228]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 800569a:	2220      	movs	r2, #32
 800569c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800569e:	4b38      	ldr	r3, [pc, #224]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80056a4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80056a6:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056a8:	2204      	movs	r2, #4
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80056ac:	4b34      	ldr	r3, [pc, #208]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056ae:	2203      	movs	r2, #3
 80056b0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80056b2:	4b33      	ldr	r3, [pc, #204]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056b4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80056b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80056ba:	4b31      	ldr	r3, [pc, #196]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80056c2:	482f      	ldr	r0, [pc, #188]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056c4:	f002 fcfe 	bl	80080c4 <HAL_DMA_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80056ce:	f7ff fe0b 	bl	80052e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056d6:	641a      	str	r2, [r3, #64]	; 0x40
 80056d8:	4a29      	ldr	r2, [pc, #164]	; (8005780 <HAL_SD_MspInit+0x1d4>)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80056de:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 80056e0:	4a2a      	ldr	r2, [pc, #168]	; (800578c <HAL_SD_MspInit+0x1e0>)
 80056e2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80056e4:	4b28      	ldr	r3, [pc, #160]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 80056e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056ea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056ec:	4b26      	ldr	r3, [pc, #152]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 80056ee:	2240      	movs	r2, #64	; 0x40
 80056f0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f2:	4b25      	ldr	r3, [pc, #148]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056f8:	4b23      	ldr	r3, [pc, #140]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 80056fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056fe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005700:	4b21      	ldr	r3, [pc, #132]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005702:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005706:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 800570a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800570e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005710:	4b1d      	ldr	r3, [pc, #116]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005712:	2220      	movs	r2, #32
 8005714:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005716:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005718:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800571c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800571e:	4b1a      	ldr	r3, [pc, #104]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005720:	2204      	movs	r2, #4
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005724:	4b18      	ldr	r3, [pc, #96]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005726:	2203      	movs	r2, #3
 8005728:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800572a:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 800572c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005730:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005732:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005734:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005738:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800573a:	4813      	ldr	r0, [pc, #76]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 800573c:	f002 fcc2 	bl	80080c4 <HAL_DMA_Init>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005746:	f7ff fdcf 	bl	80052e8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a0e      	ldr	r2, [pc, #56]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <HAL_SD_MspInit+0x1dc>)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8005756:	2200      	movs	r2, #0
 8005758:	2100      	movs	r1, #0
 800575a:	2031      	movs	r0, #49	; 0x31
 800575c:	f002 fc7b 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8005760:	2031      	movs	r0, #49	; 0x31
 8005762:	f002 fc94 	bl	800808e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005766:	bf00      	nop
 8005768:	3728      	adds	r7, #40	; 0x28
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40023800 	.word	0x40023800
 8005778:	40020800 	.word	0x40020800
 800577c:	40020c00 	.word	0x40020c00
 8005780:	2003591c 	.word	0x2003591c
 8005784:	40026458 	.word	0x40026458
 8005788:	20035c50 	.word	0x20035c50
 800578c:	400264a0 	.word	0x400264a0

08005790 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b08a      	sub	sp, #40	; 0x28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	f107 0314 	add.w	r3, r7, #20
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a19      	ldr	r2, [pc, #100]	; (8005814 <HAL_SPI_MspInit+0x84>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d12c      	bne.n	800580c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	613b      	str	r3, [r7, #16]
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	4a17      	ldr	r2, [pc, #92]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80057c0:	6413      	str	r3, [r2, #64]	; 0x40
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d6:	4a10      	ldr	r2, [pc, #64]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	6313      	str	r3, [r2, #48]	; 0x30
 80057de:	4b0e      	ldr	r3, [pc, #56]	; (8005818 <HAL_SPI_MspInit+0x88>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80057ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80057ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f0:	2302      	movs	r3, #2
 80057f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f8:	2303      	movs	r3, #3
 80057fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80057fc:	2305      	movs	r3, #5
 80057fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4619      	mov	r1, r3
 8005806:	4805      	ldr	r0, [pc, #20]	; (800581c <HAL_SPI_MspInit+0x8c>)
 8005808:	f002 fff8 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800580c:	bf00      	nop
 800580e:	3728      	adds	r7, #40	; 0x28
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40003800 	.word	0x40003800
 8005818:	40023800 	.word	0x40023800
 800581c:	40020400 	.word	0x40020400

08005820 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 031c 	add.w	r3, r7, #28
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2d      	ldr	r2, [pc, #180]	; (80058f4 <HAL_TIM_PWM_MspInit+0xd4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d12d      	bne.n	800589e <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	4b2c      	ldr	r3, [pc, #176]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584a:	4a2b      	ldr	r2, [pc, #172]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6453      	str	r3, [r2, #68]	; 0x44
 8005852:	4b29      	ldr	r3, [pc, #164]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005856:	f003 0301 	and.w	r3, r3, #1
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	4b25      	ldr	r3, [pc, #148]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005866:	4a24      	ldr	r2, [pc, #144]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005868:	f043 0310 	orr.w	r3, r3, #16
 800586c:	6313      	str	r3, [r2, #48]	; 0x30
 800586e:	4b22      	ldr	r3, [pc, #136]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	f003 0310 	and.w	r3, r3, #16
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800587a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800587e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005880:	2302      	movs	r3, #2
 8005882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005884:	2300      	movs	r3, #0
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005888:	2300      	movs	r3, #0
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800588c:	2301      	movs	r3, #1
 800588e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005890:	f107 031c 	add.w	r3, r7, #28
 8005894:	4619      	mov	r1, r3
 8005896:	4819      	ldr	r0, [pc, #100]	; (80058fc <HAL_TIM_PWM_MspInit+0xdc>)
 8005898:	f002 ffb0 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800589c:	e026      	b.n	80058ec <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a17      	ldr	r2, [pc, #92]	; (8005900 <HAL_TIM_PWM_MspInit+0xe0>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10e      	bne.n	80058c6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	4b12      	ldr	r3, [pc, #72]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	4a11      	ldr	r2, [pc, #68]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058b2:	f043 0302 	orr.w	r3, r3, #2
 80058b6:	6413      	str	r3, [r2, #64]	; 0x40
 80058b8:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	693b      	ldr	r3, [r7, #16]
}
 80058c4:	e012      	b.n	80058ec <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a0e      	ldr	r2, [pc, #56]	; (8005904 <HAL_TIM_PWM_MspInit+0xe4>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10d      	bne.n	80058ec <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80058d0:	2300      	movs	r3, #0
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	4b08      	ldr	r3, [pc, #32]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	4a07      	ldr	r2, [pc, #28]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058da:	f043 0304 	orr.w	r3, r3, #4
 80058de:	6413      	str	r3, [r2, #64]	; 0x40
 80058e0:	4b05      	ldr	r3, [pc, #20]	; (80058f8 <HAL_TIM_PWM_MspInit+0xd8>)
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
}
 80058ec:	bf00      	nop
 80058ee:	3730      	adds	r7, #48	; 0x30
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	40010000 	.word	0x40010000
 80058f8:	40023800 	.word	0x40023800
 80058fc:	40021000 	.word	0x40021000
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800

08005908 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b088      	sub	sp, #32
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a3e      	ldr	r2, [pc, #248]	; (8005a10 <HAL_TIM_Base_MspInit+0x108>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d116      	bne.n	8005948 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
 800591e:	4b3d      	ldr	r3, [pc, #244]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	4a3c      	ldr	r2, [pc, #240]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005924:	f043 0310 	orr.w	r3, r3, #16
 8005928:	6413      	str	r3, [r2, #64]	; 0x40
 800592a:	4b3a      	ldr	r3, [pc, #232]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 0310 	and.w	r3, r3, #16
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005936:	2200      	movs	r2, #0
 8005938:	2101      	movs	r1, #1
 800593a:	2036      	movs	r0, #54	; 0x36
 800593c:	f002 fb8b 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005940:	2036      	movs	r0, #54	; 0x36
 8005942:	f002 fba4 	bl	800808e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005946:	e05e      	b.n	8005a06 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a32      	ldr	r2, [pc, #200]	; (8005a18 <HAL_TIM_Base_MspInit+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d116      	bne.n	8005980 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595a:	4a2e      	ldr	r2, [pc, #184]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 800595c:	f043 0320 	orr.w	r3, r3, #32
 8005960:	6413      	str	r3, [r2, #64]	; 0x40
 8005962:	4b2c      	ldr	r3, [pc, #176]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	f003 0320 	and.w	r3, r3, #32
 800596a:	61bb      	str	r3, [r7, #24]
 800596c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800596e:	2200      	movs	r2, #0
 8005970:	2100      	movs	r1, #0
 8005972:	2037      	movs	r0, #55	; 0x37
 8005974:	f002 fb6f 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005978:	2037      	movs	r0, #55	; 0x37
 800597a:	f002 fb88 	bl	800808e <HAL_NVIC_EnableIRQ>
}
 800597e:	e042      	b.n	8005a06 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <HAL_TIM_Base_MspInit+0x114>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d10e      	bne.n	80059a8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800598a:	2300      	movs	r3, #0
 800598c:	617b      	str	r3, [r7, #20]
 800598e:	4b21      	ldr	r3, [pc, #132]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 8005994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005998:	6453      	str	r3, [r2, #68]	; 0x44
 800599a:	4b1e      	ldr	r3, [pc, #120]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a2:	617b      	str	r3, [r7, #20]
 80059a4:	697b      	ldr	r3, [r7, #20]
}
 80059a6:	e02e      	b.n	8005a06 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_TIM_Base_MspInit+0x118>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	4b17      	ldr	r3, [pc, #92]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ba:	4a16      	ldr	r2, [pc, #88]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c0:	6453      	str	r3, [r2, #68]	; 0x44
 80059c2:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ca:	613b      	str	r3, [r7, #16]
 80059cc:	693b      	ldr	r3, [r7, #16]
}
 80059ce:	e01a      	b.n	8005a06 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <HAL_TIM_Base_MspInit+0x11c>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d115      	bne.n	8005a06 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	4a0c      	ldr	r2, [pc, #48]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059e8:	6413      	str	r3, [r2, #64]	; 0x40
 80059ea:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <HAL_TIM_Base_MspInit+0x10c>)
 80059ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80059f6:	2200      	movs	r2, #0
 80059f8:	2100      	movs	r1, #0
 80059fa:	202c      	movs	r0, #44	; 0x2c
 80059fc:	f002 fb2b 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005a00:	202c      	movs	r0, #44	; 0x2c
 8005a02:	f002 fb44 	bl	800808e <HAL_NVIC_EnableIRQ>
}
 8005a06:	bf00      	nop
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40001000 	.word	0x40001000
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40001400 	.word	0x40001400
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40014800 	.word	0x40014800
 8005a24:	40001c00 	.word	0x40001c00

08005a28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b08a      	sub	sp, #40	; 0x28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a30:	f107 0314 	add.w	r3, r7, #20
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	605a      	str	r2, [r3, #4]
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1d      	ldr	r2, [pc, #116]	; (8005abc <HAL_TIM_Encoder_MspInit+0x94>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d133      	bne.n	8005ab2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a52:	4a1b      	ldr	r2, [pc, #108]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6453      	str	r3, [r2, #68]	; 0x44
 8005a5a:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a66:	2300      	movs	r3, #0
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6e:	4a14      	ldr	r2, [pc, #80]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a70:	f043 0304 	orr.w	r3, r3, #4
 8005a74:	6313      	str	r3, [r2, #48]	; 0x30
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <HAL_TIM_Encoder_MspInit+0x98>)
 8005a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005a82:	23c0      	movs	r3, #192	; 0xc0
 8005a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a86:	2302      	movs	r3, #2
 8005a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005a92:	2303      	movs	r3, #3
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a96:	f107 0314 	add.w	r3, r7, #20
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4809      	ldr	r0, [pc, #36]	; (8005ac4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005a9e:	f002 fead 	bl	80087fc <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	202c      	movs	r0, #44	; 0x2c
 8005aa8:	f002 fad5 	bl	8008056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005aac:	202c      	movs	r0, #44	; 0x2c
 8005aae:	f002 faee 	bl	800808e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005ab2:	bf00      	nop
 8005ab4:	3728      	adds	r7, #40	; 0x28
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40010400 	.word	0x40010400
 8005ac0:	40023800 	.word	0x40023800
 8005ac4:	40020800 	.word	0x40020800

08005ac8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b08c      	sub	sp, #48	; 0x30
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ad0:	f107 031c 	add.w	r3, r7, #28
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	605a      	str	r2, [r3, #4]
 8005ada:	609a      	str	r2, [r3, #8]
 8005adc:	60da      	str	r2, [r3, #12]
 8005ade:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a5c      	ldr	r2, [pc, #368]	; (8005c58 <HAL_TIM_MspPostInit+0x190>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d11f      	bne.n	8005b2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	4b5b      	ldr	r3, [pc, #364]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af2:	4a5a      	ldr	r2, [pc, #360]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005af4:	f043 0310 	orr.w	r3, r3, #16
 8005af8:	6313      	str	r3, [r2, #48]	; 0x30
 8005afa:	4b58      	ldr	r3, [pc, #352]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	61bb      	str	r3, [r7, #24]
 8005b04:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005b06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b14:	2300      	movs	r3, #0
 8005b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b1c:	f107 031c 	add.w	r3, r7, #28
 8005b20:	4619      	mov	r1, r3
 8005b22:	484f      	ldr	r0, [pc, #316]	; (8005c60 <HAL_TIM_MspPostInit+0x198>)
 8005b24:	f002 fe6a 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005b28:	e091      	b.n	8005c4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a4d      	ldr	r2, [pc, #308]	; (8005c64 <HAL_TIM_MspPostInit+0x19c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d11e      	bne.n	8005b72 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	4b48      	ldr	r3, [pc, #288]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	4a47      	ldr	r2, [pc, #284]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b3e:	f043 0302 	orr.w	r3, r3, #2
 8005b42:	6313      	str	r3, [r2, #48]	; 0x30
 8005b44:	4b45      	ldr	r3, [pc, #276]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b54:	2302      	movs	r3, #2
 8005b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005b60:	2302      	movs	r3, #2
 8005b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b64:	f107 031c 	add.w	r3, r7, #28
 8005b68:	4619      	mov	r1, r3
 8005b6a:	483f      	ldr	r0, [pc, #252]	; (8005c68 <HAL_TIM_MspPostInit+0x1a0>)
 8005b6c:	f002 fe46 	bl	80087fc <HAL_GPIO_Init>
}
 8005b70:	e06d      	b.n	8005c4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a3d      	ldr	r2, [pc, #244]	; (8005c6c <HAL_TIM_MspPostInit+0x1a4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d11f      	bne.n	8005bbc <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	4b36      	ldr	r3, [pc, #216]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b84:	4a35      	ldr	r2, [pc, #212]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b86:	f043 0308 	orr.w	r3, r3, #8
 8005b8a:	6313      	str	r3, [r2, #48]	; 0x30
 8005b8c:	4b33      	ldr	r3, [pc, #204]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	613b      	str	r3, [r7, #16]
 8005b96:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005b98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005baa:	2302      	movs	r3, #2
 8005bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bae:	f107 031c 	add.w	r3, r7, #28
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	482e      	ldr	r0, [pc, #184]	; (8005c70 <HAL_TIM_MspPostInit+0x1a8>)
 8005bb6:	f002 fe21 	bl	80087fc <HAL_GPIO_Init>
}
 8005bba:	e048      	b.n	8005c4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2c      	ldr	r2, [pc, #176]	; (8005c74 <HAL_TIM_MspPostInit+0x1ac>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d11f      	bne.n	8005c06 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
 8005bca:	4b24      	ldr	r3, [pc, #144]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bce:	4a23      	ldr	r2, [pc, #140]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005bd0:	f043 0302 	orr.w	r3, r3, #2
 8005bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be8:	2302      	movs	r3, #2
 8005bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bf8:	f107 031c 	add.w	r3, r7, #28
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	481a      	ldr	r0, [pc, #104]	; (8005c68 <HAL_TIM_MspPostInit+0x1a0>)
 8005c00:	f002 fdfc 	bl	80087fc <HAL_GPIO_Init>
}
 8005c04:	e023      	b.n	8005c4e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1b      	ldr	r2, [pc, #108]	; (8005c78 <HAL_TIM_MspPostInit+0x1b0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d11e      	bne.n	8005c4e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c10:	2300      	movs	r3, #0
 8005c12:	60bb      	str	r3, [r7, #8]
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	4a10      	ldr	r2, [pc, #64]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005c1a:	f043 0302 	orr.w	r3, r3, #2
 8005c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005c20:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <HAL_TIM_MspPostInit+0x194>)
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	60bb      	str	r3, [r7, #8]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c32:	2302      	movs	r3, #2
 8005c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c42:	f107 031c 	add.w	r3, r7, #28
 8005c46:	4619      	mov	r1, r3
 8005c48:	4807      	ldr	r0, [pc, #28]	; (8005c68 <HAL_TIM_MspPostInit+0x1a0>)
 8005c4a:	f002 fdd7 	bl	80087fc <HAL_GPIO_Init>
}
 8005c4e:	bf00      	nop
 8005c50:	3730      	adds	r7, #48	; 0x30
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40010000 	.word	0x40010000
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40020400 	.word	0x40020400
 8005c6c:	40000800 	.word	0x40000800
 8005c70:	40020c00 	.word	0x40020c00
 8005c74:	40014400 	.word	0x40014400
 8005c78:	40014800 	.word	0x40014800

08005c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	; 0x28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c84:	f107 0314 	add.w	r3, r7, #20
 8005c88:	2200      	movs	r2, #0
 8005c8a:	601a      	str	r2, [r3, #0]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	609a      	str	r2, [r3, #8]
 8005c90:	60da      	str	r2, [r3, #12]
 8005c92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a19      	ldr	r2, [pc, #100]	; (8005d00 <HAL_UART_MspInit+0x84>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d12b      	bne.n	8005cf6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	4b18      	ldr	r3, [pc, #96]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	4a17      	ldr	r2, [pc, #92]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cac:	6413      	str	r3, [r2, #64]	; 0x40
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005cba:	2300      	movs	r3, #0
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005cc4:	f043 0308 	orr.w	r3, r3, #8
 8005cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8005cca:	4b0e      	ldr	r3, [pc, #56]	; (8005d04 <HAL_UART_MspInit+0x88>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005cd6:	2360      	movs	r3, #96	; 0x60
 8005cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005ce6:	2307      	movs	r3, #7
 8005ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005cea:	f107 0314 	add.w	r3, r7, #20
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4805      	ldr	r0, [pc, #20]	; (8005d08 <HAL_UART_MspInit+0x8c>)
 8005cf2:	f002 fd83 	bl	80087fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005cf6:	bf00      	nop
 8005cf8:	3728      	adds	r7, #40	; 0x28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	40004400 	.word	0x40004400
 8005d04:	40023800 	.word	0x40023800
 8005d08:	40020c00 	.word	0x40020c00

08005d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005d10:	e7fe      	b.n	8005d10 <NMI_Handler+0x4>

08005d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d16:	e7fe      	b.n	8005d16 <HardFault_Handler+0x4>

08005d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d1c:	e7fe      	b.n	8005d1c <MemManage_Handler+0x4>

08005d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d22:	e7fe      	b.n	8005d22 <BusFault_Handler+0x4>

08005d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d28:	e7fe      	b.n	8005d28 <UsageFault_Handler+0x4>

08005d2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d3c:	bf00      	nop
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d4a:	bf00      	nop
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d58:	f001 fc5c 	bl	8007614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d5c:	bf00      	nop
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005d64:	2004      	movs	r0, #4
 8005d66:	f002 ff25 	bl	8008bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005d6a:	bf00      	nop
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005d72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005d76:	f002 ff1d 	bl	8008bb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005d7a:	bf00      	nop
 8005d7c:	bd80      	pop	{r7, pc}
	...

08005d80 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005d84:	4803      	ldr	r0, [pc, #12]	; (8005d94 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005d86:	f006 ff34 	bl	800cbf2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005d8a:	4803      	ldr	r0, [pc, #12]	; (8005d98 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005d8c:	f006 ff31 	bl	800cbf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200359d4 	.word	0x200359d4
 8005d98:	20035bd0 	.word	0x20035bd0

08005d9c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <SDIO_IRQHandler+0x10>)
 8005da2:	f004 ffcd 	bl	800ad40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20035d30 	.word	0x20035d30

08005db0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005db4:	4802      	ldr	r0, [pc, #8]	; (8005dc0 <TIM6_DAC_IRQHandler+0x10>)
 8005db6:	f006 ff1c 	bl	800cbf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005dba:	bf00      	nop
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20035cb0 	.word	0x20035cb0

08005dc4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005dc8:	4802      	ldr	r0, [pc, #8]	; (8005dd4 <TIM7_IRQHandler+0x10>)
 8005dca:	f006 ff12 	bl	800cbf2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005dce:	bf00      	nop
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20035e54 	.word	0x20035e54

08005dd8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005ddc:	4802      	ldr	r0, [pc, #8]	; (8005de8 <DMA2_Stream2_IRQHandler+0x10>)
 8005dde:	f002 fa99 	bl	8008314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005de2:	bf00      	nop
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20035df4 	.word	0x20035df4

08005dec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005df0:	4802      	ldr	r0, [pc, #8]	; (8005dfc <DMA2_Stream3_IRQHandler+0x10>)
 8005df2:	f002 fa8f 	bl	8008314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005df6:	bf00      	nop
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	2003591c 	.word	0x2003591c

08005e00 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005e04:	4802      	ldr	r0, [pc, #8]	; (8005e10 <DMA2_Stream6_IRQHandler+0x10>)
 8005e06:	f002 fa85 	bl	8008314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005e0a:	bf00      	nop
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	20035c50 	.word	0x20035c50

08005e14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e20:	2300      	movs	r3, #0
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e00a      	b.n	8005e3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005e26:	f3af 8000 	nop.w
 8005e2a:	4601      	mov	r1, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	60ba      	str	r2, [r7, #8]
 8005e32:	b2ca      	uxtb	r2, r1
 8005e34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	617b      	str	r3, [r7, #20]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	dbf0      	blt.n	8005e26 <_read+0x12>
	}

return len;
 8005e44:	687b      	ldr	r3, [r7, #4]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <_close>:
	}
	return len;
}

int _close(int file)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
	return -1;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e76:	605a      	str	r2, [r3, #4]
	return 0;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <_isatty>:

int _isatty(int file)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
	return 1;
 8005e8e:	2301      	movs	r3, #1
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
	return 0;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ec0:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <_sbrk+0x5c>)
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <_sbrk+0x60>)
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ecc:	4b13      	ldr	r3, [pc, #76]	; (8005f1c <_sbrk+0x64>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ed4:	4b11      	ldr	r3, [pc, #68]	; (8005f1c <_sbrk+0x64>)
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <_sbrk+0x68>)
 8005ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005eda:	4b10      	ldr	r3, [pc, #64]	; (8005f1c <_sbrk+0x64>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d207      	bcs.n	8005ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ee8:	f00d f918 	bl	801311c <__errno>
 8005eec:	4602      	mov	r2, r0
 8005eee:	230c      	movs	r3, #12
 8005ef0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	e009      	b.n	8005f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005ef8:	4b08      	ldr	r3, [pc, #32]	; (8005f1c <_sbrk+0x64>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005efe:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <_sbrk+0x64>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	4a05      	ldr	r2, [pc, #20]	; (8005f1c <_sbrk+0x64>)
 8005f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20050000 	.word	0x20050000
 8005f18:	00000800 	.word	0x00000800
 8005f1c:	2000029c 	.word	0x2000029c
 8005f20:	20037fa8 	.word	0x20037fa8

08005f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <SystemInit+0x28>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2e:	4a07      	ldr	r2, [pc, #28]	; (8005f4c <SystemInit+0x28>)
 8005f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005f38:	4b04      	ldr	r3, [pc, #16]	; (8005f4c <SystemInit+0x28>)
 8005f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f3e:	609a      	str	r2, [r3, #8]
#endif
}
 8005f40:	bf00      	nop
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	e000ed00 	.word	0xe000ed00

08005f50 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
	lcd_clear();
 8005f54:	f7fb f8a4 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005f58:	2100      	movs	r1, #0
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f7fb f8b0 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005f60:	4814      	ldr	r0, [pc, #80]	; (8005fb4 <batteryLowMode+0x64>)
 8005f62:	f7fb f8d7 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005f66:	2101      	movs	r1, #1
 8005f68:	2000      	movs	r0, #0
 8005f6a:	f7fb f8a9 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005f6e:	4812      	ldr	r0, [pc, #72]	; (8005fb8 <batteryLowMode+0x68>)
 8005f70:	f7fb f8d0 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005f74:	2152      	movs	r1, #82	; 0x52
 8005f76:	4811      	ldr	r0, [pc, #68]	; (8005fbc <batteryLowMode+0x6c>)
 8005f78:	f7fb ffb8 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005f7c:	2064      	movs	r0, #100	; 0x64
 8005f7e:	f001 fb69 	bl	8007654 <HAL_Delay>
		led.fullColor('Y');
 8005f82:	2159      	movs	r1, #89	; 0x59
 8005f84:	480d      	ldr	r0, [pc, #52]	; (8005fbc <batteryLowMode+0x6c>)
 8005f86:	f7fb ffb1 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005f8a:	2064      	movs	r0, #100	; 0x64
 8005f8c:	f001 fb62 	bl	8007654 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005f90:	480b      	ldr	r0, [pc, #44]	; (8005fc0 <batteryLowMode+0x70>)
 8005f92:	f7fb ff47 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2301      	moveq	r3, #1
 8005f9e:	2300      	movne	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d0e6      	beq.n	8005f74 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005fa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005faa:	f001 fb53 	bl	8007654 <HAL_Delay>
			break;
 8005fae:	bf00      	nop
		}
	}
}
 8005fb0:	bf00      	nop
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	0801835c 	.word	0x0801835c
 8005fb8:	08018364 	.word	0x08018364
 8005fbc:	200005ac 	.word	0x200005ac
 8005fc0:	200005a0 	.word	0x200005a0

08005fc4 <cppInit>:

void cppInit(void)
{
 8005fc4:	b598      	push	{r3, r4, r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
	lcd_init();
 8005fc8:	f7fb f826 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005fcc:	483f      	ldr	r0, [pc, #252]	; (80060cc <cppInit+0x108>)
 8005fce:	f7fd fd3f 	bl	8003a50 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005fd2:	2064      	movs	r0, #100	; 0x64
 8005fd4:	f001 fb3e 	bl	8007654 <HAL_Delay>
	power_sensor.updateValues();
 8005fd8:	483c      	ldr	r0, [pc, #240]	; (80060cc <cppInit+0x108>)
 8005fda:	f7fd fd49 	bl	8003a70 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005fde:	f7fb f85f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	f7fb f86b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8005fea:	4839      	ldr	r0, [pc, #228]	; (80060d0 <cppInit+0x10c>)
 8005fec:	f7fb f892 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7fb f864 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8005ff8:	4834      	ldr	r0, [pc, #208]	; (80060cc <cppInit+0x108>)
 8005ffa:	f7fd fd63 	bl	8003ac4 <_ZN11PowerSensor17getButteryVoltageEv>
 8005ffe:	ee10 3a10 	vmov	r3, s0
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa fab8 	bl	8000578 <__aeabi_f2d>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	461a      	mov	r2, r3
 800600e:	4623      	mov	r3, r4
 8006010:	4830      	ldr	r0, [pc, #192]	; (80060d4 <cppInit+0x110>)
 8006012:	f7fb f87f 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8006016:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800601a:	f001 fb1b 	bl	8007654 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800601e:	482b      	ldr	r0, [pc, #172]	; (80060cc <cppInit+0x108>)
 8006020:	f7fd fd62 	bl	8003ae8 <_ZN11PowerSensor12butteryCheckEv>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <cppInit+0x6a>
 800602a:	f7ff ff91 	bl	8005f50 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800602e:	482a      	ldr	r0, [pc, #168]	; (80060d8 <cppInit+0x114>)
 8006030:	f7fc ffdc 	bl	8002fec <_ZN6Logger10sdCardInitEv>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d007      	beq.n	800604a <cppInit+0x86>
		led.fullColor('G');
 800603a:	2147      	movs	r1, #71	; 0x47
 800603c:	4827      	ldr	r0, [pc, #156]	; (80060dc <cppInit+0x118>)
 800603e:	f7fb ff55 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006042:	2064      	movs	r0, #100	; 0x64
 8006044:	f001 fb06 	bl	8007654 <HAL_Delay>
 8006048:	e006      	b.n	8006058 <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 800604a:	2152      	movs	r1, #82	; 0x52
 800604c:	4823      	ldr	r0, [pc, #140]	; (80060dc <cppInit+0x118>)
 800604e:	f7fb ff4d 	bl	8001eec <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006052:	2064      	movs	r0, #100	; 0x64
 8006054:	f001 fafe 	bl	8007654 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006058:	4821      	ldr	r0, [pc, #132]	; (80060e0 <cppInit+0x11c>)
 800605a:	f7fc f8a3 	bl	80021a4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800605e:	4821      	ldr	r0, [pc, #132]	; (80060e4 <cppInit+0x120>)
 8006060:	f7fd f9da 	bl	8003418 <_ZN5Motor4initEv>
	encoder.init();
 8006064:	4820      	ldr	r0, [pc, #128]	; (80060e8 <cppInit+0x124>)
 8006066:	f7fb f89d 	bl	80011a4 <_ZN7Encoder4initEv>
	imu.init();
 800606a:	4820      	ldr	r0, [pc, #128]	; (80060ec <cppInit+0x128>)
 800606c:	f7fb fcf6 	bl	8001a5c <_ZN3IMU4initEv>
	line_trace.init();
 8006070:	481f      	ldr	r0, [pc, #124]	; (80060f0 <cppInit+0x12c>)
 8006072:	f7fc fda1 	bl	8002bb8 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006076:	481a      	ldr	r0, [pc, #104]	; (80060e0 <cppInit+0x11c>)
 8006078:	f7fc f9d4 	bl	8002424 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 800607c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006080:	f001 fae8 	bl	8007654 <HAL_Delay>

	led.fullColor('M');
 8006084:	214d      	movs	r1, #77	; 0x4d
 8006086:	4815      	ldr	r0, [pc, #84]	; (80060dc <cppInit+0x118>)
 8006088:	f7fb ff30 	bl	8001eec <_ZN3LED9fullColorEc>
	imu.calibration();
 800608c:	4817      	ldr	r0, [pc, #92]	; (80060ec <cppInit+0x128>)
 800608e:	f7fb fdb5 	bl	8001bfc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006092:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80060f4 <cppInit+0x130>
 8006096:	eddf 0a18 	vldr	s1, [pc, #96]	; 80060f8 <cppInit+0x134>
 800609a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80060fc <cppInit+0x138>
 800609e:	4818      	ldr	r0, [pc, #96]	; (8006100 <cppInit+0x13c>)
 80060a0:	f7fe f8d6 	bl	8004250 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 80060a4:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8006104 <cppInit+0x140>
 80060a8:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006108 <cppInit+0x144>
 80060ac:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800610c <cppInit+0x148>
 80060b0:	4813      	ldr	r0, [pc, #76]	; (8006100 <cppInit+0x13c>)
 80060b2:	f7fe f8e6 	bl	8004282 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 80060b6:	480c      	ldr	r0, [pc, #48]	; (80060e8 <cppInit+0x124>)
 80060b8:	f7fb f9be 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80060bc:	4814      	ldr	r0, [pc, #80]	; (8006110 <cppInit+0x14c>)
 80060be:	f7fd fb95 	bl	80037ec <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80060c2:	4814      	ldr	r0, [pc, #80]	; (8006114 <cppInit+0x150>)
 80060c4:	f7fd fc2c 	bl	8003920 <_ZN13PathFollowing4initEv>

}
 80060c8:	bf00      	nop
 80060ca:	bd98      	pop	{r3, r4, r7, pc}
 80060cc:	200005b0 	.word	0x200005b0
 80060d0:	08018368 	.word	0x08018368
 80060d4:	08018370 	.word	0x08018370
 80060d8:	200005d0 	.word	0x200005d0
 80060dc:	200005ac 	.word	0x200005ac
 80060e0:	200002a0 	.word	0x200002a0
 80060e4:	200005a8 	.word	0x200005a8
 80060e8:	20015d98 	.word	0x20015d98
 80060ec:	200005bc 	.word	0x200005bc
 80060f0:	20015e20 	.word	0x20015e20
 80060f4:	3cceca68 	.word	0x3cceca68
 80060f8:	4180f06f 	.word	0x4180f06f
 80060fc:	3fea2d0e 	.word	0x3fea2d0e
 8006100:	20015db4 	.word	0x20015db4
 8006104:	3ab7dacd 	.word	0x3ab7dacd
 8006108:	3f5e3fbc 	.word	0x3f5e3fbc
 800610c:	3d8eefa2 	.word	0x3d8eefa2
 8006110:	20015df0 	.word	0x20015df0
 8006114:	2001be68 	.word	0x2001be68

08006118 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800611c:	4819      	ldr	r0, [pc, #100]	; (8006184 <cppFlip1ms+0x6c>)
 800611e:	f7fc f89f 	bl	8002260 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8006122:	4819      	ldr	r0, [pc, #100]	; (8006188 <cppFlip1ms+0x70>)
 8006124:	f7fb fcc8 	bl	8001ab8 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8006128:	4818      	ldr	r0, [pc, #96]	; (800618c <cppFlip1ms+0x74>)
 800612a:	f7fb f85d 	bl	80011e8 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 800612e:	4818      	ldr	r0, [pc, #96]	; (8006190 <cppFlip1ms+0x78>)
 8006130:	f7fc fdda 	bl	8002ce8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006134:	4817      	ldr	r0, [pc, #92]	; (8006194 <cppFlip1ms+0x7c>)
 8006136:	f7fe f8bd 	bl	80042b4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800613a:	4817      	ldr	r0, [pc, #92]	; (8006198 <cppFlip1ms+0x80>)
 800613c:	f7fd fb3a 	bl	80037b4 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8006140:	4816      	ldr	r0, [pc, #88]	; (800619c <cppFlip1ms+0x84>)
 8006142:	f7fd f97b 	bl	800343c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006146:	4b16      	ldr	r3, [pc, #88]	; (80061a0 <cppFlip1ms+0x88>)
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	3301      	adds	r3, #1
 800614c:	b29a      	uxth	r2, r3
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <cppFlip1ms+0x88>)
 8006150:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006152:	4b13      	ldr	r3, [pc, #76]	; (80061a0 <cppFlip1ms+0x88>)
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d90c      	bls.n	8006174 <cppFlip1ms+0x5c>
		sys_ident.inOutputStore(imu.getOmega());
 800615a:	480b      	ldr	r0, [pc, #44]	; (8006188 <cppFlip1ms+0x70>)
 800615c:	f7fb fd04 	bl	8001b68 <_ZN3IMU8getOmegaEv>
 8006160:	eef0 7a40 	vmov.f32	s15, s0
 8006164:	eeb0 0a67 	vmov.f32	s0, s15
 8006168:	480e      	ldr	r0, [pc, #56]	; (80061a4 <cppFlip1ms+0x8c>)
 800616a:	f7fd fe45 	bl	8003df8 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 800616e:	4b0c      	ldr	r3, [pc, #48]	; (80061a0 <cppFlip1ms+0x88>)
 8006170:	2200      	movs	r2, #0
 8006172:	801a      	strh	r2, [r3, #0]
	}

	line_trace.storeLogs();
 8006174:	4806      	ldr	r0, [pc, #24]	; (8006190 <cppFlip1ms+0x78>)
 8006176:	f7fc febf 	bl	8002ef8 <_ZN9LineTrace9storeLogsEv>

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clearCnt();
 800617a:	4804      	ldr	r0, [pc, #16]	; (800618c <cppFlip1ms+0x74>)
 800617c:	f7fb f96a 	bl	8001454 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200002a0 	.word	0x200002a0
 8006188:	200005bc 	.word	0x200005bc
 800618c:	20015d98 	.word	0x20015d98
 8006190:	20015e20 	.word	0x20015e20
 8006194:	20015db4 	.word	0x20015db4
 8006198:	20015df0 	.word	0x20015df0
 800619c:	200005a8 	.word	0x200005a8
 80061a0:	20033592 	.word	0x20033592
 80061a4:	2001bc5c 	.word	0x2001bc5c

080061a8 <cppFlip100ns>:

void cppFlip100ns(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 80061ac:	4802      	ldr	r0, [pc, #8]	; (80061b8 <cppFlip100ns+0x10>)
 80061ae:	f7fc f809 	bl	80021c4 <_ZN10LineSensor17storeSensorValuesEv>
}
 80061b2:	bf00      	nop
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	200002a0 	.word	0x200002a0

080061bc <cppFlip10ms>:

void cppFlip10ms(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80061c0:	4b0a      	ldr	r3, [pc, #40]	; (80061ec <cppFlip10ms+0x30>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	3301      	adds	r3, #1
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <cppFlip10ms+0x30>)
 80061ca:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 80061cc:	4b07      	ldr	r3, [pc, #28]	; (80061ec <cppFlip10ms+0x30>)
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d905      	bls.n	80061e0 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80061d4:	4806      	ldr	r0, [pc, #24]	; (80061f0 <cppFlip10ms+0x34>)
 80061d6:	f7fd fe4b 	bl	8003e70 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80061da:	4b04      	ldr	r3, [pc, #16]	; (80061ec <cppFlip10ms+0x30>)
 80061dc:	2200      	movs	r2, #0
 80061de:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80061e0:	4b02      	ldr	r3, [pc, #8]	; (80061ec <cppFlip10ms+0x30>)
 80061e2:	881a      	ldrh	r2, [r3, #0]
 80061e4:	4b03      	ldr	r3, [pc, #12]	; (80061f4 <cppFlip10ms+0x38>)
 80061e6:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80061e8:	bf00      	nop
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	20033594 	.word	0x20033594
 80061f0:	2001bc5c 	.word	0x2001bc5c
 80061f4:	20033590 	.word	0x20033590

080061f8 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b082      	sub	sp, #8
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	4603      	mov	r3, r0
 8006200:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8006202:	88fb      	ldrh	r3, [r7, #6]
 8006204:	4619      	mov	r1, r3
 8006206:	4803      	ldr	r0, [pc, #12]	; (8006214 <cppExit+0x1c>)
 8006208:	f7fd fd06 	bl	8003c18 <_ZN10SideSensor12updateStatusEt>
}
 800620c:	bf00      	nop
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000598 	.word	0x20000598

08006218 <cppLoop>:

void cppLoop(void)
{
 8006218:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800621c:	b08b      	sub	sp, #44	; 0x2c
 800621e:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8006220:	48bf      	ldr	r0, [pc, #764]	; (8006520 <cppLoop+0x308>)
 8006222:	f7fd fc93 	bl	8003b4c <_ZN12RotarySwitch8getValueEv>
 8006226:	4603      	mov	r3, r0
 8006228:	2b0f      	cmp	r3, #15
 800622a:	f201 80bb 	bhi.w	80073a4 <cppLoop+0x118c>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <cppLoop+0x1c>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006275 	.word	0x08006275
 8006238:	0800674f 	.word	0x0800674f
 800623c:	080067c3 	.word	0x080067c3
 8006240:	080068b1 	.word	0x080068b1
 8006244:	08006961 	.word	0x08006961
 8006248:	080069ef 	.word	0x080069ef
 800624c:	08006ab5 	.word	0x08006ab5
 8006250:	08006bc9 	.word	0x08006bc9
 8006254:	08006c69 	.word	0x08006c69
 8006258:	0800719d 	.word	0x0800719d
 800625c:	08007239 	.word	0x08007239
 8006260:	080072d3 	.word	0x080072d3
 8006264:	080072fd 	.word	0x080072fd
 8006268:	08007327 	.word	0x08007327
 800626c:	08007351 	.word	0x08007351
 8006270:	0800737b 	.word	0x0800737b
	static int16_t selector;

	case 0:
		led.fullColor('R');
 8006274:	2152      	movs	r1, #82	; 0x52
 8006276:	48ab      	ldr	r0, [pc, #684]	; (8006524 <cppLoop+0x30c>)
 8006278:	f7fb fe38 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800627c:	f7fa ff10 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006280:	2100      	movs	r1, #0
 8006282:	2000      	movs	r0, #0
 8006284:	f7fa ff1c 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8006288:	48a7      	ldr	r0, [pc, #668]	; (8006528 <cppLoop+0x310>)
 800628a:	f7fc fce2 	bl	8002c52 <_ZN9LineTrace5getKpEv>
 800628e:	eeb0 7a40 	vmov.f32	s14, s0
 8006292:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800652c <cppLoop+0x314>
 8006296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800629a:	ee17 0a90 	vmov	r0, s15
 800629e:	f7fa f96b 	bl	8000578 <__aeabi_f2d>
 80062a2:	4603      	mov	r3, r0
 80062a4:	460c      	mov	r4, r1
 80062a6:	461a      	mov	r2, r3
 80062a8:	4623      	mov	r3, r4
 80062aa:	48a1      	ldr	r0, [pc, #644]	; (8006530 <cppLoop+0x318>)
 80062ac:	f7fa ff32 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80062b0:	2101      	movs	r1, #1
 80062b2:	2000      	movs	r0, #0
 80062b4:	f7fa ff04 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80062b8:	489b      	ldr	r0, [pc, #620]	; (8006528 <cppLoop+0x310>)
 80062ba:	f7fc fcd9 	bl	8002c70 <_ZN9LineTrace5getKiEv>
 80062be:	eeb0 7a40 	vmov.f32	s14, s0
 80062c2:	eddf 7a9c 	vldr	s15, [pc, #624]	; 8006534 <cppLoop+0x31c>
 80062c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ca:	ee17 0a90 	vmov	r0, s15
 80062ce:	f7fa f953 	bl	8000578 <__aeabi_f2d>
 80062d2:	4605      	mov	r5, r0
 80062d4:	460e      	mov	r6, r1
 80062d6:	4894      	ldr	r0, [pc, #592]	; (8006528 <cppLoop+0x310>)
 80062d8:	f7fc fcd9 	bl	8002c8e <_ZN9LineTrace5getKdEv>
 80062dc:	eeb0 7a40 	vmov.f32	s14, s0
 80062e0:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006538 <cppLoop+0x320>
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	ee17 0a90 	vmov	r0, s15
 80062ec:	f7fa f944 	bl	8000578 <__aeabi_f2d>
 80062f0:	4603      	mov	r3, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	e9cd 3400 	strd	r3, r4, [sp]
 80062f8:	462a      	mov	r2, r5
 80062fa:	4633      	mov	r3, r6
 80062fc:	488f      	ldr	r0, [pc, #572]	; (800653c <cppLoop+0x324>)
 80062fe:	f7fa ff09 	bl	8001114 <lcd_printf>

		static float adj_kp = line_trace.getKp();
 8006302:	4b8f      	ldr	r3, [pc, #572]	; (8006540 <cppLoop+0x328>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f3bf 8f5b 	dmb	ish
 800630a:	b2db      	uxtb	r3, r3
 800630c:	f003 0301 	and.w	r3, r3, #1
 8006310:	2b00      	cmp	r3, #0
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d015      	beq.n	800634a <cppLoop+0x132>
 800631e:	4888      	ldr	r0, [pc, #544]	; (8006540 <cppLoop+0x328>)
 8006320:	f00b fe95 	bl	801204e <__cxa_guard_acquire>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <cppLoop+0x132>
 8006334:	487c      	ldr	r0, [pc, #496]	; (8006528 <cppLoop+0x310>)
 8006336:	f7fc fc8c 	bl	8002c52 <_ZN9LineTrace5getKpEv>
 800633a:	eef0 7a40 	vmov.f32	s15, s0
 800633e:	4b81      	ldr	r3, [pc, #516]	; (8006544 <cppLoop+0x32c>)
 8006340:	edc3 7a00 	vstr	s15, [r3]
 8006344:	487e      	ldr	r0, [pc, #504]	; (8006540 <cppLoop+0x328>)
 8006346:	f00b fe8e 	bl	8012066 <__cxa_guard_release>
		static float adj_ki = line_trace.getKi();
 800634a:	4b7f      	ldr	r3, [pc, #508]	; (8006548 <cppLoop+0x330>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f3bf 8f5b 	dmb	ish
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf0c      	ite	eq
 800635c:	2301      	moveq	r3, #1
 800635e:	2300      	movne	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d015      	beq.n	8006392 <cppLoop+0x17a>
 8006366:	4878      	ldr	r0, [pc, #480]	; (8006548 <cppLoop+0x330>)
 8006368:	f00b fe71 	bl	801204e <__cxa_guard_acquire>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <cppLoop+0x17a>
 800637c:	486a      	ldr	r0, [pc, #424]	; (8006528 <cppLoop+0x310>)
 800637e:	f7fc fc77 	bl	8002c70 <_ZN9LineTrace5getKiEv>
 8006382:	eef0 7a40 	vmov.f32	s15, s0
 8006386:	4b71      	ldr	r3, [pc, #452]	; (800654c <cppLoop+0x334>)
 8006388:	edc3 7a00 	vstr	s15, [r3]
 800638c:	486e      	ldr	r0, [pc, #440]	; (8006548 <cppLoop+0x330>)
 800638e:	f00b fe6a 	bl	8012066 <__cxa_guard_release>
		static float adj_kd = line_trace.getKd();
 8006392:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <cppLoop+0x338>)
 8006394:	781b      	ldrb	r3, [r3, #0]
 8006396:	f3bf 8f5b 	dmb	ish
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	bf0c      	ite	eq
 80063a4:	2301      	moveq	r3, #1
 80063a6:	2300      	movne	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d015      	beq.n	80063da <cppLoop+0x1c2>
 80063ae:	4868      	ldr	r0, [pc, #416]	; (8006550 <cppLoop+0x338>)
 80063b0:	f00b fe4d 	bl	801204e <__cxa_guard_acquire>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bf14      	ite	ne
 80063ba:	2301      	movne	r3, #1
 80063bc:	2300      	moveq	r3, #0
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00a      	beq.n	80063da <cppLoop+0x1c2>
 80063c4:	4858      	ldr	r0, [pc, #352]	; (8006528 <cppLoop+0x310>)
 80063c6:	f7fc fc62 	bl	8002c8e <_ZN9LineTrace5getKdEv>
 80063ca:	eef0 7a40 	vmov.f32	s15, s0
 80063ce:	4b61      	ldr	r3, [pc, #388]	; (8006554 <cppLoop+0x33c>)
 80063d0:	edc3 7a00 	vstr	s15, [r3]
 80063d4:	485e      	ldr	r0, [pc, #376]	; (8006550 <cppLoop+0x338>)
 80063d6:	f00b fe46 	bl	8012066 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80063da:	485f      	ldr	r0, [pc, #380]	; (8006558 <cppLoop+0x340>)
 80063dc:	f7fb fd22 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80063e0:	4603      	mov	r3, r0
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	bf0c      	ite	eq
 80063e6:	2301      	moveq	r3, #1
 80063e8:	2300      	movne	r3, #0
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d022      	beq.n	8006436 <cppLoop+0x21e>
			led.LR(-1, 1);
 80063f0:	2201      	movs	r2, #1
 80063f2:	f04f 31ff 	mov.w	r1, #4294967295
 80063f6:	484b      	ldr	r0, [pc, #300]	; (8006524 <cppLoop+0x30c>)
 80063f8:	f7fb fe34 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80063fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006400:	f001 f928 	bl	8007654 <HAL_Delay>

			selector++;
 8006404:	4b55      	ldr	r3, [pc, #340]	; (800655c <cppLoop+0x344>)
 8006406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800640a:	b29b      	uxth	r3, r3
 800640c:	3301      	adds	r3, #1
 800640e:	b29b      	uxth	r3, r3
 8006410:	b21a      	sxth	r2, r3
 8006412:	4b52      	ldr	r3, [pc, #328]	; (800655c <cppLoop+0x344>)
 8006414:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006416:	4b51      	ldr	r3, [pc, #324]	; (800655c <cppLoop+0x344>)
 8006418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800641c:	2b02      	cmp	r3, #2
 800641e:	dd02      	ble.n	8006426 <cppLoop+0x20e>
 8006420:	4b4e      	ldr	r3, [pc, #312]	; (800655c <cppLoop+0x344>)
 8006422:	2200      	movs	r2, #0
 8006424:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006426:	2200      	movs	r2, #0
 8006428:	f04f 31ff 	mov.w	r1, #4294967295
 800642c:	483d      	ldr	r0, [pc, #244]	; (8006524 <cppLoop+0x30c>)
 800642e:	f7fb fe19 	bl	8002064 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8006432:	f000 bfb9 	b.w	80073a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_R){
 8006436:	4848      	ldr	r0, [pc, #288]	; (8006558 <cppLoop+0x340>)
 8006438:	f7fb fcf4 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800643c:	4603      	mov	r3, r0
 800643e:	2b10      	cmp	r3, #16
 8006440:	bf0c      	ite	eq
 8006442:	2301      	moveq	r3, #1
 8006444:	2300      	movne	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	f000 8089 	beq.w	8006560 <cppLoop+0x348>
			led.LR(-1, 1);
 800644e:	2201      	movs	r2, #1
 8006450:	f04f 31ff 	mov.w	r1, #4294967295
 8006454:	4833      	ldr	r0, [pc, #204]	; (8006524 <cppLoop+0x30c>)
 8006456:	f7fb fe05 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800645a:	2064      	movs	r0, #100	; 0x64
 800645c:	f001 f8fa 	bl	8007654 <HAL_Delay>
			if(selector == 0){
 8006460:	4b3e      	ldr	r3, [pc, #248]	; (800655c <cppLoop+0x344>)
 8006462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d113      	bne.n	8006492 <cppLoop+0x27a>
				adj_kp = adj_kp + 0.00001;
 800646a:	4b36      	ldr	r3, [pc, #216]	; (8006544 <cppLoop+0x32c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f7fa f882 	bl	8000578 <__aeabi_f2d>
 8006474:	a324      	add	r3, pc, #144	; (adr r3, 8006508 <cppLoop+0x2f0>)
 8006476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647a:	f7f9 ff1f 	bl	80002bc <__adddf3>
 800647e:	4603      	mov	r3, r0
 8006480:	460c      	mov	r4, r1
 8006482:	4618      	mov	r0, r3
 8006484:	4621      	mov	r1, r4
 8006486:	f7fa fbc7 	bl	8000c18 <__aeabi_d2f>
 800648a:	4602      	mov	r2, r0
 800648c:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <cppLoop+0x32c>)
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	e02b      	b.n	80064ea <cppLoop+0x2d2>
			else if(selector == 1){
 8006492:	4b32      	ldr	r3, [pc, #200]	; (800655c <cppLoop+0x344>)
 8006494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d113      	bne.n	80064c4 <cppLoop+0x2ac>
				adj_ki = adj_ki + 0.0001;
 800649c:	4b2b      	ldr	r3, [pc, #172]	; (800654c <cppLoop+0x334>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fa f869 	bl	8000578 <__aeabi_f2d>
 80064a6:	a31a      	add	r3, pc, #104	; (adr r3, 8006510 <cppLoop+0x2f8>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	f7f9 ff06 	bl	80002bc <__adddf3>
 80064b0:	4603      	mov	r3, r0
 80064b2:	460c      	mov	r4, r1
 80064b4:	4618      	mov	r0, r3
 80064b6:	4621      	mov	r1, r4
 80064b8:	f7fa fbae 	bl	8000c18 <__aeabi_d2f>
 80064bc:	4602      	mov	r2, r0
 80064be:	4b23      	ldr	r3, [pc, #140]	; (800654c <cppLoop+0x334>)
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e012      	b.n	80064ea <cppLoop+0x2d2>
				adj_kd = adj_kd + 0.000001;
 80064c4:	4b23      	ldr	r3, [pc, #140]	; (8006554 <cppLoop+0x33c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa f855 	bl	8000578 <__aeabi_f2d>
 80064ce:	a312      	add	r3, pc, #72	; (adr r3, 8006518 <cppLoop+0x300>)
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7f9 fef2 	bl	80002bc <__adddf3>
 80064d8:	4603      	mov	r3, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	4618      	mov	r0, r3
 80064de:	4621      	mov	r1, r4
 80064e0:	f7fa fb9a 	bl	8000c18 <__aeabi_d2f>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <cppLoop+0x33c>)
 80064e8:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80064ea:	2152      	movs	r1, #82	; 0x52
 80064ec:	480d      	ldr	r0, [pc, #52]	; (8006524 <cppLoop+0x30c>)
 80064ee:	f7fb fcfd 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80064f2:	2200      	movs	r2, #0
 80064f4:	f04f 31ff 	mov.w	r1, #4294967295
 80064f8:	480a      	ldr	r0, [pc, #40]	; (8006524 <cppLoop+0x30c>)
 80064fa:	f7fb fdb3 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80064fe:	f000 bf53 	b.w	80073a8 <cppLoop+0x1190>
 8006502:	bf00      	nop
 8006504:	f3af 8000 	nop.w
 8006508:	88e368f1 	.word	0x88e368f1
 800650c:	3ee4f8b5 	.word	0x3ee4f8b5
 8006510:	eb1c432d 	.word	0xeb1c432d
 8006514:	3f1a36e2 	.word	0x3f1a36e2
 8006518:	a0b5ed8d 	.word	0xa0b5ed8d
 800651c:	3eb0c6f7 	.word	0x3eb0c6f7
 8006520:	200005a4 	.word	0x200005a4
 8006524:	200005ac 	.word	0x200005ac
 8006528:	20015e20 	.word	0x20015e20
 800652c:	447a0000 	.word	0x447a0000
 8006530:	08018374 	.word	0x08018374
 8006534:	42c80000 	.word	0x42c80000
 8006538:	461c4000 	.word	0x461c4000
 800653c:	08018380 	.word	0x08018380
 8006540:	2003359c 	.word	0x2003359c
 8006544:	20033598 	.word	0x20033598
 8006548:	200335a4 	.word	0x200335a4
 800654c:	200335a0 	.word	0x200335a0
 8006550:	200335ac 	.word	0x200335ac
 8006554:	200335a8 	.word	0x200335a8
 8006558:	200005a0 	.word	0x200005a0
 800655c:	20033596 	.word	0x20033596
		else if(joy_stick.getValue() == JOY_L){
 8006560:	48c1      	ldr	r0, [pc, #772]	; (8006868 <cppLoop+0x650>)
 8006562:	f7fb fc5f 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	bf0c      	ite	eq
 800656c:	2301      	moveq	r3, #1
 800656e:	2300      	movne	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d059      	beq.n	800662a <cppLoop+0x412>
			led.LR(-1, 1);
 8006576:	2201      	movs	r2, #1
 8006578:	f04f 31ff 	mov.w	r1, #4294967295
 800657c:	48bb      	ldr	r0, [pc, #748]	; (800686c <cppLoop+0x654>)
 800657e:	f7fb fd71 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006582:	2064      	movs	r0, #100	; 0x64
 8006584:	f001 f866 	bl	8007654 <HAL_Delay>
			if(selector == 0){
 8006588:	4bb9      	ldr	r3, [pc, #740]	; (8006870 <cppLoop+0x658>)
 800658a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d113      	bne.n	80065ba <cppLoop+0x3a2>
				adj_kp = adj_kp - 0.00001;
 8006592:	4bb8      	ldr	r3, [pc, #736]	; (8006874 <cppLoop+0x65c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f7f9 ffee 	bl	8000578 <__aeabi_f2d>
 800659c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006850 <cppLoop+0x638>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7f9 fe89 	bl	80002b8 <__aeabi_dsub>
 80065a6:	4603      	mov	r3, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	4618      	mov	r0, r3
 80065ac:	4621      	mov	r1, r4
 80065ae:	f7fa fb33 	bl	8000c18 <__aeabi_d2f>
 80065b2:	4602      	mov	r2, r0
 80065b4:	4baf      	ldr	r3, [pc, #700]	; (8006874 <cppLoop+0x65c>)
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e02b      	b.n	8006612 <cppLoop+0x3fa>
			else if(selector == 1){
 80065ba:	4bad      	ldr	r3, [pc, #692]	; (8006870 <cppLoop+0x658>)
 80065bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d113      	bne.n	80065ec <cppLoop+0x3d4>
				adj_ki = adj_ki - 0.0001;
 80065c4:	4bac      	ldr	r3, [pc, #688]	; (8006878 <cppLoop+0x660>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7f9 ffd5 	bl	8000578 <__aeabi_f2d>
 80065ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8006858 <cppLoop+0x640>)
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f7f9 fe70 	bl	80002b8 <__aeabi_dsub>
 80065d8:	4603      	mov	r3, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	4618      	mov	r0, r3
 80065de:	4621      	mov	r1, r4
 80065e0:	f7fa fb1a 	bl	8000c18 <__aeabi_d2f>
 80065e4:	4602      	mov	r2, r0
 80065e6:	4ba4      	ldr	r3, [pc, #656]	; (8006878 <cppLoop+0x660>)
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e012      	b.n	8006612 <cppLoop+0x3fa>
				adj_kd = adj_kd - 0.000001;
 80065ec:	4ba3      	ldr	r3, [pc, #652]	; (800687c <cppLoop+0x664>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7f9 ffc1 	bl	8000578 <__aeabi_f2d>
 80065f6:	a39a      	add	r3, pc, #616	; (adr r3, 8006860 <cppLoop+0x648>)
 80065f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fc:	f7f9 fe5c 	bl	80002b8 <__aeabi_dsub>
 8006600:	4603      	mov	r3, r0
 8006602:	460c      	mov	r4, r1
 8006604:	4618      	mov	r0, r3
 8006606:	4621      	mov	r1, r4
 8006608:	f7fa fb06 	bl	8000c18 <__aeabi_d2f>
 800660c:	4602      	mov	r2, r0
 800660e:	4b9b      	ldr	r3, [pc, #620]	; (800687c <cppLoop+0x664>)
 8006610:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006612:	2152      	movs	r1, #82	; 0x52
 8006614:	4895      	ldr	r0, [pc, #596]	; (800686c <cppLoop+0x654>)
 8006616:	f7fb fc69 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800661a:	2200      	movs	r2, #0
 800661c:	f04f 31ff 	mov.w	r1, #4294967295
 8006620:	4892      	ldr	r0, [pc, #584]	; (800686c <cppLoop+0x654>)
 8006622:	f7fb fd1f 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006626:	f000 bebf 	b.w	80073a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_D){
 800662a:	488f      	ldr	r0, [pc, #572]	; (8006868 <cppLoop+0x650>)
 800662c:	f7fb fbfa 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006630:	4603      	mov	r3, r0
 8006632:	2b04      	cmp	r3, #4
 8006634:	bf0c      	ite	eq
 8006636:	2301      	moveq	r3, #1
 8006638:	2300      	movne	r3, #0
 800663a:	b2db      	uxtb	r3, r3
 800663c:	2b00      	cmp	r3, #0
 800663e:	d03e      	beq.n	80066be <cppLoop+0x4a6>
			led.LR(-1, 1);
 8006640:	2201      	movs	r2, #1
 8006642:	f04f 31ff 	mov.w	r1, #4294967295
 8006646:	4889      	ldr	r0, [pc, #548]	; (800686c <cppLoop+0x654>)
 8006648:	f7fb fd0c 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800664c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006650:	f001 f800 	bl	8007654 <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8006654:	f107 031c 	add.w	r3, r7, #28
 8006658:	2201      	movs	r2, #1
 800665a:	4989      	ldr	r1, [pc, #548]	; (8006880 <cppLoop+0x668>)
 800665c:	4889      	ldr	r0, [pc, #548]	; (8006884 <cppLoop+0x66c>)
 800665e:	f7fb f829 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8006662:	f107 0318 	add.w	r3, r7, #24
 8006666:	2201      	movs	r2, #1
 8006668:	4987      	ldr	r1, [pc, #540]	; (8006888 <cppLoop+0x670>)
 800666a:	4886      	ldr	r0, [pc, #536]	; (8006884 <cppLoop+0x66c>)
 800666c:	f7fb f822 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8006670:	f107 0314 	add.w	r3, r7, #20
 8006674:	2201      	movs	r2, #1
 8006676:	4985      	ldr	r1, [pc, #532]	; (800688c <cppLoop+0x674>)
 8006678:	4882      	ldr	r0, [pc, #520]	; (8006884 <cppLoop+0x66c>)
 800667a:	f7fb f81b 	bl	80016b4 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 800667e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006682:	ed97 7a06 	vldr	s14, [r7, #24]
 8006686:	edd7 6a05 	vldr	s13, [r7, #20]
 800668a:	eeb0 1a66 	vmov.f32	s2, s13
 800668e:	eef0 0a47 	vmov.f32	s1, s14
 8006692:	eeb0 0a67 	vmov.f32	s0, s15
 8006696:	487e      	ldr	r0, [pc, #504]	; (8006890 <cppLoop+0x678>)
 8006698:	f7fc fac2 	bl	8002c20 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4a75      	ldr	r2, [pc, #468]	; (8006874 <cppLoop+0x65c>)
 80066a0:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4a74      	ldr	r2, [pc, #464]	; (8006878 <cppLoop+0x660>)
 80066a6:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	4a74      	ldr	r2, [pc, #464]	; (800687c <cppLoop+0x664>)
 80066ac:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80066ae:	2200      	movs	r2, #0
 80066b0:	f04f 31ff 	mov.w	r1, #4294967295
 80066b4:	486d      	ldr	r0, [pc, #436]	; (800686c <cppLoop+0x654>)
 80066b6:	f7fb fcd5 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80066ba:	f000 be75 	b.w	80073a8 <cppLoop+0x1190>
		else if(joy_stick.getValue() == JOY_C){
 80066be:	486a      	ldr	r0, [pc, #424]	; (8006868 <cppLoop+0x650>)
 80066c0:	f7fb fbb0 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 8669 	beq.w	80073a8 <cppLoop+0x1190>
			led.LR(-1, 1);
 80066d6:	2201      	movs	r2, #1
 80066d8:	f04f 31ff 	mov.w	r1, #4294967295
 80066dc:	4863      	ldr	r0, [pc, #396]	; (800686c <cppLoop+0x654>)
 80066de:	f7fb fcc1 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80066e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80066e6:	f000 ffb5 	bl	8007654 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80066ea:	2300      	movs	r3, #0
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	4b61      	ldr	r3, [pc, #388]	; (8006874 <cppLoop+0x65c>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	4963      	ldr	r1, [pc, #396]	; (8006880 <cppLoop+0x668>)
 80066f4:	4863      	ldr	r0, [pc, #396]	; (8006884 <cppLoop+0x66c>)
 80066f6:	f7fa ff77 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	4b5e      	ldr	r3, [pc, #376]	; (8006878 <cppLoop+0x660>)
 8006700:	2201      	movs	r2, #1
 8006702:	4961      	ldr	r1, [pc, #388]	; (8006888 <cppLoop+0x670>)
 8006704:	485f      	ldr	r0, [pc, #380]	; (8006884 <cppLoop+0x66c>)
 8006706:	f7fa ff6f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 800670a:	2300      	movs	r3, #0
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	4b5b      	ldr	r3, [pc, #364]	; (800687c <cppLoop+0x664>)
 8006710:	2201      	movs	r2, #1
 8006712:	495e      	ldr	r1, [pc, #376]	; (800688c <cppLoop+0x674>)
 8006714:	485b      	ldr	r0, [pc, #364]	; (8006884 <cppLoop+0x66c>)
 8006716:	f7fa ff67 	bl	80015e8 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 800671a:	4b56      	ldr	r3, [pc, #344]	; (8006874 <cppLoop+0x65c>)
 800671c:	edd3 7a00 	vldr	s15, [r3]
 8006720:	4b55      	ldr	r3, [pc, #340]	; (8006878 <cppLoop+0x660>)
 8006722:	ed93 7a00 	vldr	s14, [r3]
 8006726:	4b55      	ldr	r3, [pc, #340]	; (800687c <cppLoop+0x664>)
 8006728:	edd3 6a00 	vldr	s13, [r3]
 800672c:	eeb0 1a66 	vmov.f32	s2, s13
 8006730:	eef0 0a47 	vmov.f32	s1, s14
 8006734:	eeb0 0a67 	vmov.f32	s0, s15
 8006738:	4855      	ldr	r0, [pc, #340]	; (8006890 <cppLoop+0x678>)
 800673a:	f7fc fa71 	bl	8002c20 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 800673e:	2200      	movs	r2, #0
 8006740:	f04f 31ff 	mov.w	r1, #4294967295
 8006744:	4849      	ldr	r0, [pc, #292]	; (800686c <cppLoop+0x654>)
 8006746:	f7fb fc8d 	bl	8002064 <_ZN3LED2LREaa>
		break;
 800674a:	f000 be2d 	b.w	80073a8 <cppLoop+0x1190>

	case 1:
		led.fullColor('G');
 800674e:	2147      	movs	r1, #71	; 0x47
 8006750:	4846      	ldr	r0, [pc, #280]	; (800686c <cppLoop+0x654>)
 8006752:	f7fb fbcb 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006756:	f7fa fca3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800675a:	2100      	movs	r1, #0
 800675c:	2000      	movs	r0, #0
 800675e:	f7fa fcaf 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8006762:	484c      	ldr	r0, [pc, #304]	; (8006894 <cppLoop+0x67c>)
 8006764:	f7fa fcd6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006768:	2101      	movs	r1, #1
 800676a:	2000      	movs	r0, #0
 800676c:	f7fa fca8 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8006770:	4849      	ldr	r0, [pc, #292]	; (8006898 <cppLoop+0x680>)
 8006772:	f7fa fccf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006776:	483c      	ldr	r0, [pc, #240]	; (8006868 <cppLoop+0x650>)
 8006778:	f7fb fb54 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800677c:	4603      	mov	r3, r0
 800677e:	2b02      	cmp	r3, #2
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 860f 	beq.w	80073ac <cppLoop+0x1194>
			HAL_Delay(500);
 800678e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006792:	f000 ff5f 	bl	8007654 <HAL_Delay>

			line_trace.setTargetVelocity(0.8);
 8006796:	ed9f 0a41 	vldr	s0, [pc, #260]	; 800689c <cppLoop+0x684>
 800679a:	483d      	ldr	r0, [pc, #244]	; (8006890 <cppLoop+0x678>)
 800679c:	f7fc fa95 	bl	8002cca <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80067a0:	f04f 32ff 	mov.w	r2, #4294967295
 80067a4:	2101      	movs	r1, #1
 80067a6:	4831      	ldr	r0, [pc, #196]	; (800686c <cppLoop+0x654>)
 80067a8:	f7fb fc5c 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.running();
 80067ac:	4838      	ldr	r0, [pc, #224]	; (8006890 <cppLoop+0x678>)
 80067ae:	f7fc fb4f 	bl	8002e50 <_ZN9LineTrace7runningEv>
			//HAL_Delay(3000);

			//line_trace.stop();
			led.LR(0, -1);
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	2100      	movs	r1, #0
 80067b8:	482c      	ldr	r0, [pc, #176]	; (800686c <cppLoop+0x654>)
 80067ba:	f7fb fc53 	bl	8002064 <_ZN3LED2LREaa>

			//logger.stop();
		}

		break;
 80067be:	f000 bdf5 	b.w	80073ac <cppLoop+0x1194>

	case 2:
		led.fullColor('B');
 80067c2:	2142      	movs	r1, #66	; 0x42
 80067c4:	4829      	ldr	r0, [pc, #164]	; (800686c <cppLoop+0x654>)
 80067c6:	f7fb fb91 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80067ca:	f7fa fc69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80067ce:	2100      	movs	r1, #0
 80067d0:	2000      	movs	r0, #0
 80067d2:	f7fa fc75 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 80067d6:	4832      	ldr	r0, [pc, #200]	; (80068a0 <cppLoop+0x688>)
 80067d8:	f7fa fc9c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80067dc:	2101      	movs	r1, #1
 80067de:	2000      	movs	r0, #0
 80067e0:	f7fa fc6e 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80067e4:	482f      	ldr	r0, [pc, #188]	; (80068a4 <cppLoop+0x68c>)
 80067e6:	f7fa fc95 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80067ea:	481f      	ldr	r0, [pc, #124]	; (8006868 <cppLoop+0x650>)
 80067ec:	f7fb fb1a 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	bf0c      	ite	eq
 80067f6:	2301      	moveq	r3, #1
 80067f8:	2300      	movne	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f000 85d7 	beq.w	80073b0 <cppLoop+0x1198>
			led.LR(-1, 1);
 8006802:	2201      	movs	r2, #1
 8006804:	f04f 31ff 	mov.w	r1, #4294967295
 8006808:	4818      	ldr	r0, [pc, #96]	; (800686c <cppLoop+0x654>)
 800680a:	f7fb fc2b 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 800680e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8006812:	f000 ff1f 	bl	8007654 <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8006816:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80068a8 <cppLoop+0x690>
 800681a:	4824      	ldr	r0, [pc, #144]	; (80068ac <cppLoop+0x694>)
 800681c:	f7fd fb7e 	bl	8003f1c <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8006820:	4822      	ldr	r0, [pc, #136]	; (80068ac <cppLoop+0x694>)
 8006822:	f7fd fb8b 	bl	8003f3c <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8006826:	f244 405c 	movw	r0, #17500	; 0x445c
 800682a:	f000 ff13 	bl	8007654 <HAL_Delay>
			sys_ident.stop();
 800682e:	481f      	ldr	r0, [pc, #124]	; (80068ac <cppLoop+0x694>)
 8006830:	f7fd fb96 	bl	8003f60 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8006834:	481d      	ldr	r0, [pc, #116]	; (80068ac <cppLoop+0x694>)
 8006836:	f7fd faff 	bl	8003e38 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 800683a:	2200      	movs	r2, #0
 800683c:	f04f 31ff 	mov.w	r1, #4294967295
 8006840:	480a      	ldr	r0, [pc, #40]	; (800686c <cppLoop+0x654>)
 8006842:	f7fb fc0f 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006846:	f000 bdb3 	b.w	80073b0 <cppLoop+0x1198>
 800684a:	bf00      	nop
 800684c:	f3af 8000 	nop.w
 8006850:	88e368f1 	.word	0x88e368f1
 8006854:	3ee4f8b5 	.word	0x3ee4f8b5
 8006858:	eb1c432d 	.word	0xeb1c432d
 800685c:	3f1a36e2 	.word	0x3f1a36e2
 8006860:	a0b5ed8d 	.word	0xa0b5ed8d
 8006864:	3eb0c6f7 	.word	0x3eb0c6f7
 8006868:	200005a0 	.word	0x200005a0
 800686c:	200005ac 	.word	0x200005ac
 8006870:	20033596 	.word	0x20033596
 8006874:	20033598 	.word	0x20033598
 8006878:	200335a0 	.word	0x200335a0
 800687c:	200335a8 	.word	0x200335a8
 8006880:	08018390 	.word	0x08018390
 8006884:	08018398 	.word	0x08018398
 8006888:	080183a0 	.word	0x080183a0
 800688c:	080183a8 	.word	0x080183a8
 8006890:	20015e20 	.word	0x20015e20
 8006894:	080183b0 	.word	0x080183b0
 8006898:	080183bc 	.word	0x080183bc
 800689c:	3f4ccccd 	.word	0x3f4ccccd
 80068a0:	080183c4 	.word	0x080183c4
 80068a4:	080183cc 	.word	0x080183cc
 80068a8:	3e99999a 	.word	0x3e99999a
 80068ac:	2001bc5c 	.word	0x2001bc5c

	case 3:
		led.fullColor('M');
 80068b0:	214d      	movs	r1, #77	; 0x4d
 80068b2:	48af      	ldr	r0, [pc, #700]	; (8006b70 <cppLoop+0x958>)
 80068b4:	f7fb fb1a 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80068b8:	f7fa fbf2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80068bc:	2100      	movs	r1, #0
 80068be:	2000      	movs	r0, #0
 80068c0:	f7fa fbfe 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80068c4:	48ab      	ldr	r0, [pc, #684]	; (8006b74 <cppLoop+0x95c>)
 80068c6:	f7fa fc25 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80068ca:	2101      	movs	r1, #1
 80068cc:	2000      	movs	r0, #0
 80068ce:	f7fa fbf7 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80068d2:	48a9      	ldr	r0, [pc, #676]	; (8006b78 <cppLoop+0x960>)
 80068d4:	f7fa fc1e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80068d8:	48a8      	ldr	r0, [pc, #672]	; (8006b7c <cppLoop+0x964>)
 80068da:	f7fb faa3 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	bf0c      	ite	eq
 80068e4:	2301      	moveq	r3, #1
 80068e6:	2300      	movne	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 8562 	beq.w	80073b4 <cppLoop+0x119c>
			led.LR(-1, 1);
 80068f0:	2201      	movs	r2, #1
 80068f2:	f04f 31ff 	mov.w	r1, #4294967295
 80068f6:	489e      	ldr	r0, [pc, #632]	; (8006b70 <cppLoop+0x958>)
 80068f8:	f7fb fbb4 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80068fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006900:	f000 fea8 	bl	8007654 <HAL_Delay>

			logger.start();
 8006904:	489e      	ldr	r0, [pc, #632]	; (8006b80 <cppLoop+0x968>)
 8006906:	f7fc fd53 	bl	80033b0 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800690a:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006b84 <cppLoop+0x96c>
 800690e:	489e      	ldr	r0, [pc, #632]	; (8006b88 <cppLoop+0x970>)
 8006910:	f7fc f9cc 	bl	8002cac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006914:	489c      	ldr	r0, [pc, #624]	; (8006b88 <cppLoop+0x970>)
 8006916:	f7fc fa4d 	bl	8002db4 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800691a:	f241 3088 	movw	r0, #5000	; 0x1388
 800691e:	f000 fe99 	bl	8007654 <HAL_Delay>

			logger.stop();
 8006922:	4897      	ldr	r0, [pc, #604]	; (8006b80 <cppLoop+0x968>)
 8006924:	f7fc fd55 	bl	80033d2 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8006928:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8006b84 <cppLoop+0x96c>
 800692c:	4896      	ldr	r0, [pc, #600]	; (8006b88 <cppLoop+0x970>)
 800692e:	f7fc f9bd 	bl	8002cac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8006932:	4895      	ldr	r0, [pc, #596]	; (8006b88 <cppLoop+0x970>)
 8006934:	f7fc fa58 	bl	8002de8 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	2101      	movs	r1, #1
 800693e:	488c      	ldr	r0, [pc, #560]	; (8006b70 <cppLoop+0x958>)
 8006940:	f7fb fb90 	bl	8002064 <_ZN3LED2LREaa>
			//logger.saveLogs("line_sensors", "sensor7.csv");
			led.LR(0, -1);
 8006944:	f04f 32ff 	mov.w	r2, #4294967295
 8006948:	2100      	movs	r1, #0
 800694a:	4889      	ldr	r0, [pc, #548]	; (8006b70 <cppLoop+0x958>)
 800694c:	f7fb fb8a 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8006950:	2200      	movs	r2, #0
 8006952:	f04f 31ff 	mov.w	r1, #4294967295
 8006956:	4886      	ldr	r0, [pc, #536]	; (8006b70 <cppLoop+0x958>)
 8006958:	f7fb fb84 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 800695c:	f000 bd2a 	b.w	80073b4 <cppLoop+0x119c>

	case 4:
		led.fullColor('Y');
 8006960:	2159      	movs	r1, #89	; 0x59
 8006962:	4883      	ldr	r0, [pc, #524]	; (8006b70 <cppLoop+0x958>)
 8006964:	f7fb fac2 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006968:	f7fa fb9a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800696c:	2100      	movs	r1, #0
 800696e:	2000      	movs	r0, #0
 8006970:	f7fa fba6 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8006974:	4885      	ldr	r0, [pc, #532]	; (8006b8c <cppLoop+0x974>)
 8006976:	f7fa fbcd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800697a:	2101      	movs	r1, #1
 800697c:	2000      	movs	r0, #0
 800697e:	f7fa fb9f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8006982:	487d      	ldr	r0, [pc, #500]	; (8006b78 <cppLoop+0x960>)
 8006984:	f7fa fbc6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006988:	487c      	ldr	r0, [pc, #496]	; (8006b7c <cppLoop+0x964>)
 800698a:	f7fb fa4b 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800698e:	4603      	mov	r3, r0
 8006990:	2b02      	cmp	r3, #2
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 850c 	beq.w	80073b8 <cppLoop+0x11a0>
			led.LR(-1, 1);
 80069a0:	2201      	movs	r2, #1
 80069a2:	f04f 31ff 	mov.w	r1, #4294967295
 80069a6:	4872      	ldr	r0, [pc, #456]	; (8006b70 <cppLoop+0x958>)
 80069a8:	f7fb fb5c 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80069ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069b0:	f000 fe50 	bl	8007654 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80069b4:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8006b84 <cppLoop+0x96c>
 80069b8:	4873      	ldr	r0, [pc, #460]	; (8006b88 <cppLoop+0x970>)
 80069ba:	f7fc f986 	bl	8002cca <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80069be:	4874      	ldr	r0, [pc, #464]	; (8006b90 <cppLoop+0x978>)
 80069c0:	f7fd fc8b 	bl	80042da <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80069c4:	4870      	ldr	r0, [pc, #448]	; (8006b88 <cppLoop+0x970>)
 80069c6:	f7fc f9f5 	bl	8002db4 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80069ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80069ce:	f000 fe41 	bl	8007654 <HAL_Delay>

			line_trace.stop();
 80069d2:	486d      	ldr	r0, [pc, #436]	; (8006b88 <cppLoop+0x970>)
 80069d4:	f7fc fa08 	bl	8002de8 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80069d8:	486d      	ldr	r0, [pc, #436]	; (8006b90 <cppLoop+0x978>)
 80069da:	f7fd fc91 	bl	8004300 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80069de:	2200      	movs	r2, #0
 80069e0:	f04f 31ff 	mov.w	r1, #4294967295
 80069e4:	4862      	ldr	r0, [pc, #392]	; (8006b70 <cppLoop+0x958>)
 80069e6:	f7fb fb3d 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 80069ea:	f000 bce5 	b.w	80073b8 <cppLoop+0x11a0>

	case 5:
		led.fullColor('C');
 80069ee:	2143      	movs	r1, #67	; 0x43
 80069f0:	485f      	ldr	r0, [pc, #380]	; (8006b70 <cppLoop+0x958>)
 80069f2:	f7fb fa7b 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80069f6:	f7fa fb53 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80069fa:	2100      	movs	r1, #0
 80069fc:	2000      	movs	r0, #0
 80069fe:	f7fa fb5f 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8006a02:	4864      	ldr	r0, [pc, #400]	; (8006b94 <cppLoop+0x97c>)
 8006a04:	f7fa fb86 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006a08:	2101      	movs	r1, #1
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f7fa fb58 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8006a10:	4861      	ldr	r0, [pc, #388]	; (8006b98 <cppLoop+0x980>)
 8006a12:	f7fa fb7f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006a16:	4859      	ldr	r0, [pc, #356]	; (8006b7c <cppLoop+0x964>)
 8006a18:	f7fb fa04 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	bf0c      	ite	eq
 8006a22:	2301      	moveq	r3, #1
 8006a24:	2300      	movne	r3, #0
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 84c7 	beq.w	80073bc <cppLoop+0x11a4>
			led.LR(-1, 1);
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f04f 31ff 	mov.w	r1, #4294967295
 8006a34:	484e      	ldr	r0, [pc, #312]	; (8006b70 <cppLoop+0x958>)
 8006a36:	f7fb fb15 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a3e:	f000 fe09 	bl	8007654 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006a42:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8006b9c <cppLoop+0x984>
 8006a46:	4850      	ldr	r0, [pc, #320]	; (8006b88 <cppLoop+0x970>)
 8006a48:	f7fc f930 	bl	8002cac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006a4c:	484e      	ldr	r0, [pc, #312]	; (8006b88 <cppLoop+0x970>)
 8006a4e:	f7fc f9b1 	bl	8002db4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006a52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006a56:	f000 fdfd 	bl	8007654 <HAL_Delay>

			led.fullColor('R');
 8006a5a:	2152      	movs	r1, #82	; 0x52
 8006a5c:	4844      	ldr	r0, [pc, #272]	; (8006b70 <cppLoop+0x958>)
 8006a5e:	f7fb fa45 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006a62:	484f      	ldr	r0, [pc, #316]	; (8006ba0 <cppLoop+0x988>)
 8006a64:	f7fa fd18 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006a68:	484d      	ldr	r0, [pc, #308]	; (8006ba0 <cppLoop+0x988>)
 8006a6a:	f7fa fce5 	bl	8001438 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006a6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006a72:	f000 fdef 	bl	8007654 <HAL_Delay>

			line_trace.stop();
 8006a76:	4844      	ldr	r0, [pc, #272]	; (8006b88 <cppLoop+0x970>)
 8006a78:	f7fc f9b6 	bl	8002de8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006a7c:	4949      	ldr	r1, [pc, #292]	; (8006ba4 <cppLoop+0x98c>)
 8006a7e:	484a      	ldr	r0, [pc, #296]	; (8006ba8 <cppLoop+0x990>)
 8006a80:	f7fa fd3d 	bl	80014fe <user_fopen>
			float d = encoder.getDistance();
 8006a84:	4846      	ldr	r0, [pc, #280]	; (8006ba0 <cppLoop+0x988>)
 8006a86:	f7fa fcb9 	bl	80013fc <_ZN7Encoder11getDistanceEv>
 8006a8a:	eef0 7a40 	vmov.f32	s15, s0
 8006a8e:	edc7 7a04 	vstr	s15, [r7, #16]
			sd_write_float(1, &d, ADD_WRITE);
 8006a92:	f107 0310 	add.w	r3, r7, #16
 8006a96:	2201      	movs	r2, #1
 8006a98:	4619      	mov	r1, r3
 8006a9a:	2001      	movs	r0, #1
 8006a9c:	f7fa fd52 	bl	8001544 <sd_write_float>
			user_fclose();
 8006aa0:	f7fa fd40 	bl	8001524 <user_fclose>

			led.LR(-1, 0);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8006aaa:	4831      	ldr	r0, [pc, #196]	; (8006b70 <cppLoop+0x958>)
 8006aac:	f7fb fada 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006ab0:	f000 bc84 	b.w	80073bc <cppLoop+0x11a4>

	case 6:
		led.fullColor('R');
 8006ab4:	2152      	movs	r1, #82	; 0x52
 8006ab6:	482e      	ldr	r0, [pc, #184]	; (8006b70 <cppLoop+0x958>)
 8006ab8:	f7fb fa18 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006abc:	f7fa faf0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f7fa fafc 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006ac8:	4838      	ldr	r0, [pc, #224]	; (8006bac <cppLoop+0x994>)
 8006aca:	f7fa fb23 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006ace:	2101      	movs	r1, #1
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	f7fa faf5 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006ad6:	4836      	ldr	r0, [pc, #216]	; (8006bb0 <cppLoop+0x998>)
 8006ad8:	f7fa fb1c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006adc:	4827      	ldr	r0, [pc, #156]	; (8006b7c <cppLoop+0x964>)
 8006ade:	f7fb f9a1 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8466 	beq.w	80073c0 <cppLoop+0x11a8>
			HAL_Delay(500);
 8006af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006af8:	f000 fdac 	bl	8007654 <HAL_Delay>
			led.LR(-1, 1);
 8006afc:	2201      	movs	r2, #1
 8006afe:	f04f 31ff 	mov.w	r1, #4294967295
 8006b02:	481b      	ldr	r0, [pc, #108]	; (8006b70 <cppLoop+0x958>)
 8006b04:	f7fb faae 	bl	8002064 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 8006b08:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8006bb4 <cppLoop+0x99c>
 8006b0c:	481e      	ldr	r0, [pc, #120]	; (8006b88 <cppLoop+0x970>)
 8006b0e:	f7fc f8cd 	bl	8002cac <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006b12:	481d      	ldr	r0, [pc, #116]	; (8006b88 <cppLoop+0x970>)
 8006b14:	f7fc f94e 	bl	8002db4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006b18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b1c:	f000 fd9a 	bl	8007654 <HAL_Delay>

			led.fullColor('R');
 8006b20:	2152      	movs	r1, #82	; 0x52
 8006b22:	4813      	ldr	r0, [pc, #76]	; (8006b70 <cppLoop+0x958>)
 8006b24:	f7fb f9e2 	bl	8001eec <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006b28:	481d      	ldr	r0, [pc, #116]	; (8006ba0 <cppLoop+0x988>)
 8006b2a:	f7fa fcb5 	bl	8001498 <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006b2e:	481c      	ldr	r0, [pc, #112]	; (8006ba0 <cppLoop+0x988>)
 8006b30:	f7fa fc82 	bl	8001438 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 8006b34:	4820      	ldr	r0, [pc, #128]	; (8006bb8 <cppLoop+0x9a0>)
 8006b36:	f7fc fe59 	bl	80037ec <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006b3a:	4811      	ldr	r0, [pc, #68]	; (8006b80 <cppLoop+0x968>)
 8006b3c:	f7fc fc38 	bl	80033b0 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8006b44:	f000 fd86 	bl	8007654 <HAL_Delay>

			line_trace.stop();
 8006b48:	480f      	ldr	r0, [pc, #60]	; (8006b88 <cppLoop+0x970>)
 8006b4a:	f7fc f94d 	bl	8002de8 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006b4e:	480c      	ldr	r0, [pc, #48]	; (8006b80 <cppLoop+0x968>)
 8006b50:	f7fc fc3f 	bl	80033d2 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 8006b54:	4b19      	ldr	r3, [pc, #100]	; (8006bbc <cppLoop+0x9a4>)
 8006b56:	4a1a      	ldr	r2, [pc, #104]	; (8006bc0 <cppLoop+0x9a8>)
 8006b58:	491a      	ldr	r1, [pc, #104]	; (8006bc4 <cppLoop+0x9ac>)
 8006b5a:	4809      	ldr	r0, [pc, #36]	; (8006b80 <cppLoop+0x968>)
 8006b5c:	f7fc fb89 	bl	8003272 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006b60:	2200      	movs	r2, #0
 8006b62:	f04f 31ff 	mov.w	r1, #4294967295
 8006b66:	4802      	ldr	r0, [pc, #8]	; (8006b70 <cppLoop+0x958>)
 8006b68:	f7fb fa7c 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 8006b6c:	f000 bc28 	b.w	80073c0 <cppLoop+0x11a8>
 8006b70:	200005ac 	.word	0x200005ac
 8006b74:	080183d4 	.word	0x080183d4
 8006b78:	080183dc 	.word	0x080183dc
 8006b7c:	200005a0 	.word	0x200005a0
 8006b80:	200005d0 	.word	0x200005d0
 8006b84:	3dcccccd 	.word	0x3dcccccd
 8006b88:	20015e20 	.word	0x20015e20
 8006b8c:	080183e4 	.word	0x080183e4
 8006b90:	20015db4 	.word	0x20015db4
 8006b94:	080183f0 	.word	0x080183f0
 8006b98:	080183f8 	.word	0x080183f8
 8006b9c:	00000000 	.word	0x00000000
 8006ba0:	20015d98 	.word	0x20015d98
 8006ba4:	08018404 	.word	0x08018404
 8006ba8:	0801840c 	.word	0x0801840c
 8006bac:	08018418 	.word	0x08018418
 8006bb0:	080183cc 	.word	0x080183cc
 8006bb4:	3d8f5c29 	.word	0x3d8f5c29
 8006bb8:	20015df0 	.word	0x20015df0
 8006bbc:	08018424 	.word	0x08018424
 8006bc0:	08018430 	.word	0x08018430
 8006bc4:	0801843c 	.word	0x0801843c

	case 7:
		led.fullColor('G');
 8006bc8:	2147      	movs	r1, #71	; 0x47
 8006bca:	48b3      	ldr	r0, [pc, #716]	; (8006e98 <cppLoop+0xc80>)
 8006bcc:	f7fb f98e 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006bd0:	f7fa fa66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	2000      	movs	r0, #0
 8006bd8:	f7fa fa72 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 8006bdc:	48af      	ldr	r0, [pc, #700]	; (8006e9c <cppLoop+0xc84>)
 8006bde:	f7fa fa99 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006be2:	2101      	movs	r1, #1
 8006be4:	2000      	movs	r0, #0
 8006be6:	f7fa fa6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 8006bea:	48ad      	ldr	r0, [pc, #692]	; (8006ea0 <cppLoop+0xc88>)
 8006bec:	f7fa fa92 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006bf0:	48ac      	ldr	r0, [pc, #688]	; (8006ea4 <cppLoop+0xc8c>)
 8006bf2:	f7fb f917 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2301      	moveq	r3, #1
 8006bfe:	2300      	movne	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 83de 	beq.w	80073c4 <cppLoop+0x11ac>
			led.LR(-1, 1);
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c0e:	48a2      	ldr	r0, [pc, #648]	; (8006e98 <cppLoop+0xc80>)
 8006c10:	f7fb fa28 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006c14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c18:	f000 fd1c 	bl	8007654 <HAL_Delay>

			led.fullColor('R');
 8006c1c:	2152      	movs	r1, #82	; 0x52
 8006c1e:	489e      	ldr	r0, [pc, #632]	; (8006e98 <cppLoop+0xc80>)
 8006c20:	f7fb f964 	bl	8001eec <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 8006c24:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8006ea8 <cppLoop+0xc90>
 8006c28:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8006eac <cppLoop+0xc94>
 8006c2c:	48a0      	ldr	r0, [pc, #640]	; (8006eb0 <cppLoop+0xc98>)
 8006c2e:	f7fd fae7 	bl	8004200 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 8006c32:	489f      	ldr	r0, [pc, #636]	; (8006eb0 <cppLoop+0xc98>)
 8006c34:	f7fd fb51 	bl	80042da <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006c3c:	f000 fd0a 	bl	8007654 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006c40:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8006eac <cppLoop+0xc94>
 8006c44:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8006eac <cppLoop+0xc94>
 8006c48:	4899      	ldr	r0, [pc, #612]	; (8006eb0 <cppLoop+0xc98>)
 8006c4a:	f7fd fad9 	bl	8004200 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006c4e:	2064      	movs	r0, #100	; 0x64
 8006c50:	f000 fd00 	bl	8007654 <HAL_Delay>
			velocity_ctrl.stop();
 8006c54:	4896      	ldr	r0, [pc, #600]	; (8006eb0 <cppLoop+0xc98>)
 8006c56:	f7fd fb53 	bl	8004300 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c60:	488d      	ldr	r0, [pc, #564]	; (8006e98 <cppLoop+0xc80>)
 8006c62:	f7fb f9ff 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8006c66:	e3ad      	b.n	80073c4 <cppLoop+0x11ac>

	case 8:
		led.fullColor('B');
 8006c68:	2142      	movs	r1, #66	; 0x42
 8006c6a:	488b      	ldr	r0, [pc, #556]	; (8006e98 <cppLoop+0xc80>)
 8006c6c:	f7fb f93e 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8006c70:	f7fa fa16 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006c74:	2100      	movs	r1, #0
 8006c76:	2000      	movs	r0, #0
 8006c78:	f7fa fa22 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006c7c:	488d      	ldr	r0, [pc, #564]	; (8006eb4 <cppLoop+0xc9c>)
 8006c7e:	f7fc feab 	bl	80039d8 <_ZN13PathFollowing8getKxValEv>
 8006c82:	ec51 0b10 	vmov	r0, r1, d0
 8006c86:	f04f 0200 	mov.w	r2, #0
 8006c8a:	4b8b      	ldr	r3, [pc, #556]	; (8006eb8 <cppLoop+0xca0>)
 8006c8c:	f7f9 fccc 	bl	8000628 <__aeabi_dmul>
 8006c90:	4603      	mov	r3, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	461a      	mov	r2, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	4888      	ldr	r0, [pc, #544]	; (8006ebc <cppLoop+0xca4>)
 8006c9a:	f7fa fa3b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	f7fa fa0d 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 8006ca6:	4883      	ldr	r0, [pc, #524]	; (8006eb4 <cppLoop+0xc9c>)
 8006ca8:	f7fc feaa 	bl	8003a00 <_ZN13PathFollowing8getKyValEv>
 8006cac:	ec51 0b10 	vmov	r0, r1, d0
 8006cb0:	f04f 0200 	mov.w	r2, #0
 8006cb4:	4b80      	ldr	r3, [pc, #512]	; (8006eb8 <cppLoop+0xca0>)
 8006cb6:	f7f9 fcb7 	bl	8000628 <__aeabi_dmul>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	460c      	mov	r4, r1
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	4626      	mov	r6, r4
 8006cc2:	487c      	ldr	r0, [pc, #496]	; (8006eb4 <cppLoop+0xc9c>)
 8006cc4:	f7fc feb0 	bl	8003a28 <_ZN13PathFollowing8getKtValEv>
 8006cc8:	ec51 0b10 	vmov	r0, r1, d0
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	4b79      	ldr	r3, [pc, #484]	; (8006eb8 <cppLoop+0xca0>)
 8006cd2:	f7f9 fca9 	bl	8000628 <__aeabi_dmul>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	460c      	mov	r4, r1
 8006cda:	e9cd 3400 	strd	r3, r4, [sp]
 8006cde:	462a      	mov	r2, r5
 8006ce0:	4633      	mov	r3, r6
 8006ce2:	4877      	ldr	r0, [pc, #476]	; (8006ec0 <cppLoop+0xca8>)
 8006ce4:	f7fa fa16 	bl	8001114 <lcd_printf>

		static float adj_kx = path_following.getKxVal();
 8006ce8:	4b76      	ldr	r3, [pc, #472]	; (8006ec4 <cppLoop+0xcac>)
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f3bf 8f5b 	dmb	ish
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	bf0c      	ite	eq
 8006cfa:	2301      	moveq	r3, #1
 8006cfc:	2300      	movne	r3, #0
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d019      	beq.n	8006d38 <cppLoop+0xb20>
 8006d04:	486f      	ldr	r0, [pc, #444]	; (8006ec4 <cppLoop+0xcac>)
 8006d06:	f00b f9a2 	bl	801204e <__cxa_guard_acquire>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bf14      	ite	ne
 8006d10:	2301      	movne	r3, #1
 8006d12:	2300      	moveq	r3, #0
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00e      	beq.n	8006d38 <cppLoop+0xb20>
 8006d1a:	4866      	ldr	r0, [pc, #408]	; (8006eb4 <cppLoop+0xc9c>)
 8006d1c:	f7fc fe5c 	bl	80039d8 <_ZN13PathFollowing8getKxValEv>
 8006d20:	ec54 3b10 	vmov	r3, r4, d0
 8006d24:	4618      	mov	r0, r3
 8006d26:	4621      	mov	r1, r4
 8006d28:	f7f9 ff76 	bl	8000c18 <__aeabi_d2f>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	4b66      	ldr	r3, [pc, #408]	; (8006ec8 <cppLoop+0xcb0>)
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	4864      	ldr	r0, [pc, #400]	; (8006ec4 <cppLoop+0xcac>)
 8006d34:	f00b f997 	bl	8012066 <__cxa_guard_release>
		static float adj_ky = path_following.getKyVal();
 8006d38:	4b64      	ldr	r3, [pc, #400]	; (8006ecc <cppLoop+0xcb4>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	f3bf 8f5b 	dmb	ish
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	bf0c      	ite	eq
 8006d4a:	2301      	moveq	r3, #1
 8006d4c:	2300      	movne	r3, #0
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d019      	beq.n	8006d88 <cppLoop+0xb70>
 8006d54:	485d      	ldr	r0, [pc, #372]	; (8006ecc <cppLoop+0xcb4>)
 8006d56:	f00b f97a 	bl	801204e <__cxa_guard_acquire>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bf14      	ite	ne
 8006d60:	2301      	movne	r3, #1
 8006d62:	2300      	moveq	r3, #0
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <cppLoop+0xb70>
 8006d6a:	4852      	ldr	r0, [pc, #328]	; (8006eb4 <cppLoop+0xc9c>)
 8006d6c:	f7fc fe48 	bl	8003a00 <_ZN13PathFollowing8getKyValEv>
 8006d70:	ec54 3b10 	vmov	r3, r4, d0
 8006d74:	4618      	mov	r0, r3
 8006d76:	4621      	mov	r1, r4
 8006d78:	f7f9 ff4e 	bl	8000c18 <__aeabi_d2f>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	4b54      	ldr	r3, [pc, #336]	; (8006ed0 <cppLoop+0xcb8>)
 8006d80:	601a      	str	r2, [r3, #0]
 8006d82:	4852      	ldr	r0, [pc, #328]	; (8006ecc <cppLoop+0xcb4>)
 8006d84:	f00b f96f 	bl	8012066 <__cxa_guard_release>
		static float adj_kt = path_following.getKtVal();
 8006d88:	4b52      	ldr	r3, [pc, #328]	; (8006ed4 <cppLoop+0xcbc>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f3bf 8f5b 	dmb	ish
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf0c      	ite	eq
 8006d9a:	2301      	moveq	r3, #1
 8006d9c:	2300      	movne	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d019      	beq.n	8006dd8 <cppLoop+0xbc0>
 8006da4:	484b      	ldr	r0, [pc, #300]	; (8006ed4 <cppLoop+0xcbc>)
 8006da6:	f00b f952 	bl	801204e <__cxa_guard_acquire>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00e      	beq.n	8006dd8 <cppLoop+0xbc0>
 8006dba:	483e      	ldr	r0, [pc, #248]	; (8006eb4 <cppLoop+0xc9c>)
 8006dbc:	f7fc fe34 	bl	8003a28 <_ZN13PathFollowing8getKtValEv>
 8006dc0:	ec54 3b10 	vmov	r3, r4, d0
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	f7f9 ff26 	bl	8000c18 <__aeabi_d2f>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	4b42      	ldr	r3, [pc, #264]	; (8006ed8 <cppLoop+0xcc0>)
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	4840      	ldr	r0, [pc, #256]	; (8006ed4 <cppLoop+0xcbc>)
 8006dd4:	f00b f947 	bl	8012066 <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 8006dd8:	4832      	ldr	r0, [pc, #200]	; (8006ea4 <cppLoop+0xc8c>)
 8006dda:	f7fb f823 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b08      	cmp	r3, #8
 8006de2:	bf0c      	ite	eq
 8006de4:	2301      	moveq	r3, #1
 8006de6:	2300      	movne	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d021      	beq.n	8006e32 <cppLoop+0xc1a>
			led.LR(-1, 1);
 8006dee:	2201      	movs	r2, #1
 8006df0:	f04f 31ff 	mov.w	r1, #4294967295
 8006df4:	4828      	ldr	r0, [pc, #160]	; (8006e98 <cppLoop+0xc80>)
 8006df6:	f7fb f935 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006dfa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006dfe:	f000 fc29 	bl	8007654 <HAL_Delay>

			selector++;
 8006e02:	4b36      	ldr	r3, [pc, #216]	; (8006edc <cppLoop+0xcc4>)
 8006e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	4b32      	ldr	r3, [pc, #200]	; (8006edc <cppLoop+0xcc4>)
 8006e12:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006e14:	4b31      	ldr	r3, [pc, #196]	; (8006edc <cppLoop+0xcc4>)
 8006e16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	dd02      	ble.n	8006e24 <cppLoop+0xc0c>
 8006e1e:	4b2f      	ldr	r3, [pc, #188]	; (8006edc <cppLoop+0xcc4>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006e24:	2200      	movs	r2, #0
 8006e26:	f04f 31ff 	mov.w	r1, #4294967295
 8006e2a:	481b      	ldr	r0, [pc, #108]	; (8006e98 <cppLoop+0xc80>)
 8006e2c:	f7fb f91a 	bl	8002064 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 8006e30:	e2ca      	b.n	80073c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_R){
 8006e32:	481c      	ldr	r0, [pc, #112]	; (8006ea4 <cppLoop+0xc8c>)
 8006e34:	f7fa fff6 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b10      	cmp	r3, #16
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2301      	moveq	r3, #1
 8006e40:	2300      	movne	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f000 8082 	beq.w	8006f4e <cppLoop+0xd36>
			led.LR(-1, 1);
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8006e50:	4811      	ldr	r0, [pc, #68]	; (8006e98 <cppLoop+0xc80>)
 8006e52:	f7fb f907 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006e56:	2064      	movs	r0, #100	; 0x64
 8006e58:	f000 fbfc 	bl	8007654 <HAL_Delay>
			if(selector == 0){
 8006e5c:	4b1f      	ldr	r3, [pc, #124]	; (8006edc <cppLoop+0xcc4>)
 8006e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d13c      	bne.n	8006ee0 <cppLoop+0xcc8>
				adj_kx = adj_kx + 0.00001;
 8006e66:	4b18      	ldr	r3, [pc, #96]	; (8006ec8 <cppLoop+0xcb0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7f9 fb84 	bl	8000578 <__aeabi_f2d>
 8006e70:	a307      	add	r3, pc, #28	; (adr r3, 8006e90 <cppLoop+0xc78>)
 8006e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e76:	f7f9 fa21 	bl	80002bc <__adddf3>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	460c      	mov	r4, r1
 8006e7e:	4618      	mov	r0, r3
 8006e80:	4621      	mov	r1, r4
 8006e82:	f7f9 fec9 	bl	8000c18 <__aeabi_d2f>
 8006e86:	4602      	mov	r2, r0
 8006e88:	4b0f      	ldr	r3, [pc, #60]	; (8006ec8 <cppLoop+0xcb0>)
 8006e8a:	601a      	str	r2, [r3, #0]
 8006e8c:	e054      	b.n	8006f38 <cppLoop+0xd20>
 8006e8e:	bf00      	nop
 8006e90:	88e368f1 	.word	0x88e368f1
 8006e94:	3ee4f8b5 	.word	0x3ee4f8b5
 8006e98:	200005ac 	.word	0x200005ac
 8006e9c:	08018440 	.word	0x08018440
 8006ea0:	0801844c 	.word	0x0801844c
 8006ea4:	200005a0 	.word	0x200005a0
 8006ea8:	3fc8f5c3 	.word	0x3fc8f5c3
 8006eac:	00000000 	.word	0x00000000
 8006eb0:	20015db4 	.word	0x20015db4
 8006eb4:	2001be68 	.word	0x2001be68
 8006eb8:	408f4000 	.word	0x408f4000
 8006ebc:	08018374 	.word	0x08018374
 8006ec0:	08018380 	.word	0x08018380
 8006ec4:	200335b4 	.word	0x200335b4
 8006ec8:	200335b0 	.word	0x200335b0
 8006ecc:	200335bc 	.word	0x200335bc
 8006ed0:	200335b8 	.word	0x200335b8
 8006ed4:	200335c4 	.word	0x200335c4
 8006ed8:	200335c0 	.word	0x200335c0
 8006edc:	20033596 	.word	0x20033596
			else if(selector == 1){
 8006ee0:	4ba3      	ldr	r3, [pc, #652]	; (8007170 <cppLoop+0xf58>)
 8006ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d113      	bne.n	8006f12 <cppLoop+0xcfa>
				adj_ky = adj_ky + 0.00001;
 8006eea:	4ba2      	ldr	r3, [pc, #648]	; (8007174 <cppLoop+0xf5c>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7f9 fb42 	bl	8000578 <__aeabi_f2d>
 8006ef4:	a39c      	add	r3, pc, #624	; (adr r3, 8007168 <cppLoop+0xf50>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9df 	bl	80002bc <__adddf3>
 8006efe:	4603      	mov	r3, r0
 8006f00:	460c      	mov	r4, r1
 8006f02:	4618      	mov	r0, r3
 8006f04:	4621      	mov	r1, r4
 8006f06:	f7f9 fe87 	bl	8000c18 <__aeabi_d2f>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	4b99      	ldr	r3, [pc, #612]	; (8007174 <cppLoop+0xf5c>)
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	e012      	b.n	8006f38 <cppLoop+0xd20>
				adj_kt = adj_kt + 0.00001;
 8006f12:	4b99      	ldr	r3, [pc, #612]	; (8007178 <cppLoop+0xf60>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7f9 fb2e 	bl	8000578 <__aeabi_f2d>
 8006f1c:	a392      	add	r3, pc, #584	; (adr r3, 8007168 <cppLoop+0xf50>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	f7f9 f9cb 	bl	80002bc <__adddf3>
 8006f26:	4603      	mov	r3, r0
 8006f28:	460c      	mov	r4, r1
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	f7f9 fe73 	bl	8000c18 <__aeabi_d2f>
 8006f32:	4602      	mov	r2, r0
 8006f34:	4b90      	ldr	r3, [pc, #576]	; (8007178 <cppLoop+0xf60>)
 8006f36:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8006f38:	2152      	movs	r1, #82	; 0x52
 8006f3a:	4890      	ldr	r0, [pc, #576]	; (800717c <cppLoop+0xf64>)
 8006f3c:	f7fa ffd6 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8006f40:	2200      	movs	r2, #0
 8006f42:	f04f 31ff 	mov.w	r1, #4294967295
 8006f46:	488d      	ldr	r0, [pc, #564]	; (800717c <cppLoop+0xf64>)
 8006f48:	f7fb f88c 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8006f4c:	e23c      	b.n	80073c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_L){
 8006f4e:	488c      	ldr	r0, [pc, #560]	; (8007180 <cppLoop+0xf68>)
 8006f50:	f7fa ff68 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	bf0c      	ite	eq
 8006f5a:	2301      	moveq	r3, #1
 8006f5c:	2300      	movne	r3, #0
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d058      	beq.n	8007016 <cppLoop+0xdfe>
			led.LR(-1, 1);
 8006f64:	2201      	movs	r2, #1
 8006f66:	f04f 31ff 	mov.w	r1, #4294967295
 8006f6a:	4884      	ldr	r0, [pc, #528]	; (800717c <cppLoop+0xf64>)
 8006f6c:	f7fb f87a 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8006f70:	2064      	movs	r0, #100	; 0x64
 8006f72:	f000 fb6f 	bl	8007654 <HAL_Delay>
			if(selector == 0){
 8006f76:	4b7e      	ldr	r3, [pc, #504]	; (8007170 <cppLoop+0xf58>)
 8006f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d113      	bne.n	8006fa8 <cppLoop+0xd90>
				adj_kx = adj_kx - 0.00001;
 8006f80:	4b80      	ldr	r3, [pc, #512]	; (8007184 <cppLoop+0xf6c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7f9 faf7 	bl	8000578 <__aeabi_f2d>
 8006f8a:	a377      	add	r3, pc, #476	; (adr r3, 8007168 <cppLoop+0xf50>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f7f9 f992 	bl	80002b8 <__aeabi_dsub>
 8006f94:	4603      	mov	r3, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	4618      	mov	r0, r3
 8006f9a:	4621      	mov	r1, r4
 8006f9c:	f7f9 fe3c 	bl	8000c18 <__aeabi_d2f>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	4b78      	ldr	r3, [pc, #480]	; (8007184 <cppLoop+0xf6c>)
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	e02b      	b.n	8007000 <cppLoop+0xde8>
			else if(selector == 1){
 8006fa8:	4b71      	ldr	r3, [pc, #452]	; (8007170 <cppLoop+0xf58>)
 8006faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d113      	bne.n	8006fda <cppLoop+0xdc2>
				adj_ky = adj_ky - 0.00001;
 8006fb2:	4b70      	ldr	r3, [pc, #448]	; (8007174 <cppLoop+0xf5c>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7f9 fade 	bl	8000578 <__aeabi_f2d>
 8006fbc:	a36a      	add	r3, pc, #424	; (adr r3, 8007168 <cppLoop+0xf50>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 f979 	bl	80002b8 <__aeabi_dsub>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	460c      	mov	r4, r1
 8006fca:	4618      	mov	r0, r3
 8006fcc:	4621      	mov	r1, r4
 8006fce:	f7f9 fe23 	bl	8000c18 <__aeabi_d2f>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	4b67      	ldr	r3, [pc, #412]	; (8007174 <cppLoop+0xf5c>)
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e012      	b.n	8007000 <cppLoop+0xde8>
				adj_kt = adj_kt - 0.00001;
 8006fda:	4b67      	ldr	r3, [pc, #412]	; (8007178 <cppLoop+0xf60>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7f9 faca 	bl	8000578 <__aeabi_f2d>
 8006fe4:	a360      	add	r3, pc, #384	; (adr r3, 8007168 <cppLoop+0xf50>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 f965 	bl	80002b8 <__aeabi_dsub>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	460c      	mov	r4, r1
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f7f9 fe0f 	bl	8000c18 <__aeabi_d2f>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b5e      	ldr	r3, [pc, #376]	; (8007178 <cppLoop+0xf60>)
 8006ffe:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007000:	2152      	movs	r1, #82	; 0x52
 8007002:	485e      	ldr	r0, [pc, #376]	; (800717c <cppLoop+0xf64>)
 8007004:	f7fa ff72 	bl	8001eec <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007008:	2200      	movs	r2, #0
 800700a:	f04f 31ff 	mov.w	r1, #4294967295
 800700e:	485b      	ldr	r0, [pc, #364]	; (800717c <cppLoop+0xf64>)
 8007010:	f7fb f828 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8007014:	e1d8      	b.n	80073c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_D){
 8007016:	485a      	ldr	r0, [pc, #360]	; (8007180 <cppLoop+0xf68>)
 8007018:	f7fa ff04 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 800701c:	4603      	mov	r3, r0
 800701e:	2b04      	cmp	r3, #4
 8007020:	bf0c      	ite	eq
 8007022:	2301      	moveq	r3, #1
 8007024:	2300      	movne	r3, #0
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	d048      	beq.n	80070be <cppLoop+0xea6>
			led.LR(-1, 1);
 800702c:	2201      	movs	r2, #1
 800702e:	f04f 31ff 	mov.w	r1, #4294967295
 8007032:	4852      	ldr	r0, [pc, #328]	; (800717c <cppLoop+0xf64>)
 8007034:	f7fb f816 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007038:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800703c:	f000 fb0a 	bl	8007654 <HAL_Delay>
			sd_read_array_float("PARAMS", "KX.TXT", 1, &temp_kx);
 8007040:	f107 030c 	add.w	r3, r7, #12
 8007044:	2201      	movs	r2, #1
 8007046:	4950      	ldr	r1, [pc, #320]	; (8007188 <cppLoop+0xf70>)
 8007048:	4850      	ldr	r0, [pc, #320]	; (800718c <cppLoop+0xf74>)
 800704a:	f7fa fb33 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KY.TXT", 1, &temp_ky);
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	2201      	movs	r2, #1
 8007054:	494e      	ldr	r1, [pc, #312]	; (8007190 <cppLoop+0xf78>)
 8007056:	484d      	ldr	r0, [pc, #308]	; (800718c <cppLoop+0xf74>)
 8007058:	f7fa fb2c 	bl	80016b4 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KT.TXT", 1, &temp_kt);
 800705c:	1d3b      	adds	r3, r7, #4
 800705e:	2201      	movs	r2, #1
 8007060:	494c      	ldr	r1, [pc, #304]	; (8007194 <cppLoop+0xf7c>)
 8007062:	484a      	ldr	r0, [pc, #296]	; (800718c <cppLoop+0xf74>)
 8007064:	f7fa fb26 	bl	80016b4 <sd_read_array_float>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	4618      	mov	r0, r3
 800706c:	f7f9 fa84 	bl	8000578 <__aeabi_f2d>
 8007070:	4604      	mov	r4, r0
 8007072:	460d      	mov	r5, r1
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	4618      	mov	r0, r3
 8007078:	f7f9 fa7e 	bl	8000578 <__aeabi_f2d>
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4618      	mov	r0, r3
 8007084:	f7f9 fa78 	bl	8000578 <__aeabi_f2d>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	ec43 2b12 	vmov	d2, r2, r3
 8007090:	ec49 8b11 	vmov	d1, r8, r9
 8007094:	ec45 4b10 	vmov	d0, r4, r5
 8007098:	483f      	ldr	r0, [pc, #252]	; (8007198 <cppLoop+0xf80>)
 800709a:	f7fc fc7d 	bl	8003998 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4a38      	ldr	r2, [pc, #224]	; (8007184 <cppLoop+0xf6c>)
 80070a2:	6013      	str	r3, [r2, #0]
			adj_ky = temp_ky;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4a33      	ldr	r2, [pc, #204]	; (8007174 <cppLoop+0xf5c>)
 80070a8:	6013      	str	r3, [r2, #0]
			adj_kt = temp_kt;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a32      	ldr	r2, [pc, #200]	; (8007178 <cppLoop+0xf60>)
 80070ae:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80070b0:	2200      	movs	r2, #0
 80070b2:	f04f 31ff 	mov.w	r1, #4294967295
 80070b6:	4831      	ldr	r0, [pc, #196]	; (800717c <cppLoop+0xf64>)
 80070b8:	f7fa ffd4 	bl	8002064 <_ZN3LED2LREaa>
		break;
 80070bc:	e184      	b.n	80073c8 <cppLoop+0x11b0>
		else if(joy_stick.getValue() == JOY_C){
 80070be:	4830      	ldr	r0, [pc, #192]	; (8007180 <cppLoop+0xf68>)
 80070c0:	f7fa feb0 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	bf0c      	ite	eq
 80070ca:	2301      	moveq	r3, #1
 80070cc:	2300      	movne	r3, #0
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 8179 	beq.w	80073c8 <cppLoop+0x11b0>
			led.LR(-1, 1);
 80070d6:	2201      	movs	r2, #1
 80070d8:	f04f 31ff 	mov.w	r1, #4294967295
 80070dc:	4827      	ldr	r0, [pc, #156]	; (800717c <cppLoop+0xf64>)
 80070de:	f7fa ffc1 	bl	8002064 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80070e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80070e6:	f000 fab5 	bl	8007654 <HAL_Delay>
			sd_write_array_float("PARAMS", "KX.TXT", 1, &adj_kx, OVER_WRITE);
 80070ea:	2300      	movs	r3, #0
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	4b25      	ldr	r3, [pc, #148]	; (8007184 <cppLoop+0xf6c>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	4925      	ldr	r1, [pc, #148]	; (8007188 <cppLoop+0xf70>)
 80070f4:	4825      	ldr	r0, [pc, #148]	; (800718c <cppLoop+0xf74>)
 80070f6:	f7fa fa77 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KY.TXT", 1, &adj_ky, OVER_WRITE);
 80070fa:	2300      	movs	r3, #0
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <cppLoop+0xf5c>)
 8007100:	2201      	movs	r2, #1
 8007102:	4923      	ldr	r1, [pc, #140]	; (8007190 <cppLoop+0xf78>)
 8007104:	4821      	ldr	r0, [pc, #132]	; (800718c <cppLoop+0xf74>)
 8007106:	f7fa fa6f 	bl	80015e8 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KT.TXT", 1, &adj_kt, OVER_WRITE);
 800710a:	2300      	movs	r3, #0
 800710c:	9300      	str	r3, [sp, #0]
 800710e:	4b1a      	ldr	r3, [pc, #104]	; (8007178 <cppLoop+0xf60>)
 8007110:	2201      	movs	r2, #1
 8007112:	4920      	ldr	r1, [pc, #128]	; (8007194 <cppLoop+0xf7c>)
 8007114:	481d      	ldr	r0, [pc, #116]	; (800718c <cppLoop+0xf74>)
 8007116:	f7fa fa67 	bl	80015e8 <sd_write_array_float>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <cppLoop+0xf6c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f7f9 fa2a 	bl	8000578 <__aeabi_f2d>
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	4b12      	ldr	r3, [pc, #72]	; (8007174 <cppLoop+0xf5c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4618      	mov	r0, r3
 800712e:	f7f9 fa23 	bl	8000578 <__aeabi_f2d>
 8007132:	4680      	mov	r8, r0
 8007134:	4689      	mov	r9, r1
 8007136:	4b10      	ldr	r3, [pc, #64]	; (8007178 <cppLoop+0xf60>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f7f9 fa1c 	bl	8000578 <__aeabi_f2d>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	ec43 2b12 	vmov	d2, r2, r3
 8007148:	ec49 8b11 	vmov	d1, r8, r9
 800714c:	ec45 4b10 	vmov	d0, r4, r5
 8007150:	4811      	ldr	r0, [pc, #68]	; (8007198 <cppLoop+0xf80>)
 8007152:	f7fc fc21 	bl	8003998 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 8007156:	2200      	movs	r2, #0
 8007158:	f04f 31ff 	mov.w	r1, #4294967295
 800715c:	4807      	ldr	r0, [pc, #28]	; (800717c <cppLoop+0xf64>)
 800715e:	f7fa ff81 	bl	8002064 <_ZN3LED2LREaa>
		break;
 8007162:	e131      	b.n	80073c8 <cppLoop+0x11b0>
 8007164:	f3af 8000 	nop.w
 8007168:	88e368f1 	.word	0x88e368f1
 800716c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007170:	20033596 	.word	0x20033596
 8007174:	200335b8 	.word	0x200335b8
 8007178:	200335c0 	.word	0x200335c0
 800717c:	200005ac 	.word	0x200005ac
 8007180:	200005a0 	.word	0x200005a0
 8007184:	200335b0 	.word	0x200335b0
 8007188:	08018454 	.word	0x08018454
 800718c:	08018398 	.word	0x08018398
 8007190:	0801845c 	.word	0x0801845c
 8007194:	08018464 	.word	0x08018464
 8007198:	2001be68 	.word	0x2001be68

	case 9:
		led.fullColor('M');
 800719c:	214d      	movs	r1, #77	; 0x4d
 800719e:	4898      	ldr	r0, [pc, #608]	; (8007400 <cppLoop+0x11e8>)
 80071a0:	f7fa fea4 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80071a4:	f7f9 ff7c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80071a8:	2100      	movs	r1, #0
 80071aa:	2000      	movs	r0, #0
 80071ac:	f7f9 ff88 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 80071b0:	4894      	ldr	r0, [pc, #592]	; (8007404 <cppLoop+0x11ec>)
 80071b2:	f7f9 ffaf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80071b6:	2101      	movs	r1, #1
 80071b8:	2000      	movs	r0, #0
 80071ba:	f7f9 ff81 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80071be:	4892      	ldr	r0, [pc, #584]	; (8007408 <cppLoop+0x11f0>)
 80071c0:	f7f9 ffa8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80071c4:	4891      	ldr	r0, [pc, #580]	; (800740c <cppLoop+0x11f4>)
 80071c6:	f7fa fe2d 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	bf0c      	ite	eq
 80071d0:	2301      	moveq	r3, #1
 80071d2:	2300      	movne	r3, #0
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f000 80f8 	beq.w	80073cc <cppLoop+0x11b4>
			HAL_Delay(1500);
 80071dc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80071e0:	f000 fa38 	bl	8007654 <HAL_Delay>
			led.LR(-1, 1);
 80071e4:	2201      	movs	r2, #1
 80071e6:	f04f 31ff 	mov.w	r1, #4294967295
 80071ea:	4885      	ldr	r0, [pc, #532]	; (8007400 <cppLoop+0x11e8>)
 80071ec:	f7fa ff3a 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 80071f0:	4887      	ldr	r0, [pc, #540]	; (8007410 <cppLoop+0x11f8>)
 80071f2:	f7fc f8dd 	bl	80033b0 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 80071f6:	ed9f 1b7c 	vldr	d1, [pc, #496]	; 80073e8 <cppLoop+0x11d0>
 80071fa:	ed9f 0b7d 	vldr	d0, [pc, #500]	; 80073f0 <cppLoop+0x11d8>
 80071fe:	4885      	ldr	r0, [pc, #532]	; (8007414 <cppLoop+0x11fc>)
 8007200:	f7fc f96c 	bl	80034dc <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007204:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007208:	f000 fa24 	bl	8007654 <HAL_Delay>

			logger.stop();
 800720c:	4880      	ldr	r0, [pc, #512]	; (8007410 <cppLoop+0x11f8>)
 800720e:	f7fc f8e0 	bl	80033d2 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007212:	ed9f 1b79 	vldr	d1, [pc, #484]	; 80073f8 <cppLoop+0x11e0>
 8007216:	ed9f 0b78 	vldr	d0, [pc, #480]	; 80073f8 <cppLoop+0x11e0>
 800721a:	487e      	ldr	r0, [pc, #504]	; (8007414 <cppLoop+0x11fc>)
 800721c:	f7fc f95e 	bl	80034dc <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007220:	4a7d      	ldr	r2, [pc, #500]	; (8007418 <cppLoop+0x1200>)
 8007222:	497e      	ldr	r1, [pc, #504]	; (800741c <cppLoop+0x1204>)
 8007224:	487a      	ldr	r0, [pc, #488]	; (8007410 <cppLoop+0x11f8>)
 8007226:	f7fb fffa 	bl	800321e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800722a:	2200      	movs	r2, #0
 800722c:	f04f 31ff 	mov.w	r1, #4294967295
 8007230:	4873      	ldr	r0, [pc, #460]	; (8007400 <cppLoop+0x11e8>)
 8007232:	f7fa ff17 	bl	8002064 <_ZN3LED2LREaa>
		}
		break;
 8007236:	e0c9      	b.n	80073cc <cppLoop+0x11b4>

	case 10:
		led.fullColor('Y');
 8007238:	2159      	movs	r1, #89	; 0x59
 800723a:	4871      	ldr	r0, [pc, #452]	; (8007400 <cppLoop+0x11e8>)
 800723c:	f7fa fe56 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007240:	f7f9 ff2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007244:	2100      	movs	r1, #0
 8007246:	2000      	movs	r0, #0
 8007248:	f7f9 ff3a 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800724c:	4874      	ldr	r0, [pc, #464]	; (8007420 <cppLoop+0x1208>)
 800724e:	f7f9 ff61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007252:	2101      	movs	r1, #1
 8007254:	2000      	movs	r0, #0
 8007256:	f7f9 ff33 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 800725a:	4872      	ldr	r0, [pc, #456]	; (8007424 <cppLoop+0x120c>)
 800725c:	f7f9 ff5a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007260:	486a      	ldr	r0, [pc, #424]	; (800740c <cppLoop+0x11f4>)
 8007262:	f7fa fddf 	bl	8001e24 <_ZN8JoyStick8getValueEv>
 8007266:	4603      	mov	r3, r0
 8007268:	2b02      	cmp	r3, #2
 800726a:	bf0c      	ite	eq
 800726c:	2301      	moveq	r3, #1
 800726e:	2300      	movne	r3, #0
 8007270:	b2db      	uxtb	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 80ac 	beq.w	80073d0 <cppLoop+0x11b8>
			HAL_Delay(1500);
 8007278:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800727c:	f000 f9ea 	bl	8007654 <HAL_Delay>
			led.LR(-1, 1);
 8007280:	2201      	movs	r2, #1
 8007282:	f04f 31ff 	mov.w	r1, #4294967295
 8007286:	485e      	ldr	r0, [pc, #376]	; (8007400 <cppLoop+0x11e8>)
 8007288:	f7fa feec 	bl	8002064 <_ZN3LED2LREaa>

			logger.start();
 800728c:	4860      	ldr	r0, [pc, #384]	; (8007410 <cppLoop+0x11f8>)
 800728e:	f7fc f88f 	bl	80033b0 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007292:	4865      	ldr	r0, [pc, #404]	; (8007428 <cppLoop+0x1210>)
 8007294:	f7fd f821 	bl	80042da <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007298:	eddf 0a64 	vldr	s1, [pc, #400]	; 800742c <cppLoop+0x1214>
 800729c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80072a0:	4861      	ldr	r0, [pc, #388]	; (8007428 <cppLoop+0x1210>)
 80072a2:	f7fc ffad 	bl	8004200 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80072a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072aa:	f000 f9d3 	bl	8007654 <HAL_Delay>

			logger.stop();
 80072ae:	4858      	ldr	r0, [pc, #352]	; (8007410 <cppLoop+0x11f8>)
 80072b0:	f7fc f88f 	bl	80033d2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 80072b4:	485c      	ldr	r0, [pc, #368]	; (8007428 <cppLoop+0x1210>)
 80072b6:	f7fd f823 	bl	8004300 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 80072ba:	4a5d      	ldr	r2, [pc, #372]	; (8007430 <cppLoop+0x1218>)
 80072bc:	4957      	ldr	r1, [pc, #348]	; (800741c <cppLoop+0x1204>)
 80072be:	4854      	ldr	r0, [pc, #336]	; (8007410 <cppLoop+0x11f8>)
 80072c0:	f7fb ffad 	bl	800321e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 80072c4:	2200      	movs	r2, #0
 80072c6:	f04f 31ff 	mov.w	r1, #4294967295
 80072ca:	484d      	ldr	r0, [pc, #308]	; (8007400 <cppLoop+0x11e8>)
 80072cc:	f7fa feca 	bl	8002064 <_ZN3LED2LREaa>
		}

		break;
 80072d0:	e07e      	b.n	80073d0 <cppLoop+0x11b8>

	case 11:
		led.fullColor('C');
 80072d2:	2143      	movs	r1, #67	; 0x43
 80072d4:	484a      	ldr	r0, [pc, #296]	; (8007400 <cppLoop+0x11e8>)
 80072d6:	f7fa fe09 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 80072da:	f7f9 fee1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80072de:	2100      	movs	r1, #0
 80072e0:	2000      	movs	r0, #0
 80072e2:	f7f9 feed 	bl	80010c0 <lcd_locate>
		lcd_printf("11      ");
 80072e6:	4853      	ldr	r0, [pc, #332]	; (8007434 <cppLoop+0x121c>)
 80072e8:	f7f9 ff14 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80072ec:	2101      	movs	r1, #1
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7f9 fee6 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 80072f4:	4850      	ldr	r0, [pc, #320]	; (8007438 <cppLoop+0x1220>)
 80072f6:	f7f9 ff0d 	bl	8001114 <lcd_printf>

		break;
 80072fa:	e06a      	b.n	80073d2 <cppLoop+0x11ba>

	case 12:
		led.fullColor('R');
 80072fc:	2152      	movs	r1, #82	; 0x52
 80072fe:	4840      	ldr	r0, [pc, #256]	; (8007400 <cppLoop+0x11e8>)
 8007300:	f7fa fdf4 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007304:	f7f9 fecc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007308:	2100      	movs	r1, #0
 800730a:	2000      	movs	r0, #0
 800730c:	f7f9 fed8 	bl	80010c0 <lcd_locate>
		lcd_printf("12      ");
 8007310:	484a      	ldr	r0, [pc, #296]	; (800743c <cppLoop+0x1224>)
 8007312:	f7f9 feff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007316:	2101      	movs	r1, #1
 8007318:	2000      	movs	r0, #0
 800731a:	f7f9 fed1 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800731e:	4846      	ldr	r0, [pc, #280]	; (8007438 <cppLoop+0x1220>)
 8007320:	f7f9 fef8 	bl	8001114 <lcd_printf>

		break;
 8007324:	e055      	b.n	80073d2 <cppLoop+0x11ba>

	case 13:
		led.fullColor('G');
 8007326:	2147      	movs	r1, #71	; 0x47
 8007328:	4835      	ldr	r0, [pc, #212]	; (8007400 <cppLoop+0x11e8>)
 800732a:	f7fa fddf 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 800732e:	f7f9 feb7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007332:	2100      	movs	r1, #0
 8007334:	2000      	movs	r0, #0
 8007336:	f7f9 fec3 	bl	80010c0 <lcd_locate>
		lcd_printf("13      ");
 800733a:	4841      	ldr	r0, [pc, #260]	; (8007440 <cppLoop+0x1228>)
 800733c:	f7f9 feea 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007340:	2101      	movs	r1, #1
 8007342:	2000      	movs	r0, #0
 8007344:	f7f9 febc 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007348:	483b      	ldr	r0, [pc, #236]	; (8007438 <cppLoop+0x1220>)
 800734a:	f7f9 fee3 	bl	8001114 <lcd_printf>

		break;
 800734e:	e040      	b.n	80073d2 <cppLoop+0x11ba>

	case 14:
		led.fullColor('B');
 8007350:	2142      	movs	r1, #66	; 0x42
 8007352:	482b      	ldr	r0, [pc, #172]	; (8007400 <cppLoop+0x11e8>)
 8007354:	f7fa fdca 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007358:	f7f9 fea2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800735c:	2100      	movs	r1, #0
 800735e:	2000      	movs	r0, #0
 8007360:	f7f9 feae 	bl	80010c0 <lcd_locate>
		lcd_printf("14      ");
 8007364:	4837      	ldr	r0, [pc, #220]	; (8007444 <cppLoop+0x122c>)
 8007366:	f7f9 fed5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800736a:	2101      	movs	r1, #1
 800736c:	2000      	movs	r0, #0
 800736e:	f7f9 fea7 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007372:	4831      	ldr	r0, [pc, #196]	; (8007438 <cppLoop+0x1220>)
 8007374:	f7f9 fece 	bl	8001114 <lcd_printf>

		break;
 8007378:	e02b      	b.n	80073d2 <cppLoop+0x11ba>

	case 15:
		led.fullColor('M');
 800737a:	214d      	movs	r1, #77	; 0x4d
 800737c:	4820      	ldr	r0, [pc, #128]	; (8007400 <cppLoop+0x11e8>)
 800737e:	f7fa fdb5 	bl	8001eec <_ZN3LED9fullColorEc>

		lcd_clear();
 8007382:	f7f9 fe8d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007386:	2100      	movs	r1, #0
 8007388:	2000      	movs	r0, #0
 800738a:	f7f9 fe99 	bl	80010c0 <lcd_locate>
		lcd_printf("15      ");
 800738e:	482e      	ldr	r0, [pc, #184]	; (8007448 <cppLoop+0x1230>)
 8007390:	f7f9 fec0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007394:	2101      	movs	r1, #1
 8007396:	2000      	movs	r0, #0
 8007398:	f7f9 fe92 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 800739c:	4826      	ldr	r0, [pc, #152]	; (8007438 <cppLoop+0x1220>)
 800739e:	f7f9 feb9 	bl	8001114 <lcd_printf>

		break;
 80073a2:	e016      	b.n	80073d2 <cppLoop+0x11ba>

	default:
		break;
 80073a4:	bf00      	nop
 80073a6:	e014      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073a8:	bf00      	nop
 80073aa:	e012      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073ac:	bf00      	nop
 80073ae:	e010      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073b0:	bf00      	nop
 80073b2:	e00e      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073b4:	bf00      	nop
 80073b6:	e00c      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073b8:	bf00      	nop
 80073ba:	e00a      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073bc:	bf00      	nop
 80073be:	e008      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073c0:	bf00      	nop
 80073c2:	e006      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073c4:	bf00      	nop
 80073c6:	e004      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073c8:	bf00      	nop
 80073ca:	e002      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <cppLoop+0x11ba>
		break;
 80073d0:	bf00      	nop

	}

	HAL_Delay(30);
 80073d2:	201e      	movs	r0, #30
 80073d4:	f000 f93e 	bl	8007654 <HAL_Delay>

}
 80073d8:	bf00      	nop
 80073da:	3724      	adds	r7, #36	; 0x24
 80073dc:	46bd      	mov	sp, r7
 80073de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073e2:	bf00      	nop
 80073e4:	f3af 8000 	nop.w
 80073e8:	33333333 	.word	0x33333333
 80073ec:	bfd33333 	.word	0xbfd33333
 80073f0:	33333333 	.word	0x33333333
 80073f4:	3fd33333 	.word	0x3fd33333
	...
 8007400:	200005ac 	.word	0x200005ac
 8007404:	0801846c 	.word	0x0801846c
 8007408:	080183cc 	.word	0x080183cc
 800740c:	200005a0 	.word	0x200005a0
 8007410:	200005d0 	.word	0x200005d0
 8007414:	200005a8 	.word	0x200005a8
 8007418:	08018474 	.word	0x08018474
 800741c:	08018480 	.word	0x08018480
 8007420:	0801848c 	.word	0x0801848c
 8007424:	08018490 	.word	0x08018490
 8007428:	20015db4 	.word	0x20015db4
 800742c:	00000000 	.word	0x00000000
 8007430:	0801849c 	.word	0x0801849c
 8007434:	080184a8 	.word	0x080184a8
 8007438:	080184b4 	.word	0x080184b4
 800743c:	080184c0 	.word	0x080184c0
 8007440:	080184cc 	.word	0x080184cc
 8007444:	080184d8 	.word	0x080184d8
 8007448:	080184e4 	.word	0x080184e4

0800744c <_Z41__static_initialization_and_destruction_0ii>:
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af04      	add	r7, sp, #16
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d13b      	bne.n	80074d4 <_Z41__static_initialization_and_destruction_0ii+0x88>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007462:	4293      	cmp	r3, r2
 8007464:	d136      	bne.n	80074d4 <_Z41__static_initialization_and_destruction_0ii+0x88>
LineSensor line_sensor;
 8007466:	481d      	ldr	r0, [pc, #116]	; (80074dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8007468:	f7fa fe34 	bl	80020d4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800746c:	481c      	ldr	r0, [pc, #112]	; (80074e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800746e:	f7fc fbbb 	bl	8003be8 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8007472:	481c      	ldr	r0, [pc, #112]	; (80074e4 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007474:	f7fa fcca 	bl	8001e0c <_ZN8JoyStickC1Ev>
Motor motor;
 8007478:	481b      	ldr	r0, [pc, #108]	; (80074e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800747a:	f7fb ffbb 	bl	80033f4 <_ZN5MotorC1Ev>
IMU imu;
 800747e:	481b      	ldr	r0, [pc, #108]	; (80074ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007480:	f7fa faca 	bl	8001a18 <_ZN3IMUC1Ev>
Logger logger;
 8007484:	481a      	ldr	r0, [pc, #104]	; (80074f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007486:	f7fb fd89 	bl	8002f9c <_ZN6LoggerC1Ev>
Encoder encoder;
 800748a:	481a      	ldr	r0, [pc, #104]	; (80074f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800748c:	f7f9 fe62 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8007490:	4b16      	ldr	r3, [pc, #88]	; (80074ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007492:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8007494:	4914      	ldr	r1, [pc, #80]	; (80074e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8007496:	4818      	ldr	r0, [pc, #96]	; (80074f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8007498:	f7fc fd86 	bl	8003fa8 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 800749c:	4b16      	ldr	r3, [pc, #88]	; (80074f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80074a0:	4914      	ldr	r1, [pc, #80]	; (80074f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074a2:	4816      	ldr	r0, [pc, #88]	; (80074fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80074a4:	f7fc f88c 	bl	80035c0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger);
 80074a8:	4b11      	ldr	r3, [pc, #68]	; (80074f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80074aa:	9303      	str	r3, [sp, #12]
 80074ac:	4b13      	ldr	r3, [pc, #76]	; (80074fc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80074ae:	9302      	str	r3, [sp, #8]
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80074b2:	9301      	str	r3, [sp, #4]
 80074b4:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	4b0f      	ldr	r3, [pc, #60]	; (80074f8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80074ba:	4a08      	ldr	r2, [pc, #32]	; (80074dc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80074bc:	490a      	ldr	r1, [pc, #40]	; (80074e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074be:	4810      	ldr	r0, [pc, #64]	; (8007500 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80074c0:	f7fb f960 	bl	8002784 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6Logger>
SystemIdentification sys_ident(&logger, &motor);
 80074c4:	4a08      	ldr	r2, [pc, #32]	; (80074e8 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80074c6:	490a      	ldr	r1, [pc, #40]	; (80074f0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80074c8:	480e      	ldr	r0, [pc, #56]	; (8007504 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80074ca:	f7fc fc6b 	bl	8003da4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80074ce:	480e      	ldr	r0, [pc, #56]	; (8007508 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80074d0:	f7fc f9aa 	bl	8003828 <_ZN13PathFollowingC1Ev>
}
 80074d4:	bf00      	nop
 80074d6:	3708      	adds	r7, #8
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	200002a0 	.word	0x200002a0
 80074e0:	20000598 	.word	0x20000598
 80074e4:	200005a0 	.word	0x200005a0
 80074e8:	200005a8 	.word	0x200005a8
 80074ec:	200005bc 	.word	0x200005bc
 80074f0:	200005d0 	.word	0x200005d0
 80074f4:	20015d98 	.word	0x20015d98
 80074f8:	20015db4 	.word	0x20015db4
 80074fc:	20015df0 	.word	0x20015df0
 8007500:	20015e20 	.word	0x20015e20
 8007504:	2001bc5c 	.word	0x2001bc5c
 8007508:	2001be68 	.word	0x2001be68

0800750c <_GLOBAL__sub_I_line_sensor>:
 800750c:	b580      	push	{r7, lr}
 800750e:	af00      	add	r7, sp, #0
 8007510:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007514:	2001      	movs	r0, #1
 8007516:	f7ff ff99 	bl	800744c <_Z41__static_initialization_and_destruction_0ii>
 800751a:	bd80      	pop	{r7, pc}

0800751c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800751c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007522:	e003      	b.n	800752c <LoopCopyDataInit>

08007524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800752a:	3104      	adds	r1, #4

0800752c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800752c:	480b      	ldr	r0, [pc, #44]	; (800755c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007534:	d3f6      	bcc.n	8007524 <CopyDataInit>
  ldr  r2, =_sbss
 8007536:	4a0b      	ldr	r2, [pc, #44]	; (8007564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007538:	e002      	b.n	8007540 <LoopFillZerobss>

0800753a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800753a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800753c:	f842 3b04 	str.w	r3, [r2], #4

08007540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007540:	4b09      	ldr	r3, [pc, #36]	; (8007568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007544:	d3f9      	bcc.n	800753a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007546:	f7fe fced 	bl	8005f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800754a:	f00b fded 	bl	8013128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800754e:	f7fc ffb3 	bl	80044b8 <main>
  bx  lr    
 8007552:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007554:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007558:	08018ae8 	.word	0x08018ae8
  ldr  r0, =_sdata
 800755c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007560:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8007564:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8007568:	20037fa8 	.word	0x20037fa8

0800756c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800756c:	e7fe      	b.n	800756c <ADC_IRQHandler>
	...

08007570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007574:	4b0e      	ldr	r3, [pc, #56]	; (80075b0 <HAL_Init+0x40>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a0d      	ldr	r2, [pc, #52]	; (80075b0 <HAL_Init+0x40>)
 800757a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800757e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007580:	4b0b      	ldr	r3, [pc, #44]	; (80075b0 <HAL_Init+0x40>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <HAL_Init+0x40>)
 8007586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800758a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800758c:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <HAL_Init+0x40>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a07      	ldr	r2, [pc, #28]	; (80075b0 <HAL_Init+0x40>)
 8007592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007598:	2003      	movs	r0, #3
 800759a:	f000 fd51 	bl	8008040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800759e:	2000      	movs	r0, #0
 80075a0:	f000 f808 	bl	80075b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80075a4:	f7fd feac 	bl	8005300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80075a8:	2300      	movs	r3, #0
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	40023c00 	.word	0x40023c00

080075b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80075bc:	4b12      	ldr	r3, [pc, #72]	; (8007608 <HAL_InitTick+0x54>)
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	4b12      	ldr	r3, [pc, #72]	; (800760c <HAL_InitTick+0x58>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	4619      	mov	r1, r3
 80075c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80075ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80075ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80075d2:	4618      	mov	r0, r3
 80075d4:	f000 fd69 	bl	80080aa <HAL_SYSTICK_Config>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e00e      	b.n	8007600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b0f      	cmp	r3, #15
 80075e6:	d80a      	bhi.n	80075fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80075e8:	2200      	movs	r2, #0
 80075ea:	6879      	ldr	r1, [r7, #4]
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	f000 fd31 	bl	8008056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80075f4:	4a06      	ldr	r2, [pc, #24]	; (8007610 <HAL_InitTick+0x5c>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e000      	b.n	8007600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
}
 8007600:	4618      	mov	r0, r3
 8007602:	3708      	adds	r7, #8
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20000000 	.word	0x20000000
 800760c:	20000008 	.word	0x20000008
 8007610:	20000004 	.word	0x20000004

08007614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007618:	4b06      	ldr	r3, [pc, #24]	; (8007634 <HAL_IncTick+0x20>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	461a      	mov	r2, r3
 800761e:	4b06      	ldr	r3, [pc, #24]	; (8007638 <HAL_IncTick+0x24>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4413      	add	r3, r2
 8007624:	4a04      	ldr	r2, [pc, #16]	; (8007638 <HAL_IncTick+0x24>)
 8007626:	6013      	str	r3, [r2, #0]
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20000008 	.word	0x20000008
 8007638:	20035f30 	.word	0x20035f30

0800763c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  return uwTick;
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <HAL_GetTick+0x14>)
 8007642:	681b      	ldr	r3, [r3, #0]
}
 8007644:	4618      	mov	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	20035f30 	.word	0x20035f30

08007654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800765c:	f7ff ffee 	bl	800763c <HAL_GetTick>
 8007660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d005      	beq.n	800767a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <HAL_Delay+0x40>)
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	4413      	add	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800767a:	bf00      	nop
 800767c:	f7ff ffde 	bl	800763c <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	429a      	cmp	r2, r3
 800768a:	d8f7      	bhi.n	800767c <HAL_Delay+0x28>
  {
  }
}
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20000008 	.word	0x20000008

08007698 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d101      	bne.n	80076ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e033      	b.n	8007716 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d109      	bne.n	80076ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7fd fe4a 	bl	8005350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ce:	f003 0310 	and.w	r3, r3, #16
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d118      	bne.n	8007708 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80076de:	f023 0302 	bic.w	r3, r3, #2
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa5a 	bl	8007ba4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	f043 0201 	orr.w	r2, r3, #1
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	641a      	str	r2, [r3, #64]	; 0x40
 8007706:	e001      	b.n	800770c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
	...

08007720 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_ADC_Start_DMA+0x1e>
 800773a:	2302      	movs	r3, #2
 800773c:	e0cc      	b.n	80078d8 <HAL_ADC_Start_DMA+0x1b8>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d018      	beq.n	8007786 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0201 	orr.w	r2, r2, #1
 8007762:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007764:	4b5e      	ldr	r3, [pc, #376]	; (80078e0 <HAL_ADC_Start_DMA+0x1c0>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a5e      	ldr	r2, [pc, #376]	; (80078e4 <HAL_ADC_Start_DMA+0x1c4>)
 800776a:	fba2 2303 	umull	r2, r3, r2, r3
 800776e:	0c9a      	lsrs	r2, r3, #18
 8007770:	4613      	mov	r3, r2
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	4413      	add	r3, r2
 8007776:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007778:	e002      	b.n	8007780 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	3b01      	subs	r3, #1
 800777e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1f9      	bne.n	800777a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	f040 80a0 	bne.w	80078d6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800779e:	f023 0301 	bic.w	r3, r3, #1
 80077a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d007      	beq.n	80077c8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077d4:	d106      	bne.n	80077e4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077da:	f023 0206 	bic.w	r2, r3, #6
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	645a      	str	r2, [r3, #68]	; 0x44
 80077e2:	e002      	b.n	80077ea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077f2:	4b3d      	ldr	r3, [pc, #244]	; (80078e8 <HAL_ADC_Start_DMA+0x1c8>)
 80077f4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	4a3c      	ldr	r2, [pc, #240]	; (80078ec <HAL_ADC_Start_DMA+0x1cc>)
 80077fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007802:	4a3b      	ldr	r2, [pc, #236]	; (80078f0 <HAL_ADC_Start_DMA+0x1d0>)
 8007804:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800780a:	4a3a      	ldr	r2, [pc, #232]	; (80078f4 <HAL_ADC_Start_DMA+0x1d4>)
 800780c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007816:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007826:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689a      	ldr	r2, [r3, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007836:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	334c      	adds	r3, #76	; 0x4c
 8007842:	4619      	mov	r1, r3
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f000 fcea 	bl	8008220 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2b00      	cmp	r3, #0
 8007856:	d12a      	bne.n	80078ae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <HAL_ADC_Start_DMA+0x1d8>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d015      	beq.n	800788e <HAL_ADC_Start_DMA+0x16e>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a25      	ldr	r2, [pc, #148]	; (80078fc <HAL_ADC_Start_DMA+0x1dc>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d105      	bne.n	8007878 <HAL_ADC_Start_DMA+0x158>
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <HAL_ADC_Start_DMA+0x1c8>)
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00a      	beq.n	800788e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a20      	ldr	r2, [pc, #128]	; (8007900 <HAL_ADC_Start_DMA+0x1e0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d129      	bne.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
 8007882:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <HAL_ADC_Start_DMA+0x1c8>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b0f      	cmp	r3, #15
 800788c:	d823      	bhi.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11c      	bne.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	e013      	b.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a11      	ldr	r2, [pc, #68]	; (80078f8 <HAL_ADC_Start_DMA+0x1d8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d10e      	bne.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d107      	bne.n	80078d6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80078d4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	20000000 	.word	0x20000000
 80078e4:	431bde83 	.word	0x431bde83
 80078e8:	40012300 	.word	0x40012300
 80078ec:	08007d9d 	.word	0x08007d9d
 80078f0:	08007e57 	.word	0x08007e57
 80078f4:	08007e73 	.word	0x08007e73
 80078f8:	40012000 	.word	0x40012000
 80078fc:	40012100 	.word	0x40012100
 8007900:	40012200 	.word	0x40012200

08007904 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800794a:	2300      	movs	r3, #0
 800794c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d101      	bne.n	800795c <HAL_ADC_ConfigChannel+0x1c>
 8007958:	2302      	movs	r3, #2
 800795a:	e113      	b.n	8007b84 <HAL_ADC_ConfigChannel+0x244>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b09      	cmp	r3, #9
 800796a:	d925      	bls.n	80079b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68d9      	ldr	r1, [r3, #12]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	4613      	mov	r3, r2
 800797c:	005b      	lsls	r3, r3, #1
 800797e:	4413      	add	r3, r2
 8007980:	3b1e      	subs	r3, #30
 8007982:	2207      	movs	r2, #7
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	43da      	mvns	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	400a      	ands	r2, r1
 8007990:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68d9      	ldr	r1, [r3, #12]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4618      	mov	r0, r3
 80079a4:	4603      	mov	r3, r0
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	4403      	add	r3, r0
 80079aa:	3b1e      	subs	r3, #30
 80079ac:	409a      	lsls	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	430a      	orrs	r2, r1
 80079b4:	60da      	str	r2, [r3, #12]
 80079b6:	e022      	b.n	80079fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	6919      	ldr	r1, [r3, #16]
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	4613      	mov	r3, r2
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	2207      	movs	r2, #7
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	400a      	ands	r2, r1
 80079da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	6919      	ldr	r1, [r3, #16]
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	4403      	add	r3, r0
 80079f4:	409a      	lsls	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	430a      	orrs	r2, r1
 80079fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b06      	cmp	r3, #6
 8007a04:	d824      	bhi.n	8007a50 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	4613      	mov	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	3b05      	subs	r3, #5
 8007a18:	221f      	movs	r2, #31
 8007a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1e:	43da      	mvns	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	400a      	ands	r2, r1
 8007a26:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	4618      	mov	r0, r3
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	4613      	mov	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	3b05      	subs	r3, #5
 8007a42:	fa00 f203 	lsl.w	r2, r0, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8007a4e:	e04c      	b.n	8007aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b0c      	cmp	r3, #12
 8007a56:	d824      	bhi.n	8007aa2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	685a      	ldr	r2, [r3, #4]
 8007a62:	4613      	mov	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	3b23      	subs	r3, #35	; 0x23
 8007a6a:	221f      	movs	r2, #31
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	43da      	mvns	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	400a      	ands	r2, r1
 8007a78:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	4618      	mov	r0, r3
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	3b23      	subs	r3, #35	; 0x23
 8007a94:	fa00 f203 	lsl.w	r2, r0, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30
 8007aa0:	e023      	b.n	8007aea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3b41      	subs	r3, #65	; 0x41
 8007ab4:	221f      	movs	r2, #31
 8007ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aba:	43da      	mvns	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	400a      	ands	r2, r1
 8007ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	3b41      	subs	r3, #65	; 0x41
 8007ade:	fa00 f203 	lsl.w	r2, r0, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aea:	4b29      	ldr	r3, [pc, #164]	; (8007b90 <HAL_ADC_ConfigChannel+0x250>)
 8007aec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a28      	ldr	r2, [pc, #160]	; (8007b94 <HAL_ADC_ConfigChannel+0x254>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d10f      	bne.n	8007b18 <HAL_ADC_ConfigChannel+0x1d8>
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b12      	cmp	r3, #18
 8007afe:	d10b      	bne.n	8007b18 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <HAL_ADC_ConfigChannel+0x254>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d12b      	bne.n	8007b7a <HAL_ADC_ConfigChannel+0x23a>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1c      	ldr	r2, [pc, #112]	; (8007b98 <HAL_ADC_ConfigChannel+0x258>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <HAL_ADC_ConfigChannel+0x1f4>
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	2b11      	cmp	r3, #17
 8007b32:	d122      	bne.n	8007b7a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a11      	ldr	r2, [pc, #68]	; (8007b98 <HAL_ADC_ConfigChannel+0x258>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d111      	bne.n	8007b7a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <HAL_ADC_ConfigChannel+0x25c>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <HAL_ADC_ConfigChannel+0x260>)
 8007b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b60:	0c9a      	lsrs	r2, r3, #18
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	005b      	lsls	r3, r3, #1
 8007b6a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b6c:	e002      	b.n	8007b74 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	3b01      	subs	r3, #1
 8007b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1f9      	bne.n	8007b6e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	40012300 	.word	0x40012300
 8007b94:	40012000 	.word	0x40012000
 8007b98:	10000012 	.word	0x10000012
 8007b9c:	20000000 	.word	0x20000000
 8007ba0:	431bde83 	.word	0x431bde83

08007ba4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007bac:	4b79      	ldr	r3, [pc, #484]	; (8007d94 <ADC_Init+0x1f0>)
 8007bae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	685a      	ldr	r2, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	6859      	ldr	r1, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	021a      	lsls	r2, r3, #8
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685a      	ldr	r2, [r3, #4]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007bfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6859      	ldr	r1, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689a      	ldr	r2, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	689a      	ldr	r2, [r3, #8]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6899      	ldr	r1, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68da      	ldr	r2, [r3, #12]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	4a58      	ldr	r2, [pc, #352]	; (8007d98 <ADC_Init+0x1f4>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d022      	beq.n	8007c82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6899      	ldr	r1, [r3, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689a      	ldr	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6899      	ldr	r1, [r3, #8]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	609a      	str	r2, [r3, #8]
 8007c80:	e00f      	b.n	8007ca2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689a      	ldr	r2, [r3, #8]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689a      	ldr	r2, [r3, #8]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007ca0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	689a      	ldr	r2, [r3, #8]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0202 	bic.w	r2, r2, #2
 8007cb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	6899      	ldr	r1, [r3, #8]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	7e1b      	ldrb	r3, [r3, #24]
 8007cbc:	005a      	lsls	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01b      	beq.n	8007d08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	685a      	ldr	r2, [r3, #4]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007cee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6859      	ldr	r1, [r3, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	035a      	lsls	r2, r3, #13
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
 8007d06:	e007      	b.n	8007d18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	3b01      	subs	r3, #1
 8007d34:	051a      	lsls	r2, r3, #20
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689a      	ldr	r2, [r3, #8]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6899      	ldr	r1, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d5a:	025a      	lsls	r2, r3, #9
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	430a      	orrs	r2, r1
 8007d62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6899      	ldr	r1, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	029a      	lsls	r2, r3, #10
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	430a      	orrs	r2, r1
 8007d86:	609a      	str	r2, [r3, #8]
}
 8007d88:	bf00      	nop
 8007d8a:	3714      	adds	r7, #20
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr
 8007d94:	40012300 	.word	0x40012300
 8007d98:	0f000001 	.word	0x0f000001

08007d9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d13c      	bne.n	8007e30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d12b      	bne.n	8007e28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d127      	bne.n	8007e28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d006      	beq.n	8007df4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d119      	bne.n	8007e28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0220 	bic.w	r2, r2, #32
 8007e02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d105      	bne.n	8007e28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e20:	f043 0201 	orr.w	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f7ff fd6b 	bl	8007904 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e2e:	e00e      	b.n	8007e4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f7ff fd75 	bl	800792c <HAL_ADC_ErrorCallback>
}
 8007e42:	e004      	b.n	8007e4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fd57 	bl	8007918 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b084      	sub	sp, #16
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2240      	movs	r2, #64	; 0x40
 8007e84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	f043 0204 	orr.w	r2, r3, #4
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fd4a 	bl	800792c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <__NVIC_SetPriorityGrouping>:
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f003 0307 	and.w	r3, r3, #7
 8007eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ebc:	4013      	ands	r3, r2
 8007ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ed2:	4a04      	ldr	r2, [pc, #16]	; (8007ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	60d3      	str	r3, [r2, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	3714      	adds	r7, #20
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <__NVIC_GetPriorityGrouping>:
{
 8007ee8:	b480      	push	{r7}
 8007eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007eec:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <__NVIC_GetPriorityGrouping+0x18>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	0a1b      	lsrs	r3, r3, #8
 8007ef2:	f003 0307 	and.w	r3, r3, #7
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	e000ed00 	.word	0xe000ed00

08007f04 <__NVIC_EnableIRQ>:
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	db0b      	blt.n	8007f2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	f003 021f 	and.w	r2, r3, #31
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <__NVIC_EnableIRQ+0x38>)
 8007f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f22:	095b      	lsrs	r3, r3, #5
 8007f24:	2001      	movs	r0, #1
 8007f26:	fa00 f202 	lsl.w	r2, r0, r2
 8007f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f2e:	bf00      	nop
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	e000e100 	.word	0xe000e100

08007f40 <__NVIC_SetPriority>:
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	db0a      	blt.n	8007f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	490c      	ldr	r1, [pc, #48]	; (8007f8c <__NVIC_SetPriority+0x4c>)
 8007f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f5e:	0112      	lsls	r2, r2, #4
 8007f60:	b2d2      	uxtb	r2, r2
 8007f62:	440b      	add	r3, r1
 8007f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f68:	e00a      	b.n	8007f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	b2da      	uxtb	r2, r3
 8007f6e:	4908      	ldr	r1, [pc, #32]	; (8007f90 <__NVIC_SetPriority+0x50>)
 8007f70:	79fb      	ldrb	r3, [r7, #7]
 8007f72:	f003 030f 	and.w	r3, r3, #15
 8007f76:	3b04      	subs	r3, #4
 8007f78:	0112      	lsls	r2, r2, #4
 8007f7a:	b2d2      	uxtb	r2, r2
 8007f7c:	440b      	add	r3, r1
 8007f7e:	761a      	strb	r2, [r3, #24]
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	e000e100 	.word	0xe000e100
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <NVIC_EncodePriority>:
{
 8007f94:	b480      	push	{r7}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	f1c3 0307 	rsb	r3, r3, #7
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	bf28      	it	cs
 8007fb2:	2304      	movcs	r3, #4
 8007fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3304      	adds	r3, #4
 8007fba:	2b06      	cmp	r3, #6
 8007fbc:	d902      	bls.n	8007fc4 <NVIC_EncodePriority+0x30>
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3b03      	subs	r3, #3
 8007fc2:	e000      	b.n	8007fc6 <NVIC_EncodePriority+0x32>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	401a      	ands	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	43d9      	mvns	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fec:	4313      	orrs	r3, r2
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3724      	adds	r7, #36	; 0x24
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <SysTick_Config>:
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	3b01      	subs	r3, #1
 8008008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800800c:	d301      	bcc.n	8008012 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800800e:	2301      	movs	r3, #1
 8008010:	e00f      	b.n	8008032 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <SysTick_Config+0x40>)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3b01      	subs	r3, #1
 8008018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800801a:	210f      	movs	r1, #15
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	f7ff ff8e 	bl	8007f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008024:	4b05      	ldr	r3, [pc, #20]	; (800803c <SysTick_Config+0x40>)
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800802a:	4b04      	ldr	r3, [pc, #16]	; (800803c <SysTick_Config+0x40>)
 800802c:	2207      	movs	r2, #7
 800802e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	e000e010 	.word	0xe000e010

08008040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b082      	sub	sp, #8
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff ff29 	bl	8007ea0 <__NVIC_SetPriorityGrouping>
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	4603      	mov	r3, r0
 800805e:	60b9      	str	r1, [r7, #8]
 8008060:	607a      	str	r2, [r7, #4]
 8008062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008068:	f7ff ff3e 	bl	8007ee8 <__NVIC_GetPriorityGrouping>
 800806c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	6978      	ldr	r0, [r7, #20]
 8008074:	f7ff ff8e 	bl	8007f94 <NVIC_EncodePriority>
 8008078:	4602      	mov	r2, r0
 800807a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800807e:	4611      	mov	r1, r2
 8008080:	4618      	mov	r0, r3
 8008082:	f7ff ff5d 	bl	8007f40 <__NVIC_SetPriority>
}
 8008086:	bf00      	nop
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	4603      	mov	r3, r0
 8008096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800809c:	4618      	mov	r0, r3
 800809e:	f7ff ff31 	bl	8007f04 <__NVIC_EnableIRQ>
}
 80080a2:	bf00      	nop
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b082      	sub	sp, #8
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f7ff ffa2 	bl	8007ffc <SysTick_Config>
 80080b8:	4603      	mov	r3, r0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80080d0:	f7ff fab4 	bl	800763c <HAL_GetTick>
 80080d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d101      	bne.n	80080e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e099      	b.n	8008214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008100:	e00f      	b.n	8008122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008102:	f7ff fa9b 	bl	800763c <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b05      	cmp	r3, #5
 800810e:	d908      	bls.n	8008122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2220      	movs	r2, #32
 8008114:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2203      	movs	r2, #3
 800811a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e078      	b.n	8008214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e8      	bne.n	8008102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	4b38      	ldr	r3, [pc, #224]	; (800821c <HAL_DMA_Init+0x158>)
 800813c:	4013      	ands	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800814e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800815a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	4313      	orrs	r3, r2
 8008172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008178:	2b04      	cmp	r3, #4
 800817a:	d107      	bne.n	800818c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	4313      	orrs	r3, r2
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	697a      	ldr	r2, [r7, #20]
 8008192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	f023 0307 	bic.w	r3, r3, #7
 80081a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	2b04      	cmp	r3, #4
 80081b4:	d117      	bne.n	80081e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	4313      	orrs	r3, r2
 80081be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00e      	beq.n	80081e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 fa9d 	bl	8008708 <DMA_CheckFifoParam>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d008      	beq.n	80081e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2240      	movs	r2, #64	; 0x40
 80081d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80081e2:	2301      	movs	r3, #1
 80081e4:	e016      	b.n	8008214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa54 	bl	800869c <DMA_CalcBaseAndBitshift>
 80081f4:	4603      	mov	r3, r0
 80081f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fc:	223f      	movs	r2, #63	; 0x3f
 80081fe:	409a      	lsls	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	f010803f 	.word	0xf010803f

08008220 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800822e:	2300      	movs	r3, #0
 8008230:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008236:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_DMA_Start_IT+0x26>
 8008242:	2302      	movs	r3, #2
 8008244:	e040      	b.n	80082c8 <HAL_DMA_Start_IT+0xa8>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b01      	cmp	r3, #1
 8008258:	d12f      	bne.n	80082ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2202      	movs	r2, #2
 800825e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	68b9      	ldr	r1, [r7, #8]
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f9e6 	bl	8008640 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008278:	223f      	movs	r2, #63	; 0x3f
 800827a:	409a      	lsls	r2, r3
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f042 0216 	orr.w	r2, r2, #22
 800828e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d007      	beq.n	80082a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0208 	orr.w	r2, r2, #8
 80082a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0201 	orr.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]
 80082b8:	e005      	b.n	80082c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80082c2:	2302      	movs	r3, #2
 80082c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082de:	b2db      	uxtb	r3, r3
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d004      	beq.n	80082ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2280      	movs	r2, #128	; 0x80
 80082e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e00c      	b.n	8008308 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2205      	movs	r2, #5
 80082f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f022 0201 	bic.w	r2, r2, #1
 8008304:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008320:	4b92      	ldr	r3, [pc, #584]	; (800856c <HAL_DMA_IRQHandler+0x258>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a92      	ldr	r2, [pc, #584]	; (8008570 <HAL_DMA_IRQHandler+0x25c>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	0a9b      	lsrs	r3, r3, #10
 800832c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008332:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800833e:	2208      	movs	r2, #8
 8008340:	409a      	lsls	r2, r3
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	4013      	ands	r3, r2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01a      	beq.n	8008380 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 0304 	and.w	r3, r3, #4
 8008354:	2b00      	cmp	r3, #0
 8008356:	d013      	beq.n	8008380 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f022 0204 	bic.w	r2, r2, #4
 8008366:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800836c:	2208      	movs	r2, #8
 800836e:	409a      	lsls	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008378:	f043 0201 	orr.w	r2, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008384:	2201      	movs	r2, #1
 8008386:	409a      	lsls	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d012      	beq.n	80083b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00b      	beq.n	80083b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083a2:	2201      	movs	r2, #1
 80083a4:	409a      	lsls	r2, r3
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ae:	f043 0202 	orr.w	r2, r3, #2
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ba:	2204      	movs	r2, #4
 80083bc:	409a      	lsls	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d012      	beq.n	80083ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	2204      	movs	r2, #4
 80083da:	409a      	lsls	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	f043 0204 	orr.w	r2, r3, #4
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f0:	2210      	movs	r2, #16
 80083f2:	409a      	lsls	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d043      	beq.n	8008484 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d03c      	beq.n	8008484 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840e:	2210      	movs	r2, #16
 8008410:	409a      	lsls	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008420:	2b00      	cmp	r3, #0
 8008422:	d018      	beq.n	8008456 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	2b00      	cmp	r3, #0
 8008438:	d024      	beq.n	8008484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
 8008442:	e01f      	b.n	8008484 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01b      	beq.n	8008484 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
 8008454:	e016      	b.n	8008484 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008460:	2b00      	cmp	r3, #0
 8008462:	d107      	bne.n	8008474 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681a      	ldr	r2, [r3, #0]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 0208 	bic.w	r2, r2, #8
 8008472:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008488:	2220      	movs	r2, #32
 800848a:	409a      	lsls	r2, r3
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4013      	ands	r3, r2
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 808e 	beq.w	80085b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8086 	beq.w	80085b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084aa:	2220      	movs	r2, #32
 80084ac:	409a      	lsls	r2, r3
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b05      	cmp	r3, #5
 80084bc:	d136      	bne.n	800852c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0216 	bic.w	r2, r2, #22
 80084cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d103      	bne.n	80084ee <HAL_DMA_IRQHandler+0x1da>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d007      	beq.n	80084fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0208 	bic.w	r2, r2, #8
 80084fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008502:	223f      	movs	r2, #63	; 0x3f
 8008504:	409a      	lsls	r2, r3
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	2b00      	cmp	r3, #0
 8008520:	d07d      	beq.n	800861e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
        }
        return;
 800852a:	e078      	b.n	800861e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d01c      	beq.n	8008574 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d108      	bne.n	800855a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854c:	2b00      	cmp	r3, #0
 800854e:	d030      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
 8008558:	e02b      	b.n	80085b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	2b00      	cmp	r3, #0
 8008560:	d027      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	4798      	blx	r3
 800856a:	e022      	b.n	80085b2 <HAL_DMA_IRQHandler+0x29e>
 800856c:	20000000 	.word	0x20000000
 8008570:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857e:	2b00      	cmp	r3, #0
 8008580:	d10f      	bne.n	80085a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0210 	bic.w	r2, r2, #16
 8008590:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d032      	beq.n	8008620 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d022      	beq.n	800860c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2205      	movs	r2, #5
 80085ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0201 	bic.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	3301      	adds	r3, #1
 80085e2:	60bb      	str	r3, [r7, #8]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d307      	bcc.n	80085fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1f2      	bne.n	80085de <HAL_DMA_IRQHandler+0x2ca>
 80085f8:	e000      	b.n	80085fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80085fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
 800861c:	e000      	b.n	8008620 <HAL_DMA_IRQHandler+0x30c>
        return;
 800861e:	bf00      	nop
    }
  }
}
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop

08008628 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008634:	4618      	mov	r0, r3
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008640:	b480      	push	{r7}
 8008642:	b085      	sub	sp, #20
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800865c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d108      	bne.n	8008680 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68ba      	ldr	r2, [r7, #8]
 800867c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800867e:	e007      	b.n	8008690 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68ba      	ldr	r2, [r7, #8]
 8008686:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	60da      	str	r2, [r3, #12]
}
 8008690:	bf00      	nop
 8008692:	3714      	adds	r7, #20
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	3b10      	subs	r3, #16
 80086ac:	4a14      	ldr	r2, [pc, #80]	; (8008700 <DMA_CalcBaseAndBitshift+0x64>)
 80086ae:	fba2 2303 	umull	r2, r3, r2, r3
 80086b2:	091b      	lsrs	r3, r3, #4
 80086b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086b6:	4a13      	ldr	r2, [pc, #76]	; (8008704 <DMA_CalcBaseAndBitshift+0x68>)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	4413      	add	r3, r2
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d909      	bls.n	80086de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086d2:	f023 0303 	bic.w	r3, r3, #3
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	659a      	str	r2, [r3, #88]	; 0x58
 80086dc:	e007      	b.n	80086ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086e6:	f023 0303 	bic.w	r3, r3, #3
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	aaaaaaab 	.word	0xaaaaaaab
 8008704:	08018524 	.word	0x08018524

08008708 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d11f      	bne.n	8008762 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d855      	bhi.n	80087d4 <DMA_CheckFifoParam+0xcc>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <DMA_CheckFifoParam+0x28>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008741 	.word	0x08008741
 8008734:	08008753 	.word	0x08008753
 8008738:	08008741 	.word	0x08008741
 800873c:	080087d5 	.word	0x080087d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d045      	beq.n	80087d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008750:	e042      	b.n	80087d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008756:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800875a:	d13f      	bne.n	80087dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008760:	e03c      	b.n	80087dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	699b      	ldr	r3, [r3, #24]
 8008766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876a:	d121      	bne.n	80087b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d836      	bhi.n	80087e0 <DMA_CheckFifoParam+0xd8>
 8008772:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <DMA_CheckFifoParam+0x70>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	08008789 	.word	0x08008789
 800877c:	0800878f 	.word	0x0800878f
 8008780:	08008789 	.word	0x08008789
 8008784:	080087a1 	.word	0x080087a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
      break;
 800878c:	e02f      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008792:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008796:	2b00      	cmp	r3, #0
 8008798:	d024      	beq.n	80087e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800879a:	2301      	movs	r3, #1
 800879c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800879e:	e021      	b.n	80087e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087a8:	d11e      	bne.n	80087e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087ae:	e01b      	b.n	80087e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d902      	bls.n	80087bc <DMA_CheckFifoParam+0xb4>
 80087b6:	2b03      	cmp	r3, #3
 80087b8:	d003      	beq.n	80087c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087ba:	e018      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	73fb      	strb	r3, [r7, #15]
      break;
 80087c0:	e015      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	73fb      	strb	r3, [r7, #15]
      break;
 80087d2:	e00b      	b.n	80087ec <DMA_CheckFifoParam+0xe4>
      break;
 80087d4:	bf00      	nop
 80087d6:	e00a      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;
 80087d8:	bf00      	nop
 80087da:	e008      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;
 80087dc:	bf00      	nop
 80087de:	e006      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;
 80087e0:	bf00      	nop
 80087e2:	e004      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;
 80087e4:	bf00      	nop
 80087e6:	e002      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;   
 80087e8:	bf00      	nop
 80087ea:	e000      	b.n	80087ee <DMA_CheckFifoParam+0xe6>
      break;
 80087ec:	bf00      	nop
    }
  } 
  
  return status; 
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3714      	adds	r7, #20
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b089      	sub	sp, #36	; 0x24
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008806:	2300      	movs	r3, #0
 8008808:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800880a:	2300      	movs	r3, #0
 800880c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800880e:	2300      	movs	r3, #0
 8008810:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008812:	2300      	movs	r3, #0
 8008814:	61fb      	str	r3, [r7, #28]
 8008816:	e177      	b.n	8008b08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008818:	2201      	movs	r2, #1
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	697a      	ldr	r2, [r7, #20]
 8008828:	4013      	ands	r3, r2
 800882a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	429a      	cmp	r2, r3
 8008832:	f040 8166 	bne.w	8008b02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d00b      	beq.n	8008856 <HAL_GPIO_Init+0x5a>
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	2b02      	cmp	r3, #2
 8008844:	d007      	beq.n	8008856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800884a:	2b11      	cmp	r3, #17
 800884c:	d003      	beq.n	8008856 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	2b12      	cmp	r3, #18
 8008854:	d130      	bne.n	80088b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	2203      	movs	r2, #3
 8008862:	fa02 f303 	lsl.w	r3, r2, r3
 8008866:	43db      	mvns	r3, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4013      	ands	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	69fb      	ldr	r3, [r7, #28]
 8008874:	005b      	lsls	r3, r3, #1
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	4313      	orrs	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	69ba      	ldr	r2, [r7, #24]
 8008884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800888c:	2201      	movs	r2, #1
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	43db      	mvns	r3, r3
 8008896:	69ba      	ldr	r2, [r7, #24]
 8008898:	4013      	ands	r3, r2
 800889a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	091b      	lsrs	r3, r3, #4
 80088a2:	f003 0201 	and.w	r2, r3, #1
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	fa02 f303 	lsl.w	r3, r2, r3
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	2203      	movs	r2, #3
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	43db      	mvns	r3, r3
 80088ca:	69ba      	ldr	r2, [r7, #24]
 80088cc:	4013      	ands	r3, r2
 80088ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	fa02 f303 	lsl.w	r3, r2, r3
 80088dc:	69ba      	ldr	r2, [r7, #24]
 80088de:	4313      	orrs	r3, r2
 80088e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d003      	beq.n	80088f8 <HAL_GPIO_Init+0xfc>
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	2b12      	cmp	r3, #18
 80088f6:	d123      	bne.n	8008940 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	08da      	lsrs	r2, r3, #3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	3208      	adds	r2, #8
 8008900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f003 0307 	and.w	r3, r3, #7
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	220f      	movs	r2, #15
 8008910:	fa02 f303 	lsl.w	r3, r2, r3
 8008914:	43db      	mvns	r3, r3
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4013      	ands	r3, r2
 800891a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	fa02 f303 	lsl.w	r3, r2, r3
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	4313      	orrs	r3, r2
 8008930:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	08da      	lsrs	r2, r3, #3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	3208      	adds	r2, #8
 800893a:	69b9      	ldr	r1, [r7, #24]
 800893c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	005b      	lsls	r3, r3, #1
 800894a:	2203      	movs	r2, #3
 800894c:	fa02 f303 	lsl.w	r3, r2, r3
 8008950:	43db      	mvns	r3, r3
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	4013      	ands	r3, r2
 8008956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f003 0203 	and.w	r2, r3, #3
 8008960:	69fb      	ldr	r3, [r7, #28]
 8008962:	005b      	lsls	r3, r3, #1
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	4313      	orrs	r3, r2
 800896c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	69ba      	ldr	r2, [r7, #24]
 8008972:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 80c0 	beq.w	8008b02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008982:	2300      	movs	r3, #0
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	4b65      	ldr	r3, [pc, #404]	; (8008b1c <HAL_GPIO_Init+0x320>)
 8008988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898a:	4a64      	ldr	r2, [pc, #400]	; (8008b1c <HAL_GPIO_Init+0x320>)
 800898c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008990:	6453      	str	r3, [r2, #68]	; 0x44
 8008992:	4b62      	ldr	r3, [pc, #392]	; (8008b1c <HAL_GPIO_Init+0x320>)
 8008994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800899e:	4a60      	ldr	r2, [pc, #384]	; (8008b20 <HAL_GPIO_Init+0x324>)
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	089b      	lsrs	r3, r3, #2
 80089a4:	3302      	adds	r3, #2
 80089a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	220f      	movs	r2, #15
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	43db      	mvns	r3, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4013      	ands	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a57      	ldr	r2, [pc, #348]	; (8008b24 <HAL_GPIO_Init+0x328>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d037      	beq.n	8008a3a <HAL_GPIO_Init+0x23e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a56      	ldr	r2, [pc, #344]	; (8008b28 <HAL_GPIO_Init+0x32c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d031      	beq.n	8008a36 <HAL_GPIO_Init+0x23a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a55      	ldr	r2, [pc, #340]	; (8008b2c <HAL_GPIO_Init+0x330>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d02b      	beq.n	8008a32 <HAL_GPIO_Init+0x236>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a54      	ldr	r2, [pc, #336]	; (8008b30 <HAL_GPIO_Init+0x334>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d025      	beq.n	8008a2e <HAL_GPIO_Init+0x232>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a53      	ldr	r2, [pc, #332]	; (8008b34 <HAL_GPIO_Init+0x338>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d01f      	beq.n	8008a2a <HAL_GPIO_Init+0x22e>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a52      	ldr	r2, [pc, #328]	; (8008b38 <HAL_GPIO_Init+0x33c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d019      	beq.n	8008a26 <HAL_GPIO_Init+0x22a>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a51      	ldr	r2, [pc, #324]	; (8008b3c <HAL_GPIO_Init+0x340>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d013      	beq.n	8008a22 <HAL_GPIO_Init+0x226>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a50      	ldr	r2, [pc, #320]	; (8008b40 <HAL_GPIO_Init+0x344>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d00d      	beq.n	8008a1e <HAL_GPIO_Init+0x222>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4f      	ldr	r2, [pc, #316]	; (8008b44 <HAL_GPIO_Init+0x348>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d007      	beq.n	8008a1a <HAL_GPIO_Init+0x21e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	4a4e      	ldr	r2, [pc, #312]	; (8008b48 <HAL_GPIO_Init+0x34c>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d101      	bne.n	8008a16 <HAL_GPIO_Init+0x21a>
 8008a12:	2309      	movs	r3, #9
 8008a14:	e012      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a16:	230a      	movs	r3, #10
 8008a18:	e010      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a1a:	2308      	movs	r3, #8
 8008a1c:	e00e      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a1e:	2307      	movs	r3, #7
 8008a20:	e00c      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a22:	2306      	movs	r3, #6
 8008a24:	e00a      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a26:	2305      	movs	r3, #5
 8008a28:	e008      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a2a:	2304      	movs	r3, #4
 8008a2c:	e006      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e004      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e002      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a36:	2301      	movs	r3, #1
 8008a38:	e000      	b.n	8008a3c <HAL_GPIO_Init+0x240>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	69fa      	ldr	r2, [r7, #28]
 8008a3e:	f002 0203 	and.w	r2, r2, #3
 8008a42:	0092      	lsls	r2, r2, #2
 8008a44:	4093      	lsls	r3, r2
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a4c:	4934      	ldr	r1, [pc, #208]	; (8008b20 <HAL_GPIO_Init+0x324>)
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	089b      	lsrs	r3, r3, #2
 8008a52:	3302      	adds	r3, #2
 8008a54:	69ba      	ldr	r2, [r7, #24]
 8008a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a5a:	4b3c      	ldr	r3, [pc, #240]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	43db      	mvns	r3, r3
 8008a64:	69ba      	ldr	r2, [r7, #24]
 8008a66:	4013      	ands	r3, r2
 8008a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008a76:	69ba      	ldr	r2, [r7, #24]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a7e:	4a33      	ldr	r2, [pc, #204]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a84:	4b31      	ldr	r3, [pc, #196]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4013      	ands	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d003      	beq.n	8008aa8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aa8:	4a28      	ldr	r2, [pc, #160]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008aae:	4b27      	ldr	r3, [pc, #156]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4013      	ands	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008ad2:	4a1e      	ldr	r2, [pc, #120]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ad8:	4b1c      	ldr	r3, [pc, #112]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008afc:	4a13      	ldr	r2, [pc, #76]	; (8008b4c <HAL_GPIO_Init+0x350>)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3301      	adds	r3, #1
 8008b06:	61fb      	str	r3, [r7, #28]
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	2b0f      	cmp	r3, #15
 8008b0c:	f67f ae84 	bls.w	8008818 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b10:	bf00      	nop
 8008b12:	3724      	adds	r7, #36	; 0x24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr
 8008b1c:	40023800 	.word	0x40023800
 8008b20:	40013800 	.word	0x40013800
 8008b24:	40020000 	.word	0x40020000
 8008b28:	40020400 	.word	0x40020400
 8008b2c:	40020800 	.word	0x40020800
 8008b30:	40020c00 	.word	0x40020c00
 8008b34:	40021000 	.word	0x40021000
 8008b38:	40021400 	.word	0x40021400
 8008b3c:	40021800 	.word	0x40021800
 8008b40:	40021c00 	.word	0x40021c00
 8008b44:	40022000 	.word	0x40022000
 8008b48:	40022400 	.word	0x40022400
 8008b4c:	40013c00 	.word	0x40013c00

08008b50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	691a      	ldr	r2, [r3, #16]
 8008b60:	887b      	ldrh	r3, [r7, #2]
 8008b62:	4013      	ands	r3, r2
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d002      	beq.n	8008b6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	73fb      	strb	r3, [r7, #15]
 8008b6c:	e001      	b.n	8008b72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr

08008b80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	807b      	strh	r3, [r7, #2]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b90:	787b      	ldrb	r3, [r7, #1]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b96:	887a      	ldrh	r2, [r7, #2]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008b9c:	e003      	b.n	8008ba6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008b9e:	887b      	ldrh	r3, [r7, #2]
 8008ba0:	041a      	lsls	r2, r3, #16
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	619a      	str	r2, [r3, #24]
}
 8008ba6:	bf00      	nop
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
	...

08008bb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	4603      	mov	r3, r0
 8008bbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008bbe:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	88fb      	ldrh	r3, [r7, #6]
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d006      	beq.n	8008bd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bca:	4a05      	ldr	r2, [pc, #20]	; (8008be0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bcc:	88fb      	ldrh	r3, [r7, #6]
 8008bce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fb fbf3 	bl	80043be <HAL_GPIO_EXTI_Callback>
  }
}
 8008bd8:	bf00      	nop
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40013c00 	.word	0x40013c00

08008be4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e11f      	b.n	8008e36 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fc fc52 	bl	80054b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2224      	movs	r2, #36	; 0x24
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0201 	bic.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c48:	f001 f96e 	bl	8009f28 <HAL_RCC_GetPCLK1Freq>
 8008c4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	4a7b      	ldr	r2, [pc, #492]	; (8008e40 <HAL_I2C_Init+0x25c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d807      	bhi.n	8008c68 <HAL_I2C_Init+0x84>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	4a7a      	ldr	r2, [pc, #488]	; (8008e44 <HAL_I2C_Init+0x260>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	bf94      	ite	ls
 8008c60:	2301      	movls	r3, #1
 8008c62:	2300      	movhi	r3, #0
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	e006      	b.n	8008c76 <HAL_I2C_Init+0x92>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	4a77      	ldr	r2, [pc, #476]	; (8008e48 <HAL_I2C_Init+0x264>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	bf94      	ite	ls
 8008c70:	2301      	movls	r3, #1
 8008c72:	2300      	movhi	r3, #0
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e0db      	b.n	8008e36 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	4a72      	ldr	r2, [pc, #456]	; (8008e4c <HAL_I2C_Init+0x268>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	0c9b      	lsrs	r3, r3, #18
 8008c88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68ba      	ldr	r2, [r7, #8]
 8008c9a:	430a      	orrs	r2, r1
 8008c9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	4a64      	ldr	r2, [pc, #400]	; (8008e40 <HAL_I2C_Init+0x25c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d802      	bhi.n	8008cb8 <HAL_I2C_Init+0xd4>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	e009      	b.n	8008ccc <HAL_I2C_Init+0xe8>
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008cbe:	fb02 f303 	mul.w	r3, r2, r3
 8008cc2:	4a63      	ldr	r2, [pc, #396]	; (8008e50 <HAL_I2C_Init+0x26c>)
 8008cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc8:	099b      	lsrs	r3, r3, #6
 8008cca:	3301      	adds	r3, #1
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	6812      	ldr	r2, [r2, #0]
 8008cd0:	430b      	orrs	r3, r1
 8008cd2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	69db      	ldr	r3, [r3, #28]
 8008cda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008cde:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	4956      	ldr	r1, [pc, #344]	; (8008e40 <HAL_I2C_Init+0x25c>)
 8008ce8:	428b      	cmp	r3, r1
 8008cea:	d80d      	bhi.n	8008d08 <HAL_I2C_Init+0x124>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	1e59      	subs	r1, r3, #1
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	005b      	lsls	r3, r3, #1
 8008cf6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d00:	2b04      	cmp	r3, #4
 8008d02:	bf38      	it	cc
 8008d04:	2304      	movcc	r3, #4
 8008d06:	e04f      	b.n	8008da8 <HAL_I2C_Init+0x1c4>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d111      	bne.n	8008d34 <HAL_I2C_Init+0x150>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	1e58      	subs	r0, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6859      	ldr	r1, [r3, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	005b      	lsls	r3, r3, #1
 8008d1c:	440b      	add	r3, r1
 8008d1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d22:	3301      	adds	r3, #1
 8008d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	bf0c      	ite	eq
 8008d2c:	2301      	moveq	r3, #1
 8008d2e:	2300      	movne	r3, #0
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	e012      	b.n	8008d5a <HAL_I2C_Init+0x176>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	1e58      	subs	r0, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6859      	ldr	r1, [r3, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	440b      	add	r3, r1
 8008d42:	0099      	lsls	r1, r3, #2
 8008d44:	440b      	add	r3, r1
 8008d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	bf0c      	ite	eq
 8008d54:	2301      	moveq	r3, #1
 8008d56:	2300      	movne	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <HAL_I2C_Init+0x17e>
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e022      	b.n	8008da8 <HAL_I2C_Init+0x1c4>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d10e      	bne.n	8008d88 <HAL_I2C_Init+0x1a4>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1e58      	subs	r0, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6859      	ldr	r1, [r3, #4]
 8008d72:	460b      	mov	r3, r1
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	440b      	add	r3, r1
 8008d78:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d86:	e00f      	b.n	8008da8 <HAL_I2C_Init+0x1c4>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	1e58      	subs	r0, r3, #1
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6859      	ldr	r1, [r3, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	009b      	lsls	r3, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	0099      	lsls	r1, r3, #2
 8008d98:	440b      	add	r3, r1
 8008d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d9e:	3301      	adds	r3, #1
 8008da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	6809      	ldr	r1, [r1, #0]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	69da      	ldr	r2, [r3, #28]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	430a      	orrs	r2, r1
 8008dca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008dd6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6911      	ldr	r1, [r2, #16]
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	68d2      	ldr	r2, [r2, #12]
 8008de2:	4311      	orrs	r1, r2
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695a      	ldr	r2, [r3, #20]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	430a      	orrs	r2, r1
 8008e06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f042 0201 	orr.w	r2, r2, #1
 8008e16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	000186a0 	.word	0x000186a0
 8008e44:	001e847f 	.word	0x001e847f
 8008e48:	003d08ff 	.word	0x003d08ff
 8008e4c:	431bde83 	.word	0x431bde83
 8008e50:	10624dd3 	.word	0x10624dd3

08008e54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	461a      	mov	r2, r3
 8008e60:	460b      	mov	r3, r1
 8008e62:	817b      	strh	r3, [r7, #10]
 8008e64:	4613      	mov	r3, r2
 8008e66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e68:	f7fe fbe8 	bl	800763c <HAL_GetTick>
 8008e6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b20      	cmp	r3, #32
 8008e78:	f040 80e0 	bne.w	800903c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	9300      	str	r3, [sp, #0]
 8008e80:	2319      	movs	r3, #25
 8008e82:	2201      	movs	r2, #1
 8008e84:	4970      	ldr	r1, [pc, #448]	; (8009048 <HAL_I2C_Master_Transmit+0x1f4>)
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	f000 fc58 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008e92:	2302      	movs	r3, #2
 8008e94:	e0d3      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_I2C_Master_Transmit+0x50>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e0cc      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d007      	beq.n	8008eca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f042 0201 	orr.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ed8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2221      	movs	r2, #33	; 0x21
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2210      	movs	r2, #16
 8008ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	893a      	ldrh	r2, [r7, #8]
 8008efa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	4a50      	ldr	r2, [pc, #320]	; (800904c <HAL_I2C_Master_Transmit+0x1f8>)
 8008f0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f0c:	8979      	ldrh	r1, [r7, #10]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	6a3a      	ldr	r2, [r7, #32]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 fac2 	bl	800949c <I2C_MasterRequestWrite>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d001      	beq.n	8008f22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e08d      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f22:	2300      	movs	r3, #0
 8008f24:	613b      	str	r3, [r7, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695b      	ldr	r3, [r3, #20]
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	699b      	ldr	r3, [r3, #24]
 8008f34:	613b      	str	r3, [r7, #16]
 8008f36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f38:	e066      	b.n	8009008 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	6a39      	ldr	r1, [r7, #32]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fcd2 	bl	80098e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00d      	beq.n	8008f66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d107      	bne.n	8008f62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e06b      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695b      	ldr	r3, [r3, #20]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b04      	cmp	r3, #4
 8008fa2:	d11b      	bne.n	8008fdc <HAL_I2C_Master_Transmit+0x188>
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d017      	beq.n	8008fdc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	781a      	ldrb	r2, [r3, #0]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	6a39      	ldr	r1, [r7, #32]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f000 fcc2 	bl	800996a <I2C_WaitOnBTFFlagUntilTimeout>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00d      	beq.n	8009008 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d107      	bne.n	8009004 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009002:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e01a      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900c:	2b00      	cmp	r3, #0
 800900e:	d194      	bne.n	8008f3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800901e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2220      	movs	r2, #32
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	e000      	b.n	800903e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800903c:	2302      	movs	r3, #2
  }
}
 800903e:	4618      	mov	r0, r3
 8009040:	3718      	adds	r7, #24
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	00100002 	.word	0x00100002
 800904c:	ffff0000 	.word	0xffff0000

08009050 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b08c      	sub	sp, #48	; 0x30
 8009054:	af02      	add	r7, sp, #8
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	461a      	mov	r2, r3
 800905c:	460b      	mov	r3, r1
 800905e:	817b      	strh	r3, [r7, #10]
 8009060:	4613      	mov	r3, r2
 8009062:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009064:	f7fe faea 	bl	800763c <HAL_GetTick>
 8009068:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b20      	cmp	r3, #32
 8009074:	f040 820b 	bne.w	800948e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	2319      	movs	r3, #25
 800907e:	2201      	movs	r2, #1
 8009080:	497c      	ldr	r1, [pc, #496]	; (8009274 <HAL_I2C_Master_Receive+0x224>)
 8009082:	68f8      	ldr	r0, [r7, #12]
 8009084:	f000 fb5a 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800908e:	2302      	movs	r3, #2
 8009090:	e1fe      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_I2C_Master_Receive+0x50>
 800909c:	2302      	movs	r3, #2
 800909e:	e1f7      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0301 	and.w	r3, r3, #1
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d007      	beq.n	80090c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f042 0201 	orr.w	r2, r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2222      	movs	r2, #34	; 0x22
 80090da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2210      	movs	r2, #16
 80090e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2200      	movs	r2, #0
 80090ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	893a      	ldrh	r2, [r7, #8]
 80090f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	4a5c      	ldr	r2, [pc, #368]	; (8009278 <HAL_I2C_Master_Receive+0x228>)
 8009106:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009108:	8979      	ldrh	r1, [r7, #10]
 800910a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	f000 fa46 	bl	80095a0 <I2C_MasterRequestRead>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e1b8      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009122:	2b00      	cmp	r3, #0
 8009124:	d113      	bne.n	800914e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009126:	2300      	movs	r3, #0
 8009128:	623b      	str	r3, [r7, #32]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	623b      	str	r3, [r7, #32]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	623b      	str	r3, [r7, #32]
 800913a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800914a:	601a      	str	r2, [r3, #0]
 800914c:	e18c      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009152:	2b01      	cmp	r3, #1
 8009154:	d11b      	bne.n	800918e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009166:	2300      	movs	r3, #0
 8009168:	61fb      	str	r3, [r7, #28]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	61fb      	str	r3, [r7, #28]
 800917a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	e16c      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009192:	2b02      	cmp	r3, #2
 8009194:	d11b      	bne.n	80091ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091b6:	2300      	movs	r3, #0
 80091b8:	61bb      	str	r3, [r7, #24]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	61bb      	str	r3, [r7, #24]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	61bb      	str	r3, [r7, #24]
 80091ca:	69bb      	ldr	r3, [r7, #24]
 80091cc:	e14c      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091de:	2300      	movs	r3, #0
 80091e0:	617b      	str	r3, [r7, #20]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80091f4:	e138      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	f200 80f1 	bhi.w	80093e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009204:	2b01      	cmp	r3, #1
 8009206:	d123      	bne.n	8009250 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800920a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f000 fbed 	bl	80099ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009218:	2301      	movs	r3, #1
 800921a:	e139      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	691a      	ldr	r2, [r3, #16]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	1c5a      	adds	r2, r3, #1
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009244:	b29b      	uxth	r3, r3
 8009246:	3b01      	subs	r3, #1
 8009248:	b29a      	uxth	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800924e:	e10b      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009254:	2b02      	cmp	r3, #2
 8009256:	d14e      	bne.n	80092f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925e:	2200      	movs	r2, #0
 8009260:	4906      	ldr	r1, [pc, #24]	; (800927c <HAL_I2C_Master_Receive+0x22c>)
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fa6a 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d008      	beq.n	8009280 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e10e      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
 8009272:	bf00      	nop
 8009274:	00100002 	.word	0x00100002
 8009278:	ffff0000 	.word	0xffff0000
 800927c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681a      	ldr	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	691a      	ldr	r2, [r3, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a2:	1c5a      	adds	r2, r3, #1
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ac:	3b01      	subs	r3, #1
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	b2d2      	uxtb	r2, r2
 80092ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092de:	3b01      	subs	r3, #1
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	3b01      	subs	r3, #1
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092f4:	e0b8      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	2200      	movs	r2, #0
 80092fe:	4966      	ldr	r1, [pc, #408]	; (8009498 <HAL_I2C_Master_Receive+0x448>)
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fa1b 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d001      	beq.n	8009310 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800930c:	2301      	movs	r3, #1
 800930e:	e0bf      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800931e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	b2d2      	uxtb	r2, r2
 800932c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009332:	1c5a      	adds	r2, r3, #1
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009348:	b29b      	uxth	r3, r3
 800934a:	3b01      	subs	r3, #1
 800934c:	b29a      	uxth	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	2200      	movs	r2, #0
 800935a:	494f      	ldr	r1, [pc, #316]	; (8009498 <HAL_I2C_Master_Receive+0x448>)
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f9ed 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e091      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800937a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	691a      	ldr	r2, [r3, #16]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009386:	b2d2      	uxtb	r2, r2
 8009388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	1c5a      	adds	r2, r3, #1
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009398:	3b01      	subs	r3, #1
 800939a:	b29a      	uxth	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	691a      	ldr	r2, [r3, #16]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	b2d2      	uxtb	r2, r2
 80093ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ca:	3b01      	subs	r3, #1
 80093cc:	b29a      	uxth	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093d6:	b29b      	uxth	r3, r3
 80093d8:	3b01      	subs	r3, #1
 80093da:	b29a      	uxth	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093e0:	e042      	b.n	8009468 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 fb00 	bl	80099ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e04c      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	691a      	ldr	r2, [r3, #16]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009400:	b2d2      	uxtb	r2, r2
 8009402:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009412:	3b01      	subs	r3, #1
 8009414:	b29a      	uxth	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800941e:	b29b      	uxth	r3, r3
 8009420:	3b01      	subs	r3, #1
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	f003 0304 	and.w	r3, r3, #4
 8009432:	2b04      	cmp	r3, #4
 8009434:	d118      	bne.n	8009468 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	b2d2      	uxtb	r2, r2
 8009442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009452:	3b01      	subs	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945e:	b29b      	uxth	r3, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800946c:	2b00      	cmp	r3, #0
 800946e:	f47f aec2 	bne.w	80091f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2200      	movs	r2, #0
 800947e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e000      	b.n	8009490 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800948e:	2302      	movs	r3, #2
  }
}
 8009490:	4618      	mov	r0, r3
 8009492:	3728      	adds	r7, #40	; 0x28
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	00010004 	.word	0x00010004

0800949c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	607a      	str	r2, [r7, #4]
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	460b      	mov	r3, r1
 80094aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2b08      	cmp	r3, #8
 80094b6:	d006      	beq.n	80094c6 <I2C_MasterRequestWrite+0x2a>
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d003      	beq.n	80094c6 <I2C_MasterRequestWrite+0x2a>
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094c4:	d108      	bne.n	80094d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	e00b      	b.n	80094f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094dc:	2b12      	cmp	r3, #18
 80094de:	d107      	bne.n	80094f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094fc:	68f8      	ldr	r0, [r7, #12]
 80094fe:	f000 f91d 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00d      	beq.n	8009524 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009516:	d103      	bne.n	8009520 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800951e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009520:	2303      	movs	r3, #3
 8009522:	e035      	b.n	8009590 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800952c:	d108      	bne.n	8009540 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800952e:	897b      	ldrh	r3, [r7, #10]
 8009530:	b2db      	uxtb	r3, r3
 8009532:	461a      	mov	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800953c:	611a      	str	r2, [r3, #16]
 800953e:	e01b      	b.n	8009578 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009540:	897b      	ldrh	r3, [r7, #10]
 8009542:	11db      	asrs	r3, r3, #7
 8009544:	b2db      	uxtb	r3, r3
 8009546:	f003 0306 	and.w	r3, r3, #6
 800954a:	b2db      	uxtb	r3, r3
 800954c:	f063 030f 	orn	r3, r3, #15
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	490e      	ldr	r1, [pc, #56]	; (8009598 <I2C_MasterRequestWrite+0xfc>)
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f000 f943 	bl	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e010      	b.n	8009590 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800956e:	897b      	ldrh	r3, [r7, #10]
 8009570:	b2da      	uxtb	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	4907      	ldr	r1, [pc, #28]	; (800959c <I2C_MasterRequestWrite+0x100>)
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f933 	bl	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	00010008 	.word	0x00010008
 800959c:	00010002 	.word	0x00010002

080095a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af02      	add	r7, sp, #8
 80095a6:	60f8      	str	r0, [r7, #12]
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	603b      	str	r3, [r7, #0]
 80095ac:	460b      	mov	r3, r1
 80095ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d006      	beq.n	80095da <I2C_MasterRequestRead+0x3a>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	d003      	beq.n	80095da <I2C_MasterRequestRead+0x3a>
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095d8:	d108      	bne.n	80095ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	e00b      	b.n	8009604 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f0:	2b11      	cmp	r3, #17
 80095f2:	d107      	bne.n	8009604 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f000 f893 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00d      	beq.n	8009638 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009626:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962a:	d103      	bne.n	8009634 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009632:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e079      	b.n	800972c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009640:	d108      	bne.n	8009654 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009642:	897b      	ldrh	r3, [r7, #10]
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	611a      	str	r2, [r3, #16]
 8009652:	e05f      	b.n	8009714 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009654:	897b      	ldrh	r3, [r7, #10]
 8009656:	11db      	asrs	r3, r3, #7
 8009658:	b2db      	uxtb	r3, r3
 800965a:	f003 0306 	and.w	r3, r3, #6
 800965e:	b2db      	uxtb	r3, r3
 8009660:	f063 030f 	orn	r3, r3, #15
 8009664:	b2da      	uxtb	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4930      	ldr	r1, [pc, #192]	; (8009734 <I2C_MasterRequestRead+0x194>)
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	f000 f8b9 	bl	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d001      	beq.n	8009682 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e054      	b.n	800972c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009682:	897b      	ldrh	r3, [r7, #10]
 8009684:	b2da      	uxtb	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	4929      	ldr	r1, [pc, #164]	; (8009738 <I2C_MasterRequestRead+0x198>)
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 f8a9 	bl	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e044      	b.n	800972c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a2:	2300      	movs	r3, #0
 80096a4:	613b      	str	r3, [r7, #16]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	695b      	ldr	r3, [r3, #20]
 80096ac:	613b      	str	r3, [r7, #16]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699b      	ldr	r3, [r3, #24]
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f831 	bl	800973c <I2C_WaitOnFlagUntilTimeout>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00d      	beq.n	80096fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096ee:	d103      	bne.n	80096f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e017      	b.n	800972c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80096fc:	897b      	ldrh	r3, [r7, #10]
 80096fe:	11db      	asrs	r3, r3, #7
 8009700:	b2db      	uxtb	r3, r3
 8009702:	f003 0306 	and.w	r3, r3, #6
 8009706:	b2db      	uxtb	r3, r3
 8009708:	f063 030e 	orn	r3, r3, #14
 800970c:	b2da      	uxtb	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4907      	ldr	r1, [pc, #28]	; (8009738 <I2C_MasterRequestRead+0x198>)
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 f865 	bl	80097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	00010008 	.word	0x00010008
 8009738:	00010002 	.word	0x00010002

0800973c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b084      	sub	sp, #16
 8009740:	af00      	add	r7, sp, #0
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	60b9      	str	r1, [r7, #8]
 8009746:	603b      	str	r3, [r7, #0]
 8009748:	4613      	mov	r3, r2
 800974a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800974c:	e025      	b.n	800979a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009754:	d021      	beq.n	800979a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009756:	f7fd ff71 	bl	800763c <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	1ad3      	subs	r3, r2, r3
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	429a      	cmp	r2, r3
 8009764:	d302      	bcc.n	800976c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d116      	bne.n	800979a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009786:	f043 0220 	orr.w	r2, r3, #32
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e023      	b.n	80097e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	0c1b      	lsrs	r3, r3, #16
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d10d      	bne.n	80097c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	43da      	mvns	r2, r3
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	bf0c      	ite	eq
 80097b6:	2301      	moveq	r3, #1
 80097b8:	2300      	movne	r3, #0
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	e00c      	b.n	80097da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	43da      	mvns	r2, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4013      	ands	r3, r2
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	bf0c      	ite	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	2300      	movne	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	461a      	mov	r2, r3
 80097da:	79fb      	ldrb	r3, [r7, #7]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d0b6      	beq.n	800974e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
 80097f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097f8:	e051      	b.n	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009808:	d123      	bne.n	8009852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009818:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009822:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2220      	movs	r2, #32
 800982e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983e:	f043 0204 	orr.w	r2, r3, #4
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	e046      	b.n	80098e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009858:	d021      	beq.n	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800985a:	f7fd feef 	bl	800763c <HAL_GetTick>
 800985e:	4602      	mov	r2, r0
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	1ad3      	subs	r3, r2, r3
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	429a      	cmp	r2, r3
 8009868:	d302      	bcc.n	8009870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d116      	bne.n	800989e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2200      	movs	r2, #0
 8009874:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2220      	movs	r2, #32
 800987a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988a:	f043 0220 	orr.w	r2, r3, #32
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2200      	movs	r2, #0
 8009896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e020      	b.n	80098e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	0c1b      	lsrs	r3, r3, #16
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d10c      	bne.n	80098c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	695b      	ldr	r3, [r3, #20]
 80098ae:	43da      	mvns	r2, r3
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	4013      	ands	r3, r2
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	bf14      	ite	ne
 80098ba:	2301      	movne	r3, #1
 80098bc:	2300      	moveq	r3, #0
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	e00b      	b.n	80098da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	43da      	mvns	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4013      	ands	r3, r2
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bf14      	ite	ne
 80098d4:	2301      	movne	r3, #1
 80098d6:	2300      	moveq	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d18d      	bne.n	80097fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80098f4:	e02d      	b.n	8009952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 f8ce 	bl	8009a98 <I2C_IsAcknowledgeFailed>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	e02d      	b.n	8009962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990c:	d021      	beq.n	8009952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800990e:	f7fd fe95 	bl	800763c <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	429a      	cmp	r2, r3
 800991c:	d302      	bcc.n	8009924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d116      	bne.n	8009952 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993e:	f043 0220 	orr.w	r2, r3, #32
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e007      	b.n	8009962 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995c:	2b80      	cmp	r3, #128	; 0x80
 800995e:	d1ca      	bne.n	80098f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b084      	sub	sp, #16
 800996e:	af00      	add	r7, sp, #0
 8009970:	60f8      	str	r0, [r7, #12]
 8009972:	60b9      	str	r1, [r7, #8]
 8009974:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009976:	e02d      	b.n	80099d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009978:	68f8      	ldr	r0, [r7, #12]
 800997a:	f000 f88d 	bl	8009a98 <I2C_IsAcknowledgeFailed>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e02d      	b.n	80099e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800998e:	d021      	beq.n	80099d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009990:	f7fd fe54 	bl	800763c <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	429a      	cmp	r2, r3
 800999e:	d302      	bcc.n	80099a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d116      	bne.n	80099d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2200      	movs	r2, #0
 80099aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c0:	f043 0220 	orr.w	r2, r3, #32
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	e007      	b.n	80099e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f003 0304 	and.w	r3, r3, #4
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d1ca      	bne.n	8009978 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099e2:	2300      	movs	r3, #0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3710      	adds	r7, #16
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099f8:	e042      	b.n	8009a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	695b      	ldr	r3, [r3, #20]
 8009a00:	f003 0310 	and.w	r3, r3, #16
 8009a04:	2b10      	cmp	r3, #16
 8009a06:	d119      	bne.n	8009a3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f06f 0210 	mvn.w	r2, #16
 8009a10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2220      	movs	r2, #32
 8009a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e029      	b.n	8009a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a3c:	f7fd fdfe 	bl	800763c <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d302      	bcc.n	8009a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d116      	bne.n	8009a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a6c:	f043 0220 	orr.w	r2, r3, #32
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e007      	b.n	8009a90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695b      	ldr	r3, [r3, #20]
 8009a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a8a:	2b40      	cmp	r3, #64	; 0x40
 8009a8c:	d1b5      	bne.n	80099fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009aae:	d11b      	bne.n	8009ae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad4:	f043 0204 	orr.w	r2, r3, #4
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	e000      	b.n	8009aea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009ae8:	2300      	movs	r3, #0
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr
	...

08009af8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009afe:	2300      	movs	r3, #0
 8009b00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009b02:	2300      	movs	r3, #0
 8009b04:	603b      	str	r3, [r7, #0]
 8009b06:	4b20      	ldr	r3, [pc, #128]	; (8009b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	4a1f      	ldr	r2, [pc, #124]	; (8009b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b10:	6413      	str	r3, [r2, #64]	; 0x40
 8009b12:	4b1d      	ldr	r3, [pc, #116]	; (8009b88 <HAL_PWREx_EnableOverDrive+0x90>)
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b1a:	603b      	str	r3, [r7, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009b1e:	4b1b      	ldr	r3, [pc, #108]	; (8009b8c <HAL_PWREx_EnableOverDrive+0x94>)
 8009b20:	2201      	movs	r2, #1
 8009b22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b24:	f7fd fd8a 	bl	800763c <HAL_GetTick>
 8009b28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b2a:	e009      	b.n	8009b40 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b2c:	f7fd fd86 	bl	800763c <HAL_GetTick>
 8009b30:	4602      	mov	r2, r0
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b3a:	d901      	bls.n	8009b40 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e01f      	b.n	8009b80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009b40:	4b13      	ldr	r3, [pc, #76]	; (8009b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b4c:	d1ee      	bne.n	8009b2c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009b4e:	4b11      	ldr	r3, [pc, #68]	; (8009b94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b54:	f7fd fd72 	bl	800763c <HAL_GetTick>
 8009b58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b5a:	e009      	b.n	8009b70 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009b5c:	f7fd fd6e 	bl	800763c <HAL_GetTick>
 8009b60:	4602      	mov	r2, r0
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	1ad3      	subs	r3, r2, r3
 8009b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b6a:	d901      	bls.n	8009b70 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e007      	b.n	8009b80 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009b70:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <HAL_PWREx_EnableOverDrive+0x98>)
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009b7c:	d1ee      	bne.n	8009b5c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8009b7e:	2300      	movs	r3, #0
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3708      	adds	r7, #8
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	40023800 	.word	0x40023800
 8009b8c:	420e0040 	.word	0x420e0040
 8009b90:	40007000 	.word	0x40007000
 8009b94:	420e0044 	.word	0x420e0044

08009b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	e0cc      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009bac:	4b68      	ldr	r3, [pc, #416]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 030f 	and.w	r3, r3, #15
 8009bb4:	683a      	ldr	r2, [r7, #0]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d90c      	bls.n	8009bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bba:	4b65      	ldr	r3, [pc, #404]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bbc:	683a      	ldr	r2, [r7, #0]
 8009bbe:	b2d2      	uxtb	r2, r2
 8009bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bc2:	4b63      	ldr	r3, [pc, #396]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f003 030f 	and.w	r3, r3, #15
 8009bca:	683a      	ldr	r2, [r7, #0]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d001      	beq.n	8009bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	e0b8      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d020      	beq.n	8009c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d005      	beq.n	8009bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009bec:	4b59      	ldr	r3, [pc, #356]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	4a58      	ldr	r2, [pc, #352]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0308 	and.w	r3, r3, #8
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d005      	beq.n	8009c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009c04:	4b53      	ldr	r3, [pc, #332]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c06:	689b      	ldr	r3, [r3, #8]
 8009c08:	4a52      	ldr	r2, [pc, #328]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009c10:	4b50      	ldr	r3, [pc, #320]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	689b      	ldr	r3, [r3, #8]
 8009c1c:	494d      	ldr	r1, [pc, #308]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f003 0301 	and.w	r3, r3, #1
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d044      	beq.n	8009cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	685b      	ldr	r3, [r3, #4]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d107      	bne.n	8009c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009c36:	4b47      	ldr	r3, [pc, #284]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d119      	bne.n	8009c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e07f      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d003      	beq.n	8009c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d107      	bne.n	8009c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009c56:	4b3f      	ldr	r3, [pc, #252]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d109      	bne.n	8009c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e06f      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c66:	4b3b      	ldr	r3, [pc, #236]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f003 0302 	and.w	r3, r3, #2
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e067      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009c76:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	f023 0203 	bic.w	r2, r3, #3
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4934      	ldr	r1, [pc, #208]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009c88:	f7fd fcd8 	bl	800763c <HAL_GetTick>
 8009c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009c8e:	e00a      	b.n	8009ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009c90:	f7fd fcd4 	bl	800763c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e04f      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ca6:	4b2b      	ldr	r3, [pc, #172]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	f003 020c 	and.w	r2, r3, #12
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d1eb      	bne.n	8009c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009cb8:	4b25      	ldr	r3, [pc, #148]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f003 030f 	and.w	r3, r3, #15
 8009cc0:	683a      	ldr	r2, [r7, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d20c      	bcs.n	8009ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009cc6:	4b22      	ldr	r3, [pc, #136]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cc8:	683a      	ldr	r2, [r7, #0]
 8009cca:	b2d2      	uxtb	r2, r2
 8009ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009cce:	4b20      	ldr	r3, [pc, #128]	; (8009d50 <HAL_RCC_ClockConfig+0x1b8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f003 030f 	and.w	r3, r3, #15
 8009cd6:	683a      	ldr	r2, [r7, #0]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d001      	beq.n	8009ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e032      	b.n	8009d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f003 0304 	and.w	r3, r3, #4
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d008      	beq.n	8009cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009cec:	4b19      	ldr	r3, [pc, #100]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	4916      	ldr	r1, [pc, #88]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d009      	beq.n	8009d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009d0a:	4b12      	ldr	r3, [pc, #72]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d0c:	689b      	ldr	r3, [r3, #8]
 8009d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	00db      	lsls	r3, r3, #3
 8009d18:	490e      	ldr	r1, [pc, #56]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009d1e:	f000 f821 	bl	8009d64 <HAL_RCC_GetSysClockFreq>
 8009d22:	4601      	mov	r1, r0
 8009d24:	4b0b      	ldr	r3, [pc, #44]	; (8009d54 <HAL_RCC_ClockConfig+0x1bc>)
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	091b      	lsrs	r3, r3, #4
 8009d2a:	f003 030f 	and.w	r3, r3, #15
 8009d2e:	4a0a      	ldr	r2, [pc, #40]	; (8009d58 <HAL_RCC_ClockConfig+0x1c0>)
 8009d30:	5cd3      	ldrb	r3, [r2, r3]
 8009d32:	fa21 f303 	lsr.w	r3, r1, r3
 8009d36:	4a09      	ldr	r2, [pc, #36]	; (8009d5c <HAL_RCC_ClockConfig+0x1c4>)
 8009d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <HAL_RCC_ClockConfig+0x1c8>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7fd fc38 	bl	80075b4 <HAL_InitTick>

  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	40023c00 	.word	0x40023c00
 8009d54:	40023800 	.word	0x40023800
 8009d58:	0801850c 	.word	0x0801850c
 8009d5c:	20000000 	.word	0x20000000
 8009d60:	20000004 	.word	0x20000004

08009d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	2300      	movs	r3, #0
 8009d70:	60fb      	str	r3, [r7, #12]
 8009d72:	2300      	movs	r3, #0
 8009d74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009d76:	2300      	movs	r3, #0
 8009d78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009d7a:	4b63      	ldr	r3, [pc, #396]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 030c 	and.w	r3, r3, #12
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d007      	beq.n	8009d96 <HAL_RCC_GetSysClockFreq+0x32>
 8009d86:	2b08      	cmp	r3, #8
 8009d88:	d008      	beq.n	8009d9c <HAL_RCC_GetSysClockFreq+0x38>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	f040 80b4 	bne.w	8009ef8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009d90:	4b5e      	ldr	r3, [pc, #376]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009d92:	60bb      	str	r3, [r7, #8]
       break;
 8009d94:	e0b3      	b.n	8009efe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009d96:	4b5d      	ldr	r3, [pc, #372]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009d98:	60bb      	str	r3, [r7, #8]
      break;
 8009d9a:	e0b0      	b.n	8009efe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009d9c:	4b5a      	ldr	r3, [pc, #360]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009da4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009da6:	4b58      	ldr	r3, [pc, #352]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d04a      	beq.n	8009e48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009db2:	4b55      	ldr	r3, [pc, #340]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	099b      	lsrs	r3, r3, #6
 8009db8:	f04f 0400 	mov.w	r4, #0
 8009dbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009dc0:	f04f 0200 	mov.w	r2, #0
 8009dc4:	ea03 0501 	and.w	r5, r3, r1
 8009dc8:	ea04 0602 	and.w	r6, r4, r2
 8009dcc:	4629      	mov	r1, r5
 8009dce:	4632      	mov	r2, r6
 8009dd0:	f04f 0300 	mov.w	r3, #0
 8009dd4:	f04f 0400 	mov.w	r4, #0
 8009dd8:	0154      	lsls	r4, r2, #5
 8009dda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009dde:	014b      	lsls	r3, r1, #5
 8009de0:	4619      	mov	r1, r3
 8009de2:	4622      	mov	r2, r4
 8009de4:	1b49      	subs	r1, r1, r5
 8009de6:	eb62 0206 	sbc.w	r2, r2, r6
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	f04f 0400 	mov.w	r4, #0
 8009df2:	0194      	lsls	r4, r2, #6
 8009df4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009df8:	018b      	lsls	r3, r1, #6
 8009dfa:	1a5b      	subs	r3, r3, r1
 8009dfc:	eb64 0402 	sbc.w	r4, r4, r2
 8009e00:	f04f 0100 	mov.w	r1, #0
 8009e04:	f04f 0200 	mov.w	r2, #0
 8009e08:	00e2      	lsls	r2, r4, #3
 8009e0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009e0e:	00d9      	lsls	r1, r3, #3
 8009e10:	460b      	mov	r3, r1
 8009e12:	4614      	mov	r4, r2
 8009e14:	195b      	adds	r3, r3, r5
 8009e16:	eb44 0406 	adc.w	r4, r4, r6
 8009e1a:	f04f 0100 	mov.w	r1, #0
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	02a2      	lsls	r2, r4, #10
 8009e24:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009e28:	0299      	lsls	r1, r3, #10
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	4621      	mov	r1, r4
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f04f 0400 	mov.w	r4, #0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	4623      	mov	r3, r4
 8009e3c:	f7f6 ff3c 	bl	8000cb8 <__aeabi_uldivmod>
 8009e40:	4603      	mov	r3, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	e049      	b.n	8009edc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009e48:	4b2f      	ldr	r3, [pc, #188]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	099b      	lsrs	r3, r3, #6
 8009e4e:	f04f 0400 	mov.w	r4, #0
 8009e52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009e56:	f04f 0200 	mov.w	r2, #0
 8009e5a:	ea03 0501 	and.w	r5, r3, r1
 8009e5e:	ea04 0602 	and.w	r6, r4, r2
 8009e62:	4629      	mov	r1, r5
 8009e64:	4632      	mov	r2, r6
 8009e66:	f04f 0300 	mov.w	r3, #0
 8009e6a:	f04f 0400 	mov.w	r4, #0
 8009e6e:	0154      	lsls	r4, r2, #5
 8009e70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009e74:	014b      	lsls	r3, r1, #5
 8009e76:	4619      	mov	r1, r3
 8009e78:	4622      	mov	r2, r4
 8009e7a:	1b49      	subs	r1, r1, r5
 8009e7c:	eb62 0206 	sbc.w	r2, r2, r6
 8009e80:	f04f 0300 	mov.w	r3, #0
 8009e84:	f04f 0400 	mov.w	r4, #0
 8009e88:	0194      	lsls	r4, r2, #6
 8009e8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009e8e:	018b      	lsls	r3, r1, #6
 8009e90:	1a5b      	subs	r3, r3, r1
 8009e92:	eb64 0402 	sbc.w	r4, r4, r2
 8009e96:	f04f 0100 	mov.w	r1, #0
 8009e9a:	f04f 0200 	mov.w	r2, #0
 8009e9e:	00e2      	lsls	r2, r4, #3
 8009ea0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009ea4:	00d9      	lsls	r1, r3, #3
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	195b      	adds	r3, r3, r5
 8009eac:	eb44 0406 	adc.w	r4, r4, r6
 8009eb0:	f04f 0100 	mov.w	r1, #0
 8009eb4:	f04f 0200 	mov.w	r2, #0
 8009eb8:	02a2      	lsls	r2, r4, #10
 8009eba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009ebe:	0299      	lsls	r1, r3, #10
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4614      	mov	r4, r2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	4621      	mov	r1, r4
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f04f 0400 	mov.w	r4, #0
 8009ece:	461a      	mov	r2, r3
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	f7f6 fef1 	bl	8000cb8 <__aeabi_uldivmod>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	460c      	mov	r4, r1
 8009eda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009edc:	4b0a      	ldr	r3, [pc, #40]	; (8009f08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	0c1b      	lsrs	r3, r3, #16
 8009ee2:	f003 0303 	and.w	r3, r3, #3
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	005b      	lsls	r3, r3, #1
 8009eea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ef4:	60bb      	str	r3, [r7, #8]
      break;
 8009ef6:	e002      	b.n	8009efe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009ef8:	4b04      	ldr	r3, [pc, #16]	; (8009f0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8009efa:	60bb      	str	r3, [r7, #8]
      break;
 8009efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009efe:	68bb      	ldr	r3, [r7, #8]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3714      	adds	r7, #20
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f08:	40023800 	.word	0x40023800
 8009f0c:	00f42400 	.word	0x00f42400

08009f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009f14:	4b03      	ldr	r3, [pc, #12]	; (8009f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8009f16:	681b      	ldr	r3, [r3, #0]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20000000 	.word	0x20000000

08009f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009f2c:	f7ff fff0 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f30:	4601      	mov	r1, r0
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	0a9b      	lsrs	r3, r3, #10
 8009f38:	f003 0307 	and.w	r3, r3, #7
 8009f3c:	4a03      	ldr	r2, [pc, #12]	; (8009f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009f3e:	5cd3      	ldrb	r3, [r2, r3]
 8009f40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	40023800 	.word	0x40023800
 8009f4c:	0801851c 	.word	0x0801851c

08009f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009f54:	f7ff ffdc 	bl	8009f10 <HAL_RCC_GetHCLKFreq>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	0b5b      	lsrs	r3, r3, #13
 8009f60:	f003 0307 	and.w	r3, r3, #7
 8009f64:	4a03      	ldr	r2, [pc, #12]	; (8009f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009f66:	5cd3      	ldrb	r3, [r2, r3]
 8009f68:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	40023800 	.word	0x40023800
 8009f74:	0801851c 	.word	0x0801851c

08009f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8009f90:	2300      	movs	r3, #0
 8009f92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00a      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009fa0:	4b66      	ldr	r3, [pc, #408]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fa6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fae:	4963      	ldr	r1, [pc, #396]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8009fc2:	4b5e      	ldr	r3, [pc, #376]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009fc8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd0:	495a      	ldr	r1, [pc, #360]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f003 0301 	and.w	r3, r3, #1
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10b      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d105      	bne.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d075      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ffc:	4b50      	ldr	r3, [pc, #320]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a002:	f7fd fb1b 	bl	800763c <HAL_GetTick>
 800a006:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a008:	e008      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a00a:	f7fd fb17 	bl	800763c <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	2b02      	cmp	r3, #2
 800a016:	d901      	bls.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a018:	2303      	movs	r3, #3
 800a01a:	e1dc      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a01c:	4b47      	ldr	r3, [pc, #284]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d1f0      	bne.n	800a00a <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	019a      	lsls	r2, r3, #6
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	071b      	lsls	r3, r3, #28
 800a040:	493e      	ldr	r1, [pc, #248]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a042:	4313      	orrs	r3, r2
 800a044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 0302 	and.w	r3, r3, #2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d01f      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800a054:	4b39      	ldr	r3, [pc, #228]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a05a:	0f1b      	lsrs	r3, r3, #28
 800a05c:	f003 0307 	and.w	r3, r3, #7
 800a060:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	019a      	lsls	r2, r3, #6
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	061b      	lsls	r3, r3, #24
 800a06e:	431a      	orrs	r2, r3
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	071b      	lsls	r3, r3, #28
 800a074:	4931      	ldr	r1, [pc, #196]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a076:	4313      	orrs	r3, r2
 800a078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800a07c:	4b2f      	ldr	r3, [pc, #188]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a07e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a082:	f023 021f 	bic.w	r2, r3, #31
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	3b01      	subs	r3, #1
 800a08c:	492b      	ldr	r1, [pc, #172]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d00d      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	019a      	lsls	r2, r3, #6
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	061b      	lsls	r3, r3, #24
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	071b      	lsls	r3, r3, #28
 800a0b4:	4921      	ldr	r1, [pc, #132]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a0bc:	4b20      	ldr	r3, [pc, #128]	; (800a140 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a0c2:	f7fd fabb 	bl	800763c <HAL_GetTick>
 800a0c6:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a0c8:	e008      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a0ca:	f7fd fab7 	bl	800763c <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e17c      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d0f0      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d112      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10c      	bne.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f000 80ce 	beq.w	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800a112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a116:	f040 80c8 	bne.w	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800a11a:	4b0a      	ldr	r3, [pc, #40]	; (800a144 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a120:	f7fd fa8c 	bl	800763c <HAL_GetTick>
 800a124:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a126:	e00f      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a128:	f7fd fa88 	bl	800763c <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	2b02      	cmp	r3, #2
 800a134:	d908      	bls.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a136:	2303      	movs	r3, #3
 800a138:	e14d      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800a13a:	bf00      	nop
 800a13c:	40023800 	.word	0x40023800
 800a140:	42470068 	.word	0x42470068
 800a144:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800a148:	4ba5      	ldr	r3, [pc, #660]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a154:	d0e8      	beq.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f003 0304 	and.w	r3, r3, #4
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d02e      	beq.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a162:	4b9f      	ldr	r3, [pc, #636]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a168:	0c1b      	lsrs	r3, r3, #16
 800a16a:	f003 0303 	and.w	r3, r3, #3
 800a16e:	3301      	adds	r3, #1
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a174:	4b9a      	ldr	r3, [pc, #616]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a17a:	0f1b      	lsrs	r3, r3, #28
 800a17c:	f003 0307 	and.w	r3, r3, #7
 800a180:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	691b      	ldr	r3, [r3, #16]
 800a186:	019a      	lsls	r2, r3, #6
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	085b      	lsrs	r3, r3, #1
 800a18c:	3b01      	subs	r3, #1
 800a18e:	041b      	lsls	r3, r3, #16
 800a190:	431a      	orrs	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	699b      	ldr	r3, [r3, #24]
 800a196:	061b      	lsls	r3, r3, #24
 800a198:	431a      	orrs	r2, r3
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	071b      	lsls	r3, r3, #28
 800a19e:	4990      	ldr	r1, [pc, #576]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800a1a6:	4b8e      	ldr	r3, [pc, #568]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	021b      	lsls	r3, r3, #8
 800a1b8:	4989      	ldr	r1, [pc, #548]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0308 	and.w	r3, r3, #8
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d02c      	beq.n	800a226 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800a1cc:	4b84      	ldr	r3, [pc, #528]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1d2:	0c1b      	lsrs	r3, r3, #16
 800a1d4:	f003 0303 	and.w	r3, r3, #3
 800a1d8:	3301      	adds	r3, #1
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a1de:	4b80      	ldr	r3, [pc, #512]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e4:	0e1b      	lsrs	r3, r3, #24
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	019a      	lsls	r2, r3, #6
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	085b      	lsrs	r3, r3, #1
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	041b      	lsls	r3, r3, #16
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	061b      	lsls	r3, r3, #24
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	69db      	ldr	r3, [r3, #28]
 800a206:	071b      	lsls	r3, r3, #28
 800a208:	4975      	ldr	r1, [pc, #468]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800a210:	4b73      	ldr	r3, [pc, #460]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21e:	4970      	ldr	r1, [pc, #448]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a220:	4313      	orrs	r3, r2
 800a222:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d024      	beq.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800a236:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a23a:	d11f      	bne.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800a23c:	4b68      	ldr	r3, [pc, #416]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a23e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a242:	0e1b      	lsrs	r3, r3, #24
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800a24a:	4b65      	ldr	r3, [pc, #404]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a24c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a250:	0f1b      	lsrs	r3, r3, #28
 800a252:	f003 0307 	and.w	r3, r3, #7
 800a256:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	019a      	lsls	r2, r3, #6
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	695b      	ldr	r3, [r3, #20]
 800a262:	085b      	lsrs	r3, r3, #1
 800a264:	3b01      	subs	r3, #1
 800a266:	041b      	lsls	r3, r3, #16
 800a268:	431a      	orrs	r2, r3
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	061b      	lsls	r3, r3, #24
 800a26e:	431a      	orrs	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	071b      	lsls	r3, r3, #28
 800a274:	495a      	ldr	r1, [pc, #360]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a276:	4313      	orrs	r3, r2
 800a278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800a27c:	4b59      	ldr	r3, [pc, #356]	; (800a3e4 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800a27e:	2201      	movs	r2, #1
 800a280:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a282:	f7fd f9db 	bl	800763c <HAL_GetTick>
 800a286:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a288:	e008      	b.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800a28a:	f7fd f9d7 	bl	800763c <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d901      	bls.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e09c      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800a29c:	4b50      	ldr	r3, [pc, #320]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a8:	d1ef      	bne.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f000 8083 	beq.w	800a3be <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	60bb      	str	r3, [r7, #8]
 800a2bc:	4b48      	ldr	r3, [pc, #288]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c0:	4a47      	ldr	r2, [pc, #284]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2c6:	6413      	str	r3, [r2, #64]	; 0x40
 800a2c8:	4b45      	ldr	r3, [pc, #276]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a2d4:	4b44      	ldr	r3, [pc, #272]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a43      	ldr	r2, [pc, #268]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a2da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2de:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a2e0:	f7fd f9ac 	bl	800763c <HAL_GetTick>
 800a2e4:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a2e6:	e008      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a2e8:	f7fd f9a8 	bl	800763c <HAL_GetTick>
 800a2ec:	4602      	mov	r2, r0
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d901      	bls.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e06d      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a2fa:	4b3b      	ldr	r3, [pc, #236]	; (800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0f0      	beq.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a306:	4b36      	ldr	r3, [pc, #216]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a30e:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d02f      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a31e:	69ba      	ldr	r2, [r7, #24]
 800a320:	429a      	cmp	r2, r3
 800a322:	d028      	beq.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a324:	4b2e      	ldr	r3, [pc, #184]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a32c:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a32e:	4b2f      	ldr	r3, [pc, #188]	; (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a330:	2201      	movs	r2, #1
 800a332:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a334:	4b2d      	ldr	r3, [pc, #180]	; (800a3ec <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a33a:	4a29      	ldr	r2, [pc, #164]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a340:	4b27      	ldr	r3, [pc, #156]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d114      	bne.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a34c:	f7fd f976 	bl	800763c <HAL_GetTick>
 800a350:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a352:	e00a      	b.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a354:	f7fd f972 	bl	800763c <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	69fb      	ldr	r3, [r7, #28]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a362:	4293      	cmp	r3, r2
 800a364:	d901      	bls.n	800a36a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e035      	b.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a36a:	4b1d      	ldr	r3, [pc, #116]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a36c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0ee      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a37e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a382:	d10d      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800a384:	4b16      	ldr	r3, [pc, #88]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a386:	689b      	ldr	r3, [r3, #8]
 800a388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a398:	4911      	ldr	r1, [pc, #68]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a39a:	4313      	orrs	r3, r2
 800a39c:	608b      	str	r3, [r1, #8]
 800a39e:	e005      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x434>
 800a3a0:	4b0f      	ldr	r3, [pc, #60]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	4a0e      	ldr	r2, [pc, #56]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a3aa:	6093      	str	r3, [r2, #8]
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3b8:	4909      	ldr	r1, [pc, #36]	; (800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0310 	and.w	r3, r3, #16
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d004      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a3d0:	4b07      	ldr	r3, [pc, #28]	; (800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800a3d2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3720      	adds	r7, #32
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	40023800 	.word	0x40023800
 800a3e4:	42470070 	.word	0x42470070
 800a3e8:	40007000 	.word	0x40007000
 800a3ec:	42470e40 	.word	0x42470e40
 800a3f0:	424711e0 	.word	0x424711e0

0800a3f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b086      	sub	sp, #24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d075      	beq.n	800a4f8 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a40c:	4ba2      	ldr	r3, [pc, #648]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 030c 	and.w	r3, r3, #12
 800a414:	2b04      	cmp	r3, #4
 800a416:	d00c      	beq.n	800a432 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a418:	4b9f      	ldr	r3, [pc, #636]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800a420:	2b08      	cmp	r3, #8
 800a422:	d112      	bne.n	800a44a <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a424:	4b9c      	ldr	r3, [pc, #624]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a430:	d10b      	bne.n	800a44a <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a432:	4b99      	ldr	r3, [pc, #612]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d05b      	beq.n	800a4f6 <HAL_RCC_OscConfig+0x102>
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d157      	bne.n	800a4f6 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	e20b      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a452:	d106      	bne.n	800a462 <HAL_RCC_OscConfig+0x6e>
 800a454:	4b90      	ldr	r3, [pc, #576]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a8f      	ldr	r2, [pc, #572]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a45a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	e01d      	b.n	800a49e <HAL_RCC_OscConfig+0xaa>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a46a:	d10c      	bne.n	800a486 <HAL_RCC_OscConfig+0x92>
 800a46c:	4b8a      	ldr	r3, [pc, #552]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a89      	ldr	r2, [pc, #548]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a472:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	4b87      	ldr	r3, [pc, #540]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a86      	ldr	r2, [pc, #536]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a47e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	e00b      	b.n	800a49e <HAL_RCC_OscConfig+0xaa>
 800a486:	4b84      	ldr	r3, [pc, #528]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a83      	ldr	r2, [pc, #524]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a48c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	4b81      	ldr	r3, [pc, #516]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a80      	ldr	r2, [pc, #512]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a498:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a49c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d013      	beq.n	800a4ce <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4a6:	f7fd f8c9 	bl	800763c <HAL_GetTick>
 800a4aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4ac:	e008      	b.n	800a4c0 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4ae:	f7fd f8c5 	bl	800763c <HAL_GetTick>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	1ad3      	subs	r3, r2, r3
 800a4b8:	2b64      	cmp	r3, #100	; 0x64
 800a4ba:	d901      	bls.n	800a4c0 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e1d0      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4c0:	4b75      	ldr	r3, [pc, #468]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0f0      	beq.n	800a4ae <HAL_RCC_OscConfig+0xba>
 800a4cc:	e014      	b.n	800a4f8 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4ce:	f7fd f8b5 	bl	800763c <HAL_GetTick>
 800a4d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4d4:	e008      	b.n	800a4e8 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4d6:	f7fd f8b1 	bl	800763c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	2b64      	cmp	r3, #100	; 0x64
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e1bc      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a4e8:	4b6b      	ldr	r3, [pc, #428]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1f0      	bne.n	800a4d6 <HAL_RCC_OscConfig+0xe2>
 800a4f4:	e000      	b.n	800a4f8 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4f6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b00      	cmp	r3, #0
 800a502:	d063      	beq.n	800a5cc <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a504:	4b64      	ldr	r3, [pc, #400]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f003 030c 	and.w	r3, r3, #12
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00b      	beq.n	800a528 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a510:	4b61      	ldr	r3, [pc, #388]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800a518:	2b08      	cmp	r3, #8
 800a51a:	d11c      	bne.n	800a556 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a51c:	4b5e      	ldr	r3, [pc, #376]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d116      	bne.n	800a556 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a528:	4b5b      	ldr	r3, [pc, #364]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f003 0302 	and.w	r3, r3, #2
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <HAL_RCC_OscConfig+0x14c>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d001      	beq.n	800a540 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e190      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a540:	4b55      	ldr	r3, [pc, #340]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	00db      	lsls	r3, r3, #3
 800a54e:	4952      	ldr	r1, [pc, #328]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a550:	4313      	orrs	r3, r2
 800a552:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a554:	e03a      	b.n	800a5cc <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d020      	beq.n	800a5a0 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a55e:	4b4f      	ldr	r3, [pc, #316]	; (800a69c <HAL_RCC_OscConfig+0x2a8>)
 800a560:	2201      	movs	r2, #1
 800a562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a564:	f7fd f86a 	bl	800763c <HAL_GetTick>
 800a568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a56a:	e008      	b.n	800a57e <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a56c:	f7fd f866 	bl	800763c <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	2b02      	cmp	r3, #2
 800a578:	d901      	bls.n	800a57e <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800a57a:	2303      	movs	r3, #3
 800a57c:	e171      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a57e:	4b46      	ldr	r3, [pc, #280]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	2b00      	cmp	r3, #0
 800a588:	d0f0      	beq.n	800a56c <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a58a:	4b43      	ldr	r3, [pc, #268]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	00db      	lsls	r3, r3, #3
 800a598:	493f      	ldr	r1, [pc, #252]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	600b      	str	r3, [r1, #0]
 800a59e:	e015      	b.n	800a5cc <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5a0:	4b3e      	ldr	r3, [pc, #248]	; (800a69c <HAL_RCC_OscConfig+0x2a8>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5a6:	f7fd f849 	bl	800763c <HAL_GetTick>
 800a5aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5ac:	e008      	b.n	800a5c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5ae:	f7fd f845 	bl	800763c <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	2b02      	cmp	r3, #2
 800a5ba:	d901      	bls.n	800a5c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e150      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5c0:	4b35      	ldr	r3, [pc, #212]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0302 	and.w	r3, r3, #2
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1f0      	bne.n	800a5ae <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0308 	and.w	r3, r3, #8
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d030      	beq.n	800a63a <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d016      	beq.n	800a60e <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a5e0:	4b2f      	ldr	r3, [pc, #188]	; (800a6a0 <HAL_RCC_OscConfig+0x2ac>)
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5e6:	f7fd f829 	bl	800763c <HAL_GetTick>
 800a5ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a5ec:	e008      	b.n	800a600 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a5ee:	f7fd f825 	bl	800763c <HAL_GetTick>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	2b02      	cmp	r3, #2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e130      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a600:	4b25      	ldr	r3, [pc, #148]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0f0      	beq.n	800a5ee <HAL_RCC_OscConfig+0x1fa>
 800a60c:	e015      	b.n	800a63a <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a60e:	4b24      	ldr	r3, [pc, #144]	; (800a6a0 <HAL_RCC_OscConfig+0x2ac>)
 800a610:	2200      	movs	r2, #0
 800a612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a614:	f7fd f812 	bl	800763c <HAL_GetTick>
 800a618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a61a:	e008      	b.n	800a62e <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a61c:	f7fd f80e 	bl	800763c <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	2b02      	cmp	r3, #2
 800a628:	d901      	bls.n	800a62e <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800a62a:	2303      	movs	r3, #3
 800a62c:	e119      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a62e:	4b1a      	ldr	r3, [pc, #104]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a632:	f003 0302 	and.w	r3, r3, #2
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1f0      	bne.n	800a61c <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 809f 	beq.w	800a786 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a648:	2300      	movs	r3, #0
 800a64a:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a64c:	4b12      	ldr	r3, [pc, #72]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a64e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10f      	bne.n	800a678 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a658:	2300      	movs	r3, #0
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a65e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a660:	4a0d      	ldr	r2, [pc, #52]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a666:	6413      	str	r3, [r2, #64]	; 0x40
 800a668:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <HAL_RCC_OscConfig+0x2a4>)
 800a66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a670:	60fb      	str	r3, [r7, #12]
 800a672:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a674:	2301      	movs	r3, #1
 800a676:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a678:	4b0a      	ldr	r3, [pc, #40]	; (800a6a4 <HAL_RCC_OscConfig+0x2b0>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a680:	2b00      	cmp	r3, #0
 800a682:	d120      	bne.n	800a6c6 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a684:	4b07      	ldr	r3, [pc, #28]	; (800a6a4 <HAL_RCC_OscConfig+0x2b0>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a06      	ldr	r2, [pc, #24]	; (800a6a4 <HAL_RCC_OscConfig+0x2b0>)
 800a68a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a68e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a690:	f7fc ffd4 	bl	800763c <HAL_GetTick>
 800a694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a696:	e010      	b.n	800a6ba <HAL_RCC_OscConfig+0x2c6>
 800a698:	40023800 	.word	0x40023800
 800a69c:	42470000 	.word	0x42470000
 800a6a0:	42470e80 	.word	0x42470e80
 800a6a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6a8:	f7fc ffc8 	bl	800763c <HAL_GetTick>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	1ad3      	subs	r3, r2, r3
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d901      	bls.n	800a6ba <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800a6b6:	2303      	movs	r3, #3
 800a6b8:	e0d3      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ba:	4b6c      	ldr	r3, [pc, #432]	; (800a86c <HAL_RCC_OscConfig+0x478>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f0      	beq.n	800a6a8 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d106      	bne.n	800a6dc <HAL_RCC_OscConfig+0x2e8>
 800a6ce:	4b68      	ldr	r3, [pc, #416]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6d2:	4a67      	ldr	r2, [pc, #412]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6d4:	f043 0301 	orr.w	r3, r3, #1
 800a6d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a6da:	e01c      	b.n	800a716 <HAL_RCC_OscConfig+0x322>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d10c      	bne.n	800a6fe <HAL_RCC_OscConfig+0x30a>
 800a6e4:	4b62      	ldr	r3, [pc, #392]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e8:	4a61      	ldr	r2, [pc, #388]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6ea:	f043 0304 	orr.w	r3, r3, #4
 800a6ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a6f0:	4b5f      	ldr	r3, [pc, #380]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f4:	4a5e      	ldr	r2, [pc, #376]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a6f6:	f043 0301 	orr.w	r3, r3, #1
 800a6fa:	6713      	str	r3, [r2, #112]	; 0x70
 800a6fc:	e00b      	b.n	800a716 <HAL_RCC_OscConfig+0x322>
 800a6fe:	4b5c      	ldr	r3, [pc, #368]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a702:	4a5b      	ldr	r2, [pc, #364]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	6713      	str	r3, [r2, #112]	; 0x70
 800a70a:	4b59      	ldr	r3, [pc, #356]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a70c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a70e:	4a58      	ldr	r2, [pc, #352]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a710:	f023 0304 	bic.w	r3, r3, #4
 800a714:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d015      	beq.n	800a74a <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a71e:	f7fc ff8d 	bl	800763c <HAL_GetTick>
 800a722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a724:	e00a      	b.n	800a73c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a726:	f7fc ff89 	bl	800763c <HAL_GetTick>
 800a72a:	4602      	mov	r2, r0
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	f241 3288 	movw	r2, #5000	; 0x1388
 800a734:	4293      	cmp	r3, r2
 800a736:	d901      	bls.n	800a73c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e092      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a73c:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a740:	f003 0302 	and.w	r3, r3, #2
 800a744:	2b00      	cmp	r3, #0
 800a746:	d0ee      	beq.n	800a726 <HAL_RCC_OscConfig+0x332>
 800a748:	e014      	b.n	800a774 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a74a:	f7fc ff77 	bl	800763c <HAL_GetTick>
 800a74e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a750:	e00a      	b.n	800a768 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a752:	f7fc ff73 	bl	800763c <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a760:	4293      	cmp	r3, r2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e07c      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a768:	4b41      	ldr	r3, [pc, #260]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a76a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a76c:	f003 0302 	and.w	r3, r3, #2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1ee      	bne.n	800a752 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a774:	7dfb      	ldrb	r3, [r7, #23]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d105      	bne.n	800a786 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a77a:	4b3d      	ldr	r3, [pc, #244]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77e:	4a3c      	ldr	r2, [pc, #240]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a784:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d068      	beq.n	800a860 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a78e:	4b38      	ldr	r3, [pc, #224]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f003 030c 	and.w	r3, r3, #12
 800a796:	2b08      	cmp	r3, #8
 800a798:	d060      	beq.n	800a85c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	2b02      	cmp	r3, #2
 800a7a0:	d145      	bne.n	800a82e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7a2:	4b34      	ldr	r3, [pc, #208]	; (800a874 <HAL_RCC_OscConfig+0x480>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a8:	f7fc ff48 	bl	800763c <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7ae:	e008      	b.n	800a7c2 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7b0:	f7fc ff44 	bl	800763c <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d901      	bls.n	800a7c2 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e04f      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7c2:	4b2b      	ldr	r3, [pc, #172]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f0      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	69da      	ldr	r2, [r3, #28]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a1b      	ldr	r3, [r3, #32]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	019b      	lsls	r3, r3, #6
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e4:	085b      	lsrs	r3, r3, #1
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	041b      	lsls	r3, r3, #16
 800a7ea:	431a      	orrs	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f0:	061b      	lsls	r3, r3, #24
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f8:	071b      	lsls	r3, r3, #28
 800a7fa:	491d      	ldr	r1, [pc, #116]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a800:	4b1c      	ldr	r3, [pc, #112]	; (800a874 <HAL_RCC_OscConfig+0x480>)
 800a802:	2201      	movs	r2, #1
 800a804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a806:	f7fc ff19 	bl	800763c <HAL_GetTick>
 800a80a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a80c:	e008      	b.n	800a820 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a80e:	f7fc ff15 	bl	800763c <HAL_GetTick>
 800a812:	4602      	mov	r2, r0
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	2b02      	cmp	r3, #2
 800a81a:	d901      	bls.n	800a820 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800a81c:	2303      	movs	r3, #3
 800a81e:	e020      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a820:	4b13      	ldr	r3, [pc, #76]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0f0      	beq.n	800a80e <HAL_RCC_OscConfig+0x41a>
 800a82c:	e018      	b.n	800a860 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a82e:	4b11      	ldr	r3, [pc, #68]	; (800a874 <HAL_RCC_OscConfig+0x480>)
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a834:	f7fc ff02 	bl	800763c <HAL_GetTick>
 800a838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a83c:	f7fc fefe 	bl	800763c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e009      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a84e:	4b08      	ldr	r3, [pc, #32]	; (800a870 <HAL_RCC_OscConfig+0x47c>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d1f0      	bne.n	800a83c <HAL_RCC_OscConfig+0x448>
 800a85a:	e001      	b.n	800a860 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	40007000 	.word	0x40007000
 800a870:	40023800 	.word	0x40023800
 800a874:	42470060 	.word	0x42470060

0800a878 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e022      	b.n	800a8d0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d105      	bne.n	800a8a2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f7fa fe85 	bl	80055ac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2203      	movs	r2, #3
 800a8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f814 	bl	800a8d8 <HAL_SD_InitCard>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e00a      	b.n	800a8d0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a8ce:	2300      	movs	r3, #0
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a8d8:	b5b0      	push	{r4, r5, r7, lr}
 800a8da:	b08e      	sub	sp, #56	; 0x38
 800a8dc:	af04      	add	r7, sp, #16
 800a8de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a8f4:	2376      	movs	r3, #118	; 0x76
 800a8f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681d      	ldr	r5, [r3, #0]
 800a8fc:	466c      	mov	r4, sp
 800a8fe:	f107 0314 	add.w	r3, r7, #20
 800a902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a90a:	f107 0308 	add.w	r3, r7, #8
 800a90e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a910:	4628      	mov	r0, r5
 800a912:	f003 fa87 	bl	800de24 <SDIO_Init>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e031      	b.n	800a98c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a928:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <HAL_SD_InitCard+0xbc>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f003 fabf 	bl	800deb6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a938:	4b16      	ldr	r3, [pc, #88]	; (800a994 <HAL_SD_InitCard+0xbc>)
 800a93a:	2201      	movs	r2, #1
 800a93c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 ffc6 	bl	800b8d0 <SD_PowerON>
 800a944:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a946:	6a3b      	ldr	r3, [r7, #32]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00b      	beq.n	800a964 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a958:	6a3b      	ldr	r3, [r7, #32]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e013      	b.n	800a98c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fee5 	bl	800b734 <SD_InitCard>
 800a96a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a97e:	6a3b      	ldr	r3, [r7, #32]
 800a980:	431a      	orrs	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
 800a988:	e000      	b.n	800a98c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3728      	adds	r7, #40	; 0x28
 800a990:	46bd      	mov	sp, r7
 800a992:	bdb0      	pop	{r4, r5, r7, pc}
 800a994:	422580a0 	.word	0x422580a0

0800a998 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08c      	sub	sp, #48	; 0x30
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	607a      	str	r2, [r7, #4]
 800a9a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d107      	bne.n	800a9c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e0c7      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	f040 80c0 	bne.w	800ab4e <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a9d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	441a      	add	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d907      	bls.n	800a9f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e0ae      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2203      	movs	r2, #3
 800a9f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800aa10:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	4a50      	ldr	r2, [pc, #320]	; (800ab58 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800aa18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	4a4f      	ldr	r2, [pc, #316]	; (800ab5c <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800aa20:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	2200      	movs	r2, #0
 800aa28:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3380      	adds	r3, #128	; 0x80
 800aa34:	4619      	mov	r1, r3
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	025b      	lsls	r3, r3, #9
 800aa3c:	089b      	lsrs	r3, r3, #2
 800aa3e:	f7fd fbef 	bl	8008220 <HAL_DMA_Start_IT>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d017      	beq.n	800aa78 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800aa56:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4a40      	ldr	r2, [pc, #256]	; (800ab60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aa5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e06b      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800aa78:	4b3a      	ldr	r3, [pc, #232]	; (800ab64 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa82:	2b01      	cmp	r3, #1
 800aa84:	d002      	beq.n	800aa8c <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800aa86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa88:	025b      	lsls	r3, r3, #9
 800aa8a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa94:	4618      	mov	r0, r3
 800aa96:	f003 faa1 	bl	800dfdc <SDMMC_CmdBlockLength>
 800aa9a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800aa9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00f      	beq.n	800aac2 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a2e      	ldr	r2, [pc, #184]	; (800ab60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800aaa8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	431a      	orrs	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800aabe:	2301      	movs	r3, #1
 800aac0:	e046      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aac2:	f04f 33ff 	mov.w	r3, #4294967295
 800aac6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	025b      	lsls	r3, r3, #9
 800aacc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aace:	2390      	movs	r3, #144	; 0x90
 800aad0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aad2:	2302      	movs	r3, #2
 800aad4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aad6:	2300      	movs	r3, #0
 800aad8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aada:	2301      	movs	r3, #1
 800aadc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f107 0210 	add.w	r2, r7, #16
 800aae6:	4611      	mov	r1, r2
 800aae8:	4618      	mov	r0, r3
 800aaea:	f003 fa4b 	bl	800df84 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d90a      	bls.n	800ab0a <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2282      	movs	r2, #130	; 0x82
 800aaf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab00:	4618      	mov	r0, r3
 800ab02:	f003 faaf 	bl	800e064 <SDMMC_CmdReadMultiBlock>
 800ab06:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ab08:	e009      	b.n	800ab1e <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2281      	movs	r2, #129	; 0x81
 800ab0e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab16:	4618      	mov	r0, r3
 800ab18:	f003 fa82 	bl	800e020 <SDMMC_CmdReadSingleBlock>
 800ab1c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d012      	beq.n	800ab4a <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a0d      	ldr	r2, [pc, #52]	; (800ab60 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab32:	431a      	orrs	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2200      	movs	r2, #0
 800ab44:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e002      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e000      	b.n	800ab50 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800ab4e:	2302      	movs	r3, #2
  }
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3730      	adds	r7, #48	; 0x30
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	0800b543 	.word	0x0800b543
 800ab5c:	0800b5b5 	.word	0x0800b5b5
 800ab60:	004005ff 	.word	0x004005ff
 800ab64:	4225858c 	.word	0x4225858c

0800ab68 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b08c      	sub	sp, #48	; 0x30
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
 800ab74:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d107      	bne.n	800ab90 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e0ca      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	f040 80c3 	bne.w	800ad24 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800aba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abae:	429a      	cmp	r2, r3
 800abb0:	d907      	bls.n	800abc2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e0b1      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2203      	movs	r2, #3
 800abc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2200      	movs	r2, #0
 800abd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 021a 	orr.w	r2, r2, #26
 800abe0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe6:	4a52      	ldr	r2, [pc, #328]	; (800ad30 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800abe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abee:	4a51      	ldr	r2, [pc, #324]	; (800ad34 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800abf0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abf6:	2200      	movs	r2, #0
 800abf8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d002      	beq.n	800ac08 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	025b      	lsls	r3, r3, #9
 800ac06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac10:	4618      	mov	r0, r3
 800ac12:	f003 f9e3 	bl	800dfdc <SDMMC_CmdBlockLength>
 800ac16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d00f      	beq.n	800ac3e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a45      	ldr	r2, [pc, #276]	; (800ad38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ac24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac2c:	431a      	orrs	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2201      	movs	r2, #1
 800ac36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e073      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d90a      	bls.n	800ac5a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	22a0      	movs	r2, #160	; 0xa0
 800ac48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac50:	4618      	mov	r0, r3
 800ac52:	f003 fa4b 	bl	800e0ec <SDMMC_CmdWriteMultiBlock>
 800ac56:	62f8      	str	r0, [r7, #44]	; 0x2c
 800ac58:	e009      	b.n	800ac6e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2290      	movs	r2, #144	; 0x90
 800ac5e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac66:	4618      	mov	r0, r3
 800ac68:	f003 fa1e 	bl	800e0a8 <SDMMC_CmdWriteSingleBlock>
 800ac6c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d012      	beq.n	800ac9a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a2f      	ldr	r2, [pc, #188]	; (800ad38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ac7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	431a      	orrs	r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	e045      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ac9a:	4b28      	ldr	r3, [pc, #160]	; (800ad3c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aca4:	68b9      	ldr	r1, [r7, #8]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3380      	adds	r3, #128	; 0x80
 800acac:	461a      	mov	r2, r3
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	025b      	lsls	r3, r3, #9
 800acb2:	089b      	lsrs	r3, r3, #2
 800acb4:	f7fd fab4 	bl	8008220 <HAL_DMA_Start_IT>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d01a      	beq.n	800acf4 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f022 021a 	bic.w	r2, r2, #26
 800accc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a19      	ldr	r2, [pc, #100]	; (800ad38 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800acd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e018      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800acf4:	f04f 33ff 	mov.w	r3, #4294967295
 800acf8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	025b      	lsls	r3, r3, #9
 800acfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ad00:	2390      	movs	r3, #144	; 0x90
 800ad02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f107 0210 	add.w	r2, r7, #16
 800ad18:	4611      	mov	r1, r2
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f003 f932 	bl	800df84 <SDIO_ConfigData>

      return HAL_OK;
 800ad20:	2300      	movs	r3, #0
 800ad22:	e000      	b.n	800ad26 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ad24:	2302      	movs	r3, #2
  }
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3730      	adds	r7, #48	; 0x30
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	0800b519 	.word	0x0800b519
 800ad34:	0800b5b5 	.word	0x0800b5b5
 800ad38:	004005ff 	.word	0x004005ff
 800ad3c:	4225858c 	.word	0x4225858c

0800ad40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d008      	beq.n	800ad6e <HAL_SD_IRQHandler+0x2e>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d003      	beq.n	800ad6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 ffc8 	bl	800bcfc <SD_Read_IT>
 800ad6c:	e155      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	f000 808f 	beq.w	800ae9c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6812      	ldr	r2, [r2, #0]
 800ad92:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ad96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ad9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f022 0201 	bic.w	r2, r2, #1
 800adaa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f003 0308 	and.w	r3, r3, #8
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d039      	beq.n	800ae2a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d104      	bne.n	800adca <HAL_SD_IRQHandler+0x8a>
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f003 0320 	and.w	r3, r3, #32
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d011      	beq.n	800adee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4618      	mov	r0, r3
 800add0:	f003 f9ae 	bl	800e130 <SDMMC_CmdStopTransfer>
 800add4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d008      	beq.n	800adee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	431a      	orrs	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f91f 	bl	800b02c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f240 523a 	movw	r2, #1338	; 0x53a
 800adf6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2201      	movs	r2, #1
 800adfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f003 0301 	and.w	r3, r3, #1
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d104      	bne.n	800ae1a <HAL_SD_IRQHandler+0xda>
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f003 0302 	and.w	r3, r3, #2
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f003 fe04 	bl	800ea28 <HAL_SD_RxCpltCallback>
 800ae20:	e0fb      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f003 fdf6 	bl	800ea14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae28:	e0f7      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 80f2 	beq.w	800b01a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f003 0320 	and.w	r3, r3, #32
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d011      	beq.n	800ae64 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f003 f973 	bl	800e130 <SDMMC_CmdStopTransfer>
 800ae4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d008      	beq.n	800ae64 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	431a      	orrs	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f8e4 	bl	800b02c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f003 0301 	and.w	r3, r3, #1
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f040 80d5 	bne.w	800b01a <HAL_SD_IRQHandler+0x2da>
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f040 80cf 	bne.w	800b01a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f022 0208 	bic.w	r2, r2, #8
 800ae8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f003 fdbd 	bl	800ea14 <HAL_SD_TxCpltCallback>
}
 800ae9a:	e0be      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d008      	beq.n	800aebc <HAL_SD_IRQHandler+0x17c>
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f003 0308 	and.w	r3, r3, #8
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d003      	beq.n	800aebc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 ff72 	bl	800bd9e <SD_Write_IT>
 800aeba:	e0ae      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 80a7 	beq.w	800b01a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aed2:	f003 0302 	and.w	r3, r3, #2
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aede:	f043 0202 	orr.w	r2, r3, #2
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeec:	f003 0308 	and.w	r3, r3, #8
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d005      	beq.n	800af00 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef8:	f043 0208 	orr.w	r2, r3, #8
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af06:	f003 0320 	and.w	r3, r3, #32
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af12:	f043 0220 	orr.w	r2, r3, #32
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af20:	f003 0310 	and.w	r3, r3, #16
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af2c:	f043 0210 	orr.w	r2, r3, #16
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f240 523a 	movw	r2, #1338	; 0x53a
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af4c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	4618      	mov	r0, r3
 800af54:	f003 f8ec 	bl	800e130 <SDMMC_CmdStopTransfer>
 800af58:	4602      	mov	r2, r0
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	431a      	orrs	r2, r3
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	f003 0308 	and.w	r3, r3, #8
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f855 	bl	800b02c <HAL_SD_ErrorCallback>
}
 800af82:	e04a      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d045      	beq.n	800b01a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f003 0310 	and.w	r3, r3, #16
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <HAL_SD_IRQHandler+0x262>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f003 0320 	and.w	r3, r3, #32
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d011      	beq.n	800afc6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	4a1f      	ldr	r2, [pc, #124]	; (800b024 <HAL_SD_IRQHandler+0x2e4>)
 800afa8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afae:	4618      	mov	r0, r3
 800afb0:	f7fd f98e 	bl	80082d0 <HAL_DMA_Abort_IT>
 800afb4:	4603      	mov	r3, r0
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d02f      	beq.n	800b01a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afbe:	4618      	mov	r0, r3
 800afc0:	f000 fb4a 	bl	800b658 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800afc4:	e029      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d104      	bne.n	800afda <HAL_SD_IRQHandler+0x29a>
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f003 0302 	and.w	r3, r3, #2
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d011      	beq.n	800affe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afde:	4a12      	ldr	r2, [pc, #72]	; (800b028 <HAL_SD_IRQHandler+0x2e8>)
 800afe0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7fd f972 	bl	80082d0 <HAL_DMA_Abort_IT>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d013      	beq.n	800b01a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fb65 	bl	800b6c6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800affc:	e00d      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f003 fcf4 	bl	800ea00 <HAL_SD_AbortCallback>
}
 800b018:	e7ff      	b.n	800b01a <HAL_SD_IRQHandler+0x2da>
 800b01a:	bf00      	nop
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	0800b659 	.word	0x0800b659
 800b028:	0800b6c7 	.word	0x0800b6c7

0800b02c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b034:	bf00      	nop
 800b036:	370c      	adds	r7, #12
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr

0800b040 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b040:	b480      	push	{r7}
 800b042:	b083      	sub	sp, #12
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b04e:	0f9b      	lsrs	r3, r3, #30
 800b050:	b2da      	uxtb	r2, r3
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b05a:	0e9b      	lsrs	r3, r3, #26
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	f003 030f 	and.w	r3, r3, #15
 800b062:	b2da      	uxtb	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b06c:	0e1b      	lsrs	r3, r3, #24
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	b2da      	uxtb	r2, r3
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b07e:	0c1b      	lsrs	r3, r3, #16
 800b080:	b2da      	uxtb	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b08a:	0a1b      	lsrs	r3, r3, #8
 800b08c:	b2da      	uxtb	r2, r3
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b096:	b2da      	uxtb	r2, r3
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0a0:	0d1b      	lsrs	r3, r3, #20
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ac:	0c1b      	lsrs	r3, r3, #16
 800b0ae:	b2db      	uxtb	r3, r3
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	b2da      	uxtb	r2, r3
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0be:	0bdb      	lsrs	r3, r3, #15
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	f003 0301 	and.w	r3, r3, #1
 800b0c6:	b2da      	uxtb	r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0d0:	0b9b      	lsrs	r3, r3, #14
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 0301 	and.w	r3, r3, #1
 800b0d8:	b2da      	uxtb	r2, r3
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0e2:	0b5b      	lsrs	r3, r3, #13
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0f4:	0b1b      	lsrs	r3, r3, #12
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	b2da      	uxtb	r2, r3
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	2200      	movs	r2, #0
 800b106:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d163      	bne.n	800b1d8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b114:	009a      	lsls	r2, r3, #2
 800b116:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b11a:	4013      	ands	r3, r2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b120:	0f92      	lsrs	r2, r2, #30
 800b122:	431a      	orrs	r2, r3
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b12c:	0edb      	lsrs	r3, r3, #27
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	b2da      	uxtb	r2, r3
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b13e:	0e1b      	lsrs	r3, r3, #24
 800b140:	b2db      	uxtb	r3, r3
 800b142:	f003 0307 	and.w	r3, r3, #7
 800b146:	b2da      	uxtb	r2, r3
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b150:	0d5b      	lsrs	r3, r3, #21
 800b152:	b2db      	uxtb	r3, r3
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b162:	0c9b      	lsrs	r3, r3, #18
 800b164:	b2db      	uxtb	r3, r3
 800b166:	f003 0307 	and.w	r3, r3, #7
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b174:	0bdb      	lsrs	r3, r3, #15
 800b176:	b2db      	uxtb	r3, r3
 800b178:	f003 0307 	and.w	r3, r3, #7
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	7e1b      	ldrb	r3, [r3, #24]
 800b190:	b2db      	uxtb	r3, r3
 800b192:	f003 0307 	and.w	r3, r3, #7
 800b196:	3302      	adds	r3, #2
 800b198:	2201      	movs	r2, #1
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b1a2:	fb02 f203 	mul.w	r2, r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	7a1b      	ldrb	r3, [r3, #8]
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	f003 030f 	and.w	r3, r3, #15
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	409a      	lsls	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b1c4:	0a52      	lsrs	r2, r2, #9
 800b1c6:	fb02 f203 	mul.w	r2, r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1d4:	661a      	str	r2, [r3, #96]	; 0x60
 800b1d6:	e031      	b.n	800b23c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d11d      	bne.n	800b21c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ee:	0c1b      	lsrs	r3, r3, #16
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	691b      	ldr	r3, [r3, #16]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	029a      	lsls	r2, r3, #10
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b210:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	661a      	str	r2, [r3, #96]	; 0x60
 800b21a:	e00f      	b.n	800b23c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a58      	ldr	r2, [pc, #352]	; (800b384 <HAL_SD_GetCardCSD+0x344>)
 800b222:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b238:	2301      	movs	r3, #1
 800b23a:	e09d      	b.n	800b378 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b240:	0b9b      	lsrs	r3, r3, #14
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b252:	09db      	lsrs	r3, r3, #7
 800b254:	b2db      	uxtb	r3, r3
 800b256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b25a:	b2da      	uxtb	r2, r3
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b264:	b2db      	uxtb	r3, r3
 800b266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b274:	0fdb      	lsrs	r3, r3, #31
 800b276:	b2da      	uxtb	r2, r3
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b280:	0f5b      	lsrs	r3, r3, #29
 800b282:	b2db      	uxtb	r3, r3
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	b2da      	uxtb	r2, r3
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	0e9b      	lsrs	r3, r3, #26
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0307 	and.w	r3, r3, #7
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a4:	0d9b      	lsrs	r3, r3, #22
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	f003 030f 	and.w	r3, r3, #15
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2b6:	0d5b      	lsrs	r3, r3, #21
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	b2da      	uxtb	r2, r3
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	f003 0301 	and.w	r3, r3, #1
 800b2da:	b2da      	uxtb	r2, r3
 800b2dc:	683b      	ldr	r3, [r7, #0]
 800b2de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e6:	0bdb      	lsrs	r3, r3, #15
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2fa:	0b9b      	lsrs	r3, r3, #14
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	b2da      	uxtb	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	0b5b      	lsrs	r3, r3, #13
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f003 0301 	and.w	r3, r3, #1
 800b316:	b2da      	uxtb	r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b322:	0b1b      	lsrs	r3, r3, #12
 800b324:	b2db      	uxtb	r3, r3
 800b326:	f003 0301 	and.w	r3, r3, #1
 800b32a:	b2da      	uxtb	r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b336:	0a9b      	lsrs	r3, r3, #10
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	b2da      	uxtb	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b34a:	0a1b      	lsrs	r3, r3, #8
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	b2da      	uxtb	r2, r3
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b35e:	085b      	lsrs	r3, r3, #1
 800b360:	b2db      	uxtb	r3, r3
 800b362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b366:	b2da      	uxtb	r2, r3
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2201      	movs	r2, #1
 800b372:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b376:	2300      	movs	r3, #0
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	004005ff 	.word	0x004005ff

0800b388 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b3e0:	b5b0      	push	{r4, r5, r7, lr}
 800b3e2:	b08e      	sub	sp, #56	; 0x38
 800b3e4:	af04      	add	r7, sp, #16
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2203      	movs	r2, #3
 800b3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f6:	2b03      	cmp	r3, #3
 800b3f8:	d02e      	beq.n	800b458 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b400:	d106      	bne.n	800b410 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b406:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	639a      	str	r2, [r3, #56]	; 0x38
 800b40e:	e029      	b.n	800b464 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b416:	d10a      	bne.n	800b42e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fb0f 	bl	800ba3c <SD_WideBus_Enable>
 800b41e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	431a      	orrs	r2, r3
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	639a      	str	r2, [r3, #56]	; 0x38
 800b42c:	e01a      	b.n	800b464 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d10a      	bne.n	800b44a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f000 fb4c 	bl	800bad2 <SD_WideBus_Disable>
 800b43a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	431a      	orrs	r2, r3
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	639a      	str	r2, [r3, #56]	; 0x38
 800b448:	e00c      	b.n	800b464 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
 800b456:	e005      	b.n	800b464 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d009      	beq.n	800b480 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a18      	ldr	r2, [pc, #96]	; (800b4d4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e024      	b.n	800b4ca <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	68db      	ldr	r3, [r3, #12]
 800b490:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	695b      	ldr	r3, [r3, #20]
 800b49a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681d      	ldr	r5, [r3, #0]
 800b4a6:	466c      	mov	r4, sp
 800b4a8:	f107 0318 	add.w	r3, r7, #24
 800b4ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b4b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b4b4:	f107 030c 	add.w	r3, r7, #12
 800b4b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f002 fcb2 	bl	800de24 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3728      	adds	r7, #40	; 0x28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bdb0      	pop	{r4, r5, r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	004005ff 	.word	0x004005ff

0800b4d8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b086      	sub	sp, #24
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b4e4:	f107 030c 	add.w	r3, r7, #12
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fa7e 	bl	800b9ec <SD_SendStatus>
 800b4f0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d005      	beq.n	800b504 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	0a5b      	lsrs	r3, r3, #9
 800b508:	f003 030f 	and.w	r3, r3, #15
 800b50c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b50e:	693b      	ldr	r3, [r7, #16]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b534:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b536:	bf00      	nop
 800b538:	3714      	adds	r7, #20
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b084      	sub	sp, #16
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b54e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b554:	2b82      	cmp	r3, #130	; 0x82
 800b556:	d111      	bne.n	800b57c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4618      	mov	r0, r3
 800b55e:	f002 fde7 	bl	800e130 <SDMMC_CmdStopTransfer>
 800b562:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d008      	beq.n	800b57c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	431a      	orrs	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7ff fd58 	bl	800b02c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f022 0208 	bic.w	r2, r2, #8
 800b58a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f240 523a 	movw	r2, #1338	; 0x53a
 800b594:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2201      	movs	r2, #1
 800b59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f003 fa3f 	bl	800ea28 <HAL_SD_RxCpltCallback>
#endif
}
 800b5aa:	bf00      	nop
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fd f830 	bl	8008628 <HAL_DMA_GetError>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b02      	cmp	r3, #2
 800b5cc:	d03e      	beq.n	800b64c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5d4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5dc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	d002      	beq.n	800b5ea <SD_DMAError+0x36>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d12d      	bne.n	800b646 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a19      	ldr	r2, [pc, #100]	; (800b654 <SD_DMAError+0xa0>)
 800b5f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b600:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b606:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b60a:	697b      	ldr	r3, [r7, #20]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b60e:	6978      	ldr	r0, [r7, #20]
 800b610:	f7ff ff62 	bl	800b4d8 <HAL_SD_GetCardState>
 800b614:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b06      	cmp	r3, #6
 800b61a:	d002      	beq.n	800b622 <SD_DMAError+0x6e>
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	2b05      	cmp	r3, #5
 800b620:	d10a      	bne.n	800b638 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4618      	mov	r0, r3
 800b628:	f002 fd82 	bl	800e130 <SDMMC_CmdStopTransfer>
 800b62c:	4602      	mov	r2, r0
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	431a      	orrs	r2, r3
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	2200      	movs	r2, #0
 800b644:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b646:	6978      	ldr	r0, [r7, #20]
 800b648:	f7ff fcf0 	bl	800b02c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b64c:	bf00      	nop
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	004005ff 	.word	0x004005ff

0800b658 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b664:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b670:	68f8      	ldr	r0, [r7, #12]
 800b672:	f7ff ff31 	bl	800b4d8 <HAL_SD_GetCardState>
 800b676:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2200      	movs	r2, #0
 800b684:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b06      	cmp	r3, #6
 800b68a:	d002      	beq.n	800b692 <SD_DMATxAbort+0x3a>
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b05      	cmp	r3, #5
 800b690:	d10a      	bne.n	800b6a8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f002 fd4a 	bl	800e130 <SDMMC_CmdStopTransfer>
 800b69c:	4602      	mov	r2, r0
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d103      	bne.n	800b6b8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	f003 f9a5 	bl	800ea00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b6b6:	e002      	b.n	800b6be <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff fcb7 	bl	800b02c <HAL_SD_ErrorCallback>
}
 800b6be:	bf00      	nop
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff fefa 	bl	800b4d8 <HAL_SD_GetCardState>
 800b6e4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	2b06      	cmp	r3, #6
 800b6f8:	d002      	beq.n	800b700 <SD_DMARxAbort+0x3a>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2b05      	cmp	r3, #5
 800b6fe:	d10a      	bne.n	800b716 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4618      	mov	r0, r3
 800b706:	f002 fd13 	bl	800e130 <SDMMC_CmdStopTransfer>
 800b70a:	4602      	mov	r2, r0
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b710:	431a      	orrs	r2, r3
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d103      	bne.n	800b726 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	f003 f96e 	bl	800ea00 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b724:	e002      	b.n	800b72c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fc80 	bl	800b02c <HAL_SD_ErrorCallback>
}
 800b72c:	bf00      	nop
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b734:	b5b0      	push	{r4, r5, r7, lr}
 800b736:	b094      	sub	sp, #80	; 0x50
 800b738:	af04      	add	r7, sp, #16
 800b73a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b73c:	2301      	movs	r3, #1
 800b73e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4618      	mov	r0, r3
 800b746:	f002 fbc5 	bl	800ded4 <SDIO_GetPowerState>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d102      	bne.n	800b756 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b750:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b754:	e0b7      	b.n	800b8c6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d02f      	beq.n	800b7be <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4618      	mov	r0, r3
 800b764:	f002 fdee 	bl	800e344 <SDMMC_CmdSendCID>
 800b768:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <SD_InitCard+0x40>
    {
      return errorstate;
 800b770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b772:	e0a8      	b.n	800b8c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2100      	movs	r1, #0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f002 fbef 	bl	800df5e <SDIO_GetResponse>
 800b780:	4602      	mov	r2, r0
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2104      	movs	r1, #4
 800b78c:	4618      	mov	r0, r3
 800b78e:	f002 fbe6 	bl	800df5e <SDIO_GetResponse>
 800b792:	4602      	mov	r2, r0
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2108      	movs	r1, #8
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f002 fbdd 	bl	800df5e <SDIO_GetResponse>
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	210c      	movs	r1, #12
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f002 fbd4 	bl	800df5e <SDIO_GetResponse>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d00d      	beq.n	800b7e2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f107 020e 	add.w	r2, r7, #14
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 fdf4 	bl	800e3be <SDMMC_CmdSetRelAdd>
 800b7d6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7e0:	e071      	b.n	800b8c6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d036      	beq.n	800b858 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b7ea:	89fb      	ldrh	r3, [r7, #14]
 800b7ec:	461a      	mov	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7fa:	041b      	lsls	r3, r3, #16
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	4610      	mov	r0, r2
 800b800:	f002 fdbe 	bl	800e380 <SDMMC_CmdSendCSD>
 800b804:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b80c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b80e:	e05a      	b.n	800b8c6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2100      	movs	r1, #0
 800b816:	4618      	mov	r0, r3
 800b818:	f002 fba1 	bl	800df5e <SDIO_GetResponse>
 800b81c:	4602      	mov	r2, r0
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2104      	movs	r1, #4
 800b828:	4618      	mov	r0, r3
 800b82a:	f002 fb98 	bl	800df5e <SDIO_GetResponse>
 800b82e:	4602      	mov	r2, r0
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	2108      	movs	r1, #8
 800b83a:	4618      	mov	r0, r3
 800b83c:	f002 fb8f 	bl	800df5e <SDIO_GetResponse>
 800b840:	4602      	mov	r2, r0
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	210c      	movs	r1, #12
 800b84c:	4618      	mov	r0, r3
 800b84e:	f002 fb86 	bl	800df5e <SDIO_GetResponse>
 800b852:	4602      	mov	r2, r0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2104      	movs	r1, #4
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 fb7d 	bl	800df5e <SDIO_GetResponse>
 800b864:	4603      	mov	r3, r0
 800b866:	0d1a      	lsrs	r2, r3, #20
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b86c:	f107 0310 	add.w	r3, r7, #16
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7ff fbe4 	bl	800b040 <HAL_SD_GetCardCSD>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b87e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b882:	e020      	b.n	800b8c6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6819      	ldr	r1, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b88c:	041b      	lsls	r3, r3, #16
 800b88e:	f04f 0400 	mov.w	r4, #0
 800b892:	461a      	mov	r2, r3
 800b894:	4623      	mov	r3, r4
 800b896:	4608      	mov	r0, r1
 800b898:	f002 fc6c 	bl	800e174 <SDMMC_CmdSelDesel>
 800b89c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d001      	beq.n	800b8a8 <SD_InitCard+0x174>
  {
    return errorstate;
 800b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8a6:	e00e      	b.n	800b8c6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681d      	ldr	r5, [r3, #0]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	466c      	mov	r4, sp
 800b8b0:	f103 0210 	add.w	r2, r3, #16
 800b8b4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f002 fab0 	bl	800de24 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b8c4:	2300      	movs	r3, #0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3740      	adds	r7, #64	; 0x40
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b8d0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	617b      	str	r3, [r7, #20]
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f002 fc66 	bl	800e1ba <SDMMC_CmdGoIdleState>
 800b8ee:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <SD_PowerON+0x2a>
  {
    return errorstate;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	e072      	b.n	800b9e0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	4618      	mov	r0, r3
 800b900:	f002 fc79 	bl	800e1f6 <SDMMC_CmdOperCond>
 800b904:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00d      	beq.n	800b928 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2200      	movs	r2, #0
 800b910:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f002 fc4f 	bl	800e1ba <SDMMC_CmdGoIdleState>
 800b91c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d004      	beq.n	800b92e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	e05b      	b.n	800b9e0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2201      	movs	r2, #1
 800b92c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b932:	2b01      	cmp	r3, #1
 800b934:	d137      	bne.n	800b9a6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2100      	movs	r1, #0
 800b93c:	4618      	mov	r0, r3
 800b93e:	f002 fc79 	bl	800e234 <SDMMC_CmdAppCommand>
 800b942:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d02d      	beq.n	800b9a6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b94a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b94e:	e047      	b.n	800b9e0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2100      	movs	r1, #0
 800b956:	4618      	mov	r0, r3
 800b958:	f002 fc6c 	bl	800e234 <SDMMC_CmdAppCommand>
 800b95c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d001      	beq.n	800b968 <SD_PowerON+0x98>
    {
      return errorstate;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	e03b      	b.n	800b9e0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	491e      	ldr	r1, [pc, #120]	; (800b9e8 <SD_PowerON+0x118>)
 800b96e:	4618      	mov	r0, r3
 800b970:	f002 fc82 	bl	800e278 <SDMMC_CmdAppOperCommand>
 800b974:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b97c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b980:	e02e      	b.n	800b9e0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2100      	movs	r1, #0
 800b988:	4618      	mov	r0, r3
 800b98a:	f002 fae8 	bl	800df5e <SDIO_GetResponse>
 800b98e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	0fdb      	lsrs	r3, r3, #31
 800b994:	2b01      	cmp	r3, #1
 800b996:	d101      	bne.n	800b99c <SD_PowerON+0xcc>
 800b998:	2301      	movs	r3, #1
 800b99a:	e000      	b.n	800b99e <SD_PowerON+0xce>
 800b99c:	2300      	movs	r3, #0
 800b99e:	613b      	str	r3, [r7, #16]

    count++;
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d802      	bhi.n	800b9b6 <SD_PowerON+0xe6>
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0cc      	beq.n	800b950 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d902      	bls.n	800b9c6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b9c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9c4:	e00c      	b.n	800b9e0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d003      	beq.n	800b9d8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	645a      	str	r2, [r3, #68]	; 0x44
 800b9d6:	e002      	b.n	800b9de <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3718      	adds	r7, #24
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	c1100000 	.word	0xc1100000

0800b9ec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d102      	bne.n	800ba02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b9fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba00:	e018      	b.n	800ba34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba0a:	041b      	lsls	r3, r3, #16
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4610      	mov	r0, r2
 800ba10:	f002 fcf6 	bl	800e400 <SDMMC_CmdSendStatus>
 800ba14:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d001      	beq.n	800ba20 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	e009      	b.n	800ba34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2100      	movs	r1, #0
 800ba26:	4618      	mov	r0, r3
 800ba28:	f002 fa99 	bl	800df5e <SDIO_GetResponse>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ba32:	2300      	movs	r3, #0
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b086      	sub	sp, #24
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ba44:	2300      	movs	r3, #0
 800ba46:	60fb      	str	r3, [r7, #12]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2100      	movs	r1, #0
 800ba52:	4618      	mov	r0, r3
 800ba54:	f002 fa83 	bl	800df5e <SDIO_GetResponse>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba62:	d102      	bne.n	800ba6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba68:	e02f      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4619      	mov	r1, r3
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 f879 	bl	800bb68 <SD_FindSCR>
 800ba76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d001      	beq.n	800ba82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	e023      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d01c      	beq.n	800bac6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba94:	041b      	lsls	r3, r3, #16
 800ba96:	4619      	mov	r1, r3
 800ba98:	4610      	mov	r0, r2
 800ba9a:	f002 fbcb 	bl	800e234 <SDMMC_CmdAppCommand>
 800ba9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	e00f      	b.n	800baca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2102      	movs	r1, #2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f002 fc04 	bl	800e2be <SDMMC_CmdBusWidth>
 800bab6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	e003      	b.n	800baca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e001      	b.n	800baca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b086      	sub	sp, #24
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800bada:	2300      	movs	r3, #0
 800badc:	60fb      	str	r3, [r7, #12]
 800bade:	2300      	movs	r3, #0
 800bae0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2100      	movs	r1, #0
 800bae8:	4618      	mov	r0, r3
 800baea:	f002 fa38 	bl	800df5e <SDIO_GetResponse>
 800baee:	4603      	mov	r3, r0
 800baf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf8:	d102      	bne.n	800bb00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800bafa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bafe:	e02f      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800bb00:	f107 030c 	add.w	r3, r7, #12
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f82e 	bl	800bb68 <SD_FindSCR>
 800bb0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	e023      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d01c      	beq.n	800bb5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb2a:	041b      	lsls	r3, r3, #16
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4610      	mov	r0, r2
 800bb30:	f002 fb80 	bl	800e234 <SDMMC_CmdAppCommand>
 800bb34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d001      	beq.n	800bb40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	e00f      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2100      	movs	r1, #0
 800bb46:	4618      	mov	r0, r3
 800bb48:	f002 fbb9 	bl	800e2be <SDMMC_CmdBusWidth>
 800bb4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d001      	beq.n	800bb58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	e003      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	e001      	b.n	800bb60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bb5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb68:	b590      	push	{r4, r7, lr}
 800bb6a:	b08f      	sub	sp, #60	; 0x3c
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb72:	f7fb fd63 	bl	800763c <HAL_GetTick>
 800bb76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	2300      	movs	r3, #0
 800bb82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2108      	movs	r1, #8
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f002 fa24 	bl	800dfdc <SDMMC_CmdBlockLength>
 800bb94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d001      	beq.n	800bba0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bb9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb9e:	e0a9      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba8:	041b      	lsls	r3, r3, #16
 800bbaa:	4619      	mov	r1, r3
 800bbac:	4610      	mov	r0, r2
 800bbae:	f002 fb41 	bl	800e234 <SDMMC_CmdAppCommand>
 800bbb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d001      	beq.n	800bbbe <SD_FindSCR+0x56>
  {
    return errorstate;
 800bbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbc:	e09a      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bbbe:	f04f 33ff 	mov.w	r3, #4294967295
 800bbc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bbc8:	2330      	movs	r3, #48	; 0x30
 800bbca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bbcc:	2302      	movs	r3, #2
 800bbce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f107 0210 	add.w	r2, r7, #16
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f002 f9ce 	bl	800df84 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4618      	mov	r0, r3
 800bbee:	f002 fb88 	bl	800e302 <SDMMC_CmdSendSCR>
 800bbf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d022      	beq.n	800bc40 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bbfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbfc:	e07a      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00e      	beq.n	800bc2a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	6819      	ldr	r1, [r3, #0]
 800bc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	f107 0208 	add.w	r2, r7, #8
 800bc18:	18d4      	adds	r4, r2, r3
 800bc1a:	4608      	mov	r0, r1
 800bc1c:	f002 f92d 	bl	800de7a <SDIO_ReadFIFO>
 800bc20:	4603      	mov	r3, r0
 800bc22:	6023      	str	r3, [r4, #0]
      index++;
 800bc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc26:	3301      	adds	r3, #1
 800bc28:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bc2a:	f7fb fd07 	bl	800763c <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc38:	d102      	bne.n	800bc40 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bc3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc3e:	e059      	b.n	800bcf4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bc46:	f240 432a 	movw	r3, #1066	; 0x42a
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d0d6      	beq.n	800bbfe <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc56:	f003 0308 	and.w	r3, r3, #8
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d005      	beq.n	800bc6a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2208      	movs	r2, #8
 800bc64:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bc66:	2308      	movs	r3, #8
 800bc68:	e044      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc70:	f003 0302 	and.w	r3, r3, #2
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d005      	beq.n	800bc84 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2202      	movs	r2, #2
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc80:	2302      	movs	r3, #2
 800bc82:	e037      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc8a:	f003 0320 	and.w	r3, r3, #32
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d005      	beq.n	800bc9e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2220      	movs	r2, #32
 800bc98:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bc9a:	2320      	movs	r3, #32
 800bc9c:	e02a      	b.n	800bcf4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f240 523a 	movw	r2, #1338	; 0x53a
 800bca6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	061a      	lsls	r2, r3, #24
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	021b      	lsls	r3, r3, #8
 800bcb0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcb4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	0a1b      	lsrs	r3, r3, #8
 800bcba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcbe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	0e1b      	lsrs	r3, r3, #24
 800bcc4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcc8:	601a      	str	r2, [r3, #0]
    scr++;
 800bcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bccc:	3304      	adds	r3, #4
 800bcce:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	061a      	lsls	r2, r3, #24
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	021b      	lsls	r3, r3, #8
 800bcd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcdc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	0a1b      	lsrs	r3, r3, #8
 800bce2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bce6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	0e1b      	lsrs	r3, r3, #24
 800bcec:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcf0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	373c      	adds	r7, #60	; 0x3c
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd90      	pop	{r4, r7, pc}

0800bcfc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd08:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d03f      	beq.n	800bd96 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]
 800bd1a:	e033      	b.n	800bd84 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f002 f8aa 	bl	800de7a <SDIO_ReadFIFO>
 800bd26:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	3301      	adds	r3, #1
 800bd34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	0a1b      	lsrs	r3, r3, #8
 800bd40:	b2da      	uxtb	r2, r3
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	0c1b      	lsrs	r3, r3, #16
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	0e1b      	lsrs	r3, r3, #24
 800bd6c:	b2da      	uxtb	r2, r3
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	3301      	adds	r3, #1
 800bd82:	617b      	str	r3, [r7, #20]
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	d9c8      	bls.n	800bd1c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	68fa      	ldr	r2, [r7, #12]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	693a      	ldr	r2, [r7, #16]
 800bd94:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bd96:	bf00      	nop
 800bd98:	3718      	adds	r7, #24
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}

0800bd9e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b086      	sub	sp, #24
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6a1b      	ldr	r3, [r3, #32]
 800bdaa:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d043      	beq.n	800be40 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	e037      	b.n	800be2e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	021a      	lsls	r2, r3, #8
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	4313      	orrs	r3, r2
 800bdda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	041a      	lsls	r2, r3, #16
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	061a      	lsls	r2, r3, #24
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	4313      	orrs	r3, r2
 800be0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	3301      	adds	r3, #1
 800be10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	3b01      	subs	r3, #1
 800be16:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f107 0208 	add.w	r2, r7, #8
 800be20:	4611      	mov	r1, r2
 800be22:	4618      	mov	r0, r3
 800be24:	f002 f836 	bl	800de94 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3301      	adds	r3, #1
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b07      	cmp	r3, #7
 800be32:	d9c4      	bls.n	800bdbe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	693a      	ldr	r2, [r7, #16]
 800be3e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800be40:	bf00      	nop
 800be42:	3718      	adds	r7, #24
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d101      	bne.n	800be5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be56:	2301      	movs	r3, #1
 800be58:	e056      	b.n	800bf08 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2200      	movs	r2, #0
 800be5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be74:	6878      	ldr	r0, [r7, #4]
 800be76:	f7f9 fc8b 	bl	8005790 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2202      	movs	r2, #2
 800be7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	685a      	ldr	r2, [r3, #4]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	68db      	ldr	r3, [r3, #12]
 800bea0:	431a      	orrs	r2, r3
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	431a      	orrs	r2, r3
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	431a      	orrs	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	699b      	ldr	r3, [r3, #24]
 800beb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800beb6:	431a      	orrs	r2, r3
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	69db      	ldr	r3, [r3, #28]
 800bebc:	431a      	orrs	r2, r3
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	ea42 0103 	orr.w	r1, r2, r3
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	699b      	ldr	r3, [r3, #24]
 800bed6:	0c1b      	lsrs	r3, r3, #16
 800bed8:	f003 0104 	and.w	r1, r3, #4
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	69da      	ldr	r2, [r3, #28]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bef6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2200      	movs	r2, #0
 800befc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf06:	2300      	movs	r3, #0
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3708      	adds	r7, #8
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b088      	sub	sp, #32
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	603b      	str	r3, [r7, #0]
 800bf1c:	4613      	mov	r3, r2
 800bf1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d101      	bne.n	800bf32 <HAL_SPI_Transmit+0x22>
 800bf2e:	2302      	movs	r3, #2
 800bf30:	e11e      	b.n	800c170 <HAL_SPI_Transmit+0x260>
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf3a:	f7fb fb7f 	bl	800763c <HAL_GetTick>
 800bf3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf40:	88fb      	ldrh	r3, [r7, #6]
 800bf42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d002      	beq.n	800bf56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf50:	2302      	movs	r3, #2
 800bf52:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf54:	e103      	b.n	800c15e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d002      	beq.n	800bf62 <HAL_SPI_Transmit+0x52>
 800bf5c:	88fb      	ldrh	r3, [r7, #6]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d102      	bne.n	800bf68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf62:	2301      	movs	r3, #1
 800bf64:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf66:	e0fa      	b.n	800c15e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	2203      	movs	r2, #3
 800bf6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68ba      	ldr	r2, [r7, #8]
 800bf7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	88fa      	ldrh	r2, [r7, #6]
 800bf80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	88fa      	ldrh	r2, [r7, #6]
 800bf86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	2200      	movs	r2, #0
 800bf92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfae:	d107      	bne.n	800bfc0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	681a      	ldr	r2, [r3, #0]
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfca:	2b40      	cmp	r3, #64	; 0x40
 800bfcc:	d007      	beq.n	800bfde <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	68db      	ldr	r3, [r3, #12]
 800bfe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfe6:	d14b      	bne.n	800c080 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <HAL_SPI_Transmit+0xe6>
 800bff0:	8afb      	ldrh	r3, [r7, #22]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d13e      	bne.n	800c074 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffa:	881a      	ldrh	r2, [r3, #0]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c006:	1c9a      	adds	r2, r3, #2
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c010:	b29b      	uxth	r3, r3
 800c012:	3b01      	subs	r3, #1
 800c014:	b29a      	uxth	r2, r3
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c01a:	e02b      	b.n	800c074 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f003 0302 	and.w	r3, r3, #2
 800c026:	2b02      	cmp	r3, #2
 800c028:	d112      	bne.n	800c050 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c02e:	881a      	ldrh	r2, [r3, #0]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03a:	1c9a      	adds	r2, r3, #2
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c044:	b29b      	uxth	r3, r3
 800c046:	3b01      	subs	r3, #1
 800c048:	b29a      	uxth	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	86da      	strh	r2, [r3, #54]	; 0x36
 800c04e:	e011      	b.n	800c074 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c050:	f7fb faf4 	bl	800763c <HAL_GetTick>
 800c054:	4602      	mov	r2, r0
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d803      	bhi.n	800c068 <HAL_SPI_Transmit+0x158>
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c066:	d102      	bne.n	800c06e <HAL_SPI_Transmit+0x15e>
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c06e:	2303      	movs	r3, #3
 800c070:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c072:	e074      	b.n	800c15e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c078:	b29b      	uxth	r3, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1ce      	bne.n	800c01c <HAL_SPI_Transmit+0x10c>
 800c07e:	e04c      	b.n	800c11a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <HAL_SPI_Transmit+0x17e>
 800c088:	8afb      	ldrh	r3, [r7, #22]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d140      	bne.n	800c110 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	330c      	adds	r3, #12
 800c098:	7812      	ldrb	r2, [r2, #0]
 800c09a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	b29a      	uxth	r2, r3
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c0b4:	e02c      	b.n	800c110 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f003 0302 	and.w	r3, r3, #2
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d113      	bne.n	800c0ec <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	330c      	adds	r3, #12
 800c0ce:	7812      	ldrb	r2, [r2, #0]
 800c0d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d6:	1c5a      	adds	r2, r3, #1
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	86da      	strh	r2, [r3, #54]	; 0x36
 800c0ea:	e011      	b.n	800c110 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ec:	f7fb faa6 	bl	800763c <HAL_GetTick>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	69bb      	ldr	r3, [r7, #24]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d803      	bhi.n	800c104 <HAL_SPI_Transmit+0x1f4>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c102:	d102      	bne.n	800c10a <HAL_SPI_Transmit+0x1fa>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d102      	bne.n	800c110 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c10e:	e026      	b.n	800c15e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c114:	b29b      	uxth	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1cd      	bne.n	800c0b6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 fba4 	bl	800c86c <SPI_EndRxTxTransaction>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2220      	movs	r2, #32
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d10a      	bne.n	800c14e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c138:	2300      	movs	r3, #0
 800c13a:	613b      	str	r3, [r7, #16]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	613b      	str	r3, [r7, #16]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	613b      	str	r3, [r7, #16]
 800c14c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c152:	2b00      	cmp	r3, #0
 800c154:	d002      	beq.n	800c15c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	77fb      	strb	r3, [r7, #31]
 800c15a:	e000      	b.n	800c15e <HAL_SPI_Transmit+0x24e>
  }

error:
 800c15c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	2201      	movs	r2, #1
 800c162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2200      	movs	r2, #0
 800c16a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c16e:	7ffb      	ldrb	r3, [r7, #31]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3720      	adds	r7, #32
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af02      	add	r7, sp, #8
 800c17e:	60f8      	str	r0, [r7, #12]
 800c180:	60b9      	str	r1, [r7, #8]
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	4613      	mov	r3, r2
 800c186:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c194:	d112      	bne.n	800c1bc <HAL_SPI_Receive+0x44>
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	689b      	ldr	r3, [r3, #8]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10e      	bne.n	800c1bc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2204      	movs	r2, #4
 800c1a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c1a6:	88fa      	ldrh	r2, [r7, #6]
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	9300      	str	r3, [sp, #0]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	68f8      	ldr	r0, [r7, #12]
 800c1b4:	f000 f8e9 	bl	800c38a <HAL_SPI_TransmitReceive>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	e0e2      	b.n	800c382 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d101      	bne.n	800c1ca <HAL_SPI_Receive+0x52>
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	e0db      	b.n	800c382 <HAL_SPI_Receive+0x20a>
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1d2:	f7fb fa33 	bl	800763c <HAL_GetTick>
 800c1d6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d002      	beq.n	800c1ea <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c1e4:	2302      	movs	r3, #2
 800c1e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1e8:	e0c2      	b.n	800c370 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d002      	beq.n	800c1f6 <HAL_SPI_Receive+0x7e>
 800c1f0:	88fb      	ldrh	r3, [r7, #6]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d102      	bne.n	800c1fc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c1f6:	2301      	movs	r3, #1
 800c1f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1fa:	e0b9      	b.n	800c370 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2204      	movs	r2, #4
 800c200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	2200      	movs	r2, #0
 800c208:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	88fa      	ldrh	r2, [r7, #6]
 800c214:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	88fa      	ldrh	r2, [r7, #6]
 800c21a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c242:	d107      	bne.n	800c254 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c252:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25e:	2b40      	cmp	r3, #64	; 0x40
 800c260:	d007      	beq.n	800c272 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c270:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d162      	bne.n	800c340 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c27a:	e02e      	b.n	800c2da <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	689b      	ldr	r3, [r3, #8]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b01      	cmp	r3, #1
 800c288:	d115      	bne.n	800c2b6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f103 020c 	add.w	r2, r3, #12
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	7812      	ldrb	r2, [r2, #0]
 800c298:	b2d2      	uxtb	r2, r2
 800c29a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a0:	1c5a      	adds	r2, r3, #1
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	b29a      	uxth	r2, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2b4:	e011      	b.n	800c2da <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2b6:	f7fb f9c1 	bl	800763c <HAL_GetTick>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	1ad3      	subs	r3, r2, r3
 800c2c0:	683a      	ldr	r2, [r7, #0]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d803      	bhi.n	800c2ce <HAL_SPI_Receive+0x156>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2cc:	d102      	bne.n	800c2d4 <HAL_SPI_Receive+0x15c>
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d102      	bne.n	800c2da <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c2d4:	2303      	movs	r3, #3
 800c2d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2d8:	e04a      	b.n	800c370 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1cb      	bne.n	800c27c <HAL_SPI_Receive+0x104>
 800c2e4:	e031      	b.n	800c34a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	f003 0301 	and.w	r3, r3, #1
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d113      	bne.n	800c31c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	68da      	ldr	r2, [r3, #12]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fe:	b292      	uxth	r2, r2
 800c300:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c306:	1c9a      	adds	r2, r3, #2
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c310:	b29b      	uxth	r3, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	b29a      	uxth	r2, r3
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c31a:	e011      	b.n	800c340 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c31c:	f7fb f98e 	bl	800763c <HAL_GetTick>
 800c320:	4602      	mov	r2, r0
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	1ad3      	subs	r3, r2, r3
 800c326:	683a      	ldr	r2, [r7, #0]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d803      	bhi.n	800c334 <HAL_SPI_Receive+0x1bc>
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c332:	d102      	bne.n	800c33a <HAL_SPI_Receive+0x1c2>
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c33a:	2303      	movs	r3, #3
 800c33c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c33e:	e017      	b.n	800c370 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c344:	b29b      	uxth	r3, r3
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1cd      	bne.n	800c2e6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	6839      	ldr	r1, [r7, #0]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f000 fa27 	bl	800c7a2 <SPI_EndRxTransaction>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d002      	beq.n	800c360 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	2220      	movs	r2, #32
 800c35e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c368:	2301      	movs	r3, #1
 800c36a:	75fb      	strb	r3, [r7, #23]
 800c36c:	e000      	b.n	800c370 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c36e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2201      	movs	r2, #1
 800c374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2200      	movs	r2, #0
 800c37c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c380:	7dfb      	ldrb	r3, [r7, #23]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3718      	adds	r7, #24
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}

0800c38a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b08c      	sub	sp, #48	; 0x30
 800c38e:	af00      	add	r7, sp, #0
 800c390:	60f8      	str	r0, [r7, #12]
 800c392:	60b9      	str	r1, [r7, #8]
 800c394:	607a      	str	r2, [r7, #4]
 800c396:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c398:	2301      	movs	r3, #1
 800c39a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c39c:	2300      	movs	r3, #0
 800c39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <HAL_SPI_TransmitReceive+0x26>
 800c3ac:	2302      	movs	r3, #2
 800c3ae:	e18a      	b.n	800c6c6 <HAL_SPI_TransmitReceive+0x33c>
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c3b8:	f7fb f940 	bl	800763c <HAL_GetTick>
 800c3bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c3ce:	887b      	ldrh	r3, [r7, #2]
 800c3d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c3d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d00f      	beq.n	800c3fa <HAL_SPI_TransmitReceive+0x70>
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3e0:	d107      	bne.n	800c3f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d103      	bne.n	800c3f2 <HAL_SPI_TransmitReceive+0x68>
 800c3ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	d003      	beq.n	800c3fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c3f2:	2302      	movs	r3, #2
 800c3f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3f8:	e15b      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d005      	beq.n	800c40c <HAL_SPI_TransmitReceive+0x82>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <HAL_SPI_TransmitReceive+0x82>
 800c406:	887b      	ldrh	r3, [r7, #2]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d103      	bne.n	800c414 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c412:	e14e      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b04      	cmp	r3, #4
 800c41e:	d003      	beq.n	800c428 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2205      	movs	r2, #5
 800c424:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	887a      	ldrh	r2, [r7, #2]
 800c438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	887a      	ldrh	r2, [r7, #2]
 800c43e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	68ba      	ldr	r2, [r7, #8]
 800c444:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	887a      	ldrh	r2, [r7, #2]
 800c44a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	887a      	ldrh	r2, [r7, #2]
 800c450:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2200      	movs	r2, #0
 800c456:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c468:	2b40      	cmp	r3, #64	; 0x40
 800c46a:	d007      	beq.n	800c47c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c47a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c484:	d178      	bne.n	800c578 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d002      	beq.n	800c494 <HAL_SPI_TransmitReceive+0x10a>
 800c48e:	8b7b      	ldrh	r3, [r7, #26]
 800c490:	2b01      	cmp	r3, #1
 800c492:	d166      	bne.n	800c562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c498:	881a      	ldrh	r2, [r3, #0]
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a4:	1c9a      	adds	r2, r3, #2
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	b29a      	uxth	r2, r3
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4b8:	e053      	b.n	800c562 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	f003 0302 	and.w	r3, r3, #2
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d11b      	bne.n	800c500 <HAL_SPI_TransmitReceive+0x176>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d016      	beq.n	800c500 <HAL_SPI_TransmitReceive+0x176>
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d113      	bne.n	800c500 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4dc:	881a      	ldrh	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4e8:	1c9a      	adds	r2, r3, #2
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d119      	bne.n	800c542 <HAL_SPI_TransmitReceive+0x1b8>
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c512:	b29b      	uxth	r3, r3
 800c514:	2b00      	cmp	r3, #0
 800c516:	d014      	beq.n	800c542 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	68da      	ldr	r2, [r3, #12]
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c522:	b292      	uxth	r2, r2
 800c524:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c52a:	1c9a      	adds	r2, r3, #2
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c534:	b29b      	uxth	r3, r3
 800c536:	3b01      	subs	r3, #1
 800c538:	b29a      	uxth	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c53e:	2301      	movs	r3, #1
 800c540:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c542:	f7fb f87b 	bl	800763c <HAL_GetTick>
 800c546:	4602      	mov	r2, r0
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	1ad3      	subs	r3, r2, r3
 800c54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c54e:	429a      	cmp	r2, r3
 800c550:	d807      	bhi.n	800c562 <HAL_SPI_TransmitReceive+0x1d8>
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c558:	d003      	beq.n	800c562 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c55a:	2303      	movs	r3, #3
 800c55c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c560:	e0a7      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c566:	b29b      	uxth	r3, r3
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1a6      	bne.n	800c4ba <HAL_SPI_TransmitReceive+0x130>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c570:	b29b      	uxth	r3, r3
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1a1      	bne.n	800c4ba <HAL_SPI_TransmitReceive+0x130>
 800c576:	e07c      	b.n	800c672 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	685b      	ldr	r3, [r3, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <HAL_SPI_TransmitReceive+0x1fc>
 800c580:	8b7b      	ldrh	r3, [r7, #26]
 800c582:	2b01      	cmp	r3, #1
 800c584:	d16b      	bne.n	800c65e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	330c      	adds	r3, #12
 800c590:	7812      	ldrb	r2, [r2, #0]
 800c592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c598:	1c5a      	adds	r2, r3, #1
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	3b01      	subs	r3, #1
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5ac:	e057      	b.n	800c65e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	f003 0302 	and.w	r3, r3, #2
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d11c      	bne.n	800c5f6 <HAL_SPI_TransmitReceive+0x26c>
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d017      	beq.n	800c5f6 <HAL_SPI_TransmitReceive+0x26c>
 800c5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d114      	bne.n	800c5f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	330c      	adds	r3, #12
 800c5d6:	7812      	ldrb	r2, [r2, #0]
 800c5d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5de:	1c5a      	adds	r2, r3, #1
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	b29a      	uxth	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b01      	cmp	r3, #1
 800c602:	d119      	bne.n	800c638 <HAL_SPI_TransmitReceive+0x2ae>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c608:	b29b      	uxth	r3, r3
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d014      	beq.n	800c638 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c618:	b2d2      	uxtb	r2, r2
 800c61a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	1c5a      	adds	r2, r3, #1
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c62a:	b29b      	uxth	r3, r3
 800c62c:	3b01      	subs	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c634:	2301      	movs	r3, #1
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c638:	f7fb f800 	bl	800763c <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c644:	429a      	cmp	r2, r3
 800c646:	d803      	bhi.n	800c650 <HAL_SPI_TransmitReceive+0x2c6>
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64e:	d102      	bne.n	800c656 <HAL_SPI_TransmitReceive+0x2cc>
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c65c:	e029      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1a2      	bne.n	800c5ae <HAL_SPI_TransmitReceive+0x224>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d19d      	bne.n	800c5ae <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c674:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c676:	68f8      	ldr	r0, [r7, #12]
 800c678:	f000 f8f8 	bl	800c86c <SPI_EndRxTxTransaction>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d006      	beq.n	800c690 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	2220      	movs	r2, #32
 800c68c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c68e:	e010      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d10b      	bne.n	800c6b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c698:	2300      	movs	r3, #0
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	617b      	str	r3, [r7, #20]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	617b      	str	r3, [r7, #20]
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	e000      	b.n	800c6b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c6b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c6c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3730      	adds	r7, #48	; 0x30
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}

0800c6ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c6ce:	b580      	push	{r7, lr}
 800c6d0:	b084      	sub	sp, #16
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	60b9      	str	r1, [r7, #8]
 800c6d8:	603b      	str	r3, [r7, #0]
 800c6da:	4613      	mov	r3, r2
 800c6dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c6de:	e04c      	b.n	800c77a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6e6:	d048      	beq.n	800c77a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c6e8:	f7fa ffa8 	bl	800763c <HAL_GetTick>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	683a      	ldr	r2, [r7, #0]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d902      	bls.n	800c6fe <SPI_WaitFlagStateUntilTimeout+0x30>
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d13d      	bne.n	800c77a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685a      	ldr	r2, [r3, #4]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c70c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c716:	d111      	bne.n	800c73c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c720:	d004      	beq.n	800c72c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	689b      	ldr	r3, [r3, #8]
 800c726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c72a:	d107      	bne.n	800c73c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c73a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c744:	d10f      	bne.n	800c766 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	681a      	ldr	r2, [r3, #0]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681a      	ldr	r2, [r3, #0]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c764:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2201      	movs	r2, #1
 800c76a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e00f      	b.n	800c79a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	689a      	ldr	r2, [r3, #8]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	4013      	ands	r3, r2
 800c784:	68ba      	ldr	r2, [r7, #8]
 800c786:	429a      	cmp	r2, r3
 800c788:	bf0c      	ite	eq
 800c78a:	2301      	moveq	r3, #1
 800c78c:	2300      	movne	r3, #0
 800c78e:	b2db      	uxtb	r3, r3
 800c790:	461a      	mov	r2, r3
 800c792:	79fb      	ldrb	r3, [r7, #7]
 800c794:	429a      	cmp	r2, r3
 800c796:	d1a3      	bne.n	800c6e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b086      	sub	sp, #24
 800c7a6:	af02      	add	r7, sp, #8
 800c7a8:	60f8      	str	r0, [r7, #12]
 800c7aa:	60b9      	str	r1, [r7, #8]
 800c7ac:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7b6:	d111      	bne.n	800c7dc <SPI_EndRxTransaction+0x3a>
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7c0:	d004      	beq.n	800c7cc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ca:	d107      	bne.n	800c7dc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681a      	ldr	r2, [r3, #0]
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7da:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7e4:	d12a      	bne.n	800c83c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ee:	d012      	beq.n	800c816 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	9300      	str	r3, [sp, #0]
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2180      	movs	r1, #128	; 0x80
 800c7fa:	68f8      	ldr	r0, [r7, #12]
 800c7fc:	f7ff ff67 	bl	800c6ce <SPI_WaitFlagStateUntilTimeout>
 800c800:	4603      	mov	r3, r0
 800c802:	2b00      	cmp	r3, #0
 800c804:	d02d      	beq.n	800c862 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c80a:	f043 0220 	orr.w	r2, r3, #32
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c812:	2303      	movs	r3, #3
 800c814:	e026      	b.n	800c864 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	2200      	movs	r2, #0
 800c81e:	2101      	movs	r1, #1
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	f7ff ff54 	bl	800c6ce <SPI_WaitFlagStateUntilTimeout>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d01a      	beq.n	800c862 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c830:	f043 0220 	orr.w	r2, r3, #32
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c838:	2303      	movs	r3, #3
 800c83a:	e013      	b.n	800c864 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	2200      	movs	r2, #0
 800c844:	2101      	movs	r1, #1
 800c846:	68f8      	ldr	r0, [r7, #12]
 800c848:	f7ff ff41 	bl	800c6ce <SPI_WaitFlagStateUntilTimeout>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d007      	beq.n	800c862 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c856:	f043 0220 	orr.w	r2, r3, #32
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c85e:	2303      	movs	r3, #3
 800c860:	e000      	b.n	800c864 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b088      	sub	sp, #32
 800c870:	af02      	add	r7, sp, #8
 800c872:	60f8      	str	r0, [r7, #12]
 800c874:	60b9      	str	r1, [r7, #8]
 800c876:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c878:	4b1b      	ldr	r3, [pc, #108]	; (800c8e8 <SPI_EndRxTxTransaction+0x7c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	4a1b      	ldr	r2, [pc, #108]	; (800c8ec <SPI_EndRxTxTransaction+0x80>)
 800c87e:	fba2 2303 	umull	r2, r3, r2, r3
 800c882:	0d5b      	lsrs	r3, r3, #21
 800c884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c888:	fb02 f303 	mul.w	r3, r2, r3
 800c88c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c896:	d112      	bne.n	800c8be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	9300      	str	r3, [sp, #0]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	2180      	movs	r1, #128	; 0x80
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f7ff ff13 	bl	800c6ce <SPI_WaitFlagStateUntilTimeout>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d016      	beq.n	800c8dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8b2:	f043 0220 	orr.w	r2, r3, #32
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	e00f      	b.n	800c8de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d00a      	beq.n	800c8da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	3b01      	subs	r3, #1
 800c8c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	689b      	ldr	r3, [r3, #8]
 800c8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8d4:	2b80      	cmp	r3, #128	; 0x80
 800c8d6:	d0f2      	beq.n	800c8be <SPI_EndRxTxTransaction+0x52>
 800c8d8:	e000      	b.n	800c8dc <SPI_EndRxTxTransaction+0x70>
        break;
 800c8da:	bf00      	nop
  }

  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3718      	adds	r7, #24
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	20000000 	.word	0x20000000
 800c8ec:	165e9f81 	.word	0x165e9f81

0800c8f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b082      	sub	sp, #8
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d101      	bne.n	800c902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e01d      	b.n	800c93e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c908:	b2db      	uxtb	r3, r3
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d106      	bne.n	800c91c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7f8 fff6 	bl	8005908 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2202      	movs	r2, #2
 800c920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3304      	adds	r3, #4
 800c92c:	4619      	mov	r1, r3
 800c92e:	4610      	mov	r0, r2
 800c930:	f000 fb56 	bl	800cfe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68da      	ldr	r2, [r3, #12]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f042 0201 	orr.w	r2, r2, #1
 800c95c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	689b      	ldr	r3, [r3, #8]
 800c964:	f003 0307 	and.w	r3, r3, #7
 800c968:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2b06      	cmp	r3, #6
 800c96e:	d007      	beq.n	800c980 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681a      	ldr	r2, [r3, #0]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	f042 0201 	orr.w	r2, r2, #1
 800c97e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3714      	adds	r7, #20
 800c986:	46bd      	mov	sp, r7
 800c988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98c:	4770      	bx	lr

0800c98e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e01d      	b.n	800c9dc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d106      	bne.n	800c9ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7f8 ff33 	bl	8005820 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	f000 fb07 	bl	800cfe0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9da:	2300      	movs	r3, #0
}
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3708      	adds	r7, #8
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bd80      	pop	{r7, pc}

0800c9e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fd42 	bl	800d480 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a15      	ldr	r2, [pc, #84]	; (800ca58 <HAL_TIM_PWM_Start+0x74>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d004      	beq.n	800ca10 <HAL_TIM_PWM_Start+0x2c>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a14      	ldr	r2, [pc, #80]	; (800ca5c <HAL_TIM_PWM_Start+0x78>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d101      	bne.n	800ca14 <HAL_TIM_PWM_Start+0x30>
 800ca10:	2301      	movs	r3, #1
 800ca12:	e000      	b.n	800ca16 <HAL_TIM_PWM_Start+0x32>
 800ca14:	2300      	movs	r3, #0
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d007      	beq.n	800ca2a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b06      	cmp	r3, #6
 800ca3a:	d007      	beq.n	800ca4c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f042 0201 	orr.w	r2, r2, #1
 800ca4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	40010000 	.word	0x40010000
 800ca5c:	40010400 	.word	0x40010400

0800ca60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b086      	sub	sp, #24
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	e083      	b.n	800cb7c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7f8 ffcd 	bl	8005a28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2202      	movs	r2, #2
 800ca92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6812      	ldr	r2, [r2, #0]
 800caa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800caa4:	f023 0307 	bic.w	r3, r3, #7
 800caa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	3304      	adds	r3, #4
 800cab2:	4619      	mov	r1, r3
 800cab4:	4610      	mov	r0, r2
 800cab6:	f000 fa93 	bl	800cfe0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	6a1b      	ldr	r3, [r3, #32]
 800cad0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	697a      	ldr	r2, [r7, #20]
 800cad8:	4313      	orrs	r3, r2
 800cada:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800cadc:	693b      	ldr	r3, [r7, #16]
 800cade:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cae2:	f023 0303 	bic.w	r3, r3, #3
 800cae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	689a      	ldr	r2, [r3, #8]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	021b      	lsls	r3, r3, #8
 800caf2:	4313      	orrs	r3, r2
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800cb00:	f023 030c 	bic.w	r3, r3, #12
 800cb04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cb0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cb10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68da      	ldr	r2, [r3, #12]
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	69db      	ldr	r3, [r3, #28]
 800cb1a:	021b      	lsls	r3, r3, #8
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	011a      	lsls	r2, r3, #4
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6a1b      	ldr	r3, [r3, #32]
 800cb2e:	031b      	lsls	r3, r3, #12
 800cb30:	4313      	orrs	r3, r2
 800cb32:	693a      	ldr	r2, [r7, #16]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800cb3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800cb46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	011b      	lsls	r3, r3, #4
 800cb52:	4313      	orrs	r3, r2
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	697a      	ldr	r2, [r7, #20]
 800cb60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	693a      	ldr	r2, [r7, #16]
 800cb68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2201      	movs	r2, #1
 800cb76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3718      	adds	r7, #24
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d002      	beq.n	800cb9a <HAL_TIM_Encoder_Start+0x16>
 800cb94:	2b04      	cmp	r3, #4
 800cb96:	d008      	beq.n	800cbaa <HAL_TIM_Encoder_Start+0x26>
 800cb98:	e00f      	b.n	800cbba <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2201      	movs	r2, #1
 800cba0:	2100      	movs	r1, #0
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fc6c 	bl	800d480 <TIM_CCxChannelCmd>
      break;
 800cba8:	e016      	b.n	800cbd8 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	2104      	movs	r1, #4
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f000 fc64 	bl	800d480 <TIM_CCxChannelCmd>
      break;
 800cbb8:	e00e      	b.n	800cbd8 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2201      	movs	r2, #1
 800cbc0:	2100      	movs	r1, #0
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f000 fc5c 	bl	800d480 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2201      	movs	r2, #1
 800cbce:	2104      	movs	r1, #4
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fc55 	bl	800d480 <TIM_CCxChannelCmd>
      break;
 800cbd6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f042 0201 	orr.w	r2, r2, #1
 800cbe6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3708      	adds	r7, #8
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbf2:	b580      	push	{r7, lr}
 800cbf4:	b082      	sub	sp, #8
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	691b      	ldr	r3, [r3, #16]
 800cc00:	f003 0302 	and.w	r3, r3, #2
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d122      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	f003 0302 	and.w	r3, r3, #2
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d11b      	bne.n	800cc4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f06f 0202 	mvn.w	r2, #2
 800cc1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2201      	movs	r2, #1
 800cc24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	699b      	ldr	r3, [r3, #24]
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d003      	beq.n	800cc3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 f9b5 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cc3a:	e005      	b.n	800cc48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f9a7 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 f9b8 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	f003 0304 	and.w	r3, r3, #4
 800cc58:	2b04      	cmp	r3, #4
 800cc5a:	d122      	bne.n	800cca2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	f003 0304 	and.w	r3, r3, #4
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d11b      	bne.n	800cca2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f06f 0204 	mvn.w	r2, #4
 800cc72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2202      	movs	r2, #2
 800cc78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	699b      	ldr	r3, [r3, #24]
 800cc80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d003      	beq.n	800cc90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 f98b 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cc8e:	e005      	b.n	800cc9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 f97d 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f98e 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	f003 0308 	and.w	r3, r3, #8
 800ccac:	2b08      	cmp	r3, #8
 800ccae:	d122      	bne.n	800ccf6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	f003 0308 	and.w	r3, r3, #8
 800ccba:	2b08      	cmp	r3, #8
 800ccbc:	d11b      	bne.n	800ccf6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f06f 0208 	mvn.w	r2, #8
 800ccc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2204      	movs	r2, #4
 800cccc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	69db      	ldr	r3, [r3, #28]
 800ccd4:	f003 0303 	and.w	r3, r3, #3
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d003      	beq.n	800cce4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f961 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cce2:	e005      	b.n	800ccf0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 f953 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f000 f964 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	691b      	ldr	r3, [r3, #16]
 800ccfc:	f003 0310 	and.w	r3, r3, #16
 800cd00:	2b10      	cmp	r3, #16
 800cd02:	d122      	bne.n	800cd4a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f003 0310 	and.w	r3, r3, #16
 800cd0e:	2b10      	cmp	r3, #16
 800cd10:	d11b      	bne.n	800cd4a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f06f 0210 	mvn.w	r2, #16
 800cd1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2208      	movs	r2, #8
 800cd20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	69db      	ldr	r3, [r3, #28]
 800cd28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f937 	bl	800cfa4 <HAL_TIM_IC_CaptureCallback>
 800cd36:	e005      	b.n	800cd44 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f929 	bl	800cf90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 f93a 	bl	800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	2200      	movs	r2, #0
 800cd48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	691b      	ldr	r3, [r3, #16]
 800cd50:	f003 0301 	and.w	r3, r3, #1
 800cd54:	2b01      	cmp	r3, #1
 800cd56:	d10e      	bne.n	800cd76 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	68db      	ldr	r3, [r3, #12]
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d107      	bne.n	800cd76 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f06f 0201 	mvn.w	r2, #1
 800cd6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7f7 fb31 	bl	80043d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	691b      	ldr	r3, [r3, #16]
 800cd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd80:	2b80      	cmp	r3, #128	; 0x80
 800cd82:	d10e      	bne.n	800cda2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd8e:	2b80      	cmp	r3, #128	; 0x80
 800cd90:	d107      	bne.n	800cda2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fc6d 	bl	800d67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdac:	2b40      	cmp	r3, #64	; 0x40
 800cdae:	d10e      	bne.n	800cdce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdba:	2b40      	cmp	r3, #64	; 0x40
 800cdbc:	d107      	bne.n	800cdce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cdc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 f8ff 	bl	800cfcc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	f003 0320 	and.w	r3, r3, #32
 800cdd8:	2b20      	cmp	r3, #32
 800cdda:	d10e      	bne.n	800cdfa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b20      	cmp	r3, #32
 800cde8:	d107      	bne.n	800cdfa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f06f 0220 	mvn.w	r2, #32
 800cdf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f000 fc37 	bl	800d668 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdfa:	bf00      	nop
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
	...

0800ce04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b084      	sub	sp, #16
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	d101      	bne.n	800ce1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e0b4      	b.n	800cf88 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2202      	movs	r2, #2
 800ce2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2b0c      	cmp	r3, #12
 800ce32:	f200 809f 	bhi.w	800cf74 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ce36:	a201      	add	r2, pc, #4	; (adr r2, 800ce3c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ce38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce3c:	0800ce71 	.word	0x0800ce71
 800ce40:	0800cf75 	.word	0x0800cf75
 800ce44:	0800cf75 	.word	0x0800cf75
 800ce48:	0800cf75 	.word	0x0800cf75
 800ce4c:	0800ceb1 	.word	0x0800ceb1
 800ce50:	0800cf75 	.word	0x0800cf75
 800ce54:	0800cf75 	.word	0x0800cf75
 800ce58:	0800cf75 	.word	0x0800cf75
 800ce5c:	0800cef3 	.word	0x0800cef3
 800ce60:	0800cf75 	.word	0x0800cf75
 800ce64:	0800cf75 	.word	0x0800cf75
 800ce68:	0800cf75 	.word	0x0800cf75
 800ce6c:	0800cf33 	.word	0x0800cf33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68b9      	ldr	r1, [r7, #8]
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 f952 	bl	800d120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	699a      	ldr	r2, [r3, #24]
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	f042 0208 	orr.w	r2, r2, #8
 800ce8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	699a      	ldr	r2, [r3, #24]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f022 0204 	bic.w	r2, r2, #4
 800ce9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	6999      	ldr	r1, [r3, #24]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	430a      	orrs	r2, r1
 800ceac:	619a      	str	r2, [r3, #24]
      break;
 800ceae:	e062      	b.n	800cf76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	68b9      	ldr	r1, [r7, #8]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f000 f9a2 	bl	800d200 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	699a      	ldr	r2, [r3, #24]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ceca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	699a      	ldr	r2, [r3, #24]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6999      	ldr	r1, [r3, #24]
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	691b      	ldr	r3, [r3, #16]
 800cee6:	021a      	lsls	r2, r3, #8
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	619a      	str	r2, [r3, #24]
      break;
 800cef0:	e041      	b.n	800cf76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68b9      	ldr	r1, [r7, #8]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f000 f9f7 	bl	800d2ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	69da      	ldr	r2, [r3, #28]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f042 0208 	orr.w	r2, r2, #8
 800cf0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	69da      	ldr	r2, [r3, #28]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f022 0204 	bic.w	r2, r2, #4
 800cf1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	69d9      	ldr	r1, [r3, #28]
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	691a      	ldr	r2, [r3, #16]
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	430a      	orrs	r2, r1
 800cf2e:	61da      	str	r2, [r3, #28]
      break;
 800cf30:	e021      	b.n	800cf76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68b9      	ldr	r1, [r7, #8]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fa4b 	bl	800d3d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	69da      	ldr	r2, [r3, #28]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	69da      	ldr	r2, [r3, #28]
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69d9      	ldr	r1, [r3, #28]
 800cf64:	68bb      	ldr	r3, [r7, #8]
 800cf66:	691b      	ldr	r3, [r3, #16]
 800cf68:	021a      	lsls	r2, r3, #8
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	61da      	str	r2, [r3, #28]
      break;
 800cf72:	e000      	b.n	800cf76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cf74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3710      	adds	r7, #16
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf90:	b480      	push	{r7}
 800cf92:	b083      	sub	sp, #12
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf98:	bf00      	nop
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cfc0:	bf00      	nop
 800cfc2:	370c      	adds	r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfd4:	bf00      	nop
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	4a40      	ldr	r2, [pc, #256]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800cff4:	4293      	cmp	r3, r2
 800cff6:	d013      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cffe:	d00f      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	4a3d      	ldr	r2, [pc, #244]	; (800d0f8 <TIM_Base_SetConfig+0x118>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d00b      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4a3c      	ldr	r2, [pc, #240]	; (800d0fc <TIM_Base_SetConfig+0x11c>)
 800d00c:	4293      	cmp	r3, r2
 800d00e:	d007      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	4a3b      	ldr	r2, [pc, #236]	; (800d100 <TIM_Base_SetConfig+0x120>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d003      	beq.n	800d020 <TIM_Base_SetConfig+0x40>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	4a3a      	ldr	r2, [pc, #232]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d108      	bne.n	800d032 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	68fa      	ldr	r2, [r7, #12]
 800d02e:	4313      	orrs	r3, r2
 800d030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	4a2f      	ldr	r2, [pc, #188]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d02b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d040:	d027      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	4a2c      	ldr	r2, [pc, #176]	; (800d0f8 <TIM_Base_SetConfig+0x118>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d023      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	4a2b      	ldr	r2, [pc, #172]	; (800d0fc <TIM_Base_SetConfig+0x11c>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d01f      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	4a2a      	ldr	r2, [pc, #168]	; (800d100 <TIM_Base_SetConfig+0x120>)
 800d056:	4293      	cmp	r3, r2
 800d058:	d01b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	4a29      	ldr	r2, [pc, #164]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d017      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	4a28      	ldr	r2, [pc, #160]	; (800d108 <TIM_Base_SetConfig+0x128>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d013      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	4a27      	ldr	r2, [pc, #156]	; (800d10c <TIM_Base_SetConfig+0x12c>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00f      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	4a26      	ldr	r2, [pc, #152]	; (800d110 <TIM_Base_SetConfig+0x130>)
 800d076:	4293      	cmp	r3, r2
 800d078:	d00b      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4a25      	ldr	r2, [pc, #148]	; (800d114 <TIM_Base_SetConfig+0x134>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d007      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	4a24      	ldr	r2, [pc, #144]	; (800d118 <TIM_Base_SetConfig+0x138>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d003      	beq.n	800d092 <TIM_Base_SetConfig+0xb2>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	4a23      	ldr	r2, [pc, #140]	; (800d11c <TIM_Base_SetConfig+0x13c>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d108      	bne.n	800d0a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	68fa      	ldr	r2, [r7, #12]
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	695b      	ldr	r3, [r3, #20]
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	689a      	ldr	r2, [r3, #8]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	4a0a      	ldr	r2, [pc, #40]	; (800d0f4 <TIM_Base_SetConfig+0x114>)
 800d0cc:	4293      	cmp	r3, r2
 800d0ce:	d003      	beq.n	800d0d8 <TIM_Base_SetConfig+0xf8>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	4a0c      	ldr	r2, [pc, #48]	; (800d104 <TIM_Base_SetConfig+0x124>)
 800d0d4:	4293      	cmp	r3, r2
 800d0d6:	d103      	bne.n	800d0e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	691a      	ldr	r2, [r3, #16]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	615a      	str	r2, [r3, #20]
}
 800d0e6:	bf00      	nop
 800d0e8:	3714      	adds	r7, #20
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	40010000 	.word	0x40010000
 800d0f8:	40000400 	.word	0x40000400
 800d0fc:	40000800 	.word	0x40000800
 800d100:	40000c00 	.word	0x40000c00
 800d104:	40010400 	.word	0x40010400
 800d108:	40014000 	.word	0x40014000
 800d10c:	40014400 	.word	0x40014400
 800d110:	40014800 	.word	0x40014800
 800d114:	40001800 	.word	0x40001800
 800d118:	40001c00 	.word	0x40001c00
 800d11c:	40002000 	.word	0x40002000

0800d120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d120:	b480      	push	{r7}
 800d122:	b087      	sub	sp, #28
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6a1b      	ldr	r3, [r3, #32]
 800d12e:	f023 0201 	bic.w	r2, r3, #1
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	699b      	ldr	r3, [r3, #24]
 800d146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d14e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	f023 0303 	bic.w	r3, r3, #3
 800d156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	4313      	orrs	r3, r2
 800d160:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f023 0302 	bic.w	r3, r3, #2
 800d168:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	689b      	ldr	r3, [r3, #8]
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	4313      	orrs	r3, r2
 800d172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a20      	ldr	r2, [pc, #128]	; (800d1f8 <TIM_OC1_SetConfig+0xd8>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d003      	beq.n	800d184 <TIM_OC1_SetConfig+0x64>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4a1f      	ldr	r2, [pc, #124]	; (800d1fc <TIM_OC1_SetConfig+0xdc>)
 800d180:	4293      	cmp	r3, r2
 800d182:	d10c      	bne.n	800d19e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f023 0308 	bic.w	r3, r3, #8
 800d18a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	4313      	orrs	r3, r2
 800d194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	f023 0304 	bic.w	r3, r3, #4
 800d19c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <TIM_OC1_SetConfig+0xd8>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d003      	beq.n	800d1ae <TIM_OC1_SetConfig+0x8e>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	4a14      	ldr	r2, [pc, #80]	; (800d1fc <TIM_OC1_SetConfig+0xdc>)
 800d1aa:	4293      	cmp	r3, r2
 800d1ac:	d111      	bne.n	800d1d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d1b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d1bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	693a      	ldr	r2, [r7, #16]
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	693a      	ldr	r2, [r7, #16]
 800d1ce:	4313      	orrs	r3, r2
 800d1d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	693a      	ldr	r2, [r7, #16]
 800d1d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	68fa      	ldr	r2, [r7, #12]
 800d1dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	685a      	ldr	r2, [r3, #4]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	697a      	ldr	r2, [r7, #20]
 800d1ea:	621a      	str	r2, [r3, #32]
}
 800d1ec:	bf00      	nop
 800d1ee:	371c      	adds	r7, #28
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr
 800d1f8:	40010000 	.word	0x40010000
 800d1fc:	40010400 	.word	0x40010400

0800d200 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a1b      	ldr	r3, [r3, #32]
 800d20e:	f023 0210 	bic.w	r2, r3, #16
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6a1b      	ldr	r3, [r3, #32]
 800d21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	685b      	ldr	r3, [r3, #4]
 800d220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	021b      	lsls	r3, r3, #8
 800d23e:	68fa      	ldr	r2, [r7, #12]
 800d240:	4313      	orrs	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	f023 0320 	bic.w	r3, r3, #32
 800d24a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	697a      	ldr	r2, [r7, #20]
 800d254:	4313      	orrs	r3, r2
 800d256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	4a22      	ldr	r2, [pc, #136]	; (800d2e4 <TIM_OC2_SetConfig+0xe4>)
 800d25c:	4293      	cmp	r3, r2
 800d25e:	d003      	beq.n	800d268 <TIM_OC2_SetConfig+0x68>
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	4a21      	ldr	r2, [pc, #132]	; (800d2e8 <TIM_OC2_SetConfig+0xe8>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d10d      	bne.n	800d284 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d268:	697b      	ldr	r3, [r7, #20]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d26e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	697a      	ldr	r2, [r7, #20]
 800d278:	4313      	orrs	r3, r2
 800d27a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a17      	ldr	r2, [pc, #92]	; (800d2e4 <TIM_OC2_SetConfig+0xe4>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d003      	beq.n	800d294 <TIM_OC2_SetConfig+0x94>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a16      	ldr	r2, [pc, #88]	; (800d2e8 <TIM_OC2_SetConfig+0xe8>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d113      	bne.n	800d2bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d29a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	695b      	ldr	r3, [r3, #20]
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	693a      	ldr	r2, [r7, #16]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	699b      	ldr	r3, [r3, #24]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	693a      	ldr	r2, [r7, #16]
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	693a      	ldr	r2, [r7, #16]
 800d2c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	685a      	ldr	r2, [r3, #4]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	697a      	ldr	r2, [r7, #20]
 800d2d4:	621a      	str	r2, [r3, #32]
}
 800d2d6:	bf00      	nop
 800d2d8:	371c      	adds	r7, #28
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	40010000 	.word	0x40010000
 800d2e8:	40010400 	.word	0x40010400

0800d2ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	b087      	sub	sp, #28
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6a1b      	ldr	r3, [r3, #32]
 800d2fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6a1b      	ldr	r3, [r3, #32]
 800d306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	69db      	ldr	r3, [r3, #28]
 800d312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d31a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f023 0303 	bic.w	r3, r3, #3
 800d322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	4313      	orrs	r3, r2
 800d32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	021b      	lsls	r3, r3, #8
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	4313      	orrs	r3, r2
 800d340:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	4a21      	ldr	r2, [pc, #132]	; (800d3cc <TIM_OC3_SetConfig+0xe0>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d003      	beq.n	800d352 <TIM_OC3_SetConfig+0x66>
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	4a20      	ldr	r2, [pc, #128]	; (800d3d0 <TIM_OC3_SetConfig+0xe4>)
 800d34e:	4293      	cmp	r3, r2
 800d350:	d10d      	bne.n	800d36e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d358:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	68db      	ldr	r3, [r3, #12]
 800d35e:	021b      	lsls	r3, r3, #8
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	4313      	orrs	r3, r2
 800d364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d36c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	4a16      	ldr	r2, [pc, #88]	; (800d3cc <TIM_OC3_SetConfig+0xe0>)
 800d372:	4293      	cmp	r3, r2
 800d374:	d003      	beq.n	800d37e <TIM_OC3_SetConfig+0x92>
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	4a15      	ldr	r2, [pc, #84]	; (800d3d0 <TIM_OC3_SetConfig+0xe4>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d113      	bne.n	800d3a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	695b      	ldr	r3, [r3, #20]
 800d392:	011b      	lsls	r3, r3, #4
 800d394:	693a      	ldr	r2, [r7, #16]
 800d396:	4313      	orrs	r3, r2
 800d398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	699b      	ldr	r3, [r3, #24]
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	68fa      	ldr	r2, [r7, #12]
 800d3b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	697a      	ldr	r2, [r7, #20]
 800d3be:	621a      	str	r2, [r3, #32]
}
 800d3c0:	bf00      	nop
 800d3c2:	371c      	adds	r7, #28
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr
 800d3cc:	40010000 	.word	0x40010000
 800d3d0:	40010400 	.word	0x40010400

0800d3d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6a1b      	ldr	r3, [r3, #32]
 800d3ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	685b      	ldr	r3, [r3, #4]
 800d3f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	69db      	ldr	r3, [r3, #28]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d40a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	021b      	lsls	r3, r3, #8
 800d412:	68fa      	ldr	r2, [r7, #12]
 800d414:	4313      	orrs	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d41e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	031b      	lsls	r3, r3, #12
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	4313      	orrs	r3, r2
 800d42a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	4a12      	ldr	r2, [pc, #72]	; (800d478 <TIM_OC4_SetConfig+0xa4>)
 800d430:	4293      	cmp	r3, r2
 800d432:	d003      	beq.n	800d43c <TIM_OC4_SetConfig+0x68>
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	4a11      	ldr	r2, [pc, #68]	; (800d47c <TIM_OC4_SetConfig+0xa8>)
 800d438:	4293      	cmp	r3, r2
 800d43a:	d109      	bne.n	800d450 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	695b      	ldr	r3, [r3, #20]
 800d448:	019b      	lsls	r3, r3, #6
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	4313      	orrs	r3, r2
 800d44e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	68fa      	ldr	r2, [r7, #12]
 800d45a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	693a      	ldr	r2, [r7, #16]
 800d468:	621a      	str	r2, [r3, #32]
}
 800d46a:	bf00      	nop
 800d46c:	371c      	adds	r7, #28
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr
 800d476:	bf00      	nop
 800d478:	40010000 	.word	0x40010000
 800d47c:	40010400 	.word	0x40010400

0800d480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d480:	b480      	push	{r7}
 800d482:	b087      	sub	sp, #28
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	f003 031f 	and.w	r3, r3, #31
 800d492:	2201      	movs	r2, #1
 800d494:	fa02 f303 	lsl.w	r3, r2, r3
 800d498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	6a1a      	ldr	r2, [r3, #32]
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	43db      	mvns	r3, r3
 800d4a2:	401a      	ands	r2, r3
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6a1a      	ldr	r2, [r3, #32]
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	f003 031f 	and.w	r3, r3, #31
 800d4b2:	6879      	ldr	r1, [r7, #4]
 800d4b4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4b8:	431a      	orrs	r2, r3
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	621a      	str	r2, [r3, #32]
}
 800d4be:	bf00      	nop
 800d4c0:	371c      	adds	r7, #28
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr
	...

0800d4cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d101      	bne.n	800d4e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4e0:	2302      	movs	r3, #2
 800d4e2:	e05a      	b.n	800d59a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2202      	movs	r2, #2
 800d4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	685b      	ldr	r3, [r3, #4]
 800d4fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	689b      	ldr	r3, [r3, #8]
 800d502:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	68fa      	ldr	r2, [r7, #12]
 800d512:	4313      	orrs	r3, r2
 800d514:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	4a21      	ldr	r2, [pc, #132]	; (800d5a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d022      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d530:	d01d      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	4a1d      	ldr	r2, [pc, #116]	; (800d5ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d538:	4293      	cmp	r3, r2
 800d53a:	d018      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4a1b      	ldr	r2, [pc, #108]	; (800d5b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d013      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a1a      	ldr	r2, [pc, #104]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d00e      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a18      	ldr	r2, [pc, #96]	; (800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d556:	4293      	cmp	r3, r2
 800d558:	d009      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a17      	ldr	r2, [pc, #92]	; (800d5bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d560:	4293      	cmp	r3, r2
 800d562:	d004      	beq.n	800d56e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	4a15      	ldr	r2, [pc, #84]	; (800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d10c      	bne.n	800d588 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d574:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2200      	movs	r2, #0
 800d594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3714      	adds	r7, #20
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr
 800d5a6:	bf00      	nop
 800d5a8:	40010000 	.word	0x40010000
 800d5ac:	40000400 	.word	0x40000400
 800d5b0:	40000800 	.word	0x40000800
 800d5b4:	40000c00 	.word	0x40000c00
 800d5b8:	40010400 	.word	0x40010400
 800d5bc:	40014000 	.word	0x40014000
 800d5c0:	40001800 	.word	0x40001800

0800d5c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d101      	bne.n	800d5e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d5dc:	2302      	movs	r3, #2
 800d5de:	e03d      	b.n	800d65c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	4313      	orrs	r3, r2
 800d5f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	4313      	orrs	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4313      	orrs	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	4313      	orrs	r3, r2
 800d63a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	69db      	ldr	r3, [r3, #28]
 800d646:	4313      	orrs	r3, r2
 800d648:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68fa      	ldr	r2, [r7, #12]
 800d650:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e03f      	b.n	800d722 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d106      	bne.n	800d6bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f8 fae0 	bl	8005c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2224      	movs	r2, #36	; 0x24
 800d6c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	68da      	ldr	r2, [r3, #12]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 f829 	bl	800d72c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	691a      	ldr	r2, [r3, #16]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d6e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	695a      	ldr	r2, [r3, #20]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d6f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	68da      	ldr	r2, [r3, #12]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2220      	movs	r2, #32
 800d714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2220      	movs	r2, #32
 800d71c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
	...

0800d72c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	68da      	ldr	r2, [r3, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	430a      	orrs	r2, r1
 800d74a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	689a      	ldr	r2, [r3, #8]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	691b      	ldr	r3, [r3, #16]
 800d754:	431a      	orrs	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	695b      	ldr	r3, [r3, #20]
 800d75a:	431a      	orrs	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	69db      	ldr	r3, [r3, #28]
 800d760:	4313      	orrs	r3, r2
 800d762:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d76e:	f023 030c 	bic.w	r3, r3, #12
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	6812      	ldr	r2, [r2, #0]
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	430b      	orrs	r3, r1
 800d77a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	695b      	ldr	r3, [r3, #20]
 800d782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	699a      	ldr	r2, [r3, #24]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	430a      	orrs	r2, r1
 800d790:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	69db      	ldr	r3, [r3, #28]
 800d796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d79a:	f040 818b 	bne.w	800dab4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4ac1      	ldr	r2, [pc, #772]	; (800daa8 <UART_SetConfig+0x37c>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d005      	beq.n	800d7b4 <UART_SetConfig+0x88>
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4abf      	ldr	r2, [pc, #764]	; (800daac <UART_SetConfig+0x380>)
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	f040 80bd 	bne.w	800d92e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d7b4:	f7fc fbcc 	bl	8009f50 <HAL_RCC_GetPCLK2Freq>
 800d7b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	461d      	mov	r5, r3
 800d7be:	f04f 0600 	mov.w	r6, #0
 800d7c2:	46a8      	mov	r8, r5
 800d7c4:	46b1      	mov	r9, r6
 800d7c6:	eb18 0308 	adds.w	r3, r8, r8
 800d7ca:	eb49 0409 	adc.w	r4, r9, r9
 800d7ce:	4698      	mov	r8, r3
 800d7d0:	46a1      	mov	r9, r4
 800d7d2:	eb18 0805 	adds.w	r8, r8, r5
 800d7d6:	eb49 0906 	adc.w	r9, r9, r6
 800d7da:	f04f 0100 	mov.w	r1, #0
 800d7de:	f04f 0200 	mov.w	r2, #0
 800d7e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d7e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d7ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d7ee:	4688      	mov	r8, r1
 800d7f0:	4691      	mov	r9, r2
 800d7f2:	eb18 0005 	adds.w	r0, r8, r5
 800d7f6:	eb49 0106 	adc.w	r1, r9, r6
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	461d      	mov	r5, r3
 800d800:	f04f 0600 	mov.w	r6, #0
 800d804:	196b      	adds	r3, r5, r5
 800d806:	eb46 0406 	adc.w	r4, r6, r6
 800d80a:	461a      	mov	r2, r3
 800d80c:	4623      	mov	r3, r4
 800d80e:	f7f3 fa53 	bl	8000cb8 <__aeabi_uldivmod>
 800d812:	4603      	mov	r3, r0
 800d814:	460c      	mov	r4, r1
 800d816:	461a      	mov	r2, r3
 800d818:	4ba5      	ldr	r3, [pc, #660]	; (800dab0 <UART_SetConfig+0x384>)
 800d81a:	fba3 2302 	umull	r2, r3, r3, r2
 800d81e:	095b      	lsrs	r3, r3, #5
 800d820:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	461d      	mov	r5, r3
 800d828:	f04f 0600 	mov.w	r6, #0
 800d82c:	46a9      	mov	r9, r5
 800d82e:	46b2      	mov	sl, r6
 800d830:	eb19 0309 	adds.w	r3, r9, r9
 800d834:	eb4a 040a 	adc.w	r4, sl, sl
 800d838:	4699      	mov	r9, r3
 800d83a:	46a2      	mov	sl, r4
 800d83c:	eb19 0905 	adds.w	r9, r9, r5
 800d840:	eb4a 0a06 	adc.w	sl, sl, r6
 800d844:	f04f 0100 	mov.w	r1, #0
 800d848:	f04f 0200 	mov.w	r2, #0
 800d84c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d850:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d854:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d858:	4689      	mov	r9, r1
 800d85a:	4692      	mov	sl, r2
 800d85c:	eb19 0005 	adds.w	r0, r9, r5
 800d860:	eb4a 0106 	adc.w	r1, sl, r6
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	461d      	mov	r5, r3
 800d86a:	f04f 0600 	mov.w	r6, #0
 800d86e:	196b      	adds	r3, r5, r5
 800d870:	eb46 0406 	adc.w	r4, r6, r6
 800d874:	461a      	mov	r2, r3
 800d876:	4623      	mov	r3, r4
 800d878:	f7f3 fa1e 	bl	8000cb8 <__aeabi_uldivmod>
 800d87c:	4603      	mov	r3, r0
 800d87e:	460c      	mov	r4, r1
 800d880:	461a      	mov	r2, r3
 800d882:	4b8b      	ldr	r3, [pc, #556]	; (800dab0 <UART_SetConfig+0x384>)
 800d884:	fba3 1302 	umull	r1, r3, r3, r2
 800d888:	095b      	lsrs	r3, r3, #5
 800d88a:	2164      	movs	r1, #100	; 0x64
 800d88c:	fb01 f303 	mul.w	r3, r1, r3
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	3332      	adds	r3, #50	; 0x32
 800d896:	4a86      	ldr	r2, [pc, #536]	; (800dab0 <UART_SetConfig+0x384>)
 800d898:	fba2 2303 	umull	r2, r3, r2, r3
 800d89c:	095b      	lsrs	r3, r3, #5
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d8a4:	4498      	add	r8, r3
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	461d      	mov	r5, r3
 800d8aa:	f04f 0600 	mov.w	r6, #0
 800d8ae:	46a9      	mov	r9, r5
 800d8b0:	46b2      	mov	sl, r6
 800d8b2:	eb19 0309 	adds.w	r3, r9, r9
 800d8b6:	eb4a 040a 	adc.w	r4, sl, sl
 800d8ba:	4699      	mov	r9, r3
 800d8bc:	46a2      	mov	sl, r4
 800d8be:	eb19 0905 	adds.w	r9, r9, r5
 800d8c2:	eb4a 0a06 	adc.w	sl, sl, r6
 800d8c6:	f04f 0100 	mov.w	r1, #0
 800d8ca:	f04f 0200 	mov.w	r2, #0
 800d8ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d8d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d8d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d8da:	4689      	mov	r9, r1
 800d8dc:	4692      	mov	sl, r2
 800d8de:	eb19 0005 	adds.w	r0, r9, r5
 800d8e2:	eb4a 0106 	adc.w	r1, sl, r6
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	461d      	mov	r5, r3
 800d8ec:	f04f 0600 	mov.w	r6, #0
 800d8f0:	196b      	adds	r3, r5, r5
 800d8f2:	eb46 0406 	adc.w	r4, r6, r6
 800d8f6:	461a      	mov	r2, r3
 800d8f8:	4623      	mov	r3, r4
 800d8fa:	f7f3 f9dd 	bl	8000cb8 <__aeabi_uldivmod>
 800d8fe:	4603      	mov	r3, r0
 800d900:	460c      	mov	r4, r1
 800d902:	461a      	mov	r2, r3
 800d904:	4b6a      	ldr	r3, [pc, #424]	; (800dab0 <UART_SetConfig+0x384>)
 800d906:	fba3 1302 	umull	r1, r3, r3, r2
 800d90a:	095b      	lsrs	r3, r3, #5
 800d90c:	2164      	movs	r1, #100	; 0x64
 800d90e:	fb01 f303 	mul.w	r3, r1, r3
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	3332      	adds	r3, #50	; 0x32
 800d918:	4a65      	ldr	r2, [pc, #404]	; (800dab0 <UART_SetConfig+0x384>)
 800d91a:	fba2 2303 	umull	r2, r3, r2, r3
 800d91e:	095b      	lsrs	r3, r3, #5
 800d920:	f003 0207 	and.w	r2, r3, #7
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4442      	add	r2, r8
 800d92a:	609a      	str	r2, [r3, #8]
 800d92c:	e26f      	b.n	800de0e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d92e:	f7fc fafb 	bl	8009f28 <HAL_RCC_GetPCLK1Freq>
 800d932:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	461d      	mov	r5, r3
 800d938:	f04f 0600 	mov.w	r6, #0
 800d93c:	46a8      	mov	r8, r5
 800d93e:	46b1      	mov	r9, r6
 800d940:	eb18 0308 	adds.w	r3, r8, r8
 800d944:	eb49 0409 	adc.w	r4, r9, r9
 800d948:	4698      	mov	r8, r3
 800d94a:	46a1      	mov	r9, r4
 800d94c:	eb18 0805 	adds.w	r8, r8, r5
 800d950:	eb49 0906 	adc.w	r9, r9, r6
 800d954:	f04f 0100 	mov.w	r1, #0
 800d958:	f04f 0200 	mov.w	r2, #0
 800d95c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d960:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d964:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d968:	4688      	mov	r8, r1
 800d96a:	4691      	mov	r9, r2
 800d96c:	eb18 0005 	adds.w	r0, r8, r5
 800d970:	eb49 0106 	adc.w	r1, r9, r6
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	461d      	mov	r5, r3
 800d97a:	f04f 0600 	mov.w	r6, #0
 800d97e:	196b      	adds	r3, r5, r5
 800d980:	eb46 0406 	adc.w	r4, r6, r6
 800d984:	461a      	mov	r2, r3
 800d986:	4623      	mov	r3, r4
 800d988:	f7f3 f996 	bl	8000cb8 <__aeabi_uldivmod>
 800d98c:	4603      	mov	r3, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	461a      	mov	r2, r3
 800d992:	4b47      	ldr	r3, [pc, #284]	; (800dab0 <UART_SetConfig+0x384>)
 800d994:	fba3 2302 	umull	r2, r3, r3, r2
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	461d      	mov	r5, r3
 800d9a2:	f04f 0600 	mov.w	r6, #0
 800d9a6:	46a9      	mov	r9, r5
 800d9a8:	46b2      	mov	sl, r6
 800d9aa:	eb19 0309 	adds.w	r3, r9, r9
 800d9ae:	eb4a 040a 	adc.w	r4, sl, sl
 800d9b2:	4699      	mov	r9, r3
 800d9b4:	46a2      	mov	sl, r4
 800d9b6:	eb19 0905 	adds.w	r9, r9, r5
 800d9ba:	eb4a 0a06 	adc.w	sl, sl, r6
 800d9be:	f04f 0100 	mov.w	r1, #0
 800d9c2:	f04f 0200 	mov.w	r2, #0
 800d9c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d9ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d9ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d9d2:	4689      	mov	r9, r1
 800d9d4:	4692      	mov	sl, r2
 800d9d6:	eb19 0005 	adds.w	r0, r9, r5
 800d9da:	eb4a 0106 	adc.w	r1, sl, r6
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	685b      	ldr	r3, [r3, #4]
 800d9e2:	461d      	mov	r5, r3
 800d9e4:	f04f 0600 	mov.w	r6, #0
 800d9e8:	196b      	adds	r3, r5, r5
 800d9ea:	eb46 0406 	adc.w	r4, r6, r6
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	4623      	mov	r3, r4
 800d9f2:	f7f3 f961 	bl	8000cb8 <__aeabi_uldivmod>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	460c      	mov	r4, r1
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	4b2c      	ldr	r3, [pc, #176]	; (800dab0 <UART_SetConfig+0x384>)
 800d9fe:	fba3 1302 	umull	r1, r3, r3, r2
 800da02:	095b      	lsrs	r3, r3, #5
 800da04:	2164      	movs	r1, #100	; 0x64
 800da06:	fb01 f303 	mul.w	r3, r1, r3
 800da0a:	1ad3      	subs	r3, r2, r3
 800da0c:	00db      	lsls	r3, r3, #3
 800da0e:	3332      	adds	r3, #50	; 0x32
 800da10:	4a27      	ldr	r2, [pc, #156]	; (800dab0 <UART_SetConfig+0x384>)
 800da12:	fba2 2303 	umull	r2, r3, r2, r3
 800da16:	095b      	lsrs	r3, r3, #5
 800da18:	005b      	lsls	r3, r3, #1
 800da1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da1e:	4498      	add	r8, r3
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	461d      	mov	r5, r3
 800da24:	f04f 0600 	mov.w	r6, #0
 800da28:	46a9      	mov	r9, r5
 800da2a:	46b2      	mov	sl, r6
 800da2c:	eb19 0309 	adds.w	r3, r9, r9
 800da30:	eb4a 040a 	adc.w	r4, sl, sl
 800da34:	4699      	mov	r9, r3
 800da36:	46a2      	mov	sl, r4
 800da38:	eb19 0905 	adds.w	r9, r9, r5
 800da3c:	eb4a 0a06 	adc.w	sl, sl, r6
 800da40:	f04f 0100 	mov.w	r1, #0
 800da44:	f04f 0200 	mov.w	r2, #0
 800da48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800da50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800da54:	4689      	mov	r9, r1
 800da56:	4692      	mov	sl, r2
 800da58:	eb19 0005 	adds.w	r0, r9, r5
 800da5c:	eb4a 0106 	adc.w	r1, sl, r6
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	461d      	mov	r5, r3
 800da66:	f04f 0600 	mov.w	r6, #0
 800da6a:	196b      	adds	r3, r5, r5
 800da6c:	eb46 0406 	adc.w	r4, r6, r6
 800da70:	461a      	mov	r2, r3
 800da72:	4623      	mov	r3, r4
 800da74:	f7f3 f920 	bl	8000cb8 <__aeabi_uldivmod>
 800da78:	4603      	mov	r3, r0
 800da7a:	460c      	mov	r4, r1
 800da7c:	461a      	mov	r2, r3
 800da7e:	4b0c      	ldr	r3, [pc, #48]	; (800dab0 <UART_SetConfig+0x384>)
 800da80:	fba3 1302 	umull	r1, r3, r3, r2
 800da84:	095b      	lsrs	r3, r3, #5
 800da86:	2164      	movs	r1, #100	; 0x64
 800da88:	fb01 f303 	mul.w	r3, r1, r3
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	00db      	lsls	r3, r3, #3
 800da90:	3332      	adds	r3, #50	; 0x32
 800da92:	4a07      	ldr	r2, [pc, #28]	; (800dab0 <UART_SetConfig+0x384>)
 800da94:	fba2 2303 	umull	r2, r3, r2, r3
 800da98:	095b      	lsrs	r3, r3, #5
 800da9a:	f003 0207 	and.w	r2, r3, #7
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4442      	add	r2, r8
 800daa4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800daa6:	e1b2      	b.n	800de0e <UART_SetConfig+0x6e2>
 800daa8:	40011000 	.word	0x40011000
 800daac:	40011400 	.word	0x40011400
 800dab0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4ad7      	ldr	r2, [pc, #860]	; (800de18 <UART_SetConfig+0x6ec>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d005      	beq.n	800daca <UART_SetConfig+0x39e>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4ad6      	ldr	r2, [pc, #856]	; (800de1c <UART_SetConfig+0x6f0>)
 800dac4:	4293      	cmp	r3, r2
 800dac6:	f040 80d1 	bne.w	800dc6c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800daca:	f7fc fa41 	bl	8009f50 <HAL_RCC_GetPCLK2Freq>
 800dace:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	469a      	mov	sl, r3
 800dad4:	f04f 0b00 	mov.w	fp, #0
 800dad8:	46d0      	mov	r8, sl
 800dada:	46d9      	mov	r9, fp
 800dadc:	eb18 0308 	adds.w	r3, r8, r8
 800dae0:	eb49 0409 	adc.w	r4, r9, r9
 800dae4:	4698      	mov	r8, r3
 800dae6:	46a1      	mov	r9, r4
 800dae8:	eb18 080a 	adds.w	r8, r8, sl
 800daec:	eb49 090b 	adc.w	r9, r9, fp
 800daf0:	f04f 0100 	mov.w	r1, #0
 800daf4:	f04f 0200 	mov.w	r2, #0
 800daf8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dafc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800db00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800db04:	4688      	mov	r8, r1
 800db06:	4691      	mov	r9, r2
 800db08:	eb1a 0508 	adds.w	r5, sl, r8
 800db0c:	eb4b 0609 	adc.w	r6, fp, r9
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	4619      	mov	r1, r3
 800db16:	f04f 0200 	mov.w	r2, #0
 800db1a:	f04f 0300 	mov.w	r3, #0
 800db1e:	f04f 0400 	mov.w	r4, #0
 800db22:	0094      	lsls	r4, r2, #2
 800db24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800db28:	008b      	lsls	r3, r1, #2
 800db2a:	461a      	mov	r2, r3
 800db2c:	4623      	mov	r3, r4
 800db2e:	4628      	mov	r0, r5
 800db30:	4631      	mov	r1, r6
 800db32:	f7f3 f8c1 	bl	8000cb8 <__aeabi_uldivmod>
 800db36:	4603      	mov	r3, r0
 800db38:	460c      	mov	r4, r1
 800db3a:	461a      	mov	r2, r3
 800db3c:	4bb8      	ldr	r3, [pc, #736]	; (800de20 <UART_SetConfig+0x6f4>)
 800db3e:	fba3 2302 	umull	r2, r3, r3, r2
 800db42:	095b      	lsrs	r3, r3, #5
 800db44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	469b      	mov	fp, r3
 800db4c:	f04f 0c00 	mov.w	ip, #0
 800db50:	46d9      	mov	r9, fp
 800db52:	46e2      	mov	sl, ip
 800db54:	eb19 0309 	adds.w	r3, r9, r9
 800db58:	eb4a 040a 	adc.w	r4, sl, sl
 800db5c:	4699      	mov	r9, r3
 800db5e:	46a2      	mov	sl, r4
 800db60:	eb19 090b 	adds.w	r9, r9, fp
 800db64:	eb4a 0a0c 	adc.w	sl, sl, ip
 800db68:	f04f 0100 	mov.w	r1, #0
 800db6c:	f04f 0200 	mov.w	r2, #0
 800db70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800db74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800db78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800db7c:	4689      	mov	r9, r1
 800db7e:	4692      	mov	sl, r2
 800db80:	eb1b 0509 	adds.w	r5, fp, r9
 800db84:	eb4c 060a 	adc.w	r6, ip, sl
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	4619      	mov	r1, r3
 800db8e:	f04f 0200 	mov.w	r2, #0
 800db92:	f04f 0300 	mov.w	r3, #0
 800db96:	f04f 0400 	mov.w	r4, #0
 800db9a:	0094      	lsls	r4, r2, #2
 800db9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dba0:	008b      	lsls	r3, r1, #2
 800dba2:	461a      	mov	r2, r3
 800dba4:	4623      	mov	r3, r4
 800dba6:	4628      	mov	r0, r5
 800dba8:	4631      	mov	r1, r6
 800dbaa:	f7f3 f885 	bl	8000cb8 <__aeabi_uldivmod>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	460c      	mov	r4, r1
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	4b9a      	ldr	r3, [pc, #616]	; (800de20 <UART_SetConfig+0x6f4>)
 800dbb6:	fba3 1302 	umull	r1, r3, r3, r2
 800dbba:	095b      	lsrs	r3, r3, #5
 800dbbc:	2164      	movs	r1, #100	; 0x64
 800dbbe:	fb01 f303 	mul.w	r3, r1, r3
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	011b      	lsls	r3, r3, #4
 800dbc6:	3332      	adds	r3, #50	; 0x32
 800dbc8:	4a95      	ldr	r2, [pc, #596]	; (800de20 <UART_SetConfig+0x6f4>)
 800dbca:	fba2 2303 	umull	r2, r3, r2, r3
 800dbce:	095b      	lsrs	r3, r3, #5
 800dbd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbd4:	4498      	add	r8, r3
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	469b      	mov	fp, r3
 800dbda:	f04f 0c00 	mov.w	ip, #0
 800dbde:	46d9      	mov	r9, fp
 800dbe0:	46e2      	mov	sl, ip
 800dbe2:	eb19 0309 	adds.w	r3, r9, r9
 800dbe6:	eb4a 040a 	adc.w	r4, sl, sl
 800dbea:	4699      	mov	r9, r3
 800dbec:	46a2      	mov	sl, r4
 800dbee:	eb19 090b 	adds.w	r9, r9, fp
 800dbf2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dbf6:	f04f 0100 	mov.w	r1, #0
 800dbfa:	f04f 0200 	mov.w	r2, #0
 800dbfe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dc02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dc06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dc0a:	4689      	mov	r9, r1
 800dc0c:	4692      	mov	sl, r2
 800dc0e:	eb1b 0509 	adds.w	r5, fp, r9
 800dc12:	eb4c 060a 	adc.w	r6, ip, sl
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	f04f 0200 	mov.w	r2, #0
 800dc20:	f04f 0300 	mov.w	r3, #0
 800dc24:	f04f 0400 	mov.w	r4, #0
 800dc28:	0094      	lsls	r4, r2, #2
 800dc2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dc2e:	008b      	lsls	r3, r1, #2
 800dc30:	461a      	mov	r2, r3
 800dc32:	4623      	mov	r3, r4
 800dc34:	4628      	mov	r0, r5
 800dc36:	4631      	mov	r1, r6
 800dc38:	f7f3 f83e 	bl	8000cb8 <__aeabi_uldivmod>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	460c      	mov	r4, r1
 800dc40:	461a      	mov	r2, r3
 800dc42:	4b77      	ldr	r3, [pc, #476]	; (800de20 <UART_SetConfig+0x6f4>)
 800dc44:	fba3 1302 	umull	r1, r3, r3, r2
 800dc48:	095b      	lsrs	r3, r3, #5
 800dc4a:	2164      	movs	r1, #100	; 0x64
 800dc4c:	fb01 f303 	mul.w	r3, r1, r3
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	011b      	lsls	r3, r3, #4
 800dc54:	3332      	adds	r3, #50	; 0x32
 800dc56:	4a72      	ldr	r2, [pc, #456]	; (800de20 <UART_SetConfig+0x6f4>)
 800dc58:	fba2 2303 	umull	r2, r3, r2, r3
 800dc5c:	095b      	lsrs	r3, r3, #5
 800dc5e:	f003 020f 	and.w	r2, r3, #15
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	4442      	add	r2, r8
 800dc68:	609a      	str	r2, [r3, #8]
 800dc6a:	e0d0      	b.n	800de0e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800dc6c:	f7fc f95c 	bl	8009f28 <HAL_RCC_GetPCLK1Freq>
 800dc70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	469a      	mov	sl, r3
 800dc76:	f04f 0b00 	mov.w	fp, #0
 800dc7a:	46d0      	mov	r8, sl
 800dc7c:	46d9      	mov	r9, fp
 800dc7e:	eb18 0308 	adds.w	r3, r8, r8
 800dc82:	eb49 0409 	adc.w	r4, r9, r9
 800dc86:	4698      	mov	r8, r3
 800dc88:	46a1      	mov	r9, r4
 800dc8a:	eb18 080a 	adds.w	r8, r8, sl
 800dc8e:	eb49 090b 	adc.w	r9, r9, fp
 800dc92:	f04f 0100 	mov.w	r1, #0
 800dc96:	f04f 0200 	mov.w	r2, #0
 800dc9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800dc9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800dca2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800dca6:	4688      	mov	r8, r1
 800dca8:	4691      	mov	r9, r2
 800dcaa:	eb1a 0508 	adds.w	r5, sl, r8
 800dcae:	eb4b 0609 	adc.w	r6, fp, r9
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	f04f 0200 	mov.w	r2, #0
 800dcbc:	f04f 0300 	mov.w	r3, #0
 800dcc0:	f04f 0400 	mov.w	r4, #0
 800dcc4:	0094      	lsls	r4, r2, #2
 800dcc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dcca:	008b      	lsls	r3, r1, #2
 800dccc:	461a      	mov	r2, r3
 800dcce:	4623      	mov	r3, r4
 800dcd0:	4628      	mov	r0, r5
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	f7f2 fff0 	bl	8000cb8 <__aeabi_uldivmod>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	461a      	mov	r2, r3
 800dcde:	4b50      	ldr	r3, [pc, #320]	; (800de20 <UART_SetConfig+0x6f4>)
 800dce0:	fba3 2302 	umull	r2, r3, r3, r2
 800dce4:	095b      	lsrs	r3, r3, #5
 800dce6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	469b      	mov	fp, r3
 800dcee:	f04f 0c00 	mov.w	ip, #0
 800dcf2:	46d9      	mov	r9, fp
 800dcf4:	46e2      	mov	sl, ip
 800dcf6:	eb19 0309 	adds.w	r3, r9, r9
 800dcfa:	eb4a 040a 	adc.w	r4, sl, sl
 800dcfe:	4699      	mov	r9, r3
 800dd00:	46a2      	mov	sl, r4
 800dd02:	eb19 090b 	adds.w	r9, r9, fp
 800dd06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dd0a:	f04f 0100 	mov.w	r1, #0
 800dd0e:	f04f 0200 	mov.w	r2, #0
 800dd12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dd16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dd1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800dd1e:	4689      	mov	r9, r1
 800dd20:	4692      	mov	sl, r2
 800dd22:	eb1b 0509 	adds.w	r5, fp, r9
 800dd26:	eb4c 060a 	adc.w	r6, ip, sl
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	f04f 0200 	mov.w	r2, #0
 800dd34:	f04f 0300 	mov.w	r3, #0
 800dd38:	f04f 0400 	mov.w	r4, #0
 800dd3c:	0094      	lsls	r4, r2, #2
 800dd3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800dd42:	008b      	lsls	r3, r1, #2
 800dd44:	461a      	mov	r2, r3
 800dd46:	4623      	mov	r3, r4
 800dd48:	4628      	mov	r0, r5
 800dd4a:	4631      	mov	r1, r6
 800dd4c:	f7f2 ffb4 	bl	8000cb8 <__aeabi_uldivmod>
 800dd50:	4603      	mov	r3, r0
 800dd52:	460c      	mov	r4, r1
 800dd54:	461a      	mov	r2, r3
 800dd56:	4b32      	ldr	r3, [pc, #200]	; (800de20 <UART_SetConfig+0x6f4>)
 800dd58:	fba3 1302 	umull	r1, r3, r3, r2
 800dd5c:	095b      	lsrs	r3, r3, #5
 800dd5e:	2164      	movs	r1, #100	; 0x64
 800dd60:	fb01 f303 	mul.w	r3, r1, r3
 800dd64:	1ad3      	subs	r3, r2, r3
 800dd66:	011b      	lsls	r3, r3, #4
 800dd68:	3332      	adds	r3, #50	; 0x32
 800dd6a:	4a2d      	ldr	r2, [pc, #180]	; (800de20 <UART_SetConfig+0x6f4>)
 800dd6c:	fba2 2303 	umull	r2, r3, r2, r3
 800dd70:	095b      	lsrs	r3, r3, #5
 800dd72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd76:	4498      	add	r8, r3
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	469b      	mov	fp, r3
 800dd7c:	f04f 0c00 	mov.w	ip, #0
 800dd80:	46d9      	mov	r9, fp
 800dd82:	46e2      	mov	sl, ip
 800dd84:	eb19 0309 	adds.w	r3, r9, r9
 800dd88:	eb4a 040a 	adc.w	r4, sl, sl
 800dd8c:	4699      	mov	r9, r3
 800dd8e:	46a2      	mov	sl, r4
 800dd90:	eb19 090b 	adds.w	r9, r9, fp
 800dd94:	eb4a 0a0c 	adc.w	sl, sl, ip
 800dd98:	f04f 0100 	mov.w	r1, #0
 800dd9c:	f04f 0200 	mov.w	r2, #0
 800dda0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dda4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800dda8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ddac:	4689      	mov	r9, r1
 800ddae:	4692      	mov	sl, r2
 800ddb0:	eb1b 0509 	adds.w	r5, fp, r9
 800ddb4:	eb4c 060a 	adc.w	r6, ip, sl
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	f04f 0200 	mov.w	r2, #0
 800ddc2:	f04f 0300 	mov.w	r3, #0
 800ddc6:	f04f 0400 	mov.w	r4, #0
 800ddca:	0094      	lsls	r4, r2, #2
 800ddcc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ddd0:	008b      	lsls	r3, r1, #2
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	4623      	mov	r3, r4
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	4631      	mov	r1, r6
 800ddda:	f7f2 ff6d 	bl	8000cb8 <__aeabi_uldivmod>
 800ddde:	4603      	mov	r3, r0
 800dde0:	460c      	mov	r4, r1
 800dde2:	461a      	mov	r2, r3
 800dde4:	4b0e      	ldr	r3, [pc, #56]	; (800de20 <UART_SetConfig+0x6f4>)
 800dde6:	fba3 1302 	umull	r1, r3, r3, r2
 800ddea:	095b      	lsrs	r3, r3, #5
 800ddec:	2164      	movs	r1, #100	; 0x64
 800ddee:	fb01 f303 	mul.w	r3, r1, r3
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	011b      	lsls	r3, r3, #4
 800ddf6:	3332      	adds	r3, #50	; 0x32
 800ddf8:	4a09      	ldr	r2, [pc, #36]	; (800de20 <UART_SetConfig+0x6f4>)
 800ddfa:	fba2 2303 	umull	r2, r3, r2, r3
 800ddfe:	095b      	lsrs	r3, r3, #5
 800de00:	f003 020f 	and.w	r2, r3, #15
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4442      	add	r2, r8
 800de0a:	609a      	str	r2, [r3, #8]
}
 800de0c:	e7ff      	b.n	800de0e <UART_SetConfig+0x6e2>
 800de0e:	bf00      	nop
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de18:	40011000 	.word	0x40011000
 800de1c:	40011400 	.word	0x40011400
 800de20:	51eb851f 	.word	0x51eb851f

0800de24 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800de24:	b084      	sub	sp, #16
 800de26:	b480      	push	{r7}
 800de28:	b085      	sub	sp, #20
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
 800de2e:	f107 001c 	add.w	r0, r7, #28
 800de32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800de36:	2300      	movs	r3, #0
 800de38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800de3a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800de3c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800de3e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800de42:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800de46:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800de48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800de4a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800de4e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	4313      	orrs	r3, r2
 800de54:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800de5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	431a      	orrs	r2, r3
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800de6a:	2300      	movs	r3, #0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3714      	adds	r7, #20
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	b004      	add	sp, #16
 800de78:	4770      	bx	lr

0800de7a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800de7a:	b480      	push	{r7}
 800de7c:	b083      	sub	sp, #12
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800de88:	4618      	mov	r0, r3
 800de8a:	370c      	adds	r7, #12
 800de8c:	46bd      	mov	sp, r7
 800de8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de92:	4770      	bx	lr

0800de94 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	370c      	adds	r7, #12
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b082      	sub	sp, #8
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2203      	movs	r2, #3
 800dec2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800dec4:	2002      	movs	r0, #2
 800dec6:	f7f9 fbc5 	bl	8007654 <HAL_Delay>
  
  return HAL_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ded4:	b480      	push	{r7}
 800ded6:	b083      	sub	sp, #12
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f003 0303 	and.w	r3, r3, #3
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800defa:	2300      	movs	r3, #0
 800defc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	681a      	ldr	r2, [r3, #0]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df0e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800df14:	431a      	orrs	r2, r3
                       Command->CPSM);
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800df1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	4313      	orrs	r3, r2
 800df20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	68db      	ldr	r3, [r3, #12]
 800df26:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800df2a:	f023 030f 	bic.w	r3, r3, #15
 800df2e:	68fa      	ldr	r2, [r7, #12]
 800df30:	431a      	orrs	r2, r3
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800df36:	2300      	movs	r3, #0
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3714      	adds	r7, #20
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800df44:	b480      	push	{r7}
 800df46:	b083      	sub	sp, #12
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	b2db      	uxtb	r3, r3
}
 800df52:	4618      	mov	r0, r3
 800df54:	370c      	adds	r7, #12
 800df56:	46bd      	mov	sp, r7
 800df58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5c:	4770      	bx	lr

0800df5e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800df5e:	b480      	push	{r7}
 800df60:	b085      	sub	sp, #20
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3314      	adds	r3, #20
 800df6c:	461a      	mov	r2, r3
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	4413      	add	r3, r2
 800df72:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
}  
 800df78:	4618      	mov	r0, r3
 800df7a:	3714      	adds	r7, #20
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800df84:	b480      	push	{r7}
 800df86:	b085      	sub	sp, #20
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
 800df8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	685a      	ldr	r2, [r3, #4]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dfaa:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800dfb0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800dfb6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800dfb8:	68fa      	ldr	r2, [r7, #12]
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	431a      	orrs	r2, r3
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0

}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3714      	adds	r7, #20
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b088      	sub	sp, #32
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dfea:	2310      	movs	r3, #16
 800dfec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfee:	2340      	movs	r3, #64	; 0x40
 800dff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dff2:	2300      	movs	r3, #0
 800dff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dffa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dffc:	f107 0308 	add.w	r3, r7, #8
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f7ff ff74 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e008:	f241 3288 	movw	r2, #5000	; 0x1388
 800e00c:	2110      	movs	r1, #16
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 fa40 	bl	800e494 <SDMMC_GetCmdResp1>
 800e014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e016:	69fb      	ldr	r3, [r7, #28]
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3720      	adds	r7, #32
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b088      	sub	sp, #32
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
 800e028:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e02e:	2311      	movs	r3, #17
 800e030:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e032:	2340      	movs	r3, #64	; 0x40
 800e034:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e036:	2300      	movs	r3, #0
 800e038:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e03e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e040:	f107 0308 	add.w	r3, r7, #8
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff ff52 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e050:	2111      	movs	r1, #17
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fa1e 	bl	800e494 <SDMMC_GetCmdResp1>
 800e058:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e05a:	69fb      	ldr	r3, [r7, #28]
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3720      	adds	r7, #32
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e072:	2312      	movs	r3, #18
 800e074:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e076:	2340      	movs	r3, #64	; 0x40
 800e078:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e07a:	2300      	movs	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e07e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e082:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e084:	f107 0308 	add.w	r3, r7, #8
 800e088:	4619      	mov	r1, r3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7ff ff30 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e090:	f241 3288 	movw	r2, #5000	; 0x1388
 800e094:	2112      	movs	r1, #18
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 f9fc 	bl	800e494 <SDMMC_GetCmdResp1>
 800e09c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e09e:	69fb      	ldr	r3, [r7, #28]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3720      	adds	r7, #32
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e0b6:	2318      	movs	r3, #24
 800e0b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0ba:	2340      	movs	r3, #64	; 0x40
 800e0bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0c8:	f107 0308 	add.w	r3, r7, #8
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7ff ff0e 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e0d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0d8:	2118      	movs	r1, #24
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 f9da 	bl	800e494 <SDMMC_GetCmdResp1>
 800e0e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0e2:	69fb      	ldr	r3, [r7, #28]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3720      	adds	r7, #32
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e0fa:	2319      	movs	r3, #25
 800e0fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0fe:	2340      	movs	r3, #64	; 0x40
 800e100:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e102:	2300      	movs	r3, #0
 800e104:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e10a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e10c:	f107 0308 	add.w	r3, r7, #8
 800e110:	4619      	mov	r1, r3
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f7ff feec 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e118:	f241 3288 	movw	r2, #5000	; 0x1388
 800e11c:	2119      	movs	r1, #25
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f9b8 	bl	800e494 <SDMMC_GetCmdResp1>
 800e124:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e126:	69fb      	ldr	r3, [r7, #28]
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e138:	2300      	movs	r3, #0
 800e13a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e13c:	230c      	movs	r3, #12
 800e13e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e140:	2340      	movs	r3, #64	; 0x40
 800e142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e144:	2300      	movs	r3, #0
 800e146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e14c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e14e:	f107 0308 	add.w	r3, r7, #8
 800e152:	4619      	mov	r1, r3
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f7ff fecb 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e15a:	4a05      	ldr	r2, [pc, #20]	; (800e170 <SDMMC_CmdStopTransfer+0x40>)
 800e15c:	210c      	movs	r1, #12
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f998 	bl	800e494 <SDMMC_GetCmdResp1>
 800e164:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e166:	69fb      	ldr	r3, [r7, #28]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3720      	adds	r7, #32
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	05f5e100 	.word	0x05f5e100

0800e174 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b08a      	sub	sp, #40	; 0x28
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e184:	2307      	movs	r3, #7
 800e186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e188:	2340      	movs	r3, #64	; 0x40
 800e18a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e18c:	2300      	movs	r3, #0
 800e18e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e194:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e196:	f107 0310 	add.w	r3, r7, #16
 800e19a:	4619      	mov	r1, r3
 800e19c:	68f8      	ldr	r0, [r7, #12]
 800e19e:	f7ff fea7 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e1a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e1a6:	2107      	movs	r1, #7
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f000 f973 	bl	800e494 <SDMMC_GetCmdResp1>
 800e1ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3728      	adds	r7, #40	; 0x28
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b088      	sub	sp, #32
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1d8:	f107 0308 	add.w	r3, r7, #8
 800e1dc:	4619      	mov	r1, r3
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f7ff fe86 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 f92d 	bl	800e444 <SDMMC_GetCmdError>
 800e1ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1ec:	69fb      	ldr	r3, [r7, #28]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3720      	adds	r7, #32
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b088      	sub	sp, #32
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e1fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e204:	2308      	movs	r3, #8
 800e206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e208:	2340      	movs	r3, #64	; 0x40
 800e20a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e20c:	2300      	movs	r3, #0
 800e20e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e216:	f107 0308 	add.w	r3, r7, #8
 800e21a:	4619      	mov	r1, r3
 800e21c:	6878      	ldr	r0, [r7, #4]
 800e21e:	f7ff fe67 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 fb16 	bl	800e854 <SDMMC_GetCmdResp7>
 800e228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e22a:	69fb      	ldr	r3, [r7, #28]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e242:	2337      	movs	r3, #55	; 0x37
 800e244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e246:	2340      	movs	r3, #64	; 0x40
 800e248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e24a:	2300      	movs	r3, #0
 800e24c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e24e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e254:	f107 0308 	add.w	r3, r7, #8
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7ff fe48 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e260:	f241 3288 	movw	r2, #5000	; 0x1388
 800e264:	2137      	movs	r1, #55	; 0x37
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 f914 	bl	800e494 <SDMMC_GetCmdResp1>
 800e26c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e26e:	69fb      	ldr	r3, [r7, #28]
}
 800e270:	4618      	mov	r0, r3
 800e272:	3720      	adds	r7, #32
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
 800e280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e288:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e28c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e28e:	2329      	movs	r3, #41	; 0x29
 800e290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e292:	2340      	movs	r3, #64	; 0x40
 800e294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e296:	2300      	movs	r3, #0
 800e298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e29a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2a0:	f107 0308 	add.w	r3, r7, #8
 800e2a4:	4619      	mov	r1, r3
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f7ff fe22 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f000 fa23 	bl	800e6f8 <SDMMC_GetCmdResp3>
 800e2b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2b4:	69fb      	ldr	r3, [r7, #28]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3720      	adds	r7, #32
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b088      	sub	sp, #32
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
 800e2c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e2cc:	2306      	movs	r3, #6
 800e2ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2d0:	2340      	movs	r3, #64	; 0x40
 800e2d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2de:	f107 0308 	add.w	r3, r7, #8
 800e2e2:	4619      	mov	r1, r3
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7ff fe03 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2ee:	2106      	movs	r1, #6
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	f000 f8cf 	bl	800e494 <SDMMC_GetCmdResp1>
 800e2f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2f8:	69fb      	ldr	r3, [r7, #28]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3720      	adds	r7, #32
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e302:	b580      	push	{r7, lr}
 800e304:	b088      	sub	sp, #32
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e30a:	2300      	movs	r3, #0
 800e30c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e30e:	2333      	movs	r3, #51	; 0x33
 800e310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e312:	2340      	movs	r3, #64	; 0x40
 800e314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e316:	2300      	movs	r3, #0
 800e318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e31a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e31e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e320:	f107 0308 	add.w	r3, r7, #8
 800e324:	4619      	mov	r1, r3
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f7ff fde2 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e330:	2133      	movs	r1, #51	; 0x33
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f8ae 	bl	800e494 <SDMMC_GetCmdResp1>
 800e338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e33a:	69fb      	ldr	r3, [r7, #28]
}
 800e33c:	4618      	mov	r0, r3
 800e33e:	3720      	adds	r7, #32
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}

0800e344 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b088      	sub	sp, #32
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e34c:	2300      	movs	r3, #0
 800e34e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e350:	2302      	movs	r3, #2
 800e352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e354:	23c0      	movs	r3, #192	; 0xc0
 800e356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e358:	2300      	movs	r3, #0
 800e35a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e35c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e362:	f107 0308 	add.w	r3, r7, #8
 800e366:	4619      	mov	r1, r3
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff fdc1 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 f97c 	bl	800e66c <SDMMC_GetCmdResp2>
 800e374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e376:	69fb      	ldr	r3, [r7, #28]
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3720      	adds	r7, #32
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b088      	sub	sp, #32
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
 800e388:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e38e:	2309      	movs	r3, #9
 800e390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e392:	23c0      	movs	r3, #192	; 0xc0
 800e394:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e396:	2300      	movs	r3, #0
 800e398:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3a0:	f107 0308 	add.w	r3, r7, #8
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f7ff fda2 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f000 f95d 	bl	800e66c <SDMMC_GetCmdResp2>
 800e3b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3b4:	69fb      	ldr	r3, [r7, #28]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3720      	adds	r7, #32
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b088      	sub	sp, #32
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	6078      	str	r0, [r7, #4]
 800e3c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e3cc:	2303      	movs	r3, #3
 800e3ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3d0:	2340      	movs	r3, #64	; 0x40
 800e3d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3de:	f107 0308 	add.w	r3, r7, #8
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f7ff fd83 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	2103      	movs	r1, #3
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f9bc 	bl	800e76c <SDMMC_GetCmdResp6>
 800e3f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3720      	adds	r7, #32
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b088      	sub	sp, #32
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
 800e408:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e40e:	230d      	movs	r3, #13
 800e410:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e412:	2340      	movs	r3, #64	; 0x40
 800e414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e416:	2300      	movs	r3, #0
 800e418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e41a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e41e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e420:	f107 0308 	add.w	r3, r7, #8
 800e424:	4619      	mov	r1, r3
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff fd62 	bl	800def0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e430:	210d      	movs	r1, #13
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 f82e 	bl	800e494 <SDMMC_GetCmdResp1>
 800e438:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e43a:	69fb      	ldr	r3, [r7, #28]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3720      	adds	r7, #32
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e444:	b490      	push	{r4, r7}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e44c:	4b0f      	ldr	r3, [pc, #60]	; (800e48c <SDMMC_GetCmdError+0x48>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4a0f      	ldr	r2, [pc, #60]	; (800e490 <SDMMC_GetCmdError+0x4c>)
 800e452:	fba2 2303 	umull	r2, r3, r2, r3
 800e456:	0a5b      	lsrs	r3, r3, #9
 800e458:	f241 3288 	movw	r2, #5000	; 0x1388
 800e45c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e460:	4623      	mov	r3, r4
 800e462:	1e5c      	subs	r4, r3, #1
 800e464:	2b00      	cmp	r3, #0
 800e466:	d102      	bne.n	800e46e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e46c:	e009      	b.n	800e482 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e476:	2b00      	cmp	r3, #0
 800e478:	d0f2      	beq.n	800e460 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	22c5      	movs	r2, #197	; 0xc5
 800e47e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e480:	2300      	movs	r3, #0
}
 800e482:	4618      	mov	r0, r3
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bc90      	pop	{r4, r7}
 800e48a:	4770      	bx	lr
 800e48c:	20000000 	.word	0x20000000
 800e490:	10624dd3 	.word	0x10624dd3

0800e494 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e494:	b590      	push	{r4, r7, lr}
 800e496:	b087      	sub	sp, #28
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	460b      	mov	r3, r1
 800e49e:	607a      	str	r2, [r7, #4]
 800e4a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e4a2:	4b6f      	ldr	r3, [pc, #444]	; (800e660 <SDMMC_GetCmdResp1+0x1cc>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a6f      	ldr	r2, [pc, #444]	; (800e664 <SDMMC_GetCmdResp1+0x1d0>)
 800e4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ac:	0a5b      	lsrs	r3, r3, #9
 800e4ae:	687a      	ldr	r2, [r7, #4]
 800e4b0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e4b4:	4623      	mov	r3, r4
 800e4b6:	1e5c      	subs	r4, r3, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d102      	bne.n	800e4c2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4c0:	e0c9      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0f0      	beq.n	800e4b4 <SDMMC_GetCmdResp1+0x20>
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d1eb      	bne.n	800e4b4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4e0:	f003 0304 	and.w	r3, r3, #4
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2204      	movs	r2, #4
 800e4ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4ee:	2304      	movs	r3, #4
 800e4f0:	e0b1      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4f6:	f003 0301 	and.w	r3, r3, #1
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d004      	beq.n	800e508 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2201      	movs	r2, #1
 800e502:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e504:	2301      	movs	r3, #1
 800e506:	e0a6      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	22c5      	movs	r2, #197	; 0xc5
 800e50c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e50e:	68f8      	ldr	r0, [r7, #12]
 800e510:	f7ff fd18 	bl	800df44 <SDIO_GetCommandResponse>
 800e514:	4603      	mov	r3, r0
 800e516:	461a      	mov	r2, r3
 800e518:	7afb      	ldrb	r3, [r7, #11]
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d001      	beq.n	800e522 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e51e:	2301      	movs	r3, #1
 800e520:	e099      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e522:	2100      	movs	r1, #0
 800e524:	68f8      	ldr	r0, [r7, #12]
 800e526:	f7ff fd1a 	bl	800df5e <SDIO_GetResponse>
 800e52a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e52c:	693a      	ldr	r2, [r7, #16]
 800e52e:	4b4e      	ldr	r3, [pc, #312]	; (800e668 <SDMMC_GetCmdResp1+0x1d4>)
 800e530:	4013      	ands	r3, r2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d101      	bne.n	800e53a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800e536:	2300      	movs	r3, #0
 800e538:	e08d      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	da02      	bge.n	800e546 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e544:	e087      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d001      	beq.n	800e554 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e550:	2340      	movs	r3, #64	; 0x40
 800e552:	e080      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e55e:	2380      	movs	r3, #128	; 0x80
 800e560:	e079      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e56c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e570:	e071      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e57c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e580:	e069      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e582:	693b      	ldr	r3, [r7, #16]
 800e584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e590:	e061      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e59c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5a0:	e059      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e5ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e5b0:	e051      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e5bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5c0:	e049      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e5cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5d0:	e041      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800e5dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5e0:	e039      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e5f0:	e031      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5f2:	693b      	ldr	r3, [r7, #16]
 800e5f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e600:	e029      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e60c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e610:	e021      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e61c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e620:	e019      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e62c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e630:	e011      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e63c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e640:	e009      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	f003 0308 	and.w	r3, r3, #8
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d002      	beq.n	800e652 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e64c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e650:	e001      	b.n	800e656 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e656:	4618      	mov	r0, r3
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd90      	pop	{r4, r7, pc}
 800e65e:	bf00      	nop
 800e660:	20000000 	.word	0x20000000
 800e664:	10624dd3 	.word	0x10624dd3
 800e668:	fdffe008 	.word	0xfdffe008

0800e66c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e66c:	b490      	push	{r4, r7}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e674:	4b1e      	ldr	r3, [pc, #120]	; (800e6f0 <SDMMC_GetCmdResp2+0x84>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4a1e      	ldr	r2, [pc, #120]	; (800e6f4 <SDMMC_GetCmdResp2+0x88>)
 800e67a:	fba2 2303 	umull	r2, r3, r2, r3
 800e67e:	0a5b      	lsrs	r3, r3, #9
 800e680:	f241 3288 	movw	r2, #5000	; 0x1388
 800e684:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e688:	4623      	mov	r3, r4
 800e68a:	1e5c      	subs	r4, r3, #1
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d102      	bne.n	800e696 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e694:	e026      	b.n	800e6e4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e69a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d0f0      	beq.n	800e688 <SDMMC_GetCmdResp2+0x1c>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d1eb      	bne.n	800e688 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b4:	f003 0304 	and.w	r3, r3, #4
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d004      	beq.n	800e6c6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2204      	movs	r2, #4
 800e6c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	e00e      	b.n	800e6e4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ca:	f003 0301 	and.w	r3, r3, #1
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d004      	beq.n	800e6dc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2201      	movs	r2, #1
 800e6d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	e003      	b.n	800e6e4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	22c5      	movs	r2, #197	; 0xc5
 800e6e0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6e2:	2300      	movs	r3, #0
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	3710      	adds	r7, #16
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bc90      	pop	{r4, r7}
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	20000000 	.word	0x20000000
 800e6f4:	10624dd3 	.word	0x10624dd3

0800e6f8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6f8:	b490      	push	{r4, r7}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e700:	4b18      	ldr	r3, [pc, #96]	; (800e764 <SDMMC_GetCmdResp3+0x6c>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a18      	ldr	r2, [pc, #96]	; (800e768 <SDMMC_GetCmdResp3+0x70>)
 800e706:	fba2 2303 	umull	r2, r3, r2, r3
 800e70a:	0a5b      	lsrs	r3, r3, #9
 800e70c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e710:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e714:	4623      	mov	r3, r4
 800e716:	1e5c      	subs	r4, r3, #1
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d102      	bne.n	800e722 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e71c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e720:	e01b      	b.n	800e75a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e726:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d0f0      	beq.n	800e714 <SDMMC_GetCmdResp3+0x1c>
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1eb      	bne.n	800e714 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e740:	f003 0304 	and.w	r3, r3, #4
 800e744:	2b00      	cmp	r3, #0
 800e746:	d004      	beq.n	800e752 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	2204      	movs	r2, #4
 800e74c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e74e:	2304      	movs	r3, #4
 800e750:	e003      	b.n	800e75a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	22c5      	movs	r2, #197	; 0xc5
 800e756:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e758:	2300      	movs	r3, #0
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3710      	adds	r7, #16
 800e75e:	46bd      	mov	sp, r7
 800e760:	bc90      	pop	{r4, r7}
 800e762:	4770      	bx	lr
 800e764:	20000000 	.word	0x20000000
 800e768:	10624dd3 	.word	0x10624dd3

0800e76c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e76c:	b590      	push	{r4, r7, lr}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	460b      	mov	r3, r1
 800e776:	607a      	str	r2, [r7, #4]
 800e778:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e77a:	4b34      	ldr	r3, [pc, #208]	; (800e84c <SDMMC_GetCmdResp6+0xe0>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	4a34      	ldr	r2, [pc, #208]	; (800e850 <SDMMC_GetCmdResp6+0xe4>)
 800e780:	fba2 2303 	umull	r2, r3, r2, r3
 800e784:	0a5b      	lsrs	r3, r3, #9
 800e786:	f241 3288 	movw	r2, #5000	; 0x1388
 800e78a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e78e:	4623      	mov	r3, r4
 800e790:	1e5c      	subs	r4, r3, #1
 800e792:	2b00      	cmp	r3, #0
 800e794:	d102      	bne.n	800e79c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e796:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e79a:	e052      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7a0:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7a2:	697b      	ldr	r3, [r7, #20]
 800e7a4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0f0      	beq.n	800e78e <SDMMC_GetCmdResp6+0x22>
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1eb      	bne.n	800e78e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7ba:	f003 0304 	and.w	r3, r3, #4
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d004      	beq.n	800e7cc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2204      	movs	r2, #4
 800e7c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c8:	2304      	movs	r3, #4
 800e7ca:	e03a      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d0:	f003 0301 	and.w	r3, r3, #1
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d004      	beq.n	800e7e2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e02f      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff fbae 	bl	800df44 <SDIO_GetCommandResponse>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	7afb      	ldrb	r3, [r7, #11]
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d001      	beq.n	800e7f6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e025      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	22c5      	movs	r2, #197	; 0xc5
 800e7fa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f7ff fbad 	bl	800df5e <SDIO_GetResponse>
 800e804:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d106      	bne.n	800e81e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	0c1b      	lsrs	r3, r3, #16
 800e814:	b29a      	uxth	r2, r3
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e011      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e82c:	e009      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e834:	2b00      	cmp	r3, #0
 800e836:	d002      	beq.n	800e83e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e83c:	e001      	b.n	800e842 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e83e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e842:	4618      	mov	r0, r3
 800e844:	371c      	adds	r7, #28
 800e846:	46bd      	mov	sp, r7
 800e848:	bd90      	pop	{r4, r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20000000 	.word	0x20000000
 800e850:	10624dd3 	.word	0x10624dd3

0800e854 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e854:	b490      	push	{r4, r7}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e85c:	4b21      	ldr	r3, [pc, #132]	; (800e8e4 <SDMMC_GetCmdResp7+0x90>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a21      	ldr	r2, [pc, #132]	; (800e8e8 <SDMMC_GetCmdResp7+0x94>)
 800e862:	fba2 2303 	umull	r2, r3, r2, r3
 800e866:	0a5b      	lsrs	r3, r3, #9
 800e868:	f241 3288 	movw	r2, #5000	; 0x1388
 800e86c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800e870:	4623      	mov	r3, r4
 800e872:	1e5c      	subs	r4, r3, #1
 800e874:	2b00      	cmp	r3, #0
 800e876:	d102      	bne.n	800e87e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e878:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e87c:	e02c      	b.n	800e8d8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e882:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d0f0      	beq.n	800e870 <SDMMC_GetCmdResp7+0x1c>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1eb      	bne.n	800e870 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e89c:	f003 0304 	and.w	r3, r3, #4
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d004      	beq.n	800e8ae <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2204      	movs	r2, #4
 800e8a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8aa:	2304      	movs	r3, #4
 800e8ac:	e014      	b.n	800e8d8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8b2:	f003 0301 	and.w	r3, r3, #1
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d004      	beq.n	800e8c4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e009      	b.n	800e8d8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2240      	movs	r2, #64	; 0x40
 800e8d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8d6:	2300      	movs	r3, #0
  
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bc90      	pop	{r4, r7}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	20000000 	.word	0x20000000
 800e8e8:	10624dd3 	.word	0x10624dd3

0800e8ec <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e8f0:	4904      	ldr	r1, [pc, #16]	; (800e904 <MX_FATFS_Init+0x18>)
 800e8f2:	4805      	ldr	r0, [pc, #20]	; (800e908 <MX_FATFS_Init+0x1c>)
 800e8f4:	f003 fb9c 	bl	8012030 <FATFS_LinkDriver>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	461a      	mov	r2, r3
 800e8fc:	4b03      	ldr	r3, [pc, #12]	; (800e90c <MX_FATFS_Init+0x20>)
 800e8fe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e900:	bf00      	nop
 800e902:	bd80      	pop	{r7, pc}
 800e904:	20035f38 	.word	0x20035f38
 800e908:	0801852c 	.word	0x0801852c
 800e90c:	20035f34 	.word	0x20035f34

0800e910 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b082      	sub	sp, #8
 800e914:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e916:	2300      	movs	r3, #0
 800e918:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e91a:	f000 f896 	bl	800ea4a <BSP_SD_IsDetected>
 800e91e:	4603      	mov	r3, r0
 800e920:	2b01      	cmp	r3, #1
 800e922:	d001      	beq.n	800e928 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e924:	2301      	movs	r3, #1
 800e926:	e012      	b.n	800e94e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e928:	480b      	ldr	r0, [pc, #44]	; (800e958 <BSP_SD_Init+0x48>)
 800e92a:	f7fb ffa5 	bl	800a878 <HAL_SD_Init>
 800e92e:	4603      	mov	r3, r0
 800e930:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e932:	79fb      	ldrb	r3, [r7, #7]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d109      	bne.n	800e94c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e93c:	4806      	ldr	r0, [pc, #24]	; (800e958 <BSP_SD_Init+0x48>)
 800e93e:	f7fc fd4f 	bl	800b3e0 <HAL_SD_ConfigWideBusOperation>
 800e942:	4603      	mov	r3, r0
 800e944:	2b00      	cmp	r3, #0
 800e946:	d001      	beq.n	800e94c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e94c:	79fb      	ldrb	r3, [r7, #7]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3708      	adds	r7, #8
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}
 800e956:	bf00      	nop
 800e958:	20035d30 	.word	0x20035d30

0800e95c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e968:	2300      	movs	r3, #0
 800e96a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	68f9      	ldr	r1, [r7, #12]
 800e972:	4806      	ldr	r0, [pc, #24]	; (800e98c <BSP_SD_ReadBlocks_DMA+0x30>)
 800e974:	f7fc f810 	bl	800a998 <HAL_SD_ReadBlocks_DMA>
 800e978:	4603      	mov	r3, r0
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e97e:	2301      	movs	r3, #1
 800e980:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e982:	7dfb      	ldrb	r3, [r7, #23]
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20035d30 	.word	0x20035d30

0800e990 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b086      	sub	sp, #24
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	60b9      	str	r1, [r7, #8]
 800e99a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e99c:	2300      	movs	r3, #0
 800e99e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	68ba      	ldr	r2, [r7, #8]
 800e9a4:	68f9      	ldr	r1, [r7, #12]
 800e9a6:	4806      	ldr	r0, [pc, #24]	; (800e9c0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e9a8:	f7fc f8de 	bl	800ab68 <HAL_SD_WriteBlocks_DMA>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d001      	beq.n	800e9b6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e9b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3718      	adds	r7, #24
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	20035d30 	.word	0x20035d30

0800e9c4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e9c8:	4805      	ldr	r0, [pc, #20]	; (800e9e0 <BSP_SD_GetCardState+0x1c>)
 800e9ca:	f7fc fd85 	bl	800b4d8 <HAL_SD_GetCardState>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b04      	cmp	r3, #4
 800e9d2:	bf14      	ite	ne
 800e9d4:	2301      	movne	r3, #1
 800e9d6:	2300      	moveq	r3, #0
 800e9d8:	b2db      	uxtb	r3, r3
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	20035d30 	.word	0x20035d30

0800e9e4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e9ec:	6879      	ldr	r1, [r7, #4]
 800e9ee:	4803      	ldr	r0, [pc, #12]	; (800e9fc <BSP_SD_GetCardInfo+0x18>)
 800e9f0:	f7fc fcca 	bl	800b388 <HAL_SD_GetCardInfo>
}
 800e9f4:	bf00      	nop
 800e9f6:	3708      	adds	r7, #8
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}
 800e9fc:	20035d30 	.word	0x20035d30

0800ea00 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b082      	sub	sp, #8
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ea08:	f000 f818 	bl	800ea3c <BSP_SD_AbortCallback>
}
 800ea0c:	bf00      	nop
 800ea0e:	3708      	adds	r7, #8
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}

0800ea14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b082      	sub	sp, #8
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ea1c:	f000 f9a8 	bl	800ed70 <BSP_SD_WriteCpltCallback>
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ea30:	f000 f9aa 	bl	800ed88 <BSP_SD_ReadCpltCallback>
}
 800ea34:	bf00      	nop
 800ea36:	3708      	adds	r7, #8
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	bd80      	pop	{r7, pc}

0800ea3c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	af00      	add	r7, sp, #0

}
 800ea40:	bf00      	nop
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr

0800ea4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b082      	sub	sp, #8
 800ea4e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ea50:	2301      	movs	r3, #1
 800ea52:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ea54:	f000 f80c 	bl	800ea70 <BSP_PlatformIsDetected>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ea5e:	2300      	movs	r3, #0
 800ea60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ea62:	79fb      	ldrb	r3, [r7, #7]
 800ea64:	b2db      	uxtb	r3, r3
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3708      	adds	r7, #8
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
	...

0800ea70 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ea76:	2301      	movs	r3, #1
 800ea78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ea7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ea7e:	4806      	ldr	r0, [pc, #24]	; (800ea98 <BSP_PlatformIsDetected+0x28>)
 800ea80:	f7fa f866 	bl	8008b50 <HAL_GPIO_ReadPin>
 800ea84:	4603      	mov	r3, r0
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	40020000 	.word	0x40020000

0800ea9c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b084      	sub	sp, #16
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800eaa4:	f7f8 fdca 	bl	800763c <HAL_GetTick>
 800eaa8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800eaaa:	e006      	b.n	800eaba <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800eaac:	f7ff ff8a 	bl	800e9c4 <BSP_SD_GetCardState>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d101      	bne.n	800eaba <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	e009      	b.n	800eace <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800eaba:	f7f8 fdbf 	bl	800763c <HAL_GetTick>
 800eabe:	4602      	mov	r2, r0
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	1ad3      	subs	r3, r2, r3
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	429a      	cmp	r2, r3
 800eac8:	d8f0      	bhi.n	800eaac <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800eaca:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eace:	4618      	mov	r0, r3
 800ead0:	3710      	adds	r7, #16
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
	...

0800ead8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800eae2:	4b0b      	ldr	r3, [pc, #44]	; (800eb10 <SD_CheckStatus+0x38>)
 800eae4:	2201      	movs	r2, #1
 800eae6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800eae8:	f7ff ff6c 	bl	800e9c4 <BSP_SD_GetCardState>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d107      	bne.n	800eb02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <SD_CheckStatus+0x38>)
 800eaf4:	781b      	ldrb	r3, [r3, #0]
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f023 0301 	bic.w	r3, r3, #1
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	4b04      	ldr	r3, [pc, #16]	; (800eb10 <SD_CheckStatus+0x38>)
 800eb00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800eb02:	4b03      	ldr	r3, [pc, #12]	; (800eb10 <SD_CheckStatus+0x38>)
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	b2db      	uxtb	r3, r3
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	20000009 	.word	0x20000009

0800eb14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b082      	sub	sp, #8
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800eb1e:	f7ff fef7 	bl	800e910 <BSP_SD_Init>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d107      	bne.n	800eb38 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800eb28:	79fb      	ldrb	r3, [r7, #7]
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7ff ffd4 	bl	800ead8 <SD_CheckStatus>
 800eb30:	4603      	mov	r3, r0
 800eb32:	461a      	mov	r2, r3
 800eb34:	4b04      	ldr	r3, [pc, #16]	; (800eb48 <SD_initialize+0x34>)
 800eb36:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800eb38:	4b03      	ldr	r3, [pc, #12]	; (800eb48 <SD_initialize+0x34>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	b2db      	uxtb	r3, r3
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	20000009 	.word	0x20000009

0800eb4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b082      	sub	sp, #8
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	4603      	mov	r3, r0
 800eb54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800eb56:	79fb      	ldrb	r3, [r7, #7]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff ffbd 	bl	800ead8 <SD_CheckStatus>
 800eb5e:	4603      	mov	r3, r0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	60b9      	str	r1, [r7, #8]
 800eb70:	607a      	str	r2, [r7, #4]
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	4603      	mov	r3, r0
 800eb76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800eb7c:	f247 5030 	movw	r0, #30000	; 0x7530
 800eb80:	f7ff ff8c 	bl	800ea9c <SD_CheckStatusWithTimeout>
 800eb84:	4603      	mov	r3, r0
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	da01      	bge.n	800eb8e <SD_read+0x26>
  {
    return res;
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
 800eb8c:	e03b      	b.n	800ec06 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800eb8e:	683a      	ldr	r2, [r7, #0]
 800eb90:	6879      	ldr	r1, [r7, #4]
 800eb92:	68b8      	ldr	r0, [r7, #8]
 800eb94:	f7ff fee2 	bl	800e95c <BSP_SD_ReadBlocks_DMA>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d132      	bne.n	800ec04 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800eb9e:	4b1c      	ldr	r3, [pc, #112]	; (800ec10 <SD_read+0xa8>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800eba4:	f7f8 fd4a 	bl	800763c <HAL_GetTick>
 800eba8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ebaa:	bf00      	nop
 800ebac:	4b18      	ldr	r3, [pc, #96]	; (800ec10 <SD_read+0xa8>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d108      	bne.n	800ebc6 <SD_read+0x5e>
 800ebb4:	f7f8 fd42 	bl	800763c <HAL_GetTick>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	f247 522f 	movw	r2, #29999	; 0x752f
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d9f2      	bls.n	800ebac <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800ebc6:	4b12      	ldr	r3, [pc, #72]	; (800ec10 <SD_read+0xa8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d102      	bne.n	800ebd4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800ebce:	2301      	movs	r3, #1
 800ebd0:	75fb      	strb	r3, [r7, #23]
 800ebd2:	e017      	b.n	800ec04 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800ebd4:	4b0e      	ldr	r3, [pc, #56]	; (800ec10 <SD_read+0xa8>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ebda:	f7f8 fd2f 	bl	800763c <HAL_GetTick>
 800ebde:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ebe0:	e007      	b.n	800ebf2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ebe2:	f7ff feef 	bl	800e9c4 <BSP_SD_GetCardState>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d102      	bne.n	800ebf2 <SD_read+0x8a>
          {
            res = RES_OK;
 800ebec:	2300      	movs	r3, #0
 800ebee:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800ebf0:	e008      	b.n	800ec04 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ebf2:	f7f8 fd23 	bl	800763c <HAL_GetTick>
 800ebf6:	4602      	mov	r2, r0
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	1ad3      	subs	r3, r2, r3
 800ebfc:	f247 522f 	movw	r2, #29999	; 0x752f
 800ec00:	4293      	cmp	r3, r2
 800ec02:	d9ee      	bls.n	800ebe2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	200335cc 	.word	0x200335cc

0800ec14 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b086      	sub	sp, #24
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	60b9      	str	r1, [r7, #8]
 800ec1c:	607a      	str	r2, [r7, #4]
 800ec1e:	603b      	str	r3, [r7, #0]
 800ec20:	4603      	mov	r3, r0
 800ec22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ec24:	2301      	movs	r3, #1
 800ec26:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ec28:	4b24      	ldr	r3, [pc, #144]	; (800ecbc <SD_write+0xa8>)
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ec2e:	f247 5030 	movw	r0, #30000	; 0x7530
 800ec32:	f7ff ff33 	bl	800ea9c <SD_CheckStatusWithTimeout>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	da01      	bge.n	800ec40 <SD_write+0x2c>
  {
    return res;
 800ec3c:	7dfb      	ldrb	r3, [r7, #23]
 800ec3e:	e038      	b.n	800ecb2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ec40:	683a      	ldr	r2, [r7, #0]
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	68b8      	ldr	r0, [r7, #8]
 800ec46:	f7ff fea3 	bl	800e990 <BSP_SD_WriteBlocks_DMA>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d12f      	bne.n	800ecb0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ec50:	f7f8 fcf4 	bl	800763c <HAL_GetTick>
 800ec54:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ec56:	bf00      	nop
 800ec58:	4b18      	ldr	r3, [pc, #96]	; (800ecbc <SD_write+0xa8>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d108      	bne.n	800ec72 <SD_write+0x5e>
 800ec60:	f7f8 fcec 	bl	800763c <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	f247 522f 	movw	r2, #29999	; 0x752f
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d9f2      	bls.n	800ec58 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ec72:	4b12      	ldr	r3, [pc, #72]	; (800ecbc <SD_write+0xa8>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d102      	bne.n	800ec80 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	75fb      	strb	r3, [r7, #23]
 800ec7e:	e017      	b.n	800ecb0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ec80:	4b0e      	ldr	r3, [pc, #56]	; (800ecbc <SD_write+0xa8>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ec86:	f7f8 fcd9 	bl	800763c <HAL_GetTick>
 800ec8a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec8c:	e007      	b.n	800ec9e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ec8e:	f7ff fe99 	bl	800e9c4 <BSP_SD_GetCardState>
 800ec92:	4603      	mov	r3, r0
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d102      	bne.n	800ec9e <SD_write+0x8a>
          {
            res = RES_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	75fb      	strb	r3, [r7, #23]
            break;
 800ec9c:	e008      	b.n	800ecb0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ec9e:	f7f8 fccd 	bl	800763c <HAL_GetTick>
 800eca2:	4602      	mov	r2, r0
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	1ad3      	subs	r3, r2, r3
 800eca8:	f247 522f 	movw	r2, #29999	; 0x752f
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d9ee      	bls.n	800ec8e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	3718      	adds	r7, #24
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	200335c8 	.word	0x200335c8

0800ecc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b08c      	sub	sp, #48	; 0x30
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	603a      	str	r2, [r7, #0]
 800ecca:	71fb      	strb	r3, [r7, #7]
 800eccc:	460b      	mov	r3, r1
 800ecce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ecd6:	4b25      	ldr	r3, [pc, #148]	; (800ed6c <SD_ioctl+0xac>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	b2db      	uxtb	r3, r3
 800ecdc:	f003 0301 	and.w	r3, r3, #1
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <SD_ioctl+0x28>
 800ece4:	2303      	movs	r3, #3
 800ece6:	e03c      	b.n	800ed62 <SD_ioctl+0xa2>

  switch (cmd)
 800ece8:	79bb      	ldrb	r3, [r7, #6]
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d834      	bhi.n	800ed58 <SD_ioctl+0x98>
 800ecee:	a201      	add	r2, pc, #4	; (adr r2, 800ecf4 <SD_ioctl+0x34>)
 800ecf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecf4:	0800ed05 	.word	0x0800ed05
 800ecf8:	0800ed0d 	.word	0x0800ed0d
 800ecfc:	0800ed25 	.word	0x0800ed25
 800ed00:	0800ed3f 	.word	0x0800ed3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ed04:	2300      	movs	r3, #0
 800ed06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed0a:	e028      	b.n	800ed5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed0c:	f107 030c 	add.w	r3, r7, #12
 800ed10:	4618      	mov	r0, r3
 800ed12:	f7ff fe67 	bl	800e9e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ed16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed22:	e01c      	b.n	800ed5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed24:	f107 030c 	add.w	r3, r7, #12
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff fe5b 	bl	800e9e4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ed2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ed36:	2300      	movs	r3, #0
 800ed38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed3c:	e00f      	b.n	800ed5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ed3e:	f107 030c 	add.w	r3, r7, #12
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7ff fe4e 	bl	800e9e4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ed48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed4a:	0a5a      	lsrs	r2, r3, #9
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ed56:	e002      	b.n	800ed5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ed58:	2304      	movs	r3, #4
 800ed5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ed5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ed62:	4618      	mov	r0, r3
 800ed64:	3730      	adds	r7, #48	; 0x30
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	20000009 	.word	0x20000009

0800ed70 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ed70:	b480      	push	{r7}
 800ed72:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800ed74:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <BSP_SD_WriteCpltCallback+0x14>)
 800ed76:	2201      	movs	r2, #1
 800ed78:	601a      	str	r2, [r3, #0]
}
 800ed7a:	bf00      	nop
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr
 800ed84:	200335c8 	.word	0x200335c8

0800ed88 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800ed8c:	4b03      	ldr	r3, [pc, #12]	; (800ed9c <BSP_SD_ReadCpltCallback+0x14>)
 800ed8e:	2201      	movs	r2, #1
 800ed90:	601a      	str	r2, [r3, #0]
}
 800ed92:	bf00      	nop
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr
 800ed9c:	200335cc 	.word	0x200335cc

0800eda0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	4603      	mov	r3, r0
 800eda8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edaa:	79fb      	ldrb	r3, [r7, #7]
 800edac:	4a08      	ldr	r2, [pc, #32]	; (800edd0 <disk_status+0x30>)
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	4413      	add	r3, r2
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	79fa      	ldrb	r2, [r7, #7]
 800edb8:	4905      	ldr	r1, [pc, #20]	; (800edd0 <disk_status+0x30>)
 800edba:	440a      	add	r2, r1
 800edbc:	7a12      	ldrb	r2, [r2, #8]
 800edbe:	4610      	mov	r0, r2
 800edc0:	4798      	blx	r3
 800edc2:	4603      	mov	r3, r0
 800edc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800edc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	200335f8 	.word	0x200335f8

0800edd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	4603      	mov	r3, r0
 800eddc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800edde:	2300      	movs	r3, #0
 800ede0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ede2:	79fb      	ldrb	r3, [r7, #7]
 800ede4:	4a0d      	ldr	r2, [pc, #52]	; (800ee1c <disk_initialize+0x48>)
 800ede6:	5cd3      	ldrb	r3, [r2, r3]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d111      	bne.n	800ee10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800edec:	79fb      	ldrb	r3, [r7, #7]
 800edee:	4a0b      	ldr	r2, [pc, #44]	; (800ee1c <disk_initialize+0x48>)
 800edf0:	2101      	movs	r1, #1
 800edf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800edf4:	79fb      	ldrb	r3, [r7, #7]
 800edf6:	4a09      	ldr	r2, [pc, #36]	; (800ee1c <disk_initialize+0x48>)
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	4413      	add	r3, r2
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	79fa      	ldrb	r2, [r7, #7]
 800ee02:	4906      	ldr	r1, [pc, #24]	; (800ee1c <disk_initialize+0x48>)
 800ee04:	440a      	add	r2, r1
 800ee06:	7a12      	ldrb	r2, [r2, #8]
 800ee08:	4610      	mov	r0, r2
 800ee0a:	4798      	blx	r3
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3710      	adds	r7, #16
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	200335f8 	.word	0x200335f8

0800ee20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee20:	b590      	push	{r4, r7, lr}
 800ee22:	b087      	sub	sp, #28
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60b9      	str	r1, [r7, #8]
 800ee28:	607a      	str	r2, [r7, #4]
 800ee2a:	603b      	str	r3, [r7, #0]
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee30:	7bfb      	ldrb	r3, [r7, #15]
 800ee32:	4a0a      	ldr	r2, [pc, #40]	; (800ee5c <disk_read+0x3c>)
 800ee34:	009b      	lsls	r3, r3, #2
 800ee36:	4413      	add	r3, r2
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	689c      	ldr	r4, [r3, #8]
 800ee3c:	7bfb      	ldrb	r3, [r7, #15]
 800ee3e:	4a07      	ldr	r2, [pc, #28]	; (800ee5c <disk_read+0x3c>)
 800ee40:	4413      	add	r3, r2
 800ee42:	7a18      	ldrb	r0, [r3, #8]
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	687a      	ldr	r2, [r7, #4]
 800ee48:	68b9      	ldr	r1, [r7, #8]
 800ee4a:	47a0      	blx	r4
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee50:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	371c      	adds	r7, #28
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd90      	pop	{r4, r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	200335f8 	.word	0x200335f8

0800ee60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ee60:	b590      	push	{r4, r7, lr}
 800ee62:	b087      	sub	sp, #28
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60b9      	str	r1, [r7, #8]
 800ee68:	607a      	str	r2, [r7, #4]
 800ee6a:	603b      	str	r3, [r7, #0]
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
 800ee72:	4a0a      	ldr	r2, [pc, #40]	; (800ee9c <disk_write+0x3c>)
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	4413      	add	r3, r2
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	68dc      	ldr	r4, [r3, #12]
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	4a07      	ldr	r2, [pc, #28]	; (800ee9c <disk_write+0x3c>)
 800ee80:	4413      	add	r3, r2
 800ee82:	7a18      	ldrb	r0, [r3, #8]
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	47a0      	blx	r4
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	371c      	adds	r7, #28
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd90      	pop	{r4, r7, pc}
 800ee9a:	bf00      	nop
 800ee9c:	200335f8 	.word	0x200335f8

0800eea0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	4603      	mov	r3, r0
 800eea8:	603a      	str	r2, [r7, #0]
 800eeaa:	71fb      	strb	r3, [r7, #7]
 800eeac:	460b      	mov	r3, r1
 800eeae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eeb0:	79fb      	ldrb	r3, [r7, #7]
 800eeb2:	4a09      	ldr	r2, [pc, #36]	; (800eed8 <disk_ioctl+0x38>)
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4413      	add	r3, r2
 800eeb8:	685b      	ldr	r3, [r3, #4]
 800eeba:	691b      	ldr	r3, [r3, #16]
 800eebc:	79fa      	ldrb	r2, [r7, #7]
 800eebe:	4906      	ldr	r1, [pc, #24]	; (800eed8 <disk_ioctl+0x38>)
 800eec0:	440a      	add	r2, r1
 800eec2:	7a10      	ldrb	r0, [r2, #8]
 800eec4:	79b9      	ldrb	r1, [r7, #6]
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	4798      	blx	r3
 800eeca:	4603      	mov	r3, r0
 800eecc:	73fb      	strb	r3, [r7, #15]
  return res;
 800eece:	7bfb      	ldrb	r3, [r7, #15]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}
 800eed8:	200335f8 	.word	0x200335f8

0800eedc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eedc:	b480      	push	{r7}
 800eede:	b085      	sub	sp, #20
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3301      	adds	r3, #1
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eeec:	89fb      	ldrh	r3, [r7, #14]
 800eeee:	021b      	lsls	r3, r3, #8
 800eef0:	b21a      	sxth	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	b21b      	sxth	r3, r3
 800eef8:	4313      	orrs	r3, r2
 800eefa:	b21b      	sxth	r3, r3
 800eefc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800eefe:	89fb      	ldrh	r3, [r7, #14]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr

0800ef0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b085      	sub	sp, #20
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	3303      	adds	r3, #3
 800ef18:	781b      	ldrb	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	021b      	lsls	r3, r3, #8
 800ef20:	687a      	ldr	r2, [r7, #4]
 800ef22:	3202      	adds	r2, #2
 800ef24:	7812      	ldrb	r2, [r2, #0]
 800ef26:	4313      	orrs	r3, r2
 800ef28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	021b      	lsls	r3, r3, #8
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	3201      	adds	r2, #1
 800ef32:	7812      	ldrb	r2, [r2, #0]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	7812      	ldrb	r2, [r2, #0]
 800ef40:	4313      	orrs	r3, r2
 800ef42:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef44:	68fb      	ldr	r3, [r7, #12]
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	3714      	adds	r7, #20
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr

0800ef52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef52:	b480      	push	{r7}
 800ef54:	b083      	sub	sp, #12
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	1c5a      	adds	r2, r3, #1
 800ef62:	607a      	str	r2, [r7, #4]
 800ef64:	887a      	ldrh	r2, [r7, #2]
 800ef66:	b2d2      	uxtb	r2, r2
 800ef68:	701a      	strb	r2, [r3, #0]
 800ef6a:	887b      	ldrh	r3, [r7, #2]
 800ef6c:	0a1b      	lsrs	r3, r3, #8
 800ef6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	1c5a      	adds	r2, r3, #1
 800ef74:	607a      	str	r2, [r7, #4]
 800ef76:	887a      	ldrh	r2, [r7, #2]
 800ef78:	b2d2      	uxtb	r2, r2
 800ef7a:	701a      	strb	r2, [r3, #0]
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	607a      	str	r2, [r7, #4]
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	b2d2      	uxtb	r2, r2
 800ef9c:	701a      	strb	r2, [r3, #0]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	0a1b      	lsrs	r3, r3, #8
 800efa2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	607a      	str	r2, [r7, #4]
 800efaa:	683a      	ldr	r2, [r7, #0]
 800efac:	b2d2      	uxtb	r2, r2
 800efae:	701a      	strb	r2, [r3, #0]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	0a1b      	lsrs	r3, r3, #8
 800efb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	1c5a      	adds	r2, r3, #1
 800efba:	607a      	str	r2, [r7, #4]
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	b2d2      	uxtb	r2, r2
 800efc0:	701a      	strb	r2, [r3, #0]
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	0a1b      	lsrs	r3, r3, #8
 800efc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	1c5a      	adds	r2, r3, #1
 800efcc:	607a      	str	r2, [r7, #4]
 800efce:	683a      	ldr	r2, [r7, #0]
 800efd0:	b2d2      	uxtb	r2, r2
 800efd2:	701a      	strb	r2, [r3, #0]
}
 800efd4:	bf00      	nop
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	60b9      	str	r1, [r7, #8]
 800efea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00d      	beq.n	800f016 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800effa:	693a      	ldr	r2, [r7, #16]
 800effc:	1c53      	adds	r3, r2, #1
 800effe:	613b      	str	r3, [r7, #16]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	1c59      	adds	r1, r3, #1
 800f004:	6179      	str	r1, [r7, #20]
 800f006:	7812      	ldrb	r2, [r2, #0]
 800f008:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	3b01      	subs	r3, #1
 800f00e:	607b      	str	r3, [r7, #4]
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d1f1      	bne.n	800effa <mem_cpy+0x1a>
	}
}
 800f016:	bf00      	nop
 800f018:	371c      	adds	r7, #28
 800f01a:	46bd      	mov	sp, r7
 800f01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f020:	4770      	bx	lr

0800f022 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f022:	b480      	push	{r7}
 800f024:	b087      	sub	sp, #28
 800f026:	af00      	add	r7, sp, #0
 800f028:	60f8      	str	r0, [r7, #12]
 800f02a:	60b9      	str	r1, [r7, #8]
 800f02c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	1c5a      	adds	r2, r3, #1
 800f036:	617a      	str	r2, [r7, #20]
 800f038:	68ba      	ldr	r2, [r7, #8]
 800f03a:	b2d2      	uxtb	r2, r2
 800f03c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	3b01      	subs	r3, #1
 800f042:	607b      	str	r3, [r7, #4]
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1f3      	bne.n	800f032 <mem_set+0x10>
}
 800f04a:	bf00      	nop
 800f04c:	371c      	adds	r7, #28
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr

0800f056 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f056:	b480      	push	{r7}
 800f058:	b089      	sub	sp, #36	; 0x24
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	60f8      	str	r0, [r7, #12]
 800f05e:	60b9      	str	r1, [r7, #8]
 800f060:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	61fb      	str	r3, [r7, #28]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f06e:	69fb      	ldr	r3, [r7, #28]
 800f070:	1c5a      	adds	r2, r3, #1
 800f072:	61fa      	str	r2, [r7, #28]
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	4619      	mov	r1, r3
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	61ba      	str	r2, [r7, #24]
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	1acb      	subs	r3, r1, r3
 800f082:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3b01      	subs	r3, #1
 800f088:	607b      	str	r3, [r7, #4]
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <mem_cmp+0x40>
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d0eb      	beq.n	800f06e <mem_cmp+0x18>

	return r;
 800f096:	697b      	ldr	r3, [r7, #20]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3724      	adds	r7, #36	; 0x24
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0a4:	b480      	push	{r7}
 800f0a6:	b083      	sub	sp, #12
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f0ae:	e002      	b.n	800f0b6 <chk_chr+0x12>
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	3301      	adds	r3, #1
 800f0b4:	607b      	str	r3, [r7, #4]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d005      	beq.n	800f0ca <chk_chr+0x26>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	461a      	mov	r2, r3
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d1f2      	bne.n	800f0b0 <chk_chr+0xc>
	return *str;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	370c      	adds	r7, #12
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	60bb      	str	r3, [r7, #8]
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	60fb      	str	r3, [r7, #12]
 800f0ee:	e029      	b.n	800f144 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f0f0:	4a27      	ldr	r2, [pc, #156]	; (800f190 <chk_lock+0xb4>)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	011b      	lsls	r3, r3, #4
 800f0f6:	4413      	add	r3, r2
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d01d      	beq.n	800f13a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f0fe:	4a24      	ldr	r2, [pc, #144]	; (800f190 <chk_lock+0xb4>)
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	011b      	lsls	r3, r3, #4
 800f104:	4413      	add	r3, r2
 800f106:	681a      	ldr	r2, [r3, #0]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d116      	bne.n	800f13e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f110:	4a1f      	ldr	r2, [pc, #124]	; (800f190 <chk_lock+0xb4>)
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	011b      	lsls	r3, r3, #4
 800f116:	4413      	add	r3, r2
 800f118:	3304      	adds	r3, #4
 800f11a:	681a      	ldr	r2, [r3, #0]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f120:	429a      	cmp	r2, r3
 800f122:	d10c      	bne.n	800f13e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f124:	4a1a      	ldr	r2, [pc, #104]	; (800f190 <chk_lock+0xb4>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	011b      	lsls	r3, r3, #4
 800f12a:	4413      	add	r3, r2
 800f12c:	3308      	adds	r3, #8
 800f12e:	681a      	ldr	r2, [r3, #0]
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f134:	429a      	cmp	r2, r3
 800f136:	d102      	bne.n	800f13e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f138:	e007      	b.n	800f14a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f13a:	2301      	movs	r3, #1
 800f13c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	3301      	adds	r3, #1
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d9d2      	bls.n	800f0f0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2b02      	cmp	r3, #2
 800f14e:	d109      	bne.n	800f164 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d102      	bne.n	800f15c <chk_lock+0x80>
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d101      	bne.n	800f160 <chk_lock+0x84>
 800f15c:	2300      	movs	r3, #0
 800f15e:	e010      	b.n	800f182 <chk_lock+0xa6>
 800f160:	2312      	movs	r3, #18
 800f162:	e00e      	b.n	800f182 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d108      	bne.n	800f17c <chk_lock+0xa0>
 800f16a:	4a09      	ldr	r2, [pc, #36]	; (800f190 <chk_lock+0xb4>)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	011b      	lsls	r3, r3, #4
 800f170:	4413      	add	r3, r2
 800f172:	330c      	adds	r3, #12
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f17a:	d101      	bne.n	800f180 <chk_lock+0xa4>
 800f17c:	2310      	movs	r3, #16
 800f17e:	e000      	b.n	800f182 <chk_lock+0xa6>
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3714      	adds	r7, #20
 800f186:	46bd      	mov	sp, r7
 800f188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop
 800f190:	200335d8 	.word	0x200335d8

0800f194 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f194:	b480      	push	{r7}
 800f196:	b083      	sub	sp, #12
 800f198:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f19a:	2300      	movs	r3, #0
 800f19c:	607b      	str	r3, [r7, #4]
 800f19e:	e002      	b.n	800f1a6 <enq_lock+0x12>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	607b      	str	r3, [r7, #4]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d806      	bhi.n	800f1ba <enq_lock+0x26>
 800f1ac:	4a09      	ldr	r2, [pc, #36]	; (800f1d4 <enq_lock+0x40>)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	011b      	lsls	r3, r3, #4
 800f1b2:	4413      	add	r3, r2
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d1f2      	bne.n	800f1a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2b02      	cmp	r3, #2
 800f1be:	bf14      	ite	ne
 800f1c0:	2301      	movne	r3, #1
 800f1c2:	2300      	moveq	r3, #0
 800f1c4:	b2db      	uxtb	r3, r3
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	200335d8 	.word	0x200335d8

0800f1d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	60fb      	str	r3, [r7, #12]
 800f1e6:	e01f      	b.n	800f228 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f1e8:	4a41      	ldr	r2, [pc, #260]	; (800f2f0 <inc_lock+0x118>)
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	011b      	lsls	r3, r3, #4
 800f1ee:	4413      	add	r3, r2
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	429a      	cmp	r2, r3
 800f1f8:	d113      	bne.n	800f222 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f1fa:	4a3d      	ldr	r2, [pc, #244]	; (800f2f0 <inc_lock+0x118>)
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	011b      	lsls	r3, r3, #4
 800f200:	4413      	add	r3, r2
 800f202:	3304      	adds	r3, #4
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d109      	bne.n	800f222 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f20e:	4a38      	ldr	r2, [pc, #224]	; (800f2f0 <inc_lock+0x118>)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	011b      	lsls	r3, r3, #4
 800f214:	4413      	add	r3, r2
 800f216:	3308      	adds	r3, #8
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f21e:	429a      	cmp	r2, r3
 800f220:	d006      	beq.n	800f230 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	3301      	adds	r3, #1
 800f226:	60fb      	str	r3, [r7, #12]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d9dc      	bls.n	800f1e8 <inc_lock+0x10>
 800f22e:	e000      	b.n	800f232 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f230:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2b02      	cmp	r3, #2
 800f236:	d132      	bne.n	800f29e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f238:	2300      	movs	r3, #0
 800f23a:	60fb      	str	r3, [r7, #12]
 800f23c:	e002      	b.n	800f244 <inc_lock+0x6c>
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	3301      	adds	r3, #1
 800f242:	60fb      	str	r3, [r7, #12]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2b01      	cmp	r3, #1
 800f248:	d806      	bhi.n	800f258 <inc_lock+0x80>
 800f24a:	4a29      	ldr	r2, [pc, #164]	; (800f2f0 <inc_lock+0x118>)
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	011b      	lsls	r3, r3, #4
 800f250:	4413      	add	r3, r2
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d1f2      	bne.n	800f23e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d101      	bne.n	800f262 <inc_lock+0x8a>
 800f25e:	2300      	movs	r3, #0
 800f260:	e040      	b.n	800f2e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	4922      	ldr	r1, [pc, #136]	; (800f2f0 <inc_lock+0x118>)
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	440b      	add	r3, r1
 800f26e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	689a      	ldr	r2, [r3, #8]
 800f274:	491e      	ldr	r1, [pc, #120]	; (800f2f0 <inc_lock+0x118>)
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	011b      	lsls	r3, r3, #4
 800f27a:	440b      	add	r3, r1
 800f27c:	3304      	adds	r3, #4
 800f27e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	695a      	ldr	r2, [r3, #20]
 800f284:	491a      	ldr	r1, [pc, #104]	; (800f2f0 <inc_lock+0x118>)
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	011b      	lsls	r3, r3, #4
 800f28a:	440b      	add	r3, r1
 800f28c:	3308      	adds	r3, #8
 800f28e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f290:	4a17      	ldr	r2, [pc, #92]	; (800f2f0 <inc_lock+0x118>)
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	011b      	lsls	r3, r3, #4
 800f296:	4413      	add	r3, r2
 800f298:	330c      	adds	r3, #12
 800f29a:	2200      	movs	r2, #0
 800f29c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d009      	beq.n	800f2b8 <inc_lock+0xe0>
 800f2a4:	4a12      	ldr	r2, [pc, #72]	; (800f2f0 <inc_lock+0x118>)
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	011b      	lsls	r3, r3, #4
 800f2aa:	4413      	add	r3, r2
 800f2ac:	330c      	adds	r3, #12
 800f2ae:	881b      	ldrh	r3, [r3, #0]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <inc_lock+0xe0>
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e015      	b.n	800f2e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d108      	bne.n	800f2d0 <inc_lock+0xf8>
 800f2be:	4a0c      	ldr	r2, [pc, #48]	; (800f2f0 <inc_lock+0x118>)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	4413      	add	r3, r2
 800f2c6:	330c      	adds	r3, #12
 800f2c8:	881b      	ldrh	r3, [r3, #0]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	b29a      	uxth	r2, r3
 800f2ce:	e001      	b.n	800f2d4 <inc_lock+0xfc>
 800f2d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f2d4:	4906      	ldr	r1, [pc, #24]	; (800f2f0 <inc_lock+0x118>)
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	011b      	lsls	r3, r3, #4
 800f2da:	440b      	add	r3, r1
 800f2dc:	330c      	adds	r3, #12
 800f2de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	3301      	adds	r3, #1
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ee:	4770      	bx	lr
 800f2f0:	200335d8 	.word	0x200335d8

0800f2f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3b01      	subs	r3, #1
 800f300:	607b      	str	r3, [r7, #4]
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b01      	cmp	r3, #1
 800f306:	d825      	bhi.n	800f354 <dec_lock+0x60>
		n = Files[i].ctr;
 800f308:	4a17      	ldr	r2, [pc, #92]	; (800f368 <dec_lock+0x74>)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	011b      	lsls	r3, r3, #4
 800f30e:	4413      	add	r3, r2
 800f310:	330c      	adds	r3, #12
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f316:	89fb      	ldrh	r3, [r7, #14]
 800f318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f31c:	d101      	bne.n	800f322 <dec_lock+0x2e>
 800f31e:	2300      	movs	r3, #0
 800f320:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f322:	89fb      	ldrh	r3, [r7, #14]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <dec_lock+0x3a>
 800f328:	89fb      	ldrh	r3, [r7, #14]
 800f32a:	3b01      	subs	r3, #1
 800f32c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f32e:	4a0e      	ldr	r2, [pc, #56]	; (800f368 <dec_lock+0x74>)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	011b      	lsls	r3, r3, #4
 800f334:	4413      	add	r3, r2
 800f336:	330c      	adds	r3, #12
 800f338:	89fa      	ldrh	r2, [r7, #14]
 800f33a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f33c:	89fb      	ldrh	r3, [r7, #14]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d105      	bne.n	800f34e <dec_lock+0x5a>
 800f342:	4a09      	ldr	r2, [pc, #36]	; (800f368 <dec_lock+0x74>)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	011b      	lsls	r3, r3, #4
 800f348:	4413      	add	r3, r2
 800f34a:	2200      	movs	r2, #0
 800f34c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f34e:	2300      	movs	r3, #0
 800f350:	737b      	strb	r3, [r7, #13]
 800f352:	e001      	b.n	800f358 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f354:	2302      	movs	r3, #2
 800f356:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f358:	7b7b      	ldrb	r3, [r7, #13]
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	200335d8 	.word	0x200335d8

0800f36c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f374:	2300      	movs	r3, #0
 800f376:	60fb      	str	r3, [r7, #12]
 800f378:	e010      	b.n	800f39c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f37a:	4a0d      	ldr	r2, [pc, #52]	; (800f3b0 <clear_lock+0x44>)
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	011b      	lsls	r3, r3, #4
 800f380:	4413      	add	r3, r2
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	687a      	ldr	r2, [r7, #4]
 800f386:	429a      	cmp	r2, r3
 800f388:	d105      	bne.n	800f396 <clear_lock+0x2a>
 800f38a:	4a09      	ldr	r2, [pc, #36]	; (800f3b0 <clear_lock+0x44>)
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	011b      	lsls	r3, r3, #4
 800f390:	4413      	add	r3, r2
 800f392:	2200      	movs	r2, #0
 800f394:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	3301      	adds	r3, #1
 800f39a:	60fb      	str	r3, [r7, #12]
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d9eb      	bls.n	800f37a <clear_lock+0xe>
	}
}
 800f3a2:	bf00      	nop
 800f3a4:	3714      	adds	r7, #20
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr
 800f3ae:	bf00      	nop
 800f3b0:	200335d8 	.word	0x200335d8

0800f3b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b086      	sub	sp, #24
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	78db      	ldrb	r3, [r3, #3]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d034      	beq.n	800f432 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	7858      	ldrb	r0, [r3, #1]
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3d8:	2301      	movs	r3, #1
 800f3da:	697a      	ldr	r2, [r7, #20]
 800f3dc:	f7ff fd40 	bl	800ee60 <disk_write>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <sync_window+0x38>
			res = FR_DISK_ERR;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	73fb      	strb	r3, [r7, #15]
 800f3ea:	e022      	b.n	800f432 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	697a      	ldr	r2, [r7, #20]
 800f3f8:	1ad2      	subs	r2, r2, r3
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d217      	bcs.n	800f432 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	789b      	ldrb	r3, [r3, #2]
 800f406:	613b      	str	r3, [r7, #16]
 800f408:	e010      	b.n	800f42c <sync_window+0x78>
					wsect += fs->fsize;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6a1b      	ldr	r3, [r3, #32]
 800f40e:	697a      	ldr	r2, [r7, #20]
 800f410:	4413      	add	r3, r2
 800f412:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	7858      	ldrb	r0, [r3, #1]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f41e:	2301      	movs	r3, #1
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	f7ff fd1d 	bl	800ee60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f426:	693b      	ldr	r3, [r7, #16]
 800f428:	3b01      	subs	r3, #1
 800f42a:	613b      	str	r3, [r7, #16]
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	2b01      	cmp	r3, #1
 800f430:	d8eb      	bhi.n	800f40a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f432:	7bfb      	ldrb	r3, [r7, #15]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3718      	adds	r7, #24
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b084      	sub	sp, #16
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f44e:	683a      	ldr	r2, [r7, #0]
 800f450:	429a      	cmp	r2, r3
 800f452:	d01b      	beq.n	800f48c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7ff ffad 	bl	800f3b4 <sync_window>
 800f45a:	4603      	mov	r3, r0
 800f45c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f45e:	7bfb      	ldrb	r3, [r7, #15]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d113      	bne.n	800f48c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	7858      	ldrb	r0, [r3, #1]
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f46e:	2301      	movs	r3, #1
 800f470:	683a      	ldr	r2, [r7, #0]
 800f472:	f7ff fcd5 	bl	800ee20 <disk_read>
 800f476:	4603      	mov	r3, r0
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d004      	beq.n	800f486 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f47c:	f04f 33ff 	mov.w	r3, #4294967295
 800f480:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f482:	2301      	movs	r3, #1
 800f484:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800f48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3710      	adds	r7, #16
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
	...

0800f498 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f7ff ff87 	bl	800f3b4 <sync_window>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d159      	bne.n	800f564 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	2b03      	cmp	r3, #3
 800f4b6:	d149      	bne.n	800f54c <sync_fs+0xb4>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	791b      	ldrb	r3, [r3, #4]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d145      	bne.n	800f54c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	899b      	ldrh	r3, [r3, #12]
 800f4ca:	461a      	mov	r2, r3
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	f7ff fda8 	bl	800f022 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	3338      	adds	r3, #56	; 0x38
 800f4d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f4da:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7ff fd37 	bl	800ef52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	3338      	adds	r3, #56	; 0x38
 800f4e8:	4921      	ldr	r1, [pc, #132]	; (800f570 <sync_fs+0xd8>)
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7ff fd4c 	bl	800ef88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	3338      	adds	r3, #56	; 0x38
 800f4f4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f4f8:	491e      	ldr	r1, [pc, #120]	; (800f574 <sync_fs+0xdc>)
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff fd44 	bl	800ef88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	3338      	adds	r3, #56	; 0x38
 800f504:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	695b      	ldr	r3, [r3, #20]
 800f50c:	4619      	mov	r1, r3
 800f50e:	4610      	mov	r0, r2
 800f510:	f7ff fd3a 	bl	800ef88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	3338      	adds	r3, #56	; 0x38
 800f518:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	4619      	mov	r1, r3
 800f522:	4610      	mov	r0, r2
 800f524:	f7ff fd30 	bl	800ef88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f52c:	1c5a      	adds	r2, r3, #1
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	7858      	ldrb	r0, [r3, #1]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f540:	2301      	movs	r3, #1
 800f542:	f7ff fc8d 	bl	800ee60 <disk_write>
			fs->fsi_flag = 0;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2200      	movs	r2, #0
 800f54a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	785b      	ldrb	r3, [r3, #1]
 800f550:	2200      	movs	r2, #0
 800f552:	2100      	movs	r1, #0
 800f554:	4618      	mov	r0, r3
 800f556:	f7ff fca3 	bl	800eea0 <disk_ioctl>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <sync_fs+0xcc>
 800f560:	2301      	movs	r3, #1
 800f562:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f564:	7bfb      	ldrb	r3, [r7, #15]
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	41615252 	.word	0x41615252
 800f574:	61417272 	.word	0x61417272

0800f578 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	3b02      	subs	r3, #2
 800f586:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	69db      	ldr	r3, [r3, #28]
 800f58c:	3b02      	subs	r3, #2
 800f58e:	683a      	ldr	r2, [r7, #0]
 800f590:	429a      	cmp	r2, r3
 800f592:	d301      	bcc.n	800f598 <clust2sect+0x20>
 800f594:	2300      	movs	r3, #0
 800f596:	e008      	b.n	800f5aa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	895b      	ldrh	r3, [r3, #10]
 800f59c:	461a      	mov	r2, r3
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	fb03 f202 	mul.w	r2, r3, r2
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a8:	4413      	add	r3, r2
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b086      	sub	sp, #24
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d904      	bls.n	800f5d6 <get_fat+0x20>
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	69db      	ldr	r3, [r3, #28]
 800f5d0:	683a      	ldr	r2, [r7, #0]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d302      	bcc.n	800f5dc <get_fat+0x26>
		val = 1;	/* Internal error */
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	617b      	str	r3, [r7, #20]
 800f5da:	e0b7      	b.n	800f74c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	2b02      	cmp	r3, #2
 800f5e8:	d05a      	beq.n	800f6a0 <get_fat+0xea>
 800f5ea:	2b03      	cmp	r3, #3
 800f5ec:	d07d      	beq.n	800f6ea <get_fat+0x134>
 800f5ee:	2b01      	cmp	r3, #1
 800f5f0:	f040 80a2 	bne.w	800f738 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	60fb      	str	r3, [r7, #12]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	085b      	lsrs	r3, r3, #1
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4413      	add	r3, r2
 800f600:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	899b      	ldrh	r3, [r3, #12]
 800f60a:	4619      	mov	r1, r3
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f612:	4413      	add	r3, r2
 800f614:	4619      	mov	r1, r3
 800f616:	6938      	ldr	r0, [r7, #16]
 800f618:	f7ff ff10 	bl	800f43c <move_window>
 800f61c:	4603      	mov	r3, r0
 800f61e:	2b00      	cmp	r3, #0
 800f620:	f040 808d 	bne.w	800f73e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	1c5a      	adds	r2, r3, #1
 800f628:	60fa      	str	r2, [r7, #12]
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	8992      	ldrh	r2, [r2, #12]
 800f62e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f632:	fb02 f201 	mul.w	r2, r2, r1
 800f636:	1a9b      	subs	r3, r3, r2
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	4413      	add	r3, r2
 800f63c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f640:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	4619      	mov	r1, r3
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f652:	4413      	add	r3, r2
 800f654:	4619      	mov	r1, r3
 800f656:	6938      	ldr	r0, [r7, #16]
 800f658:	f7ff fef0 	bl	800f43c <move_window>
 800f65c:	4603      	mov	r3, r0
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d16f      	bne.n	800f742 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f662:	693b      	ldr	r3, [r7, #16]
 800f664:	899b      	ldrh	r3, [r3, #12]
 800f666:	461a      	mov	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f66e:	fb02 f201 	mul.w	r2, r2, r1
 800f672:	1a9b      	subs	r3, r3, r2
 800f674:	693a      	ldr	r2, [r7, #16]
 800f676:	4413      	add	r3, r2
 800f678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f67c:	021b      	lsls	r3, r3, #8
 800f67e:	461a      	mov	r2, r3
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	4313      	orrs	r3, r2
 800f684:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	f003 0301 	and.w	r3, r3, #1
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <get_fat+0xe0>
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	091b      	lsrs	r3, r3, #4
 800f694:	e002      	b.n	800f69c <get_fat+0xe6>
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f69c:	617b      	str	r3, [r7, #20]
			break;
 800f69e:	e055      	b.n	800f74c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	899b      	ldrh	r3, [r3, #12]
 800f6a8:	085b      	lsrs	r3, r3, #1
 800f6aa:	b29b      	uxth	r3, r3
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6b4:	4413      	add	r3, r2
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6938      	ldr	r0, [r7, #16]
 800f6ba:	f7ff febf 	bl	800f43c <move_window>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d140      	bne.n	800f746 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	8992      	ldrh	r2, [r2, #12]
 800f6d2:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6d6:	fb02 f200 	mul.w	r2, r2, r0
 800f6da:	1a9b      	subs	r3, r3, r2
 800f6dc:	440b      	add	r3, r1
 800f6de:	4618      	mov	r0, r3
 800f6e0:	f7ff fbfc 	bl	800eedc <ld_word>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	617b      	str	r3, [r7, #20]
			break;
 800f6e8:	e030      	b.n	800f74c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	899b      	ldrh	r3, [r3, #12]
 800f6f2:	089b      	lsrs	r3, r3, #2
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	683b      	ldr	r3, [r7, #0]
 800f6fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6fe:	4413      	add	r3, r2
 800f700:	4619      	mov	r1, r3
 800f702:	6938      	ldr	r0, [r7, #16]
 800f704:	f7ff fe9a 	bl	800f43c <move_window>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d11d      	bne.n	800f74a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f70e:	693b      	ldr	r3, [r7, #16]
 800f710:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	693a      	ldr	r2, [r7, #16]
 800f71a:	8992      	ldrh	r2, [r2, #12]
 800f71c:	fbb3 f0f2 	udiv	r0, r3, r2
 800f720:	fb02 f200 	mul.w	r2, r2, r0
 800f724:	1a9b      	subs	r3, r3, r2
 800f726:	440b      	add	r3, r1
 800f728:	4618      	mov	r0, r3
 800f72a:	f7ff fbef 	bl	800ef0c <ld_dword>
 800f72e:	4603      	mov	r3, r0
 800f730:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f734:	617b      	str	r3, [r7, #20]
			break;
 800f736:	e009      	b.n	800f74c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f738:	2301      	movs	r3, #1
 800f73a:	617b      	str	r3, [r7, #20]
 800f73c:	e006      	b.n	800f74c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f73e:	bf00      	nop
 800f740:	e004      	b.n	800f74c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f742:	bf00      	nop
 800f744:	e002      	b.n	800f74c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f746:	bf00      	nop
 800f748:	e000      	b.n	800f74c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f74a:	bf00      	nop
		}
	}

	return val;
 800f74c:	697b      	ldr	r3, [r7, #20]
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3718      	adds	r7, #24
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f756:	b590      	push	{r4, r7, lr}
 800f758:	b089      	sub	sp, #36	; 0x24
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	60f8      	str	r0, [r7, #12]
 800f75e:	60b9      	str	r1, [r7, #8]
 800f760:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f762:	2302      	movs	r3, #2
 800f764:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	f240 8106 	bls.w	800f97a <put_fat+0x224>
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	68ba      	ldr	r2, [r7, #8]
 800f774:	429a      	cmp	r2, r3
 800f776:	f080 8100 	bcs.w	800f97a <put_fat+0x224>
		switch (fs->fs_type) {
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b02      	cmp	r3, #2
 800f780:	f000 8088 	beq.w	800f894 <put_fat+0x13e>
 800f784:	2b03      	cmp	r3, #3
 800f786:	f000 80b0 	beq.w	800f8ea <put_fat+0x194>
 800f78a:	2b01      	cmp	r3, #1
 800f78c:	f040 80f5 	bne.w	800f97a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	61bb      	str	r3, [r7, #24]
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	085b      	lsrs	r3, r3, #1
 800f798:	69ba      	ldr	r2, [r7, #24]
 800f79a:	4413      	add	r3, r2
 800f79c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	899b      	ldrh	r3, [r3, #12]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7ae:	4413      	add	r3, r2
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	68f8      	ldr	r0, [r7, #12]
 800f7b4:	f7ff fe42 	bl	800f43c <move_window>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f7bc:	7ffb      	ldrb	r3, [r7, #31]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	f040 80d4 	bne.w	800f96c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	1c5a      	adds	r2, r3, #1
 800f7ce:	61ba      	str	r2, [r7, #24]
 800f7d0:	68fa      	ldr	r2, [r7, #12]
 800f7d2:	8992      	ldrh	r2, [r2, #12]
 800f7d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7d8:	fb02 f200 	mul.w	r2, r2, r0
 800f7dc:	1a9b      	subs	r3, r3, r2
 800f7de:	440b      	add	r3, r1
 800f7e0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	f003 0301 	and.w	r3, r3, #1
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00d      	beq.n	800f808 <put_fat+0xb2>
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	b25b      	sxtb	r3, r3
 800f7f2:	f003 030f 	and.w	r3, r3, #15
 800f7f6:	b25a      	sxtb	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	011b      	lsls	r3, r3, #4
 800f7fe:	b25b      	sxtb	r3, r3
 800f800:	4313      	orrs	r3, r2
 800f802:	b25b      	sxtb	r3, r3
 800f804:	b2db      	uxtb	r3, r3
 800f806:	e001      	b.n	800f80c <put_fat+0xb6>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	697a      	ldr	r2, [r7, #20]
 800f80e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2201      	movs	r2, #1
 800f814:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	899b      	ldrh	r3, [r3, #12]
 800f81e:	4619      	mov	r1, r3
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	fbb3 f3f1 	udiv	r3, r3, r1
 800f826:	4413      	add	r3, r2
 800f828:	4619      	mov	r1, r3
 800f82a:	68f8      	ldr	r0, [r7, #12]
 800f82c:	f7ff fe06 	bl	800f43c <move_window>
 800f830:	4603      	mov	r3, r0
 800f832:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f834:	7ffb      	ldrb	r3, [r7, #31]
 800f836:	2b00      	cmp	r3, #0
 800f838:	f040 809a 	bne.w	800f970 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	899b      	ldrh	r3, [r3, #12]
 800f846:	461a      	mov	r2, r3
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f84e:	fb02 f200 	mul.w	r2, r2, r0
 800f852:	1a9b      	subs	r3, r3, r2
 800f854:	440b      	add	r3, r1
 800f856:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	f003 0301 	and.w	r3, r3, #1
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <put_fat+0x114>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	091b      	lsrs	r3, r3, #4
 800f866:	b2db      	uxtb	r3, r3
 800f868:	e00e      	b.n	800f888 <put_fat+0x132>
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	b25b      	sxtb	r3, r3
 800f870:	f023 030f 	bic.w	r3, r3, #15
 800f874:	b25a      	sxtb	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	0a1b      	lsrs	r3, r3, #8
 800f87a:	b25b      	sxtb	r3, r3
 800f87c:	f003 030f 	and.w	r3, r3, #15
 800f880:	b25b      	sxtb	r3, r3
 800f882:	4313      	orrs	r3, r2
 800f884:	b25b      	sxtb	r3, r3
 800f886:	b2db      	uxtb	r3, r3
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2201      	movs	r2, #1
 800f890:	70da      	strb	r2, [r3, #3]
			break;
 800f892:	e072      	b.n	800f97a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	899b      	ldrh	r3, [r3, #12]
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8a8:	4413      	add	r3, r2
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	f7ff fdc5 	bl	800f43c <move_window>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8b6:	7ffb      	ldrb	r3, [r7, #31]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d15b      	bne.n	800f974 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f8c2:	68bb      	ldr	r3, [r7, #8]
 800f8c4:	005b      	lsls	r3, r3, #1
 800f8c6:	68fa      	ldr	r2, [r7, #12]
 800f8c8:	8992      	ldrh	r2, [r2, #12]
 800f8ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800f8ce:	fb02 f200 	mul.w	r2, r2, r0
 800f8d2:	1a9b      	subs	r3, r3, r2
 800f8d4:	440b      	add	r3, r1
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	b292      	uxth	r2, r2
 800f8da:	4611      	mov	r1, r2
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff fb38 	bl	800ef52 <st_word>
			fs->wflag = 1;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	2201      	movs	r2, #1
 800f8e6:	70da      	strb	r2, [r3, #3]
			break;
 800f8e8:	e047      	b.n	800f97a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	899b      	ldrh	r3, [r3, #12]
 800f8f2:	089b      	lsrs	r3, r3, #2
 800f8f4:	b29b      	uxth	r3, r3
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8fe:	4413      	add	r3, r2
 800f900:	4619      	mov	r1, r3
 800f902:	68f8      	ldr	r0, [r7, #12]
 800f904:	f7ff fd9a 	bl	800f43c <move_window>
 800f908:	4603      	mov	r3, r0
 800f90a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f90c:	7ffb      	ldrb	r3, [r7, #31]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d132      	bne.n	800f978 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	68fa      	ldr	r2, [r7, #12]
 800f924:	8992      	ldrh	r2, [r2, #12]
 800f926:	fbb3 f0f2 	udiv	r0, r3, r2
 800f92a:	fb02 f200 	mul.w	r2, r2, r0
 800f92e:	1a9b      	subs	r3, r3, r2
 800f930:	440b      	add	r3, r1
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff faea 	bl	800ef0c <ld_dword>
 800f938:	4603      	mov	r3, r0
 800f93a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f93e:	4323      	orrs	r3, r4
 800f940:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	68fa      	ldr	r2, [r7, #12]
 800f94e:	8992      	ldrh	r2, [r2, #12]
 800f950:	fbb3 f0f2 	udiv	r0, r3, r2
 800f954:	fb02 f200 	mul.w	r2, r2, r0
 800f958:	1a9b      	subs	r3, r3, r2
 800f95a:	440b      	add	r3, r1
 800f95c:	6879      	ldr	r1, [r7, #4]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff fb12 	bl	800ef88 <st_dword>
			fs->wflag = 1;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	2201      	movs	r2, #1
 800f968:	70da      	strb	r2, [r3, #3]
			break;
 800f96a:	e006      	b.n	800f97a <put_fat+0x224>
			if (res != FR_OK) break;
 800f96c:	bf00      	nop
 800f96e:	e004      	b.n	800f97a <put_fat+0x224>
			if (res != FR_OK) break;
 800f970:	bf00      	nop
 800f972:	e002      	b.n	800f97a <put_fat+0x224>
			if (res != FR_OK) break;
 800f974:	bf00      	nop
 800f976:	e000      	b.n	800f97a <put_fat+0x224>
			if (res != FR_OK) break;
 800f978:	bf00      	nop
		}
	}
	return res;
 800f97a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3724      	adds	r7, #36	; 0x24
 800f980:	46bd      	mov	sp, r7
 800f982:	bd90      	pop	{r4, r7, pc}

0800f984 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b088      	sub	sp, #32
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f990:	2300      	movs	r3, #0
 800f992:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	d904      	bls.n	800f9aa <remove_chain+0x26>
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	69db      	ldr	r3, [r3, #28]
 800f9a4:	68ba      	ldr	r2, [r7, #8]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d301      	bcc.n	800f9ae <remove_chain+0x2a>
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	e04b      	b.n	800fa46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d00c      	beq.n	800f9ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9b8:	6879      	ldr	r1, [r7, #4]
 800f9ba:	69b8      	ldr	r0, [r7, #24]
 800f9bc:	f7ff fecb 	bl	800f756 <put_fat>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f9c4:	7ffb      	ldrb	r3, [r7, #31]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d001      	beq.n	800f9ce <remove_chain+0x4a>
 800f9ca:	7ffb      	ldrb	r3, [r7, #31]
 800f9cc:	e03b      	b.n	800fa46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f9ce:	68b9      	ldr	r1, [r7, #8]
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fdf0 	bl	800f5b6 <get_fat>
 800f9d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d031      	beq.n	800fa42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d101      	bne.n	800f9e8 <remove_chain+0x64>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	e02e      	b.n	800fa46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ee:	d101      	bne.n	800f9f4 <remove_chain+0x70>
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	e028      	b.n	800fa46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	68b9      	ldr	r1, [r7, #8]
 800f9f8:	69b8      	ldr	r0, [r7, #24]
 800f9fa:	f7ff feac 	bl	800f756 <put_fat>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fa02:	7ffb      	ldrb	r3, [r7, #31]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <remove_chain+0x88>
 800fa08:	7ffb      	ldrb	r3, [r7, #31]
 800fa0a:	e01c      	b.n	800fa46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	695a      	ldr	r2, [r3, #20]
 800fa10:	69bb      	ldr	r3, [r7, #24]
 800fa12:	69db      	ldr	r3, [r3, #28]
 800fa14:	3b02      	subs	r3, #2
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d20b      	bcs.n	800fa32 <remove_chain+0xae>
			fs->free_clst++;
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	1c5a      	adds	r2, r3, #1
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800fa24:	69bb      	ldr	r3, [r7, #24]
 800fa26:	791b      	ldrb	r3, [r3, #4]
 800fa28:	f043 0301 	orr.w	r3, r3, #1
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800fa32:	697b      	ldr	r3, [r7, #20]
 800fa34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	69db      	ldr	r3, [r3, #28]
 800fa3a:	68ba      	ldr	r2, [r7, #8]
 800fa3c:	429a      	cmp	r2, r3
 800fa3e:	d3c6      	bcc.n	800f9ce <remove_chain+0x4a>
 800fa40:	e000      	b.n	800fa44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fa42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fa44:	2300      	movs	r3, #0
}
 800fa46:	4618      	mov	r0, r3
 800fa48:	3720      	adds	r7, #32
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b088      	sub	sp, #32
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d10d      	bne.n	800fa80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	691b      	ldr	r3, [r3, #16]
 800fa68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fa6a:	69bb      	ldr	r3, [r7, #24]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d004      	beq.n	800fa7a <create_chain+0x2c>
 800fa70:	693b      	ldr	r3, [r7, #16]
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	69ba      	ldr	r2, [r7, #24]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d31b      	bcc.n	800fab2 <create_chain+0x64>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	61bb      	str	r3, [r7, #24]
 800fa7e:	e018      	b.n	800fab2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fa80:	6839      	ldr	r1, [r7, #0]
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fd97 	bl	800f5b6 <get_fat>
 800fa88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2b01      	cmp	r3, #1
 800fa8e:	d801      	bhi.n	800fa94 <create_chain+0x46>
 800fa90:	2301      	movs	r3, #1
 800fa92:	e070      	b.n	800fb76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa9a:	d101      	bne.n	800faa0 <create_chain+0x52>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	e06a      	b.n	800fb76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	68fa      	ldr	r2, [r7, #12]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d201      	bcs.n	800faae <create_chain+0x60>
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	e063      	b.n	800fb76 <create_chain+0x128>
		scl = clst;
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	3301      	adds	r3, #1
 800faba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	69db      	ldr	r3, [r3, #28]
 800fac0:	69fa      	ldr	r2, [r7, #28]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d307      	bcc.n	800fad6 <create_chain+0x88>
				ncl = 2;
 800fac6:	2302      	movs	r3, #2
 800fac8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800faca:	69fa      	ldr	r2, [r7, #28]
 800facc:	69bb      	ldr	r3, [r7, #24]
 800face:	429a      	cmp	r2, r3
 800fad0:	d901      	bls.n	800fad6 <create_chain+0x88>
 800fad2:	2300      	movs	r3, #0
 800fad4:	e04f      	b.n	800fb76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fad6:	69f9      	ldr	r1, [r7, #28]
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7ff fd6c 	bl	800f5b6 <get_fat>
 800fade:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00e      	beq.n	800fb04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d003      	beq.n	800faf4 <create_chain+0xa6>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf2:	d101      	bne.n	800faf8 <create_chain+0xaa>
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	e03e      	b.n	800fb76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800faf8:	69fa      	ldr	r2, [r7, #28]
 800fafa:	69bb      	ldr	r3, [r7, #24]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d1da      	bne.n	800fab6 <create_chain+0x68>
 800fb00:	2300      	movs	r3, #0
 800fb02:	e038      	b.n	800fb76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fb04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fb06:	f04f 32ff 	mov.w	r2, #4294967295
 800fb0a:	69f9      	ldr	r1, [r7, #28]
 800fb0c:	6938      	ldr	r0, [r7, #16]
 800fb0e:	f7ff fe22 	bl	800f756 <put_fat>
 800fb12:	4603      	mov	r3, r0
 800fb14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fb16:	7dfb      	ldrb	r3, [r7, #23]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d109      	bne.n	800fb30 <create_chain+0xe2>
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d006      	beq.n	800fb30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fb22:	69fa      	ldr	r2, [r7, #28]
 800fb24:	6839      	ldr	r1, [r7, #0]
 800fb26:	6938      	ldr	r0, [r7, #16]
 800fb28:	f7ff fe15 	bl	800f756 <put_fat>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fb30:	7dfb      	ldrb	r3, [r7, #23]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d116      	bne.n	800fb64 <create_chain+0x116>
		fs->last_clst = ncl;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	69fa      	ldr	r2, [r7, #28]
 800fb3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fb3c:	693b      	ldr	r3, [r7, #16]
 800fb3e:	695a      	ldr	r2, [r3, #20]
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	69db      	ldr	r3, [r3, #28]
 800fb44:	3b02      	subs	r3, #2
 800fb46:	429a      	cmp	r2, r3
 800fb48:	d804      	bhi.n	800fb54 <create_chain+0x106>
 800fb4a:	693b      	ldr	r3, [r7, #16]
 800fb4c:	695b      	ldr	r3, [r3, #20]
 800fb4e:	1e5a      	subs	r2, r3, #1
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	791b      	ldrb	r3, [r3, #4]
 800fb58:	f043 0301 	orr.w	r3, r3, #1
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	711a      	strb	r2, [r3, #4]
 800fb62:	e007      	b.n	800fb74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	d102      	bne.n	800fb70 <create_chain+0x122>
 800fb6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb6e:	e000      	b.n	800fb72 <create_chain+0x124>
 800fb70:	2301      	movs	r3, #1
 800fb72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fb74:	69fb      	ldr	r3, [r7, #28]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fb7e:	b480      	push	{r7}
 800fb80:	b087      	sub	sp, #28
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb92:	3304      	adds	r3, #4
 800fb94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	899b      	ldrh	r3, [r3, #12]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fba2:	68fa      	ldr	r2, [r7, #12]
 800fba4:	8952      	ldrh	r2, [r2, #10]
 800fba6:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbaa:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	1d1a      	adds	r2, r3, #4
 800fbb0:	613a      	str	r2, [r7, #16]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <clmt_clust+0x42>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	e010      	b.n	800fbe2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fbc0:	697a      	ldr	r2, [r7, #20]
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d307      	bcc.n	800fbd8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fbc8:	697a      	ldr	r2, [r7, #20]
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	617b      	str	r3, [r7, #20]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	3304      	adds	r3, #4
 800fbd4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fbd6:	e7e9      	b.n	800fbac <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fbd8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	697b      	ldr	r3, [r7, #20]
 800fbe0:	4413      	add	r3, r2
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	371c      	adds	r7, #28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbec:	4770      	bx	lr

0800fbee <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fbee:	b580      	push	{r7, lr}
 800fbf0:	b086      	sub	sp, #24
 800fbf2:	af00      	add	r7, sp, #0
 800fbf4:	6078      	str	r0, [r7, #4]
 800fbf6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fc04:	d204      	bcs.n	800fc10 <dir_sdi+0x22>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	f003 031f 	and.w	r3, r3, #31
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fc10:	2302      	movs	r3, #2
 800fc12:	e071      	b.n	800fcf8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	683a      	ldr	r2, [r7, #0]
 800fc18:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <dir_sdi+0x46>
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	781b      	ldrb	r3, [r3, #0]
 800fc2a:	2b02      	cmp	r3, #2
 800fc2c:	d902      	bls.n	800fc34 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc32:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d10c      	bne.n	800fc54 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	095b      	lsrs	r3, r3, #5
 800fc3e:	693a      	ldr	r2, [r7, #16]
 800fc40:	8912      	ldrh	r2, [r2, #8]
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d301      	bcc.n	800fc4a <dir_sdi+0x5c>
 800fc46:	2302      	movs	r3, #2
 800fc48:	e056      	b.n	800fcf8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	61da      	str	r2, [r3, #28]
 800fc52:	e02d      	b.n	800fcb0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	895b      	ldrh	r3, [r3, #10]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	693b      	ldr	r3, [r7, #16]
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	fb03 f302 	mul.w	r3, r3, r2
 800fc62:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc64:	e019      	b.n	800fc9a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6979      	ldr	r1, [r7, #20]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f7ff fca3 	bl	800f5b6 <get_fat>
 800fc70:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc78:	d101      	bne.n	800fc7e <dir_sdi+0x90>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e03c      	b.n	800fcf8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	d904      	bls.n	800fc8e <dir_sdi+0xa0>
 800fc84:	693b      	ldr	r3, [r7, #16]
 800fc86:	69db      	ldr	r3, [r3, #28]
 800fc88:	697a      	ldr	r2, [r7, #20]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	d301      	bcc.n	800fc92 <dir_sdi+0xa4>
 800fc8e:	2302      	movs	r3, #2
 800fc90:	e032      	b.n	800fcf8 <dir_sdi+0x10a>
			ofs -= csz;
 800fc92:	683a      	ldr	r2, [r7, #0]
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fc9a:	683a      	ldr	r2, [r7, #0]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d2e1      	bcs.n	800fc66 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fca2:	6979      	ldr	r1, [r7, #20]
 800fca4:	6938      	ldr	r0, [r7, #16]
 800fca6:	f7ff fc67 	bl	800f578 <clust2sect>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	697a      	ldr	r2, [r7, #20]
 800fcb4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	69db      	ldr	r3, [r3, #28]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <dir_sdi+0xd4>
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	e01a      	b.n	800fcf8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	69da      	ldr	r2, [r3, #28]
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	899b      	ldrh	r3, [r3, #12]
 800fcca:	4619      	mov	r1, r3
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	fbb3 f3f1 	udiv	r3, r3, r1
 800fcd2:	441a      	add	r2, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fcde:	693b      	ldr	r3, [r7, #16]
 800fce0:	899b      	ldrh	r3, [r3, #12]
 800fce2:	461a      	mov	r2, r3
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	fbb3 f0f2 	udiv	r0, r3, r2
 800fcea:	fb02 f200 	mul.w	r2, r2, r0
 800fcee:	1a9b      	subs	r3, r3, r2
 800fcf0:	18ca      	adds	r2, r1, r3
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3718      	adds	r7, #24
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b086      	sub	sp, #24
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	695b      	ldr	r3, [r3, #20]
 800fd14:	3320      	adds	r3, #32
 800fd16:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	69db      	ldr	r3, [r3, #28]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d003      	beq.n	800fd28 <dir_next+0x28>
 800fd20:	68bb      	ldr	r3, [r7, #8]
 800fd22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fd26:	d301      	bcc.n	800fd2c <dir_next+0x2c>
 800fd28:	2304      	movs	r3, #4
 800fd2a:	e0bb      	b.n	800fea4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	899b      	ldrh	r3, [r3, #12]
 800fd30:	461a      	mov	r2, r3
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd38:	fb02 f201 	mul.w	r2, r2, r1
 800fd3c:	1a9b      	subs	r3, r3, r2
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	f040 809d 	bne.w	800fe7e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	69db      	ldr	r3, [r3, #28]
 800fd48:	1c5a      	adds	r2, r3, #1
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	699b      	ldr	r3, [r3, #24]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d10b      	bne.n	800fd6e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	095b      	lsrs	r3, r3, #5
 800fd5a:	68fa      	ldr	r2, [r7, #12]
 800fd5c:	8912      	ldrh	r2, [r2, #8]
 800fd5e:	4293      	cmp	r3, r2
 800fd60:	f0c0 808d 	bcc.w	800fe7e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	61da      	str	r2, [r3, #28]
 800fd6a:	2304      	movs	r3, #4
 800fd6c:	e09a      	b.n	800fea4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	899b      	ldrh	r3, [r3, #12]
 800fd72:	461a      	mov	r2, r3
 800fd74:	68bb      	ldr	r3, [r7, #8]
 800fd76:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd7a:	68fa      	ldr	r2, [r7, #12]
 800fd7c:	8952      	ldrh	r2, [r2, #10]
 800fd7e:	3a01      	subs	r2, #1
 800fd80:	4013      	ands	r3, r2
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d17b      	bne.n	800fe7e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fd86:	687a      	ldr	r2, [r7, #4]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	4610      	mov	r0, r2
 800fd90:	f7ff fc11 	bl	800f5b6 <get_fat>
 800fd94:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	d801      	bhi.n	800fda0 <dir_next+0xa0>
 800fd9c:	2302      	movs	r3, #2
 800fd9e:	e081      	b.n	800fea4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fda6:	d101      	bne.n	800fdac <dir_next+0xac>
 800fda8:	2301      	movs	r3, #1
 800fdaa:	e07b      	b.n	800fea4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	69db      	ldr	r3, [r3, #28]
 800fdb0:	697a      	ldr	r2, [r7, #20]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d359      	bcc.n	800fe6a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d104      	bne.n	800fdc6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2200      	movs	r2, #0
 800fdc0:	61da      	str	r2, [r3, #28]
 800fdc2:	2304      	movs	r3, #4
 800fdc4:	e06e      	b.n	800fea4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fdc6:	687a      	ldr	r2, [r7, #4]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	699b      	ldr	r3, [r3, #24]
 800fdcc:	4619      	mov	r1, r3
 800fdce:	4610      	mov	r0, r2
 800fdd0:	f7ff fe3d 	bl	800fa4e <create_chain>
 800fdd4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fdd6:	697b      	ldr	r3, [r7, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d101      	bne.n	800fde0 <dir_next+0xe0>
 800fddc:	2307      	movs	r3, #7
 800fdde:	e061      	b.n	800fea4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fde0:	697b      	ldr	r3, [r7, #20]
 800fde2:	2b01      	cmp	r3, #1
 800fde4:	d101      	bne.n	800fdea <dir_next+0xea>
 800fde6:	2302      	movs	r3, #2
 800fde8:	e05c      	b.n	800fea4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdf0:	d101      	bne.n	800fdf6 <dir_next+0xf6>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e056      	b.n	800fea4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800fdf6:	68f8      	ldr	r0, [r7, #12]
 800fdf8:	f7ff fadc 	bl	800f3b4 <sync_window>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <dir_next+0x106>
 800fe02:	2301      	movs	r3, #1
 800fe04:	e04e      	b.n	800fea4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	899b      	ldrh	r3, [r3, #12]
 800fe10:	461a      	mov	r2, r3
 800fe12:	2100      	movs	r1, #0
 800fe14:	f7ff f905 	bl	800f022 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe18:	2300      	movs	r3, #0
 800fe1a:	613b      	str	r3, [r7, #16]
 800fe1c:	6979      	ldr	r1, [r7, #20]
 800fe1e:	68f8      	ldr	r0, [r7, #12]
 800fe20:	f7ff fbaa 	bl	800f578 <clust2sect>
 800fe24:	4602      	mov	r2, r0
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	635a      	str	r2, [r3, #52]	; 0x34
 800fe2a:	e012      	b.n	800fe52 <dir_next+0x152>
						fs->wflag = 1;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fe32:	68f8      	ldr	r0, [r7, #12]
 800fe34:	f7ff fabe 	bl	800f3b4 <sync_window>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <dir_next+0x142>
 800fe3e:	2301      	movs	r3, #1
 800fe40:	e030      	b.n	800fea4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	3301      	adds	r3, #1
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe4c:	1c5a      	adds	r2, r3, #1
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	635a      	str	r2, [r3, #52]	; 0x34
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	895b      	ldrh	r3, [r3, #10]
 800fe56:	461a      	mov	r2, r3
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	4293      	cmp	r3, r2
 800fe5c:	d3e6      	bcc.n	800fe2c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fe62:	693b      	ldr	r3, [r7, #16]
 800fe64:	1ad2      	subs	r2, r2, r3
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	697a      	ldr	r2, [r7, #20]
 800fe6e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800fe70:	6979      	ldr	r1, [r7, #20]
 800fe72:	68f8      	ldr	r0, [r7, #12]
 800fe74:	f7ff fb80 	bl	800f578 <clust2sect>
 800fe78:	4602      	mov	r2, r0
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	899b      	ldrh	r3, [r3, #12]
 800fe8e:	461a      	mov	r2, r3
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	fbb3 f0f2 	udiv	r0, r3, r2
 800fe96:	fb02 f200 	mul.w	r2, r2, r0
 800fe9a:	1a9b      	subs	r3, r3, r2
 800fe9c:	18ca      	adds	r2, r1, r3
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3718      	adds	r7, #24
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b086      	sub	sp, #24
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800febc:	2100      	movs	r1, #0
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7ff fe95 	bl	800fbee <dir_sdi>
 800fec4:	4603      	mov	r3, r0
 800fec6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fec8:	7dfb      	ldrb	r3, [r7, #23]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d12b      	bne.n	800ff26 <dir_alloc+0x7a>
		n = 0;
 800fece:	2300      	movs	r3, #0
 800fed0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	4619      	mov	r1, r3
 800fed8:	68f8      	ldr	r0, [r7, #12]
 800feda:	f7ff faaf 	bl	800f43c <move_window>
 800fede:	4603      	mov	r3, r0
 800fee0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fee2:	7dfb      	ldrb	r3, [r7, #23]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d11d      	bne.n	800ff24 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6a1b      	ldr	r3, [r3, #32]
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	2be5      	cmp	r3, #229	; 0xe5
 800fef0:	d004      	beq.n	800fefc <dir_alloc+0x50>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6a1b      	ldr	r3, [r3, #32]
 800fef6:	781b      	ldrb	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d107      	bne.n	800ff0c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800fefc:	693b      	ldr	r3, [r7, #16]
 800fefe:	3301      	adds	r3, #1
 800ff00:	613b      	str	r3, [r7, #16]
 800ff02:	693a      	ldr	r2, [r7, #16]
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	429a      	cmp	r2, r3
 800ff08:	d102      	bne.n	800ff10 <dir_alloc+0x64>
 800ff0a:	e00c      	b.n	800ff26 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ff10:	2101      	movs	r1, #1
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f7ff fef4 	bl	800fd00 <dir_next>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ff1c:	7dfb      	ldrb	r3, [r7, #23]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d0d7      	beq.n	800fed2 <dir_alloc+0x26>
 800ff22:	e000      	b.n	800ff26 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ff24:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ff26:	7dfb      	ldrb	r3, [r7, #23]
 800ff28:	2b04      	cmp	r3, #4
 800ff2a:	d101      	bne.n	800ff30 <dir_alloc+0x84>
 800ff2c:	2307      	movs	r3, #7
 800ff2e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ff30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3718      	adds	r7, #24
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}

0800ff3a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ff3a:	b580      	push	{r7, lr}
 800ff3c:	b084      	sub	sp, #16
 800ff3e:	af00      	add	r7, sp, #0
 800ff40:	6078      	str	r0, [r7, #4]
 800ff42:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	331a      	adds	r3, #26
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7fe ffc7 	bl	800eedc <ld_word>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d109      	bne.n	800ff6e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	3314      	adds	r3, #20
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7fe ffbc 	bl	800eedc <ld_word>
 800ff64:	4603      	mov	r3, r0
 800ff66:	041b      	lsls	r3, r3, #16
 800ff68:	68fa      	ldr	r2, [r7, #12]
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b084      	sub	sp, #16
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	60f8      	str	r0, [r7, #12]
 800ff80:	60b9      	str	r1, [r7, #8]
 800ff82:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ff84:	68bb      	ldr	r3, [r7, #8]
 800ff86:	331a      	adds	r3, #26
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	b292      	uxth	r2, r2
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fe ffdf 	bl	800ef52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	2b03      	cmp	r3, #3
 800ff9a:	d109      	bne.n	800ffb0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	f103 0214 	add.w	r2, r3, #20
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	0c1b      	lsrs	r3, r3, #16
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	4610      	mov	r0, r2
 800ffac:	f7fe ffd1 	bl	800ef52 <st_word>
	}
}
 800ffb0:	bf00      	nop
 800ffb2:	3710      	adds	r7, #16
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}

0800ffb8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ffb8:	b580      	push	{r7, lr}
 800ffba:	b086      	sub	sp, #24
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ffc2:	2304      	movs	r3, #4
 800ffc4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ffcc:	e03c      	b.n	8010048 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	6938      	ldr	r0, [r7, #16]
 800ffd6:	f7ff fa31 	bl	800f43c <move_window>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d136      	bne.n	8010052 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a1b      	ldr	r3, [r3, #32]
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d102      	bne.n	800fff8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800fff2:	2304      	movs	r3, #4
 800fff4:	75fb      	strb	r3, [r7, #23]
 800fff6:	e031      	b.n	801005c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	6a1b      	ldr	r3, [r3, #32]
 800fffc:	330b      	adds	r3, #11
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010004:	73bb      	strb	r3, [r7, #14]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	7bba      	ldrb	r2, [r7, #14]
 801000a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 801000c:	7bfb      	ldrb	r3, [r7, #15]
 801000e:	2be5      	cmp	r3, #229	; 0xe5
 8010010:	d011      	beq.n	8010036 <dir_read+0x7e>
 8010012:	7bfb      	ldrb	r3, [r7, #15]
 8010014:	2b2e      	cmp	r3, #46	; 0x2e
 8010016:	d00e      	beq.n	8010036 <dir_read+0x7e>
 8010018:	7bbb      	ldrb	r3, [r7, #14]
 801001a:	2b0f      	cmp	r3, #15
 801001c:	d00b      	beq.n	8010036 <dir_read+0x7e>
 801001e:	7bbb      	ldrb	r3, [r7, #14]
 8010020:	f023 0320 	bic.w	r3, r3, #32
 8010024:	2b08      	cmp	r3, #8
 8010026:	bf0c      	ite	eq
 8010028:	2301      	moveq	r3, #1
 801002a:	2300      	movne	r3, #0
 801002c:	b2db      	uxtb	r3, r3
 801002e:	461a      	mov	r2, r3
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	4293      	cmp	r3, r2
 8010034:	d00f      	beq.n	8010056 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010036:	2100      	movs	r1, #0
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f7ff fe61 	bl	800fd00 <dir_next>
 801003e:	4603      	mov	r3, r0
 8010040:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010042:	7dfb      	ldrb	r3, [r7, #23]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d108      	bne.n	801005a <dir_read+0xa2>
	while (dp->sect) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	69db      	ldr	r3, [r3, #28]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1be      	bne.n	800ffce <dir_read+0x16>
 8010050:	e004      	b.n	801005c <dir_read+0xa4>
		if (res != FR_OK) break;
 8010052:	bf00      	nop
 8010054:	e002      	b.n	801005c <dir_read+0xa4>
				break;
 8010056:	bf00      	nop
 8010058:	e000      	b.n	801005c <dir_read+0xa4>
		if (res != FR_OK) break;
 801005a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 801005c:	7dfb      	ldrb	r3, [r7, #23]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d002      	beq.n	8010068 <dir_read+0xb0>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	61da      	str	r2, [r3, #28]
	return res;
 8010068:	7dfb      	ldrb	r3, [r7, #23]
}
 801006a:	4618      	mov	r0, r3
 801006c:	3718      	adds	r7, #24
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}

08010072 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b086      	sub	sp, #24
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010080:	2100      	movs	r1, #0
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff fdb3 	bl	800fbee <dir_sdi>
 8010088:	4603      	mov	r3, r0
 801008a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801008c:	7dfb      	ldrb	r3, [r7, #23]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d001      	beq.n	8010096 <dir_find+0x24>
 8010092:	7dfb      	ldrb	r3, [r7, #23]
 8010094:	e03e      	b.n	8010114 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	69db      	ldr	r3, [r3, #28]
 801009a:	4619      	mov	r1, r3
 801009c:	6938      	ldr	r0, [r7, #16]
 801009e:	f7ff f9cd 	bl	800f43c <move_window>
 80100a2:	4603      	mov	r3, r0
 80100a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d12f      	bne.n	801010c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	6a1b      	ldr	r3, [r3, #32]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80100b4:	7bfb      	ldrb	r3, [r7, #15]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d102      	bne.n	80100c0 <dir_find+0x4e>
 80100ba:	2304      	movs	r3, #4
 80100bc:	75fb      	strb	r3, [r7, #23]
 80100be:	e028      	b.n	8010112 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	6a1b      	ldr	r3, [r3, #32]
 80100c4:	330b      	adds	r3, #11
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6a1b      	ldr	r3, [r3, #32]
 80100d6:	330b      	adds	r3, #11
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	f003 0308 	and.w	r3, r3, #8
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d10a      	bne.n	80100f8 <dir_find+0x86>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a18      	ldr	r0, [r3, #32]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	3324      	adds	r3, #36	; 0x24
 80100ea:	220b      	movs	r2, #11
 80100ec:	4619      	mov	r1, r3
 80100ee:	f7fe ffb2 	bl	800f056 <mem_cmp>
 80100f2:	4603      	mov	r3, r0
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d00b      	beq.n	8010110 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80100f8:	2100      	movs	r1, #0
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f7ff fe00 	bl	800fd00 <dir_next>
 8010100:	4603      	mov	r3, r0
 8010102:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010104:	7dfb      	ldrb	r3, [r7, #23]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d0c5      	beq.n	8010096 <dir_find+0x24>
 801010a:	e002      	b.n	8010112 <dir_find+0xa0>
		if (res != FR_OK) break;
 801010c:	bf00      	nop
 801010e:	e000      	b.n	8010112 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010110:	bf00      	nop

	return res;
 8010112:	7dfb      	ldrb	r3, [r7, #23]
}
 8010114:	4618      	mov	r0, r3
 8010116:	3718      	adds	r7, #24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b084      	sub	sp, #16
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801012a:	2101      	movs	r1, #1
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff febd 	bl	800feac <dir_alloc>
 8010132:	4603      	mov	r3, r0
 8010134:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010136:	7bfb      	ldrb	r3, [r7, #15]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d11c      	bne.n	8010176 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	69db      	ldr	r3, [r3, #28]
 8010140:	4619      	mov	r1, r3
 8010142:	68b8      	ldr	r0, [r7, #8]
 8010144:	f7ff f97a 	bl	800f43c <move_window>
 8010148:	4603      	mov	r3, r0
 801014a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801014c:	7bfb      	ldrb	r3, [r7, #15]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d111      	bne.n	8010176 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	2220      	movs	r2, #32
 8010158:	2100      	movs	r1, #0
 801015a:	4618      	mov	r0, r3
 801015c:	f7fe ff61 	bl	800f022 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a18      	ldr	r0, [r3, #32]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	3324      	adds	r3, #36	; 0x24
 8010168:	220b      	movs	r2, #11
 801016a:	4619      	mov	r1, r3
 801016c:	f7fe ff38 	bl	800efe0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2201      	movs	r2, #1
 8010174:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010176:	7bfb      	ldrb	r3, [r7, #15]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3710      	adds	r7, #16
 801017c:	46bd      	mov	sp, r7
 801017e:	bd80      	pop	{r7, pc}

08010180 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010180:	b580      	push	{r7, lr}
 8010182:	b084      	sub	sp, #16
 8010184:	af00      	add	r7, sp, #0
 8010186:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	69db      	ldr	r3, [r3, #28]
 8010192:	4619      	mov	r1, r3
 8010194:	68f8      	ldr	r0, [r7, #12]
 8010196:	f7ff f951 	bl	800f43c <move_window>
 801019a:	4603      	mov	r3, r0
 801019c:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 801019e:	7afb      	ldrb	r3, [r7, #11]
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d106      	bne.n	80101b2 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a1b      	ldr	r3, [r3, #32]
 80101a8:	22e5      	movs	r2, #229	; 0xe5
 80101aa:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2201      	movs	r2, #1
 80101b0:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80101b2:	7afb      	ldrb	r3, [r7, #11]
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3710      	adds	r7, #16
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}

080101bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b088      	sub	sp, #32
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
 80101c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	60fb      	str	r3, [r7, #12]
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	3324      	adds	r3, #36	; 0x24
 80101d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80101d2:	220b      	movs	r2, #11
 80101d4:	2120      	movs	r1, #32
 80101d6:	68b8      	ldr	r0, [r7, #8]
 80101d8:	f7fe ff23 	bl	800f022 <mem_set>
	si = i = 0; ni = 8;
 80101dc:	2300      	movs	r3, #0
 80101de:	613b      	str	r3, [r7, #16]
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	617b      	str	r3, [r7, #20]
 80101e4:	2308      	movs	r3, #8
 80101e6:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80101e8:	68fa      	ldr	r2, [r7, #12]
 80101ea:	697b      	ldr	r3, [r7, #20]
 80101ec:	4413      	add	r3, r2
 80101ee:	781b      	ldrb	r3, [r3, #0]
 80101f0:	2b2e      	cmp	r3, #46	; 0x2e
 80101f2:	d12f      	bne.n	8010254 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	1c5a      	adds	r2, r3, #1
 80101f8:	617a      	str	r2, [r7, #20]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	4413      	add	r3, r2
 80101fe:	781b      	ldrb	r3, [r3, #0]
 8010200:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010202:	7ffb      	ldrb	r3, [r7, #31]
 8010204:	2b2e      	cmp	r3, #46	; 0x2e
 8010206:	d10a      	bne.n	801021e <create_name+0x62>
 8010208:	697b      	ldr	r3, [r7, #20]
 801020a:	2b02      	cmp	r3, #2
 801020c:	d807      	bhi.n	801021e <create_name+0x62>
			sfn[i++] = c;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	1c5a      	adds	r2, r3, #1
 8010212:	613a      	str	r2, [r7, #16]
 8010214:	68ba      	ldr	r2, [r7, #8]
 8010216:	4413      	add	r3, r2
 8010218:	7ffa      	ldrb	r2, [r7, #31]
 801021a:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 801021c:	e7ea      	b.n	80101f4 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801021e:	7ffb      	ldrb	r3, [r7, #31]
 8010220:	2b2f      	cmp	r3, #47	; 0x2f
 8010222:	d007      	beq.n	8010234 <create_name+0x78>
 8010224:	7ffb      	ldrb	r3, [r7, #31]
 8010226:	2b5c      	cmp	r3, #92	; 0x5c
 8010228:	d004      	beq.n	8010234 <create_name+0x78>
 801022a:	7ffb      	ldrb	r3, [r7, #31]
 801022c:	2b20      	cmp	r3, #32
 801022e:	d901      	bls.n	8010234 <create_name+0x78>
 8010230:	2306      	movs	r3, #6
 8010232:	e084      	b.n	801033e <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010234:	68fa      	ldr	r2, [r7, #12]
 8010236:	697b      	ldr	r3, [r7, #20]
 8010238:	441a      	add	r2, r3
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801023e:	7ffb      	ldrb	r3, [r7, #31]
 8010240:	2b20      	cmp	r3, #32
 8010242:	d801      	bhi.n	8010248 <create_name+0x8c>
 8010244:	2224      	movs	r2, #36	; 0x24
 8010246:	e000      	b.n	801024a <create_name+0x8e>
 8010248:	2220      	movs	r2, #32
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	330b      	adds	r3, #11
 801024e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010250:	2300      	movs	r3, #0
 8010252:	e074      	b.n	801033e <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	617a      	str	r2, [r7, #20]
 801025a:	68fa      	ldr	r2, [r7, #12]
 801025c:	4413      	add	r3, r2
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010262:	7ffb      	ldrb	r3, [r7, #31]
 8010264:	2b20      	cmp	r3, #32
 8010266:	d94e      	bls.n	8010306 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010268:	7ffb      	ldrb	r3, [r7, #31]
 801026a:	2b2f      	cmp	r3, #47	; 0x2f
 801026c:	d006      	beq.n	801027c <create_name+0xc0>
 801026e:	7ffb      	ldrb	r3, [r7, #31]
 8010270:	2b5c      	cmp	r3, #92	; 0x5c
 8010272:	d110      	bne.n	8010296 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010274:	e002      	b.n	801027c <create_name+0xc0>
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	3301      	adds	r3, #1
 801027a:	617b      	str	r3, [r7, #20]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	697b      	ldr	r3, [r7, #20]
 8010280:	4413      	add	r3, r2
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	2b2f      	cmp	r3, #47	; 0x2f
 8010286:	d0f6      	beq.n	8010276 <create_name+0xba>
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	4413      	add	r3, r2
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b5c      	cmp	r3, #92	; 0x5c
 8010292:	d0f0      	beq.n	8010276 <create_name+0xba>
			break;
 8010294:	e038      	b.n	8010308 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010296:	7ffb      	ldrb	r3, [r7, #31]
 8010298:	2b2e      	cmp	r3, #46	; 0x2e
 801029a:	d003      	beq.n	80102a4 <create_name+0xe8>
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	69bb      	ldr	r3, [r7, #24]
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d30c      	bcc.n	80102be <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80102a4:	69bb      	ldr	r3, [r7, #24]
 80102a6:	2b0b      	cmp	r3, #11
 80102a8:	d002      	beq.n	80102b0 <create_name+0xf4>
 80102aa:	7ffb      	ldrb	r3, [r7, #31]
 80102ac:	2b2e      	cmp	r3, #46	; 0x2e
 80102ae:	d001      	beq.n	80102b4 <create_name+0xf8>
 80102b0:	2306      	movs	r3, #6
 80102b2:	e044      	b.n	801033e <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80102b4:	2308      	movs	r3, #8
 80102b6:	613b      	str	r3, [r7, #16]
 80102b8:	230b      	movs	r3, #11
 80102ba:	61bb      	str	r3, [r7, #24]
			continue;
 80102bc:	e022      	b.n	8010304 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80102be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	da04      	bge.n	80102d0 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80102c6:	7ffb      	ldrb	r3, [r7, #31]
 80102c8:	3b80      	subs	r3, #128	; 0x80
 80102ca:	4a1f      	ldr	r2, [pc, #124]	; (8010348 <create_name+0x18c>)
 80102cc:	5cd3      	ldrb	r3, [r2, r3]
 80102ce:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80102d0:	7ffb      	ldrb	r3, [r7, #31]
 80102d2:	4619      	mov	r1, r3
 80102d4:	481d      	ldr	r0, [pc, #116]	; (801034c <create_name+0x190>)
 80102d6:	f7fe fee5 	bl	800f0a4 <chk_chr>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d001      	beq.n	80102e4 <create_name+0x128>
 80102e0:	2306      	movs	r3, #6
 80102e2:	e02c      	b.n	801033e <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80102e4:	7ffb      	ldrb	r3, [r7, #31]
 80102e6:	2b60      	cmp	r3, #96	; 0x60
 80102e8:	d905      	bls.n	80102f6 <create_name+0x13a>
 80102ea:	7ffb      	ldrb	r3, [r7, #31]
 80102ec:	2b7a      	cmp	r3, #122	; 0x7a
 80102ee:	d802      	bhi.n	80102f6 <create_name+0x13a>
 80102f0:	7ffb      	ldrb	r3, [r7, #31]
 80102f2:	3b20      	subs	r3, #32
 80102f4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	1c5a      	adds	r2, r3, #1
 80102fa:	613a      	str	r2, [r7, #16]
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	4413      	add	r3, r2
 8010300:	7ffa      	ldrb	r2, [r7, #31]
 8010302:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010304:	e7a6      	b.n	8010254 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010306:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	441a      	add	r2, r3
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d101      	bne.n	801031c <create_name+0x160>
 8010318:	2306      	movs	r3, #6
 801031a:	e010      	b.n	801033e <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	781b      	ldrb	r3, [r3, #0]
 8010320:	2be5      	cmp	r3, #229	; 0xe5
 8010322:	d102      	bne.n	801032a <create_name+0x16e>
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	2205      	movs	r2, #5
 8010328:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801032a:	7ffb      	ldrb	r3, [r7, #31]
 801032c:	2b20      	cmp	r3, #32
 801032e:	d801      	bhi.n	8010334 <create_name+0x178>
 8010330:	2204      	movs	r2, #4
 8010332:	e000      	b.n	8010336 <create_name+0x17a>
 8010334:	2200      	movs	r2, #0
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	330b      	adds	r3, #11
 801033a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801033c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801033e:	4618      	mov	r0, r3
 8010340:	3720      	adds	r7, #32
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	08018540 	.word	0x08018540
 801034c:	080184f0 	.word	0x080184f0

08010350 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b086      	sub	sp, #24
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	781b      	ldrb	r3, [r3, #0]
 8010368:	2b2f      	cmp	r3, #47	; 0x2f
 801036a:	d00b      	beq.n	8010384 <follow_path+0x34>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	2b5c      	cmp	r3, #92	; 0x5c
 8010372:	d007      	beq.n	8010384 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	699a      	ldr	r2, [r3, #24]
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	609a      	str	r2, [r3, #8]
 801037c:	e00d      	b.n	801039a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801037e:	683b      	ldr	r3, [r7, #0]
 8010380:	3301      	adds	r3, #1
 8010382:	603b      	str	r3, [r7, #0]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	2b2f      	cmp	r3, #47	; 0x2f
 801038a:	d0f8      	beq.n	801037e <follow_path+0x2e>
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b5c      	cmp	r3, #92	; 0x5c
 8010392:	d0f4      	beq.n	801037e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	2200      	movs	r2, #0
 8010398:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	2b1f      	cmp	r3, #31
 80103a0:	d80a      	bhi.n	80103b8 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2280      	movs	r2, #128	; 0x80
 80103a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80103aa:	2100      	movs	r1, #0
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f7ff fc1e 	bl	800fbee <dir_sdi>
 80103b2:	4603      	mov	r3, r0
 80103b4:	75fb      	strb	r3, [r7, #23]
 80103b6:	e05b      	b.n	8010470 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80103b8:	463b      	mov	r3, r7
 80103ba:	4619      	mov	r1, r3
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff fefd 	bl	80101bc <create_name>
 80103c2:	4603      	mov	r3, r0
 80103c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80103c6:	7dfb      	ldrb	r3, [r7, #23]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d14c      	bne.n	8010466 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f7ff fe50 	bl	8010072 <dir_find>
 80103d2:	4603      	mov	r3, r0
 80103d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80103dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80103de:	7dfb      	ldrb	r3, [r7, #23]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d01b      	beq.n	801041c <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80103e4:	7dfb      	ldrb	r3, [r7, #23]
 80103e6:	2b04      	cmp	r3, #4
 80103e8:	d13f      	bne.n	801046a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80103ea:	7afb      	ldrb	r3, [r7, #11]
 80103ec:	f003 0320 	and.w	r3, r3, #32
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d00b      	beq.n	801040c <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80103f4:	7afb      	ldrb	r3, [r7, #11]
 80103f6:	f003 0304 	and.w	r3, r3, #4
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d031      	beq.n	8010462 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2280      	movs	r2, #128	; 0x80
 8010402:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8010406:	2300      	movs	r3, #0
 8010408:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 801040a:	e02e      	b.n	801046a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801040c:	7afb      	ldrb	r3, [r7, #11]
 801040e:	f003 0304 	and.w	r3, r3, #4
 8010412:	2b00      	cmp	r3, #0
 8010414:	d129      	bne.n	801046a <follow_path+0x11a>
 8010416:	2305      	movs	r3, #5
 8010418:	75fb      	strb	r3, [r7, #23]
				break;
 801041a:	e026      	b.n	801046a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801041c:	7afb      	ldrb	r3, [r7, #11]
 801041e:	f003 0304 	and.w	r3, r3, #4
 8010422:	2b00      	cmp	r3, #0
 8010424:	d123      	bne.n	801046e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	799b      	ldrb	r3, [r3, #6]
 801042a:	f003 0310 	and.w	r3, r3, #16
 801042e:	2b00      	cmp	r3, #0
 8010430:	d102      	bne.n	8010438 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8010432:	2305      	movs	r3, #5
 8010434:	75fb      	strb	r3, [r7, #23]
 8010436:	e01b      	b.n	8010470 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	695b      	ldr	r3, [r3, #20]
 8010442:	68fa      	ldr	r2, [r7, #12]
 8010444:	8992      	ldrh	r2, [r2, #12]
 8010446:	fbb3 f0f2 	udiv	r0, r3, r2
 801044a:	fb02 f200 	mul.w	r2, r2, r0
 801044e:	1a9b      	subs	r3, r3, r2
 8010450:	440b      	add	r3, r1
 8010452:	4619      	mov	r1, r3
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f7ff fd70 	bl	800ff3a <ld_clust>
 801045a:	4602      	mov	r2, r0
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	609a      	str	r2, [r3, #8]
 8010460:	e7aa      	b.n	80103b8 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8010462:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010464:	e7a8      	b.n	80103b8 <follow_path+0x68>
			if (res != FR_OK) break;
 8010466:	bf00      	nop
 8010468:	e002      	b.n	8010470 <follow_path+0x120>
				break;
 801046a:	bf00      	nop
 801046c:	e000      	b.n	8010470 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801046e:	bf00      	nop
			}
		}
	}

	return res;
 8010470:	7dfb      	ldrb	r3, [r7, #23]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801047a:	b480      	push	{r7}
 801047c:	b087      	sub	sp, #28
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010482:	f04f 33ff 	mov.w	r3, #4294967295
 8010486:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d031      	beq.n	80104f4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	617b      	str	r3, [r7, #20]
 8010496:	e002      	b.n	801049e <get_ldnumber+0x24>
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	3301      	adds	r3, #1
 801049c:	617b      	str	r3, [r7, #20]
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	2b20      	cmp	r3, #32
 80104a4:	d903      	bls.n	80104ae <get_ldnumber+0x34>
 80104a6:	697b      	ldr	r3, [r7, #20]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	2b3a      	cmp	r3, #58	; 0x3a
 80104ac:	d1f4      	bne.n	8010498 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b3a      	cmp	r3, #58	; 0x3a
 80104b4:	d11c      	bne.n	80104f0 <get_ldnumber+0x76>
			tp = *path;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	1c5a      	adds	r2, r3, #1
 80104c0:	60fa      	str	r2, [r7, #12]
 80104c2:	781b      	ldrb	r3, [r3, #0]
 80104c4:	3b30      	subs	r3, #48	; 0x30
 80104c6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	2b09      	cmp	r3, #9
 80104cc:	d80e      	bhi.n	80104ec <get_ldnumber+0x72>
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d10a      	bne.n	80104ec <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d107      	bne.n	80104ec <get_ldnumber+0x72>
					vol = (int)i;
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80104e0:	697b      	ldr	r3, [r7, #20]
 80104e2:	3301      	adds	r3, #1
 80104e4:	617b      	str	r3, [r7, #20]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	697a      	ldr	r2, [r7, #20]
 80104ea:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	e002      	b.n	80104f6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80104f0:	2300      	movs	r3, #0
 80104f2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80104f4:	693b      	ldr	r3, [r7, #16]
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	371c      	adds	r7, #28
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr
	...

08010504 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b082      	sub	sp, #8
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	70da      	strb	r2, [r3, #3]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f04f 32ff 	mov.w	r2, #4294967295
 801051a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801051c:	6839      	ldr	r1, [r7, #0]
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7fe ff8c 	bl	800f43c <move_window>
 8010524:	4603      	mov	r3, r0
 8010526:	2b00      	cmp	r3, #0
 8010528:	d001      	beq.n	801052e <check_fs+0x2a>
 801052a:	2304      	movs	r3, #4
 801052c:	e038      	b.n	80105a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	3338      	adds	r3, #56	; 0x38
 8010532:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fcd0 	bl	800eedc <ld_word>
 801053c:	4603      	mov	r3, r0
 801053e:	461a      	mov	r2, r3
 8010540:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010544:	429a      	cmp	r2, r3
 8010546:	d001      	beq.n	801054c <check_fs+0x48>
 8010548:	2303      	movs	r3, #3
 801054a:	e029      	b.n	80105a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010552:	2be9      	cmp	r3, #233	; 0xe9
 8010554:	d009      	beq.n	801056a <check_fs+0x66>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801055c:	2beb      	cmp	r3, #235	; 0xeb
 801055e:	d11e      	bne.n	801059e <check_fs+0x9a>
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8010566:	2b90      	cmp	r3, #144	; 0x90
 8010568:	d119      	bne.n	801059e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	3338      	adds	r3, #56	; 0x38
 801056e:	3336      	adds	r3, #54	; 0x36
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe fccb 	bl	800ef0c <ld_dword>
 8010576:	4603      	mov	r3, r0
 8010578:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801057c:	4a0a      	ldr	r2, [pc, #40]	; (80105a8 <check_fs+0xa4>)
 801057e:	4293      	cmp	r3, r2
 8010580:	d101      	bne.n	8010586 <check_fs+0x82>
 8010582:	2300      	movs	r3, #0
 8010584:	e00c      	b.n	80105a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	3338      	adds	r3, #56	; 0x38
 801058a:	3352      	adds	r3, #82	; 0x52
 801058c:	4618      	mov	r0, r3
 801058e:	f7fe fcbd 	bl	800ef0c <ld_dword>
 8010592:	4602      	mov	r2, r0
 8010594:	4b05      	ldr	r3, [pc, #20]	; (80105ac <check_fs+0xa8>)
 8010596:	429a      	cmp	r2, r3
 8010598:	d101      	bne.n	801059e <check_fs+0x9a>
 801059a:	2300      	movs	r3, #0
 801059c:	e000      	b.n	80105a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801059e:	2302      	movs	r3, #2
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3708      	adds	r7, #8
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}
 80105a8:	00544146 	.word	0x00544146
 80105ac:	33544146 	.word	0x33544146

080105b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b096      	sub	sp, #88	; 0x58
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	4613      	mov	r3, r2
 80105bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	2200      	movs	r2, #0
 80105c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80105c4:	68f8      	ldr	r0, [r7, #12]
 80105c6:	f7ff ff58 	bl	801047a <get_ldnumber>
 80105ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80105cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	da01      	bge.n	80105d6 <find_volume+0x26>
 80105d2:	230b      	movs	r3, #11
 80105d4:	e268      	b.n	8010aa8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80105d6:	4ab0      	ldr	r2, [pc, #704]	; (8010898 <find_volume+0x2e8>)
 80105d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80105e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d101      	bne.n	80105ea <find_volume+0x3a>
 80105e6:	230c      	movs	r3, #12
 80105e8:	e25e      	b.n	8010aa8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	f023 0301 	bic.w	r3, r3, #1
 80105f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	781b      	ldrb	r3, [r3, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d01a      	beq.n	8010636 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010602:	785b      	ldrb	r3, [r3, #1]
 8010604:	4618      	mov	r0, r3
 8010606:	f7fe fbcb 	bl	800eda0 <disk_status>
 801060a:	4603      	mov	r3, r0
 801060c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010610:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010614:	f003 0301 	and.w	r3, r3, #1
 8010618:	2b00      	cmp	r3, #0
 801061a:	d10c      	bne.n	8010636 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d007      	beq.n	8010632 <find_volume+0x82>
 8010622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010626:	f003 0304 	and.w	r3, r3, #4
 801062a:	2b00      	cmp	r3, #0
 801062c:	d001      	beq.n	8010632 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801062e:	230a      	movs	r3, #10
 8010630:	e23a      	b.n	8010aa8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8010632:	2300      	movs	r3, #0
 8010634:	e238      	b.n	8010aa8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010638:	2200      	movs	r2, #0
 801063a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801063c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801063e:	b2da      	uxtb	r2, r3
 8010640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010642:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010646:	785b      	ldrb	r3, [r3, #1]
 8010648:	4618      	mov	r0, r3
 801064a:	f7fe fbc3 	bl	800edd4 <disk_initialize>
 801064e:	4603      	mov	r3, r0
 8010650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010658:	f003 0301 	and.w	r3, r3, #1
 801065c:	2b00      	cmp	r3, #0
 801065e:	d001      	beq.n	8010664 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010660:	2303      	movs	r3, #3
 8010662:	e221      	b.n	8010aa8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010664:	79fb      	ldrb	r3, [r7, #7]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d007      	beq.n	801067a <find_volume+0xca>
 801066a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801066e:	f003 0304 	and.w	r3, r3, #4
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8010676:	230a      	movs	r3, #10
 8010678:	e216      	b.n	8010aa8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801067a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801067c:	7858      	ldrb	r0, [r3, #1]
 801067e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010680:	330c      	adds	r3, #12
 8010682:	461a      	mov	r2, r3
 8010684:	2102      	movs	r1, #2
 8010686:	f7fe fc0b 	bl	800eea0 <disk_ioctl>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d001      	beq.n	8010694 <find_volume+0xe4>
 8010690:	2301      	movs	r3, #1
 8010692:	e209      	b.n	8010aa8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010696:	899b      	ldrh	r3, [r3, #12]
 8010698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801069c:	d80d      	bhi.n	80106ba <find_volume+0x10a>
 801069e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a0:	899b      	ldrh	r3, [r3, #12]
 80106a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106a6:	d308      	bcc.n	80106ba <find_volume+0x10a>
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	899b      	ldrh	r3, [r3, #12]
 80106ac:	461a      	mov	r2, r3
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	899b      	ldrh	r3, [r3, #12]
 80106b2:	3b01      	subs	r3, #1
 80106b4:	4013      	ands	r3, r2
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d001      	beq.n	80106be <find_volume+0x10e>
 80106ba:	2301      	movs	r3, #1
 80106bc:	e1f4      	b.n	8010aa8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80106be:	2300      	movs	r3, #0
 80106c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80106c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80106c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106c6:	f7ff ff1d 	bl	8010504 <check_fs>
 80106ca:	4603      	mov	r3, r0
 80106cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80106d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d14b      	bne.n	8010770 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80106d8:	2300      	movs	r3, #0
 80106da:	643b      	str	r3, [r7, #64]	; 0x40
 80106dc:	e01f      	b.n	801071e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80106de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80106e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106e6:	011b      	lsls	r3, r3, #4
 80106e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80106ec:	4413      	add	r3, r2
 80106ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f2:	3304      	adds	r3, #4
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d006      	beq.n	8010708 <find_volume+0x158>
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	3308      	adds	r3, #8
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fe fc04 	bl	800ef0c <ld_dword>
 8010704:	4602      	mov	r2, r0
 8010706:	e000      	b.n	801070a <find_volume+0x15a>
 8010708:	2200      	movs	r2, #0
 801070a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010712:	440b      	add	r3, r1
 8010714:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801071a:	3301      	adds	r3, #1
 801071c:	643b      	str	r3, [r7, #64]	; 0x40
 801071e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010720:	2b03      	cmp	r3, #3
 8010722:	d9dc      	bls.n	80106de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010724:	2300      	movs	r3, #0
 8010726:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801072a:	2b00      	cmp	r3, #0
 801072c:	d002      	beq.n	8010734 <find_volume+0x184>
 801072e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010730:	3b01      	subs	r3, #1
 8010732:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010736:	009b      	lsls	r3, r3, #2
 8010738:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801073c:	4413      	add	r3, r2
 801073e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010742:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010746:	2b00      	cmp	r3, #0
 8010748:	d005      	beq.n	8010756 <find_volume+0x1a6>
 801074a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801074c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801074e:	f7ff fed9 	bl	8010504 <check_fs>
 8010752:	4603      	mov	r3, r0
 8010754:	e000      	b.n	8010758 <find_volume+0x1a8>
 8010756:	2303      	movs	r3, #3
 8010758:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801075c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010760:	2b01      	cmp	r3, #1
 8010762:	d905      	bls.n	8010770 <find_volume+0x1c0>
 8010764:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010766:	3301      	adds	r3, #1
 8010768:	643b      	str	r3, [r7, #64]	; 0x40
 801076a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801076c:	2b03      	cmp	r3, #3
 801076e:	d9e1      	bls.n	8010734 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010770:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010774:	2b04      	cmp	r3, #4
 8010776:	d101      	bne.n	801077c <find_volume+0x1cc>
 8010778:	2301      	movs	r3, #1
 801077a:	e195      	b.n	8010aa8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801077c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010780:	2b01      	cmp	r3, #1
 8010782:	d901      	bls.n	8010788 <find_volume+0x1d8>
 8010784:	230d      	movs	r3, #13
 8010786:	e18f      	b.n	8010aa8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801078a:	3338      	adds	r3, #56	; 0x38
 801078c:	330b      	adds	r3, #11
 801078e:	4618      	mov	r0, r3
 8010790:	f7fe fba4 	bl	800eedc <ld_word>
 8010794:	4603      	mov	r3, r0
 8010796:	461a      	mov	r2, r3
 8010798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801079a:	899b      	ldrh	r3, [r3, #12]
 801079c:	429a      	cmp	r2, r3
 801079e:	d001      	beq.n	80107a4 <find_volume+0x1f4>
 80107a0:	230d      	movs	r3, #13
 80107a2:	e181      	b.n	8010aa8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80107a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107a6:	3338      	adds	r3, #56	; 0x38
 80107a8:	3316      	adds	r3, #22
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7fe fb96 	bl	800eedc <ld_word>
 80107b0:	4603      	mov	r3, r0
 80107b2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80107b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <find_volume+0x218>
 80107ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107bc:	3338      	adds	r3, #56	; 0x38
 80107be:	3324      	adds	r3, #36	; 0x24
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7fe fba3 	bl	800ef0c <ld_dword>
 80107c6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107cc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80107ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80107d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80107d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107da:	789b      	ldrb	r3, [r3, #2]
 80107dc:	2b01      	cmp	r3, #1
 80107de:	d005      	beq.n	80107ec <find_volume+0x23c>
 80107e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e2:	789b      	ldrb	r3, [r3, #2]
 80107e4:	2b02      	cmp	r3, #2
 80107e6:	d001      	beq.n	80107ec <find_volume+0x23c>
 80107e8:	230d      	movs	r3, #13
 80107ea:	e15d      	b.n	8010aa8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80107ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ee:	789b      	ldrb	r3, [r3, #2]
 80107f0:	461a      	mov	r2, r3
 80107f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107f4:	fb02 f303 	mul.w	r3, r2, r3
 80107f8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80107fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010800:	b29a      	uxth	r2, r3
 8010802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010804:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010808:	895b      	ldrh	r3, [r3, #10]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d008      	beq.n	8010820 <find_volume+0x270>
 801080e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010810:	895b      	ldrh	r3, [r3, #10]
 8010812:	461a      	mov	r2, r3
 8010814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010816:	895b      	ldrh	r3, [r3, #10]
 8010818:	3b01      	subs	r3, #1
 801081a:	4013      	ands	r3, r2
 801081c:	2b00      	cmp	r3, #0
 801081e:	d001      	beq.n	8010824 <find_volume+0x274>
 8010820:	230d      	movs	r3, #13
 8010822:	e141      	b.n	8010aa8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010826:	3338      	adds	r3, #56	; 0x38
 8010828:	3311      	adds	r3, #17
 801082a:	4618      	mov	r0, r3
 801082c:	f7fe fb56 	bl	800eedc <ld_word>
 8010830:	4603      	mov	r3, r0
 8010832:	461a      	mov	r2, r3
 8010834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010836:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083a:	891b      	ldrh	r3, [r3, #8]
 801083c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801083e:	8992      	ldrh	r2, [r2, #12]
 8010840:	0952      	lsrs	r2, r2, #5
 8010842:	b292      	uxth	r2, r2
 8010844:	fbb3 f1f2 	udiv	r1, r3, r2
 8010848:	fb02 f201 	mul.w	r2, r2, r1
 801084c:	1a9b      	subs	r3, r3, r2
 801084e:	b29b      	uxth	r3, r3
 8010850:	2b00      	cmp	r3, #0
 8010852:	d001      	beq.n	8010858 <find_volume+0x2a8>
 8010854:	230d      	movs	r3, #13
 8010856:	e127      	b.n	8010aa8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	3338      	adds	r3, #56	; 0x38
 801085c:	3313      	adds	r3, #19
 801085e:	4618      	mov	r0, r3
 8010860:	f7fe fb3c 	bl	800eedc <ld_word>
 8010864:	4603      	mov	r3, r0
 8010866:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801086a:	2b00      	cmp	r3, #0
 801086c:	d106      	bne.n	801087c <find_volume+0x2cc>
 801086e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010870:	3338      	adds	r3, #56	; 0x38
 8010872:	3320      	adds	r3, #32
 8010874:	4618      	mov	r0, r3
 8010876:	f7fe fb49 	bl	800ef0c <ld_dword>
 801087a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087e:	3338      	adds	r3, #56	; 0x38
 8010880:	330e      	adds	r3, #14
 8010882:	4618      	mov	r0, r3
 8010884:	f7fe fb2a 	bl	800eedc <ld_word>
 8010888:	4603      	mov	r3, r0
 801088a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801088c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801088e:	2b00      	cmp	r3, #0
 8010890:	d104      	bne.n	801089c <find_volume+0x2ec>
 8010892:	230d      	movs	r3, #13
 8010894:	e108      	b.n	8010aa8 <find_volume+0x4f8>
 8010896:	bf00      	nop
 8010898:	200335d0 	.word	0x200335d0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801089c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801089e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108a0:	4413      	add	r3, r2
 80108a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108a4:	8911      	ldrh	r1, [r2, #8]
 80108a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108a8:	8992      	ldrh	r2, [r2, #12]
 80108aa:	0952      	lsrs	r2, r2, #5
 80108ac:	b292      	uxth	r2, r2
 80108ae:	fbb1 f2f2 	udiv	r2, r1, r2
 80108b2:	b292      	uxth	r2, r2
 80108b4:	4413      	add	r3, r2
 80108b6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80108b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108bc:	429a      	cmp	r2, r3
 80108be:	d201      	bcs.n	80108c4 <find_volume+0x314>
 80108c0:	230d      	movs	r3, #13
 80108c2:	e0f1      	b.n	8010aa8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80108c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	1ad3      	subs	r3, r2, r3
 80108ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108cc:	8952      	ldrh	r2, [r2, #10]
 80108ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80108d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80108d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d101      	bne.n	80108de <find_volume+0x32e>
 80108da:	230d      	movs	r3, #13
 80108dc:	e0e4      	b.n	8010aa8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80108de:	2303      	movs	r3, #3
 80108e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80108e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80108ea:	4293      	cmp	r3, r2
 80108ec:	d802      	bhi.n	80108f4 <find_volume+0x344>
 80108ee:	2302      	movs	r3, #2
 80108f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80108f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d802      	bhi.n	8010904 <find_volume+0x354>
 80108fe:	2301      	movs	r3, #1
 8010900:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010906:	1c9a      	adds	r2, r3, #2
 8010908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801090c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801090e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010910:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010912:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010916:	441a      	add	r2, r3
 8010918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801091a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801091c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010920:	441a      	add	r2, r3
 8010922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010924:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8010926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801092a:	2b03      	cmp	r3, #3
 801092c:	d11e      	bne.n	801096c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	3338      	adds	r3, #56	; 0x38
 8010932:	332a      	adds	r3, #42	; 0x2a
 8010934:	4618      	mov	r0, r3
 8010936:	f7fe fad1 	bl	800eedc <ld_word>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d001      	beq.n	8010944 <find_volume+0x394>
 8010940:	230d      	movs	r3, #13
 8010942:	e0b1      	b.n	8010aa8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010946:	891b      	ldrh	r3, [r3, #8]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d001      	beq.n	8010950 <find_volume+0x3a0>
 801094c:	230d      	movs	r3, #13
 801094e:	e0ab      	b.n	8010aa8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	3338      	adds	r3, #56	; 0x38
 8010954:	332c      	adds	r3, #44	; 0x2c
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fad8 	bl	800ef0c <ld_dword>
 801095c:	4602      	mov	r2, r0
 801095e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010960:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010964:	69db      	ldr	r3, [r3, #28]
 8010966:	009b      	lsls	r3, r3, #2
 8010968:	647b      	str	r3, [r7, #68]	; 0x44
 801096a:	e01f      	b.n	80109ac <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801096c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801096e:	891b      	ldrh	r3, [r3, #8]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d101      	bne.n	8010978 <find_volume+0x3c8>
 8010974:	230d      	movs	r3, #13
 8010976:	e097      	b.n	8010aa8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801097c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801097e:	441a      	add	r2, r3
 8010980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010982:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010988:	2b02      	cmp	r3, #2
 801098a:	d103      	bne.n	8010994 <find_volume+0x3e4>
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	69db      	ldr	r3, [r3, #28]
 8010990:	005b      	lsls	r3, r3, #1
 8010992:	e00a      	b.n	80109aa <find_volume+0x3fa>
 8010994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010996:	69da      	ldr	r2, [r3, #28]
 8010998:	4613      	mov	r3, r2
 801099a:	005b      	lsls	r3, r3, #1
 801099c:	4413      	add	r3, r2
 801099e:	085a      	lsrs	r2, r3, #1
 80109a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a2:	69db      	ldr	r3, [r3, #28]
 80109a4:	f003 0301 	and.w	r3, r3, #1
 80109a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80109aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	6a1a      	ldr	r2, [r3, #32]
 80109b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b2:	899b      	ldrh	r3, [r3, #12]
 80109b4:	4619      	mov	r1, r3
 80109b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b8:	440b      	add	r3, r1
 80109ba:	3b01      	subs	r3, #1
 80109bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80109be:	8989      	ldrh	r1, [r1, #12]
 80109c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d201      	bcs.n	80109cc <find_volume+0x41c>
 80109c8:	230d      	movs	r3, #13
 80109ca:	e06d      	b.n	8010aa8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80109cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ce:	f04f 32ff 	mov.w	r2, #4294967295
 80109d2:	615a      	str	r2, [r3, #20]
 80109d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d6:	695a      	ldr	r2, [r3, #20]
 80109d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109da:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80109dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109de:	2280      	movs	r2, #128	; 0x80
 80109e0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80109e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80109e6:	2b03      	cmp	r3, #3
 80109e8:	d149      	bne.n	8010a7e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80109ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ec:	3338      	adds	r3, #56	; 0x38
 80109ee:	3330      	adds	r3, #48	; 0x30
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fe fa73 	bl	800eedc <ld_word>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d140      	bne.n	8010a7e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80109fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109fe:	3301      	adds	r3, #1
 8010a00:	4619      	mov	r1, r3
 8010a02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010a04:	f7fe fd1a 	bl	800f43c <move_window>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d137      	bne.n	8010a7e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	2200      	movs	r2, #0
 8010a12:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a16:	3338      	adds	r3, #56	; 0x38
 8010a18:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f7fe fa5d 	bl	800eedc <ld_word>
 8010a22:	4603      	mov	r3, r0
 8010a24:	461a      	mov	r2, r3
 8010a26:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d127      	bne.n	8010a7e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a30:	3338      	adds	r3, #56	; 0x38
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe fa6a 	bl	800ef0c <ld_dword>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	4b1d      	ldr	r3, [pc, #116]	; (8010ab0 <find_volume+0x500>)
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d11e      	bne.n	8010a7e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a42:	3338      	adds	r3, #56	; 0x38
 8010a44:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fe fa5f 	bl	800ef0c <ld_dword>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	4b18      	ldr	r3, [pc, #96]	; (8010ab4 <find_volume+0x504>)
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d113      	bne.n	8010a7e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a58:	3338      	adds	r3, #56	; 0x38
 8010a5a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fe fa54 	bl	800ef0c <ld_dword>
 8010a64:	4602      	mov	r2, r0
 8010a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a68:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a6c:	3338      	adds	r3, #56	; 0x38
 8010a6e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fe fa4a 	bl	800ef0c <ld_dword>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a7c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a80:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010a84:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010a86:	4b0c      	ldr	r3, [pc, #48]	; (8010ab8 <find_volume+0x508>)
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	3301      	adds	r3, #1
 8010a8c:	b29a      	uxth	r2, r3
 8010a8e:	4b0a      	ldr	r3, [pc, #40]	; (8010ab8 <find_volume+0x508>)
 8010a90:	801a      	strh	r2, [r3, #0]
 8010a92:	4b09      	ldr	r3, [pc, #36]	; (8010ab8 <find_volume+0x508>)
 8010a94:	881a      	ldrh	r2, [r3, #0]
 8010a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a98:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010aa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010aa2:	f7fe fc63 	bl	800f36c <clear_lock>
#endif
	return FR_OK;
 8010aa6:	2300      	movs	r3, #0
}
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	3758      	adds	r7, #88	; 0x58
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}
 8010ab0:	41615252 	.word	0x41615252
 8010ab4:	61417272 	.word	0x61417272
 8010ab8:	200335d4 	.word	0x200335d4

08010abc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010abc:	b580      	push	{r7, lr}
 8010abe:	b084      	sub	sp, #16
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
 8010ac4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010ac6:	2309      	movs	r3, #9
 8010ac8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d01c      	beq.n	8010b0a <validate+0x4e>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d018      	beq.n	8010b0a <validate+0x4e>
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d013      	beq.n	8010b0a <validate+0x4e>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	889a      	ldrh	r2, [r3, #4]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	88db      	ldrh	r3, [r3, #6]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d10c      	bne.n	8010b0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	785b      	ldrb	r3, [r3, #1]
 8010af6:	4618      	mov	r0, r3
 8010af8:	f7fe f952 	bl	800eda0 <disk_status>
 8010afc:	4603      	mov	r3, r0
 8010afe:	f003 0301 	and.w	r3, r3, #1
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d101      	bne.n	8010b0a <validate+0x4e>
			res = FR_OK;
 8010b06:	2300      	movs	r3, #0
 8010b08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010b0a:	7bfb      	ldrb	r3, [r7, #15]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d102      	bne.n	8010b16 <validate+0x5a>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	e000      	b.n	8010b18 <validate+0x5c>
 8010b16:	2300      	movs	r3, #0
 8010b18:	683a      	ldr	r2, [r7, #0]
 8010b1a:	6013      	str	r3, [r2, #0]
	return res;
 8010b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b1e:	4618      	mov	r0, r3
 8010b20:	3710      	adds	r7, #16
 8010b22:	46bd      	mov	sp, r7
 8010b24:	bd80      	pop	{r7, pc}
	...

08010b28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	60f8      	str	r0, [r7, #12]
 8010b30:	60b9      	str	r1, [r7, #8]
 8010b32:	4613      	mov	r3, r2
 8010b34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010b3a:	f107 0310 	add.w	r3, r7, #16
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ff fc9b 	bl	801047a <get_ldnumber>
 8010b44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010b46:	69fb      	ldr	r3, [r7, #28]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	da01      	bge.n	8010b50 <f_mount+0x28>
 8010b4c:	230b      	movs	r3, #11
 8010b4e:	e02b      	b.n	8010ba8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010b50:	4a17      	ldr	r2, [pc, #92]	; (8010bb0 <f_mount+0x88>)
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010b5a:	69bb      	ldr	r3, [r7, #24]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d005      	beq.n	8010b6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010b60:	69b8      	ldr	r0, [r7, #24]
 8010b62:	f7fe fc03 	bl	800f36c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d002      	beq.n	8010b78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2200      	movs	r2, #0
 8010b76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010b78:	68fa      	ldr	r2, [r7, #12]
 8010b7a:	490d      	ldr	r1, [pc, #52]	; (8010bb0 <f_mount+0x88>)
 8010b7c:	69fb      	ldr	r3, [r7, #28]
 8010b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <f_mount+0x66>
 8010b88:	79fb      	ldrb	r3, [r7, #7]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d001      	beq.n	8010b92 <f_mount+0x6a>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e00a      	b.n	8010ba8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010b92:	f107 010c 	add.w	r1, r7, #12
 8010b96:	f107 0308 	add.w	r3, r7, #8
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7ff fd07 	bl	80105b0 <find_volume>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3720      	adds	r7, #32
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	200335d0 	.word	0x200335d0

08010bb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b098      	sub	sp, #96	; 0x60
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	4613      	mov	r3, r2
 8010bc0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d101      	bne.n	8010bcc <f_open+0x18>
 8010bc8:	2309      	movs	r3, #9
 8010bca:	e1ba      	b.n	8010f42 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010bcc:	79fb      	ldrb	r3, [r7, #7]
 8010bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bd2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010bd4:	79fa      	ldrb	r2, [r7, #7]
 8010bd6:	f107 0110 	add.w	r1, r7, #16
 8010bda:	f107 0308 	add.w	r3, r7, #8
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7ff fce6 	bl	80105b0 <find_volume>
 8010be4:	4603      	mov	r3, r0
 8010be6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f040 819e 	bne.w	8010f30 <f_open+0x37c>
		dj.obj.fs = fs;
 8010bf4:	693b      	ldr	r3, [r7, #16]
 8010bf6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010bf8:	68ba      	ldr	r2, [r7, #8]
 8010bfa:	f107 0314 	add.w	r3, r7, #20
 8010bfe:	4611      	mov	r1, r2
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7ff fba5 	bl	8010350 <follow_path>
 8010c06:	4603      	mov	r3, r0
 8010c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d11a      	bne.n	8010c4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010c14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010c18:	b25b      	sxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	da03      	bge.n	8010c26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8010c1e:	2306      	movs	r3, #6
 8010c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c24:	e011      	b.n	8010c4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010c26:	79fb      	ldrb	r3, [r7, #7]
 8010c28:	f023 0301 	bic.w	r3, r3, #1
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	bf14      	ite	ne
 8010c30:	2301      	movne	r3, #1
 8010c32:	2300      	moveq	r3, #0
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	461a      	mov	r2, r3
 8010c38:	f107 0314 	add.w	r3, r7, #20
 8010c3c:	4611      	mov	r1, r2
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fe fa4c 	bl	800f0dc <chk_lock>
 8010c44:	4603      	mov	r3, r0
 8010c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	f003 031c 	and.w	r3, r3, #28
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d07e      	beq.n	8010d52 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d017      	beq.n	8010c8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010c60:	2b04      	cmp	r3, #4
 8010c62:	d10e      	bne.n	8010c82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010c64:	f7fe fa96 	bl	800f194 <enq_lock>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d006      	beq.n	8010c7c <f_open+0xc8>
 8010c6e:	f107 0314 	add.w	r3, r7, #20
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff fa52 	bl	801011c <dir_register>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	e000      	b.n	8010c7e <f_open+0xca>
 8010c7c:	2312      	movs	r3, #18
 8010c7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010c82:	79fb      	ldrb	r3, [r7, #7]
 8010c84:	f043 0308 	orr.w	r3, r3, #8
 8010c88:	71fb      	strb	r3, [r7, #7]
 8010c8a:	e010      	b.n	8010cae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010c8c:	7ebb      	ldrb	r3, [r7, #26]
 8010c8e:	f003 0311 	and.w	r3, r3, #17
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d003      	beq.n	8010c9e <f_open+0xea>
					res = FR_DENIED;
 8010c96:	2307      	movs	r3, #7
 8010c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010c9c:	e007      	b.n	8010cae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010c9e:	79fb      	ldrb	r3, [r7, #7]
 8010ca0:	f003 0304 	and.w	r3, r3, #4
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d002      	beq.n	8010cae <f_open+0xfa>
 8010ca8:	2308      	movs	r3, #8
 8010caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010cae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d167      	bne.n	8010d86 <f_open+0x1d2>
 8010cb6:	79fb      	ldrb	r3, [r7, #7]
 8010cb8:	f003 0308 	and.w	r3, r3, #8
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d062      	beq.n	8010d86 <f_open+0x1d2>
				dw = GET_FATTIME();
 8010cc0:	4ba2      	ldr	r3, [pc, #648]	; (8010f4c <f_open+0x398>)
 8010cc2:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cc6:	330e      	adds	r3, #14
 8010cc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7fe f95c 	bl	800ef88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cd2:	3316      	adds	r3, #22
 8010cd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fe f956 	bl	800ef88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cde:	330b      	adds	r3, #11
 8010ce0:	2220      	movs	r2, #32
 8010ce2:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ce8:	4611      	mov	r1, r2
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff f925 	bl	800ff3a <ld_clust>
 8010cf0:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7ff f93d 	bl	800ff78 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d00:	331c      	adds	r3, #28
 8010d02:	2100      	movs	r1, #0
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe f93f 	bl	800ef88 <st_dword>
					fs->wflag = 1;
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	2201      	movs	r2, #1
 8010d0e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d037      	beq.n	8010d86 <f_open+0x1d2>
						dw = fs->winsect;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d1a:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010d1c:	f107 0314 	add.w	r3, r7, #20
 8010d20:	2200      	movs	r2, #0
 8010d22:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d24:	4618      	mov	r0, r3
 8010d26:	f7fe fe2d 	bl	800f984 <remove_chain>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010d30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d126      	bne.n	8010d86 <f_open+0x1d2>
							res = move_window(fs, dw);
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fe fb7d 	bl	800f43c <move_window>
 8010d42:	4603      	mov	r3, r0
 8010d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d4c:	3a01      	subs	r2, #1
 8010d4e:	611a      	str	r2, [r3, #16]
 8010d50:	e019      	b.n	8010d86 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d115      	bne.n	8010d86 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010d5a:	7ebb      	ldrb	r3, [r7, #26]
 8010d5c:	f003 0310 	and.w	r3, r3, #16
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d003      	beq.n	8010d6c <f_open+0x1b8>
					res = FR_NO_FILE;
 8010d64:	2304      	movs	r3, #4
 8010d66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010d6a:	e00c      	b.n	8010d86 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d6c:	79fb      	ldrb	r3, [r7, #7]
 8010d6e:	f003 0302 	and.w	r3, r3, #2
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d007      	beq.n	8010d86 <f_open+0x1d2>
 8010d76:	7ebb      	ldrb	r3, [r7, #26]
 8010d78:	f003 0301 	and.w	r3, r3, #1
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <f_open+0x1d2>
						res = FR_DENIED;
 8010d80:	2307      	movs	r3, #7
 8010d82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d128      	bne.n	8010de0 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010d8e:	79fb      	ldrb	r3, [r7, #7]
 8010d90:	f003 0308 	and.w	r3, r3, #8
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8010d98:	79fb      	ldrb	r3, [r7, #7]
 8010d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d9e:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010da8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010dae:	79fb      	ldrb	r3, [r7, #7]
 8010db0:	f023 0301 	bic.w	r3, r3, #1
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	bf14      	ite	ne
 8010db8:	2301      	movne	r3, #1
 8010dba:	2300      	moveq	r3, #0
 8010dbc:	b2db      	uxtb	r3, r3
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	f107 0314 	add.w	r3, r7, #20
 8010dc4:	4611      	mov	r1, r2
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	f7fe fa06 	bl	800f1d8 <inc_lock>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	691b      	ldr	r3, [r3, #16]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d102      	bne.n	8010de0 <f_open+0x22c>
 8010dda:	2302      	movs	r3, #2
 8010ddc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010de0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	f040 80a3 	bne.w	8010f30 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010dee:	4611      	mov	r1, r2
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff f8a2 	bl	800ff3a <ld_clust>
 8010df6:	4602      	mov	r2, r0
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dfe:	331c      	adds	r3, #28
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7fe f883 	bl	800ef0c <ld_dword>
 8010e06:	4602      	mov	r2, r0
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010e12:	693a      	ldr	r2, [r7, #16]
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	88da      	ldrh	r2, [r3, #6]
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	79fa      	ldrb	r2, [r7, #7]
 8010e24:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2200      	movs	r2, #0
 8010e2a:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	3330      	adds	r3, #48	; 0x30
 8010e3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010e40:	2100      	movs	r1, #0
 8010e42:	4618      	mov	r0, r3
 8010e44:	f7fe f8ed 	bl	800f022 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010e48:	79fb      	ldrb	r3, [r7, #7]
 8010e4a:	f003 0320 	and.w	r3, r3, #32
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d06e      	beq.n	8010f30 <f_open+0x37c>
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d06a      	beq.n	8010f30 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	68da      	ldr	r2, [r3, #12]
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	895b      	ldrh	r3, [r3, #10]
 8010e66:	461a      	mov	r2, r3
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	899b      	ldrh	r3, [r3, #12]
 8010e6c:	fb03 f302 	mul.w	r3, r3, r2
 8010e70:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	689b      	ldr	r3, [r3, #8]
 8010e76:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	657b      	str	r3, [r7, #84]	; 0x54
 8010e7e:	e016      	b.n	8010eae <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe fb96 	bl	800f5b6 <get_fat>
 8010e8a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8010e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d802      	bhi.n	8010e98 <f_open+0x2e4>
 8010e92:	2302      	movs	r3, #2
 8010e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010e98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e9e:	d102      	bne.n	8010ea6 <f_open+0x2f2>
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010ea8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eaa:	1ad3      	subs	r3, r2, r3
 8010eac:	657b      	str	r3, [r7, #84]	; 0x54
 8010eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d103      	bne.n	8010ebe <f_open+0x30a>
 8010eb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010eb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d8e0      	bhi.n	8010e80 <f_open+0x2cc>
				}
				fp->clust = clst;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010ec2:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d131      	bne.n	8010f30 <f_open+0x37c>
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	899b      	ldrh	r3, [r3, #12]
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ed4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010ed8:	fb02 f201 	mul.w	r2, r2, r1
 8010edc:	1a9b      	subs	r3, r3, r2
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d026      	beq.n	8010f30 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fe fb46 	bl	800f578 <clust2sect>
 8010eec:	6478      	str	r0, [r7, #68]	; 0x44
 8010eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d103      	bne.n	8010efc <f_open+0x348>
						res = FR_INT_ERR;
 8010ef4:	2302      	movs	r3, #2
 8010ef6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010efa:	e019      	b.n	8010f30 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010efc:	693b      	ldr	r3, [r7, #16]
 8010efe:	899b      	ldrh	r3, [r3, #12]
 8010f00:	461a      	mov	r2, r3
 8010f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f04:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f0a:	441a      	add	r2, r3
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	7858      	ldrb	r0, [r3, #1]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6a1a      	ldr	r2, [r3, #32]
 8010f1e:	2301      	movs	r3, #1
 8010f20:	f7fd ff7e 	bl	800ee20 <disk_read>
 8010f24:	4603      	mov	r3, r0
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d002      	beq.n	8010f30 <f_open+0x37c>
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d002      	beq.n	8010f3e <f_open+0x38a>
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010f42:	4618      	mov	r0, r3
 8010f44:	3760      	adds	r7, #96	; 0x60
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	274a0000 	.word	0x274a0000

08010f50 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b08e      	sub	sp, #56	; 0x38
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	607a      	str	r2, [r7, #4]
 8010f5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	2200      	movs	r2, #0
 8010f66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f107 0214 	add.w	r2, r7, #20
 8010f6e:	4611      	mov	r1, r2
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7ff fda3 	bl	8010abc <validate>
 8010f76:	4603      	mov	r3, r0
 8010f78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010f7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d107      	bne.n	8010f94 <f_read+0x44>
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	7d5b      	ldrb	r3, [r3, #21]
 8010f88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f8c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <f_read+0x4a>
 8010f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f98:	e135      	b.n	8011206 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	7d1b      	ldrb	r3, [r3, #20]
 8010f9e:	f003 0301 	and.w	r3, r3, #1
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d101      	bne.n	8010faa <f_read+0x5a>
 8010fa6:	2307      	movs	r3, #7
 8010fa8:	e12d      	b.n	8011206 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	68da      	ldr	r2, [r3, #12]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	699b      	ldr	r3, [r3, #24]
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010fb6:	687a      	ldr	r2, [r7, #4]
 8010fb8:	6a3b      	ldr	r3, [r7, #32]
 8010fba:	429a      	cmp	r2, r3
 8010fbc:	f240 811e 	bls.w	80111fc <f_read+0x2ac>
 8010fc0:	6a3b      	ldr	r3, [r7, #32]
 8010fc2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010fc4:	e11a      	b.n	80111fc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	699b      	ldr	r3, [r3, #24]
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	8992      	ldrh	r2, [r2, #12]
 8010fce:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fd2:	fb02 f201 	mul.w	r2, r2, r1
 8010fd6:	1a9b      	subs	r3, r3, r2
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	f040 80d5 	bne.w	8011188 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	699b      	ldr	r3, [r3, #24]
 8010fe2:	697a      	ldr	r2, [r7, #20]
 8010fe4:	8992      	ldrh	r2, [r2, #12]
 8010fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	8952      	ldrh	r2, [r2, #10]
 8010fee:	3a01      	subs	r2, #1
 8010ff0:	4013      	ands	r3, r2
 8010ff2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010ff4:	69fb      	ldr	r3, [r7, #28]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d12f      	bne.n	801105a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	699b      	ldr	r3, [r3, #24]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d103      	bne.n	801100a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	689b      	ldr	r3, [r3, #8]
 8011006:	633b      	str	r3, [r7, #48]	; 0x30
 8011008:	e013      	b.n	8011032 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100e:	2b00      	cmp	r3, #0
 8011010:	d007      	beq.n	8011022 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	699b      	ldr	r3, [r3, #24]
 8011016:	4619      	mov	r1, r3
 8011018:	68f8      	ldr	r0, [r7, #12]
 801101a:	f7fe fdb0 	bl	800fb7e <clmt_clust>
 801101e:	6338      	str	r0, [r7, #48]	; 0x30
 8011020:	e007      	b.n	8011032 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011022:	68fa      	ldr	r2, [r7, #12]
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	69db      	ldr	r3, [r3, #28]
 8011028:	4619      	mov	r1, r3
 801102a:	4610      	mov	r0, r2
 801102c:	f7fe fac3 	bl	800f5b6 <get_fat>
 8011030:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011034:	2b01      	cmp	r3, #1
 8011036:	d804      	bhi.n	8011042 <f_read+0xf2>
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	2202      	movs	r2, #2
 801103c:	755a      	strb	r2, [r3, #21]
 801103e:	2302      	movs	r3, #2
 8011040:	e0e1      	b.n	8011206 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011048:	d104      	bne.n	8011054 <f_read+0x104>
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	2201      	movs	r2, #1
 801104e:	755a      	strb	r2, [r3, #21]
 8011050:	2301      	movs	r3, #1
 8011052:	e0d8      	b.n	8011206 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011058:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801105a:	697a      	ldr	r2, [r7, #20]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	69db      	ldr	r3, [r3, #28]
 8011060:	4619      	mov	r1, r3
 8011062:	4610      	mov	r0, r2
 8011064:	f7fe fa88 	bl	800f578 <clust2sect>
 8011068:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d104      	bne.n	801107a <f_read+0x12a>
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2202      	movs	r2, #2
 8011074:	755a      	strb	r2, [r3, #21]
 8011076:	2302      	movs	r3, #2
 8011078:	e0c5      	b.n	8011206 <f_read+0x2b6>
			sect += csect;
 801107a:	69ba      	ldr	r2, [r7, #24]
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	4413      	add	r3, r2
 8011080:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	899b      	ldrh	r3, [r3, #12]
 8011086:	461a      	mov	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	fbb3 f3f2 	udiv	r3, r3, r2
 801108e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011092:	2b00      	cmp	r3, #0
 8011094:	d041      	beq.n	801111a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011096:	69fa      	ldr	r2, [r7, #28]
 8011098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801109a:	4413      	add	r3, r2
 801109c:	697a      	ldr	r2, [r7, #20]
 801109e:	8952      	ldrh	r2, [r2, #10]
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d905      	bls.n	80110b0 <f_read+0x160>
					cc = fs->csize - csect;
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	895b      	ldrh	r3, [r3, #10]
 80110a8:	461a      	mov	r2, r3
 80110aa:	69fb      	ldr	r3, [r7, #28]
 80110ac:	1ad3      	subs	r3, r2, r3
 80110ae:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	7858      	ldrb	r0, [r3, #1]
 80110b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b6:	69ba      	ldr	r2, [r7, #24]
 80110b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110ba:	f7fd feb1 	bl	800ee20 <disk_read>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d004      	beq.n	80110ce <f_read+0x17e>
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	2201      	movs	r2, #1
 80110c8:	755a      	strb	r2, [r3, #21]
 80110ca:	2301      	movs	r3, #1
 80110cc:	e09b      	b.n	8011206 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	7d1b      	ldrb	r3, [r3, #20]
 80110d2:	b25b      	sxtb	r3, r3
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	da18      	bge.n	801110a <f_read+0x1ba>
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	6a1a      	ldr	r2, [r3, #32]
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	1ad3      	subs	r3, r2, r3
 80110e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110e2:	429a      	cmp	r2, r3
 80110e4:	d911      	bls.n	801110a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6a1a      	ldr	r2, [r3, #32]
 80110ea:	69bb      	ldr	r3, [r7, #24]
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	697a      	ldr	r2, [r7, #20]
 80110f0:	8992      	ldrh	r2, [r2, #12]
 80110f2:	fb02 f303 	mul.w	r3, r2, r3
 80110f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110f8:	18d0      	adds	r0, r2, r3
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	899b      	ldrh	r3, [r3, #12]
 8011104:	461a      	mov	r2, r3
 8011106:	f7fd ff6b 	bl	800efe0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	461a      	mov	r2, r3
 8011110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011112:	fb02 f303 	mul.w	r3, r2, r3
 8011116:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011118:	e05c      	b.n	80111d4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	6a1b      	ldr	r3, [r3, #32]
 801111e:	69ba      	ldr	r2, [r7, #24]
 8011120:	429a      	cmp	r2, r3
 8011122:	d02e      	beq.n	8011182 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	7d1b      	ldrb	r3, [r3, #20]
 8011128:	b25b      	sxtb	r3, r3
 801112a:	2b00      	cmp	r3, #0
 801112c:	da18      	bge.n	8011160 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	7858      	ldrb	r0, [r3, #1]
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	6a1a      	ldr	r2, [r3, #32]
 801113c:	2301      	movs	r3, #1
 801113e:	f7fd fe8f 	bl	800ee60 <disk_write>
 8011142:	4603      	mov	r3, r0
 8011144:	2b00      	cmp	r3, #0
 8011146:	d004      	beq.n	8011152 <f_read+0x202>
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2201      	movs	r2, #1
 801114c:	755a      	strb	r2, [r3, #21]
 801114e:	2301      	movs	r3, #1
 8011150:	e059      	b.n	8011206 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	7d1b      	ldrb	r3, [r3, #20]
 8011156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801115a:	b2da      	uxtb	r2, r3
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	7858      	ldrb	r0, [r3, #1]
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801116a:	2301      	movs	r3, #1
 801116c:	69ba      	ldr	r2, [r7, #24]
 801116e:	f7fd fe57 	bl	800ee20 <disk_read>
 8011172:	4603      	mov	r3, r0
 8011174:	2b00      	cmp	r3, #0
 8011176:	d004      	beq.n	8011182 <f_read+0x232>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2201      	movs	r2, #1
 801117c:	755a      	strb	r2, [r3, #21]
 801117e:	2301      	movs	r3, #1
 8011180:	e041      	b.n	8011206 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	69ba      	ldr	r2, [r7, #24]
 8011186:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	899b      	ldrh	r3, [r3, #12]
 801118c:	4618      	mov	r0, r3
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	699b      	ldr	r3, [r3, #24]
 8011192:	697a      	ldr	r2, [r7, #20]
 8011194:	8992      	ldrh	r2, [r2, #12]
 8011196:	fbb3 f1f2 	udiv	r1, r3, r2
 801119a:	fb02 f201 	mul.w	r2, r2, r1
 801119e:	1a9b      	subs	r3, r3, r2
 80111a0:	1ac3      	subs	r3, r0, r3
 80111a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80111a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d901      	bls.n	80111b0 <f_read+0x260>
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	699b      	ldr	r3, [r3, #24]
 80111ba:	697a      	ldr	r2, [r7, #20]
 80111bc:	8992      	ldrh	r2, [r2, #12]
 80111be:	fbb3 f0f2 	udiv	r0, r3, r2
 80111c2:	fb02 f200 	mul.w	r2, r2, r0
 80111c6:	1a9b      	subs	r3, r3, r2
 80111c8:	440b      	add	r3, r1
 80111ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111cc:	4619      	mov	r1, r3
 80111ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111d0:	f7fd ff06 	bl	800efe0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80111d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111d8:	4413      	add	r3, r2
 80111da:	627b      	str	r3, [r7, #36]	; 0x24
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	699a      	ldr	r2, [r3, #24]
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	441a      	add	r2, r3
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	619a      	str	r2, [r3, #24]
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	681a      	ldr	r2, [r3, #0]
 80111ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ee:	441a      	add	r2, r3
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	601a      	str	r2, [r3, #0]
 80111f4:	687a      	ldr	r2, [r7, #4]
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	f47f aee1 	bne.w	8010fc6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011204:	2300      	movs	r3, #0
}
 8011206:	4618      	mov	r0, r3
 8011208:	3738      	adds	r7, #56	; 0x38
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b08c      	sub	sp, #48	; 0x30
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	60b9      	str	r1, [r7, #8]
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	2200      	movs	r2, #0
 8011224:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f107 0210 	add.w	r2, r7, #16
 801122c:	4611      	mov	r1, r2
 801122e:	4618      	mov	r0, r3
 8011230:	f7ff fc44 	bl	8010abc <validate>
 8011234:	4603      	mov	r3, r0
 8011236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801123a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801123e:	2b00      	cmp	r3, #0
 8011240:	d107      	bne.n	8011252 <f_write+0x44>
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	7d5b      	ldrb	r3, [r3, #21]
 8011246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801124a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801124e:	2b00      	cmp	r3, #0
 8011250:	d002      	beq.n	8011258 <f_write+0x4a>
 8011252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011256:	e16a      	b.n	801152e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	7d1b      	ldrb	r3, [r3, #20]
 801125c:	f003 0302 	and.w	r3, r3, #2
 8011260:	2b00      	cmp	r3, #0
 8011262:	d101      	bne.n	8011268 <f_write+0x5a>
 8011264:	2307      	movs	r3, #7
 8011266:	e162      	b.n	801152e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	699a      	ldr	r2, [r3, #24]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	441a      	add	r2, r3
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	699b      	ldr	r3, [r3, #24]
 8011274:	429a      	cmp	r2, r3
 8011276:	f080 814c 	bcs.w	8011512 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	699b      	ldr	r3, [r3, #24]
 801127e:	43db      	mvns	r3, r3
 8011280:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011282:	e146      	b.n	8011512 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	8992      	ldrh	r2, [r2, #12]
 801128c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011290:	fb02 f201 	mul.w	r2, r2, r1
 8011294:	1a9b      	subs	r3, r3, r2
 8011296:	2b00      	cmp	r3, #0
 8011298:	f040 80f1 	bne.w	801147e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	699b      	ldr	r3, [r3, #24]
 80112a0:	693a      	ldr	r2, [r7, #16]
 80112a2:	8992      	ldrh	r2, [r2, #12]
 80112a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80112a8:	693a      	ldr	r2, [r7, #16]
 80112aa:	8952      	ldrh	r2, [r2, #10]
 80112ac:	3a01      	subs	r2, #1
 80112ae:	4013      	ands	r3, r2
 80112b0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80112b2:	69bb      	ldr	r3, [r7, #24]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d143      	bne.n	8011340 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	699b      	ldr	r3, [r3, #24]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10c      	bne.n	80112da <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80112c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d11a      	bne.n	8011302 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	2100      	movs	r1, #0
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fe fbbc 	bl	800fa4e <create_chain>
 80112d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80112d8:	e013      	b.n	8011302 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d007      	beq.n	80112f2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	699b      	ldr	r3, [r3, #24]
 80112e6:	4619      	mov	r1, r3
 80112e8:	68f8      	ldr	r0, [r7, #12]
 80112ea:	f7fe fc48 	bl	800fb7e <clmt_clust>
 80112ee:	62b8      	str	r0, [r7, #40]	; 0x28
 80112f0:	e007      	b.n	8011302 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80112f2:	68fa      	ldr	r2, [r7, #12]
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	69db      	ldr	r3, [r3, #28]
 80112f8:	4619      	mov	r1, r3
 80112fa:	4610      	mov	r0, r2
 80112fc:	f7fe fba7 	bl	800fa4e <create_chain>
 8011300:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 8109 	beq.w	801151c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801130c:	2b01      	cmp	r3, #1
 801130e:	d104      	bne.n	801131a <f_write+0x10c>
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2202      	movs	r2, #2
 8011314:	755a      	strb	r2, [r3, #21]
 8011316:	2302      	movs	r3, #2
 8011318:	e109      	b.n	801152e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801131a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801131c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011320:	d104      	bne.n	801132c <f_write+0x11e>
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	2201      	movs	r2, #1
 8011326:	755a      	strb	r2, [r3, #21]
 8011328:	2301      	movs	r3, #1
 801132a:	e100      	b.n	801152e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011330:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	689b      	ldr	r3, [r3, #8]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d102      	bne.n	8011340 <f_write+0x132>
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801133e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	7d1b      	ldrb	r3, [r3, #20]
 8011344:	b25b      	sxtb	r3, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	da18      	bge.n	801137c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	7858      	ldrb	r0, [r3, #1]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	6a1a      	ldr	r2, [r3, #32]
 8011358:	2301      	movs	r3, #1
 801135a:	f7fd fd81 	bl	800ee60 <disk_write>
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d004      	beq.n	801136e <f_write+0x160>
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	2201      	movs	r2, #1
 8011368:	755a      	strb	r2, [r3, #21]
 801136a:	2301      	movs	r3, #1
 801136c:	e0df      	b.n	801152e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	7d1b      	ldrb	r3, [r3, #20]
 8011372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011376:	b2da      	uxtb	r2, r3
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	69db      	ldr	r3, [r3, #28]
 8011382:	4619      	mov	r1, r3
 8011384:	4610      	mov	r0, r2
 8011386:	f7fe f8f7 	bl	800f578 <clust2sect>
 801138a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801138c:	697b      	ldr	r3, [r7, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d104      	bne.n	801139c <f_write+0x18e>
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	2202      	movs	r2, #2
 8011396:	755a      	strb	r2, [r3, #21]
 8011398:	2302      	movs	r3, #2
 801139a:	e0c8      	b.n	801152e <f_write+0x320>
			sect += csect;
 801139c:	697a      	ldr	r2, [r7, #20]
 801139e:	69bb      	ldr	r3, [r7, #24]
 80113a0:	4413      	add	r3, r2
 80113a2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	899b      	ldrh	r3, [r3, #12]
 80113a8:	461a      	mov	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80113b0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80113b2:	6a3b      	ldr	r3, [r7, #32]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d043      	beq.n	8011440 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80113b8:	69ba      	ldr	r2, [r7, #24]
 80113ba:	6a3b      	ldr	r3, [r7, #32]
 80113bc:	4413      	add	r3, r2
 80113be:	693a      	ldr	r2, [r7, #16]
 80113c0:	8952      	ldrh	r2, [r2, #10]
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d905      	bls.n	80113d2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	895b      	ldrh	r3, [r3, #10]
 80113ca:	461a      	mov	r2, r3
 80113cc:	69bb      	ldr	r3, [r7, #24]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80113d2:	693b      	ldr	r3, [r7, #16]
 80113d4:	7858      	ldrb	r0, [r3, #1]
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	697a      	ldr	r2, [r7, #20]
 80113da:	69f9      	ldr	r1, [r7, #28]
 80113dc:	f7fd fd40 	bl	800ee60 <disk_write>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d004      	beq.n	80113f0 <f_write+0x1e2>
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	2201      	movs	r2, #1
 80113ea:	755a      	strb	r2, [r3, #21]
 80113ec:	2301      	movs	r3, #1
 80113ee:	e09e      	b.n	801152e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	6a1a      	ldr	r2, [r3, #32]
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	1ad3      	subs	r3, r2, r3
 80113f8:	6a3a      	ldr	r2, [r7, #32]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d918      	bls.n	8011430 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6a1a      	ldr	r2, [r3, #32]
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	1ad3      	subs	r3, r2, r3
 801140c:	693a      	ldr	r2, [r7, #16]
 801140e:	8992      	ldrh	r2, [r2, #12]
 8011410:	fb02 f303 	mul.w	r3, r2, r3
 8011414:	69fa      	ldr	r2, [r7, #28]
 8011416:	18d1      	adds	r1, r2, r3
 8011418:	693b      	ldr	r3, [r7, #16]
 801141a:	899b      	ldrh	r3, [r3, #12]
 801141c:	461a      	mov	r2, r3
 801141e:	f7fd fddf 	bl	800efe0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	7d1b      	ldrb	r3, [r3, #20]
 8011426:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801142a:	b2da      	uxtb	r2, r3
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	899b      	ldrh	r3, [r3, #12]
 8011434:	461a      	mov	r2, r3
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	fb02 f303 	mul.w	r3, r2, r3
 801143c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801143e:	e04b      	b.n	80114d8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	6a1b      	ldr	r3, [r3, #32]
 8011444:	697a      	ldr	r2, [r7, #20]
 8011446:	429a      	cmp	r2, r3
 8011448:	d016      	beq.n	8011478 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	699a      	ldr	r2, [r3, #24]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011452:	429a      	cmp	r2, r3
 8011454:	d210      	bcs.n	8011478 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011456:	693b      	ldr	r3, [r7, #16]
 8011458:	7858      	ldrb	r0, [r3, #1]
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011460:	2301      	movs	r3, #1
 8011462:	697a      	ldr	r2, [r7, #20]
 8011464:	f7fd fcdc 	bl	800ee20 <disk_read>
 8011468:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801146a:	2b00      	cmp	r3, #0
 801146c:	d004      	beq.n	8011478 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2201      	movs	r2, #1
 8011472:	755a      	strb	r2, [r3, #21]
 8011474:	2301      	movs	r3, #1
 8011476:	e05a      	b.n	801152e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	697a      	ldr	r2, [r7, #20]
 801147c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801147e:	693b      	ldr	r3, [r7, #16]
 8011480:	899b      	ldrh	r3, [r3, #12]
 8011482:	4618      	mov	r0, r3
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	699b      	ldr	r3, [r3, #24]
 8011488:	693a      	ldr	r2, [r7, #16]
 801148a:	8992      	ldrh	r2, [r2, #12]
 801148c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011490:	fb02 f201 	mul.w	r2, r2, r1
 8011494:	1a9b      	subs	r3, r3, r2
 8011496:	1ac3      	subs	r3, r0, r3
 8011498:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	429a      	cmp	r2, r3
 80114a0:	d901      	bls.n	80114a6 <f_write+0x298>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	699b      	ldr	r3, [r3, #24]
 80114b0:	693a      	ldr	r2, [r7, #16]
 80114b2:	8992      	ldrh	r2, [r2, #12]
 80114b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80114b8:	fb02 f200 	mul.w	r2, r2, r0
 80114bc:	1a9b      	subs	r3, r3, r2
 80114be:	440b      	add	r3, r1
 80114c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114c2:	69f9      	ldr	r1, [r7, #28]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7fd fd8b 	bl	800efe0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	7d1b      	ldrb	r3, [r3, #20]
 80114ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80114d2:	b2da      	uxtb	r2, r3
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80114d8:	69fa      	ldr	r2, [r7, #28]
 80114da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114dc:	4413      	add	r3, r2
 80114de:	61fb      	str	r3, [r7, #28]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	699a      	ldr	r2, [r3, #24]
 80114e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e6:	441a      	add	r2, r3
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	619a      	str	r2, [r3, #24]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	68da      	ldr	r2, [r3, #12]
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	699b      	ldr	r3, [r3, #24]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	bf38      	it	cc
 80114f8:	461a      	movcc	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	60da      	str	r2, [r3, #12]
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	681a      	ldr	r2, [r3, #0]
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	441a      	add	r2, r3
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	687a      	ldr	r2, [r7, #4]
 801150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801150e:	1ad3      	subs	r3, r2, r3
 8011510:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f47f aeb5 	bne.w	8011284 <f_write+0x76>
 801151a:	e000      	b.n	801151e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801151c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	7d1b      	ldrb	r3, [r3, #20]
 8011522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011526:	b2da      	uxtb	r2, r3
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801152c:	2300      	movs	r3, #0
}
 801152e:	4618      	mov	r0, r3
 8011530:	3730      	adds	r7, #48	; 0x30
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}
	...

08011538 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f107 0208 	add.w	r2, r7, #8
 8011546:	4611      	mov	r1, r2
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff fab7 	bl	8010abc <validate>
 801154e:	4603      	mov	r3, r0
 8011550:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d167      	bne.n	8011628 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7d1b      	ldrb	r3, [r3, #20]
 801155c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011560:	2b00      	cmp	r3, #0
 8011562:	d061      	beq.n	8011628 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	7d1b      	ldrb	r3, [r3, #20]
 8011568:	b25b      	sxtb	r3, r3
 801156a:	2b00      	cmp	r3, #0
 801156c:	da15      	bge.n	801159a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801156e:	68bb      	ldr	r3, [r7, #8]
 8011570:	7858      	ldrb	r0, [r3, #1]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6a1a      	ldr	r2, [r3, #32]
 801157c:	2301      	movs	r3, #1
 801157e:	f7fd fc6f 	bl	800ee60 <disk_write>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <f_sync+0x54>
 8011588:	2301      	movs	r3, #1
 801158a:	e04e      	b.n	801162a <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	7d1b      	ldrb	r3, [r3, #20]
 8011590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011594:	b2da      	uxtb	r2, r3
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801159a:	4b26      	ldr	r3, [pc, #152]	; (8011634 <f_sync+0xfc>)
 801159c:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a4:	4619      	mov	r1, r3
 80115a6:	4610      	mov	r0, r2
 80115a8:	f7fd ff48 	bl	800f43c <move_window>
 80115ac:	4603      	mov	r3, r0
 80115ae:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80115b0:	7dfb      	ldrb	r3, [r7, #23]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d138      	bne.n	8011628 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ba:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	330b      	adds	r3, #11
 80115c0:	781a      	ldrb	r2, [r3, #0]
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	330b      	adds	r3, #11
 80115c6:	f042 0220 	orr.w	r2, r2, #32
 80115ca:	b2d2      	uxtb	r2, r2
 80115cc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6818      	ldr	r0, [r3, #0]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	689b      	ldr	r3, [r3, #8]
 80115d6:	461a      	mov	r2, r3
 80115d8:	68f9      	ldr	r1, [r7, #12]
 80115da:	f7fe fccd 	bl	800ff78 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f103 021c 	add.w	r2, r3, #28
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	4619      	mov	r1, r3
 80115ea:	4610      	mov	r0, r2
 80115ec:	f7fd fccc 	bl	800ef88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	3316      	adds	r3, #22
 80115f4:	6939      	ldr	r1, [r7, #16]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fd fcc6 	bl	800ef88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	3312      	adds	r3, #18
 8011600:	2100      	movs	r1, #0
 8011602:	4618      	mov	r0, r3
 8011604:	f7fd fca5 	bl	800ef52 <st_word>
					fs->wflag = 1;
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2201      	movs	r2, #1
 801160c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	4618      	mov	r0, r3
 8011612:	f7fd ff41 	bl	800f498 <sync_fs>
 8011616:	4603      	mov	r3, r0
 8011618:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	7d1b      	ldrb	r3, [r3, #20]
 801161e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011622:	b2da      	uxtb	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011628:	7dfb      	ldrb	r3, [r7, #23]
}
 801162a:	4618      	mov	r0, r3
 801162c:	3718      	adds	r7, #24
 801162e:	46bd      	mov	sp, r7
 8011630:	bd80      	pop	{r7, pc}
 8011632:	bf00      	nop
 8011634:	274a0000 	.word	0x274a0000

08011638 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011638:	b580      	push	{r7, lr}
 801163a:	b084      	sub	sp, #16
 801163c:	af00      	add	r7, sp, #0
 801163e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f7ff ff79 	bl	8011538 <f_sync>
 8011646:	4603      	mov	r3, r0
 8011648:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801164a:	7bfb      	ldrb	r3, [r7, #15]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d118      	bne.n	8011682 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f107 0208 	add.w	r2, r7, #8
 8011656:	4611      	mov	r1, r2
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fa2f 	bl	8010abc <validate>
 801165e:	4603      	mov	r3, r0
 8011660:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011662:	7bfb      	ldrb	r3, [r7, #15]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10c      	bne.n	8011682 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	691b      	ldr	r3, [r3, #16]
 801166c:	4618      	mov	r0, r3
 801166e:	f7fd fe41 	bl	800f2f4 <dec_lock>
 8011672:	4603      	mov	r3, r0
 8011674:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011676:	7bfb      	ldrb	r3, [r7, #15]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d102      	bne.n	8011682 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2200      	movs	r2, #0
 8011680:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8011682:	7bfb      	ldrb	r3, [r7, #15]
}
 8011684:	4618      	mov	r0, r3
 8011686:	3710      	adds	r7, #16
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801168c:	b590      	push	{r4, r7, lr}
 801168e:	b091      	sub	sp, #68	; 0x44
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8011694:	f107 0108 	add.w	r1, r7, #8
 8011698:	1d3b      	adds	r3, r7, #4
 801169a:	2200      	movs	r2, #0
 801169c:	4618      	mov	r0, r3
 801169e:	f7fe ff87 	bl	80105b0 <find_volume>
 80116a2:	4603      	mov	r3, r0
 80116a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80116a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d131      	bne.n	8011714 <f_chdir+0x88>
		dj.obj.fs = fs;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80116b4:	687a      	ldr	r2, [r7, #4]
 80116b6:	f107 030c 	add.w	r3, r7, #12
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f7fe fe47 	bl	8010350 <follow_path>
 80116c2:	4603      	mov	r3, r0
 80116c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80116c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d11a      	bne.n	8011706 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80116d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80116d4:	b25b      	sxtb	r3, r3
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	da03      	bge.n	80116e2 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	697a      	ldr	r2, [r7, #20]
 80116de:	619a      	str	r2, [r3, #24]
 80116e0:	e011      	b.n	8011706 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80116e2:	7cbb      	ldrb	r3, [r7, #18]
 80116e4:	f003 0310 	and.w	r3, r3, #16
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d009      	beq.n	8011700 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80116ec:	68bb      	ldr	r3, [r7, #8]
 80116ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116f0:	68bc      	ldr	r4, [r7, #8]
 80116f2:	4611      	mov	r1, r2
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7fe fc20 	bl	800ff3a <ld_clust>
 80116fa:	4603      	mov	r3, r0
 80116fc:	61a3      	str	r3, [r4, #24]
 80116fe:	e002      	b.n	8011706 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8011700:	2305      	movs	r3, #5
 8011702:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011706:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801170a:	2b04      	cmp	r3, #4
 801170c:	d102      	bne.n	8011714 <f_chdir+0x88>
 801170e:	2305      	movs	r3, #5
 8011710:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8011714:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011718:	4618      	mov	r0, r3
 801171a:	3744      	adds	r7, #68	; 0x44
 801171c:	46bd      	mov	sp, r7
 801171e:	bd90      	pop	{r4, r7, pc}

08011720 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b090      	sub	sp, #64	; 0x40
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
 8011728:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f107 0208 	add.w	r2, r7, #8
 8011730:	4611      	mov	r1, r2
 8011732:	4618      	mov	r0, r3
 8011734:	f7ff f9c2 	bl	8010abc <validate>
 8011738:	4603      	mov	r3, r0
 801173a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801173e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011742:	2b00      	cmp	r3, #0
 8011744:	d103      	bne.n	801174e <f_lseek+0x2e>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	7d5b      	ldrb	r3, [r3, #21]
 801174a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801174e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <f_lseek+0x3c>
 8011756:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801175a:	e201      	b.n	8011b60 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011760:	2b00      	cmp	r3, #0
 8011762:	f000 80d9 	beq.w	8011918 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801176c:	d15a      	bne.n	8011824 <f_lseek+0x104>
			tbl = fp->cltbl;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011772:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	1d1a      	adds	r2, r3, #4
 8011778:	627a      	str	r2, [r7, #36]	; 0x24
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	617b      	str	r3, [r7, #20]
 801177e:	2302      	movs	r3, #2
 8011780:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	689b      	ldr	r3, [r3, #8]
 8011786:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8011788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178a:	2b00      	cmp	r3, #0
 801178c:	d03a      	beq.n	8011804 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801178e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011790:	613b      	str	r3, [r7, #16]
 8011792:	2300      	movs	r3, #0
 8011794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011798:	3302      	adds	r3, #2
 801179a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179e:	60fb      	str	r3, [r7, #12]
 80117a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a2:	3301      	adds	r3, #1
 80117a4:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80117aa:	4618      	mov	r0, r3
 80117ac:	f7fd ff03 	bl	800f5b6 <get_fat>
 80117b0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80117b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b4:	2b01      	cmp	r3, #1
 80117b6:	d804      	bhi.n	80117c2 <f_lseek+0xa2>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2202      	movs	r2, #2
 80117bc:	755a      	strb	r2, [r3, #21]
 80117be:	2302      	movs	r3, #2
 80117c0:	e1ce      	b.n	8011b60 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117c8:	d104      	bne.n	80117d4 <f_lseek+0xb4>
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	2201      	movs	r2, #1
 80117ce:	755a      	strb	r2, [r3, #21]
 80117d0:	2301      	movs	r3, #1
 80117d2:	e1c5      	b.n	8011b60 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	3301      	adds	r3, #1
 80117d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117da:	429a      	cmp	r2, r3
 80117dc:	d0de      	beq.n	801179c <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80117de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e0:	697b      	ldr	r3, [r7, #20]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	d809      	bhi.n	80117fa <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80117e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e8:	1d1a      	adds	r2, r3, #4
 80117ea:	627a      	str	r2, [r7, #36]	; 0x24
 80117ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	1d1a      	adds	r2, r3, #4
 80117f4:	627a      	str	r2, [r7, #36]	; 0x24
 80117f6:	693a      	ldr	r2, [r7, #16]
 80117f8:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	69db      	ldr	r3, [r3, #28]
 80117fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011800:	429a      	cmp	r2, r3
 8011802:	d3c4      	bcc.n	801178e <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801180a:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801180c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	429a      	cmp	r2, r3
 8011812:	d803      	bhi.n	801181c <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8011814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011816:	2200      	movs	r2, #0
 8011818:	601a      	str	r2, [r3, #0]
 801181a:	e19f      	b.n	8011b5c <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801181c:	2311      	movs	r3, #17
 801181e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011822:	e19b      	b.n	8011b5c <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68db      	ldr	r3, [r3, #12]
 8011828:	683a      	ldr	r2, [r7, #0]
 801182a:	429a      	cmp	r2, r3
 801182c:	d902      	bls.n	8011834 <f_lseek+0x114>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	683a      	ldr	r2, [r7, #0]
 8011838:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	f000 818d 	beq.w	8011b5c <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	3b01      	subs	r3, #1
 8011846:	4619      	mov	r1, r3
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7fe f998 	bl	800fb7e <clmt_clust>
 801184e:	4602      	mov	r2, r0
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011854:	68ba      	ldr	r2, [r7, #8]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	69db      	ldr	r3, [r3, #28]
 801185a:	4619      	mov	r1, r3
 801185c:	4610      	mov	r0, r2
 801185e:	f7fd fe8b 	bl	800f578 <clust2sect>
 8011862:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d104      	bne.n	8011874 <f_lseek+0x154>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	2202      	movs	r2, #2
 801186e:	755a      	strb	r2, [r3, #21]
 8011870:	2302      	movs	r3, #2
 8011872:	e175      	b.n	8011b60 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	3b01      	subs	r3, #1
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	8992      	ldrh	r2, [r2, #12]
 801187c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011880:	68ba      	ldr	r2, [r7, #8]
 8011882:	8952      	ldrh	r2, [r2, #10]
 8011884:	3a01      	subs	r2, #1
 8011886:	4013      	ands	r3, r2
 8011888:	69ba      	ldr	r2, [r7, #24]
 801188a:	4413      	add	r3, r2
 801188c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	699b      	ldr	r3, [r3, #24]
 8011892:	68ba      	ldr	r2, [r7, #8]
 8011894:	8992      	ldrh	r2, [r2, #12]
 8011896:	fbb3 f1f2 	udiv	r1, r3, r2
 801189a:	fb02 f201 	mul.w	r2, r2, r1
 801189e:	1a9b      	subs	r3, r3, r2
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	f000 815b 	beq.w	8011b5c <f_lseek+0x43c>
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6a1b      	ldr	r3, [r3, #32]
 80118aa:	69ba      	ldr	r2, [r7, #24]
 80118ac:	429a      	cmp	r2, r3
 80118ae:	f000 8155 	beq.w	8011b5c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7d1b      	ldrb	r3, [r3, #20]
 80118b6:	b25b      	sxtb	r3, r3
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	da18      	bge.n	80118ee <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	7858      	ldrb	r0, [r3, #1]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a1a      	ldr	r2, [r3, #32]
 80118ca:	2301      	movs	r3, #1
 80118cc:	f7fd fac8 	bl	800ee60 <disk_write>
 80118d0:	4603      	mov	r3, r0
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d004      	beq.n	80118e0 <f_lseek+0x1c0>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2201      	movs	r2, #1
 80118da:	755a      	strb	r2, [r3, #21]
 80118dc:	2301      	movs	r3, #1
 80118de:	e13f      	b.n	8011b60 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	7d1b      	ldrb	r3, [r3, #20]
 80118e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80118ee:	68bb      	ldr	r3, [r7, #8]
 80118f0:	7858      	ldrb	r0, [r3, #1]
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80118f8:	2301      	movs	r3, #1
 80118fa:	69ba      	ldr	r2, [r7, #24]
 80118fc:	f7fd fa90 	bl	800ee20 <disk_read>
 8011900:	4603      	mov	r3, r0
 8011902:	2b00      	cmp	r3, #0
 8011904:	d004      	beq.n	8011910 <f_lseek+0x1f0>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	2201      	movs	r2, #1
 801190a:	755a      	strb	r2, [r3, #21]
 801190c:	2301      	movs	r3, #1
 801190e:	e127      	b.n	8011b60 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	69ba      	ldr	r2, [r7, #24]
 8011914:	621a      	str	r2, [r3, #32]
 8011916:	e121      	b.n	8011b5c <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	683a      	ldr	r2, [r7, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d908      	bls.n	8011934 <f_lseek+0x214>
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	7d1b      	ldrb	r3, [r3, #20]
 8011926:	f003 0302 	and.w	r3, r3, #2
 801192a:	2b00      	cmp	r3, #0
 801192c:	d102      	bne.n	8011934 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	68db      	ldr	r3, [r3, #12]
 8011932:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	699b      	ldr	r3, [r3, #24]
 8011938:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801193a:	2300      	movs	r3, #0
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011942:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011944:	683b      	ldr	r3, [r7, #0]
 8011946:	2b00      	cmp	r3, #0
 8011948:	f000 80b5 	beq.w	8011ab6 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	895b      	ldrh	r3, [r3, #10]
 8011950:	461a      	mov	r2, r3
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	899b      	ldrh	r3, [r3, #12]
 8011956:	fb03 f302 	mul.w	r3, r3, r2
 801195a:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801195c:	6a3b      	ldr	r3, [r7, #32]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d01b      	beq.n	801199a <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011962:	683b      	ldr	r3, [r7, #0]
 8011964:	1e5a      	subs	r2, r3, #1
 8011966:	69fb      	ldr	r3, [r7, #28]
 8011968:	fbb2 f2f3 	udiv	r2, r2, r3
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	1e59      	subs	r1, r3, #1
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011976:	429a      	cmp	r2, r3
 8011978:	d30f      	bcc.n	801199a <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801197a:	6a3b      	ldr	r3, [r7, #32]
 801197c:	1e5a      	subs	r2, r3, #1
 801197e:	69fb      	ldr	r3, [r7, #28]
 8011980:	425b      	negs	r3, r3
 8011982:	401a      	ands	r2, r3
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	699b      	ldr	r3, [r3, #24]
 801198c:	683a      	ldr	r2, [r7, #0]
 801198e:	1ad3      	subs	r3, r2, r3
 8011990:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	69db      	ldr	r3, [r3, #28]
 8011996:	63bb      	str	r3, [r7, #56]	; 0x38
 8011998:	e022      	b.n	80119e0 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	689b      	ldr	r3, [r3, #8]
 801199e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80119a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d119      	bne.n	80119da <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	2100      	movs	r1, #0
 80119aa:	4618      	mov	r0, r3
 80119ac:	f7fe f84f 	bl	800fa4e <create_chain>
 80119b0:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80119b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119b4:	2b01      	cmp	r3, #1
 80119b6:	d104      	bne.n	80119c2 <f_lseek+0x2a2>
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2202      	movs	r2, #2
 80119bc:	755a      	strb	r2, [r3, #21]
 80119be:	2302      	movs	r3, #2
 80119c0:	e0ce      	b.n	8011b60 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80119c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119c8:	d104      	bne.n	80119d4 <f_lseek+0x2b4>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	2201      	movs	r2, #1
 80119ce:	755a      	strb	r2, [r3, #21]
 80119d0:	2301      	movs	r3, #1
 80119d2:	e0c5      	b.n	8011b60 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119d8:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119de:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80119e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d067      	beq.n	8011ab6 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80119e6:	e03a      	b.n	8011a5e <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	1ad3      	subs	r3, r2, r3
 80119ee:	603b      	str	r3, [r7, #0]
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	699a      	ldr	r2, [r3, #24]
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	441a      	add	r2, r3
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	7d1b      	ldrb	r3, [r3, #20]
 8011a00:	f003 0302 	and.w	r3, r3, #2
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d00b      	beq.n	8011a20 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe f81e 	bl	800fa4e <create_chain>
 8011a12:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8011a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d108      	bne.n	8011a2c <f_lseek+0x30c>
							ofs = 0; break;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	603b      	str	r3, [r7, #0]
 8011a1e:	e022      	b.n	8011a66 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a24:	4618      	mov	r0, r3
 8011a26:	f7fd fdc6 	bl	800f5b6 <get_fat>
 8011a2a:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a32:	d104      	bne.n	8011a3e <f_lseek+0x31e>
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	2201      	movs	r2, #1
 8011a38:	755a      	strb	r2, [r3, #21]
 8011a3a:	2301      	movs	r3, #1
 8011a3c:	e090      	b.n	8011b60 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a40:	2b01      	cmp	r3, #1
 8011a42:	d904      	bls.n	8011a4e <f_lseek+0x32e>
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	69db      	ldr	r3, [r3, #28]
 8011a48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d304      	bcc.n	8011a58 <f_lseek+0x338>
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	2202      	movs	r2, #2
 8011a52:	755a      	strb	r2, [r3, #21]
 8011a54:	2302      	movs	r3, #2
 8011a56:	e083      	b.n	8011b60 <f_lseek+0x440>
					fp->clust = clst;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a5c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011a5e:	683a      	ldr	r2, [r7, #0]
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d8c0      	bhi.n	80119e8 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	699a      	ldr	r2, [r3, #24]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	441a      	add	r2, r3
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011a72:	68bb      	ldr	r3, [r7, #8]
 8011a74:	899b      	ldrh	r3, [r3, #12]
 8011a76:	461a      	mov	r2, r3
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a7e:	fb02 f201 	mul.w	r2, r2, r1
 8011a82:	1a9b      	subs	r3, r3, r2
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d016      	beq.n	8011ab6 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f7fd fd73 	bl	800f578 <clust2sect>
 8011a92:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d104      	bne.n	8011aa4 <f_lseek+0x384>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	2202      	movs	r2, #2
 8011a9e:	755a      	strb	r2, [r3, #21]
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	e05d      	b.n	8011b60 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011aa4:	68bb      	ldr	r3, [r7, #8]
 8011aa6:	899b      	ldrh	r3, [r3, #12]
 8011aa8:	461a      	mov	r2, r3
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ab2:	4413      	add	r3, r2
 8011ab4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	699a      	ldr	r2, [r3, #24]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d90a      	bls.n	8011ad8 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	699a      	ldr	r2, [r3, #24]
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	7d1b      	ldrb	r3, [r3, #20]
 8011ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ad2:	b2da      	uxtb	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	699b      	ldr	r3, [r3, #24]
 8011adc:	68ba      	ldr	r2, [r7, #8]
 8011ade:	8992      	ldrh	r2, [r2, #12]
 8011ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ae4:	fb02 f201 	mul.w	r2, r2, r1
 8011ae8:	1a9b      	subs	r3, r3, r2
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d036      	beq.n	8011b5c <f_lseek+0x43c>
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a1b      	ldr	r3, [r3, #32]
 8011af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d031      	beq.n	8011b5c <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	7d1b      	ldrb	r3, [r3, #20]
 8011afc:	b25b      	sxtb	r3, r3
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	da18      	bge.n	8011b34 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	7858      	ldrb	r0, [r3, #1]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	6a1a      	ldr	r2, [r3, #32]
 8011b10:	2301      	movs	r3, #1
 8011b12:	f7fd f9a5 	bl	800ee60 <disk_write>
 8011b16:	4603      	mov	r3, r0
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d004      	beq.n	8011b26 <f_lseek+0x406>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2201      	movs	r2, #1
 8011b20:	755a      	strb	r2, [r3, #21]
 8011b22:	2301      	movs	r3, #1
 8011b24:	e01c      	b.n	8011b60 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	7d1b      	ldrb	r3, [r3, #20]
 8011b2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	7858      	ldrb	r0, [r3, #1]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011b3e:	2301      	movs	r3, #1
 8011b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b42:	f7fd f96d 	bl	800ee20 <disk_read>
 8011b46:	4603      	mov	r3, r0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d004      	beq.n	8011b56 <f_lseek+0x436>
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2201      	movs	r2, #1
 8011b50:	755a      	strb	r2, [r3, #21]
 8011b52:	2301      	movs	r3, #1
 8011b54:	e004      	b.n	8011b60 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b5a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011b5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3740      	adds	r7, #64	; 0x40
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b09e      	sub	sp, #120	; 0x78
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011b70:	2300      	movs	r3, #0
 8011b72:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011b74:	f107 010c 	add.w	r1, r7, #12
 8011b78:	1d3b      	adds	r3, r7, #4
 8011b7a:	2202      	movs	r2, #2
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fe fd17 	bl	80105b0 <find_volume>
 8011b82:	4603      	mov	r3, r0
 8011b84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8011b8c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	f040 80a4 	bne.w	8011cde <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011b9c:	4611      	mov	r1, r2
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7fe fbd6 	bl	8010350 <follow_path>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011baa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d108      	bne.n	8011bc4 <f_unlink+0x5c>
 8011bb2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011bb6:	f003 0320 	and.w	r3, r3, #32
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d002      	beq.n	8011bc4 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011bbe:	2306      	movs	r3, #6
 8011bc0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011bc4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d108      	bne.n	8011bde <f_unlink+0x76>
 8011bcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011bd0:	2102      	movs	r1, #2
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f7fd fa82 	bl	800f0dc <chk_lock>
 8011bd8:	4603      	mov	r3, r0
 8011bda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011bde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d17b      	bne.n	8011cde <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8011be6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011bea:	b25b      	sxtb	r3, r3
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	da03      	bge.n	8011bf8 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011bf0:	2306      	movs	r3, #6
 8011bf2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011bf6:	e008      	b.n	8011c0a <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8011bf8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011bfc:	f003 0301 	and.w	r3, r3, #1
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d002      	beq.n	8011c0a <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011c04:	2307      	movs	r3, #7
 8011c06:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8011c0a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d13d      	bne.n	8011c8e <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011c16:	4611      	mov	r1, r2
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fe f98e 	bl	800ff3a <ld_clust>
 8011c1e:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011c20:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011c24:	f003 0310 	and.w	r3, r3, #16
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d030      	beq.n	8011c8e <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	699b      	ldr	r3, [r3, #24]
 8011c30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d103      	bne.n	8011c3e <f_unlink+0xd6>
						res = FR_DENIED;
 8011c36:	2307      	movs	r3, #7
 8011c38:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011c3c:	e027      	b.n	8011c8e <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011c42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c44:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011c46:	f107 0310 	add.w	r3, r7, #16
 8011c4a:	2100      	movs	r1, #0
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f7fd ffce 	bl	800fbee <dir_sdi>
 8011c52:	4603      	mov	r3, r0
 8011c54:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8011c58:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d116      	bne.n	8011c8e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011c60:	f107 0310 	add.w	r3, r7, #16
 8011c64:	2100      	movs	r1, #0
 8011c66:	4618      	mov	r0, r3
 8011c68:	f7fe f9a6 	bl	800ffb8 <dir_read>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011c72:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d102      	bne.n	8011c80 <f_unlink+0x118>
 8011c7a:	2307      	movs	r3, #7
 8011c7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011c80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c84:	2b04      	cmp	r3, #4
 8011c86:	d102      	bne.n	8011c8e <f_unlink+0x126>
 8011c88:	2300      	movs	r3, #0
 8011c8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8011c8e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d123      	bne.n	8011cde <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011c96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f7fe fa70 	bl	8010180 <dir_remove>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011ca6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d10c      	bne.n	8011cc8 <f_unlink+0x160>
 8011cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d009      	beq.n	8011cc8 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011cb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011cb8:	2200      	movs	r2, #0
 8011cba:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fd fe61 	bl	800f984 <remove_chain>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8011cc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <f_unlink+0x176>
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7fd fbe0 	bl	800f498 <sync_fs>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011cde:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3778      	adds	r7, #120	; 0x78
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
	...

08011cec <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b096      	sub	sp, #88	; 0x58
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011cf4:	f107 0108 	add.w	r1, r7, #8
 8011cf8:	1d3b      	adds	r3, r7, #4
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7fe fc57 	bl	80105b0 <find_volume>
 8011d02:	4603      	mov	r3, r0
 8011d04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8011d08:	68bb      	ldr	r3, [r7, #8]
 8011d0a:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	f040 80fe 	bne.w	8011f12 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8011d16:	687a      	ldr	r2, [r7, #4]
 8011d18:	f107 030c 	add.w	r3, r7, #12
 8011d1c:	4611      	mov	r1, r2
 8011d1e:	4618      	mov	r0, r3
 8011d20:	f7fe fb16 	bl	8010350 <follow_path>
 8011d24:	4603      	mov	r3, r0
 8011d26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d102      	bne.n	8011d38 <f_mkdir+0x4c>
 8011d32:	2308      	movs	r3, #8
 8011d34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8011d38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d3c:	2b04      	cmp	r3, #4
 8011d3e:	d108      	bne.n	8011d52 <f_mkdir+0x66>
 8011d40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011d44:	f003 0320 	and.w	r3, r3, #32
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d002      	beq.n	8011d52 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011d4c:	2306      	movs	r3, #6
 8011d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011d52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d56:	2b04      	cmp	r3, #4
 8011d58:	f040 80db 	bne.w	8011f12 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011d5c:	f107 030c 	add.w	r3, r7, #12
 8011d60:	2100      	movs	r1, #0
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fd fe73 	bl	800fa4e <create_chain>
 8011d68:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	895b      	ldrh	r3, [r3, #10]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	68bb      	ldr	r3, [r7, #8]
 8011d72:	899b      	ldrh	r3, [r3, #12]
 8011d74:	fb03 f302 	mul.w	r3, r3, r2
 8011d78:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <f_mkdir+0xa0>
 8011d86:	2307      	movs	r3, #7
 8011d88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8011d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d8e:	2b01      	cmp	r3, #1
 8011d90:	d102      	bne.n	8011d98 <f_mkdir+0xac>
 8011d92:	2302      	movs	r3, #2
 8011d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011d98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d9e:	d102      	bne.n	8011da6 <f_mkdir+0xba>
 8011da0:	2301      	movs	r3, #1
 8011da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d106      	bne.n	8011dbc <f_mkdir+0xd0>
 8011dae:	68bb      	ldr	r3, [r7, #8]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7fd faff 	bl	800f3b4 <sync_window>
 8011db6:	4603      	mov	r3, r0
 8011db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8011dbc:	4b58      	ldr	r3, [pc, #352]	; (8011f20 <f_mkdir+0x234>)
 8011dbe:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d16c      	bne.n	8011ea2 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fd fbd3 	bl	800f578 <clust2sect>
 8011dd2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8011dd4:	68bb      	ldr	r3, [r7, #8]
 8011dd6:	3338      	adds	r3, #56	; 0x38
 8011dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	899b      	ldrh	r3, [r3, #12]
 8011dde:	461a      	mov	r2, r3
 8011de0:	2100      	movs	r1, #0
 8011de2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011de4:	f7fd f91d 	bl	800f022 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011de8:	220b      	movs	r2, #11
 8011dea:	2120      	movs	r1, #32
 8011dec:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011dee:	f7fd f918 	bl	800f022 <mem_set>
					dir[DIR_Name] = '.';
 8011df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011df4:	222e      	movs	r2, #46	; 0x2e
 8011df6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfa:	330b      	adds	r3, #11
 8011dfc:	2210      	movs	r2, #16
 8011dfe:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e02:	3316      	adds	r3, #22
 8011e04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fd f8be 	bl	800ef88 <st_dword>
					st_clust(fs, dir, dcl);
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7fe f8b0 	bl	800ff78 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8011e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e1a:	3320      	adds	r3, #32
 8011e1c:	2220      	movs	r2, #32
 8011e1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011e20:	4618      	mov	r0, r3
 8011e22:	f7fd f8dd 	bl	800efe0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8011e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e28:	3321      	adds	r3, #33	; 0x21
 8011e2a:	222e      	movs	r2, #46	; 0x2e
 8011e2c:	701a      	strb	r2, [r3, #0]
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b03      	cmp	r3, #3
 8011e38:	d106      	bne.n	8011e48 <f_mkdir+0x15c>
 8011e3a:	68bb      	ldr	r3, [r7, #8]
 8011e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d101      	bne.n	8011e48 <f_mkdir+0x15c>
 8011e44:	2300      	movs	r3, #0
 8011e46:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8011e48:	68b8      	ldr	r0, [r7, #8]
 8011e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e4c:	3320      	adds	r3, #32
 8011e4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011e50:	4619      	mov	r1, r3
 8011e52:	f7fe f891 	bl	800ff78 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	895b      	ldrh	r3, [r3, #10]
 8011e5a:	653b      	str	r3, [r7, #80]	; 0x50
 8011e5c:	e01c      	b.n	8011e98 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e60:	1c5a      	adds	r2, r3, #1
 8011e62:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011e64:	68ba      	ldr	r2, [r7, #8]
 8011e66:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	4618      	mov	r0, r3
 8011e72:	f7fd fa9f 	bl	800f3b4 <sync_window>
 8011e76:	4603      	mov	r3, r0
 8011e78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8011e7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d10d      	bne.n	8011ea0 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	899b      	ldrh	r3, [r3, #12]
 8011e88:	461a      	mov	r2, r3
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011e8e:	f7fd f8c8 	bl	800f022 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e94:	3b01      	subs	r3, #1
 8011e96:	653b      	str	r3, [r7, #80]	; 0x50
 8011e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d1df      	bne.n	8011e5e <f_mkdir+0x172>
 8011e9e:	e000      	b.n	8011ea2 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8011ea0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011ea2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d107      	bne.n	8011eba <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011eaa:	f107 030c 	add.w	r3, r7, #12
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f7fe f934 	bl	801011c <dir_register>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8011eba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d120      	bne.n	8011f04 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ec8:	3316      	adds	r3, #22
 8011eca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011ecc:	4618      	mov	r0, r3
 8011ece:	f7fd f85b 	bl	800ef88 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ed6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f7fe f84d 	bl	800ff78 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ee0:	330b      	adds	r3, #11
 8011ee2:	2210      	movs	r2, #16
 8011ee4:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8011ee6:	68bb      	ldr	r3, [r7, #8]
 8011ee8:	2201      	movs	r2, #1
 8011eea:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d10e      	bne.n	8011f12 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7fd face 	bl	800f498 <sync_fs>
 8011efc:	4603      	mov	r3, r0
 8011efe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011f02:	e006      	b.n	8011f12 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011f04:	f107 030c 	add.w	r3, r7, #12
 8011f08:	2200      	movs	r2, #0
 8011f0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fd fd39 	bl	800f984 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011f12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3758      	adds	r7, #88	; 0x58
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd80      	pop	{r7, pc}
 8011f1e:	bf00      	nop
 8011f20:	274a0000 	.word	0x274a0000

08011f24 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b088      	sub	sp, #32
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011f30:	2300      	movs	r3, #0
 8011f32:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011f38:	e017      	b.n	8011f6a <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8011f3a:	f107 0310 	add.w	r3, r7, #16
 8011f3e:	f107 0114 	add.w	r1, r7, #20
 8011f42:	2201      	movs	r2, #1
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7ff f803 	bl	8010f50 <f_read>
		if (rc != 1) break;
 8011f4a:	693b      	ldr	r3, [r7, #16]
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	d112      	bne.n	8011f76 <f_gets+0x52>
		c = s[0];
 8011f50:	7d3b      	ldrb	r3, [r7, #20]
 8011f52:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011f54:	69bb      	ldr	r3, [r7, #24]
 8011f56:	1c5a      	adds	r2, r3, #1
 8011f58:	61ba      	str	r2, [r7, #24]
 8011f5a:	7dfa      	ldrb	r2, [r7, #23]
 8011f5c:	701a      	strb	r2, [r3, #0]
		n++;
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	3301      	adds	r3, #1
 8011f62:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	2b0a      	cmp	r3, #10
 8011f68:	d007      	beq.n	8011f7a <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	3b01      	subs	r3, #1
 8011f6e:	69fa      	ldr	r2, [r7, #28]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	dbe2      	blt.n	8011f3a <f_gets+0x16>
 8011f74:	e002      	b.n	8011f7c <f_gets+0x58>
		if (rc != 1) break;
 8011f76:	bf00      	nop
 8011f78:	e000      	b.n	8011f7c <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8011f7a:	bf00      	nop
	}
	*p = 0;
 8011f7c:	69bb      	ldr	r3, [r7, #24]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d001      	beq.n	8011f8c <f_gets+0x68>
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	e000      	b.n	8011f8e <f_gets+0x6a>
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3720      	adds	r7, #32
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
	...

08011f98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b087      	sub	sp, #28
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	4613      	mov	r3, r2
 8011fa4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011fae:	4b1f      	ldr	r3, [pc, #124]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fb0:	7a5b      	ldrb	r3, [r3, #9]
 8011fb2:	b2db      	uxtb	r3, r3
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d131      	bne.n	801201c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011fb8:	4b1c      	ldr	r3, [pc, #112]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fba:	7a5b      	ldrb	r3, [r3, #9]
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4b1a      	ldr	r3, [pc, #104]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011fc6:	4b19      	ldr	r3, [pc, #100]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fc8:	7a5b      	ldrb	r3, [r3, #9]
 8011fca:	b2db      	uxtb	r3, r3
 8011fcc:	4a17      	ldr	r2, [pc, #92]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	68fa      	ldr	r2, [r7, #12]
 8011fd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011fd6:	4b15      	ldr	r3, [pc, #84]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fd8:	7a5b      	ldrb	r3, [r3, #9]
 8011fda:	b2db      	uxtb	r3, r3
 8011fdc:	461a      	mov	r2, r3
 8011fde:	4b13      	ldr	r3, [pc, #76]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fe0:	4413      	add	r3, r2
 8011fe2:	79fa      	ldrb	r2, [r7, #7]
 8011fe4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011fe6:	4b11      	ldr	r3, [pc, #68]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011fe8:	7a5b      	ldrb	r3, [r3, #9]
 8011fea:	b2db      	uxtb	r3, r3
 8011fec:	1c5a      	adds	r2, r3, #1
 8011fee:	b2d1      	uxtb	r1, r2
 8011ff0:	4a0e      	ldr	r2, [pc, #56]	; (801202c <FATFS_LinkDriverEx+0x94>)
 8011ff2:	7251      	strb	r1, [r2, #9]
 8011ff4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011ff6:	7dbb      	ldrb	r3, [r7, #22]
 8011ff8:	3330      	adds	r3, #48	; 0x30
 8011ffa:	b2da      	uxtb	r2, r3
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	3301      	adds	r3, #1
 8012004:	223a      	movs	r2, #58	; 0x3a
 8012006:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	3302      	adds	r3, #2
 801200c:	222f      	movs	r2, #47	; 0x2f
 801200e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	3303      	adds	r3, #3
 8012014:	2200      	movs	r2, #0
 8012016:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012018:	2300      	movs	r3, #0
 801201a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801201c:	7dfb      	ldrb	r3, [r7, #23]
}
 801201e:	4618      	mov	r0, r3
 8012020:	371c      	adds	r7, #28
 8012022:	46bd      	mov	sp, r7
 8012024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012028:	4770      	bx	lr
 801202a:	bf00      	nop
 801202c:	200335f8 	.word	0x200335f8

08012030 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801203a:	2200      	movs	r2, #0
 801203c:	6839      	ldr	r1, [r7, #0]
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f7ff ffaa 	bl	8011f98 <FATFS_LinkDriverEx>
 8012044:	4603      	mov	r3, r0
}
 8012046:	4618      	mov	r0, r3
 8012048:	3708      	adds	r7, #8
 801204a:	46bd      	mov	sp, r7
 801204c:	bd80      	pop	{r7, pc}

0801204e <__cxa_guard_acquire>:
 801204e:	6803      	ldr	r3, [r0, #0]
 8012050:	07db      	lsls	r3, r3, #31
 8012052:	d406      	bmi.n	8012062 <__cxa_guard_acquire+0x14>
 8012054:	7843      	ldrb	r3, [r0, #1]
 8012056:	b103      	cbz	r3, 801205a <__cxa_guard_acquire+0xc>
 8012058:	deff      	udf	#255	; 0xff
 801205a:	2301      	movs	r3, #1
 801205c:	7043      	strb	r3, [r0, #1]
 801205e:	4618      	mov	r0, r3
 8012060:	4770      	bx	lr
 8012062:	2000      	movs	r0, #0
 8012064:	4770      	bx	lr

08012066 <__cxa_guard_release>:
 8012066:	2301      	movs	r3, #1
 8012068:	6003      	str	r3, [r0, #0]
 801206a:	4770      	bx	lr
 801206c:	0000      	movs	r0, r0
	...

08012070 <cos>:
 8012070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012072:	ec51 0b10 	vmov	r0, r1, d0
 8012076:	4a1e      	ldr	r2, [pc, #120]	; (80120f0 <cos+0x80>)
 8012078:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801207c:	4293      	cmp	r3, r2
 801207e:	dc06      	bgt.n	801208e <cos+0x1e>
 8012080:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80120e8 <cos+0x78>
 8012084:	f000 fa74 	bl	8012570 <__kernel_cos>
 8012088:	ec51 0b10 	vmov	r0, r1, d0
 801208c:	e007      	b.n	801209e <cos+0x2e>
 801208e:	4a19      	ldr	r2, [pc, #100]	; (80120f4 <cos+0x84>)
 8012090:	4293      	cmp	r3, r2
 8012092:	dd09      	ble.n	80120a8 <cos+0x38>
 8012094:	ee10 2a10 	vmov	r2, s0
 8012098:	460b      	mov	r3, r1
 801209a:	f7ee f90d 	bl	80002b8 <__aeabi_dsub>
 801209e:	ec41 0b10 	vmov	d0, r0, r1
 80120a2:	b005      	add	sp, #20
 80120a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80120a8:	4668      	mov	r0, sp
 80120aa:	f000 f86d 	bl	8012188 <__ieee754_rem_pio2>
 80120ae:	f000 0003 	and.w	r0, r0, #3
 80120b2:	2801      	cmp	r0, #1
 80120b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120b8:	ed9d 0b00 	vldr	d0, [sp]
 80120bc:	d007      	beq.n	80120ce <cos+0x5e>
 80120be:	2802      	cmp	r0, #2
 80120c0:	d00e      	beq.n	80120e0 <cos+0x70>
 80120c2:	2800      	cmp	r0, #0
 80120c4:	d0de      	beq.n	8012084 <cos+0x14>
 80120c6:	2001      	movs	r0, #1
 80120c8:	f000 fe5a 	bl	8012d80 <__kernel_sin>
 80120cc:	e7dc      	b.n	8012088 <cos+0x18>
 80120ce:	f000 fe57 	bl	8012d80 <__kernel_sin>
 80120d2:	ec53 2b10 	vmov	r2, r3, d0
 80120d6:	ee10 0a10 	vmov	r0, s0
 80120da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80120de:	e7de      	b.n	801209e <cos+0x2e>
 80120e0:	f000 fa46 	bl	8012570 <__kernel_cos>
 80120e4:	e7f5      	b.n	80120d2 <cos+0x62>
 80120e6:	bf00      	nop
	...
 80120f0:	3fe921fb 	.word	0x3fe921fb
 80120f4:	7fefffff 	.word	0x7fefffff

080120f8 <sin>:
 80120f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80120fa:	ec51 0b10 	vmov	r0, r1, d0
 80120fe:	4a20      	ldr	r2, [pc, #128]	; (8012180 <sin+0x88>)
 8012100:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012104:	4293      	cmp	r3, r2
 8012106:	dc07      	bgt.n	8012118 <sin+0x20>
 8012108:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012178 <sin+0x80>
 801210c:	2000      	movs	r0, #0
 801210e:	f000 fe37 	bl	8012d80 <__kernel_sin>
 8012112:	ec51 0b10 	vmov	r0, r1, d0
 8012116:	e007      	b.n	8012128 <sin+0x30>
 8012118:	4a1a      	ldr	r2, [pc, #104]	; (8012184 <sin+0x8c>)
 801211a:	4293      	cmp	r3, r2
 801211c:	dd09      	ble.n	8012132 <sin+0x3a>
 801211e:	ee10 2a10 	vmov	r2, s0
 8012122:	460b      	mov	r3, r1
 8012124:	f7ee f8c8 	bl	80002b8 <__aeabi_dsub>
 8012128:	ec41 0b10 	vmov	d0, r0, r1
 801212c:	b005      	add	sp, #20
 801212e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012132:	4668      	mov	r0, sp
 8012134:	f000 f828 	bl	8012188 <__ieee754_rem_pio2>
 8012138:	f000 0003 	and.w	r0, r0, #3
 801213c:	2801      	cmp	r0, #1
 801213e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012142:	ed9d 0b00 	vldr	d0, [sp]
 8012146:	d004      	beq.n	8012152 <sin+0x5a>
 8012148:	2802      	cmp	r0, #2
 801214a:	d005      	beq.n	8012158 <sin+0x60>
 801214c:	b970      	cbnz	r0, 801216c <sin+0x74>
 801214e:	2001      	movs	r0, #1
 8012150:	e7dd      	b.n	801210e <sin+0x16>
 8012152:	f000 fa0d 	bl	8012570 <__kernel_cos>
 8012156:	e7dc      	b.n	8012112 <sin+0x1a>
 8012158:	2001      	movs	r0, #1
 801215a:	f000 fe11 	bl	8012d80 <__kernel_sin>
 801215e:	ec53 2b10 	vmov	r2, r3, d0
 8012162:	ee10 0a10 	vmov	r0, s0
 8012166:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801216a:	e7dd      	b.n	8012128 <sin+0x30>
 801216c:	f000 fa00 	bl	8012570 <__kernel_cos>
 8012170:	e7f5      	b.n	801215e <sin+0x66>
 8012172:	bf00      	nop
 8012174:	f3af 8000 	nop.w
	...
 8012180:	3fe921fb 	.word	0x3fe921fb
 8012184:	7fefffff 	.word	0x7fefffff

08012188 <__ieee754_rem_pio2>:
 8012188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801218c:	ec57 6b10 	vmov	r6, r7, d0
 8012190:	4bc3      	ldr	r3, [pc, #780]	; (80124a0 <__ieee754_rem_pio2+0x318>)
 8012192:	b08d      	sub	sp, #52	; 0x34
 8012194:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012198:	4598      	cmp	r8, r3
 801219a:	4604      	mov	r4, r0
 801219c:	9704      	str	r7, [sp, #16]
 801219e:	dc07      	bgt.n	80121b0 <__ieee754_rem_pio2+0x28>
 80121a0:	2200      	movs	r2, #0
 80121a2:	2300      	movs	r3, #0
 80121a4:	ed84 0b00 	vstr	d0, [r4]
 80121a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80121ac:	2500      	movs	r5, #0
 80121ae:	e027      	b.n	8012200 <__ieee754_rem_pio2+0x78>
 80121b0:	4bbc      	ldr	r3, [pc, #752]	; (80124a4 <__ieee754_rem_pio2+0x31c>)
 80121b2:	4598      	cmp	r8, r3
 80121b4:	dc75      	bgt.n	80122a2 <__ieee754_rem_pio2+0x11a>
 80121b6:	9b04      	ldr	r3, [sp, #16]
 80121b8:	4dbb      	ldr	r5, [pc, #748]	; (80124a8 <__ieee754_rem_pio2+0x320>)
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	ee10 0a10 	vmov	r0, s0
 80121c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8012468 <__ieee754_rem_pio2+0x2e0>)
 80121c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c6:	4639      	mov	r1, r7
 80121c8:	dd36      	ble.n	8012238 <__ieee754_rem_pio2+0xb0>
 80121ca:	f7ee f875 	bl	80002b8 <__aeabi_dsub>
 80121ce:	45a8      	cmp	r8, r5
 80121d0:	4606      	mov	r6, r0
 80121d2:	460f      	mov	r7, r1
 80121d4:	d018      	beq.n	8012208 <__ieee754_rem_pio2+0x80>
 80121d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8012470 <__ieee754_rem_pio2+0x2e8>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	f7ee f86c 	bl	80002b8 <__aeabi_dsub>
 80121e0:	4602      	mov	r2, r0
 80121e2:	460b      	mov	r3, r1
 80121e4:	e9c4 2300 	strd	r2, r3, [r4]
 80121e8:	4630      	mov	r0, r6
 80121ea:	4639      	mov	r1, r7
 80121ec:	f7ee f864 	bl	80002b8 <__aeabi_dsub>
 80121f0:	a39f      	add	r3, pc, #636	; (adr r3, 8012470 <__ieee754_rem_pio2+0x2e8>)
 80121f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f6:	f7ee f85f 	bl	80002b8 <__aeabi_dsub>
 80121fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80121fe:	2501      	movs	r5, #1
 8012200:	4628      	mov	r0, r5
 8012202:	b00d      	add	sp, #52	; 0x34
 8012204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012208:	a39b      	add	r3, pc, #620	; (adr r3, 8012478 <__ieee754_rem_pio2+0x2f0>)
 801220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220e:	f7ee f853 	bl	80002b8 <__aeabi_dsub>
 8012212:	a39b      	add	r3, pc, #620	; (adr r3, 8012480 <__ieee754_rem_pio2+0x2f8>)
 8012214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012218:	4606      	mov	r6, r0
 801221a:	460f      	mov	r7, r1
 801221c:	f7ee f84c 	bl	80002b8 <__aeabi_dsub>
 8012220:	4602      	mov	r2, r0
 8012222:	460b      	mov	r3, r1
 8012224:	e9c4 2300 	strd	r2, r3, [r4]
 8012228:	4630      	mov	r0, r6
 801222a:	4639      	mov	r1, r7
 801222c:	f7ee f844 	bl	80002b8 <__aeabi_dsub>
 8012230:	a393      	add	r3, pc, #588	; (adr r3, 8012480 <__ieee754_rem_pio2+0x2f8>)
 8012232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012236:	e7de      	b.n	80121f6 <__ieee754_rem_pio2+0x6e>
 8012238:	f7ee f840 	bl	80002bc <__adddf3>
 801223c:	45a8      	cmp	r8, r5
 801223e:	4606      	mov	r6, r0
 8012240:	460f      	mov	r7, r1
 8012242:	d016      	beq.n	8012272 <__ieee754_rem_pio2+0xea>
 8012244:	a38a      	add	r3, pc, #552	; (adr r3, 8012470 <__ieee754_rem_pio2+0x2e8>)
 8012246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224a:	f7ee f837 	bl	80002bc <__adddf3>
 801224e:	4602      	mov	r2, r0
 8012250:	460b      	mov	r3, r1
 8012252:	e9c4 2300 	strd	r2, r3, [r4]
 8012256:	4630      	mov	r0, r6
 8012258:	4639      	mov	r1, r7
 801225a:	f7ee f82d 	bl	80002b8 <__aeabi_dsub>
 801225e:	a384      	add	r3, pc, #528	; (adr r3, 8012470 <__ieee754_rem_pio2+0x2e8>)
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	f7ee f82a 	bl	80002bc <__adddf3>
 8012268:	f04f 35ff 	mov.w	r5, #4294967295
 801226c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012270:	e7c6      	b.n	8012200 <__ieee754_rem_pio2+0x78>
 8012272:	a381      	add	r3, pc, #516	; (adr r3, 8012478 <__ieee754_rem_pio2+0x2f0>)
 8012274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012278:	f7ee f820 	bl	80002bc <__adddf3>
 801227c:	a380      	add	r3, pc, #512	; (adr r3, 8012480 <__ieee754_rem_pio2+0x2f8>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	4606      	mov	r6, r0
 8012284:	460f      	mov	r7, r1
 8012286:	f7ee f819 	bl	80002bc <__adddf3>
 801228a:	4602      	mov	r2, r0
 801228c:	460b      	mov	r3, r1
 801228e:	e9c4 2300 	strd	r2, r3, [r4]
 8012292:	4630      	mov	r0, r6
 8012294:	4639      	mov	r1, r7
 8012296:	f7ee f80f 	bl	80002b8 <__aeabi_dsub>
 801229a:	a379      	add	r3, pc, #484	; (adr r3, 8012480 <__ieee754_rem_pio2+0x2f8>)
 801229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a0:	e7e0      	b.n	8012264 <__ieee754_rem_pio2+0xdc>
 80122a2:	4b82      	ldr	r3, [pc, #520]	; (80124ac <__ieee754_rem_pio2+0x324>)
 80122a4:	4598      	cmp	r8, r3
 80122a6:	f300 80d0 	bgt.w	801244a <__ieee754_rem_pio2+0x2c2>
 80122aa:	f000 fe23 	bl	8012ef4 <fabs>
 80122ae:	ec57 6b10 	vmov	r6, r7, d0
 80122b2:	ee10 0a10 	vmov	r0, s0
 80122b6:	a374      	add	r3, pc, #464	; (adr r3, 8012488 <__ieee754_rem_pio2+0x300>)
 80122b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122bc:	4639      	mov	r1, r7
 80122be:	f7ee f9b3 	bl	8000628 <__aeabi_dmul>
 80122c2:	2200      	movs	r2, #0
 80122c4:	4b7a      	ldr	r3, [pc, #488]	; (80124b0 <__ieee754_rem_pio2+0x328>)
 80122c6:	f7ed fff9 	bl	80002bc <__adddf3>
 80122ca:	f7ee fc5d 	bl	8000b88 <__aeabi_d2iz>
 80122ce:	4605      	mov	r5, r0
 80122d0:	f7ee f940 	bl	8000554 <__aeabi_i2d>
 80122d4:	a364      	add	r3, pc, #400	; (adr r3, 8012468 <__ieee754_rem_pio2+0x2e0>)
 80122d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122de:	f7ee f9a3 	bl	8000628 <__aeabi_dmul>
 80122e2:	4602      	mov	r2, r0
 80122e4:	460b      	mov	r3, r1
 80122e6:	4630      	mov	r0, r6
 80122e8:	4639      	mov	r1, r7
 80122ea:	f7ed ffe5 	bl	80002b8 <__aeabi_dsub>
 80122ee:	a360      	add	r3, pc, #384	; (adr r3, 8012470 <__ieee754_rem_pio2+0x2e8>)
 80122f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122f4:	4682      	mov	sl, r0
 80122f6:	468b      	mov	fp, r1
 80122f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80122fc:	f7ee f994 	bl	8000628 <__aeabi_dmul>
 8012300:	2d1f      	cmp	r5, #31
 8012302:	4606      	mov	r6, r0
 8012304:	460f      	mov	r7, r1
 8012306:	dc0c      	bgt.n	8012322 <__ieee754_rem_pio2+0x19a>
 8012308:	1e6a      	subs	r2, r5, #1
 801230a:	4b6a      	ldr	r3, [pc, #424]	; (80124b4 <__ieee754_rem_pio2+0x32c>)
 801230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012310:	4543      	cmp	r3, r8
 8012312:	d006      	beq.n	8012322 <__ieee754_rem_pio2+0x19a>
 8012314:	4632      	mov	r2, r6
 8012316:	463b      	mov	r3, r7
 8012318:	4650      	mov	r0, sl
 801231a:	4659      	mov	r1, fp
 801231c:	f7ed ffcc 	bl	80002b8 <__aeabi_dsub>
 8012320:	e00e      	b.n	8012340 <__ieee754_rem_pio2+0x1b8>
 8012322:	4632      	mov	r2, r6
 8012324:	463b      	mov	r3, r7
 8012326:	4650      	mov	r0, sl
 8012328:	4659      	mov	r1, fp
 801232a:	f7ed ffc5 	bl	80002b8 <__aeabi_dsub>
 801232e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012332:	9305      	str	r3, [sp, #20]
 8012334:	9a05      	ldr	r2, [sp, #20]
 8012336:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	2b10      	cmp	r3, #16
 801233e:	dc02      	bgt.n	8012346 <__ieee754_rem_pio2+0x1be>
 8012340:	e9c4 0100 	strd	r0, r1, [r4]
 8012344:	e039      	b.n	80123ba <__ieee754_rem_pio2+0x232>
 8012346:	a34c      	add	r3, pc, #304	; (adr r3, 8012478 <__ieee754_rem_pio2+0x2f0>)
 8012348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012350:	f7ee f96a 	bl	8000628 <__aeabi_dmul>
 8012354:	4606      	mov	r6, r0
 8012356:	460f      	mov	r7, r1
 8012358:	4602      	mov	r2, r0
 801235a:	460b      	mov	r3, r1
 801235c:	4650      	mov	r0, sl
 801235e:	4659      	mov	r1, fp
 8012360:	f7ed ffaa 	bl	80002b8 <__aeabi_dsub>
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	4680      	mov	r8, r0
 801236a:	4689      	mov	r9, r1
 801236c:	4650      	mov	r0, sl
 801236e:	4659      	mov	r1, fp
 8012370:	f7ed ffa2 	bl	80002b8 <__aeabi_dsub>
 8012374:	4632      	mov	r2, r6
 8012376:	463b      	mov	r3, r7
 8012378:	f7ed ff9e 	bl	80002b8 <__aeabi_dsub>
 801237c:	a340      	add	r3, pc, #256	; (adr r3, 8012480 <__ieee754_rem_pio2+0x2f8>)
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	4606      	mov	r6, r0
 8012384:	460f      	mov	r7, r1
 8012386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801238a:	f7ee f94d 	bl	8000628 <__aeabi_dmul>
 801238e:	4632      	mov	r2, r6
 8012390:	463b      	mov	r3, r7
 8012392:	f7ed ff91 	bl	80002b8 <__aeabi_dsub>
 8012396:	4602      	mov	r2, r0
 8012398:	460b      	mov	r3, r1
 801239a:	4606      	mov	r6, r0
 801239c:	460f      	mov	r7, r1
 801239e:	4640      	mov	r0, r8
 80123a0:	4649      	mov	r1, r9
 80123a2:	f7ed ff89 	bl	80002b8 <__aeabi_dsub>
 80123a6:	9a05      	ldr	r2, [sp, #20]
 80123a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	2b31      	cmp	r3, #49	; 0x31
 80123b0:	dc20      	bgt.n	80123f4 <__ieee754_rem_pio2+0x26c>
 80123b2:	e9c4 0100 	strd	r0, r1, [r4]
 80123b6:	46c2      	mov	sl, r8
 80123b8:	46cb      	mov	fp, r9
 80123ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80123be:	4650      	mov	r0, sl
 80123c0:	4642      	mov	r2, r8
 80123c2:	464b      	mov	r3, r9
 80123c4:	4659      	mov	r1, fp
 80123c6:	f7ed ff77 	bl	80002b8 <__aeabi_dsub>
 80123ca:	463b      	mov	r3, r7
 80123cc:	4632      	mov	r2, r6
 80123ce:	f7ed ff73 	bl	80002b8 <__aeabi_dsub>
 80123d2:	9b04      	ldr	r3, [sp, #16]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80123da:	f6bf af11 	bge.w	8012200 <__ieee754_rem_pio2+0x78>
 80123de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123e2:	6063      	str	r3, [r4, #4]
 80123e4:	f8c4 8000 	str.w	r8, [r4]
 80123e8:	60a0      	str	r0, [r4, #8]
 80123ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ee:	60e3      	str	r3, [r4, #12]
 80123f0:	426d      	negs	r5, r5
 80123f2:	e705      	b.n	8012200 <__ieee754_rem_pio2+0x78>
 80123f4:	a326      	add	r3, pc, #152	; (adr r3, 8012490 <__ieee754_rem_pio2+0x308>)
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123fe:	f7ee f913 	bl	8000628 <__aeabi_dmul>
 8012402:	4606      	mov	r6, r0
 8012404:	460f      	mov	r7, r1
 8012406:	4602      	mov	r2, r0
 8012408:	460b      	mov	r3, r1
 801240a:	4640      	mov	r0, r8
 801240c:	4649      	mov	r1, r9
 801240e:	f7ed ff53 	bl	80002b8 <__aeabi_dsub>
 8012412:	4602      	mov	r2, r0
 8012414:	460b      	mov	r3, r1
 8012416:	4682      	mov	sl, r0
 8012418:	468b      	mov	fp, r1
 801241a:	4640      	mov	r0, r8
 801241c:	4649      	mov	r1, r9
 801241e:	f7ed ff4b 	bl	80002b8 <__aeabi_dsub>
 8012422:	4632      	mov	r2, r6
 8012424:	463b      	mov	r3, r7
 8012426:	f7ed ff47 	bl	80002b8 <__aeabi_dsub>
 801242a:	a31b      	add	r3, pc, #108	; (adr r3, 8012498 <__ieee754_rem_pio2+0x310>)
 801242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012430:	4606      	mov	r6, r0
 8012432:	460f      	mov	r7, r1
 8012434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012438:	f7ee f8f6 	bl	8000628 <__aeabi_dmul>
 801243c:	4632      	mov	r2, r6
 801243e:	463b      	mov	r3, r7
 8012440:	f7ed ff3a 	bl	80002b8 <__aeabi_dsub>
 8012444:	4606      	mov	r6, r0
 8012446:	460f      	mov	r7, r1
 8012448:	e764      	b.n	8012314 <__ieee754_rem_pio2+0x18c>
 801244a:	4b1b      	ldr	r3, [pc, #108]	; (80124b8 <__ieee754_rem_pio2+0x330>)
 801244c:	4598      	cmp	r8, r3
 801244e:	dd35      	ble.n	80124bc <__ieee754_rem_pio2+0x334>
 8012450:	ee10 2a10 	vmov	r2, s0
 8012454:	463b      	mov	r3, r7
 8012456:	4630      	mov	r0, r6
 8012458:	4639      	mov	r1, r7
 801245a:	f7ed ff2d 	bl	80002b8 <__aeabi_dsub>
 801245e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012462:	e9c4 0100 	strd	r0, r1, [r4]
 8012466:	e6a1      	b.n	80121ac <__ieee754_rem_pio2+0x24>
 8012468:	54400000 	.word	0x54400000
 801246c:	3ff921fb 	.word	0x3ff921fb
 8012470:	1a626331 	.word	0x1a626331
 8012474:	3dd0b461 	.word	0x3dd0b461
 8012478:	1a600000 	.word	0x1a600000
 801247c:	3dd0b461 	.word	0x3dd0b461
 8012480:	2e037073 	.word	0x2e037073
 8012484:	3ba3198a 	.word	0x3ba3198a
 8012488:	6dc9c883 	.word	0x6dc9c883
 801248c:	3fe45f30 	.word	0x3fe45f30
 8012490:	2e000000 	.word	0x2e000000
 8012494:	3ba3198a 	.word	0x3ba3198a
 8012498:	252049c1 	.word	0x252049c1
 801249c:	397b839a 	.word	0x397b839a
 80124a0:	3fe921fb 	.word	0x3fe921fb
 80124a4:	4002d97b 	.word	0x4002d97b
 80124a8:	3ff921fb 	.word	0x3ff921fb
 80124ac:	413921fb 	.word	0x413921fb
 80124b0:	3fe00000 	.word	0x3fe00000
 80124b4:	080185c0 	.word	0x080185c0
 80124b8:	7fefffff 	.word	0x7fefffff
 80124bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80124c0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80124c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80124c8:	4630      	mov	r0, r6
 80124ca:	460f      	mov	r7, r1
 80124cc:	f7ee fb5c 	bl	8000b88 <__aeabi_d2iz>
 80124d0:	f7ee f840 	bl	8000554 <__aeabi_i2d>
 80124d4:	4602      	mov	r2, r0
 80124d6:	460b      	mov	r3, r1
 80124d8:	4630      	mov	r0, r6
 80124da:	4639      	mov	r1, r7
 80124dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80124e0:	f7ed feea 	bl	80002b8 <__aeabi_dsub>
 80124e4:	2200      	movs	r2, #0
 80124e6:	4b1f      	ldr	r3, [pc, #124]	; (8012564 <__ieee754_rem_pio2+0x3dc>)
 80124e8:	f7ee f89e 	bl	8000628 <__aeabi_dmul>
 80124ec:	460f      	mov	r7, r1
 80124ee:	4606      	mov	r6, r0
 80124f0:	f7ee fb4a 	bl	8000b88 <__aeabi_d2iz>
 80124f4:	f7ee f82e 	bl	8000554 <__aeabi_i2d>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4630      	mov	r0, r6
 80124fe:	4639      	mov	r1, r7
 8012500:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012504:	f7ed fed8 	bl	80002b8 <__aeabi_dsub>
 8012508:	2200      	movs	r2, #0
 801250a:	4b16      	ldr	r3, [pc, #88]	; (8012564 <__ieee754_rem_pio2+0x3dc>)
 801250c:	f7ee f88c 	bl	8000628 <__aeabi_dmul>
 8012510:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012514:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012518:	f04f 0803 	mov.w	r8, #3
 801251c:	2600      	movs	r6, #0
 801251e:	2700      	movs	r7, #0
 8012520:	4632      	mov	r2, r6
 8012522:	463b      	mov	r3, r7
 8012524:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012528:	f108 3aff 	add.w	sl, r8, #4294967295
 801252c:	f7ee fae4 	bl	8000af8 <__aeabi_dcmpeq>
 8012530:	b9b0      	cbnz	r0, 8012560 <__ieee754_rem_pio2+0x3d8>
 8012532:	4b0d      	ldr	r3, [pc, #52]	; (8012568 <__ieee754_rem_pio2+0x3e0>)
 8012534:	9301      	str	r3, [sp, #4]
 8012536:	2302      	movs	r3, #2
 8012538:	9300      	str	r3, [sp, #0]
 801253a:	462a      	mov	r2, r5
 801253c:	4643      	mov	r3, r8
 801253e:	4621      	mov	r1, r4
 8012540:	a806      	add	r0, sp, #24
 8012542:	f000 f8dd 	bl	8012700 <__kernel_rem_pio2>
 8012546:	9b04      	ldr	r3, [sp, #16]
 8012548:	2b00      	cmp	r3, #0
 801254a:	4605      	mov	r5, r0
 801254c:	f6bf ae58 	bge.w	8012200 <__ieee754_rem_pio2+0x78>
 8012550:	6863      	ldr	r3, [r4, #4]
 8012552:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012556:	6063      	str	r3, [r4, #4]
 8012558:	68e3      	ldr	r3, [r4, #12]
 801255a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801255e:	e746      	b.n	80123ee <__ieee754_rem_pio2+0x266>
 8012560:	46d0      	mov	r8, sl
 8012562:	e7dd      	b.n	8012520 <__ieee754_rem_pio2+0x398>
 8012564:	41700000 	.word	0x41700000
 8012568:	08018640 	.word	0x08018640
 801256c:	00000000 	.word	0x00000000

08012570 <__kernel_cos>:
 8012570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012574:	ec59 8b10 	vmov	r8, r9, d0
 8012578:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801257c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012580:	ed2d 8b02 	vpush	{d8}
 8012584:	eeb0 8a41 	vmov.f32	s16, s2
 8012588:	eef0 8a61 	vmov.f32	s17, s3
 801258c:	da07      	bge.n	801259e <__kernel_cos+0x2e>
 801258e:	ee10 0a10 	vmov	r0, s0
 8012592:	4649      	mov	r1, r9
 8012594:	f7ee faf8 	bl	8000b88 <__aeabi_d2iz>
 8012598:	2800      	cmp	r0, #0
 801259a:	f000 8089 	beq.w	80126b0 <__kernel_cos+0x140>
 801259e:	4642      	mov	r2, r8
 80125a0:	464b      	mov	r3, r9
 80125a2:	4640      	mov	r0, r8
 80125a4:	4649      	mov	r1, r9
 80125a6:	f7ee f83f 	bl	8000628 <__aeabi_dmul>
 80125aa:	2200      	movs	r2, #0
 80125ac:	4b4e      	ldr	r3, [pc, #312]	; (80126e8 <__kernel_cos+0x178>)
 80125ae:	4604      	mov	r4, r0
 80125b0:	460d      	mov	r5, r1
 80125b2:	f7ee f839 	bl	8000628 <__aeabi_dmul>
 80125b6:	a340      	add	r3, pc, #256	; (adr r3, 80126b8 <__kernel_cos+0x148>)
 80125b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125bc:	4682      	mov	sl, r0
 80125be:	468b      	mov	fp, r1
 80125c0:	4620      	mov	r0, r4
 80125c2:	4629      	mov	r1, r5
 80125c4:	f7ee f830 	bl	8000628 <__aeabi_dmul>
 80125c8:	a33d      	add	r3, pc, #244	; (adr r3, 80126c0 <__kernel_cos+0x150>)
 80125ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ce:	f7ed fe75 	bl	80002bc <__adddf3>
 80125d2:	4622      	mov	r2, r4
 80125d4:	462b      	mov	r3, r5
 80125d6:	f7ee f827 	bl	8000628 <__aeabi_dmul>
 80125da:	a33b      	add	r3, pc, #236	; (adr r3, 80126c8 <__kernel_cos+0x158>)
 80125dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e0:	f7ed fe6a 	bl	80002b8 <__aeabi_dsub>
 80125e4:	4622      	mov	r2, r4
 80125e6:	462b      	mov	r3, r5
 80125e8:	f7ee f81e 	bl	8000628 <__aeabi_dmul>
 80125ec:	a338      	add	r3, pc, #224	; (adr r3, 80126d0 <__kernel_cos+0x160>)
 80125ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f2:	f7ed fe63 	bl	80002bc <__adddf3>
 80125f6:	4622      	mov	r2, r4
 80125f8:	462b      	mov	r3, r5
 80125fa:	f7ee f815 	bl	8000628 <__aeabi_dmul>
 80125fe:	a336      	add	r3, pc, #216	; (adr r3, 80126d8 <__kernel_cos+0x168>)
 8012600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012604:	f7ed fe58 	bl	80002b8 <__aeabi_dsub>
 8012608:	4622      	mov	r2, r4
 801260a:	462b      	mov	r3, r5
 801260c:	f7ee f80c 	bl	8000628 <__aeabi_dmul>
 8012610:	a333      	add	r3, pc, #204	; (adr r3, 80126e0 <__kernel_cos+0x170>)
 8012612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012616:	f7ed fe51 	bl	80002bc <__adddf3>
 801261a:	4622      	mov	r2, r4
 801261c:	462b      	mov	r3, r5
 801261e:	f7ee f803 	bl	8000628 <__aeabi_dmul>
 8012622:	4622      	mov	r2, r4
 8012624:	462b      	mov	r3, r5
 8012626:	f7ed ffff 	bl	8000628 <__aeabi_dmul>
 801262a:	ec53 2b18 	vmov	r2, r3, d8
 801262e:	4604      	mov	r4, r0
 8012630:	460d      	mov	r5, r1
 8012632:	4640      	mov	r0, r8
 8012634:	4649      	mov	r1, r9
 8012636:	f7ed fff7 	bl	8000628 <__aeabi_dmul>
 801263a:	460b      	mov	r3, r1
 801263c:	4602      	mov	r2, r0
 801263e:	4629      	mov	r1, r5
 8012640:	4620      	mov	r0, r4
 8012642:	f7ed fe39 	bl	80002b8 <__aeabi_dsub>
 8012646:	4b29      	ldr	r3, [pc, #164]	; (80126ec <__kernel_cos+0x17c>)
 8012648:	429e      	cmp	r6, r3
 801264a:	4680      	mov	r8, r0
 801264c:	4689      	mov	r9, r1
 801264e:	dc11      	bgt.n	8012674 <__kernel_cos+0x104>
 8012650:	4602      	mov	r2, r0
 8012652:	460b      	mov	r3, r1
 8012654:	4650      	mov	r0, sl
 8012656:	4659      	mov	r1, fp
 8012658:	f7ed fe2e 	bl	80002b8 <__aeabi_dsub>
 801265c:	460b      	mov	r3, r1
 801265e:	4924      	ldr	r1, [pc, #144]	; (80126f0 <__kernel_cos+0x180>)
 8012660:	4602      	mov	r2, r0
 8012662:	2000      	movs	r0, #0
 8012664:	f7ed fe28 	bl	80002b8 <__aeabi_dsub>
 8012668:	ecbd 8b02 	vpop	{d8}
 801266c:	ec41 0b10 	vmov	d0, r0, r1
 8012670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012674:	4b1f      	ldr	r3, [pc, #124]	; (80126f4 <__kernel_cos+0x184>)
 8012676:	491e      	ldr	r1, [pc, #120]	; (80126f0 <__kernel_cos+0x180>)
 8012678:	429e      	cmp	r6, r3
 801267a:	bfcc      	ite	gt
 801267c:	4d1e      	ldrgt	r5, [pc, #120]	; (80126f8 <__kernel_cos+0x188>)
 801267e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8012682:	2400      	movs	r4, #0
 8012684:	4622      	mov	r2, r4
 8012686:	462b      	mov	r3, r5
 8012688:	2000      	movs	r0, #0
 801268a:	f7ed fe15 	bl	80002b8 <__aeabi_dsub>
 801268e:	4622      	mov	r2, r4
 8012690:	4606      	mov	r6, r0
 8012692:	460f      	mov	r7, r1
 8012694:	462b      	mov	r3, r5
 8012696:	4650      	mov	r0, sl
 8012698:	4659      	mov	r1, fp
 801269a:	f7ed fe0d 	bl	80002b8 <__aeabi_dsub>
 801269e:	4642      	mov	r2, r8
 80126a0:	464b      	mov	r3, r9
 80126a2:	f7ed fe09 	bl	80002b8 <__aeabi_dsub>
 80126a6:	4602      	mov	r2, r0
 80126a8:	460b      	mov	r3, r1
 80126aa:	4630      	mov	r0, r6
 80126ac:	4639      	mov	r1, r7
 80126ae:	e7d9      	b.n	8012664 <__kernel_cos+0xf4>
 80126b0:	2000      	movs	r0, #0
 80126b2:	490f      	ldr	r1, [pc, #60]	; (80126f0 <__kernel_cos+0x180>)
 80126b4:	e7d8      	b.n	8012668 <__kernel_cos+0xf8>
 80126b6:	bf00      	nop
 80126b8:	be8838d4 	.word	0xbe8838d4
 80126bc:	bda8fae9 	.word	0xbda8fae9
 80126c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80126c4:	3e21ee9e 	.word	0x3e21ee9e
 80126c8:	809c52ad 	.word	0x809c52ad
 80126cc:	3e927e4f 	.word	0x3e927e4f
 80126d0:	19cb1590 	.word	0x19cb1590
 80126d4:	3efa01a0 	.word	0x3efa01a0
 80126d8:	16c15177 	.word	0x16c15177
 80126dc:	3f56c16c 	.word	0x3f56c16c
 80126e0:	5555554c 	.word	0x5555554c
 80126e4:	3fa55555 	.word	0x3fa55555
 80126e8:	3fe00000 	.word	0x3fe00000
 80126ec:	3fd33332 	.word	0x3fd33332
 80126f0:	3ff00000 	.word	0x3ff00000
 80126f4:	3fe90000 	.word	0x3fe90000
 80126f8:	3fd20000 	.word	0x3fd20000
 80126fc:	00000000 	.word	0x00000000

08012700 <__kernel_rem_pio2>:
 8012700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012704:	ed2d 8b02 	vpush	{d8}
 8012708:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801270c:	1ed4      	subs	r4, r2, #3
 801270e:	9308      	str	r3, [sp, #32]
 8012710:	9101      	str	r1, [sp, #4]
 8012712:	4bc5      	ldr	r3, [pc, #788]	; (8012a28 <__kernel_rem_pio2+0x328>)
 8012714:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012716:	9009      	str	r0, [sp, #36]	; 0x24
 8012718:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801271c:	9304      	str	r3, [sp, #16]
 801271e:	9b08      	ldr	r3, [sp, #32]
 8012720:	3b01      	subs	r3, #1
 8012722:	9307      	str	r3, [sp, #28]
 8012724:	2318      	movs	r3, #24
 8012726:	fb94 f4f3 	sdiv	r4, r4, r3
 801272a:	f06f 0317 	mvn.w	r3, #23
 801272e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012732:	fb04 3303 	mla	r3, r4, r3, r3
 8012736:	eb03 0a02 	add.w	sl, r3, r2
 801273a:	9b04      	ldr	r3, [sp, #16]
 801273c:	9a07      	ldr	r2, [sp, #28]
 801273e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012a18 <__kernel_rem_pio2+0x318>
 8012742:	eb03 0802 	add.w	r8, r3, r2
 8012746:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012748:	1aa7      	subs	r7, r4, r2
 801274a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801274e:	ae22      	add	r6, sp, #136	; 0x88
 8012750:	2500      	movs	r5, #0
 8012752:	4545      	cmp	r5, r8
 8012754:	dd13      	ble.n	801277e <__kernel_rem_pio2+0x7e>
 8012756:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012a18 <__kernel_rem_pio2+0x318>
 801275a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801275e:	2600      	movs	r6, #0
 8012760:	9b04      	ldr	r3, [sp, #16]
 8012762:	429e      	cmp	r6, r3
 8012764:	dc32      	bgt.n	80127cc <__kernel_rem_pio2+0xcc>
 8012766:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012768:	9302      	str	r3, [sp, #8]
 801276a:	9b08      	ldr	r3, [sp, #32]
 801276c:	199d      	adds	r5, r3, r6
 801276e:	ab22      	add	r3, sp, #136	; 0x88
 8012770:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012774:	9306      	str	r3, [sp, #24]
 8012776:	ec59 8b18 	vmov	r8, r9, d8
 801277a:	2700      	movs	r7, #0
 801277c:	e01f      	b.n	80127be <__kernel_rem_pio2+0xbe>
 801277e:	42ef      	cmn	r7, r5
 8012780:	d407      	bmi.n	8012792 <__kernel_rem_pio2+0x92>
 8012782:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012786:	f7ed fee5 	bl	8000554 <__aeabi_i2d>
 801278a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801278e:	3501      	adds	r5, #1
 8012790:	e7df      	b.n	8012752 <__kernel_rem_pio2+0x52>
 8012792:	ec51 0b18 	vmov	r0, r1, d8
 8012796:	e7f8      	b.n	801278a <__kernel_rem_pio2+0x8a>
 8012798:	9906      	ldr	r1, [sp, #24]
 801279a:	9d02      	ldr	r5, [sp, #8]
 801279c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80127a0:	9106      	str	r1, [sp, #24]
 80127a2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80127a6:	9502      	str	r5, [sp, #8]
 80127a8:	f7ed ff3e 	bl	8000628 <__aeabi_dmul>
 80127ac:	4602      	mov	r2, r0
 80127ae:	460b      	mov	r3, r1
 80127b0:	4640      	mov	r0, r8
 80127b2:	4649      	mov	r1, r9
 80127b4:	f7ed fd82 	bl	80002bc <__adddf3>
 80127b8:	3701      	adds	r7, #1
 80127ba:	4680      	mov	r8, r0
 80127bc:	4689      	mov	r9, r1
 80127be:	9b07      	ldr	r3, [sp, #28]
 80127c0:	429f      	cmp	r7, r3
 80127c2:	dde9      	ble.n	8012798 <__kernel_rem_pio2+0x98>
 80127c4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80127c8:	3601      	adds	r6, #1
 80127ca:	e7c9      	b.n	8012760 <__kernel_rem_pio2+0x60>
 80127cc:	9b04      	ldr	r3, [sp, #16]
 80127ce:	aa0e      	add	r2, sp, #56	; 0x38
 80127d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80127d4:	930c      	str	r3, [sp, #48]	; 0x30
 80127d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80127d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80127dc:	9c04      	ldr	r4, [sp, #16]
 80127de:	930b      	str	r3, [sp, #44]	; 0x2c
 80127e0:	ab9a      	add	r3, sp, #616	; 0x268
 80127e2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80127e6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80127ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80127ee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80127f2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80127f6:	ab9a      	add	r3, sp, #616	; 0x268
 80127f8:	445b      	add	r3, fp
 80127fa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80127fe:	2500      	movs	r5, #0
 8012800:	1b63      	subs	r3, r4, r5
 8012802:	2b00      	cmp	r3, #0
 8012804:	dc78      	bgt.n	80128f8 <__kernel_rem_pio2+0x1f8>
 8012806:	4650      	mov	r0, sl
 8012808:	ec49 8b10 	vmov	d0, r8, r9
 801280c:	f000 fc00 	bl	8013010 <scalbn>
 8012810:	ec57 6b10 	vmov	r6, r7, d0
 8012814:	2200      	movs	r2, #0
 8012816:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801281a:	ee10 0a10 	vmov	r0, s0
 801281e:	4639      	mov	r1, r7
 8012820:	f7ed ff02 	bl	8000628 <__aeabi_dmul>
 8012824:	ec41 0b10 	vmov	d0, r0, r1
 8012828:	f000 fb6e 	bl	8012f08 <floor>
 801282c:	2200      	movs	r2, #0
 801282e:	ec51 0b10 	vmov	r0, r1, d0
 8012832:	4b7e      	ldr	r3, [pc, #504]	; (8012a2c <__kernel_rem_pio2+0x32c>)
 8012834:	f7ed fef8 	bl	8000628 <__aeabi_dmul>
 8012838:	4602      	mov	r2, r0
 801283a:	460b      	mov	r3, r1
 801283c:	4630      	mov	r0, r6
 801283e:	4639      	mov	r1, r7
 8012840:	f7ed fd3a 	bl	80002b8 <__aeabi_dsub>
 8012844:	460f      	mov	r7, r1
 8012846:	4606      	mov	r6, r0
 8012848:	f7ee f99e 	bl	8000b88 <__aeabi_d2iz>
 801284c:	9006      	str	r0, [sp, #24]
 801284e:	f7ed fe81 	bl	8000554 <__aeabi_i2d>
 8012852:	4602      	mov	r2, r0
 8012854:	460b      	mov	r3, r1
 8012856:	4630      	mov	r0, r6
 8012858:	4639      	mov	r1, r7
 801285a:	f7ed fd2d 	bl	80002b8 <__aeabi_dsub>
 801285e:	f1ba 0f00 	cmp.w	sl, #0
 8012862:	4606      	mov	r6, r0
 8012864:	460f      	mov	r7, r1
 8012866:	dd6c      	ble.n	8012942 <__kernel_rem_pio2+0x242>
 8012868:	1e62      	subs	r2, r4, #1
 801286a:	ab0e      	add	r3, sp, #56	; 0x38
 801286c:	f1ca 0118 	rsb	r1, sl, #24
 8012870:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012874:	9d06      	ldr	r5, [sp, #24]
 8012876:	fa40 f301 	asr.w	r3, r0, r1
 801287a:	441d      	add	r5, r3
 801287c:	408b      	lsls	r3, r1
 801287e:	1ac0      	subs	r0, r0, r3
 8012880:	ab0e      	add	r3, sp, #56	; 0x38
 8012882:	9506      	str	r5, [sp, #24]
 8012884:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012888:	f1ca 0317 	rsb	r3, sl, #23
 801288c:	fa40 f303 	asr.w	r3, r0, r3
 8012890:	9302      	str	r3, [sp, #8]
 8012892:	9b02      	ldr	r3, [sp, #8]
 8012894:	2b00      	cmp	r3, #0
 8012896:	dd62      	ble.n	801295e <__kernel_rem_pio2+0x25e>
 8012898:	9b06      	ldr	r3, [sp, #24]
 801289a:	2200      	movs	r2, #0
 801289c:	3301      	adds	r3, #1
 801289e:	9306      	str	r3, [sp, #24]
 80128a0:	4615      	mov	r5, r2
 80128a2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80128a6:	4294      	cmp	r4, r2
 80128a8:	f300 8095 	bgt.w	80129d6 <__kernel_rem_pio2+0x2d6>
 80128ac:	f1ba 0f00 	cmp.w	sl, #0
 80128b0:	dd07      	ble.n	80128c2 <__kernel_rem_pio2+0x1c2>
 80128b2:	f1ba 0f01 	cmp.w	sl, #1
 80128b6:	f000 80a2 	beq.w	80129fe <__kernel_rem_pio2+0x2fe>
 80128ba:	f1ba 0f02 	cmp.w	sl, #2
 80128be:	f000 80c1 	beq.w	8012a44 <__kernel_rem_pio2+0x344>
 80128c2:	9b02      	ldr	r3, [sp, #8]
 80128c4:	2b02      	cmp	r3, #2
 80128c6:	d14a      	bne.n	801295e <__kernel_rem_pio2+0x25e>
 80128c8:	4632      	mov	r2, r6
 80128ca:	463b      	mov	r3, r7
 80128cc:	2000      	movs	r0, #0
 80128ce:	4958      	ldr	r1, [pc, #352]	; (8012a30 <__kernel_rem_pio2+0x330>)
 80128d0:	f7ed fcf2 	bl	80002b8 <__aeabi_dsub>
 80128d4:	4606      	mov	r6, r0
 80128d6:	460f      	mov	r7, r1
 80128d8:	2d00      	cmp	r5, #0
 80128da:	d040      	beq.n	801295e <__kernel_rem_pio2+0x25e>
 80128dc:	4650      	mov	r0, sl
 80128de:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012a20 <__kernel_rem_pio2+0x320>
 80128e2:	f000 fb95 	bl	8013010 <scalbn>
 80128e6:	4630      	mov	r0, r6
 80128e8:	4639      	mov	r1, r7
 80128ea:	ec53 2b10 	vmov	r2, r3, d0
 80128ee:	f7ed fce3 	bl	80002b8 <__aeabi_dsub>
 80128f2:	4606      	mov	r6, r0
 80128f4:	460f      	mov	r7, r1
 80128f6:	e032      	b.n	801295e <__kernel_rem_pio2+0x25e>
 80128f8:	2200      	movs	r2, #0
 80128fa:	4b4e      	ldr	r3, [pc, #312]	; (8012a34 <__kernel_rem_pio2+0x334>)
 80128fc:	4640      	mov	r0, r8
 80128fe:	4649      	mov	r1, r9
 8012900:	f7ed fe92 	bl	8000628 <__aeabi_dmul>
 8012904:	f7ee f940 	bl	8000b88 <__aeabi_d2iz>
 8012908:	f7ed fe24 	bl	8000554 <__aeabi_i2d>
 801290c:	2200      	movs	r2, #0
 801290e:	4b4a      	ldr	r3, [pc, #296]	; (8012a38 <__kernel_rem_pio2+0x338>)
 8012910:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012914:	f7ed fe88 	bl	8000628 <__aeabi_dmul>
 8012918:	4602      	mov	r2, r0
 801291a:	460b      	mov	r3, r1
 801291c:	4640      	mov	r0, r8
 801291e:	4649      	mov	r1, r9
 8012920:	f7ed fcca 	bl	80002b8 <__aeabi_dsub>
 8012924:	f7ee f930 	bl	8000b88 <__aeabi_d2iz>
 8012928:	ab0e      	add	r3, sp, #56	; 0x38
 801292a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801292e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012936:	f7ed fcc1 	bl	80002bc <__adddf3>
 801293a:	3501      	adds	r5, #1
 801293c:	4680      	mov	r8, r0
 801293e:	4689      	mov	r9, r1
 8012940:	e75e      	b.n	8012800 <__kernel_rem_pio2+0x100>
 8012942:	d105      	bne.n	8012950 <__kernel_rem_pio2+0x250>
 8012944:	1e63      	subs	r3, r4, #1
 8012946:	aa0e      	add	r2, sp, #56	; 0x38
 8012948:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801294c:	15c3      	asrs	r3, r0, #23
 801294e:	e79f      	b.n	8012890 <__kernel_rem_pio2+0x190>
 8012950:	2200      	movs	r2, #0
 8012952:	4b3a      	ldr	r3, [pc, #232]	; (8012a3c <__kernel_rem_pio2+0x33c>)
 8012954:	f7ee f8ee 	bl	8000b34 <__aeabi_dcmpge>
 8012958:	2800      	cmp	r0, #0
 801295a:	d139      	bne.n	80129d0 <__kernel_rem_pio2+0x2d0>
 801295c:	9002      	str	r0, [sp, #8]
 801295e:	2200      	movs	r2, #0
 8012960:	2300      	movs	r3, #0
 8012962:	4630      	mov	r0, r6
 8012964:	4639      	mov	r1, r7
 8012966:	f7ee f8c7 	bl	8000af8 <__aeabi_dcmpeq>
 801296a:	2800      	cmp	r0, #0
 801296c:	f000 80c7 	beq.w	8012afe <__kernel_rem_pio2+0x3fe>
 8012970:	1e65      	subs	r5, r4, #1
 8012972:	462b      	mov	r3, r5
 8012974:	2200      	movs	r2, #0
 8012976:	9904      	ldr	r1, [sp, #16]
 8012978:	428b      	cmp	r3, r1
 801297a:	da6a      	bge.n	8012a52 <__kernel_rem_pio2+0x352>
 801297c:	2a00      	cmp	r2, #0
 801297e:	f000 8088 	beq.w	8012a92 <__kernel_rem_pio2+0x392>
 8012982:	ab0e      	add	r3, sp, #56	; 0x38
 8012984:	f1aa 0a18 	sub.w	sl, sl, #24
 8012988:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801298c:	2b00      	cmp	r3, #0
 801298e:	f000 80b4 	beq.w	8012afa <__kernel_rem_pio2+0x3fa>
 8012992:	4650      	mov	r0, sl
 8012994:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012a20 <__kernel_rem_pio2+0x320>
 8012998:	f000 fb3a 	bl	8013010 <scalbn>
 801299c:	00ec      	lsls	r4, r5, #3
 801299e:	ab72      	add	r3, sp, #456	; 0x1c8
 80129a0:	191e      	adds	r6, r3, r4
 80129a2:	ec59 8b10 	vmov	r8, r9, d0
 80129a6:	f106 0a08 	add.w	sl, r6, #8
 80129aa:	462f      	mov	r7, r5
 80129ac:	2f00      	cmp	r7, #0
 80129ae:	f280 80df 	bge.w	8012b70 <__kernel_rem_pio2+0x470>
 80129b2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012a18 <__kernel_rem_pio2+0x318>
 80129b6:	f04f 0a00 	mov.w	sl, #0
 80129ba:	eba5 030a 	sub.w	r3, r5, sl
 80129be:	2b00      	cmp	r3, #0
 80129c0:	f2c0 810a 	blt.w	8012bd8 <__kernel_rem_pio2+0x4d8>
 80129c4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012a40 <__kernel_rem_pio2+0x340>
 80129c8:	ec59 8b18 	vmov	r8, r9, d8
 80129cc:	2700      	movs	r7, #0
 80129ce:	e0f5      	b.n	8012bbc <__kernel_rem_pio2+0x4bc>
 80129d0:	2302      	movs	r3, #2
 80129d2:	9302      	str	r3, [sp, #8]
 80129d4:	e760      	b.n	8012898 <__kernel_rem_pio2+0x198>
 80129d6:	ab0e      	add	r3, sp, #56	; 0x38
 80129d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129dc:	b94d      	cbnz	r5, 80129f2 <__kernel_rem_pio2+0x2f2>
 80129de:	b12b      	cbz	r3, 80129ec <__kernel_rem_pio2+0x2ec>
 80129e0:	a80e      	add	r0, sp, #56	; 0x38
 80129e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80129e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80129ea:	2301      	movs	r3, #1
 80129ec:	3201      	adds	r2, #1
 80129ee:	461d      	mov	r5, r3
 80129f0:	e759      	b.n	80128a6 <__kernel_rem_pio2+0x1a6>
 80129f2:	a80e      	add	r0, sp, #56	; 0x38
 80129f4:	1acb      	subs	r3, r1, r3
 80129f6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80129fa:	462b      	mov	r3, r5
 80129fc:	e7f6      	b.n	80129ec <__kernel_rem_pio2+0x2ec>
 80129fe:	1e62      	subs	r2, r4, #1
 8012a00:	ab0e      	add	r3, sp, #56	; 0x38
 8012a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a06:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012a0a:	a90e      	add	r1, sp, #56	; 0x38
 8012a0c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012a10:	e757      	b.n	80128c2 <__kernel_rem_pio2+0x1c2>
 8012a12:	bf00      	nop
 8012a14:	f3af 8000 	nop.w
	...
 8012a24:	3ff00000 	.word	0x3ff00000
 8012a28:	08018788 	.word	0x08018788
 8012a2c:	40200000 	.word	0x40200000
 8012a30:	3ff00000 	.word	0x3ff00000
 8012a34:	3e700000 	.word	0x3e700000
 8012a38:	41700000 	.word	0x41700000
 8012a3c:	3fe00000 	.word	0x3fe00000
 8012a40:	08018748 	.word	0x08018748
 8012a44:	1e62      	subs	r2, r4, #1
 8012a46:	ab0e      	add	r3, sp, #56	; 0x38
 8012a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a4c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012a50:	e7db      	b.n	8012a0a <__kernel_rem_pio2+0x30a>
 8012a52:	a90e      	add	r1, sp, #56	; 0x38
 8012a54:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	430a      	orrs	r2, r1
 8012a5c:	e78b      	b.n	8012976 <__kernel_rem_pio2+0x276>
 8012a5e:	3301      	adds	r3, #1
 8012a60:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012a64:	2900      	cmp	r1, #0
 8012a66:	d0fa      	beq.n	8012a5e <__kernel_rem_pio2+0x35e>
 8012a68:	9a08      	ldr	r2, [sp, #32]
 8012a6a:	4422      	add	r2, r4
 8012a6c:	00d2      	lsls	r2, r2, #3
 8012a6e:	a922      	add	r1, sp, #136	; 0x88
 8012a70:	18e3      	adds	r3, r4, r3
 8012a72:	9206      	str	r2, [sp, #24]
 8012a74:	440a      	add	r2, r1
 8012a76:	9302      	str	r3, [sp, #8]
 8012a78:	f10b 0108 	add.w	r1, fp, #8
 8012a7c:	f102 0308 	add.w	r3, r2, #8
 8012a80:	1c66      	adds	r6, r4, #1
 8012a82:	910a      	str	r1, [sp, #40]	; 0x28
 8012a84:	2500      	movs	r5, #0
 8012a86:	930d      	str	r3, [sp, #52]	; 0x34
 8012a88:	9b02      	ldr	r3, [sp, #8]
 8012a8a:	42b3      	cmp	r3, r6
 8012a8c:	da04      	bge.n	8012a98 <__kernel_rem_pio2+0x398>
 8012a8e:	461c      	mov	r4, r3
 8012a90:	e6a6      	b.n	80127e0 <__kernel_rem_pio2+0xe0>
 8012a92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a94:	2301      	movs	r3, #1
 8012a96:	e7e3      	b.n	8012a60 <__kernel_rem_pio2+0x360>
 8012a98:	9b06      	ldr	r3, [sp, #24]
 8012a9a:	18ef      	adds	r7, r5, r3
 8012a9c:	ab22      	add	r3, sp, #136	; 0x88
 8012a9e:	441f      	add	r7, r3
 8012aa0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012aa2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8012aa6:	f7ed fd55 	bl	8000554 <__aeabi_i2d>
 8012aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aac:	461c      	mov	r4, r3
 8012aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ab0:	e9c7 0100 	strd	r0, r1, [r7]
 8012ab4:	eb03 0b05 	add.w	fp, r3, r5
 8012ab8:	2700      	movs	r7, #0
 8012aba:	f04f 0800 	mov.w	r8, #0
 8012abe:	f04f 0900 	mov.w	r9, #0
 8012ac2:	9b07      	ldr	r3, [sp, #28]
 8012ac4:	429f      	cmp	r7, r3
 8012ac6:	dd08      	ble.n	8012ada <__kernel_rem_pio2+0x3da>
 8012ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aca:	aa72      	add	r2, sp, #456	; 0x1c8
 8012acc:	18eb      	adds	r3, r5, r3
 8012ace:	4413      	add	r3, r2
 8012ad0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012ad4:	3601      	adds	r6, #1
 8012ad6:	3508      	adds	r5, #8
 8012ad8:	e7d6      	b.n	8012a88 <__kernel_rem_pio2+0x388>
 8012ada:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012ade:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012ae2:	f7ed fda1 	bl	8000628 <__aeabi_dmul>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	460b      	mov	r3, r1
 8012aea:	4640      	mov	r0, r8
 8012aec:	4649      	mov	r1, r9
 8012aee:	f7ed fbe5 	bl	80002bc <__adddf3>
 8012af2:	3701      	adds	r7, #1
 8012af4:	4680      	mov	r8, r0
 8012af6:	4689      	mov	r9, r1
 8012af8:	e7e3      	b.n	8012ac2 <__kernel_rem_pio2+0x3c2>
 8012afa:	3d01      	subs	r5, #1
 8012afc:	e741      	b.n	8012982 <__kernel_rem_pio2+0x282>
 8012afe:	f1ca 0000 	rsb	r0, sl, #0
 8012b02:	ec47 6b10 	vmov	d0, r6, r7
 8012b06:	f000 fa83 	bl	8013010 <scalbn>
 8012b0a:	ec57 6b10 	vmov	r6, r7, d0
 8012b0e:	2200      	movs	r2, #0
 8012b10:	4b99      	ldr	r3, [pc, #612]	; (8012d78 <__kernel_rem_pio2+0x678>)
 8012b12:	ee10 0a10 	vmov	r0, s0
 8012b16:	4639      	mov	r1, r7
 8012b18:	f7ee f80c 	bl	8000b34 <__aeabi_dcmpge>
 8012b1c:	b1f8      	cbz	r0, 8012b5e <__kernel_rem_pio2+0x45e>
 8012b1e:	2200      	movs	r2, #0
 8012b20:	4b96      	ldr	r3, [pc, #600]	; (8012d7c <__kernel_rem_pio2+0x67c>)
 8012b22:	4630      	mov	r0, r6
 8012b24:	4639      	mov	r1, r7
 8012b26:	f7ed fd7f 	bl	8000628 <__aeabi_dmul>
 8012b2a:	f7ee f82d 	bl	8000b88 <__aeabi_d2iz>
 8012b2e:	4680      	mov	r8, r0
 8012b30:	f7ed fd10 	bl	8000554 <__aeabi_i2d>
 8012b34:	2200      	movs	r2, #0
 8012b36:	4b90      	ldr	r3, [pc, #576]	; (8012d78 <__kernel_rem_pio2+0x678>)
 8012b38:	f7ed fd76 	bl	8000628 <__aeabi_dmul>
 8012b3c:	460b      	mov	r3, r1
 8012b3e:	4602      	mov	r2, r0
 8012b40:	4639      	mov	r1, r7
 8012b42:	4630      	mov	r0, r6
 8012b44:	f7ed fbb8 	bl	80002b8 <__aeabi_dsub>
 8012b48:	f7ee f81e 	bl	8000b88 <__aeabi_d2iz>
 8012b4c:	1c65      	adds	r5, r4, #1
 8012b4e:	ab0e      	add	r3, sp, #56	; 0x38
 8012b50:	f10a 0a18 	add.w	sl, sl, #24
 8012b54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012b58:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012b5c:	e719      	b.n	8012992 <__kernel_rem_pio2+0x292>
 8012b5e:	4630      	mov	r0, r6
 8012b60:	4639      	mov	r1, r7
 8012b62:	f7ee f811 	bl	8000b88 <__aeabi_d2iz>
 8012b66:	ab0e      	add	r3, sp, #56	; 0x38
 8012b68:	4625      	mov	r5, r4
 8012b6a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012b6e:	e710      	b.n	8012992 <__kernel_rem_pio2+0x292>
 8012b70:	ab0e      	add	r3, sp, #56	; 0x38
 8012b72:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012b76:	f7ed fced 	bl	8000554 <__aeabi_i2d>
 8012b7a:	4642      	mov	r2, r8
 8012b7c:	464b      	mov	r3, r9
 8012b7e:	f7ed fd53 	bl	8000628 <__aeabi_dmul>
 8012b82:	2200      	movs	r2, #0
 8012b84:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012b88:	4b7c      	ldr	r3, [pc, #496]	; (8012d7c <__kernel_rem_pio2+0x67c>)
 8012b8a:	4640      	mov	r0, r8
 8012b8c:	4649      	mov	r1, r9
 8012b8e:	f7ed fd4b 	bl	8000628 <__aeabi_dmul>
 8012b92:	3f01      	subs	r7, #1
 8012b94:	4680      	mov	r8, r0
 8012b96:	4689      	mov	r9, r1
 8012b98:	e708      	b.n	80129ac <__kernel_rem_pio2+0x2ac>
 8012b9a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012ba6:	f7ed fd3f 	bl	8000628 <__aeabi_dmul>
 8012baa:	4602      	mov	r2, r0
 8012bac:	460b      	mov	r3, r1
 8012bae:	4640      	mov	r0, r8
 8012bb0:	4649      	mov	r1, r9
 8012bb2:	f7ed fb83 	bl	80002bc <__adddf3>
 8012bb6:	3701      	adds	r7, #1
 8012bb8:	4680      	mov	r8, r0
 8012bba:	4689      	mov	r9, r1
 8012bbc:	9b04      	ldr	r3, [sp, #16]
 8012bbe:	429f      	cmp	r7, r3
 8012bc0:	dc01      	bgt.n	8012bc6 <__kernel_rem_pio2+0x4c6>
 8012bc2:	45ba      	cmp	sl, r7
 8012bc4:	dae9      	bge.n	8012b9a <__kernel_rem_pio2+0x49a>
 8012bc6:	ab4a      	add	r3, sp, #296	; 0x128
 8012bc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012bcc:	e9c3 8900 	strd	r8, r9, [r3]
 8012bd0:	f10a 0a01 	add.w	sl, sl, #1
 8012bd4:	3e08      	subs	r6, #8
 8012bd6:	e6f0      	b.n	80129ba <__kernel_rem_pio2+0x2ba>
 8012bd8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012bda:	2b03      	cmp	r3, #3
 8012bdc:	d85b      	bhi.n	8012c96 <__kernel_rem_pio2+0x596>
 8012bde:	e8df f003 	tbb	[pc, r3]
 8012be2:	264a      	.short	0x264a
 8012be4:	0226      	.short	0x0226
 8012be6:	ab9a      	add	r3, sp, #616	; 0x268
 8012be8:	441c      	add	r4, r3
 8012bea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012bee:	46a2      	mov	sl, r4
 8012bf0:	46ab      	mov	fp, r5
 8012bf2:	f1bb 0f00 	cmp.w	fp, #0
 8012bf6:	dc6c      	bgt.n	8012cd2 <__kernel_rem_pio2+0x5d2>
 8012bf8:	46a2      	mov	sl, r4
 8012bfa:	46ab      	mov	fp, r5
 8012bfc:	f1bb 0f01 	cmp.w	fp, #1
 8012c00:	f300 8086 	bgt.w	8012d10 <__kernel_rem_pio2+0x610>
 8012c04:	2000      	movs	r0, #0
 8012c06:	2100      	movs	r1, #0
 8012c08:	2d01      	cmp	r5, #1
 8012c0a:	f300 80a0 	bgt.w	8012d4e <__kernel_rem_pio2+0x64e>
 8012c0e:	9b02      	ldr	r3, [sp, #8]
 8012c10:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012c14:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	f040 809e 	bne.w	8012d5a <__kernel_rem_pio2+0x65a>
 8012c1e:	9b01      	ldr	r3, [sp, #4]
 8012c20:	e9c3 7800 	strd	r7, r8, [r3]
 8012c24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012c28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012c2c:	e033      	b.n	8012c96 <__kernel_rem_pio2+0x596>
 8012c2e:	3408      	adds	r4, #8
 8012c30:	ab4a      	add	r3, sp, #296	; 0x128
 8012c32:	441c      	add	r4, r3
 8012c34:	462e      	mov	r6, r5
 8012c36:	2000      	movs	r0, #0
 8012c38:	2100      	movs	r1, #0
 8012c3a:	2e00      	cmp	r6, #0
 8012c3c:	da3a      	bge.n	8012cb4 <__kernel_rem_pio2+0x5b4>
 8012c3e:	9b02      	ldr	r3, [sp, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d03d      	beq.n	8012cc0 <__kernel_rem_pio2+0x5c0>
 8012c44:	4602      	mov	r2, r0
 8012c46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c4a:	9c01      	ldr	r4, [sp, #4]
 8012c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8012c50:	4602      	mov	r2, r0
 8012c52:	460b      	mov	r3, r1
 8012c54:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012c58:	f7ed fb2e 	bl	80002b8 <__aeabi_dsub>
 8012c5c:	ae4c      	add	r6, sp, #304	; 0x130
 8012c5e:	2401      	movs	r4, #1
 8012c60:	42a5      	cmp	r5, r4
 8012c62:	da30      	bge.n	8012cc6 <__kernel_rem_pio2+0x5c6>
 8012c64:	9b02      	ldr	r3, [sp, #8]
 8012c66:	b113      	cbz	r3, 8012c6e <__kernel_rem_pio2+0x56e>
 8012c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c6c:	4619      	mov	r1, r3
 8012c6e:	9b01      	ldr	r3, [sp, #4]
 8012c70:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012c74:	e00f      	b.n	8012c96 <__kernel_rem_pio2+0x596>
 8012c76:	ab9a      	add	r3, sp, #616	; 0x268
 8012c78:	441c      	add	r4, r3
 8012c7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012c7e:	2000      	movs	r0, #0
 8012c80:	2100      	movs	r1, #0
 8012c82:	2d00      	cmp	r5, #0
 8012c84:	da10      	bge.n	8012ca8 <__kernel_rem_pio2+0x5a8>
 8012c86:	9b02      	ldr	r3, [sp, #8]
 8012c88:	b113      	cbz	r3, 8012c90 <__kernel_rem_pio2+0x590>
 8012c8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c8e:	4619      	mov	r1, r3
 8012c90:	9b01      	ldr	r3, [sp, #4]
 8012c92:	e9c3 0100 	strd	r0, r1, [r3]
 8012c96:	9b06      	ldr	r3, [sp, #24]
 8012c98:	f003 0007 	and.w	r0, r3, #7
 8012c9c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012ca0:	ecbd 8b02 	vpop	{d8}
 8012ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ca8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012cac:	f7ed fb06 	bl	80002bc <__adddf3>
 8012cb0:	3d01      	subs	r5, #1
 8012cb2:	e7e6      	b.n	8012c82 <__kernel_rem_pio2+0x582>
 8012cb4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012cb8:	f7ed fb00 	bl	80002bc <__adddf3>
 8012cbc:	3e01      	subs	r6, #1
 8012cbe:	e7bc      	b.n	8012c3a <__kernel_rem_pio2+0x53a>
 8012cc0:	4602      	mov	r2, r0
 8012cc2:	460b      	mov	r3, r1
 8012cc4:	e7c1      	b.n	8012c4a <__kernel_rem_pio2+0x54a>
 8012cc6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012cca:	f7ed faf7 	bl	80002bc <__adddf3>
 8012cce:	3401      	adds	r4, #1
 8012cd0:	e7c6      	b.n	8012c60 <__kernel_rem_pio2+0x560>
 8012cd2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012cd6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012cda:	4640      	mov	r0, r8
 8012cdc:	ec53 2b17 	vmov	r2, r3, d7
 8012ce0:	4649      	mov	r1, r9
 8012ce2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012ce6:	f7ed fae9 	bl	80002bc <__adddf3>
 8012cea:	4602      	mov	r2, r0
 8012cec:	460b      	mov	r3, r1
 8012cee:	4606      	mov	r6, r0
 8012cf0:	460f      	mov	r7, r1
 8012cf2:	4640      	mov	r0, r8
 8012cf4:	4649      	mov	r1, r9
 8012cf6:	f7ed fadf 	bl	80002b8 <__aeabi_dsub>
 8012cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012cfe:	f7ed fadd 	bl	80002bc <__adddf3>
 8012d02:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d06:	e9ca 0100 	strd	r0, r1, [sl]
 8012d0a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012d0e:	e770      	b.n	8012bf2 <__kernel_rem_pio2+0x4f2>
 8012d10:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012d14:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012d18:	4630      	mov	r0, r6
 8012d1a:	ec53 2b17 	vmov	r2, r3, d7
 8012d1e:	4639      	mov	r1, r7
 8012d20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012d24:	f7ed faca 	bl	80002bc <__adddf3>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	4680      	mov	r8, r0
 8012d2e:	4689      	mov	r9, r1
 8012d30:	4630      	mov	r0, r6
 8012d32:	4639      	mov	r1, r7
 8012d34:	f7ed fac0 	bl	80002b8 <__aeabi_dsub>
 8012d38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d3c:	f7ed fabe 	bl	80002bc <__adddf3>
 8012d40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012d44:	e9ca 0100 	strd	r0, r1, [sl]
 8012d48:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012d4c:	e756      	b.n	8012bfc <__kernel_rem_pio2+0x4fc>
 8012d4e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012d52:	f7ed fab3 	bl	80002bc <__adddf3>
 8012d56:	3d01      	subs	r5, #1
 8012d58:	e756      	b.n	8012c08 <__kernel_rem_pio2+0x508>
 8012d5a:	9b01      	ldr	r3, [sp, #4]
 8012d5c:	9a01      	ldr	r2, [sp, #4]
 8012d5e:	601f      	str	r7, [r3, #0]
 8012d60:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012d64:	605c      	str	r4, [r3, #4]
 8012d66:	609d      	str	r5, [r3, #8]
 8012d68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012d6c:	60d3      	str	r3, [r2, #12]
 8012d6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d72:	6110      	str	r0, [r2, #16]
 8012d74:	6153      	str	r3, [r2, #20]
 8012d76:	e78e      	b.n	8012c96 <__kernel_rem_pio2+0x596>
 8012d78:	41700000 	.word	0x41700000
 8012d7c:	3e700000 	.word	0x3e700000

08012d80 <__kernel_sin>:
 8012d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d84:	ec55 4b10 	vmov	r4, r5, d0
 8012d88:	b085      	sub	sp, #20
 8012d8a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012d8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012d92:	ed8d 1b00 	vstr	d1, [sp]
 8012d96:	9002      	str	r0, [sp, #8]
 8012d98:	da06      	bge.n	8012da8 <__kernel_sin+0x28>
 8012d9a:	ee10 0a10 	vmov	r0, s0
 8012d9e:	4629      	mov	r1, r5
 8012da0:	f7ed fef2 	bl	8000b88 <__aeabi_d2iz>
 8012da4:	2800      	cmp	r0, #0
 8012da6:	d051      	beq.n	8012e4c <__kernel_sin+0xcc>
 8012da8:	4622      	mov	r2, r4
 8012daa:	462b      	mov	r3, r5
 8012dac:	4620      	mov	r0, r4
 8012dae:	4629      	mov	r1, r5
 8012db0:	f7ed fc3a 	bl	8000628 <__aeabi_dmul>
 8012db4:	4682      	mov	sl, r0
 8012db6:	468b      	mov	fp, r1
 8012db8:	4602      	mov	r2, r0
 8012dba:	460b      	mov	r3, r1
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	4629      	mov	r1, r5
 8012dc0:	f7ed fc32 	bl	8000628 <__aeabi_dmul>
 8012dc4:	a341      	add	r3, pc, #260	; (adr r3, 8012ecc <__kernel_sin+0x14c>)
 8012dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dca:	4680      	mov	r8, r0
 8012dcc:	4689      	mov	r9, r1
 8012dce:	4650      	mov	r0, sl
 8012dd0:	4659      	mov	r1, fp
 8012dd2:	f7ed fc29 	bl	8000628 <__aeabi_dmul>
 8012dd6:	a33f      	add	r3, pc, #252	; (adr r3, 8012ed4 <__kernel_sin+0x154>)
 8012dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ddc:	f7ed fa6c 	bl	80002b8 <__aeabi_dsub>
 8012de0:	4652      	mov	r2, sl
 8012de2:	465b      	mov	r3, fp
 8012de4:	f7ed fc20 	bl	8000628 <__aeabi_dmul>
 8012de8:	a33c      	add	r3, pc, #240	; (adr r3, 8012edc <__kernel_sin+0x15c>)
 8012dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dee:	f7ed fa65 	bl	80002bc <__adddf3>
 8012df2:	4652      	mov	r2, sl
 8012df4:	465b      	mov	r3, fp
 8012df6:	f7ed fc17 	bl	8000628 <__aeabi_dmul>
 8012dfa:	a33a      	add	r3, pc, #232	; (adr r3, 8012ee4 <__kernel_sin+0x164>)
 8012dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e00:	f7ed fa5a 	bl	80002b8 <__aeabi_dsub>
 8012e04:	4652      	mov	r2, sl
 8012e06:	465b      	mov	r3, fp
 8012e08:	f7ed fc0e 	bl	8000628 <__aeabi_dmul>
 8012e0c:	a337      	add	r3, pc, #220	; (adr r3, 8012eec <__kernel_sin+0x16c>)
 8012e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e12:	f7ed fa53 	bl	80002bc <__adddf3>
 8012e16:	9b02      	ldr	r3, [sp, #8]
 8012e18:	4606      	mov	r6, r0
 8012e1a:	460f      	mov	r7, r1
 8012e1c:	b9db      	cbnz	r3, 8012e56 <__kernel_sin+0xd6>
 8012e1e:	4602      	mov	r2, r0
 8012e20:	460b      	mov	r3, r1
 8012e22:	4650      	mov	r0, sl
 8012e24:	4659      	mov	r1, fp
 8012e26:	f7ed fbff 	bl	8000628 <__aeabi_dmul>
 8012e2a:	a325      	add	r3, pc, #148	; (adr r3, 8012ec0 <__kernel_sin+0x140>)
 8012e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e30:	f7ed fa42 	bl	80002b8 <__aeabi_dsub>
 8012e34:	4642      	mov	r2, r8
 8012e36:	464b      	mov	r3, r9
 8012e38:	f7ed fbf6 	bl	8000628 <__aeabi_dmul>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4620      	mov	r0, r4
 8012e42:	4629      	mov	r1, r5
 8012e44:	f7ed fa3a 	bl	80002bc <__adddf3>
 8012e48:	4604      	mov	r4, r0
 8012e4a:	460d      	mov	r5, r1
 8012e4c:	ec45 4b10 	vmov	d0, r4, r5
 8012e50:	b005      	add	sp, #20
 8012e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e56:	2200      	movs	r2, #0
 8012e58:	4b1b      	ldr	r3, [pc, #108]	; (8012ec8 <__kernel_sin+0x148>)
 8012e5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e5e:	f7ed fbe3 	bl	8000628 <__aeabi_dmul>
 8012e62:	4632      	mov	r2, r6
 8012e64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012e68:	463b      	mov	r3, r7
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fbdb 	bl	8000628 <__aeabi_dmul>
 8012e72:	4602      	mov	r2, r0
 8012e74:	460b      	mov	r3, r1
 8012e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012e7a:	f7ed fa1d 	bl	80002b8 <__aeabi_dsub>
 8012e7e:	4652      	mov	r2, sl
 8012e80:	465b      	mov	r3, fp
 8012e82:	f7ed fbd1 	bl	8000628 <__aeabi_dmul>
 8012e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e8a:	f7ed fa15 	bl	80002b8 <__aeabi_dsub>
 8012e8e:	a30c      	add	r3, pc, #48	; (adr r3, 8012ec0 <__kernel_sin+0x140>)
 8012e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e94:	4606      	mov	r6, r0
 8012e96:	460f      	mov	r7, r1
 8012e98:	4640      	mov	r0, r8
 8012e9a:	4649      	mov	r1, r9
 8012e9c:	f7ed fbc4 	bl	8000628 <__aeabi_dmul>
 8012ea0:	4602      	mov	r2, r0
 8012ea2:	460b      	mov	r3, r1
 8012ea4:	4630      	mov	r0, r6
 8012ea6:	4639      	mov	r1, r7
 8012ea8:	f7ed fa08 	bl	80002bc <__adddf3>
 8012eac:	4602      	mov	r2, r0
 8012eae:	460b      	mov	r3, r1
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	4629      	mov	r1, r5
 8012eb4:	f7ed fa00 	bl	80002b8 <__aeabi_dsub>
 8012eb8:	e7c6      	b.n	8012e48 <__kernel_sin+0xc8>
 8012eba:	bf00      	nop
 8012ebc:	f3af 8000 	nop.w
 8012ec0:	55555549 	.word	0x55555549
 8012ec4:	3fc55555 	.word	0x3fc55555
 8012ec8:	3fe00000 	.word	0x3fe00000
 8012ecc:	5acfd57c 	.word	0x5acfd57c
 8012ed0:	3de5d93a 	.word	0x3de5d93a
 8012ed4:	8a2b9ceb 	.word	0x8a2b9ceb
 8012ed8:	3e5ae5e6 	.word	0x3e5ae5e6
 8012edc:	57b1fe7d 	.word	0x57b1fe7d
 8012ee0:	3ec71de3 	.word	0x3ec71de3
 8012ee4:	19c161d5 	.word	0x19c161d5
 8012ee8:	3f2a01a0 	.word	0x3f2a01a0
 8012eec:	1110f8a6 	.word	0x1110f8a6
 8012ef0:	3f811111 	.word	0x3f811111

08012ef4 <fabs>:
 8012ef4:	ec51 0b10 	vmov	r0, r1, d0
 8012ef8:	ee10 2a10 	vmov	r2, s0
 8012efc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f00:	ec43 2b10 	vmov	d0, r2, r3
 8012f04:	4770      	bx	lr
	...

08012f08 <floor>:
 8012f08:	ec51 0b10 	vmov	r0, r1, d0
 8012f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012f14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012f18:	2e13      	cmp	r6, #19
 8012f1a:	460c      	mov	r4, r1
 8012f1c:	ee10 5a10 	vmov	r5, s0
 8012f20:	4680      	mov	r8, r0
 8012f22:	dc34      	bgt.n	8012f8e <floor+0x86>
 8012f24:	2e00      	cmp	r6, #0
 8012f26:	da16      	bge.n	8012f56 <floor+0x4e>
 8012f28:	a335      	add	r3, pc, #212	; (adr r3, 8013000 <floor+0xf8>)
 8012f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2e:	f7ed f9c5 	bl	80002bc <__adddf3>
 8012f32:	2200      	movs	r2, #0
 8012f34:	2300      	movs	r3, #0
 8012f36:	f7ed fe07 	bl	8000b48 <__aeabi_dcmpgt>
 8012f3a:	b148      	cbz	r0, 8012f50 <floor+0x48>
 8012f3c:	2c00      	cmp	r4, #0
 8012f3e:	da59      	bge.n	8012ff4 <floor+0xec>
 8012f40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012f44:	4a30      	ldr	r2, [pc, #192]	; (8013008 <floor+0x100>)
 8012f46:	432b      	orrs	r3, r5
 8012f48:	2500      	movs	r5, #0
 8012f4a:	42ab      	cmp	r3, r5
 8012f4c:	bf18      	it	ne
 8012f4e:	4614      	movne	r4, r2
 8012f50:	4621      	mov	r1, r4
 8012f52:	4628      	mov	r0, r5
 8012f54:	e025      	b.n	8012fa2 <floor+0x9a>
 8012f56:	4f2d      	ldr	r7, [pc, #180]	; (801300c <floor+0x104>)
 8012f58:	4137      	asrs	r7, r6
 8012f5a:	ea01 0307 	and.w	r3, r1, r7
 8012f5e:	4303      	orrs	r3, r0
 8012f60:	d01f      	beq.n	8012fa2 <floor+0x9a>
 8012f62:	a327      	add	r3, pc, #156	; (adr r3, 8013000 <floor+0xf8>)
 8012f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f68:	f7ed f9a8 	bl	80002bc <__adddf3>
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f7ed fdea 	bl	8000b48 <__aeabi_dcmpgt>
 8012f74:	2800      	cmp	r0, #0
 8012f76:	d0eb      	beq.n	8012f50 <floor+0x48>
 8012f78:	2c00      	cmp	r4, #0
 8012f7a:	bfbe      	ittt	lt
 8012f7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012f80:	fa43 f606 	asrlt.w	r6, r3, r6
 8012f84:	19a4      	addlt	r4, r4, r6
 8012f86:	ea24 0407 	bic.w	r4, r4, r7
 8012f8a:	2500      	movs	r5, #0
 8012f8c:	e7e0      	b.n	8012f50 <floor+0x48>
 8012f8e:	2e33      	cmp	r6, #51	; 0x33
 8012f90:	dd0b      	ble.n	8012faa <floor+0xa2>
 8012f92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012f96:	d104      	bne.n	8012fa2 <floor+0x9a>
 8012f98:	ee10 2a10 	vmov	r2, s0
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	f7ed f98d 	bl	80002bc <__adddf3>
 8012fa2:	ec41 0b10 	vmov	d0, r0, r1
 8012fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012faa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012fae:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb2:	fa23 f707 	lsr.w	r7, r3, r7
 8012fb6:	4207      	tst	r7, r0
 8012fb8:	d0f3      	beq.n	8012fa2 <floor+0x9a>
 8012fba:	a311      	add	r3, pc, #68	; (adr r3, 8013000 <floor+0xf8>)
 8012fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc0:	f7ed f97c 	bl	80002bc <__adddf3>
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f7ed fdbe 	bl	8000b48 <__aeabi_dcmpgt>
 8012fcc:	2800      	cmp	r0, #0
 8012fce:	d0bf      	beq.n	8012f50 <floor+0x48>
 8012fd0:	2c00      	cmp	r4, #0
 8012fd2:	da02      	bge.n	8012fda <floor+0xd2>
 8012fd4:	2e14      	cmp	r6, #20
 8012fd6:	d103      	bne.n	8012fe0 <floor+0xd8>
 8012fd8:	3401      	adds	r4, #1
 8012fda:	ea25 0507 	bic.w	r5, r5, r7
 8012fde:	e7b7      	b.n	8012f50 <floor+0x48>
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012fe6:	fa03 f606 	lsl.w	r6, r3, r6
 8012fea:	4435      	add	r5, r6
 8012fec:	4545      	cmp	r5, r8
 8012fee:	bf38      	it	cc
 8012ff0:	18e4      	addcc	r4, r4, r3
 8012ff2:	e7f2      	b.n	8012fda <floor+0xd2>
 8012ff4:	2500      	movs	r5, #0
 8012ff6:	462c      	mov	r4, r5
 8012ff8:	e7aa      	b.n	8012f50 <floor+0x48>
 8012ffa:	bf00      	nop
 8012ffc:	f3af 8000 	nop.w
 8013000:	8800759c 	.word	0x8800759c
 8013004:	7e37e43c 	.word	0x7e37e43c
 8013008:	bff00000 	.word	0xbff00000
 801300c:	000fffff 	.word	0x000fffff

08013010 <scalbn>:
 8013010:	b570      	push	{r4, r5, r6, lr}
 8013012:	ec55 4b10 	vmov	r4, r5, d0
 8013016:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801301a:	4606      	mov	r6, r0
 801301c:	462b      	mov	r3, r5
 801301e:	b9aa      	cbnz	r2, 801304c <scalbn+0x3c>
 8013020:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013024:	4323      	orrs	r3, r4
 8013026:	d03b      	beq.n	80130a0 <scalbn+0x90>
 8013028:	4b31      	ldr	r3, [pc, #196]	; (80130f0 <scalbn+0xe0>)
 801302a:	4629      	mov	r1, r5
 801302c:	2200      	movs	r2, #0
 801302e:	ee10 0a10 	vmov	r0, s0
 8013032:	f7ed faf9 	bl	8000628 <__aeabi_dmul>
 8013036:	4b2f      	ldr	r3, [pc, #188]	; (80130f4 <scalbn+0xe4>)
 8013038:	429e      	cmp	r6, r3
 801303a:	4604      	mov	r4, r0
 801303c:	460d      	mov	r5, r1
 801303e:	da12      	bge.n	8013066 <scalbn+0x56>
 8013040:	a327      	add	r3, pc, #156	; (adr r3, 80130e0 <scalbn+0xd0>)
 8013042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013046:	f7ed faef 	bl	8000628 <__aeabi_dmul>
 801304a:	e009      	b.n	8013060 <scalbn+0x50>
 801304c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013050:	428a      	cmp	r2, r1
 8013052:	d10c      	bne.n	801306e <scalbn+0x5e>
 8013054:	ee10 2a10 	vmov	r2, s0
 8013058:	4620      	mov	r0, r4
 801305a:	4629      	mov	r1, r5
 801305c:	f7ed f92e 	bl	80002bc <__adddf3>
 8013060:	4604      	mov	r4, r0
 8013062:	460d      	mov	r5, r1
 8013064:	e01c      	b.n	80130a0 <scalbn+0x90>
 8013066:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801306a:	460b      	mov	r3, r1
 801306c:	3a36      	subs	r2, #54	; 0x36
 801306e:	4432      	add	r2, r6
 8013070:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013074:	428a      	cmp	r2, r1
 8013076:	dd0b      	ble.n	8013090 <scalbn+0x80>
 8013078:	ec45 4b11 	vmov	d1, r4, r5
 801307c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80130e8 <scalbn+0xd8>
 8013080:	f000 f83c 	bl	80130fc <copysign>
 8013084:	a318      	add	r3, pc, #96	; (adr r3, 80130e8 <scalbn+0xd8>)
 8013086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308a:	ec51 0b10 	vmov	r0, r1, d0
 801308e:	e7da      	b.n	8013046 <scalbn+0x36>
 8013090:	2a00      	cmp	r2, #0
 8013092:	dd08      	ble.n	80130a6 <scalbn+0x96>
 8013094:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013098:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801309c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130a0:	ec45 4b10 	vmov	d0, r4, r5
 80130a4:	bd70      	pop	{r4, r5, r6, pc}
 80130a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80130aa:	da0d      	bge.n	80130c8 <scalbn+0xb8>
 80130ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80130b0:	429e      	cmp	r6, r3
 80130b2:	ec45 4b11 	vmov	d1, r4, r5
 80130b6:	dce1      	bgt.n	801307c <scalbn+0x6c>
 80130b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80130e0 <scalbn+0xd0>
 80130bc:	f000 f81e 	bl	80130fc <copysign>
 80130c0:	a307      	add	r3, pc, #28	; (adr r3, 80130e0 <scalbn+0xd0>)
 80130c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c6:	e7e0      	b.n	801308a <scalbn+0x7a>
 80130c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130cc:	3236      	adds	r2, #54	; 0x36
 80130ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130d6:	4620      	mov	r0, r4
 80130d8:	4629      	mov	r1, r5
 80130da:	2200      	movs	r2, #0
 80130dc:	4b06      	ldr	r3, [pc, #24]	; (80130f8 <scalbn+0xe8>)
 80130de:	e7b2      	b.n	8013046 <scalbn+0x36>
 80130e0:	c2f8f359 	.word	0xc2f8f359
 80130e4:	01a56e1f 	.word	0x01a56e1f
 80130e8:	8800759c 	.word	0x8800759c
 80130ec:	7e37e43c 	.word	0x7e37e43c
 80130f0:	43500000 	.word	0x43500000
 80130f4:	ffff3cb0 	.word	0xffff3cb0
 80130f8:	3c900000 	.word	0x3c900000

080130fc <copysign>:
 80130fc:	ec51 0b10 	vmov	r0, r1, d0
 8013100:	ee11 0a90 	vmov	r0, s3
 8013104:	ee10 2a10 	vmov	r2, s0
 8013108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801310c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013110:	ea41 0300 	orr.w	r3, r1, r0
 8013114:	ec43 2b10 	vmov	d0, r2, r3
 8013118:	4770      	bx	lr
	...

0801311c <__errno>:
 801311c:	4b01      	ldr	r3, [pc, #4]	; (8013124 <__errno+0x8>)
 801311e:	6818      	ldr	r0, [r3, #0]
 8013120:	4770      	bx	lr
 8013122:	bf00      	nop
 8013124:	2000000c 	.word	0x2000000c

08013128 <__libc_init_array>:
 8013128:	b570      	push	{r4, r5, r6, lr}
 801312a:	4e0d      	ldr	r6, [pc, #52]	; (8013160 <__libc_init_array+0x38>)
 801312c:	4c0d      	ldr	r4, [pc, #52]	; (8013164 <__libc_init_array+0x3c>)
 801312e:	1ba4      	subs	r4, r4, r6
 8013130:	10a4      	asrs	r4, r4, #2
 8013132:	2500      	movs	r5, #0
 8013134:	42a5      	cmp	r5, r4
 8013136:	d109      	bne.n	801314c <__libc_init_array+0x24>
 8013138:	4e0b      	ldr	r6, [pc, #44]	; (8013168 <__libc_init_array+0x40>)
 801313a:	4c0c      	ldr	r4, [pc, #48]	; (801316c <__libc_init_array+0x44>)
 801313c:	f004 ff38 	bl	8017fb0 <_init>
 8013140:	1ba4      	subs	r4, r4, r6
 8013142:	10a4      	asrs	r4, r4, #2
 8013144:	2500      	movs	r5, #0
 8013146:	42a5      	cmp	r5, r4
 8013148:	d105      	bne.n	8013156 <__libc_init_array+0x2e>
 801314a:	bd70      	pop	{r4, r5, r6, pc}
 801314c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013150:	4798      	blx	r3
 8013152:	3501      	adds	r5, #1
 8013154:	e7ee      	b.n	8013134 <__libc_init_array+0xc>
 8013156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801315a:	4798      	blx	r3
 801315c:	3501      	adds	r5, #1
 801315e:	e7f2      	b.n	8013146 <__libc_init_array+0x1e>
 8013160:	08018adc 	.word	0x08018adc
 8013164:	08018adc 	.word	0x08018adc
 8013168:	08018adc 	.word	0x08018adc
 801316c:	08018ae4 	.word	0x08018ae4

08013170 <memcpy>:
 8013170:	b510      	push	{r4, lr}
 8013172:	1e43      	subs	r3, r0, #1
 8013174:	440a      	add	r2, r1
 8013176:	4291      	cmp	r1, r2
 8013178:	d100      	bne.n	801317c <memcpy+0xc>
 801317a:	bd10      	pop	{r4, pc}
 801317c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013184:	e7f7      	b.n	8013176 <memcpy+0x6>

08013186 <memset>:
 8013186:	4402      	add	r2, r0
 8013188:	4603      	mov	r3, r0
 801318a:	4293      	cmp	r3, r2
 801318c:	d100      	bne.n	8013190 <memset+0xa>
 801318e:	4770      	bx	lr
 8013190:	f803 1b01 	strb.w	r1, [r3], #1
 8013194:	e7f9      	b.n	801318a <memset+0x4>

08013196 <__cvt>:
 8013196:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801319a:	ec55 4b10 	vmov	r4, r5, d0
 801319e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80131a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80131a4:	2d00      	cmp	r5, #0
 80131a6:	460e      	mov	r6, r1
 80131a8:	4691      	mov	r9, r2
 80131aa:	4619      	mov	r1, r3
 80131ac:	bfb8      	it	lt
 80131ae:	4622      	movlt	r2, r4
 80131b0:	462b      	mov	r3, r5
 80131b2:	f027 0720 	bic.w	r7, r7, #32
 80131b6:	bfbb      	ittet	lt
 80131b8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80131bc:	461d      	movlt	r5, r3
 80131be:	2300      	movge	r3, #0
 80131c0:	232d      	movlt	r3, #45	; 0x2d
 80131c2:	bfb8      	it	lt
 80131c4:	4614      	movlt	r4, r2
 80131c6:	2f46      	cmp	r7, #70	; 0x46
 80131c8:	700b      	strb	r3, [r1, #0]
 80131ca:	d004      	beq.n	80131d6 <__cvt+0x40>
 80131cc:	2f45      	cmp	r7, #69	; 0x45
 80131ce:	d100      	bne.n	80131d2 <__cvt+0x3c>
 80131d0:	3601      	adds	r6, #1
 80131d2:	2102      	movs	r1, #2
 80131d4:	e000      	b.n	80131d8 <__cvt+0x42>
 80131d6:	2103      	movs	r1, #3
 80131d8:	ab03      	add	r3, sp, #12
 80131da:	9301      	str	r3, [sp, #4]
 80131dc:	ab02      	add	r3, sp, #8
 80131de:	9300      	str	r3, [sp, #0]
 80131e0:	4632      	mov	r2, r6
 80131e2:	4653      	mov	r3, sl
 80131e4:	ec45 4b10 	vmov	d0, r4, r5
 80131e8:	f001 ffb2 	bl	8015150 <_dtoa_r>
 80131ec:	2f47      	cmp	r7, #71	; 0x47
 80131ee:	4680      	mov	r8, r0
 80131f0:	d102      	bne.n	80131f8 <__cvt+0x62>
 80131f2:	f019 0f01 	tst.w	r9, #1
 80131f6:	d026      	beq.n	8013246 <__cvt+0xb0>
 80131f8:	2f46      	cmp	r7, #70	; 0x46
 80131fa:	eb08 0906 	add.w	r9, r8, r6
 80131fe:	d111      	bne.n	8013224 <__cvt+0x8e>
 8013200:	f898 3000 	ldrb.w	r3, [r8]
 8013204:	2b30      	cmp	r3, #48	; 0x30
 8013206:	d10a      	bne.n	801321e <__cvt+0x88>
 8013208:	2200      	movs	r2, #0
 801320a:	2300      	movs	r3, #0
 801320c:	4620      	mov	r0, r4
 801320e:	4629      	mov	r1, r5
 8013210:	f7ed fc72 	bl	8000af8 <__aeabi_dcmpeq>
 8013214:	b918      	cbnz	r0, 801321e <__cvt+0x88>
 8013216:	f1c6 0601 	rsb	r6, r6, #1
 801321a:	f8ca 6000 	str.w	r6, [sl]
 801321e:	f8da 3000 	ldr.w	r3, [sl]
 8013222:	4499      	add	r9, r3
 8013224:	2200      	movs	r2, #0
 8013226:	2300      	movs	r3, #0
 8013228:	4620      	mov	r0, r4
 801322a:	4629      	mov	r1, r5
 801322c:	f7ed fc64 	bl	8000af8 <__aeabi_dcmpeq>
 8013230:	b938      	cbnz	r0, 8013242 <__cvt+0xac>
 8013232:	2230      	movs	r2, #48	; 0x30
 8013234:	9b03      	ldr	r3, [sp, #12]
 8013236:	454b      	cmp	r3, r9
 8013238:	d205      	bcs.n	8013246 <__cvt+0xb0>
 801323a:	1c59      	adds	r1, r3, #1
 801323c:	9103      	str	r1, [sp, #12]
 801323e:	701a      	strb	r2, [r3, #0]
 8013240:	e7f8      	b.n	8013234 <__cvt+0x9e>
 8013242:	f8cd 900c 	str.w	r9, [sp, #12]
 8013246:	9b03      	ldr	r3, [sp, #12]
 8013248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801324a:	eba3 0308 	sub.w	r3, r3, r8
 801324e:	4640      	mov	r0, r8
 8013250:	6013      	str	r3, [r2, #0]
 8013252:	b004      	add	sp, #16
 8013254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013258 <__exponent>:
 8013258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801325a:	2900      	cmp	r1, #0
 801325c:	4604      	mov	r4, r0
 801325e:	bfba      	itte	lt
 8013260:	4249      	neglt	r1, r1
 8013262:	232d      	movlt	r3, #45	; 0x2d
 8013264:	232b      	movge	r3, #43	; 0x2b
 8013266:	2909      	cmp	r1, #9
 8013268:	f804 2b02 	strb.w	r2, [r4], #2
 801326c:	7043      	strb	r3, [r0, #1]
 801326e:	dd20      	ble.n	80132b2 <__exponent+0x5a>
 8013270:	f10d 0307 	add.w	r3, sp, #7
 8013274:	461f      	mov	r7, r3
 8013276:	260a      	movs	r6, #10
 8013278:	fb91 f5f6 	sdiv	r5, r1, r6
 801327c:	fb06 1115 	mls	r1, r6, r5, r1
 8013280:	3130      	adds	r1, #48	; 0x30
 8013282:	2d09      	cmp	r5, #9
 8013284:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013288:	f103 32ff 	add.w	r2, r3, #4294967295
 801328c:	4629      	mov	r1, r5
 801328e:	dc09      	bgt.n	80132a4 <__exponent+0x4c>
 8013290:	3130      	adds	r1, #48	; 0x30
 8013292:	3b02      	subs	r3, #2
 8013294:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013298:	42bb      	cmp	r3, r7
 801329a:	4622      	mov	r2, r4
 801329c:	d304      	bcc.n	80132a8 <__exponent+0x50>
 801329e:	1a10      	subs	r0, r2, r0
 80132a0:	b003      	add	sp, #12
 80132a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132a4:	4613      	mov	r3, r2
 80132a6:	e7e7      	b.n	8013278 <__exponent+0x20>
 80132a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ac:	f804 2b01 	strb.w	r2, [r4], #1
 80132b0:	e7f2      	b.n	8013298 <__exponent+0x40>
 80132b2:	2330      	movs	r3, #48	; 0x30
 80132b4:	4419      	add	r1, r3
 80132b6:	7083      	strb	r3, [r0, #2]
 80132b8:	1d02      	adds	r2, r0, #4
 80132ba:	70c1      	strb	r1, [r0, #3]
 80132bc:	e7ef      	b.n	801329e <__exponent+0x46>
	...

080132c0 <_printf_float>:
 80132c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132c4:	b08d      	sub	sp, #52	; 0x34
 80132c6:	460c      	mov	r4, r1
 80132c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80132cc:	4616      	mov	r6, r2
 80132ce:	461f      	mov	r7, r3
 80132d0:	4605      	mov	r5, r0
 80132d2:	f003 f9a9 	bl	8016628 <_localeconv_r>
 80132d6:	6803      	ldr	r3, [r0, #0]
 80132d8:	9304      	str	r3, [sp, #16]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7ec ff90 	bl	8000200 <strlen>
 80132e0:	2300      	movs	r3, #0
 80132e2:	930a      	str	r3, [sp, #40]	; 0x28
 80132e4:	f8d8 3000 	ldr.w	r3, [r8]
 80132e8:	9005      	str	r0, [sp, #20]
 80132ea:	3307      	adds	r3, #7
 80132ec:	f023 0307 	bic.w	r3, r3, #7
 80132f0:	f103 0208 	add.w	r2, r3, #8
 80132f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80132f8:	f8d4 b000 	ldr.w	fp, [r4]
 80132fc:	f8c8 2000 	str.w	r2, [r8]
 8013300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013304:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013308:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801330c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013310:	9307      	str	r3, [sp, #28]
 8013312:	f8cd 8018 	str.w	r8, [sp, #24]
 8013316:	f04f 32ff 	mov.w	r2, #4294967295
 801331a:	4ba7      	ldr	r3, [pc, #668]	; (80135b8 <_printf_float+0x2f8>)
 801331c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013320:	f7ed fc1c 	bl	8000b5c <__aeabi_dcmpun>
 8013324:	bb70      	cbnz	r0, 8013384 <_printf_float+0xc4>
 8013326:	f04f 32ff 	mov.w	r2, #4294967295
 801332a:	4ba3      	ldr	r3, [pc, #652]	; (80135b8 <_printf_float+0x2f8>)
 801332c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013330:	f7ed fbf6 	bl	8000b20 <__aeabi_dcmple>
 8013334:	bb30      	cbnz	r0, 8013384 <_printf_float+0xc4>
 8013336:	2200      	movs	r2, #0
 8013338:	2300      	movs	r3, #0
 801333a:	4640      	mov	r0, r8
 801333c:	4649      	mov	r1, r9
 801333e:	f7ed fbe5 	bl	8000b0c <__aeabi_dcmplt>
 8013342:	b110      	cbz	r0, 801334a <_printf_float+0x8a>
 8013344:	232d      	movs	r3, #45	; 0x2d
 8013346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801334a:	4a9c      	ldr	r2, [pc, #624]	; (80135bc <_printf_float+0x2fc>)
 801334c:	4b9c      	ldr	r3, [pc, #624]	; (80135c0 <_printf_float+0x300>)
 801334e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013352:	bf8c      	ite	hi
 8013354:	4690      	movhi	r8, r2
 8013356:	4698      	movls	r8, r3
 8013358:	2303      	movs	r3, #3
 801335a:	f02b 0204 	bic.w	r2, fp, #4
 801335e:	6123      	str	r3, [r4, #16]
 8013360:	6022      	str	r2, [r4, #0]
 8013362:	f04f 0900 	mov.w	r9, #0
 8013366:	9700      	str	r7, [sp, #0]
 8013368:	4633      	mov	r3, r6
 801336a:	aa0b      	add	r2, sp, #44	; 0x2c
 801336c:	4621      	mov	r1, r4
 801336e:	4628      	mov	r0, r5
 8013370:	f000 f9e6 	bl	8013740 <_printf_common>
 8013374:	3001      	adds	r0, #1
 8013376:	f040 808d 	bne.w	8013494 <_printf_float+0x1d4>
 801337a:	f04f 30ff 	mov.w	r0, #4294967295
 801337e:	b00d      	add	sp, #52	; 0x34
 8013380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013384:	4642      	mov	r2, r8
 8013386:	464b      	mov	r3, r9
 8013388:	4640      	mov	r0, r8
 801338a:	4649      	mov	r1, r9
 801338c:	f7ed fbe6 	bl	8000b5c <__aeabi_dcmpun>
 8013390:	b110      	cbz	r0, 8013398 <_printf_float+0xd8>
 8013392:	4a8c      	ldr	r2, [pc, #560]	; (80135c4 <_printf_float+0x304>)
 8013394:	4b8c      	ldr	r3, [pc, #560]	; (80135c8 <_printf_float+0x308>)
 8013396:	e7da      	b.n	801334e <_printf_float+0x8e>
 8013398:	6861      	ldr	r1, [r4, #4]
 801339a:	1c4b      	adds	r3, r1, #1
 801339c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80133a0:	a80a      	add	r0, sp, #40	; 0x28
 80133a2:	d13e      	bne.n	8013422 <_printf_float+0x162>
 80133a4:	2306      	movs	r3, #6
 80133a6:	6063      	str	r3, [r4, #4]
 80133a8:	2300      	movs	r3, #0
 80133aa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80133ae:	ab09      	add	r3, sp, #36	; 0x24
 80133b0:	9300      	str	r3, [sp, #0]
 80133b2:	ec49 8b10 	vmov	d0, r8, r9
 80133b6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80133ba:	6022      	str	r2, [r4, #0]
 80133bc:	f8cd a004 	str.w	sl, [sp, #4]
 80133c0:	6861      	ldr	r1, [r4, #4]
 80133c2:	4628      	mov	r0, r5
 80133c4:	f7ff fee7 	bl	8013196 <__cvt>
 80133c8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80133cc:	2b47      	cmp	r3, #71	; 0x47
 80133ce:	4680      	mov	r8, r0
 80133d0:	d109      	bne.n	80133e6 <_printf_float+0x126>
 80133d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133d4:	1cd8      	adds	r0, r3, #3
 80133d6:	db02      	blt.n	80133de <_printf_float+0x11e>
 80133d8:	6862      	ldr	r2, [r4, #4]
 80133da:	4293      	cmp	r3, r2
 80133dc:	dd47      	ble.n	801346e <_printf_float+0x1ae>
 80133de:	f1aa 0a02 	sub.w	sl, sl, #2
 80133e2:	fa5f fa8a 	uxtb.w	sl, sl
 80133e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80133ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133ec:	d824      	bhi.n	8013438 <_printf_float+0x178>
 80133ee:	3901      	subs	r1, #1
 80133f0:	4652      	mov	r2, sl
 80133f2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80133f6:	9109      	str	r1, [sp, #36]	; 0x24
 80133f8:	f7ff ff2e 	bl	8013258 <__exponent>
 80133fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133fe:	1813      	adds	r3, r2, r0
 8013400:	2a01      	cmp	r2, #1
 8013402:	4681      	mov	r9, r0
 8013404:	6123      	str	r3, [r4, #16]
 8013406:	dc02      	bgt.n	801340e <_printf_float+0x14e>
 8013408:	6822      	ldr	r2, [r4, #0]
 801340a:	07d1      	lsls	r1, r2, #31
 801340c:	d501      	bpl.n	8013412 <_printf_float+0x152>
 801340e:	3301      	adds	r3, #1
 8013410:	6123      	str	r3, [r4, #16]
 8013412:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013416:	2b00      	cmp	r3, #0
 8013418:	d0a5      	beq.n	8013366 <_printf_float+0xa6>
 801341a:	232d      	movs	r3, #45	; 0x2d
 801341c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013420:	e7a1      	b.n	8013366 <_printf_float+0xa6>
 8013422:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8013426:	f000 8177 	beq.w	8013718 <_printf_float+0x458>
 801342a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801342e:	d1bb      	bne.n	80133a8 <_printf_float+0xe8>
 8013430:	2900      	cmp	r1, #0
 8013432:	d1b9      	bne.n	80133a8 <_printf_float+0xe8>
 8013434:	2301      	movs	r3, #1
 8013436:	e7b6      	b.n	80133a6 <_printf_float+0xe6>
 8013438:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801343c:	d119      	bne.n	8013472 <_printf_float+0x1b2>
 801343e:	2900      	cmp	r1, #0
 8013440:	6863      	ldr	r3, [r4, #4]
 8013442:	dd0c      	ble.n	801345e <_printf_float+0x19e>
 8013444:	6121      	str	r1, [r4, #16]
 8013446:	b913      	cbnz	r3, 801344e <_printf_float+0x18e>
 8013448:	6822      	ldr	r2, [r4, #0]
 801344a:	07d2      	lsls	r2, r2, #31
 801344c:	d502      	bpl.n	8013454 <_printf_float+0x194>
 801344e:	3301      	adds	r3, #1
 8013450:	440b      	add	r3, r1
 8013452:	6123      	str	r3, [r4, #16]
 8013454:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013456:	65a3      	str	r3, [r4, #88]	; 0x58
 8013458:	f04f 0900 	mov.w	r9, #0
 801345c:	e7d9      	b.n	8013412 <_printf_float+0x152>
 801345e:	b913      	cbnz	r3, 8013466 <_printf_float+0x1a6>
 8013460:	6822      	ldr	r2, [r4, #0]
 8013462:	07d0      	lsls	r0, r2, #31
 8013464:	d501      	bpl.n	801346a <_printf_float+0x1aa>
 8013466:	3302      	adds	r3, #2
 8013468:	e7f3      	b.n	8013452 <_printf_float+0x192>
 801346a:	2301      	movs	r3, #1
 801346c:	e7f1      	b.n	8013452 <_printf_float+0x192>
 801346e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8013472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013476:	4293      	cmp	r3, r2
 8013478:	db05      	blt.n	8013486 <_printf_float+0x1c6>
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	6123      	str	r3, [r4, #16]
 801347e:	07d1      	lsls	r1, r2, #31
 8013480:	d5e8      	bpl.n	8013454 <_printf_float+0x194>
 8013482:	3301      	adds	r3, #1
 8013484:	e7e5      	b.n	8013452 <_printf_float+0x192>
 8013486:	2b00      	cmp	r3, #0
 8013488:	bfd4      	ite	le
 801348a:	f1c3 0302 	rsble	r3, r3, #2
 801348e:	2301      	movgt	r3, #1
 8013490:	4413      	add	r3, r2
 8013492:	e7de      	b.n	8013452 <_printf_float+0x192>
 8013494:	6823      	ldr	r3, [r4, #0]
 8013496:	055a      	lsls	r2, r3, #21
 8013498:	d407      	bmi.n	80134aa <_printf_float+0x1ea>
 801349a:	6923      	ldr	r3, [r4, #16]
 801349c:	4642      	mov	r2, r8
 801349e:	4631      	mov	r1, r6
 80134a0:	4628      	mov	r0, r5
 80134a2:	47b8      	blx	r7
 80134a4:	3001      	adds	r0, #1
 80134a6:	d12b      	bne.n	8013500 <_printf_float+0x240>
 80134a8:	e767      	b.n	801337a <_printf_float+0xba>
 80134aa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80134ae:	f240 80dc 	bls.w	801366a <_printf_float+0x3aa>
 80134b2:	2200      	movs	r2, #0
 80134b4:	2300      	movs	r3, #0
 80134b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134ba:	f7ed fb1d 	bl	8000af8 <__aeabi_dcmpeq>
 80134be:	2800      	cmp	r0, #0
 80134c0:	d033      	beq.n	801352a <_printf_float+0x26a>
 80134c2:	2301      	movs	r3, #1
 80134c4:	4a41      	ldr	r2, [pc, #260]	; (80135cc <_printf_float+0x30c>)
 80134c6:	4631      	mov	r1, r6
 80134c8:	4628      	mov	r0, r5
 80134ca:	47b8      	blx	r7
 80134cc:	3001      	adds	r0, #1
 80134ce:	f43f af54 	beq.w	801337a <_printf_float+0xba>
 80134d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134d6:	429a      	cmp	r2, r3
 80134d8:	db02      	blt.n	80134e0 <_printf_float+0x220>
 80134da:	6823      	ldr	r3, [r4, #0]
 80134dc:	07d8      	lsls	r0, r3, #31
 80134de:	d50f      	bpl.n	8013500 <_printf_float+0x240>
 80134e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80134e4:	4631      	mov	r1, r6
 80134e6:	4628      	mov	r0, r5
 80134e8:	47b8      	blx	r7
 80134ea:	3001      	adds	r0, #1
 80134ec:	f43f af45 	beq.w	801337a <_printf_float+0xba>
 80134f0:	f04f 0800 	mov.w	r8, #0
 80134f4:	f104 091a 	add.w	r9, r4, #26
 80134f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134fa:	3b01      	subs	r3, #1
 80134fc:	4543      	cmp	r3, r8
 80134fe:	dc09      	bgt.n	8013514 <_printf_float+0x254>
 8013500:	6823      	ldr	r3, [r4, #0]
 8013502:	079b      	lsls	r3, r3, #30
 8013504:	f100 8103 	bmi.w	801370e <_printf_float+0x44e>
 8013508:	68e0      	ldr	r0, [r4, #12]
 801350a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801350c:	4298      	cmp	r0, r3
 801350e:	bfb8      	it	lt
 8013510:	4618      	movlt	r0, r3
 8013512:	e734      	b.n	801337e <_printf_float+0xbe>
 8013514:	2301      	movs	r3, #1
 8013516:	464a      	mov	r2, r9
 8013518:	4631      	mov	r1, r6
 801351a:	4628      	mov	r0, r5
 801351c:	47b8      	blx	r7
 801351e:	3001      	adds	r0, #1
 8013520:	f43f af2b 	beq.w	801337a <_printf_float+0xba>
 8013524:	f108 0801 	add.w	r8, r8, #1
 8013528:	e7e6      	b.n	80134f8 <_printf_float+0x238>
 801352a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801352c:	2b00      	cmp	r3, #0
 801352e:	dc2b      	bgt.n	8013588 <_printf_float+0x2c8>
 8013530:	2301      	movs	r3, #1
 8013532:	4a26      	ldr	r2, [pc, #152]	; (80135cc <_printf_float+0x30c>)
 8013534:	4631      	mov	r1, r6
 8013536:	4628      	mov	r0, r5
 8013538:	47b8      	blx	r7
 801353a:	3001      	adds	r0, #1
 801353c:	f43f af1d 	beq.w	801337a <_printf_float+0xba>
 8013540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013542:	b923      	cbnz	r3, 801354e <_printf_float+0x28e>
 8013544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013546:	b913      	cbnz	r3, 801354e <_printf_float+0x28e>
 8013548:	6823      	ldr	r3, [r4, #0]
 801354a:	07d9      	lsls	r1, r3, #31
 801354c:	d5d8      	bpl.n	8013500 <_printf_float+0x240>
 801354e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013552:	4631      	mov	r1, r6
 8013554:	4628      	mov	r0, r5
 8013556:	47b8      	blx	r7
 8013558:	3001      	adds	r0, #1
 801355a:	f43f af0e 	beq.w	801337a <_printf_float+0xba>
 801355e:	f04f 0900 	mov.w	r9, #0
 8013562:	f104 0a1a 	add.w	sl, r4, #26
 8013566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013568:	425b      	negs	r3, r3
 801356a:	454b      	cmp	r3, r9
 801356c:	dc01      	bgt.n	8013572 <_printf_float+0x2b2>
 801356e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013570:	e794      	b.n	801349c <_printf_float+0x1dc>
 8013572:	2301      	movs	r3, #1
 8013574:	4652      	mov	r2, sl
 8013576:	4631      	mov	r1, r6
 8013578:	4628      	mov	r0, r5
 801357a:	47b8      	blx	r7
 801357c:	3001      	adds	r0, #1
 801357e:	f43f aefc 	beq.w	801337a <_printf_float+0xba>
 8013582:	f109 0901 	add.w	r9, r9, #1
 8013586:	e7ee      	b.n	8013566 <_printf_float+0x2a6>
 8013588:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801358a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801358c:	429a      	cmp	r2, r3
 801358e:	bfa8      	it	ge
 8013590:	461a      	movge	r2, r3
 8013592:	2a00      	cmp	r2, #0
 8013594:	4691      	mov	r9, r2
 8013596:	dd07      	ble.n	80135a8 <_printf_float+0x2e8>
 8013598:	4613      	mov	r3, r2
 801359a:	4631      	mov	r1, r6
 801359c:	4642      	mov	r2, r8
 801359e:	4628      	mov	r0, r5
 80135a0:	47b8      	blx	r7
 80135a2:	3001      	adds	r0, #1
 80135a4:	f43f aee9 	beq.w	801337a <_printf_float+0xba>
 80135a8:	f104 031a 	add.w	r3, r4, #26
 80135ac:	f04f 0b00 	mov.w	fp, #0
 80135b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80135b4:	9306      	str	r3, [sp, #24]
 80135b6:	e015      	b.n	80135e4 <_printf_float+0x324>
 80135b8:	7fefffff 	.word	0x7fefffff
 80135bc:	080187a0 	.word	0x080187a0
 80135c0:	0801879c 	.word	0x0801879c
 80135c4:	080187a8 	.word	0x080187a8
 80135c8:	080187a4 	.word	0x080187a4
 80135cc:	080189cb 	.word	0x080189cb
 80135d0:	2301      	movs	r3, #1
 80135d2:	9a06      	ldr	r2, [sp, #24]
 80135d4:	4631      	mov	r1, r6
 80135d6:	4628      	mov	r0, r5
 80135d8:	47b8      	blx	r7
 80135da:	3001      	adds	r0, #1
 80135dc:	f43f aecd 	beq.w	801337a <_printf_float+0xba>
 80135e0:	f10b 0b01 	add.w	fp, fp, #1
 80135e4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80135e8:	ebaa 0309 	sub.w	r3, sl, r9
 80135ec:	455b      	cmp	r3, fp
 80135ee:	dcef      	bgt.n	80135d0 <_printf_float+0x310>
 80135f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80135f4:	429a      	cmp	r2, r3
 80135f6:	44d0      	add	r8, sl
 80135f8:	db15      	blt.n	8013626 <_printf_float+0x366>
 80135fa:	6823      	ldr	r3, [r4, #0]
 80135fc:	07da      	lsls	r2, r3, #31
 80135fe:	d412      	bmi.n	8013626 <_printf_float+0x366>
 8013600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013602:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013604:	eba3 020a 	sub.w	r2, r3, sl
 8013608:	eba3 0a01 	sub.w	sl, r3, r1
 801360c:	4592      	cmp	sl, r2
 801360e:	bfa8      	it	ge
 8013610:	4692      	movge	sl, r2
 8013612:	f1ba 0f00 	cmp.w	sl, #0
 8013616:	dc0e      	bgt.n	8013636 <_printf_float+0x376>
 8013618:	f04f 0800 	mov.w	r8, #0
 801361c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013620:	f104 091a 	add.w	r9, r4, #26
 8013624:	e019      	b.n	801365a <_printf_float+0x39a>
 8013626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801362a:	4631      	mov	r1, r6
 801362c:	4628      	mov	r0, r5
 801362e:	47b8      	blx	r7
 8013630:	3001      	adds	r0, #1
 8013632:	d1e5      	bne.n	8013600 <_printf_float+0x340>
 8013634:	e6a1      	b.n	801337a <_printf_float+0xba>
 8013636:	4653      	mov	r3, sl
 8013638:	4642      	mov	r2, r8
 801363a:	4631      	mov	r1, r6
 801363c:	4628      	mov	r0, r5
 801363e:	47b8      	blx	r7
 8013640:	3001      	adds	r0, #1
 8013642:	d1e9      	bne.n	8013618 <_printf_float+0x358>
 8013644:	e699      	b.n	801337a <_printf_float+0xba>
 8013646:	2301      	movs	r3, #1
 8013648:	464a      	mov	r2, r9
 801364a:	4631      	mov	r1, r6
 801364c:	4628      	mov	r0, r5
 801364e:	47b8      	blx	r7
 8013650:	3001      	adds	r0, #1
 8013652:	f43f ae92 	beq.w	801337a <_printf_float+0xba>
 8013656:	f108 0801 	add.w	r8, r8, #1
 801365a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801365e:	1a9b      	subs	r3, r3, r2
 8013660:	eba3 030a 	sub.w	r3, r3, sl
 8013664:	4543      	cmp	r3, r8
 8013666:	dcee      	bgt.n	8013646 <_printf_float+0x386>
 8013668:	e74a      	b.n	8013500 <_printf_float+0x240>
 801366a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801366c:	2a01      	cmp	r2, #1
 801366e:	dc01      	bgt.n	8013674 <_printf_float+0x3b4>
 8013670:	07db      	lsls	r3, r3, #31
 8013672:	d53a      	bpl.n	80136ea <_printf_float+0x42a>
 8013674:	2301      	movs	r3, #1
 8013676:	4642      	mov	r2, r8
 8013678:	4631      	mov	r1, r6
 801367a:	4628      	mov	r0, r5
 801367c:	47b8      	blx	r7
 801367e:	3001      	adds	r0, #1
 8013680:	f43f ae7b 	beq.w	801337a <_printf_float+0xba>
 8013684:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013688:	4631      	mov	r1, r6
 801368a:	4628      	mov	r0, r5
 801368c:	47b8      	blx	r7
 801368e:	3001      	adds	r0, #1
 8013690:	f108 0801 	add.w	r8, r8, #1
 8013694:	f43f ae71 	beq.w	801337a <_printf_float+0xba>
 8013698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801369a:	2200      	movs	r2, #0
 801369c:	f103 3aff 	add.w	sl, r3, #4294967295
 80136a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80136a4:	2300      	movs	r3, #0
 80136a6:	f7ed fa27 	bl	8000af8 <__aeabi_dcmpeq>
 80136aa:	b9c8      	cbnz	r0, 80136e0 <_printf_float+0x420>
 80136ac:	4653      	mov	r3, sl
 80136ae:	4642      	mov	r2, r8
 80136b0:	4631      	mov	r1, r6
 80136b2:	4628      	mov	r0, r5
 80136b4:	47b8      	blx	r7
 80136b6:	3001      	adds	r0, #1
 80136b8:	d10e      	bne.n	80136d8 <_printf_float+0x418>
 80136ba:	e65e      	b.n	801337a <_printf_float+0xba>
 80136bc:	2301      	movs	r3, #1
 80136be:	4652      	mov	r2, sl
 80136c0:	4631      	mov	r1, r6
 80136c2:	4628      	mov	r0, r5
 80136c4:	47b8      	blx	r7
 80136c6:	3001      	adds	r0, #1
 80136c8:	f43f ae57 	beq.w	801337a <_printf_float+0xba>
 80136cc:	f108 0801 	add.w	r8, r8, #1
 80136d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136d2:	3b01      	subs	r3, #1
 80136d4:	4543      	cmp	r3, r8
 80136d6:	dcf1      	bgt.n	80136bc <_printf_float+0x3fc>
 80136d8:	464b      	mov	r3, r9
 80136da:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80136de:	e6de      	b.n	801349e <_printf_float+0x1de>
 80136e0:	f04f 0800 	mov.w	r8, #0
 80136e4:	f104 0a1a 	add.w	sl, r4, #26
 80136e8:	e7f2      	b.n	80136d0 <_printf_float+0x410>
 80136ea:	2301      	movs	r3, #1
 80136ec:	e7df      	b.n	80136ae <_printf_float+0x3ee>
 80136ee:	2301      	movs	r3, #1
 80136f0:	464a      	mov	r2, r9
 80136f2:	4631      	mov	r1, r6
 80136f4:	4628      	mov	r0, r5
 80136f6:	47b8      	blx	r7
 80136f8:	3001      	adds	r0, #1
 80136fa:	f43f ae3e 	beq.w	801337a <_printf_float+0xba>
 80136fe:	f108 0801 	add.w	r8, r8, #1
 8013702:	68e3      	ldr	r3, [r4, #12]
 8013704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013706:	1a9b      	subs	r3, r3, r2
 8013708:	4543      	cmp	r3, r8
 801370a:	dcf0      	bgt.n	80136ee <_printf_float+0x42e>
 801370c:	e6fc      	b.n	8013508 <_printf_float+0x248>
 801370e:	f04f 0800 	mov.w	r8, #0
 8013712:	f104 0919 	add.w	r9, r4, #25
 8013716:	e7f4      	b.n	8013702 <_printf_float+0x442>
 8013718:	2900      	cmp	r1, #0
 801371a:	f43f ae8b 	beq.w	8013434 <_printf_float+0x174>
 801371e:	2300      	movs	r3, #0
 8013720:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013724:	ab09      	add	r3, sp, #36	; 0x24
 8013726:	9300      	str	r3, [sp, #0]
 8013728:	ec49 8b10 	vmov	d0, r8, r9
 801372c:	6022      	str	r2, [r4, #0]
 801372e:	f8cd a004 	str.w	sl, [sp, #4]
 8013732:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013736:	4628      	mov	r0, r5
 8013738:	f7ff fd2d 	bl	8013196 <__cvt>
 801373c:	4680      	mov	r8, r0
 801373e:	e648      	b.n	80133d2 <_printf_float+0x112>

08013740 <_printf_common>:
 8013740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013744:	4691      	mov	r9, r2
 8013746:	461f      	mov	r7, r3
 8013748:	688a      	ldr	r2, [r1, #8]
 801374a:	690b      	ldr	r3, [r1, #16]
 801374c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013750:	4293      	cmp	r3, r2
 8013752:	bfb8      	it	lt
 8013754:	4613      	movlt	r3, r2
 8013756:	f8c9 3000 	str.w	r3, [r9]
 801375a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801375e:	4606      	mov	r6, r0
 8013760:	460c      	mov	r4, r1
 8013762:	b112      	cbz	r2, 801376a <_printf_common+0x2a>
 8013764:	3301      	adds	r3, #1
 8013766:	f8c9 3000 	str.w	r3, [r9]
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	0699      	lsls	r1, r3, #26
 801376e:	bf42      	ittt	mi
 8013770:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013774:	3302      	addmi	r3, #2
 8013776:	f8c9 3000 	strmi.w	r3, [r9]
 801377a:	6825      	ldr	r5, [r4, #0]
 801377c:	f015 0506 	ands.w	r5, r5, #6
 8013780:	d107      	bne.n	8013792 <_printf_common+0x52>
 8013782:	f104 0a19 	add.w	sl, r4, #25
 8013786:	68e3      	ldr	r3, [r4, #12]
 8013788:	f8d9 2000 	ldr.w	r2, [r9]
 801378c:	1a9b      	subs	r3, r3, r2
 801378e:	42ab      	cmp	r3, r5
 8013790:	dc28      	bgt.n	80137e4 <_printf_common+0xa4>
 8013792:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013796:	6822      	ldr	r2, [r4, #0]
 8013798:	3300      	adds	r3, #0
 801379a:	bf18      	it	ne
 801379c:	2301      	movne	r3, #1
 801379e:	0692      	lsls	r2, r2, #26
 80137a0:	d42d      	bmi.n	80137fe <_printf_common+0xbe>
 80137a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137a6:	4639      	mov	r1, r7
 80137a8:	4630      	mov	r0, r6
 80137aa:	47c0      	blx	r8
 80137ac:	3001      	adds	r0, #1
 80137ae:	d020      	beq.n	80137f2 <_printf_common+0xb2>
 80137b0:	6823      	ldr	r3, [r4, #0]
 80137b2:	68e5      	ldr	r5, [r4, #12]
 80137b4:	f8d9 2000 	ldr.w	r2, [r9]
 80137b8:	f003 0306 	and.w	r3, r3, #6
 80137bc:	2b04      	cmp	r3, #4
 80137be:	bf08      	it	eq
 80137c0:	1aad      	subeq	r5, r5, r2
 80137c2:	68a3      	ldr	r3, [r4, #8]
 80137c4:	6922      	ldr	r2, [r4, #16]
 80137c6:	bf0c      	ite	eq
 80137c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137cc:	2500      	movne	r5, #0
 80137ce:	4293      	cmp	r3, r2
 80137d0:	bfc4      	itt	gt
 80137d2:	1a9b      	subgt	r3, r3, r2
 80137d4:	18ed      	addgt	r5, r5, r3
 80137d6:	f04f 0900 	mov.w	r9, #0
 80137da:	341a      	adds	r4, #26
 80137dc:	454d      	cmp	r5, r9
 80137de:	d11a      	bne.n	8013816 <_printf_common+0xd6>
 80137e0:	2000      	movs	r0, #0
 80137e2:	e008      	b.n	80137f6 <_printf_common+0xb6>
 80137e4:	2301      	movs	r3, #1
 80137e6:	4652      	mov	r2, sl
 80137e8:	4639      	mov	r1, r7
 80137ea:	4630      	mov	r0, r6
 80137ec:	47c0      	blx	r8
 80137ee:	3001      	adds	r0, #1
 80137f0:	d103      	bne.n	80137fa <_printf_common+0xba>
 80137f2:	f04f 30ff 	mov.w	r0, #4294967295
 80137f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137fa:	3501      	adds	r5, #1
 80137fc:	e7c3      	b.n	8013786 <_printf_common+0x46>
 80137fe:	18e1      	adds	r1, r4, r3
 8013800:	1c5a      	adds	r2, r3, #1
 8013802:	2030      	movs	r0, #48	; 0x30
 8013804:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013808:	4422      	add	r2, r4
 801380a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801380e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013812:	3302      	adds	r3, #2
 8013814:	e7c5      	b.n	80137a2 <_printf_common+0x62>
 8013816:	2301      	movs	r3, #1
 8013818:	4622      	mov	r2, r4
 801381a:	4639      	mov	r1, r7
 801381c:	4630      	mov	r0, r6
 801381e:	47c0      	blx	r8
 8013820:	3001      	adds	r0, #1
 8013822:	d0e6      	beq.n	80137f2 <_printf_common+0xb2>
 8013824:	f109 0901 	add.w	r9, r9, #1
 8013828:	e7d8      	b.n	80137dc <_printf_common+0x9c>
	...

0801382c <_printf_i>:
 801382c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013830:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013834:	460c      	mov	r4, r1
 8013836:	7e09      	ldrb	r1, [r1, #24]
 8013838:	b085      	sub	sp, #20
 801383a:	296e      	cmp	r1, #110	; 0x6e
 801383c:	4617      	mov	r7, r2
 801383e:	4606      	mov	r6, r0
 8013840:	4698      	mov	r8, r3
 8013842:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013844:	f000 80b3 	beq.w	80139ae <_printf_i+0x182>
 8013848:	d822      	bhi.n	8013890 <_printf_i+0x64>
 801384a:	2963      	cmp	r1, #99	; 0x63
 801384c:	d036      	beq.n	80138bc <_printf_i+0x90>
 801384e:	d80a      	bhi.n	8013866 <_printf_i+0x3a>
 8013850:	2900      	cmp	r1, #0
 8013852:	f000 80b9 	beq.w	80139c8 <_printf_i+0x19c>
 8013856:	2958      	cmp	r1, #88	; 0x58
 8013858:	f000 8083 	beq.w	8013962 <_printf_i+0x136>
 801385c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013860:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013864:	e032      	b.n	80138cc <_printf_i+0xa0>
 8013866:	2964      	cmp	r1, #100	; 0x64
 8013868:	d001      	beq.n	801386e <_printf_i+0x42>
 801386a:	2969      	cmp	r1, #105	; 0x69
 801386c:	d1f6      	bne.n	801385c <_printf_i+0x30>
 801386e:	6820      	ldr	r0, [r4, #0]
 8013870:	6813      	ldr	r3, [r2, #0]
 8013872:	0605      	lsls	r5, r0, #24
 8013874:	f103 0104 	add.w	r1, r3, #4
 8013878:	d52a      	bpl.n	80138d0 <_printf_i+0xa4>
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	6011      	str	r1, [r2, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	da03      	bge.n	801388a <_printf_i+0x5e>
 8013882:	222d      	movs	r2, #45	; 0x2d
 8013884:	425b      	negs	r3, r3
 8013886:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801388a:	486f      	ldr	r0, [pc, #444]	; (8013a48 <_printf_i+0x21c>)
 801388c:	220a      	movs	r2, #10
 801388e:	e039      	b.n	8013904 <_printf_i+0xd8>
 8013890:	2973      	cmp	r1, #115	; 0x73
 8013892:	f000 809d 	beq.w	80139d0 <_printf_i+0x1a4>
 8013896:	d808      	bhi.n	80138aa <_printf_i+0x7e>
 8013898:	296f      	cmp	r1, #111	; 0x6f
 801389a:	d020      	beq.n	80138de <_printf_i+0xb2>
 801389c:	2970      	cmp	r1, #112	; 0x70
 801389e:	d1dd      	bne.n	801385c <_printf_i+0x30>
 80138a0:	6823      	ldr	r3, [r4, #0]
 80138a2:	f043 0320 	orr.w	r3, r3, #32
 80138a6:	6023      	str	r3, [r4, #0]
 80138a8:	e003      	b.n	80138b2 <_printf_i+0x86>
 80138aa:	2975      	cmp	r1, #117	; 0x75
 80138ac:	d017      	beq.n	80138de <_printf_i+0xb2>
 80138ae:	2978      	cmp	r1, #120	; 0x78
 80138b0:	d1d4      	bne.n	801385c <_printf_i+0x30>
 80138b2:	2378      	movs	r3, #120	; 0x78
 80138b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80138b8:	4864      	ldr	r0, [pc, #400]	; (8013a4c <_printf_i+0x220>)
 80138ba:	e055      	b.n	8013968 <_printf_i+0x13c>
 80138bc:	6813      	ldr	r3, [r2, #0]
 80138be:	1d19      	adds	r1, r3, #4
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	6011      	str	r1, [r2, #0]
 80138c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80138c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138cc:	2301      	movs	r3, #1
 80138ce:	e08c      	b.n	80139ea <_printf_i+0x1be>
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	6011      	str	r1, [r2, #0]
 80138d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80138d8:	bf18      	it	ne
 80138da:	b21b      	sxthne	r3, r3
 80138dc:	e7cf      	b.n	801387e <_printf_i+0x52>
 80138de:	6813      	ldr	r3, [r2, #0]
 80138e0:	6825      	ldr	r5, [r4, #0]
 80138e2:	1d18      	adds	r0, r3, #4
 80138e4:	6010      	str	r0, [r2, #0]
 80138e6:	0628      	lsls	r0, r5, #24
 80138e8:	d501      	bpl.n	80138ee <_printf_i+0xc2>
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	e002      	b.n	80138f4 <_printf_i+0xc8>
 80138ee:	0668      	lsls	r0, r5, #25
 80138f0:	d5fb      	bpl.n	80138ea <_printf_i+0xbe>
 80138f2:	881b      	ldrh	r3, [r3, #0]
 80138f4:	4854      	ldr	r0, [pc, #336]	; (8013a48 <_printf_i+0x21c>)
 80138f6:	296f      	cmp	r1, #111	; 0x6f
 80138f8:	bf14      	ite	ne
 80138fa:	220a      	movne	r2, #10
 80138fc:	2208      	moveq	r2, #8
 80138fe:	2100      	movs	r1, #0
 8013900:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013904:	6865      	ldr	r5, [r4, #4]
 8013906:	60a5      	str	r5, [r4, #8]
 8013908:	2d00      	cmp	r5, #0
 801390a:	f2c0 8095 	blt.w	8013a38 <_printf_i+0x20c>
 801390e:	6821      	ldr	r1, [r4, #0]
 8013910:	f021 0104 	bic.w	r1, r1, #4
 8013914:	6021      	str	r1, [r4, #0]
 8013916:	2b00      	cmp	r3, #0
 8013918:	d13d      	bne.n	8013996 <_printf_i+0x16a>
 801391a:	2d00      	cmp	r5, #0
 801391c:	f040 808e 	bne.w	8013a3c <_printf_i+0x210>
 8013920:	4665      	mov	r5, ip
 8013922:	2a08      	cmp	r2, #8
 8013924:	d10b      	bne.n	801393e <_printf_i+0x112>
 8013926:	6823      	ldr	r3, [r4, #0]
 8013928:	07db      	lsls	r3, r3, #31
 801392a:	d508      	bpl.n	801393e <_printf_i+0x112>
 801392c:	6923      	ldr	r3, [r4, #16]
 801392e:	6862      	ldr	r2, [r4, #4]
 8013930:	429a      	cmp	r2, r3
 8013932:	bfde      	ittt	le
 8013934:	2330      	movle	r3, #48	; 0x30
 8013936:	f805 3c01 	strble.w	r3, [r5, #-1]
 801393a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801393e:	ebac 0305 	sub.w	r3, ip, r5
 8013942:	6123      	str	r3, [r4, #16]
 8013944:	f8cd 8000 	str.w	r8, [sp]
 8013948:	463b      	mov	r3, r7
 801394a:	aa03      	add	r2, sp, #12
 801394c:	4621      	mov	r1, r4
 801394e:	4630      	mov	r0, r6
 8013950:	f7ff fef6 	bl	8013740 <_printf_common>
 8013954:	3001      	adds	r0, #1
 8013956:	d14d      	bne.n	80139f4 <_printf_i+0x1c8>
 8013958:	f04f 30ff 	mov.w	r0, #4294967295
 801395c:	b005      	add	sp, #20
 801395e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013962:	4839      	ldr	r0, [pc, #228]	; (8013a48 <_printf_i+0x21c>)
 8013964:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013968:	6813      	ldr	r3, [r2, #0]
 801396a:	6821      	ldr	r1, [r4, #0]
 801396c:	1d1d      	adds	r5, r3, #4
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	6015      	str	r5, [r2, #0]
 8013972:	060a      	lsls	r2, r1, #24
 8013974:	d50b      	bpl.n	801398e <_printf_i+0x162>
 8013976:	07ca      	lsls	r2, r1, #31
 8013978:	bf44      	itt	mi
 801397a:	f041 0120 	orrmi.w	r1, r1, #32
 801397e:	6021      	strmi	r1, [r4, #0]
 8013980:	b91b      	cbnz	r3, 801398a <_printf_i+0x15e>
 8013982:	6822      	ldr	r2, [r4, #0]
 8013984:	f022 0220 	bic.w	r2, r2, #32
 8013988:	6022      	str	r2, [r4, #0]
 801398a:	2210      	movs	r2, #16
 801398c:	e7b7      	b.n	80138fe <_printf_i+0xd2>
 801398e:	064d      	lsls	r5, r1, #25
 8013990:	bf48      	it	mi
 8013992:	b29b      	uxthmi	r3, r3
 8013994:	e7ef      	b.n	8013976 <_printf_i+0x14a>
 8013996:	4665      	mov	r5, ip
 8013998:	fbb3 f1f2 	udiv	r1, r3, r2
 801399c:	fb02 3311 	mls	r3, r2, r1, r3
 80139a0:	5cc3      	ldrb	r3, [r0, r3]
 80139a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80139a6:	460b      	mov	r3, r1
 80139a8:	2900      	cmp	r1, #0
 80139aa:	d1f5      	bne.n	8013998 <_printf_i+0x16c>
 80139ac:	e7b9      	b.n	8013922 <_printf_i+0xf6>
 80139ae:	6813      	ldr	r3, [r2, #0]
 80139b0:	6825      	ldr	r5, [r4, #0]
 80139b2:	6961      	ldr	r1, [r4, #20]
 80139b4:	1d18      	adds	r0, r3, #4
 80139b6:	6010      	str	r0, [r2, #0]
 80139b8:	0628      	lsls	r0, r5, #24
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	d501      	bpl.n	80139c2 <_printf_i+0x196>
 80139be:	6019      	str	r1, [r3, #0]
 80139c0:	e002      	b.n	80139c8 <_printf_i+0x19c>
 80139c2:	066a      	lsls	r2, r5, #25
 80139c4:	d5fb      	bpl.n	80139be <_printf_i+0x192>
 80139c6:	8019      	strh	r1, [r3, #0]
 80139c8:	2300      	movs	r3, #0
 80139ca:	6123      	str	r3, [r4, #16]
 80139cc:	4665      	mov	r5, ip
 80139ce:	e7b9      	b.n	8013944 <_printf_i+0x118>
 80139d0:	6813      	ldr	r3, [r2, #0]
 80139d2:	1d19      	adds	r1, r3, #4
 80139d4:	6011      	str	r1, [r2, #0]
 80139d6:	681d      	ldr	r5, [r3, #0]
 80139d8:	6862      	ldr	r2, [r4, #4]
 80139da:	2100      	movs	r1, #0
 80139dc:	4628      	mov	r0, r5
 80139de:	f7ec fc17 	bl	8000210 <memchr>
 80139e2:	b108      	cbz	r0, 80139e8 <_printf_i+0x1bc>
 80139e4:	1b40      	subs	r0, r0, r5
 80139e6:	6060      	str	r0, [r4, #4]
 80139e8:	6863      	ldr	r3, [r4, #4]
 80139ea:	6123      	str	r3, [r4, #16]
 80139ec:	2300      	movs	r3, #0
 80139ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139f2:	e7a7      	b.n	8013944 <_printf_i+0x118>
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	462a      	mov	r2, r5
 80139f8:	4639      	mov	r1, r7
 80139fa:	4630      	mov	r0, r6
 80139fc:	47c0      	blx	r8
 80139fe:	3001      	adds	r0, #1
 8013a00:	d0aa      	beq.n	8013958 <_printf_i+0x12c>
 8013a02:	6823      	ldr	r3, [r4, #0]
 8013a04:	079b      	lsls	r3, r3, #30
 8013a06:	d413      	bmi.n	8013a30 <_printf_i+0x204>
 8013a08:	68e0      	ldr	r0, [r4, #12]
 8013a0a:	9b03      	ldr	r3, [sp, #12]
 8013a0c:	4298      	cmp	r0, r3
 8013a0e:	bfb8      	it	lt
 8013a10:	4618      	movlt	r0, r3
 8013a12:	e7a3      	b.n	801395c <_printf_i+0x130>
 8013a14:	2301      	movs	r3, #1
 8013a16:	464a      	mov	r2, r9
 8013a18:	4639      	mov	r1, r7
 8013a1a:	4630      	mov	r0, r6
 8013a1c:	47c0      	blx	r8
 8013a1e:	3001      	adds	r0, #1
 8013a20:	d09a      	beq.n	8013958 <_printf_i+0x12c>
 8013a22:	3501      	adds	r5, #1
 8013a24:	68e3      	ldr	r3, [r4, #12]
 8013a26:	9a03      	ldr	r2, [sp, #12]
 8013a28:	1a9b      	subs	r3, r3, r2
 8013a2a:	42ab      	cmp	r3, r5
 8013a2c:	dcf2      	bgt.n	8013a14 <_printf_i+0x1e8>
 8013a2e:	e7eb      	b.n	8013a08 <_printf_i+0x1dc>
 8013a30:	2500      	movs	r5, #0
 8013a32:	f104 0919 	add.w	r9, r4, #25
 8013a36:	e7f5      	b.n	8013a24 <_printf_i+0x1f8>
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d1ac      	bne.n	8013996 <_printf_i+0x16a>
 8013a3c:	7803      	ldrb	r3, [r0, #0]
 8013a3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013a42:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013a46:	e76c      	b.n	8013922 <_printf_i+0xf6>
 8013a48:	080187ac 	.word	0x080187ac
 8013a4c:	080187bd 	.word	0x080187bd

08013a50 <_scanf_float>:
 8013a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a54:	469a      	mov	sl, r3
 8013a56:	688b      	ldr	r3, [r1, #8]
 8013a58:	4616      	mov	r6, r2
 8013a5a:	1e5a      	subs	r2, r3, #1
 8013a5c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013a60:	b087      	sub	sp, #28
 8013a62:	bf83      	ittte	hi
 8013a64:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013a68:	189b      	addhi	r3, r3, r2
 8013a6a:	9301      	strhi	r3, [sp, #4]
 8013a6c:	2300      	movls	r3, #0
 8013a6e:	bf86      	itte	hi
 8013a70:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013a74:	608b      	strhi	r3, [r1, #8]
 8013a76:	9301      	strls	r3, [sp, #4]
 8013a78:	680b      	ldr	r3, [r1, #0]
 8013a7a:	4688      	mov	r8, r1
 8013a7c:	f04f 0b00 	mov.w	fp, #0
 8013a80:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013a84:	f848 3b1c 	str.w	r3, [r8], #28
 8013a88:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8013a8c:	4607      	mov	r7, r0
 8013a8e:	460c      	mov	r4, r1
 8013a90:	4645      	mov	r5, r8
 8013a92:	465a      	mov	r2, fp
 8013a94:	46d9      	mov	r9, fp
 8013a96:	f8cd b008 	str.w	fp, [sp, #8]
 8013a9a:	68a1      	ldr	r1, [r4, #8]
 8013a9c:	b181      	cbz	r1, 8013ac0 <_scanf_float+0x70>
 8013a9e:	6833      	ldr	r3, [r6, #0]
 8013aa0:	781b      	ldrb	r3, [r3, #0]
 8013aa2:	2b49      	cmp	r3, #73	; 0x49
 8013aa4:	d071      	beq.n	8013b8a <_scanf_float+0x13a>
 8013aa6:	d84d      	bhi.n	8013b44 <_scanf_float+0xf4>
 8013aa8:	2b39      	cmp	r3, #57	; 0x39
 8013aaa:	d840      	bhi.n	8013b2e <_scanf_float+0xde>
 8013aac:	2b31      	cmp	r3, #49	; 0x31
 8013aae:	f080 8088 	bcs.w	8013bc2 <_scanf_float+0x172>
 8013ab2:	2b2d      	cmp	r3, #45	; 0x2d
 8013ab4:	f000 8090 	beq.w	8013bd8 <_scanf_float+0x188>
 8013ab8:	d815      	bhi.n	8013ae6 <_scanf_float+0x96>
 8013aba:	2b2b      	cmp	r3, #43	; 0x2b
 8013abc:	f000 808c 	beq.w	8013bd8 <_scanf_float+0x188>
 8013ac0:	f1b9 0f00 	cmp.w	r9, #0
 8013ac4:	d003      	beq.n	8013ace <_scanf_float+0x7e>
 8013ac6:	6823      	ldr	r3, [r4, #0]
 8013ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013acc:	6023      	str	r3, [r4, #0]
 8013ace:	3a01      	subs	r2, #1
 8013ad0:	2a01      	cmp	r2, #1
 8013ad2:	f200 80ea 	bhi.w	8013caa <_scanf_float+0x25a>
 8013ad6:	4545      	cmp	r5, r8
 8013ad8:	f200 80dc 	bhi.w	8013c94 <_scanf_float+0x244>
 8013adc:	2601      	movs	r6, #1
 8013ade:	4630      	mov	r0, r6
 8013ae0:	b007      	add	sp, #28
 8013ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae6:	2b2e      	cmp	r3, #46	; 0x2e
 8013ae8:	f000 809f 	beq.w	8013c2a <_scanf_float+0x1da>
 8013aec:	2b30      	cmp	r3, #48	; 0x30
 8013aee:	d1e7      	bne.n	8013ac0 <_scanf_float+0x70>
 8013af0:	6820      	ldr	r0, [r4, #0]
 8013af2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013af6:	d064      	beq.n	8013bc2 <_scanf_float+0x172>
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013afe:	6020      	str	r0, [r4, #0]
 8013b00:	f109 0901 	add.w	r9, r9, #1
 8013b04:	b11b      	cbz	r3, 8013b0e <_scanf_float+0xbe>
 8013b06:	3b01      	subs	r3, #1
 8013b08:	3101      	adds	r1, #1
 8013b0a:	9301      	str	r3, [sp, #4]
 8013b0c:	60a1      	str	r1, [r4, #8]
 8013b0e:	68a3      	ldr	r3, [r4, #8]
 8013b10:	3b01      	subs	r3, #1
 8013b12:	60a3      	str	r3, [r4, #8]
 8013b14:	6923      	ldr	r3, [r4, #16]
 8013b16:	3301      	adds	r3, #1
 8013b18:	6123      	str	r3, [r4, #16]
 8013b1a:	6873      	ldr	r3, [r6, #4]
 8013b1c:	3b01      	subs	r3, #1
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	6073      	str	r3, [r6, #4]
 8013b22:	f340 80ac 	ble.w	8013c7e <_scanf_float+0x22e>
 8013b26:	6833      	ldr	r3, [r6, #0]
 8013b28:	3301      	adds	r3, #1
 8013b2a:	6033      	str	r3, [r6, #0]
 8013b2c:	e7b5      	b.n	8013a9a <_scanf_float+0x4a>
 8013b2e:	2b45      	cmp	r3, #69	; 0x45
 8013b30:	f000 8085 	beq.w	8013c3e <_scanf_float+0x1ee>
 8013b34:	2b46      	cmp	r3, #70	; 0x46
 8013b36:	d06a      	beq.n	8013c0e <_scanf_float+0x1be>
 8013b38:	2b41      	cmp	r3, #65	; 0x41
 8013b3a:	d1c1      	bne.n	8013ac0 <_scanf_float+0x70>
 8013b3c:	2a01      	cmp	r2, #1
 8013b3e:	d1bf      	bne.n	8013ac0 <_scanf_float+0x70>
 8013b40:	2202      	movs	r2, #2
 8013b42:	e046      	b.n	8013bd2 <_scanf_float+0x182>
 8013b44:	2b65      	cmp	r3, #101	; 0x65
 8013b46:	d07a      	beq.n	8013c3e <_scanf_float+0x1ee>
 8013b48:	d818      	bhi.n	8013b7c <_scanf_float+0x12c>
 8013b4a:	2b54      	cmp	r3, #84	; 0x54
 8013b4c:	d066      	beq.n	8013c1c <_scanf_float+0x1cc>
 8013b4e:	d811      	bhi.n	8013b74 <_scanf_float+0x124>
 8013b50:	2b4e      	cmp	r3, #78	; 0x4e
 8013b52:	d1b5      	bne.n	8013ac0 <_scanf_float+0x70>
 8013b54:	2a00      	cmp	r2, #0
 8013b56:	d146      	bne.n	8013be6 <_scanf_float+0x196>
 8013b58:	f1b9 0f00 	cmp.w	r9, #0
 8013b5c:	d145      	bne.n	8013bea <_scanf_float+0x19a>
 8013b5e:	6821      	ldr	r1, [r4, #0]
 8013b60:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013b64:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013b68:	d13f      	bne.n	8013bea <_scanf_float+0x19a>
 8013b6a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013b6e:	6021      	str	r1, [r4, #0]
 8013b70:	2201      	movs	r2, #1
 8013b72:	e02e      	b.n	8013bd2 <_scanf_float+0x182>
 8013b74:	2b59      	cmp	r3, #89	; 0x59
 8013b76:	d01e      	beq.n	8013bb6 <_scanf_float+0x166>
 8013b78:	2b61      	cmp	r3, #97	; 0x61
 8013b7a:	e7de      	b.n	8013b3a <_scanf_float+0xea>
 8013b7c:	2b6e      	cmp	r3, #110	; 0x6e
 8013b7e:	d0e9      	beq.n	8013b54 <_scanf_float+0x104>
 8013b80:	d815      	bhi.n	8013bae <_scanf_float+0x15e>
 8013b82:	2b66      	cmp	r3, #102	; 0x66
 8013b84:	d043      	beq.n	8013c0e <_scanf_float+0x1be>
 8013b86:	2b69      	cmp	r3, #105	; 0x69
 8013b88:	d19a      	bne.n	8013ac0 <_scanf_float+0x70>
 8013b8a:	f1bb 0f00 	cmp.w	fp, #0
 8013b8e:	d138      	bne.n	8013c02 <_scanf_float+0x1b2>
 8013b90:	f1b9 0f00 	cmp.w	r9, #0
 8013b94:	d197      	bne.n	8013ac6 <_scanf_float+0x76>
 8013b96:	6821      	ldr	r1, [r4, #0]
 8013b98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013b9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013ba0:	d195      	bne.n	8013ace <_scanf_float+0x7e>
 8013ba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013ba6:	6021      	str	r1, [r4, #0]
 8013ba8:	f04f 0b01 	mov.w	fp, #1
 8013bac:	e011      	b.n	8013bd2 <_scanf_float+0x182>
 8013bae:	2b74      	cmp	r3, #116	; 0x74
 8013bb0:	d034      	beq.n	8013c1c <_scanf_float+0x1cc>
 8013bb2:	2b79      	cmp	r3, #121	; 0x79
 8013bb4:	d184      	bne.n	8013ac0 <_scanf_float+0x70>
 8013bb6:	f1bb 0f07 	cmp.w	fp, #7
 8013bba:	d181      	bne.n	8013ac0 <_scanf_float+0x70>
 8013bbc:	f04f 0b08 	mov.w	fp, #8
 8013bc0:	e007      	b.n	8013bd2 <_scanf_float+0x182>
 8013bc2:	eb12 0f0b 	cmn.w	r2, fp
 8013bc6:	f47f af7b 	bne.w	8013ac0 <_scanf_float+0x70>
 8013bca:	6821      	ldr	r1, [r4, #0]
 8013bcc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013bd0:	6021      	str	r1, [r4, #0]
 8013bd2:	702b      	strb	r3, [r5, #0]
 8013bd4:	3501      	adds	r5, #1
 8013bd6:	e79a      	b.n	8013b0e <_scanf_float+0xbe>
 8013bd8:	6821      	ldr	r1, [r4, #0]
 8013bda:	0608      	lsls	r0, r1, #24
 8013bdc:	f57f af70 	bpl.w	8013ac0 <_scanf_float+0x70>
 8013be0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013be4:	e7f4      	b.n	8013bd0 <_scanf_float+0x180>
 8013be6:	2a02      	cmp	r2, #2
 8013be8:	d047      	beq.n	8013c7a <_scanf_float+0x22a>
 8013bea:	f1bb 0f01 	cmp.w	fp, #1
 8013bee:	d003      	beq.n	8013bf8 <_scanf_float+0x1a8>
 8013bf0:	f1bb 0f04 	cmp.w	fp, #4
 8013bf4:	f47f af64 	bne.w	8013ac0 <_scanf_float+0x70>
 8013bf8:	f10b 0b01 	add.w	fp, fp, #1
 8013bfc:	fa5f fb8b 	uxtb.w	fp, fp
 8013c00:	e7e7      	b.n	8013bd2 <_scanf_float+0x182>
 8013c02:	f1bb 0f03 	cmp.w	fp, #3
 8013c06:	d0f7      	beq.n	8013bf8 <_scanf_float+0x1a8>
 8013c08:	f1bb 0f05 	cmp.w	fp, #5
 8013c0c:	e7f2      	b.n	8013bf4 <_scanf_float+0x1a4>
 8013c0e:	f1bb 0f02 	cmp.w	fp, #2
 8013c12:	f47f af55 	bne.w	8013ac0 <_scanf_float+0x70>
 8013c16:	f04f 0b03 	mov.w	fp, #3
 8013c1a:	e7da      	b.n	8013bd2 <_scanf_float+0x182>
 8013c1c:	f1bb 0f06 	cmp.w	fp, #6
 8013c20:	f47f af4e 	bne.w	8013ac0 <_scanf_float+0x70>
 8013c24:	f04f 0b07 	mov.w	fp, #7
 8013c28:	e7d3      	b.n	8013bd2 <_scanf_float+0x182>
 8013c2a:	6821      	ldr	r1, [r4, #0]
 8013c2c:	0588      	lsls	r0, r1, #22
 8013c2e:	f57f af47 	bpl.w	8013ac0 <_scanf_float+0x70>
 8013c32:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013c36:	6021      	str	r1, [r4, #0]
 8013c38:	f8cd 9008 	str.w	r9, [sp, #8]
 8013c3c:	e7c9      	b.n	8013bd2 <_scanf_float+0x182>
 8013c3e:	6821      	ldr	r1, [r4, #0]
 8013c40:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013c44:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013c48:	d006      	beq.n	8013c58 <_scanf_float+0x208>
 8013c4a:	0548      	lsls	r0, r1, #21
 8013c4c:	f57f af38 	bpl.w	8013ac0 <_scanf_float+0x70>
 8013c50:	f1b9 0f00 	cmp.w	r9, #0
 8013c54:	f43f af3b 	beq.w	8013ace <_scanf_float+0x7e>
 8013c58:	0588      	lsls	r0, r1, #22
 8013c5a:	bf58      	it	pl
 8013c5c:	9802      	ldrpl	r0, [sp, #8]
 8013c5e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013c62:	bf58      	it	pl
 8013c64:	eba9 0000 	subpl.w	r0, r9, r0
 8013c68:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8013c6c:	bf58      	it	pl
 8013c6e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013c72:	6021      	str	r1, [r4, #0]
 8013c74:	f04f 0900 	mov.w	r9, #0
 8013c78:	e7ab      	b.n	8013bd2 <_scanf_float+0x182>
 8013c7a:	2203      	movs	r2, #3
 8013c7c:	e7a9      	b.n	8013bd2 <_scanf_float+0x182>
 8013c7e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013c82:	9205      	str	r2, [sp, #20]
 8013c84:	4631      	mov	r1, r6
 8013c86:	4638      	mov	r0, r7
 8013c88:	4798      	blx	r3
 8013c8a:	9a05      	ldr	r2, [sp, #20]
 8013c8c:	2800      	cmp	r0, #0
 8013c8e:	f43f af04 	beq.w	8013a9a <_scanf_float+0x4a>
 8013c92:	e715      	b.n	8013ac0 <_scanf_float+0x70>
 8013c94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013c98:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013c9c:	4632      	mov	r2, r6
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	4798      	blx	r3
 8013ca2:	6923      	ldr	r3, [r4, #16]
 8013ca4:	3b01      	subs	r3, #1
 8013ca6:	6123      	str	r3, [r4, #16]
 8013ca8:	e715      	b.n	8013ad6 <_scanf_float+0x86>
 8013caa:	f10b 33ff 	add.w	r3, fp, #4294967295
 8013cae:	2b06      	cmp	r3, #6
 8013cb0:	d80a      	bhi.n	8013cc8 <_scanf_float+0x278>
 8013cb2:	f1bb 0f02 	cmp.w	fp, #2
 8013cb6:	d968      	bls.n	8013d8a <_scanf_float+0x33a>
 8013cb8:	f1ab 0b03 	sub.w	fp, fp, #3
 8013cbc:	fa5f fb8b 	uxtb.w	fp, fp
 8013cc0:	eba5 0b0b 	sub.w	fp, r5, fp
 8013cc4:	455d      	cmp	r5, fp
 8013cc6:	d14b      	bne.n	8013d60 <_scanf_float+0x310>
 8013cc8:	6823      	ldr	r3, [r4, #0]
 8013cca:	05da      	lsls	r2, r3, #23
 8013ccc:	d51f      	bpl.n	8013d0e <_scanf_float+0x2be>
 8013cce:	055b      	lsls	r3, r3, #21
 8013cd0:	d468      	bmi.n	8013da4 <_scanf_float+0x354>
 8013cd2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8013cd6:	6923      	ldr	r3, [r4, #16]
 8013cd8:	2965      	cmp	r1, #101	; 0x65
 8013cda:	f103 33ff 	add.w	r3, r3, #4294967295
 8013cde:	f105 3bff 	add.w	fp, r5, #4294967295
 8013ce2:	6123      	str	r3, [r4, #16]
 8013ce4:	d00d      	beq.n	8013d02 <_scanf_float+0x2b2>
 8013ce6:	2945      	cmp	r1, #69	; 0x45
 8013ce8:	d00b      	beq.n	8013d02 <_scanf_float+0x2b2>
 8013cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013cee:	4632      	mov	r2, r6
 8013cf0:	4638      	mov	r0, r7
 8013cf2:	4798      	blx	r3
 8013cf4:	6923      	ldr	r3, [r4, #16]
 8013cf6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013cfa:	3b01      	subs	r3, #1
 8013cfc:	f1a5 0b02 	sub.w	fp, r5, #2
 8013d00:	6123      	str	r3, [r4, #16]
 8013d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d06:	4632      	mov	r2, r6
 8013d08:	4638      	mov	r0, r7
 8013d0a:	4798      	blx	r3
 8013d0c:	465d      	mov	r5, fp
 8013d0e:	6826      	ldr	r6, [r4, #0]
 8013d10:	f016 0610 	ands.w	r6, r6, #16
 8013d14:	d17a      	bne.n	8013e0c <_scanf_float+0x3bc>
 8013d16:	702e      	strb	r6, [r5, #0]
 8013d18:	6823      	ldr	r3, [r4, #0]
 8013d1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d22:	d142      	bne.n	8013daa <_scanf_float+0x35a>
 8013d24:	9b02      	ldr	r3, [sp, #8]
 8013d26:	eba9 0303 	sub.w	r3, r9, r3
 8013d2a:	425a      	negs	r2, r3
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d149      	bne.n	8013dc4 <_scanf_float+0x374>
 8013d30:	2200      	movs	r2, #0
 8013d32:	4641      	mov	r1, r8
 8013d34:	4638      	mov	r0, r7
 8013d36:	f000 ffdf 	bl	8014cf8 <_strtod_r>
 8013d3a:	6825      	ldr	r5, [r4, #0]
 8013d3c:	f8da 3000 	ldr.w	r3, [sl]
 8013d40:	f015 0f02 	tst.w	r5, #2
 8013d44:	f103 0204 	add.w	r2, r3, #4
 8013d48:	ec59 8b10 	vmov	r8, r9, d0
 8013d4c:	f8ca 2000 	str.w	r2, [sl]
 8013d50:	d043      	beq.n	8013dda <_scanf_float+0x38a>
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	e9c3 8900 	strd	r8, r9, [r3]
 8013d58:	68e3      	ldr	r3, [r4, #12]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	60e3      	str	r3, [r4, #12]
 8013d5e:	e6be      	b.n	8013ade <_scanf_float+0x8e>
 8013d60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d68:	4632      	mov	r2, r6
 8013d6a:	4638      	mov	r0, r7
 8013d6c:	4798      	blx	r3
 8013d6e:	6923      	ldr	r3, [r4, #16]
 8013d70:	3b01      	subs	r3, #1
 8013d72:	6123      	str	r3, [r4, #16]
 8013d74:	e7a6      	b.n	8013cc4 <_scanf_float+0x274>
 8013d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d7a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d7e:	4632      	mov	r2, r6
 8013d80:	4638      	mov	r0, r7
 8013d82:	4798      	blx	r3
 8013d84:	6923      	ldr	r3, [r4, #16]
 8013d86:	3b01      	subs	r3, #1
 8013d88:	6123      	str	r3, [r4, #16]
 8013d8a:	4545      	cmp	r5, r8
 8013d8c:	d8f3      	bhi.n	8013d76 <_scanf_float+0x326>
 8013d8e:	e6a5      	b.n	8013adc <_scanf_float+0x8c>
 8013d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013d98:	4632      	mov	r2, r6
 8013d9a:	4638      	mov	r0, r7
 8013d9c:	4798      	blx	r3
 8013d9e:	6923      	ldr	r3, [r4, #16]
 8013da0:	3b01      	subs	r3, #1
 8013da2:	6123      	str	r3, [r4, #16]
 8013da4:	4545      	cmp	r5, r8
 8013da6:	d8f3      	bhi.n	8013d90 <_scanf_float+0x340>
 8013da8:	e698      	b.n	8013adc <_scanf_float+0x8c>
 8013daa:	9b03      	ldr	r3, [sp, #12]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d0bf      	beq.n	8013d30 <_scanf_float+0x2e0>
 8013db0:	9904      	ldr	r1, [sp, #16]
 8013db2:	230a      	movs	r3, #10
 8013db4:	4632      	mov	r2, r6
 8013db6:	3101      	adds	r1, #1
 8013db8:	4638      	mov	r0, r7
 8013dba:	f001 f829 	bl	8014e10 <_strtol_r>
 8013dbe:	9b03      	ldr	r3, [sp, #12]
 8013dc0:	9d04      	ldr	r5, [sp, #16]
 8013dc2:	1ac2      	subs	r2, r0, r3
 8013dc4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013dc8:	429d      	cmp	r5, r3
 8013dca:	bf28      	it	cs
 8013dcc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013dd0:	490f      	ldr	r1, [pc, #60]	; (8013e10 <_scanf_float+0x3c0>)
 8013dd2:	4628      	mov	r0, r5
 8013dd4:	f000 f8e8 	bl	8013fa8 <siprintf>
 8013dd8:	e7aa      	b.n	8013d30 <_scanf_float+0x2e0>
 8013dda:	f015 0504 	ands.w	r5, r5, #4
 8013dde:	d1b8      	bne.n	8013d52 <_scanf_float+0x302>
 8013de0:	681f      	ldr	r7, [r3, #0]
 8013de2:	ee10 2a10 	vmov	r2, s0
 8013de6:	464b      	mov	r3, r9
 8013de8:	ee10 0a10 	vmov	r0, s0
 8013dec:	4649      	mov	r1, r9
 8013dee:	f7ec feb5 	bl	8000b5c <__aeabi_dcmpun>
 8013df2:	b128      	cbz	r0, 8013e00 <_scanf_float+0x3b0>
 8013df4:	4628      	mov	r0, r5
 8013df6:	f000 f89d 	bl	8013f34 <nanf>
 8013dfa:	ed87 0a00 	vstr	s0, [r7]
 8013dfe:	e7ab      	b.n	8013d58 <_scanf_float+0x308>
 8013e00:	4640      	mov	r0, r8
 8013e02:	4649      	mov	r1, r9
 8013e04:	f7ec ff08 	bl	8000c18 <__aeabi_d2f>
 8013e08:	6038      	str	r0, [r7, #0]
 8013e0a:	e7a5      	b.n	8013d58 <_scanf_float+0x308>
 8013e0c:	2600      	movs	r6, #0
 8013e0e:	e666      	b.n	8013ade <_scanf_float+0x8e>
 8013e10:	080187ce 	.word	0x080187ce

08013e14 <iprintf>:
 8013e14:	b40f      	push	{r0, r1, r2, r3}
 8013e16:	4b0a      	ldr	r3, [pc, #40]	; (8013e40 <iprintf+0x2c>)
 8013e18:	b513      	push	{r0, r1, r4, lr}
 8013e1a:	681c      	ldr	r4, [r3, #0]
 8013e1c:	b124      	cbz	r4, 8013e28 <iprintf+0x14>
 8013e1e:	69a3      	ldr	r3, [r4, #24]
 8013e20:	b913      	cbnz	r3, 8013e28 <iprintf+0x14>
 8013e22:	4620      	mov	r0, r4
 8013e24:	f002 f83c 	bl	8015ea0 <__sinit>
 8013e28:	ab05      	add	r3, sp, #20
 8013e2a:	9a04      	ldr	r2, [sp, #16]
 8013e2c:	68a1      	ldr	r1, [r4, #8]
 8013e2e:	9301      	str	r3, [sp, #4]
 8013e30:	4620      	mov	r0, r4
 8013e32:	f003 fc73 	bl	801771c <_vfiprintf_r>
 8013e36:	b002      	add	sp, #8
 8013e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e3c:	b004      	add	sp, #16
 8013e3e:	4770      	bx	lr
 8013e40:	2000000c 	.word	0x2000000c

08013e44 <putchar>:
 8013e44:	b538      	push	{r3, r4, r5, lr}
 8013e46:	4b08      	ldr	r3, [pc, #32]	; (8013e68 <putchar+0x24>)
 8013e48:	681c      	ldr	r4, [r3, #0]
 8013e4a:	4605      	mov	r5, r0
 8013e4c:	b124      	cbz	r4, 8013e58 <putchar+0x14>
 8013e4e:	69a3      	ldr	r3, [r4, #24]
 8013e50:	b913      	cbnz	r3, 8013e58 <putchar+0x14>
 8013e52:	4620      	mov	r0, r4
 8013e54:	f002 f824 	bl	8015ea0 <__sinit>
 8013e58:	68a2      	ldr	r2, [r4, #8]
 8013e5a:	4629      	mov	r1, r5
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013e62:	f003 bec9 	b.w	8017bf8 <_putc_r>
 8013e66:	bf00      	nop
 8013e68:	2000000c 	.word	0x2000000c

08013e6c <_puts_r>:
 8013e6c:	b570      	push	{r4, r5, r6, lr}
 8013e6e:	460e      	mov	r6, r1
 8013e70:	4605      	mov	r5, r0
 8013e72:	b118      	cbz	r0, 8013e7c <_puts_r+0x10>
 8013e74:	6983      	ldr	r3, [r0, #24]
 8013e76:	b90b      	cbnz	r3, 8013e7c <_puts_r+0x10>
 8013e78:	f002 f812 	bl	8015ea0 <__sinit>
 8013e7c:	69ab      	ldr	r3, [r5, #24]
 8013e7e:	68ac      	ldr	r4, [r5, #8]
 8013e80:	b913      	cbnz	r3, 8013e88 <_puts_r+0x1c>
 8013e82:	4628      	mov	r0, r5
 8013e84:	f002 f80c 	bl	8015ea0 <__sinit>
 8013e88:	4b23      	ldr	r3, [pc, #140]	; (8013f18 <_puts_r+0xac>)
 8013e8a:	429c      	cmp	r4, r3
 8013e8c:	d117      	bne.n	8013ebe <_puts_r+0x52>
 8013e8e:	686c      	ldr	r4, [r5, #4]
 8013e90:	89a3      	ldrh	r3, [r4, #12]
 8013e92:	071b      	lsls	r3, r3, #28
 8013e94:	d51d      	bpl.n	8013ed2 <_puts_r+0x66>
 8013e96:	6923      	ldr	r3, [r4, #16]
 8013e98:	b1db      	cbz	r3, 8013ed2 <_puts_r+0x66>
 8013e9a:	3e01      	subs	r6, #1
 8013e9c:	68a3      	ldr	r3, [r4, #8]
 8013e9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ea2:	3b01      	subs	r3, #1
 8013ea4:	60a3      	str	r3, [r4, #8]
 8013ea6:	b9e9      	cbnz	r1, 8013ee4 <_puts_r+0x78>
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	da2e      	bge.n	8013f0a <_puts_r+0x9e>
 8013eac:	4622      	mov	r2, r4
 8013eae:	210a      	movs	r1, #10
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	f000 ffdf 	bl	8014e74 <__swbuf_r>
 8013eb6:	3001      	adds	r0, #1
 8013eb8:	d011      	beq.n	8013ede <_puts_r+0x72>
 8013eba:	200a      	movs	r0, #10
 8013ebc:	e011      	b.n	8013ee2 <_puts_r+0x76>
 8013ebe:	4b17      	ldr	r3, [pc, #92]	; (8013f1c <_puts_r+0xb0>)
 8013ec0:	429c      	cmp	r4, r3
 8013ec2:	d101      	bne.n	8013ec8 <_puts_r+0x5c>
 8013ec4:	68ac      	ldr	r4, [r5, #8]
 8013ec6:	e7e3      	b.n	8013e90 <_puts_r+0x24>
 8013ec8:	4b15      	ldr	r3, [pc, #84]	; (8013f20 <_puts_r+0xb4>)
 8013eca:	429c      	cmp	r4, r3
 8013ecc:	bf08      	it	eq
 8013ece:	68ec      	ldreq	r4, [r5, #12]
 8013ed0:	e7de      	b.n	8013e90 <_puts_r+0x24>
 8013ed2:	4621      	mov	r1, r4
 8013ed4:	4628      	mov	r0, r5
 8013ed6:	f001 f831 	bl	8014f3c <__swsetup_r>
 8013eda:	2800      	cmp	r0, #0
 8013edc:	d0dd      	beq.n	8013e9a <_puts_r+0x2e>
 8013ede:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee2:	bd70      	pop	{r4, r5, r6, pc}
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	da04      	bge.n	8013ef2 <_puts_r+0x86>
 8013ee8:	69a2      	ldr	r2, [r4, #24]
 8013eea:	429a      	cmp	r2, r3
 8013eec:	dc06      	bgt.n	8013efc <_puts_r+0x90>
 8013eee:	290a      	cmp	r1, #10
 8013ef0:	d004      	beq.n	8013efc <_puts_r+0x90>
 8013ef2:	6823      	ldr	r3, [r4, #0]
 8013ef4:	1c5a      	adds	r2, r3, #1
 8013ef6:	6022      	str	r2, [r4, #0]
 8013ef8:	7019      	strb	r1, [r3, #0]
 8013efa:	e7cf      	b.n	8013e9c <_puts_r+0x30>
 8013efc:	4622      	mov	r2, r4
 8013efe:	4628      	mov	r0, r5
 8013f00:	f000 ffb8 	bl	8014e74 <__swbuf_r>
 8013f04:	3001      	adds	r0, #1
 8013f06:	d1c9      	bne.n	8013e9c <_puts_r+0x30>
 8013f08:	e7e9      	b.n	8013ede <_puts_r+0x72>
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	200a      	movs	r0, #10
 8013f0e:	1c5a      	adds	r2, r3, #1
 8013f10:	6022      	str	r2, [r4, #0]
 8013f12:	7018      	strb	r0, [r3, #0]
 8013f14:	e7e5      	b.n	8013ee2 <_puts_r+0x76>
 8013f16:	bf00      	nop
 8013f18:	08018858 	.word	0x08018858
 8013f1c:	08018878 	.word	0x08018878
 8013f20:	08018838 	.word	0x08018838

08013f24 <puts>:
 8013f24:	4b02      	ldr	r3, [pc, #8]	; (8013f30 <puts+0xc>)
 8013f26:	4601      	mov	r1, r0
 8013f28:	6818      	ldr	r0, [r3, #0]
 8013f2a:	f7ff bf9f 	b.w	8013e6c <_puts_r>
 8013f2e:	bf00      	nop
 8013f30:	2000000c 	.word	0x2000000c

08013f34 <nanf>:
 8013f34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013f3c <nanf+0x8>
 8013f38:	4770      	bx	lr
 8013f3a:	bf00      	nop
 8013f3c:	7fc00000 	.word	0x7fc00000

08013f40 <sniprintf>:
 8013f40:	b40c      	push	{r2, r3}
 8013f42:	b530      	push	{r4, r5, lr}
 8013f44:	4b17      	ldr	r3, [pc, #92]	; (8013fa4 <sniprintf+0x64>)
 8013f46:	1e0c      	subs	r4, r1, #0
 8013f48:	b09d      	sub	sp, #116	; 0x74
 8013f4a:	681d      	ldr	r5, [r3, #0]
 8013f4c:	da08      	bge.n	8013f60 <sniprintf+0x20>
 8013f4e:	238b      	movs	r3, #139	; 0x8b
 8013f50:	602b      	str	r3, [r5, #0]
 8013f52:	f04f 30ff 	mov.w	r0, #4294967295
 8013f56:	b01d      	add	sp, #116	; 0x74
 8013f58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013f5c:	b002      	add	sp, #8
 8013f5e:	4770      	bx	lr
 8013f60:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013f64:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013f68:	bf14      	ite	ne
 8013f6a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013f6e:	4623      	moveq	r3, r4
 8013f70:	9304      	str	r3, [sp, #16]
 8013f72:	9307      	str	r3, [sp, #28]
 8013f74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f78:	9002      	str	r0, [sp, #8]
 8013f7a:	9006      	str	r0, [sp, #24]
 8013f7c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f82:	ab21      	add	r3, sp, #132	; 0x84
 8013f84:	a902      	add	r1, sp, #8
 8013f86:	4628      	mov	r0, r5
 8013f88:	9301      	str	r3, [sp, #4]
 8013f8a:	f003 f8fb 	bl	8017184 <_svfiprintf_r>
 8013f8e:	1c43      	adds	r3, r0, #1
 8013f90:	bfbc      	itt	lt
 8013f92:	238b      	movlt	r3, #139	; 0x8b
 8013f94:	602b      	strlt	r3, [r5, #0]
 8013f96:	2c00      	cmp	r4, #0
 8013f98:	d0dd      	beq.n	8013f56 <sniprintf+0x16>
 8013f9a:	9b02      	ldr	r3, [sp, #8]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	701a      	strb	r2, [r3, #0]
 8013fa0:	e7d9      	b.n	8013f56 <sniprintf+0x16>
 8013fa2:	bf00      	nop
 8013fa4:	2000000c 	.word	0x2000000c

08013fa8 <siprintf>:
 8013fa8:	b40e      	push	{r1, r2, r3}
 8013faa:	b500      	push	{lr}
 8013fac:	b09c      	sub	sp, #112	; 0x70
 8013fae:	ab1d      	add	r3, sp, #116	; 0x74
 8013fb0:	9002      	str	r0, [sp, #8]
 8013fb2:	9006      	str	r0, [sp, #24]
 8013fb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013fb8:	4809      	ldr	r0, [pc, #36]	; (8013fe0 <siprintf+0x38>)
 8013fba:	9107      	str	r1, [sp, #28]
 8013fbc:	9104      	str	r1, [sp, #16]
 8013fbe:	4909      	ldr	r1, [pc, #36]	; (8013fe4 <siprintf+0x3c>)
 8013fc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fc4:	9105      	str	r1, [sp, #20]
 8013fc6:	6800      	ldr	r0, [r0, #0]
 8013fc8:	9301      	str	r3, [sp, #4]
 8013fca:	a902      	add	r1, sp, #8
 8013fcc:	f003 f8da 	bl	8017184 <_svfiprintf_r>
 8013fd0:	9b02      	ldr	r3, [sp, #8]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	701a      	strb	r2, [r3, #0]
 8013fd6:	b01c      	add	sp, #112	; 0x70
 8013fd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8013fdc:	b003      	add	sp, #12
 8013fde:	4770      	bx	lr
 8013fe0:	2000000c 	.word	0x2000000c
 8013fe4:	ffff0208 	.word	0xffff0208

08013fe8 <siscanf>:
 8013fe8:	b40e      	push	{r1, r2, r3}
 8013fea:	b530      	push	{r4, r5, lr}
 8013fec:	b09c      	sub	sp, #112	; 0x70
 8013fee:	ac1f      	add	r4, sp, #124	; 0x7c
 8013ff0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013ff4:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ff8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013ffc:	9002      	str	r0, [sp, #8]
 8013ffe:	9006      	str	r0, [sp, #24]
 8014000:	f7ec f8fe 	bl	8000200 <strlen>
 8014004:	4b0b      	ldr	r3, [pc, #44]	; (8014034 <siscanf+0x4c>)
 8014006:	9003      	str	r0, [sp, #12]
 8014008:	9007      	str	r0, [sp, #28]
 801400a:	930b      	str	r3, [sp, #44]	; 0x2c
 801400c:	480a      	ldr	r0, [pc, #40]	; (8014038 <siscanf+0x50>)
 801400e:	9401      	str	r4, [sp, #4]
 8014010:	2300      	movs	r3, #0
 8014012:	930f      	str	r3, [sp, #60]	; 0x3c
 8014014:	9314      	str	r3, [sp, #80]	; 0x50
 8014016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801401a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801401e:	462a      	mov	r2, r5
 8014020:	4623      	mov	r3, r4
 8014022:	a902      	add	r1, sp, #8
 8014024:	6800      	ldr	r0, [r0, #0]
 8014026:	f003 f9ff 	bl	8017428 <__ssvfiscanf_r>
 801402a:	b01c      	add	sp, #112	; 0x70
 801402c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014030:	b003      	add	sp, #12
 8014032:	4770      	bx	lr
 8014034:	0801405f 	.word	0x0801405f
 8014038:	2000000c 	.word	0x2000000c

0801403c <__sread>:
 801403c:	b510      	push	{r4, lr}
 801403e:	460c      	mov	r4, r1
 8014040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014044:	f003 fe0e 	bl	8017c64 <_read_r>
 8014048:	2800      	cmp	r0, #0
 801404a:	bfab      	itete	ge
 801404c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801404e:	89a3      	ldrhlt	r3, [r4, #12]
 8014050:	181b      	addge	r3, r3, r0
 8014052:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014056:	bfac      	ite	ge
 8014058:	6563      	strge	r3, [r4, #84]	; 0x54
 801405a:	81a3      	strhlt	r3, [r4, #12]
 801405c:	bd10      	pop	{r4, pc}

0801405e <__seofread>:
 801405e:	2000      	movs	r0, #0
 8014060:	4770      	bx	lr

08014062 <__swrite>:
 8014062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014066:	461f      	mov	r7, r3
 8014068:	898b      	ldrh	r3, [r1, #12]
 801406a:	05db      	lsls	r3, r3, #23
 801406c:	4605      	mov	r5, r0
 801406e:	460c      	mov	r4, r1
 8014070:	4616      	mov	r6, r2
 8014072:	d505      	bpl.n	8014080 <__swrite+0x1e>
 8014074:	2302      	movs	r3, #2
 8014076:	2200      	movs	r2, #0
 8014078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801407c:	f002 fae2 	bl	8016644 <_lseek_r>
 8014080:	89a3      	ldrh	r3, [r4, #12]
 8014082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014086:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801408a:	81a3      	strh	r3, [r4, #12]
 801408c:	4632      	mov	r2, r6
 801408e:	463b      	mov	r3, r7
 8014090:	4628      	mov	r0, r5
 8014092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014096:	f000 bf3f 	b.w	8014f18 <_write_r>

0801409a <__sseek>:
 801409a:	b510      	push	{r4, lr}
 801409c:	460c      	mov	r4, r1
 801409e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140a2:	f002 facf 	bl	8016644 <_lseek_r>
 80140a6:	1c43      	adds	r3, r0, #1
 80140a8:	89a3      	ldrh	r3, [r4, #12]
 80140aa:	bf15      	itete	ne
 80140ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80140ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140b6:	81a3      	strheq	r3, [r4, #12]
 80140b8:	bf18      	it	ne
 80140ba:	81a3      	strhne	r3, [r4, #12]
 80140bc:	bd10      	pop	{r4, pc}

080140be <__sclose>:
 80140be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140c2:	f000 bfa9 	b.w	8015018 <_close_r>

080140c6 <strcpy>:
 80140c6:	4603      	mov	r3, r0
 80140c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140cc:	f803 2b01 	strb.w	r2, [r3], #1
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	d1f9      	bne.n	80140c8 <strcpy+0x2>
 80140d4:	4770      	bx	lr

080140d6 <sulp>:
 80140d6:	b570      	push	{r4, r5, r6, lr}
 80140d8:	4604      	mov	r4, r0
 80140da:	460d      	mov	r5, r1
 80140dc:	ec45 4b10 	vmov	d0, r4, r5
 80140e0:	4616      	mov	r6, r2
 80140e2:	f002 fe0b 	bl	8016cfc <__ulp>
 80140e6:	ec51 0b10 	vmov	r0, r1, d0
 80140ea:	b17e      	cbz	r6, 801410c <sulp+0x36>
 80140ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80140f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	dd09      	ble.n	801410c <sulp+0x36>
 80140f8:	051b      	lsls	r3, r3, #20
 80140fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80140fe:	2400      	movs	r4, #0
 8014100:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014104:	4622      	mov	r2, r4
 8014106:	462b      	mov	r3, r5
 8014108:	f7ec fa8e 	bl	8000628 <__aeabi_dmul>
 801410c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014110 <_strtod_l>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	461f      	mov	r7, r3
 8014116:	b0a1      	sub	sp, #132	; 0x84
 8014118:	2300      	movs	r3, #0
 801411a:	4681      	mov	r9, r0
 801411c:	4638      	mov	r0, r7
 801411e:	460e      	mov	r6, r1
 8014120:	9217      	str	r2, [sp, #92]	; 0x5c
 8014122:	931c      	str	r3, [sp, #112]	; 0x70
 8014124:	f002 fa7e 	bl	8016624 <__localeconv_l>
 8014128:	4680      	mov	r8, r0
 801412a:	6800      	ldr	r0, [r0, #0]
 801412c:	f7ec f868 	bl	8000200 <strlen>
 8014130:	f04f 0a00 	mov.w	sl, #0
 8014134:	4604      	mov	r4, r0
 8014136:	f04f 0b00 	mov.w	fp, #0
 801413a:	961b      	str	r6, [sp, #108]	; 0x6c
 801413c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801413e:	781a      	ldrb	r2, [r3, #0]
 8014140:	2a0d      	cmp	r2, #13
 8014142:	d832      	bhi.n	80141aa <_strtod_l+0x9a>
 8014144:	2a09      	cmp	r2, #9
 8014146:	d236      	bcs.n	80141b6 <_strtod_l+0xa6>
 8014148:	2a00      	cmp	r2, #0
 801414a:	d03e      	beq.n	80141ca <_strtod_l+0xba>
 801414c:	2300      	movs	r3, #0
 801414e:	930d      	str	r3, [sp, #52]	; 0x34
 8014150:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014152:	782b      	ldrb	r3, [r5, #0]
 8014154:	2b30      	cmp	r3, #48	; 0x30
 8014156:	f040 80ac 	bne.w	80142b2 <_strtod_l+0x1a2>
 801415a:	786b      	ldrb	r3, [r5, #1]
 801415c:	2b58      	cmp	r3, #88	; 0x58
 801415e:	d001      	beq.n	8014164 <_strtod_l+0x54>
 8014160:	2b78      	cmp	r3, #120	; 0x78
 8014162:	d167      	bne.n	8014234 <_strtod_l+0x124>
 8014164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014166:	9301      	str	r3, [sp, #4]
 8014168:	ab1c      	add	r3, sp, #112	; 0x70
 801416a:	9300      	str	r3, [sp, #0]
 801416c:	9702      	str	r7, [sp, #8]
 801416e:	ab1d      	add	r3, sp, #116	; 0x74
 8014170:	4a88      	ldr	r2, [pc, #544]	; (8014394 <_strtod_l+0x284>)
 8014172:	a91b      	add	r1, sp, #108	; 0x6c
 8014174:	4648      	mov	r0, r9
 8014176:	f001 ff6c 	bl	8016052 <__gethex>
 801417a:	f010 0407 	ands.w	r4, r0, #7
 801417e:	4606      	mov	r6, r0
 8014180:	d005      	beq.n	801418e <_strtod_l+0x7e>
 8014182:	2c06      	cmp	r4, #6
 8014184:	d12b      	bne.n	80141de <_strtod_l+0xce>
 8014186:	3501      	adds	r5, #1
 8014188:	2300      	movs	r3, #0
 801418a:	951b      	str	r5, [sp, #108]	; 0x6c
 801418c:	930d      	str	r3, [sp, #52]	; 0x34
 801418e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014190:	2b00      	cmp	r3, #0
 8014192:	f040 859a 	bne.w	8014cca <_strtod_l+0xbba>
 8014196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014198:	b1e3      	cbz	r3, 80141d4 <_strtod_l+0xc4>
 801419a:	4652      	mov	r2, sl
 801419c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80141a0:	ec43 2b10 	vmov	d0, r2, r3
 80141a4:	b021      	add	sp, #132	; 0x84
 80141a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141aa:	2a2b      	cmp	r2, #43	; 0x2b
 80141ac:	d015      	beq.n	80141da <_strtod_l+0xca>
 80141ae:	2a2d      	cmp	r2, #45	; 0x2d
 80141b0:	d004      	beq.n	80141bc <_strtod_l+0xac>
 80141b2:	2a20      	cmp	r2, #32
 80141b4:	d1ca      	bne.n	801414c <_strtod_l+0x3c>
 80141b6:	3301      	adds	r3, #1
 80141b8:	931b      	str	r3, [sp, #108]	; 0x6c
 80141ba:	e7bf      	b.n	801413c <_strtod_l+0x2c>
 80141bc:	2201      	movs	r2, #1
 80141be:	920d      	str	r2, [sp, #52]	; 0x34
 80141c0:	1c5a      	adds	r2, r3, #1
 80141c2:	921b      	str	r2, [sp, #108]	; 0x6c
 80141c4:	785b      	ldrb	r3, [r3, #1]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1c2      	bne.n	8014150 <_strtod_l+0x40>
 80141ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80141cc:	961b      	str	r6, [sp, #108]	; 0x6c
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	f040 8579 	bne.w	8014cc6 <_strtod_l+0xbb6>
 80141d4:	4652      	mov	r2, sl
 80141d6:	465b      	mov	r3, fp
 80141d8:	e7e2      	b.n	80141a0 <_strtod_l+0x90>
 80141da:	2200      	movs	r2, #0
 80141dc:	e7ef      	b.n	80141be <_strtod_l+0xae>
 80141de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80141e0:	b13a      	cbz	r2, 80141f2 <_strtod_l+0xe2>
 80141e2:	2135      	movs	r1, #53	; 0x35
 80141e4:	a81e      	add	r0, sp, #120	; 0x78
 80141e6:	f002 fe81 	bl	8016eec <__copybits>
 80141ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 80141ec:	4648      	mov	r0, r9
 80141ee:	f002 faed 	bl	80167cc <_Bfree>
 80141f2:	3c01      	subs	r4, #1
 80141f4:	2c04      	cmp	r4, #4
 80141f6:	d806      	bhi.n	8014206 <_strtod_l+0xf6>
 80141f8:	e8df f004 	tbb	[pc, r4]
 80141fc:	1714030a 	.word	0x1714030a
 8014200:	0a          	.byte	0x0a
 8014201:	00          	.byte	0x00
 8014202:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014206:	0730      	lsls	r0, r6, #28
 8014208:	d5c1      	bpl.n	801418e <_strtod_l+0x7e>
 801420a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801420e:	e7be      	b.n	801418e <_strtod_l+0x7e>
 8014210:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014214:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014216:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801421a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801421e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014222:	e7f0      	b.n	8014206 <_strtod_l+0xf6>
 8014224:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014398 <_strtod_l+0x288>
 8014228:	e7ed      	b.n	8014206 <_strtod_l+0xf6>
 801422a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801422e:	f04f 3aff 	mov.w	sl, #4294967295
 8014232:	e7e8      	b.n	8014206 <_strtod_l+0xf6>
 8014234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014236:	1c5a      	adds	r2, r3, #1
 8014238:	921b      	str	r2, [sp, #108]	; 0x6c
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b30      	cmp	r3, #48	; 0x30
 801423e:	d0f9      	beq.n	8014234 <_strtod_l+0x124>
 8014240:	2b00      	cmp	r3, #0
 8014242:	d0a4      	beq.n	801418e <_strtod_l+0x7e>
 8014244:	2301      	movs	r3, #1
 8014246:	2500      	movs	r5, #0
 8014248:	9306      	str	r3, [sp, #24]
 801424a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801424c:	9308      	str	r3, [sp, #32]
 801424e:	9507      	str	r5, [sp, #28]
 8014250:	9505      	str	r5, [sp, #20]
 8014252:	220a      	movs	r2, #10
 8014254:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014256:	7807      	ldrb	r7, [r0, #0]
 8014258:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801425c:	b2d9      	uxtb	r1, r3
 801425e:	2909      	cmp	r1, #9
 8014260:	d929      	bls.n	80142b6 <_strtod_l+0x1a6>
 8014262:	4622      	mov	r2, r4
 8014264:	f8d8 1000 	ldr.w	r1, [r8]
 8014268:	f003 fd50 	bl	8017d0c <strncmp>
 801426c:	2800      	cmp	r0, #0
 801426e:	d031      	beq.n	80142d4 <_strtod_l+0x1c4>
 8014270:	2000      	movs	r0, #0
 8014272:	9c05      	ldr	r4, [sp, #20]
 8014274:	9004      	str	r0, [sp, #16]
 8014276:	463b      	mov	r3, r7
 8014278:	4602      	mov	r2, r0
 801427a:	2b65      	cmp	r3, #101	; 0x65
 801427c:	d001      	beq.n	8014282 <_strtod_l+0x172>
 801427e:	2b45      	cmp	r3, #69	; 0x45
 8014280:	d114      	bne.n	80142ac <_strtod_l+0x19c>
 8014282:	b924      	cbnz	r4, 801428e <_strtod_l+0x17e>
 8014284:	b910      	cbnz	r0, 801428c <_strtod_l+0x17c>
 8014286:	9b06      	ldr	r3, [sp, #24]
 8014288:	2b00      	cmp	r3, #0
 801428a:	d09e      	beq.n	80141ca <_strtod_l+0xba>
 801428c:	2400      	movs	r4, #0
 801428e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014290:	1c73      	adds	r3, r6, #1
 8014292:	931b      	str	r3, [sp, #108]	; 0x6c
 8014294:	7873      	ldrb	r3, [r6, #1]
 8014296:	2b2b      	cmp	r3, #43	; 0x2b
 8014298:	d078      	beq.n	801438c <_strtod_l+0x27c>
 801429a:	2b2d      	cmp	r3, #45	; 0x2d
 801429c:	d070      	beq.n	8014380 <_strtod_l+0x270>
 801429e:	f04f 0c00 	mov.w	ip, #0
 80142a2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80142a6:	2f09      	cmp	r7, #9
 80142a8:	d97c      	bls.n	80143a4 <_strtod_l+0x294>
 80142aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80142ac:	f04f 0e00 	mov.w	lr, #0
 80142b0:	e09a      	b.n	80143e8 <_strtod_l+0x2d8>
 80142b2:	2300      	movs	r3, #0
 80142b4:	e7c7      	b.n	8014246 <_strtod_l+0x136>
 80142b6:	9905      	ldr	r1, [sp, #20]
 80142b8:	2908      	cmp	r1, #8
 80142ba:	bfdd      	ittte	le
 80142bc:	9907      	ldrle	r1, [sp, #28]
 80142be:	fb02 3301 	mlale	r3, r2, r1, r3
 80142c2:	9307      	strle	r3, [sp, #28]
 80142c4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80142c8:	9b05      	ldr	r3, [sp, #20]
 80142ca:	3001      	adds	r0, #1
 80142cc:	3301      	adds	r3, #1
 80142ce:	9305      	str	r3, [sp, #20]
 80142d0:	901b      	str	r0, [sp, #108]	; 0x6c
 80142d2:	e7bf      	b.n	8014254 <_strtod_l+0x144>
 80142d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142d6:	191a      	adds	r2, r3, r4
 80142d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80142da:	9a05      	ldr	r2, [sp, #20]
 80142dc:	5d1b      	ldrb	r3, [r3, r4]
 80142de:	2a00      	cmp	r2, #0
 80142e0:	d037      	beq.n	8014352 <_strtod_l+0x242>
 80142e2:	9c05      	ldr	r4, [sp, #20]
 80142e4:	4602      	mov	r2, r0
 80142e6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80142ea:	2909      	cmp	r1, #9
 80142ec:	d913      	bls.n	8014316 <_strtod_l+0x206>
 80142ee:	2101      	movs	r1, #1
 80142f0:	9104      	str	r1, [sp, #16]
 80142f2:	e7c2      	b.n	801427a <_strtod_l+0x16a>
 80142f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80142f6:	1c5a      	adds	r2, r3, #1
 80142f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80142fa:	785b      	ldrb	r3, [r3, #1]
 80142fc:	3001      	adds	r0, #1
 80142fe:	2b30      	cmp	r3, #48	; 0x30
 8014300:	d0f8      	beq.n	80142f4 <_strtod_l+0x1e4>
 8014302:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014306:	2a08      	cmp	r2, #8
 8014308:	f200 84e4 	bhi.w	8014cd4 <_strtod_l+0xbc4>
 801430c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801430e:	9208      	str	r2, [sp, #32]
 8014310:	4602      	mov	r2, r0
 8014312:	2000      	movs	r0, #0
 8014314:	4604      	mov	r4, r0
 8014316:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801431a:	f100 0101 	add.w	r1, r0, #1
 801431e:	d012      	beq.n	8014346 <_strtod_l+0x236>
 8014320:	440a      	add	r2, r1
 8014322:	eb00 0c04 	add.w	ip, r0, r4
 8014326:	4621      	mov	r1, r4
 8014328:	270a      	movs	r7, #10
 801432a:	458c      	cmp	ip, r1
 801432c:	d113      	bne.n	8014356 <_strtod_l+0x246>
 801432e:	1821      	adds	r1, r4, r0
 8014330:	2908      	cmp	r1, #8
 8014332:	f104 0401 	add.w	r4, r4, #1
 8014336:	4404      	add	r4, r0
 8014338:	dc19      	bgt.n	801436e <_strtod_l+0x25e>
 801433a:	9b07      	ldr	r3, [sp, #28]
 801433c:	210a      	movs	r1, #10
 801433e:	fb01 e303 	mla	r3, r1, r3, lr
 8014342:	9307      	str	r3, [sp, #28]
 8014344:	2100      	movs	r1, #0
 8014346:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014348:	1c58      	adds	r0, r3, #1
 801434a:	901b      	str	r0, [sp, #108]	; 0x6c
 801434c:	785b      	ldrb	r3, [r3, #1]
 801434e:	4608      	mov	r0, r1
 8014350:	e7c9      	b.n	80142e6 <_strtod_l+0x1d6>
 8014352:	9805      	ldr	r0, [sp, #20]
 8014354:	e7d3      	b.n	80142fe <_strtod_l+0x1ee>
 8014356:	2908      	cmp	r1, #8
 8014358:	f101 0101 	add.w	r1, r1, #1
 801435c:	dc03      	bgt.n	8014366 <_strtod_l+0x256>
 801435e:	9b07      	ldr	r3, [sp, #28]
 8014360:	437b      	muls	r3, r7
 8014362:	9307      	str	r3, [sp, #28]
 8014364:	e7e1      	b.n	801432a <_strtod_l+0x21a>
 8014366:	2910      	cmp	r1, #16
 8014368:	bfd8      	it	le
 801436a:	437d      	mulle	r5, r7
 801436c:	e7dd      	b.n	801432a <_strtod_l+0x21a>
 801436e:	2c10      	cmp	r4, #16
 8014370:	bfdc      	itt	le
 8014372:	210a      	movle	r1, #10
 8014374:	fb01 e505 	mlale	r5, r1, r5, lr
 8014378:	e7e4      	b.n	8014344 <_strtod_l+0x234>
 801437a:	2301      	movs	r3, #1
 801437c:	9304      	str	r3, [sp, #16]
 801437e:	e781      	b.n	8014284 <_strtod_l+0x174>
 8014380:	f04f 0c01 	mov.w	ip, #1
 8014384:	1cb3      	adds	r3, r6, #2
 8014386:	931b      	str	r3, [sp, #108]	; 0x6c
 8014388:	78b3      	ldrb	r3, [r6, #2]
 801438a:	e78a      	b.n	80142a2 <_strtod_l+0x192>
 801438c:	f04f 0c00 	mov.w	ip, #0
 8014390:	e7f8      	b.n	8014384 <_strtod_l+0x274>
 8014392:	bf00      	nop
 8014394:	080187d4 	.word	0x080187d4
 8014398:	7ff00000 	.word	0x7ff00000
 801439c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801439e:	1c5f      	adds	r7, r3, #1
 80143a0:	971b      	str	r7, [sp, #108]	; 0x6c
 80143a2:	785b      	ldrb	r3, [r3, #1]
 80143a4:	2b30      	cmp	r3, #48	; 0x30
 80143a6:	d0f9      	beq.n	801439c <_strtod_l+0x28c>
 80143a8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80143ac:	2f08      	cmp	r7, #8
 80143ae:	f63f af7d 	bhi.w	80142ac <_strtod_l+0x19c>
 80143b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80143b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143b8:	930a      	str	r3, [sp, #40]	; 0x28
 80143ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80143bc:	1c5f      	adds	r7, r3, #1
 80143be:	971b      	str	r7, [sp, #108]	; 0x6c
 80143c0:	785b      	ldrb	r3, [r3, #1]
 80143c2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80143c6:	f1b8 0f09 	cmp.w	r8, #9
 80143ca:	d937      	bls.n	801443c <_strtod_l+0x32c>
 80143cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80143ce:	1a7f      	subs	r7, r7, r1
 80143d0:	2f08      	cmp	r7, #8
 80143d2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80143d6:	dc37      	bgt.n	8014448 <_strtod_l+0x338>
 80143d8:	45be      	cmp	lr, r7
 80143da:	bfa8      	it	ge
 80143dc:	46be      	movge	lr, r7
 80143de:	f1bc 0f00 	cmp.w	ip, #0
 80143e2:	d001      	beq.n	80143e8 <_strtod_l+0x2d8>
 80143e4:	f1ce 0e00 	rsb	lr, lr, #0
 80143e8:	2c00      	cmp	r4, #0
 80143ea:	d151      	bne.n	8014490 <_strtod_l+0x380>
 80143ec:	2800      	cmp	r0, #0
 80143ee:	f47f aece 	bne.w	801418e <_strtod_l+0x7e>
 80143f2:	9a06      	ldr	r2, [sp, #24]
 80143f4:	2a00      	cmp	r2, #0
 80143f6:	f47f aeca 	bne.w	801418e <_strtod_l+0x7e>
 80143fa:	9a04      	ldr	r2, [sp, #16]
 80143fc:	2a00      	cmp	r2, #0
 80143fe:	f47f aee4 	bne.w	80141ca <_strtod_l+0xba>
 8014402:	2b4e      	cmp	r3, #78	; 0x4e
 8014404:	d027      	beq.n	8014456 <_strtod_l+0x346>
 8014406:	dc21      	bgt.n	801444c <_strtod_l+0x33c>
 8014408:	2b49      	cmp	r3, #73	; 0x49
 801440a:	f47f aede 	bne.w	80141ca <_strtod_l+0xba>
 801440e:	49a0      	ldr	r1, [pc, #640]	; (8014690 <_strtod_l+0x580>)
 8014410:	a81b      	add	r0, sp, #108	; 0x6c
 8014412:	f002 f851 	bl	80164b8 <__match>
 8014416:	2800      	cmp	r0, #0
 8014418:	f43f aed7 	beq.w	80141ca <_strtod_l+0xba>
 801441c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801441e:	499d      	ldr	r1, [pc, #628]	; (8014694 <_strtod_l+0x584>)
 8014420:	3b01      	subs	r3, #1
 8014422:	a81b      	add	r0, sp, #108	; 0x6c
 8014424:	931b      	str	r3, [sp, #108]	; 0x6c
 8014426:	f002 f847 	bl	80164b8 <__match>
 801442a:	b910      	cbnz	r0, 8014432 <_strtod_l+0x322>
 801442c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801442e:	3301      	adds	r3, #1
 8014430:	931b      	str	r3, [sp, #108]	; 0x6c
 8014432:	f8df b274 	ldr.w	fp, [pc, #628]	; 80146a8 <_strtod_l+0x598>
 8014436:	f04f 0a00 	mov.w	sl, #0
 801443a:	e6a8      	b.n	801418e <_strtod_l+0x7e>
 801443c:	210a      	movs	r1, #10
 801443e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014442:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014446:	e7b8      	b.n	80143ba <_strtod_l+0x2aa>
 8014448:	46be      	mov	lr, r7
 801444a:	e7c8      	b.n	80143de <_strtod_l+0x2ce>
 801444c:	2b69      	cmp	r3, #105	; 0x69
 801444e:	d0de      	beq.n	801440e <_strtod_l+0x2fe>
 8014450:	2b6e      	cmp	r3, #110	; 0x6e
 8014452:	f47f aeba 	bne.w	80141ca <_strtod_l+0xba>
 8014456:	4990      	ldr	r1, [pc, #576]	; (8014698 <_strtod_l+0x588>)
 8014458:	a81b      	add	r0, sp, #108	; 0x6c
 801445a:	f002 f82d 	bl	80164b8 <__match>
 801445e:	2800      	cmp	r0, #0
 8014460:	f43f aeb3 	beq.w	80141ca <_strtod_l+0xba>
 8014464:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	2b28      	cmp	r3, #40	; 0x28
 801446a:	d10e      	bne.n	801448a <_strtod_l+0x37a>
 801446c:	aa1e      	add	r2, sp, #120	; 0x78
 801446e:	498b      	ldr	r1, [pc, #556]	; (801469c <_strtod_l+0x58c>)
 8014470:	a81b      	add	r0, sp, #108	; 0x6c
 8014472:	f002 f835 	bl	80164e0 <__hexnan>
 8014476:	2805      	cmp	r0, #5
 8014478:	d107      	bne.n	801448a <_strtod_l+0x37a>
 801447a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801447c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014480:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014484:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014488:	e681      	b.n	801418e <_strtod_l+0x7e>
 801448a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80146b0 <_strtod_l+0x5a0>
 801448e:	e7d2      	b.n	8014436 <_strtod_l+0x326>
 8014490:	ebae 0302 	sub.w	r3, lr, r2
 8014494:	9306      	str	r3, [sp, #24]
 8014496:	9b05      	ldr	r3, [sp, #20]
 8014498:	9807      	ldr	r0, [sp, #28]
 801449a:	2b00      	cmp	r3, #0
 801449c:	bf08      	it	eq
 801449e:	4623      	moveq	r3, r4
 80144a0:	2c10      	cmp	r4, #16
 80144a2:	9305      	str	r3, [sp, #20]
 80144a4:	46a0      	mov	r8, r4
 80144a6:	bfa8      	it	ge
 80144a8:	f04f 0810 	movge.w	r8, #16
 80144ac:	f7ec f842 	bl	8000534 <__aeabi_ui2d>
 80144b0:	2c09      	cmp	r4, #9
 80144b2:	4682      	mov	sl, r0
 80144b4:	468b      	mov	fp, r1
 80144b6:	dc13      	bgt.n	80144e0 <_strtod_l+0x3d0>
 80144b8:	9b06      	ldr	r3, [sp, #24]
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f43f ae67 	beq.w	801418e <_strtod_l+0x7e>
 80144c0:	9b06      	ldr	r3, [sp, #24]
 80144c2:	dd7a      	ble.n	80145ba <_strtod_l+0x4aa>
 80144c4:	2b16      	cmp	r3, #22
 80144c6:	dc61      	bgt.n	801458c <_strtod_l+0x47c>
 80144c8:	4a75      	ldr	r2, [pc, #468]	; (80146a0 <_strtod_l+0x590>)
 80144ca:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80144ce:	e9de 0100 	ldrd	r0, r1, [lr]
 80144d2:	4652      	mov	r2, sl
 80144d4:	465b      	mov	r3, fp
 80144d6:	f7ec f8a7 	bl	8000628 <__aeabi_dmul>
 80144da:	4682      	mov	sl, r0
 80144dc:	468b      	mov	fp, r1
 80144de:	e656      	b.n	801418e <_strtod_l+0x7e>
 80144e0:	4b6f      	ldr	r3, [pc, #444]	; (80146a0 <_strtod_l+0x590>)
 80144e2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80144e6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80144ea:	f7ec f89d 	bl	8000628 <__aeabi_dmul>
 80144ee:	4606      	mov	r6, r0
 80144f0:	4628      	mov	r0, r5
 80144f2:	460f      	mov	r7, r1
 80144f4:	f7ec f81e 	bl	8000534 <__aeabi_ui2d>
 80144f8:	4602      	mov	r2, r0
 80144fa:	460b      	mov	r3, r1
 80144fc:	4630      	mov	r0, r6
 80144fe:	4639      	mov	r1, r7
 8014500:	f7eb fedc 	bl	80002bc <__adddf3>
 8014504:	2c0f      	cmp	r4, #15
 8014506:	4682      	mov	sl, r0
 8014508:	468b      	mov	fp, r1
 801450a:	ddd5      	ble.n	80144b8 <_strtod_l+0x3a8>
 801450c:	9b06      	ldr	r3, [sp, #24]
 801450e:	eba4 0808 	sub.w	r8, r4, r8
 8014512:	4498      	add	r8, r3
 8014514:	f1b8 0f00 	cmp.w	r8, #0
 8014518:	f340 8096 	ble.w	8014648 <_strtod_l+0x538>
 801451c:	f018 030f 	ands.w	r3, r8, #15
 8014520:	d00a      	beq.n	8014538 <_strtod_l+0x428>
 8014522:	495f      	ldr	r1, [pc, #380]	; (80146a0 <_strtod_l+0x590>)
 8014524:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014528:	4652      	mov	r2, sl
 801452a:	465b      	mov	r3, fp
 801452c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014530:	f7ec f87a 	bl	8000628 <__aeabi_dmul>
 8014534:	4682      	mov	sl, r0
 8014536:	468b      	mov	fp, r1
 8014538:	f038 080f 	bics.w	r8, r8, #15
 801453c:	d073      	beq.n	8014626 <_strtod_l+0x516>
 801453e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8014542:	dd47      	ble.n	80145d4 <_strtod_l+0x4c4>
 8014544:	2400      	movs	r4, #0
 8014546:	46a0      	mov	r8, r4
 8014548:	9407      	str	r4, [sp, #28]
 801454a:	9405      	str	r4, [sp, #20]
 801454c:	2322      	movs	r3, #34	; 0x22
 801454e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80146a8 <_strtod_l+0x598>
 8014552:	f8c9 3000 	str.w	r3, [r9]
 8014556:	f04f 0a00 	mov.w	sl, #0
 801455a:	9b07      	ldr	r3, [sp, #28]
 801455c:	2b00      	cmp	r3, #0
 801455e:	f43f ae16 	beq.w	801418e <_strtod_l+0x7e>
 8014562:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014564:	4648      	mov	r0, r9
 8014566:	f002 f931 	bl	80167cc <_Bfree>
 801456a:	9905      	ldr	r1, [sp, #20]
 801456c:	4648      	mov	r0, r9
 801456e:	f002 f92d 	bl	80167cc <_Bfree>
 8014572:	4641      	mov	r1, r8
 8014574:	4648      	mov	r0, r9
 8014576:	f002 f929 	bl	80167cc <_Bfree>
 801457a:	9907      	ldr	r1, [sp, #28]
 801457c:	4648      	mov	r0, r9
 801457e:	f002 f925 	bl	80167cc <_Bfree>
 8014582:	4621      	mov	r1, r4
 8014584:	4648      	mov	r0, r9
 8014586:	f002 f921 	bl	80167cc <_Bfree>
 801458a:	e600      	b.n	801418e <_strtod_l+0x7e>
 801458c:	9a06      	ldr	r2, [sp, #24]
 801458e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8014592:	4293      	cmp	r3, r2
 8014594:	dbba      	blt.n	801450c <_strtod_l+0x3fc>
 8014596:	4d42      	ldr	r5, [pc, #264]	; (80146a0 <_strtod_l+0x590>)
 8014598:	f1c4 040f 	rsb	r4, r4, #15
 801459c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80145a0:	4652      	mov	r2, sl
 80145a2:	465b      	mov	r3, fp
 80145a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80145a8:	f7ec f83e 	bl	8000628 <__aeabi_dmul>
 80145ac:	9b06      	ldr	r3, [sp, #24]
 80145ae:	1b1c      	subs	r4, r3, r4
 80145b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80145b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80145b8:	e78d      	b.n	80144d6 <_strtod_l+0x3c6>
 80145ba:	f113 0f16 	cmn.w	r3, #22
 80145be:	dba5      	blt.n	801450c <_strtod_l+0x3fc>
 80145c0:	4a37      	ldr	r2, [pc, #220]	; (80146a0 <_strtod_l+0x590>)
 80145c2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80145c6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80145ca:	4650      	mov	r0, sl
 80145cc:	4659      	mov	r1, fp
 80145ce:	f7ec f955 	bl	800087c <__aeabi_ddiv>
 80145d2:	e782      	b.n	80144da <_strtod_l+0x3ca>
 80145d4:	2300      	movs	r3, #0
 80145d6:	4e33      	ldr	r6, [pc, #204]	; (80146a4 <_strtod_l+0x594>)
 80145d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80145dc:	4650      	mov	r0, sl
 80145de:	4659      	mov	r1, fp
 80145e0:	461d      	mov	r5, r3
 80145e2:	f1b8 0f01 	cmp.w	r8, #1
 80145e6:	dc21      	bgt.n	801462c <_strtod_l+0x51c>
 80145e8:	b10b      	cbz	r3, 80145ee <_strtod_l+0x4de>
 80145ea:	4682      	mov	sl, r0
 80145ec:	468b      	mov	fp, r1
 80145ee:	4b2d      	ldr	r3, [pc, #180]	; (80146a4 <_strtod_l+0x594>)
 80145f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80145f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80145f8:	4652      	mov	r2, sl
 80145fa:	465b      	mov	r3, fp
 80145fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014600:	f7ec f812 	bl	8000628 <__aeabi_dmul>
 8014604:	4b28      	ldr	r3, [pc, #160]	; (80146a8 <_strtod_l+0x598>)
 8014606:	460a      	mov	r2, r1
 8014608:	400b      	ands	r3, r1
 801460a:	4928      	ldr	r1, [pc, #160]	; (80146ac <_strtod_l+0x59c>)
 801460c:	428b      	cmp	r3, r1
 801460e:	4682      	mov	sl, r0
 8014610:	d898      	bhi.n	8014544 <_strtod_l+0x434>
 8014612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014616:	428b      	cmp	r3, r1
 8014618:	bf86      	itte	hi
 801461a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80146b4 <_strtod_l+0x5a4>
 801461e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014622:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014626:	2300      	movs	r3, #0
 8014628:	9304      	str	r3, [sp, #16]
 801462a:	e077      	b.n	801471c <_strtod_l+0x60c>
 801462c:	f018 0f01 	tst.w	r8, #1
 8014630:	d006      	beq.n	8014640 <_strtod_l+0x530>
 8014632:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801463a:	f7eb fff5 	bl	8000628 <__aeabi_dmul>
 801463e:	2301      	movs	r3, #1
 8014640:	3501      	adds	r5, #1
 8014642:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014646:	e7cc      	b.n	80145e2 <_strtod_l+0x4d2>
 8014648:	d0ed      	beq.n	8014626 <_strtod_l+0x516>
 801464a:	f1c8 0800 	rsb	r8, r8, #0
 801464e:	f018 020f 	ands.w	r2, r8, #15
 8014652:	d00a      	beq.n	801466a <_strtod_l+0x55a>
 8014654:	4b12      	ldr	r3, [pc, #72]	; (80146a0 <_strtod_l+0x590>)
 8014656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801465a:	4650      	mov	r0, sl
 801465c:	4659      	mov	r1, fp
 801465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014662:	f7ec f90b 	bl	800087c <__aeabi_ddiv>
 8014666:	4682      	mov	sl, r0
 8014668:	468b      	mov	fp, r1
 801466a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801466e:	d0da      	beq.n	8014626 <_strtod_l+0x516>
 8014670:	f1b8 0f1f 	cmp.w	r8, #31
 8014674:	dd20      	ble.n	80146b8 <_strtod_l+0x5a8>
 8014676:	2400      	movs	r4, #0
 8014678:	46a0      	mov	r8, r4
 801467a:	9407      	str	r4, [sp, #28]
 801467c:	9405      	str	r4, [sp, #20]
 801467e:	2322      	movs	r3, #34	; 0x22
 8014680:	f04f 0a00 	mov.w	sl, #0
 8014684:	f04f 0b00 	mov.w	fp, #0
 8014688:	f8c9 3000 	str.w	r3, [r9]
 801468c:	e765      	b.n	801455a <_strtod_l+0x44a>
 801468e:	bf00      	nop
 8014690:	080187a1 	.word	0x080187a1
 8014694:	0801882b 	.word	0x0801882b
 8014698:	080187a9 	.word	0x080187a9
 801469c:	080187e8 	.word	0x080187e8
 80146a0:	080188d0 	.word	0x080188d0
 80146a4:	080188a8 	.word	0x080188a8
 80146a8:	7ff00000 	.word	0x7ff00000
 80146ac:	7ca00000 	.word	0x7ca00000
 80146b0:	fff80000 	.word	0xfff80000
 80146b4:	7fefffff 	.word	0x7fefffff
 80146b8:	f018 0310 	ands.w	r3, r8, #16
 80146bc:	bf18      	it	ne
 80146be:	236a      	movne	r3, #106	; 0x6a
 80146c0:	4da0      	ldr	r5, [pc, #640]	; (8014944 <_strtod_l+0x834>)
 80146c2:	9304      	str	r3, [sp, #16]
 80146c4:	4650      	mov	r0, sl
 80146c6:	4659      	mov	r1, fp
 80146c8:	2300      	movs	r3, #0
 80146ca:	f1b8 0f00 	cmp.w	r8, #0
 80146ce:	f300 810a 	bgt.w	80148e6 <_strtod_l+0x7d6>
 80146d2:	b10b      	cbz	r3, 80146d8 <_strtod_l+0x5c8>
 80146d4:	4682      	mov	sl, r0
 80146d6:	468b      	mov	fp, r1
 80146d8:	9b04      	ldr	r3, [sp, #16]
 80146da:	b1bb      	cbz	r3, 801470c <_strtod_l+0x5fc>
 80146dc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80146e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	4659      	mov	r1, fp
 80146e8:	dd10      	ble.n	801470c <_strtod_l+0x5fc>
 80146ea:	2b1f      	cmp	r3, #31
 80146ec:	f340 8107 	ble.w	80148fe <_strtod_l+0x7ee>
 80146f0:	2b34      	cmp	r3, #52	; 0x34
 80146f2:	bfde      	ittt	le
 80146f4:	3b20      	suble	r3, #32
 80146f6:	f04f 32ff 	movle.w	r2, #4294967295
 80146fa:	fa02 f303 	lslle.w	r3, r2, r3
 80146fe:	f04f 0a00 	mov.w	sl, #0
 8014702:	bfcc      	ite	gt
 8014704:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014708:	ea03 0b01 	andle.w	fp, r3, r1
 801470c:	2200      	movs	r2, #0
 801470e:	2300      	movs	r3, #0
 8014710:	4650      	mov	r0, sl
 8014712:	4659      	mov	r1, fp
 8014714:	f7ec f9f0 	bl	8000af8 <__aeabi_dcmpeq>
 8014718:	2800      	cmp	r0, #0
 801471a:	d1ac      	bne.n	8014676 <_strtod_l+0x566>
 801471c:	9b07      	ldr	r3, [sp, #28]
 801471e:	9300      	str	r3, [sp, #0]
 8014720:	9a05      	ldr	r2, [sp, #20]
 8014722:	9908      	ldr	r1, [sp, #32]
 8014724:	4623      	mov	r3, r4
 8014726:	4648      	mov	r0, r9
 8014728:	f002 f8a2 	bl	8016870 <__s2b>
 801472c:	9007      	str	r0, [sp, #28]
 801472e:	2800      	cmp	r0, #0
 8014730:	f43f af08 	beq.w	8014544 <_strtod_l+0x434>
 8014734:	9a06      	ldr	r2, [sp, #24]
 8014736:	9b06      	ldr	r3, [sp, #24]
 8014738:	2a00      	cmp	r2, #0
 801473a:	f1c3 0300 	rsb	r3, r3, #0
 801473e:	bfa8      	it	ge
 8014740:	2300      	movge	r3, #0
 8014742:	930e      	str	r3, [sp, #56]	; 0x38
 8014744:	2400      	movs	r4, #0
 8014746:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801474a:	9316      	str	r3, [sp, #88]	; 0x58
 801474c:	46a0      	mov	r8, r4
 801474e:	9b07      	ldr	r3, [sp, #28]
 8014750:	4648      	mov	r0, r9
 8014752:	6859      	ldr	r1, [r3, #4]
 8014754:	f002 f806 	bl	8016764 <_Balloc>
 8014758:	9005      	str	r0, [sp, #20]
 801475a:	2800      	cmp	r0, #0
 801475c:	f43f aef6 	beq.w	801454c <_strtod_l+0x43c>
 8014760:	9b07      	ldr	r3, [sp, #28]
 8014762:	691a      	ldr	r2, [r3, #16]
 8014764:	3202      	adds	r2, #2
 8014766:	f103 010c 	add.w	r1, r3, #12
 801476a:	0092      	lsls	r2, r2, #2
 801476c:	300c      	adds	r0, #12
 801476e:	f7fe fcff 	bl	8013170 <memcpy>
 8014772:	aa1e      	add	r2, sp, #120	; 0x78
 8014774:	a91d      	add	r1, sp, #116	; 0x74
 8014776:	ec4b ab10 	vmov	d0, sl, fp
 801477a:	4648      	mov	r0, r9
 801477c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014780:	f002 fb32 	bl	8016de8 <__d2b>
 8014784:	901c      	str	r0, [sp, #112]	; 0x70
 8014786:	2800      	cmp	r0, #0
 8014788:	f43f aee0 	beq.w	801454c <_strtod_l+0x43c>
 801478c:	2101      	movs	r1, #1
 801478e:	4648      	mov	r0, r9
 8014790:	f002 f8fa 	bl	8016988 <__i2b>
 8014794:	4680      	mov	r8, r0
 8014796:	2800      	cmp	r0, #0
 8014798:	f43f aed8 	beq.w	801454c <_strtod_l+0x43c>
 801479c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801479e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80147a0:	2e00      	cmp	r6, #0
 80147a2:	bfab      	itete	ge
 80147a4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80147a6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80147a8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80147aa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80147ac:	bfac      	ite	ge
 80147ae:	18f7      	addge	r7, r6, r3
 80147b0:	1b9d      	sublt	r5, r3, r6
 80147b2:	9b04      	ldr	r3, [sp, #16]
 80147b4:	1af6      	subs	r6, r6, r3
 80147b6:	4416      	add	r6, r2
 80147b8:	4b63      	ldr	r3, [pc, #396]	; (8014948 <_strtod_l+0x838>)
 80147ba:	3e01      	subs	r6, #1
 80147bc:	429e      	cmp	r6, r3
 80147be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80147c2:	f280 80af 	bge.w	8014924 <_strtod_l+0x814>
 80147c6:	1b9b      	subs	r3, r3, r6
 80147c8:	2b1f      	cmp	r3, #31
 80147ca:	eba2 0203 	sub.w	r2, r2, r3
 80147ce:	f04f 0101 	mov.w	r1, #1
 80147d2:	f300 809b 	bgt.w	801490c <_strtod_l+0x7fc>
 80147d6:	fa01 f303 	lsl.w	r3, r1, r3
 80147da:	930f      	str	r3, [sp, #60]	; 0x3c
 80147dc:	2300      	movs	r3, #0
 80147de:	930a      	str	r3, [sp, #40]	; 0x28
 80147e0:	18be      	adds	r6, r7, r2
 80147e2:	9b04      	ldr	r3, [sp, #16]
 80147e4:	42b7      	cmp	r7, r6
 80147e6:	4415      	add	r5, r2
 80147e8:	441d      	add	r5, r3
 80147ea:	463b      	mov	r3, r7
 80147ec:	bfa8      	it	ge
 80147ee:	4633      	movge	r3, r6
 80147f0:	42ab      	cmp	r3, r5
 80147f2:	bfa8      	it	ge
 80147f4:	462b      	movge	r3, r5
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	bfc2      	ittt	gt
 80147fa:	1af6      	subgt	r6, r6, r3
 80147fc:	1aed      	subgt	r5, r5, r3
 80147fe:	1aff      	subgt	r7, r7, r3
 8014800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014802:	b1bb      	cbz	r3, 8014834 <_strtod_l+0x724>
 8014804:	4641      	mov	r1, r8
 8014806:	461a      	mov	r2, r3
 8014808:	4648      	mov	r0, r9
 801480a:	f002 f95d 	bl	8016ac8 <__pow5mult>
 801480e:	4680      	mov	r8, r0
 8014810:	2800      	cmp	r0, #0
 8014812:	f43f ae9b 	beq.w	801454c <_strtod_l+0x43c>
 8014816:	4601      	mov	r1, r0
 8014818:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801481a:	4648      	mov	r0, r9
 801481c:	f002 f8bd 	bl	801699a <__multiply>
 8014820:	900c      	str	r0, [sp, #48]	; 0x30
 8014822:	2800      	cmp	r0, #0
 8014824:	f43f ae92 	beq.w	801454c <_strtod_l+0x43c>
 8014828:	991c      	ldr	r1, [sp, #112]	; 0x70
 801482a:	4648      	mov	r0, r9
 801482c:	f001 ffce 	bl	80167cc <_Bfree>
 8014830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014832:	931c      	str	r3, [sp, #112]	; 0x70
 8014834:	2e00      	cmp	r6, #0
 8014836:	dc7a      	bgt.n	801492e <_strtod_l+0x81e>
 8014838:	9b06      	ldr	r3, [sp, #24]
 801483a:	2b00      	cmp	r3, #0
 801483c:	dd08      	ble.n	8014850 <_strtod_l+0x740>
 801483e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014840:	9905      	ldr	r1, [sp, #20]
 8014842:	4648      	mov	r0, r9
 8014844:	f002 f940 	bl	8016ac8 <__pow5mult>
 8014848:	9005      	str	r0, [sp, #20]
 801484a:	2800      	cmp	r0, #0
 801484c:	f43f ae7e 	beq.w	801454c <_strtod_l+0x43c>
 8014850:	2d00      	cmp	r5, #0
 8014852:	dd08      	ble.n	8014866 <_strtod_l+0x756>
 8014854:	462a      	mov	r2, r5
 8014856:	9905      	ldr	r1, [sp, #20]
 8014858:	4648      	mov	r0, r9
 801485a:	f002 f983 	bl	8016b64 <__lshift>
 801485e:	9005      	str	r0, [sp, #20]
 8014860:	2800      	cmp	r0, #0
 8014862:	f43f ae73 	beq.w	801454c <_strtod_l+0x43c>
 8014866:	2f00      	cmp	r7, #0
 8014868:	dd08      	ble.n	801487c <_strtod_l+0x76c>
 801486a:	4641      	mov	r1, r8
 801486c:	463a      	mov	r2, r7
 801486e:	4648      	mov	r0, r9
 8014870:	f002 f978 	bl	8016b64 <__lshift>
 8014874:	4680      	mov	r8, r0
 8014876:	2800      	cmp	r0, #0
 8014878:	f43f ae68 	beq.w	801454c <_strtod_l+0x43c>
 801487c:	9a05      	ldr	r2, [sp, #20]
 801487e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014880:	4648      	mov	r0, r9
 8014882:	f002 f9dd 	bl	8016c40 <__mdiff>
 8014886:	4604      	mov	r4, r0
 8014888:	2800      	cmp	r0, #0
 801488a:	f43f ae5f 	beq.w	801454c <_strtod_l+0x43c>
 801488e:	68c3      	ldr	r3, [r0, #12]
 8014890:	930c      	str	r3, [sp, #48]	; 0x30
 8014892:	2300      	movs	r3, #0
 8014894:	60c3      	str	r3, [r0, #12]
 8014896:	4641      	mov	r1, r8
 8014898:	f002 f9b8 	bl	8016c0c <__mcmp>
 801489c:	2800      	cmp	r0, #0
 801489e:	da55      	bge.n	801494c <_strtod_l+0x83c>
 80148a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148a2:	b9e3      	cbnz	r3, 80148de <_strtod_l+0x7ce>
 80148a4:	f1ba 0f00 	cmp.w	sl, #0
 80148a8:	d119      	bne.n	80148de <_strtod_l+0x7ce>
 80148aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80148ae:	b9b3      	cbnz	r3, 80148de <_strtod_l+0x7ce>
 80148b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80148b4:	0d1b      	lsrs	r3, r3, #20
 80148b6:	051b      	lsls	r3, r3, #20
 80148b8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80148bc:	d90f      	bls.n	80148de <_strtod_l+0x7ce>
 80148be:	6963      	ldr	r3, [r4, #20]
 80148c0:	b913      	cbnz	r3, 80148c8 <_strtod_l+0x7b8>
 80148c2:	6923      	ldr	r3, [r4, #16]
 80148c4:	2b01      	cmp	r3, #1
 80148c6:	dd0a      	ble.n	80148de <_strtod_l+0x7ce>
 80148c8:	4621      	mov	r1, r4
 80148ca:	2201      	movs	r2, #1
 80148cc:	4648      	mov	r0, r9
 80148ce:	f002 f949 	bl	8016b64 <__lshift>
 80148d2:	4641      	mov	r1, r8
 80148d4:	4604      	mov	r4, r0
 80148d6:	f002 f999 	bl	8016c0c <__mcmp>
 80148da:	2800      	cmp	r0, #0
 80148dc:	dc67      	bgt.n	80149ae <_strtod_l+0x89e>
 80148de:	9b04      	ldr	r3, [sp, #16]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d171      	bne.n	80149c8 <_strtod_l+0x8b8>
 80148e4:	e63d      	b.n	8014562 <_strtod_l+0x452>
 80148e6:	f018 0f01 	tst.w	r8, #1
 80148ea:	d004      	beq.n	80148f6 <_strtod_l+0x7e6>
 80148ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80148f0:	f7eb fe9a 	bl	8000628 <__aeabi_dmul>
 80148f4:	2301      	movs	r3, #1
 80148f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80148fa:	3508      	adds	r5, #8
 80148fc:	e6e5      	b.n	80146ca <_strtod_l+0x5ba>
 80148fe:	f04f 32ff 	mov.w	r2, #4294967295
 8014902:	fa02 f303 	lsl.w	r3, r2, r3
 8014906:	ea03 0a0a 	and.w	sl, r3, sl
 801490a:	e6ff      	b.n	801470c <_strtod_l+0x5fc>
 801490c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014910:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014914:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014918:	36e2      	adds	r6, #226	; 0xe2
 801491a:	fa01 f306 	lsl.w	r3, r1, r6
 801491e:	930a      	str	r3, [sp, #40]	; 0x28
 8014920:	910f      	str	r1, [sp, #60]	; 0x3c
 8014922:	e75d      	b.n	80147e0 <_strtod_l+0x6d0>
 8014924:	2300      	movs	r3, #0
 8014926:	930a      	str	r3, [sp, #40]	; 0x28
 8014928:	2301      	movs	r3, #1
 801492a:	930f      	str	r3, [sp, #60]	; 0x3c
 801492c:	e758      	b.n	80147e0 <_strtod_l+0x6d0>
 801492e:	4632      	mov	r2, r6
 8014930:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014932:	4648      	mov	r0, r9
 8014934:	f002 f916 	bl	8016b64 <__lshift>
 8014938:	901c      	str	r0, [sp, #112]	; 0x70
 801493a:	2800      	cmp	r0, #0
 801493c:	f47f af7c 	bne.w	8014838 <_strtod_l+0x728>
 8014940:	e604      	b.n	801454c <_strtod_l+0x43c>
 8014942:	bf00      	nop
 8014944:	08018800 	.word	0x08018800
 8014948:	fffffc02 	.word	0xfffffc02
 801494c:	465d      	mov	r5, fp
 801494e:	f040 8086 	bne.w	8014a5e <_strtod_l+0x94e>
 8014952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014954:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014958:	b32a      	cbz	r2, 80149a6 <_strtod_l+0x896>
 801495a:	4aaf      	ldr	r2, [pc, #700]	; (8014c18 <_strtod_l+0xb08>)
 801495c:	4293      	cmp	r3, r2
 801495e:	d153      	bne.n	8014a08 <_strtod_l+0x8f8>
 8014960:	9b04      	ldr	r3, [sp, #16]
 8014962:	4650      	mov	r0, sl
 8014964:	b1d3      	cbz	r3, 801499c <_strtod_l+0x88c>
 8014966:	4aad      	ldr	r2, [pc, #692]	; (8014c1c <_strtod_l+0xb0c>)
 8014968:	402a      	ands	r2, r5
 801496a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801496e:	f04f 31ff 	mov.w	r1, #4294967295
 8014972:	d816      	bhi.n	80149a2 <_strtod_l+0x892>
 8014974:	0d12      	lsrs	r2, r2, #20
 8014976:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801497a:	fa01 f303 	lsl.w	r3, r1, r3
 801497e:	4298      	cmp	r0, r3
 8014980:	d142      	bne.n	8014a08 <_strtod_l+0x8f8>
 8014982:	4ba7      	ldr	r3, [pc, #668]	; (8014c20 <_strtod_l+0xb10>)
 8014984:	429d      	cmp	r5, r3
 8014986:	d102      	bne.n	801498e <_strtod_l+0x87e>
 8014988:	3001      	adds	r0, #1
 801498a:	f43f addf 	beq.w	801454c <_strtod_l+0x43c>
 801498e:	4ba3      	ldr	r3, [pc, #652]	; (8014c1c <_strtod_l+0xb0c>)
 8014990:	402b      	ands	r3, r5
 8014992:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8014996:	f04f 0a00 	mov.w	sl, #0
 801499a:	e7a0      	b.n	80148de <_strtod_l+0x7ce>
 801499c:	f04f 33ff 	mov.w	r3, #4294967295
 80149a0:	e7ed      	b.n	801497e <_strtod_l+0x86e>
 80149a2:	460b      	mov	r3, r1
 80149a4:	e7eb      	b.n	801497e <_strtod_l+0x86e>
 80149a6:	bb7b      	cbnz	r3, 8014a08 <_strtod_l+0x8f8>
 80149a8:	f1ba 0f00 	cmp.w	sl, #0
 80149ac:	d12c      	bne.n	8014a08 <_strtod_l+0x8f8>
 80149ae:	9904      	ldr	r1, [sp, #16]
 80149b0:	4a9a      	ldr	r2, [pc, #616]	; (8014c1c <_strtod_l+0xb0c>)
 80149b2:	465b      	mov	r3, fp
 80149b4:	b1f1      	cbz	r1, 80149f4 <_strtod_l+0x8e4>
 80149b6:	ea02 010b 	and.w	r1, r2, fp
 80149ba:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80149be:	dc19      	bgt.n	80149f4 <_strtod_l+0x8e4>
 80149c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80149c4:	f77f ae5b 	ble.w	801467e <_strtod_l+0x56e>
 80149c8:	4a96      	ldr	r2, [pc, #600]	; (8014c24 <_strtod_l+0xb14>)
 80149ca:	2300      	movs	r3, #0
 80149cc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80149d0:	4650      	mov	r0, sl
 80149d2:	4659      	mov	r1, fp
 80149d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80149d8:	f7eb fe26 	bl	8000628 <__aeabi_dmul>
 80149dc:	4682      	mov	sl, r0
 80149de:	468b      	mov	fp, r1
 80149e0:	2900      	cmp	r1, #0
 80149e2:	f47f adbe 	bne.w	8014562 <_strtod_l+0x452>
 80149e6:	2800      	cmp	r0, #0
 80149e8:	f47f adbb 	bne.w	8014562 <_strtod_l+0x452>
 80149ec:	2322      	movs	r3, #34	; 0x22
 80149ee:	f8c9 3000 	str.w	r3, [r9]
 80149f2:	e5b6      	b.n	8014562 <_strtod_l+0x452>
 80149f4:	4013      	ands	r3, r2
 80149f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80149fa:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80149fe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014a02:	f04f 3aff 	mov.w	sl, #4294967295
 8014a06:	e76a      	b.n	80148de <_strtod_l+0x7ce>
 8014a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a0a:	b193      	cbz	r3, 8014a32 <_strtod_l+0x922>
 8014a0c:	422b      	tst	r3, r5
 8014a0e:	f43f af66 	beq.w	80148de <_strtod_l+0x7ce>
 8014a12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a14:	9a04      	ldr	r2, [sp, #16]
 8014a16:	4650      	mov	r0, sl
 8014a18:	4659      	mov	r1, fp
 8014a1a:	b173      	cbz	r3, 8014a3a <_strtod_l+0x92a>
 8014a1c:	f7ff fb5b 	bl	80140d6 <sulp>
 8014a20:	4602      	mov	r2, r0
 8014a22:	460b      	mov	r3, r1
 8014a24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a28:	f7eb fc48 	bl	80002bc <__adddf3>
 8014a2c:	4682      	mov	sl, r0
 8014a2e:	468b      	mov	fp, r1
 8014a30:	e755      	b.n	80148de <_strtod_l+0x7ce>
 8014a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014a34:	ea13 0f0a 	tst.w	r3, sl
 8014a38:	e7e9      	b.n	8014a0e <_strtod_l+0x8fe>
 8014a3a:	f7ff fb4c 	bl	80140d6 <sulp>
 8014a3e:	4602      	mov	r2, r0
 8014a40:	460b      	mov	r3, r1
 8014a42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014a46:	f7eb fc37 	bl	80002b8 <__aeabi_dsub>
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	4682      	mov	sl, r0
 8014a50:	468b      	mov	fp, r1
 8014a52:	f7ec f851 	bl	8000af8 <__aeabi_dcmpeq>
 8014a56:	2800      	cmp	r0, #0
 8014a58:	f47f ae11 	bne.w	801467e <_strtod_l+0x56e>
 8014a5c:	e73f      	b.n	80148de <_strtod_l+0x7ce>
 8014a5e:	4641      	mov	r1, r8
 8014a60:	4620      	mov	r0, r4
 8014a62:	f002 fa10 	bl	8016e86 <__ratio>
 8014a66:	ec57 6b10 	vmov	r6, r7, d0
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a70:	ee10 0a10 	vmov	r0, s0
 8014a74:	4639      	mov	r1, r7
 8014a76:	f7ec f853 	bl	8000b20 <__aeabi_dcmple>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	d077      	beq.n	8014b6e <_strtod_l+0xa5e>
 8014a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d04a      	beq.n	8014b1a <_strtod_l+0xa0a>
 8014a84:	4b68      	ldr	r3, [pc, #416]	; (8014c28 <_strtod_l+0xb18>)
 8014a86:	2200      	movs	r2, #0
 8014a88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014a8c:	4f66      	ldr	r7, [pc, #408]	; (8014c28 <_strtod_l+0xb18>)
 8014a8e:	2600      	movs	r6, #0
 8014a90:	4b62      	ldr	r3, [pc, #392]	; (8014c1c <_strtod_l+0xb0c>)
 8014a92:	402b      	ands	r3, r5
 8014a94:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014a98:	4b64      	ldr	r3, [pc, #400]	; (8014c2c <_strtod_l+0xb1c>)
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	f040 80ce 	bne.w	8014c3c <_strtod_l+0xb2c>
 8014aa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014aa4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014aa8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8014aac:	ec4b ab10 	vmov	d0, sl, fp
 8014ab0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8014ab4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014ab8:	f002 f920 	bl	8016cfc <__ulp>
 8014abc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014ac0:	ec53 2b10 	vmov	r2, r3, d0
 8014ac4:	f7eb fdb0 	bl	8000628 <__aeabi_dmul>
 8014ac8:	4652      	mov	r2, sl
 8014aca:	465b      	mov	r3, fp
 8014acc:	f7eb fbf6 	bl	80002bc <__adddf3>
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	4952      	ldr	r1, [pc, #328]	; (8014c1c <_strtod_l+0xb0c>)
 8014ad4:	4a56      	ldr	r2, [pc, #344]	; (8014c30 <_strtod_l+0xb20>)
 8014ad6:	4019      	ands	r1, r3
 8014ad8:	4291      	cmp	r1, r2
 8014ada:	4682      	mov	sl, r0
 8014adc:	d95b      	bls.n	8014b96 <_strtod_l+0xa86>
 8014ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ae0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d103      	bne.n	8014af0 <_strtod_l+0x9e0>
 8014ae8:	9b08      	ldr	r3, [sp, #32]
 8014aea:	3301      	adds	r3, #1
 8014aec:	f43f ad2e 	beq.w	801454c <_strtod_l+0x43c>
 8014af0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014c20 <_strtod_l+0xb10>
 8014af4:	f04f 3aff 	mov.w	sl, #4294967295
 8014af8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014afa:	4648      	mov	r0, r9
 8014afc:	f001 fe66 	bl	80167cc <_Bfree>
 8014b00:	9905      	ldr	r1, [sp, #20]
 8014b02:	4648      	mov	r0, r9
 8014b04:	f001 fe62 	bl	80167cc <_Bfree>
 8014b08:	4641      	mov	r1, r8
 8014b0a:	4648      	mov	r0, r9
 8014b0c:	f001 fe5e 	bl	80167cc <_Bfree>
 8014b10:	4621      	mov	r1, r4
 8014b12:	4648      	mov	r0, r9
 8014b14:	f001 fe5a 	bl	80167cc <_Bfree>
 8014b18:	e619      	b.n	801474e <_strtod_l+0x63e>
 8014b1a:	f1ba 0f00 	cmp.w	sl, #0
 8014b1e:	d11a      	bne.n	8014b56 <_strtod_l+0xa46>
 8014b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014b24:	b9eb      	cbnz	r3, 8014b62 <_strtod_l+0xa52>
 8014b26:	2200      	movs	r2, #0
 8014b28:	4b3f      	ldr	r3, [pc, #252]	; (8014c28 <_strtod_l+0xb18>)
 8014b2a:	4630      	mov	r0, r6
 8014b2c:	4639      	mov	r1, r7
 8014b2e:	f7eb ffed 	bl	8000b0c <__aeabi_dcmplt>
 8014b32:	b9c8      	cbnz	r0, 8014b68 <_strtod_l+0xa58>
 8014b34:	4630      	mov	r0, r6
 8014b36:	4639      	mov	r1, r7
 8014b38:	2200      	movs	r2, #0
 8014b3a:	4b3e      	ldr	r3, [pc, #248]	; (8014c34 <_strtod_l+0xb24>)
 8014b3c:	f7eb fd74 	bl	8000628 <__aeabi_dmul>
 8014b40:	4606      	mov	r6, r0
 8014b42:	460f      	mov	r7, r1
 8014b44:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014b48:	9618      	str	r6, [sp, #96]	; 0x60
 8014b4a:	9319      	str	r3, [sp, #100]	; 0x64
 8014b4c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014b50:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014b54:	e79c      	b.n	8014a90 <_strtod_l+0x980>
 8014b56:	f1ba 0f01 	cmp.w	sl, #1
 8014b5a:	d102      	bne.n	8014b62 <_strtod_l+0xa52>
 8014b5c:	2d00      	cmp	r5, #0
 8014b5e:	f43f ad8e 	beq.w	801467e <_strtod_l+0x56e>
 8014b62:	2200      	movs	r2, #0
 8014b64:	4b34      	ldr	r3, [pc, #208]	; (8014c38 <_strtod_l+0xb28>)
 8014b66:	e78f      	b.n	8014a88 <_strtod_l+0x978>
 8014b68:	2600      	movs	r6, #0
 8014b6a:	4f32      	ldr	r7, [pc, #200]	; (8014c34 <_strtod_l+0xb24>)
 8014b6c:	e7ea      	b.n	8014b44 <_strtod_l+0xa34>
 8014b6e:	4b31      	ldr	r3, [pc, #196]	; (8014c34 <_strtod_l+0xb24>)
 8014b70:	4630      	mov	r0, r6
 8014b72:	4639      	mov	r1, r7
 8014b74:	2200      	movs	r2, #0
 8014b76:	f7eb fd57 	bl	8000628 <__aeabi_dmul>
 8014b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b7c:	4606      	mov	r6, r0
 8014b7e:	460f      	mov	r7, r1
 8014b80:	b933      	cbnz	r3, 8014b90 <_strtod_l+0xa80>
 8014b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b86:	9010      	str	r0, [sp, #64]	; 0x40
 8014b88:	9311      	str	r3, [sp, #68]	; 0x44
 8014b8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014b8e:	e7df      	b.n	8014b50 <_strtod_l+0xa40>
 8014b90:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8014b94:	e7f9      	b.n	8014b8a <_strtod_l+0xa7a>
 8014b96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014b9a:	9b04      	ldr	r3, [sp, #16]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d1ab      	bne.n	8014af8 <_strtod_l+0x9e8>
 8014ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ba4:	0d1b      	lsrs	r3, r3, #20
 8014ba6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ba8:	051b      	lsls	r3, r3, #20
 8014baa:	429a      	cmp	r2, r3
 8014bac:	465d      	mov	r5, fp
 8014bae:	d1a3      	bne.n	8014af8 <_strtod_l+0x9e8>
 8014bb0:	4639      	mov	r1, r7
 8014bb2:	4630      	mov	r0, r6
 8014bb4:	f7eb ffe8 	bl	8000b88 <__aeabi_d2iz>
 8014bb8:	f7eb fccc 	bl	8000554 <__aeabi_i2d>
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	4602      	mov	r2, r0
 8014bc0:	4639      	mov	r1, r7
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	f7eb fb78 	bl	80002b8 <__aeabi_dsub>
 8014bc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bca:	4606      	mov	r6, r0
 8014bcc:	460f      	mov	r7, r1
 8014bce:	b933      	cbnz	r3, 8014bde <_strtod_l+0xace>
 8014bd0:	f1ba 0f00 	cmp.w	sl, #0
 8014bd4:	d103      	bne.n	8014bde <_strtod_l+0xace>
 8014bd6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014bda:	2d00      	cmp	r5, #0
 8014bdc:	d06d      	beq.n	8014cba <_strtod_l+0xbaa>
 8014bde:	a30a      	add	r3, pc, #40	; (adr r3, 8014c08 <_strtod_l+0xaf8>)
 8014be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be4:	4630      	mov	r0, r6
 8014be6:	4639      	mov	r1, r7
 8014be8:	f7eb ff90 	bl	8000b0c <__aeabi_dcmplt>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	f47f acb8 	bne.w	8014562 <_strtod_l+0x452>
 8014bf2:	a307      	add	r3, pc, #28	; (adr r3, 8014c10 <_strtod_l+0xb00>)
 8014bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	4639      	mov	r1, r7
 8014bfc:	f7eb ffa4 	bl	8000b48 <__aeabi_dcmpgt>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	f43f af79 	beq.w	8014af8 <_strtod_l+0x9e8>
 8014c06:	e4ac      	b.n	8014562 <_strtod_l+0x452>
 8014c08:	94a03595 	.word	0x94a03595
 8014c0c:	3fdfffff 	.word	0x3fdfffff
 8014c10:	35afe535 	.word	0x35afe535
 8014c14:	3fe00000 	.word	0x3fe00000
 8014c18:	000fffff 	.word	0x000fffff
 8014c1c:	7ff00000 	.word	0x7ff00000
 8014c20:	7fefffff 	.word	0x7fefffff
 8014c24:	39500000 	.word	0x39500000
 8014c28:	3ff00000 	.word	0x3ff00000
 8014c2c:	7fe00000 	.word	0x7fe00000
 8014c30:	7c9fffff 	.word	0x7c9fffff
 8014c34:	3fe00000 	.word	0x3fe00000
 8014c38:	bff00000 	.word	0xbff00000
 8014c3c:	9b04      	ldr	r3, [sp, #16]
 8014c3e:	b333      	cbz	r3, 8014c8e <_strtod_l+0xb7e>
 8014c40:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014c42:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014c46:	d822      	bhi.n	8014c8e <_strtod_l+0xb7e>
 8014c48:	a327      	add	r3, pc, #156	; (adr r3, 8014ce8 <_strtod_l+0xbd8>)
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	f7eb ff65 	bl	8000b20 <__aeabi_dcmple>
 8014c56:	b1a0      	cbz	r0, 8014c82 <_strtod_l+0xb72>
 8014c58:	4639      	mov	r1, r7
 8014c5a:	4630      	mov	r0, r6
 8014c5c:	f7eb ffbc 	bl	8000bd8 <__aeabi_d2uiz>
 8014c60:	2800      	cmp	r0, #0
 8014c62:	bf08      	it	eq
 8014c64:	2001      	moveq	r0, #1
 8014c66:	f7eb fc65 	bl	8000534 <__aeabi_ui2d>
 8014c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c6c:	4606      	mov	r6, r0
 8014c6e:	460f      	mov	r7, r1
 8014c70:	bb03      	cbnz	r3, 8014cb4 <_strtod_l+0xba4>
 8014c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014c76:	9012      	str	r0, [sp, #72]	; 0x48
 8014c78:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c7a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014c7e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014c82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014c86:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014c8a:	1a9b      	subs	r3, r3, r2
 8014c8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c8e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8014c92:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8014c96:	f002 f831 	bl	8016cfc <__ulp>
 8014c9a:	4650      	mov	r0, sl
 8014c9c:	ec53 2b10 	vmov	r2, r3, d0
 8014ca0:	4659      	mov	r1, fp
 8014ca2:	f7eb fcc1 	bl	8000628 <__aeabi_dmul>
 8014ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014caa:	f7eb fb07 	bl	80002bc <__adddf3>
 8014cae:	4682      	mov	sl, r0
 8014cb0:	468b      	mov	fp, r1
 8014cb2:	e772      	b.n	8014b9a <_strtod_l+0xa8a>
 8014cb4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8014cb8:	e7df      	b.n	8014c7a <_strtod_l+0xb6a>
 8014cba:	a30d      	add	r3, pc, #52	; (adr r3, 8014cf0 <_strtod_l+0xbe0>)
 8014cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cc0:	f7eb ff24 	bl	8000b0c <__aeabi_dcmplt>
 8014cc4:	e79c      	b.n	8014c00 <_strtod_l+0xaf0>
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	930d      	str	r3, [sp, #52]	; 0x34
 8014cca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014cce:	6013      	str	r3, [r2, #0]
 8014cd0:	f7ff ba61 	b.w	8014196 <_strtod_l+0x86>
 8014cd4:	2b65      	cmp	r3, #101	; 0x65
 8014cd6:	f04f 0200 	mov.w	r2, #0
 8014cda:	f43f ab4e 	beq.w	801437a <_strtod_l+0x26a>
 8014cde:	2101      	movs	r1, #1
 8014ce0:	4614      	mov	r4, r2
 8014ce2:	9104      	str	r1, [sp, #16]
 8014ce4:	f7ff bacb 	b.w	801427e <_strtod_l+0x16e>
 8014ce8:	ffc00000 	.word	0xffc00000
 8014cec:	41dfffff 	.word	0x41dfffff
 8014cf0:	94a03595 	.word	0x94a03595
 8014cf4:	3fcfffff 	.word	0x3fcfffff

08014cf8 <_strtod_r>:
 8014cf8:	4b05      	ldr	r3, [pc, #20]	; (8014d10 <_strtod_r+0x18>)
 8014cfa:	681b      	ldr	r3, [r3, #0]
 8014cfc:	b410      	push	{r4}
 8014cfe:	6a1b      	ldr	r3, [r3, #32]
 8014d00:	4c04      	ldr	r4, [pc, #16]	; (8014d14 <_strtod_r+0x1c>)
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	bf08      	it	eq
 8014d06:	4623      	moveq	r3, r4
 8014d08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d0c:	f7ff ba00 	b.w	8014110 <_strtod_l>
 8014d10:	2000000c 	.word	0x2000000c
 8014d14:	20000070 	.word	0x20000070

08014d18 <_strtol_l.isra.0>:
 8014d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d1c:	4680      	mov	r8, r0
 8014d1e:	4689      	mov	r9, r1
 8014d20:	4692      	mov	sl, r2
 8014d22:	461e      	mov	r6, r3
 8014d24:	460f      	mov	r7, r1
 8014d26:	463d      	mov	r5, r7
 8014d28:	9808      	ldr	r0, [sp, #32]
 8014d2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014d2e:	f001 fc67 	bl	8016600 <__locale_ctype_ptr_l>
 8014d32:	4420      	add	r0, r4
 8014d34:	7843      	ldrb	r3, [r0, #1]
 8014d36:	f013 0308 	ands.w	r3, r3, #8
 8014d3a:	d132      	bne.n	8014da2 <_strtol_l.isra.0+0x8a>
 8014d3c:	2c2d      	cmp	r4, #45	; 0x2d
 8014d3e:	d132      	bne.n	8014da6 <_strtol_l.isra.0+0x8e>
 8014d40:	787c      	ldrb	r4, [r7, #1]
 8014d42:	1cbd      	adds	r5, r7, #2
 8014d44:	2201      	movs	r2, #1
 8014d46:	2e00      	cmp	r6, #0
 8014d48:	d05d      	beq.n	8014e06 <_strtol_l.isra.0+0xee>
 8014d4a:	2e10      	cmp	r6, #16
 8014d4c:	d109      	bne.n	8014d62 <_strtol_l.isra.0+0x4a>
 8014d4e:	2c30      	cmp	r4, #48	; 0x30
 8014d50:	d107      	bne.n	8014d62 <_strtol_l.isra.0+0x4a>
 8014d52:	782b      	ldrb	r3, [r5, #0]
 8014d54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014d58:	2b58      	cmp	r3, #88	; 0x58
 8014d5a:	d14f      	bne.n	8014dfc <_strtol_l.isra.0+0xe4>
 8014d5c:	786c      	ldrb	r4, [r5, #1]
 8014d5e:	2610      	movs	r6, #16
 8014d60:	3502      	adds	r5, #2
 8014d62:	2a00      	cmp	r2, #0
 8014d64:	bf14      	ite	ne
 8014d66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014d6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014d6e:	2700      	movs	r7, #0
 8014d70:	fbb1 fcf6 	udiv	ip, r1, r6
 8014d74:	4638      	mov	r0, r7
 8014d76:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014d7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014d7e:	2b09      	cmp	r3, #9
 8014d80:	d817      	bhi.n	8014db2 <_strtol_l.isra.0+0x9a>
 8014d82:	461c      	mov	r4, r3
 8014d84:	42a6      	cmp	r6, r4
 8014d86:	dd23      	ble.n	8014dd0 <_strtol_l.isra.0+0xb8>
 8014d88:	1c7b      	adds	r3, r7, #1
 8014d8a:	d007      	beq.n	8014d9c <_strtol_l.isra.0+0x84>
 8014d8c:	4584      	cmp	ip, r0
 8014d8e:	d31c      	bcc.n	8014dca <_strtol_l.isra.0+0xb2>
 8014d90:	d101      	bne.n	8014d96 <_strtol_l.isra.0+0x7e>
 8014d92:	45a6      	cmp	lr, r4
 8014d94:	db19      	blt.n	8014dca <_strtol_l.isra.0+0xb2>
 8014d96:	fb00 4006 	mla	r0, r0, r6, r4
 8014d9a:	2701      	movs	r7, #1
 8014d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014da0:	e7eb      	b.n	8014d7a <_strtol_l.isra.0+0x62>
 8014da2:	462f      	mov	r7, r5
 8014da4:	e7bf      	b.n	8014d26 <_strtol_l.isra.0+0xe>
 8014da6:	2c2b      	cmp	r4, #43	; 0x2b
 8014da8:	bf04      	itt	eq
 8014daa:	1cbd      	addeq	r5, r7, #2
 8014dac:	787c      	ldrbeq	r4, [r7, #1]
 8014dae:	461a      	mov	r2, r3
 8014db0:	e7c9      	b.n	8014d46 <_strtol_l.isra.0+0x2e>
 8014db2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8014db6:	2b19      	cmp	r3, #25
 8014db8:	d801      	bhi.n	8014dbe <_strtol_l.isra.0+0xa6>
 8014dba:	3c37      	subs	r4, #55	; 0x37
 8014dbc:	e7e2      	b.n	8014d84 <_strtol_l.isra.0+0x6c>
 8014dbe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8014dc2:	2b19      	cmp	r3, #25
 8014dc4:	d804      	bhi.n	8014dd0 <_strtol_l.isra.0+0xb8>
 8014dc6:	3c57      	subs	r4, #87	; 0x57
 8014dc8:	e7dc      	b.n	8014d84 <_strtol_l.isra.0+0x6c>
 8014dca:	f04f 37ff 	mov.w	r7, #4294967295
 8014dce:	e7e5      	b.n	8014d9c <_strtol_l.isra.0+0x84>
 8014dd0:	1c7b      	adds	r3, r7, #1
 8014dd2:	d108      	bne.n	8014de6 <_strtol_l.isra.0+0xce>
 8014dd4:	2322      	movs	r3, #34	; 0x22
 8014dd6:	f8c8 3000 	str.w	r3, [r8]
 8014dda:	4608      	mov	r0, r1
 8014ddc:	f1ba 0f00 	cmp.w	sl, #0
 8014de0:	d107      	bne.n	8014df2 <_strtol_l.isra.0+0xda>
 8014de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014de6:	b102      	cbz	r2, 8014dea <_strtol_l.isra.0+0xd2>
 8014de8:	4240      	negs	r0, r0
 8014dea:	f1ba 0f00 	cmp.w	sl, #0
 8014dee:	d0f8      	beq.n	8014de2 <_strtol_l.isra.0+0xca>
 8014df0:	b10f      	cbz	r7, 8014df6 <_strtol_l.isra.0+0xde>
 8014df2:	f105 39ff 	add.w	r9, r5, #4294967295
 8014df6:	f8ca 9000 	str.w	r9, [sl]
 8014dfa:	e7f2      	b.n	8014de2 <_strtol_l.isra.0+0xca>
 8014dfc:	2430      	movs	r4, #48	; 0x30
 8014dfe:	2e00      	cmp	r6, #0
 8014e00:	d1af      	bne.n	8014d62 <_strtol_l.isra.0+0x4a>
 8014e02:	2608      	movs	r6, #8
 8014e04:	e7ad      	b.n	8014d62 <_strtol_l.isra.0+0x4a>
 8014e06:	2c30      	cmp	r4, #48	; 0x30
 8014e08:	d0a3      	beq.n	8014d52 <_strtol_l.isra.0+0x3a>
 8014e0a:	260a      	movs	r6, #10
 8014e0c:	e7a9      	b.n	8014d62 <_strtol_l.isra.0+0x4a>
	...

08014e10 <_strtol_r>:
 8014e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014e12:	4c06      	ldr	r4, [pc, #24]	; (8014e2c <_strtol_r+0x1c>)
 8014e14:	4d06      	ldr	r5, [pc, #24]	; (8014e30 <_strtol_r+0x20>)
 8014e16:	6824      	ldr	r4, [r4, #0]
 8014e18:	6a24      	ldr	r4, [r4, #32]
 8014e1a:	2c00      	cmp	r4, #0
 8014e1c:	bf08      	it	eq
 8014e1e:	462c      	moveq	r4, r5
 8014e20:	9400      	str	r4, [sp, #0]
 8014e22:	f7ff ff79 	bl	8014d18 <_strtol_l.isra.0>
 8014e26:	b003      	add	sp, #12
 8014e28:	bd30      	pop	{r4, r5, pc}
 8014e2a:	bf00      	nop
 8014e2c:	2000000c 	.word	0x2000000c
 8014e30:	20000070 	.word	0x20000070

08014e34 <_vsiprintf_r>:
 8014e34:	b500      	push	{lr}
 8014e36:	b09b      	sub	sp, #108	; 0x6c
 8014e38:	9100      	str	r1, [sp, #0]
 8014e3a:	9104      	str	r1, [sp, #16]
 8014e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014e40:	9105      	str	r1, [sp, #20]
 8014e42:	9102      	str	r1, [sp, #8]
 8014e44:	4905      	ldr	r1, [pc, #20]	; (8014e5c <_vsiprintf_r+0x28>)
 8014e46:	9103      	str	r1, [sp, #12]
 8014e48:	4669      	mov	r1, sp
 8014e4a:	f002 f99b 	bl	8017184 <_svfiprintf_r>
 8014e4e:	9b00      	ldr	r3, [sp, #0]
 8014e50:	2200      	movs	r2, #0
 8014e52:	701a      	strb	r2, [r3, #0]
 8014e54:	b01b      	add	sp, #108	; 0x6c
 8014e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8014e5a:	bf00      	nop
 8014e5c:	ffff0208 	.word	0xffff0208

08014e60 <vsiprintf>:
 8014e60:	4613      	mov	r3, r2
 8014e62:	460a      	mov	r2, r1
 8014e64:	4601      	mov	r1, r0
 8014e66:	4802      	ldr	r0, [pc, #8]	; (8014e70 <vsiprintf+0x10>)
 8014e68:	6800      	ldr	r0, [r0, #0]
 8014e6a:	f7ff bfe3 	b.w	8014e34 <_vsiprintf_r>
 8014e6e:	bf00      	nop
 8014e70:	2000000c 	.word	0x2000000c

08014e74 <__swbuf_r>:
 8014e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e76:	460e      	mov	r6, r1
 8014e78:	4614      	mov	r4, r2
 8014e7a:	4605      	mov	r5, r0
 8014e7c:	b118      	cbz	r0, 8014e86 <__swbuf_r+0x12>
 8014e7e:	6983      	ldr	r3, [r0, #24]
 8014e80:	b90b      	cbnz	r3, 8014e86 <__swbuf_r+0x12>
 8014e82:	f001 f80d 	bl	8015ea0 <__sinit>
 8014e86:	4b21      	ldr	r3, [pc, #132]	; (8014f0c <__swbuf_r+0x98>)
 8014e88:	429c      	cmp	r4, r3
 8014e8a:	d12a      	bne.n	8014ee2 <__swbuf_r+0x6e>
 8014e8c:	686c      	ldr	r4, [r5, #4]
 8014e8e:	69a3      	ldr	r3, [r4, #24]
 8014e90:	60a3      	str	r3, [r4, #8]
 8014e92:	89a3      	ldrh	r3, [r4, #12]
 8014e94:	071a      	lsls	r2, r3, #28
 8014e96:	d52e      	bpl.n	8014ef6 <__swbuf_r+0x82>
 8014e98:	6923      	ldr	r3, [r4, #16]
 8014e9a:	b363      	cbz	r3, 8014ef6 <__swbuf_r+0x82>
 8014e9c:	6923      	ldr	r3, [r4, #16]
 8014e9e:	6820      	ldr	r0, [r4, #0]
 8014ea0:	1ac0      	subs	r0, r0, r3
 8014ea2:	6963      	ldr	r3, [r4, #20]
 8014ea4:	b2f6      	uxtb	r6, r6
 8014ea6:	4283      	cmp	r3, r0
 8014ea8:	4637      	mov	r7, r6
 8014eaa:	dc04      	bgt.n	8014eb6 <__swbuf_r+0x42>
 8014eac:	4621      	mov	r1, r4
 8014eae:	4628      	mov	r0, r5
 8014eb0:	f000 ff8c 	bl	8015dcc <_fflush_r>
 8014eb4:	bb28      	cbnz	r0, 8014f02 <__swbuf_r+0x8e>
 8014eb6:	68a3      	ldr	r3, [r4, #8]
 8014eb8:	3b01      	subs	r3, #1
 8014eba:	60a3      	str	r3, [r4, #8]
 8014ebc:	6823      	ldr	r3, [r4, #0]
 8014ebe:	1c5a      	adds	r2, r3, #1
 8014ec0:	6022      	str	r2, [r4, #0]
 8014ec2:	701e      	strb	r6, [r3, #0]
 8014ec4:	6963      	ldr	r3, [r4, #20]
 8014ec6:	3001      	adds	r0, #1
 8014ec8:	4283      	cmp	r3, r0
 8014eca:	d004      	beq.n	8014ed6 <__swbuf_r+0x62>
 8014ecc:	89a3      	ldrh	r3, [r4, #12]
 8014ece:	07db      	lsls	r3, r3, #31
 8014ed0:	d519      	bpl.n	8014f06 <__swbuf_r+0x92>
 8014ed2:	2e0a      	cmp	r6, #10
 8014ed4:	d117      	bne.n	8014f06 <__swbuf_r+0x92>
 8014ed6:	4621      	mov	r1, r4
 8014ed8:	4628      	mov	r0, r5
 8014eda:	f000 ff77 	bl	8015dcc <_fflush_r>
 8014ede:	b190      	cbz	r0, 8014f06 <__swbuf_r+0x92>
 8014ee0:	e00f      	b.n	8014f02 <__swbuf_r+0x8e>
 8014ee2:	4b0b      	ldr	r3, [pc, #44]	; (8014f10 <__swbuf_r+0x9c>)
 8014ee4:	429c      	cmp	r4, r3
 8014ee6:	d101      	bne.n	8014eec <__swbuf_r+0x78>
 8014ee8:	68ac      	ldr	r4, [r5, #8]
 8014eea:	e7d0      	b.n	8014e8e <__swbuf_r+0x1a>
 8014eec:	4b09      	ldr	r3, [pc, #36]	; (8014f14 <__swbuf_r+0xa0>)
 8014eee:	429c      	cmp	r4, r3
 8014ef0:	bf08      	it	eq
 8014ef2:	68ec      	ldreq	r4, [r5, #12]
 8014ef4:	e7cb      	b.n	8014e8e <__swbuf_r+0x1a>
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	4628      	mov	r0, r5
 8014efa:	f000 f81f 	bl	8014f3c <__swsetup_r>
 8014efe:	2800      	cmp	r0, #0
 8014f00:	d0cc      	beq.n	8014e9c <__swbuf_r+0x28>
 8014f02:	f04f 37ff 	mov.w	r7, #4294967295
 8014f06:	4638      	mov	r0, r7
 8014f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f0a:	bf00      	nop
 8014f0c:	08018858 	.word	0x08018858
 8014f10:	08018878 	.word	0x08018878
 8014f14:	08018838 	.word	0x08018838

08014f18 <_write_r>:
 8014f18:	b538      	push	{r3, r4, r5, lr}
 8014f1a:	4c07      	ldr	r4, [pc, #28]	; (8014f38 <_write_r+0x20>)
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	4608      	mov	r0, r1
 8014f20:	4611      	mov	r1, r2
 8014f22:	2200      	movs	r2, #0
 8014f24:	6022      	str	r2, [r4, #0]
 8014f26:	461a      	mov	r2, r3
 8014f28:	f7ef fa2d 	bl	8004386 <_write>
 8014f2c:	1c43      	adds	r3, r0, #1
 8014f2e:	d102      	bne.n	8014f36 <_write_r+0x1e>
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	b103      	cbz	r3, 8014f36 <_write_r+0x1e>
 8014f34:	602b      	str	r3, [r5, #0]
 8014f36:	bd38      	pop	{r3, r4, r5, pc}
 8014f38:	20037fa4 	.word	0x20037fa4

08014f3c <__swsetup_r>:
 8014f3c:	4b32      	ldr	r3, [pc, #200]	; (8015008 <__swsetup_r+0xcc>)
 8014f3e:	b570      	push	{r4, r5, r6, lr}
 8014f40:	681d      	ldr	r5, [r3, #0]
 8014f42:	4606      	mov	r6, r0
 8014f44:	460c      	mov	r4, r1
 8014f46:	b125      	cbz	r5, 8014f52 <__swsetup_r+0x16>
 8014f48:	69ab      	ldr	r3, [r5, #24]
 8014f4a:	b913      	cbnz	r3, 8014f52 <__swsetup_r+0x16>
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f000 ffa7 	bl	8015ea0 <__sinit>
 8014f52:	4b2e      	ldr	r3, [pc, #184]	; (801500c <__swsetup_r+0xd0>)
 8014f54:	429c      	cmp	r4, r3
 8014f56:	d10f      	bne.n	8014f78 <__swsetup_r+0x3c>
 8014f58:	686c      	ldr	r4, [r5, #4]
 8014f5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	0715      	lsls	r5, r2, #28
 8014f62:	d42c      	bmi.n	8014fbe <__swsetup_r+0x82>
 8014f64:	06d0      	lsls	r0, r2, #27
 8014f66:	d411      	bmi.n	8014f8c <__swsetup_r+0x50>
 8014f68:	2209      	movs	r2, #9
 8014f6a:	6032      	str	r2, [r6, #0]
 8014f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f70:	81a3      	strh	r3, [r4, #12]
 8014f72:	f04f 30ff 	mov.w	r0, #4294967295
 8014f76:	e03e      	b.n	8014ff6 <__swsetup_r+0xba>
 8014f78:	4b25      	ldr	r3, [pc, #148]	; (8015010 <__swsetup_r+0xd4>)
 8014f7a:	429c      	cmp	r4, r3
 8014f7c:	d101      	bne.n	8014f82 <__swsetup_r+0x46>
 8014f7e:	68ac      	ldr	r4, [r5, #8]
 8014f80:	e7eb      	b.n	8014f5a <__swsetup_r+0x1e>
 8014f82:	4b24      	ldr	r3, [pc, #144]	; (8015014 <__swsetup_r+0xd8>)
 8014f84:	429c      	cmp	r4, r3
 8014f86:	bf08      	it	eq
 8014f88:	68ec      	ldreq	r4, [r5, #12]
 8014f8a:	e7e6      	b.n	8014f5a <__swsetup_r+0x1e>
 8014f8c:	0751      	lsls	r1, r2, #29
 8014f8e:	d512      	bpl.n	8014fb6 <__swsetup_r+0x7a>
 8014f90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f92:	b141      	cbz	r1, 8014fa6 <__swsetup_r+0x6a>
 8014f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014f98:	4299      	cmp	r1, r3
 8014f9a:	d002      	beq.n	8014fa2 <__swsetup_r+0x66>
 8014f9c:	4630      	mov	r0, r6
 8014f9e:	f001 ffef 	bl	8016f80 <_free_r>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	6363      	str	r3, [r4, #52]	; 0x34
 8014fa6:	89a3      	ldrh	r3, [r4, #12]
 8014fa8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014fac:	81a3      	strh	r3, [r4, #12]
 8014fae:	2300      	movs	r3, #0
 8014fb0:	6063      	str	r3, [r4, #4]
 8014fb2:	6923      	ldr	r3, [r4, #16]
 8014fb4:	6023      	str	r3, [r4, #0]
 8014fb6:	89a3      	ldrh	r3, [r4, #12]
 8014fb8:	f043 0308 	orr.w	r3, r3, #8
 8014fbc:	81a3      	strh	r3, [r4, #12]
 8014fbe:	6923      	ldr	r3, [r4, #16]
 8014fc0:	b94b      	cbnz	r3, 8014fd6 <__swsetup_r+0x9a>
 8014fc2:	89a3      	ldrh	r3, [r4, #12]
 8014fc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fcc:	d003      	beq.n	8014fd6 <__swsetup_r+0x9a>
 8014fce:	4621      	mov	r1, r4
 8014fd0:	4630      	mov	r0, r6
 8014fd2:	f001 fb6d 	bl	80166b0 <__smakebuf_r>
 8014fd6:	89a2      	ldrh	r2, [r4, #12]
 8014fd8:	f012 0301 	ands.w	r3, r2, #1
 8014fdc:	d00c      	beq.n	8014ff8 <__swsetup_r+0xbc>
 8014fde:	2300      	movs	r3, #0
 8014fe0:	60a3      	str	r3, [r4, #8]
 8014fe2:	6963      	ldr	r3, [r4, #20]
 8014fe4:	425b      	negs	r3, r3
 8014fe6:	61a3      	str	r3, [r4, #24]
 8014fe8:	6923      	ldr	r3, [r4, #16]
 8014fea:	b953      	cbnz	r3, 8015002 <__swsetup_r+0xc6>
 8014fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ff0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014ff4:	d1ba      	bne.n	8014f6c <__swsetup_r+0x30>
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	0792      	lsls	r2, r2, #30
 8014ffa:	bf58      	it	pl
 8014ffc:	6963      	ldrpl	r3, [r4, #20]
 8014ffe:	60a3      	str	r3, [r4, #8]
 8015000:	e7f2      	b.n	8014fe8 <__swsetup_r+0xac>
 8015002:	2000      	movs	r0, #0
 8015004:	e7f7      	b.n	8014ff6 <__swsetup_r+0xba>
 8015006:	bf00      	nop
 8015008:	2000000c 	.word	0x2000000c
 801500c:	08018858 	.word	0x08018858
 8015010:	08018878 	.word	0x08018878
 8015014:	08018838 	.word	0x08018838

08015018 <_close_r>:
 8015018:	b538      	push	{r3, r4, r5, lr}
 801501a:	4c06      	ldr	r4, [pc, #24]	; (8015034 <_close_r+0x1c>)
 801501c:	2300      	movs	r3, #0
 801501e:	4605      	mov	r5, r0
 8015020:	4608      	mov	r0, r1
 8015022:	6023      	str	r3, [r4, #0]
 8015024:	f7f0 ff13 	bl	8005e4e <_close>
 8015028:	1c43      	adds	r3, r0, #1
 801502a:	d102      	bne.n	8015032 <_close_r+0x1a>
 801502c:	6823      	ldr	r3, [r4, #0]
 801502e:	b103      	cbz	r3, 8015032 <_close_r+0x1a>
 8015030:	602b      	str	r3, [r5, #0]
 8015032:	bd38      	pop	{r3, r4, r5, pc}
 8015034:	20037fa4 	.word	0x20037fa4

08015038 <quorem>:
 8015038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	6903      	ldr	r3, [r0, #16]
 801503e:	690c      	ldr	r4, [r1, #16]
 8015040:	42a3      	cmp	r3, r4
 8015042:	4680      	mov	r8, r0
 8015044:	f2c0 8082 	blt.w	801514c <quorem+0x114>
 8015048:	3c01      	subs	r4, #1
 801504a:	f101 0714 	add.w	r7, r1, #20
 801504e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8015052:	f100 0614 	add.w	r6, r0, #20
 8015056:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801505a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801505e:	eb06 030c 	add.w	r3, r6, ip
 8015062:	3501      	adds	r5, #1
 8015064:	eb07 090c 	add.w	r9, r7, ip
 8015068:	9301      	str	r3, [sp, #4]
 801506a:	fbb0 f5f5 	udiv	r5, r0, r5
 801506e:	b395      	cbz	r5, 80150d6 <quorem+0x9e>
 8015070:	f04f 0a00 	mov.w	sl, #0
 8015074:	4638      	mov	r0, r7
 8015076:	46b6      	mov	lr, r6
 8015078:	46d3      	mov	fp, sl
 801507a:	f850 2b04 	ldr.w	r2, [r0], #4
 801507e:	b293      	uxth	r3, r2
 8015080:	fb05 a303 	mla	r3, r5, r3, sl
 8015084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015088:	b29b      	uxth	r3, r3
 801508a:	ebab 0303 	sub.w	r3, fp, r3
 801508e:	0c12      	lsrs	r2, r2, #16
 8015090:	f8de b000 	ldr.w	fp, [lr]
 8015094:	fb05 a202 	mla	r2, r5, r2, sl
 8015098:	fa13 f38b 	uxtah	r3, r3, fp
 801509c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80150a0:	fa1f fb82 	uxth.w	fp, r2
 80150a4:	f8de 2000 	ldr.w	r2, [lr]
 80150a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80150ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80150b6:	4581      	cmp	r9, r0
 80150b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80150bc:	f84e 3b04 	str.w	r3, [lr], #4
 80150c0:	d2db      	bcs.n	801507a <quorem+0x42>
 80150c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80150c6:	b933      	cbnz	r3, 80150d6 <quorem+0x9e>
 80150c8:	9b01      	ldr	r3, [sp, #4]
 80150ca:	3b04      	subs	r3, #4
 80150cc:	429e      	cmp	r6, r3
 80150ce:	461a      	mov	r2, r3
 80150d0:	d330      	bcc.n	8015134 <quorem+0xfc>
 80150d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80150d6:	4640      	mov	r0, r8
 80150d8:	f001 fd98 	bl	8016c0c <__mcmp>
 80150dc:	2800      	cmp	r0, #0
 80150de:	db25      	blt.n	801512c <quorem+0xf4>
 80150e0:	3501      	adds	r5, #1
 80150e2:	4630      	mov	r0, r6
 80150e4:	f04f 0c00 	mov.w	ip, #0
 80150e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80150ec:	f8d0 e000 	ldr.w	lr, [r0]
 80150f0:	b293      	uxth	r3, r2
 80150f2:	ebac 0303 	sub.w	r3, ip, r3
 80150f6:	0c12      	lsrs	r2, r2, #16
 80150f8:	fa13 f38e 	uxtah	r3, r3, lr
 80150fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015100:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015104:	b29b      	uxth	r3, r3
 8015106:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801510a:	45b9      	cmp	r9, r7
 801510c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015110:	f840 3b04 	str.w	r3, [r0], #4
 8015114:	d2e8      	bcs.n	80150e8 <quorem+0xb0>
 8015116:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801511a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801511e:	b92a      	cbnz	r2, 801512c <quorem+0xf4>
 8015120:	3b04      	subs	r3, #4
 8015122:	429e      	cmp	r6, r3
 8015124:	461a      	mov	r2, r3
 8015126:	d30b      	bcc.n	8015140 <quorem+0x108>
 8015128:	f8c8 4010 	str.w	r4, [r8, #16]
 801512c:	4628      	mov	r0, r5
 801512e:	b003      	add	sp, #12
 8015130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015134:	6812      	ldr	r2, [r2, #0]
 8015136:	3b04      	subs	r3, #4
 8015138:	2a00      	cmp	r2, #0
 801513a:	d1ca      	bne.n	80150d2 <quorem+0x9a>
 801513c:	3c01      	subs	r4, #1
 801513e:	e7c5      	b.n	80150cc <quorem+0x94>
 8015140:	6812      	ldr	r2, [r2, #0]
 8015142:	3b04      	subs	r3, #4
 8015144:	2a00      	cmp	r2, #0
 8015146:	d1ef      	bne.n	8015128 <quorem+0xf0>
 8015148:	3c01      	subs	r4, #1
 801514a:	e7ea      	b.n	8015122 <quorem+0xea>
 801514c:	2000      	movs	r0, #0
 801514e:	e7ee      	b.n	801512e <quorem+0xf6>

08015150 <_dtoa_r>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	ec57 6b10 	vmov	r6, r7, d0
 8015158:	b097      	sub	sp, #92	; 0x5c
 801515a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801515c:	9106      	str	r1, [sp, #24]
 801515e:	4604      	mov	r4, r0
 8015160:	920b      	str	r2, [sp, #44]	; 0x2c
 8015162:	9312      	str	r3, [sp, #72]	; 0x48
 8015164:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015168:	e9cd 6700 	strd	r6, r7, [sp]
 801516c:	b93d      	cbnz	r5, 801517e <_dtoa_r+0x2e>
 801516e:	2010      	movs	r0, #16
 8015170:	f001 fade 	bl	8016730 <malloc>
 8015174:	6260      	str	r0, [r4, #36]	; 0x24
 8015176:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801517a:	6005      	str	r5, [r0, #0]
 801517c:	60c5      	str	r5, [r0, #12]
 801517e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015180:	6819      	ldr	r1, [r3, #0]
 8015182:	b151      	cbz	r1, 801519a <_dtoa_r+0x4a>
 8015184:	685a      	ldr	r2, [r3, #4]
 8015186:	604a      	str	r2, [r1, #4]
 8015188:	2301      	movs	r3, #1
 801518a:	4093      	lsls	r3, r2
 801518c:	608b      	str	r3, [r1, #8]
 801518e:	4620      	mov	r0, r4
 8015190:	f001 fb1c 	bl	80167cc <_Bfree>
 8015194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015196:	2200      	movs	r2, #0
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	1e3b      	subs	r3, r7, #0
 801519c:	bfbb      	ittet	lt
 801519e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80151a2:	9301      	strlt	r3, [sp, #4]
 80151a4:	2300      	movge	r3, #0
 80151a6:	2201      	movlt	r2, #1
 80151a8:	bfac      	ite	ge
 80151aa:	f8c8 3000 	strge.w	r3, [r8]
 80151ae:	f8c8 2000 	strlt.w	r2, [r8]
 80151b2:	4baf      	ldr	r3, [pc, #700]	; (8015470 <_dtoa_r+0x320>)
 80151b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80151b8:	ea33 0308 	bics.w	r3, r3, r8
 80151bc:	d114      	bne.n	80151e8 <_dtoa_r+0x98>
 80151be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80151c4:	6013      	str	r3, [r2, #0]
 80151c6:	9b00      	ldr	r3, [sp, #0]
 80151c8:	b923      	cbnz	r3, 80151d4 <_dtoa_r+0x84>
 80151ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80151ce:	2800      	cmp	r0, #0
 80151d0:	f000 8542 	beq.w	8015c58 <_dtoa_r+0xb08>
 80151d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015484 <_dtoa_r+0x334>
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f000 8544 	beq.w	8015c68 <_dtoa_r+0xb18>
 80151e0:	f10b 0303 	add.w	r3, fp, #3
 80151e4:	f000 bd3e 	b.w	8015c64 <_dtoa_r+0xb14>
 80151e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80151ec:	2200      	movs	r2, #0
 80151ee:	2300      	movs	r3, #0
 80151f0:	4630      	mov	r0, r6
 80151f2:	4639      	mov	r1, r7
 80151f4:	f7eb fc80 	bl	8000af8 <__aeabi_dcmpeq>
 80151f8:	4681      	mov	r9, r0
 80151fa:	b168      	cbz	r0, 8015218 <_dtoa_r+0xc8>
 80151fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151fe:	2301      	movs	r3, #1
 8015200:	6013      	str	r3, [r2, #0]
 8015202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015204:	2b00      	cmp	r3, #0
 8015206:	f000 8524 	beq.w	8015c52 <_dtoa_r+0xb02>
 801520a:	4b9a      	ldr	r3, [pc, #616]	; (8015474 <_dtoa_r+0x324>)
 801520c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801520e:	f103 3bff 	add.w	fp, r3, #4294967295
 8015212:	6013      	str	r3, [r2, #0]
 8015214:	f000 bd28 	b.w	8015c68 <_dtoa_r+0xb18>
 8015218:	aa14      	add	r2, sp, #80	; 0x50
 801521a:	a915      	add	r1, sp, #84	; 0x54
 801521c:	ec47 6b10 	vmov	d0, r6, r7
 8015220:	4620      	mov	r0, r4
 8015222:	f001 fde1 	bl	8016de8 <__d2b>
 8015226:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801522a:	9004      	str	r0, [sp, #16]
 801522c:	2d00      	cmp	r5, #0
 801522e:	d07c      	beq.n	801532a <_dtoa_r+0x1da>
 8015230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015234:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015238:	46b2      	mov	sl, r6
 801523a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801523e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015242:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015246:	2200      	movs	r2, #0
 8015248:	4b8b      	ldr	r3, [pc, #556]	; (8015478 <_dtoa_r+0x328>)
 801524a:	4650      	mov	r0, sl
 801524c:	4659      	mov	r1, fp
 801524e:	f7eb f833 	bl	80002b8 <__aeabi_dsub>
 8015252:	a381      	add	r3, pc, #516	; (adr r3, 8015458 <_dtoa_r+0x308>)
 8015254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015258:	f7eb f9e6 	bl	8000628 <__aeabi_dmul>
 801525c:	a380      	add	r3, pc, #512	; (adr r3, 8015460 <_dtoa_r+0x310>)
 801525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015262:	f7eb f82b 	bl	80002bc <__adddf3>
 8015266:	4606      	mov	r6, r0
 8015268:	4628      	mov	r0, r5
 801526a:	460f      	mov	r7, r1
 801526c:	f7eb f972 	bl	8000554 <__aeabi_i2d>
 8015270:	a37d      	add	r3, pc, #500	; (adr r3, 8015468 <_dtoa_r+0x318>)
 8015272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015276:	f7eb f9d7 	bl	8000628 <__aeabi_dmul>
 801527a:	4602      	mov	r2, r0
 801527c:	460b      	mov	r3, r1
 801527e:	4630      	mov	r0, r6
 8015280:	4639      	mov	r1, r7
 8015282:	f7eb f81b 	bl	80002bc <__adddf3>
 8015286:	4606      	mov	r6, r0
 8015288:	460f      	mov	r7, r1
 801528a:	f7eb fc7d 	bl	8000b88 <__aeabi_d2iz>
 801528e:	2200      	movs	r2, #0
 8015290:	4682      	mov	sl, r0
 8015292:	2300      	movs	r3, #0
 8015294:	4630      	mov	r0, r6
 8015296:	4639      	mov	r1, r7
 8015298:	f7eb fc38 	bl	8000b0c <__aeabi_dcmplt>
 801529c:	b148      	cbz	r0, 80152b2 <_dtoa_r+0x162>
 801529e:	4650      	mov	r0, sl
 80152a0:	f7eb f958 	bl	8000554 <__aeabi_i2d>
 80152a4:	4632      	mov	r2, r6
 80152a6:	463b      	mov	r3, r7
 80152a8:	f7eb fc26 	bl	8000af8 <__aeabi_dcmpeq>
 80152ac:	b908      	cbnz	r0, 80152b2 <_dtoa_r+0x162>
 80152ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152b2:	f1ba 0f16 	cmp.w	sl, #22
 80152b6:	d859      	bhi.n	801536c <_dtoa_r+0x21c>
 80152b8:	4970      	ldr	r1, [pc, #448]	; (801547c <_dtoa_r+0x32c>)
 80152ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80152be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152c6:	f7eb fc3f 	bl	8000b48 <__aeabi_dcmpgt>
 80152ca:	2800      	cmp	r0, #0
 80152cc:	d050      	beq.n	8015370 <_dtoa_r+0x220>
 80152ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80152d2:	2300      	movs	r3, #0
 80152d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80152d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d8:	1b5d      	subs	r5, r3, r5
 80152da:	f1b5 0801 	subs.w	r8, r5, #1
 80152de:	bf49      	itett	mi
 80152e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80152e4:	2300      	movpl	r3, #0
 80152e6:	9305      	strmi	r3, [sp, #20]
 80152e8:	f04f 0800 	movmi.w	r8, #0
 80152ec:	bf58      	it	pl
 80152ee:	9305      	strpl	r3, [sp, #20]
 80152f0:	f1ba 0f00 	cmp.w	sl, #0
 80152f4:	db3e      	blt.n	8015374 <_dtoa_r+0x224>
 80152f6:	2300      	movs	r3, #0
 80152f8:	44d0      	add	r8, sl
 80152fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80152fe:	9307      	str	r3, [sp, #28]
 8015300:	9b06      	ldr	r3, [sp, #24]
 8015302:	2b09      	cmp	r3, #9
 8015304:	f200 8090 	bhi.w	8015428 <_dtoa_r+0x2d8>
 8015308:	2b05      	cmp	r3, #5
 801530a:	bfc4      	itt	gt
 801530c:	3b04      	subgt	r3, #4
 801530e:	9306      	strgt	r3, [sp, #24]
 8015310:	9b06      	ldr	r3, [sp, #24]
 8015312:	f1a3 0302 	sub.w	r3, r3, #2
 8015316:	bfcc      	ite	gt
 8015318:	2500      	movgt	r5, #0
 801531a:	2501      	movle	r5, #1
 801531c:	2b03      	cmp	r3, #3
 801531e:	f200 808f 	bhi.w	8015440 <_dtoa_r+0x2f0>
 8015322:	e8df f003 	tbb	[pc, r3]
 8015326:	7f7d      	.short	0x7f7d
 8015328:	7131      	.short	0x7131
 801532a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801532e:	441d      	add	r5, r3
 8015330:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015334:	2820      	cmp	r0, #32
 8015336:	dd13      	ble.n	8015360 <_dtoa_r+0x210>
 8015338:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801533c:	9b00      	ldr	r3, [sp, #0]
 801533e:	fa08 f800 	lsl.w	r8, r8, r0
 8015342:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015346:	fa23 f000 	lsr.w	r0, r3, r0
 801534a:	ea48 0000 	orr.w	r0, r8, r0
 801534e:	f7eb f8f1 	bl	8000534 <__aeabi_ui2d>
 8015352:	2301      	movs	r3, #1
 8015354:	4682      	mov	sl, r0
 8015356:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801535a:	3d01      	subs	r5, #1
 801535c:	9313      	str	r3, [sp, #76]	; 0x4c
 801535e:	e772      	b.n	8015246 <_dtoa_r+0xf6>
 8015360:	9b00      	ldr	r3, [sp, #0]
 8015362:	f1c0 0020 	rsb	r0, r0, #32
 8015366:	fa03 f000 	lsl.w	r0, r3, r0
 801536a:	e7f0      	b.n	801534e <_dtoa_r+0x1fe>
 801536c:	2301      	movs	r3, #1
 801536e:	e7b1      	b.n	80152d4 <_dtoa_r+0x184>
 8015370:	900f      	str	r0, [sp, #60]	; 0x3c
 8015372:	e7b0      	b.n	80152d6 <_dtoa_r+0x186>
 8015374:	9b05      	ldr	r3, [sp, #20]
 8015376:	eba3 030a 	sub.w	r3, r3, sl
 801537a:	9305      	str	r3, [sp, #20]
 801537c:	f1ca 0300 	rsb	r3, sl, #0
 8015380:	9307      	str	r3, [sp, #28]
 8015382:	2300      	movs	r3, #0
 8015384:	930e      	str	r3, [sp, #56]	; 0x38
 8015386:	e7bb      	b.n	8015300 <_dtoa_r+0x1b0>
 8015388:	2301      	movs	r3, #1
 801538a:	930a      	str	r3, [sp, #40]	; 0x28
 801538c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801538e:	2b00      	cmp	r3, #0
 8015390:	dd59      	ble.n	8015446 <_dtoa_r+0x2f6>
 8015392:	9302      	str	r3, [sp, #8]
 8015394:	4699      	mov	r9, r3
 8015396:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015398:	2200      	movs	r2, #0
 801539a:	6072      	str	r2, [r6, #4]
 801539c:	2204      	movs	r2, #4
 801539e:	f102 0014 	add.w	r0, r2, #20
 80153a2:	4298      	cmp	r0, r3
 80153a4:	6871      	ldr	r1, [r6, #4]
 80153a6:	d953      	bls.n	8015450 <_dtoa_r+0x300>
 80153a8:	4620      	mov	r0, r4
 80153aa:	f001 f9db 	bl	8016764 <_Balloc>
 80153ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153b0:	6030      	str	r0, [r6, #0]
 80153b2:	f1b9 0f0e 	cmp.w	r9, #14
 80153b6:	f8d3 b000 	ldr.w	fp, [r3]
 80153ba:	f200 80e6 	bhi.w	801558a <_dtoa_r+0x43a>
 80153be:	2d00      	cmp	r5, #0
 80153c0:	f000 80e3 	beq.w	801558a <_dtoa_r+0x43a>
 80153c4:	ed9d 7b00 	vldr	d7, [sp]
 80153c8:	f1ba 0f00 	cmp.w	sl, #0
 80153cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80153d0:	dd74      	ble.n	80154bc <_dtoa_r+0x36c>
 80153d2:	4a2a      	ldr	r2, [pc, #168]	; (801547c <_dtoa_r+0x32c>)
 80153d4:	f00a 030f 	and.w	r3, sl, #15
 80153d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80153dc:	ed93 7b00 	vldr	d7, [r3]
 80153e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80153e4:	06f0      	lsls	r0, r6, #27
 80153e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80153ea:	d565      	bpl.n	80154b8 <_dtoa_r+0x368>
 80153ec:	4b24      	ldr	r3, [pc, #144]	; (8015480 <_dtoa_r+0x330>)
 80153ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80153f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80153f6:	f7eb fa41 	bl	800087c <__aeabi_ddiv>
 80153fa:	e9cd 0100 	strd	r0, r1, [sp]
 80153fe:	f006 060f 	and.w	r6, r6, #15
 8015402:	2503      	movs	r5, #3
 8015404:	4f1e      	ldr	r7, [pc, #120]	; (8015480 <_dtoa_r+0x330>)
 8015406:	e04c      	b.n	80154a2 <_dtoa_r+0x352>
 8015408:	2301      	movs	r3, #1
 801540a:	930a      	str	r3, [sp, #40]	; 0x28
 801540c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801540e:	4453      	add	r3, sl
 8015410:	f103 0901 	add.w	r9, r3, #1
 8015414:	9302      	str	r3, [sp, #8]
 8015416:	464b      	mov	r3, r9
 8015418:	2b01      	cmp	r3, #1
 801541a:	bfb8      	it	lt
 801541c:	2301      	movlt	r3, #1
 801541e:	e7ba      	b.n	8015396 <_dtoa_r+0x246>
 8015420:	2300      	movs	r3, #0
 8015422:	e7b2      	b.n	801538a <_dtoa_r+0x23a>
 8015424:	2300      	movs	r3, #0
 8015426:	e7f0      	b.n	801540a <_dtoa_r+0x2ba>
 8015428:	2501      	movs	r5, #1
 801542a:	2300      	movs	r3, #0
 801542c:	9306      	str	r3, [sp, #24]
 801542e:	950a      	str	r5, [sp, #40]	; 0x28
 8015430:	f04f 33ff 	mov.w	r3, #4294967295
 8015434:	9302      	str	r3, [sp, #8]
 8015436:	4699      	mov	r9, r3
 8015438:	2200      	movs	r2, #0
 801543a:	2312      	movs	r3, #18
 801543c:	920b      	str	r2, [sp, #44]	; 0x2c
 801543e:	e7aa      	b.n	8015396 <_dtoa_r+0x246>
 8015440:	2301      	movs	r3, #1
 8015442:	930a      	str	r3, [sp, #40]	; 0x28
 8015444:	e7f4      	b.n	8015430 <_dtoa_r+0x2e0>
 8015446:	2301      	movs	r3, #1
 8015448:	9302      	str	r3, [sp, #8]
 801544a:	4699      	mov	r9, r3
 801544c:	461a      	mov	r2, r3
 801544e:	e7f5      	b.n	801543c <_dtoa_r+0x2ec>
 8015450:	3101      	adds	r1, #1
 8015452:	6071      	str	r1, [r6, #4]
 8015454:	0052      	lsls	r2, r2, #1
 8015456:	e7a2      	b.n	801539e <_dtoa_r+0x24e>
 8015458:	636f4361 	.word	0x636f4361
 801545c:	3fd287a7 	.word	0x3fd287a7
 8015460:	8b60c8b3 	.word	0x8b60c8b3
 8015464:	3fc68a28 	.word	0x3fc68a28
 8015468:	509f79fb 	.word	0x509f79fb
 801546c:	3fd34413 	.word	0x3fd34413
 8015470:	7ff00000 	.word	0x7ff00000
 8015474:	080189cc 	.word	0x080189cc
 8015478:	3ff80000 	.word	0x3ff80000
 801547c:	080188d0 	.word	0x080188d0
 8015480:	080188a8 	.word	0x080188a8
 8015484:	08018831 	.word	0x08018831
 8015488:	07f1      	lsls	r1, r6, #31
 801548a:	d508      	bpl.n	801549e <_dtoa_r+0x34e>
 801548c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015494:	f7eb f8c8 	bl	8000628 <__aeabi_dmul>
 8015498:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801549c:	3501      	adds	r5, #1
 801549e:	1076      	asrs	r6, r6, #1
 80154a0:	3708      	adds	r7, #8
 80154a2:	2e00      	cmp	r6, #0
 80154a4:	d1f0      	bne.n	8015488 <_dtoa_r+0x338>
 80154a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80154aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154ae:	f7eb f9e5 	bl	800087c <__aeabi_ddiv>
 80154b2:	e9cd 0100 	strd	r0, r1, [sp]
 80154b6:	e01a      	b.n	80154ee <_dtoa_r+0x39e>
 80154b8:	2502      	movs	r5, #2
 80154ba:	e7a3      	b.n	8015404 <_dtoa_r+0x2b4>
 80154bc:	f000 80a0 	beq.w	8015600 <_dtoa_r+0x4b0>
 80154c0:	f1ca 0600 	rsb	r6, sl, #0
 80154c4:	4b9f      	ldr	r3, [pc, #636]	; (8015744 <_dtoa_r+0x5f4>)
 80154c6:	4fa0      	ldr	r7, [pc, #640]	; (8015748 <_dtoa_r+0x5f8>)
 80154c8:	f006 020f 	and.w	r2, r6, #15
 80154cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80154d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80154d8:	f7eb f8a6 	bl	8000628 <__aeabi_dmul>
 80154dc:	e9cd 0100 	strd	r0, r1, [sp]
 80154e0:	1136      	asrs	r6, r6, #4
 80154e2:	2300      	movs	r3, #0
 80154e4:	2502      	movs	r5, #2
 80154e6:	2e00      	cmp	r6, #0
 80154e8:	d17f      	bne.n	80155ea <_dtoa_r+0x49a>
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d1e1      	bne.n	80154b2 <_dtoa_r+0x362>
 80154ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	f000 8087 	beq.w	8015604 <_dtoa_r+0x4b4>
 80154f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80154fa:	2200      	movs	r2, #0
 80154fc:	4b93      	ldr	r3, [pc, #588]	; (801574c <_dtoa_r+0x5fc>)
 80154fe:	4630      	mov	r0, r6
 8015500:	4639      	mov	r1, r7
 8015502:	f7eb fb03 	bl	8000b0c <__aeabi_dcmplt>
 8015506:	2800      	cmp	r0, #0
 8015508:	d07c      	beq.n	8015604 <_dtoa_r+0x4b4>
 801550a:	f1b9 0f00 	cmp.w	r9, #0
 801550e:	d079      	beq.n	8015604 <_dtoa_r+0x4b4>
 8015510:	9b02      	ldr	r3, [sp, #8]
 8015512:	2b00      	cmp	r3, #0
 8015514:	dd35      	ble.n	8015582 <_dtoa_r+0x432>
 8015516:	f10a 33ff 	add.w	r3, sl, #4294967295
 801551a:	9308      	str	r3, [sp, #32]
 801551c:	4639      	mov	r1, r7
 801551e:	2200      	movs	r2, #0
 8015520:	4b8b      	ldr	r3, [pc, #556]	; (8015750 <_dtoa_r+0x600>)
 8015522:	4630      	mov	r0, r6
 8015524:	f7eb f880 	bl	8000628 <__aeabi_dmul>
 8015528:	e9cd 0100 	strd	r0, r1, [sp]
 801552c:	9f02      	ldr	r7, [sp, #8]
 801552e:	3501      	adds	r5, #1
 8015530:	4628      	mov	r0, r5
 8015532:	f7eb f80f 	bl	8000554 <__aeabi_i2d>
 8015536:	e9dd 2300 	ldrd	r2, r3, [sp]
 801553a:	f7eb f875 	bl	8000628 <__aeabi_dmul>
 801553e:	2200      	movs	r2, #0
 8015540:	4b84      	ldr	r3, [pc, #528]	; (8015754 <_dtoa_r+0x604>)
 8015542:	f7ea febb 	bl	80002bc <__adddf3>
 8015546:	4605      	mov	r5, r0
 8015548:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801554c:	2f00      	cmp	r7, #0
 801554e:	d15d      	bne.n	801560c <_dtoa_r+0x4bc>
 8015550:	2200      	movs	r2, #0
 8015552:	4b81      	ldr	r3, [pc, #516]	; (8015758 <_dtoa_r+0x608>)
 8015554:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015558:	f7ea feae 	bl	80002b8 <__aeabi_dsub>
 801555c:	462a      	mov	r2, r5
 801555e:	4633      	mov	r3, r6
 8015560:	e9cd 0100 	strd	r0, r1, [sp]
 8015564:	f7eb faf0 	bl	8000b48 <__aeabi_dcmpgt>
 8015568:	2800      	cmp	r0, #0
 801556a:	f040 8288 	bne.w	8015a7e <_dtoa_r+0x92e>
 801556e:	462a      	mov	r2, r5
 8015570:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015578:	f7eb fac8 	bl	8000b0c <__aeabi_dcmplt>
 801557c:	2800      	cmp	r0, #0
 801557e:	f040 827c 	bne.w	8015a7a <_dtoa_r+0x92a>
 8015582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015586:	e9cd 2300 	strd	r2, r3, [sp]
 801558a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801558c:	2b00      	cmp	r3, #0
 801558e:	f2c0 8150 	blt.w	8015832 <_dtoa_r+0x6e2>
 8015592:	f1ba 0f0e 	cmp.w	sl, #14
 8015596:	f300 814c 	bgt.w	8015832 <_dtoa_r+0x6e2>
 801559a:	4b6a      	ldr	r3, [pc, #424]	; (8015744 <_dtoa_r+0x5f4>)
 801559c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80155a0:	ed93 7b00 	vldr	d7, [r3]
 80155a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80155ac:	f280 80d8 	bge.w	8015760 <_dtoa_r+0x610>
 80155b0:	f1b9 0f00 	cmp.w	r9, #0
 80155b4:	f300 80d4 	bgt.w	8015760 <_dtoa_r+0x610>
 80155b8:	f040 825e 	bne.w	8015a78 <_dtoa_r+0x928>
 80155bc:	2200      	movs	r2, #0
 80155be:	4b66      	ldr	r3, [pc, #408]	; (8015758 <_dtoa_r+0x608>)
 80155c0:	ec51 0b17 	vmov	r0, r1, d7
 80155c4:	f7eb f830 	bl	8000628 <__aeabi_dmul>
 80155c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155cc:	f7eb fab2 	bl	8000b34 <__aeabi_dcmpge>
 80155d0:	464f      	mov	r7, r9
 80155d2:	464e      	mov	r6, r9
 80155d4:	2800      	cmp	r0, #0
 80155d6:	f040 8234 	bne.w	8015a42 <_dtoa_r+0x8f2>
 80155da:	2331      	movs	r3, #49	; 0x31
 80155dc:	f10b 0501 	add.w	r5, fp, #1
 80155e0:	f88b 3000 	strb.w	r3, [fp]
 80155e4:	f10a 0a01 	add.w	sl, sl, #1
 80155e8:	e22f      	b.n	8015a4a <_dtoa_r+0x8fa>
 80155ea:	07f2      	lsls	r2, r6, #31
 80155ec:	d505      	bpl.n	80155fa <_dtoa_r+0x4aa>
 80155ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155f2:	f7eb f819 	bl	8000628 <__aeabi_dmul>
 80155f6:	3501      	adds	r5, #1
 80155f8:	2301      	movs	r3, #1
 80155fa:	1076      	asrs	r6, r6, #1
 80155fc:	3708      	adds	r7, #8
 80155fe:	e772      	b.n	80154e6 <_dtoa_r+0x396>
 8015600:	2502      	movs	r5, #2
 8015602:	e774      	b.n	80154ee <_dtoa_r+0x39e>
 8015604:	f8cd a020 	str.w	sl, [sp, #32]
 8015608:	464f      	mov	r7, r9
 801560a:	e791      	b.n	8015530 <_dtoa_r+0x3e0>
 801560c:	4b4d      	ldr	r3, [pc, #308]	; (8015744 <_dtoa_r+0x5f4>)
 801560e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015612:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015616:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015618:	2b00      	cmp	r3, #0
 801561a:	d047      	beq.n	80156ac <_dtoa_r+0x55c>
 801561c:	4602      	mov	r2, r0
 801561e:	460b      	mov	r3, r1
 8015620:	2000      	movs	r0, #0
 8015622:	494e      	ldr	r1, [pc, #312]	; (801575c <_dtoa_r+0x60c>)
 8015624:	f7eb f92a 	bl	800087c <__aeabi_ddiv>
 8015628:	462a      	mov	r2, r5
 801562a:	4633      	mov	r3, r6
 801562c:	f7ea fe44 	bl	80002b8 <__aeabi_dsub>
 8015630:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015634:	465d      	mov	r5, fp
 8015636:	e9dd 0100 	ldrd	r0, r1, [sp]
 801563a:	f7eb faa5 	bl	8000b88 <__aeabi_d2iz>
 801563e:	4606      	mov	r6, r0
 8015640:	f7ea ff88 	bl	8000554 <__aeabi_i2d>
 8015644:	4602      	mov	r2, r0
 8015646:	460b      	mov	r3, r1
 8015648:	e9dd 0100 	ldrd	r0, r1, [sp]
 801564c:	f7ea fe34 	bl	80002b8 <__aeabi_dsub>
 8015650:	3630      	adds	r6, #48	; 0x30
 8015652:	f805 6b01 	strb.w	r6, [r5], #1
 8015656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801565a:	e9cd 0100 	strd	r0, r1, [sp]
 801565e:	f7eb fa55 	bl	8000b0c <__aeabi_dcmplt>
 8015662:	2800      	cmp	r0, #0
 8015664:	d163      	bne.n	801572e <_dtoa_r+0x5de>
 8015666:	e9dd 2300 	ldrd	r2, r3, [sp]
 801566a:	2000      	movs	r0, #0
 801566c:	4937      	ldr	r1, [pc, #220]	; (801574c <_dtoa_r+0x5fc>)
 801566e:	f7ea fe23 	bl	80002b8 <__aeabi_dsub>
 8015672:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015676:	f7eb fa49 	bl	8000b0c <__aeabi_dcmplt>
 801567a:	2800      	cmp	r0, #0
 801567c:	f040 80b7 	bne.w	80157ee <_dtoa_r+0x69e>
 8015680:	eba5 030b 	sub.w	r3, r5, fp
 8015684:	429f      	cmp	r7, r3
 8015686:	f77f af7c 	ble.w	8015582 <_dtoa_r+0x432>
 801568a:	2200      	movs	r2, #0
 801568c:	4b30      	ldr	r3, [pc, #192]	; (8015750 <_dtoa_r+0x600>)
 801568e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015692:	f7ea ffc9 	bl	8000628 <__aeabi_dmul>
 8015696:	2200      	movs	r2, #0
 8015698:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801569c:	4b2c      	ldr	r3, [pc, #176]	; (8015750 <_dtoa_r+0x600>)
 801569e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156a2:	f7ea ffc1 	bl	8000628 <__aeabi_dmul>
 80156a6:	e9cd 0100 	strd	r0, r1, [sp]
 80156aa:	e7c4      	b.n	8015636 <_dtoa_r+0x4e6>
 80156ac:	462a      	mov	r2, r5
 80156ae:	4633      	mov	r3, r6
 80156b0:	f7ea ffba 	bl	8000628 <__aeabi_dmul>
 80156b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80156b8:	eb0b 0507 	add.w	r5, fp, r7
 80156bc:	465e      	mov	r6, fp
 80156be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156c2:	f7eb fa61 	bl	8000b88 <__aeabi_d2iz>
 80156c6:	4607      	mov	r7, r0
 80156c8:	f7ea ff44 	bl	8000554 <__aeabi_i2d>
 80156cc:	3730      	adds	r7, #48	; 0x30
 80156ce:	4602      	mov	r2, r0
 80156d0:	460b      	mov	r3, r1
 80156d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156d6:	f7ea fdef 	bl	80002b8 <__aeabi_dsub>
 80156da:	f806 7b01 	strb.w	r7, [r6], #1
 80156de:	42ae      	cmp	r6, r5
 80156e0:	e9cd 0100 	strd	r0, r1, [sp]
 80156e4:	f04f 0200 	mov.w	r2, #0
 80156e8:	d126      	bne.n	8015738 <_dtoa_r+0x5e8>
 80156ea:	4b1c      	ldr	r3, [pc, #112]	; (801575c <_dtoa_r+0x60c>)
 80156ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80156f0:	f7ea fde4 	bl	80002bc <__adddf3>
 80156f4:	4602      	mov	r2, r0
 80156f6:	460b      	mov	r3, r1
 80156f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80156fc:	f7eb fa24 	bl	8000b48 <__aeabi_dcmpgt>
 8015700:	2800      	cmp	r0, #0
 8015702:	d174      	bne.n	80157ee <_dtoa_r+0x69e>
 8015704:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015708:	2000      	movs	r0, #0
 801570a:	4914      	ldr	r1, [pc, #80]	; (801575c <_dtoa_r+0x60c>)
 801570c:	f7ea fdd4 	bl	80002b8 <__aeabi_dsub>
 8015710:	4602      	mov	r2, r0
 8015712:	460b      	mov	r3, r1
 8015714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015718:	f7eb f9f8 	bl	8000b0c <__aeabi_dcmplt>
 801571c:	2800      	cmp	r0, #0
 801571e:	f43f af30 	beq.w	8015582 <_dtoa_r+0x432>
 8015722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015726:	2b30      	cmp	r3, #48	; 0x30
 8015728:	f105 32ff 	add.w	r2, r5, #4294967295
 801572c:	d002      	beq.n	8015734 <_dtoa_r+0x5e4>
 801572e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015732:	e04a      	b.n	80157ca <_dtoa_r+0x67a>
 8015734:	4615      	mov	r5, r2
 8015736:	e7f4      	b.n	8015722 <_dtoa_r+0x5d2>
 8015738:	4b05      	ldr	r3, [pc, #20]	; (8015750 <_dtoa_r+0x600>)
 801573a:	f7ea ff75 	bl	8000628 <__aeabi_dmul>
 801573e:	e9cd 0100 	strd	r0, r1, [sp]
 8015742:	e7bc      	b.n	80156be <_dtoa_r+0x56e>
 8015744:	080188d0 	.word	0x080188d0
 8015748:	080188a8 	.word	0x080188a8
 801574c:	3ff00000 	.word	0x3ff00000
 8015750:	40240000 	.word	0x40240000
 8015754:	401c0000 	.word	0x401c0000
 8015758:	40140000 	.word	0x40140000
 801575c:	3fe00000 	.word	0x3fe00000
 8015760:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015764:	465d      	mov	r5, fp
 8015766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801576a:	4630      	mov	r0, r6
 801576c:	4639      	mov	r1, r7
 801576e:	f7eb f885 	bl	800087c <__aeabi_ddiv>
 8015772:	f7eb fa09 	bl	8000b88 <__aeabi_d2iz>
 8015776:	4680      	mov	r8, r0
 8015778:	f7ea feec 	bl	8000554 <__aeabi_i2d>
 801577c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015780:	f7ea ff52 	bl	8000628 <__aeabi_dmul>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	4630      	mov	r0, r6
 801578a:	4639      	mov	r1, r7
 801578c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015790:	f7ea fd92 	bl	80002b8 <__aeabi_dsub>
 8015794:	f805 6b01 	strb.w	r6, [r5], #1
 8015798:	eba5 060b 	sub.w	r6, r5, fp
 801579c:	45b1      	cmp	r9, r6
 801579e:	4602      	mov	r2, r0
 80157a0:	460b      	mov	r3, r1
 80157a2:	d139      	bne.n	8015818 <_dtoa_r+0x6c8>
 80157a4:	f7ea fd8a 	bl	80002bc <__adddf3>
 80157a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157ac:	4606      	mov	r6, r0
 80157ae:	460f      	mov	r7, r1
 80157b0:	f7eb f9ca 	bl	8000b48 <__aeabi_dcmpgt>
 80157b4:	b9c8      	cbnz	r0, 80157ea <_dtoa_r+0x69a>
 80157b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80157ba:	4630      	mov	r0, r6
 80157bc:	4639      	mov	r1, r7
 80157be:	f7eb f99b 	bl	8000af8 <__aeabi_dcmpeq>
 80157c2:	b110      	cbz	r0, 80157ca <_dtoa_r+0x67a>
 80157c4:	f018 0f01 	tst.w	r8, #1
 80157c8:	d10f      	bne.n	80157ea <_dtoa_r+0x69a>
 80157ca:	9904      	ldr	r1, [sp, #16]
 80157cc:	4620      	mov	r0, r4
 80157ce:	f000 fffd 	bl	80167cc <_Bfree>
 80157d2:	2300      	movs	r3, #0
 80157d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157d6:	702b      	strb	r3, [r5, #0]
 80157d8:	f10a 0301 	add.w	r3, sl, #1
 80157dc:	6013      	str	r3, [r2, #0]
 80157de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	f000 8241 	beq.w	8015c68 <_dtoa_r+0xb18>
 80157e6:	601d      	str	r5, [r3, #0]
 80157e8:	e23e      	b.n	8015c68 <_dtoa_r+0xb18>
 80157ea:	f8cd a020 	str.w	sl, [sp, #32]
 80157ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80157f2:	2a39      	cmp	r2, #57	; 0x39
 80157f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80157f8:	d108      	bne.n	801580c <_dtoa_r+0x6bc>
 80157fa:	459b      	cmp	fp, r3
 80157fc:	d10a      	bne.n	8015814 <_dtoa_r+0x6c4>
 80157fe:	9b08      	ldr	r3, [sp, #32]
 8015800:	3301      	adds	r3, #1
 8015802:	9308      	str	r3, [sp, #32]
 8015804:	2330      	movs	r3, #48	; 0x30
 8015806:	f88b 3000 	strb.w	r3, [fp]
 801580a:	465b      	mov	r3, fp
 801580c:	781a      	ldrb	r2, [r3, #0]
 801580e:	3201      	adds	r2, #1
 8015810:	701a      	strb	r2, [r3, #0]
 8015812:	e78c      	b.n	801572e <_dtoa_r+0x5de>
 8015814:	461d      	mov	r5, r3
 8015816:	e7ea      	b.n	80157ee <_dtoa_r+0x69e>
 8015818:	2200      	movs	r2, #0
 801581a:	4b9b      	ldr	r3, [pc, #620]	; (8015a88 <_dtoa_r+0x938>)
 801581c:	f7ea ff04 	bl	8000628 <__aeabi_dmul>
 8015820:	2200      	movs	r2, #0
 8015822:	2300      	movs	r3, #0
 8015824:	4606      	mov	r6, r0
 8015826:	460f      	mov	r7, r1
 8015828:	f7eb f966 	bl	8000af8 <__aeabi_dcmpeq>
 801582c:	2800      	cmp	r0, #0
 801582e:	d09a      	beq.n	8015766 <_dtoa_r+0x616>
 8015830:	e7cb      	b.n	80157ca <_dtoa_r+0x67a>
 8015832:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015834:	2a00      	cmp	r2, #0
 8015836:	f000 808b 	beq.w	8015950 <_dtoa_r+0x800>
 801583a:	9a06      	ldr	r2, [sp, #24]
 801583c:	2a01      	cmp	r2, #1
 801583e:	dc6e      	bgt.n	801591e <_dtoa_r+0x7ce>
 8015840:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015842:	2a00      	cmp	r2, #0
 8015844:	d067      	beq.n	8015916 <_dtoa_r+0x7c6>
 8015846:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801584a:	9f07      	ldr	r7, [sp, #28]
 801584c:	9d05      	ldr	r5, [sp, #20]
 801584e:	9a05      	ldr	r2, [sp, #20]
 8015850:	2101      	movs	r1, #1
 8015852:	441a      	add	r2, r3
 8015854:	4620      	mov	r0, r4
 8015856:	9205      	str	r2, [sp, #20]
 8015858:	4498      	add	r8, r3
 801585a:	f001 f895 	bl	8016988 <__i2b>
 801585e:	4606      	mov	r6, r0
 8015860:	2d00      	cmp	r5, #0
 8015862:	dd0c      	ble.n	801587e <_dtoa_r+0x72e>
 8015864:	f1b8 0f00 	cmp.w	r8, #0
 8015868:	dd09      	ble.n	801587e <_dtoa_r+0x72e>
 801586a:	4545      	cmp	r5, r8
 801586c:	9a05      	ldr	r2, [sp, #20]
 801586e:	462b      	mov	r3, r5
 8015870:	bfa8      	it	ge
 8015872:	4643      	movge	r3, r8
 8015874:	1ad2      	subs	r2, r2, r3
 8015876:	9205      	str	r2, [sp, #20]
 8015878:	1aed      	subs	r5, r5, r3
 801587a:	eba8 0803 	sub.w	r8, r8, r3
 801587e:	9b07      	ldr	r3, [sp, #28]
 8015880:	b1eb      	cbz	r3, 80158be <_dtoa_r+0x76e>
 8015882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	d067      	beq.n	8015958 <_dtoa_r+0x808>
 8015888:	b18f      	cbz	r7, 80158ae <_dtoa_r+0x75e>
 801588a:	4631      	mov	r1, r6
 801588c:	463a      	mov	r2, r7
 801588e:	4620      	mov	r0, r4
 8015890:	f001 f91a 	bl	8016ac8 <__pow5mult>
 8015894:	9a04      	ldr	r2, [sp, #16]
 8015896:	4601      	mov	r1, r0
 8015898:	4606      	mov	r6, r0
 801589a:	4620      	mov	r0, r4
 801589c:	f001 f87d 	bl	801699a <__multiply>
 80158a0:	9904      	ldr	r1, [sp, #16]
 80158a2:	9008      	str	r0, [sp, #32]
 80158a4:	4620      	mov	r0, r4
 80158a6:	f000 ff91 	bl	80167cc <_Bfree>
 80158aa:	9b08      	ldr	r3, [sp, #32]
 80158ac:	9304      	str	r3, [sp, #16]
 80158ae:	9b07      	ldr	r3, [sp, #28]
 80158b0:	1bda      	subs	r2, r3, r7
 80158b2:	d004      	beq.n	80158be <_dtoa_r+0x76e>
 80158b4:	9904      	ldr	r1, [sp, #16]
 80158b6:	4620      	mov	r0, r4
 80158b8:	f001 f906 	bl	8016ac8 <__pow5mult>
 80158bc:	9004      	str	r0, [sp, #16]
 80158be:	2101      	movs	r1, #1
 80158c0:	4620      	mov	r0, r4
 80158c2:	f001 f861 	bl	8016988 <__i2b>
 80158c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80158c8:	4607      	mov	r7, r0
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f000 81d0 	beq.w	8015c70 <_dtoa_r+0xb20>
 80158d0:	461a      	mov	r2, r3
 80158d2:	4601      	mov	r1, r0
 80158d4:	4620      	mov	r0, r4
 80158d6:	f001 f8f7 	bl	8016ac8 <__pow5mult>
 80158da:	9b06      	ldr	r3, [sp, #24]
 80158dc:	2b01      	cmp	r3, #1
 80158de:	4607      	mov	r7, r0
 80158e0:	dc40      	bgt.n	8015964 <_dtoa_r+0x814>
 80158e2:	9b00      	ldr	r3, [sp, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d139      	bne.n	801595c <_dtoa_r+0x80c>
 80158e8:	9b01      	ldr	r3, [sp, #4]
 80158ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d136      	bne.n	8015960 <_dtoa_r+0x810>
 80158f2:	9b01      	ldr	r3, [sp, #4]
 80158f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80158f8:	0d1b      	lsrs	r3, r3, #20
 80158fa:	051b      	lsls	r3, r3, #20
 80158fc:	b12b      	cbz	r3, 801590a <_dtoa_r+0x7ba>
 80158fe:	9b05      	ldr	r3, [sp, #20]
 8015900:	3301      	adds	r3, #1
 8015902:	9305      	str	r3, [sp, #20]
 8015904:	f108 0801 	add.w	r8, r8, #1
 8015908:	2301      	movs	r3, #1
 801590a:	9307      	str	r3, [sp, #28]
 801590c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801590e:	2b00      	cmp	r3, #0
 8015910:	d12a      	bne.n	8015968 <_dtoa_r+0x818>
 8015912:	2001      	movs	r0, #1
 8015914:	e030      	b.n	8015978 <_dtoa_r+0x828>
 8015916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015918:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801591c:	e795      	b.n	801584a <_dtoa_r+0x6fa>
 801591e:	9b07      	ldr	r3, [sp, #28]
 8015920:	f109 37ff 	add.w	r7, r9, #4294967295
 8015924:	42bb      	cmp	r3, r7
 8015926:	bfbf      	itttt	lt
 8015928:	9b07      	ldrlt	r3, [sp, #28]
 801592a:	9707      	strlt	r7, [sp, #28]
 801592c:	1afa      	sublt	r2, r7, r3
 801592e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015930:	bfbb      	ittet	lt
 8015932:	189b      	addlt	r3, r3, r2
 8015934:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015936:	1bdf      	subge	r7, r3, r7
 8015938:	2700      	movlt	r7, #0
 801593a:	f1b9 0f00 	cmp.w	r9, #0
 801593e:	bfb5      	itete	lt
 8015940:	9b05      	ldrlt	r3, [sp, #20]
 8015942:	9d05      	ldrge	r5, [sp, #20]
 8015944:	eba3 0509 	sublt.w	r5, r3, r9
 8015948:	464b      	movge	r3, r9
 801594a:	bfb8      	it	lt
 801594c:	2300      	movlt	r3, #0
 801594e:	e77e      	b.n	801584e <_dtoa_r+0x6fe>
 8015950:	9f07      	ldr	r7, [sp, #28]
 8015952:	9d05      	ldr	r5, [sp, #20]
 8015954:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015956:	e783      	b.n	8015860 <_dtoa_r+0x710>
 8015958:	9a07      	ldr	r2, [sp, #28]
 801595a:	e7ab      	b.n	80158b4 <_dtoa_r+0x764>
 801595c:	2300      	movs	r3, #0
 801595e:	e7d4      	b.n	801590a <_dtoa_r+0x7ba>
 8015960:	9b00      	ldr	r3, [sp, #0]
 8015962:	e7d2      	b.n	801590a <_dtoa_r+0x7ba>
 8015964:	2300      	movs	r3, #0
 8015966:	9307      	str	r3, [sp, #28]
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801596e:	6918      	ldr	r0, [r3, #16]
 8015970:	f000 ffbc 	bl	80168ec <__hi0bits>
 8015974:	f1c0 0020 	rsb	r0, r0, #32
 8015978:	4440      	add	r0, r8
 801597a:	f010 001f 	ands.w	r0, r0, #31
 801597e:	d047      	beq.n	8015a10 <_dtoa_r+0x8c0>
 8015980:	f1c0 0320 	rsb	r3, r0, #32
 8015984:	2b04      	cmp	r3, #4
 8015986:	dd3b      	ble.n	8015a00 <_dtoa_r+0x8b0>
 8015988:	9b05      	ldr	r3, [sp, #20]
 801598a:	f1c0 001c 	rsb	r0, r0, #28
 801598e:	4403      	add	r3, r0
 8015990:	9305      	str	r3, [sp, #20]
 8015992:	4405      	add	r5, r0
 8015994:	4480      	add	r8, r0
 8015996:	9b05      	ldr	r3, [sp, #20]
 8015998:	2b00      	cmp	r3, #0
 801599a:	dd05      	ble.n	80159a8 <_dtoa_r+0x858>
 801599c:	461a      	mov	r2, r3
 801599e:	9904      	ldr	r1, [sp, #16]
 80159a0:	4620      	mov	r0, r4
 80159a2:	f001 f8df 	bl	8016b64 <__lshift>
 80159a6:	9004      	str	r0, [sp, #16]
 80159a8:	f1b8 0f00 	cmp.w	r8, #0
 80159ac:	dd05      	ble.n	80159ba <_dtoa_r+0x86a>
 80159ae:	4639      	mov	r1, r7
 80159b0:	4642      	mov	r2, r8
 80159b2:	4620      	mov	r0, r4
 80159b4:	f001 f8d6 	bl	8016b64 <__lshift>
 80159b8:	4607      	mov	r7, r0
 80159ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80159bc:	b353      	cbz	r3, 8015a14 <_dtoa_r+0x8c4>
 80159be:	4639      	mov	r1, r7
 80159c0:	9804      	ldr	r0, [sp, #16]
 80159c2:	f001 f923 	bl	8016c0c <__mcmp>
 80159c6:	2800      	cmp	r0, #0
 80159c8:	da24      	bge.n	8015a14 <_dtoa_r+0x8c4>
 80159ca:	2300      	movs	r3, #0
 80159cc:	220a      	movs	r2, #10
 80159ce:	9904      	ldr	r1, [sp, #16]
 80159d0:	4620      	mov	r0, r4
 80159d2:	f000 ff12 	bl	80167fa <__multadd>
 80159d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159d8:	9004      	str	r0, [sp, #16]
 80159da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 814d 	beq.w	8015c7e <_dtoa_r+0xb2e>
 80159e4:	2300      	movs	r3, #0
 80159e6:	4631      	mov	r1, r6
 80159e8:	220a      	movs	r2, #10
 80159ea:	4620      	mov	r0, r4
 80159ec:	f000 ff05 	bl	80167fa <__multadd>
 80159f0:	9b02      	ldr	r3, [sp, #8]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	4606      	mov	r6, r0
 80159f6:	dc4f      	bgt.n	8015a98 <_dtoa_r+0x948>
 80159f8:	9b06      	ldr	r3, [sp, #24]
 80159fa:	2b02      	cmp	r3, #2
 80159fc:	dd4c      	ble.n	8015a98 <_dtoa_r+0x948>
 80159fe:	e011      	b.n	8015a24 <_dtoa_r+0x8d4>
 8015a00:	d0c9      	beq.n	8015996 <_dtoa_r+0x846>
 8015a02:	9a05      	ldr	r2, [sp, #20]
 8015a04:	331c      	adds	r3, #28
 8015a06:	441a      	add	r2, r3
 8015a08:	9205      	str	r2, [sp, #20]
 8015a0a:	441d      	add	r5, r3
 8015a0c:	4498      	add	r8, r3
 8015a0e:	e7c2      	b.n	8015996 <_dtoa_r+0x846>
 8015a10:	4603      	mov	r3, r0
 8015a12:	e7f6      	b.n	8015a02 <_dtoa_r+0x8b2>
 8015a14:	f1b9 0f00 	cmp.w	r9, #0
 8015a18:	dc38      	bgt.n	8015a8c <_dtoa_r+0x93c>
 8015a1a:	9b06      	ldr	r3, [sp, #24]
 8015a1c:	2b02      	cmp	r3, #2
 8015a1e:	dd35      	ble.n	8015a8c <_dtoa_r+0x93c>
 8015a20:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a24:	9b02      	ldr	r3, [sp, #8]
 8015a26:	b963      	cbnz	r3, 8015a42 <_dtoa_r+0x8f2>
 8015a28:	4639      	mov	r1, r7
 8015a2a:	2205      	movs	r2, #5
 8015a2c:	4620      	mov	r0, r4
 8015a2e:	f000 fee4 	bl	80167fa <__multadd>
 8015a32:	4601      	mov	r1, r0
 8015a34:	4607      	mov	r7, r0
 8015a36:	9804      	ldr	r0, [sp, #16]
 8015a38:	f001 f8e8 	bl	8016c0c <__mcmp>
 8015a3c:	2800      	cmp	r0, #0
 8015a3e:	f73f adcc 	bgt.w	80155da <_dtoa_r+0x48a>
 8015a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a44:	465d      	mov	r5, fp
 8015a46:	ea6f 0a03 	mvn.w	sl, r3
 8015a4a:	f04f 0900 	mov.w	r9, #0
 8015a4e:	4639      	mov	r1, r7
 8015a50:	4620      	mov	r0, r4
 8015a52:	f000 febb 	bl	80167cc <_Bfree>
 8015a56:	2e00      	cmp	r6, #0
 8015a58:	f43f aeb7 	beq.w	80157ca <_dtoa_r+0x67a>
 8015a5c:	f1b9 0f00 	cmp.w	r9, #0
 8015a60:	d005      	beq.n	8015a6e <_dtoa_r+0x91e>
 8015a62:	45b1      	cmp	r9, r6
 8015a64:	d003      	beq.n	8015a6e <_dtoa_r+0x91e>
 8015a66:	4649      	mov	r1, r9
 8015a68:	4620      	mov	r0, r4
 8015a6a:	f000 feaf 	bl	80167cc <_Bfree>
 8015a6e:	4631      	mov	r1, r6
 8015a70:	4620      	mov	r0, r4
 8015a72:	f000 feab 	bl	80167cc <_Bfree>
 8015a76:	e6a8      	b.n	80157ca <_dtoa_r+0x67a>
 8015a78:	2700      	movs	r7, #0
 8015a7a:	463e      	mov	r6, r7
 8015a7c:	e7e1      	b.n	8015a42 <_dtoa_r+0x8f2>
 8015a7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015a82:	463e      	mov	r6, r7
 8015a84:	e5a9      	b.n	80155da <_dtoa_r+0x48a>
 8015a86:	bf00      	nop
 8015a88:	40240000 	.word	0x40240000
 8015a8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015a8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	f000 80fa 	beq.w	8015c8c <_dtoa_r+0xb3c>
 8015a98:	2d00      	cmp	r5, #0
 8015a9a:	dd05      	ble.n	8015aa8 <_dtoa_r+0x958>
 8015a9c:	4631      	mov	r1, r6
 8015a9e:	462a      	mov	r2, r5
 8015aa0:	4620      	mov	r0, r4
 8015aa2:	f001 f85f 	bl	8016b64 <__lshift>
 8015aa6:	4606      	mov	r6, r0
 8015aa8:	9b07      	ldr	r3, [sp, #28]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d04c      	beq.n	8015b48 <_dtoa_r+0x9f8>
 8015aae:	6871      	ldr	r1, [r6, #4]
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f000 fe57 	bl	8016764 <_Balloc>
 8015ab6:	6932      	ldr	r2, [r6, #16]
 8015ab8:	3202      	adds	r2, #2
 8015aba:	4605      	mov	r5, r0
 8015abc:	0092      	lsls	r2, r2, #2
 8015abe:	f106 010c 	add.w	r1, r6, #12
 8015ac2:	300c      	adds	r0, #12
 8015ac4:	f7fd fb54 	bl	8013170 <memcpy>
 8015ac8:	2201      	movs	r2, #1
 8015aca:	4629      	mov	r1, r5
 8015acc:	4620      	mov	r0, r4
 8015ace:	f001 f849 	bl	8016b64 <__lshift>
 8015ad2:	9b00      	ldr	r3, [sp, #0]
 8015ad4:	f8cd b014 	str.w	fp, [sp, #20]
 8015ad8:	f003 0301 	and.w	r3, r3, #1
 8015adc:	46b1      	mov	r9, r6
 8015ade:	9307      	str	r3, [sp, #28]
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	4639      	mov	r1, r7
 8015ae4:	9804      	ldr	r0, [sp, #16]
 8015ae6:	f7ff faa7 	bl	8015038 <quorem>
 8015aea:	4649      	mov	r1, r9
 8015aec:	4605      	mov	r5, r0
 8015aee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015af2:	9804      	ldr	r0, [sp, #16]
 8015af4:	f001 f88a 	bl	8016c0c <__mcmp>
 8015af8:	4632      	mov	r2, r6
 8015afa:	9000      	str	r0, [sp, #0]
 8015afc:	4639      	mov	r1, r7
 8015afe:	4620      	mov	r0, r4
 8015b00:	f001 f89e 	bl	8016c40 <__mdiff>
 8015b04:	68c3      	ldr	r3, [r0, #12]
 8015b06:	4602      	mov	r2, r0
 8015b08:	bb03      	cbnz	r3, 8015b4c <_dtoa_r+0x9fc>
 8015b0a:	4601      	mov	r1, r0
 8015b0c:	9008      	str	r0, [sp, #32]
 8015b0e:	9804      	ldr	r0, [sp, #16]
 8015b10:	f001 f87c 	bl	8016c0c <__mcmp>
 8015b14:	9a08      	ldr	r2, [sp, #32]
 8015b16:	4603      	mov	r3, r0
 8015b18:	4611      	mov	r1, r2
 8015b1a:	4620      	mov	r0, r4
 8015b1c:	9308      	str	r3, [sp, #32]
 8015b1e:	f000 fe55 	bl	80167cc <_Bfree>
 8015b22:	9b08      	ldr	r3, [sp, #32]
 8015b24:	b9a3      	cbnz	r3, 8015b50 <_dtoa_r+0xa00>
 8015b26:	9a06      	ldr	r2, [sp, #24]
 8015b28:	b992      	cbnz	r2, 8015b50 <_dtoa_r+0xa00>
 8015b2a:	9a07      	ldr	r2, [sp, #28]
 8015b2c:	b982      	cbnz	r2, 8015b50 <_dtoa_r+0xa00>
 8015b2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b32:	d029      	beq.n	8015b88 <_dtoa_r+0xa38>
 8015b34:	9b00      	ldr	r3, [sp, #0]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	dd01      	ble.n	8015b3e <_dtoa_r+0x9ee>
 8015b3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015b3e:	9b05      	ldr	r3, [sp, #20]
 8015b40:	1c5d      	adds	r5, r3, #1
 8015b42:	f883 8000 	strb.w	r8, [r3]
 8015b46:	e782      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015b48:	4630      	mov	r0, r6
 8015b4a:	e7c2      	b.n	8015ad2 <_dtoa_r+0x982>
 8015b4c:	2301      	movs	r3, #1
 8015b4e:	e7e3      	b.n	8015b18 <_dtoa_r+0x9c8>
 8015b50:	9a00      	ldr	r2, [sp, #0]
 8015b52:	2a00      	cmp	r2, #0
 8015b54:	db04      	blt.n	8015b60 <_dtoa_r+0xa10>
 8015b56:	d125      	bne.n	8015ba4 <_dtoa_r+0xa54>
 8015b58:	9a06      	ldr	r2, [sp, #24]
 8015b5a:	bb1a      	cbnz	r2, 8015ba4 <_dtoa_r+0xa54>
 8015b5c:	9a07      	ldr	r2, [sp, #28]
 8015b5e:	bb0a      	cbnz	r2, 8015ba4 <_dtoa_r+0xa54>
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	ddec      	ble.n	8015b3e <_dtoa_r+0x9ee>
 8015b64:	2201      	movs	r2, #1
 8015b66:	9904      	ldr	r1, [sp, #16]
 8015b68:	4620      	mov	r0, r4
 8015b6a:	f000 fffb 	bl	8016b64 <__lshift>
 8015b6e:	4639      	mov	r1, r7
 8015b70:	9004      	str	r0, [sp, #16]
 8015b72:	f001 f84b 	bl	8016c0c <__mcmp>
 8015b76:	2800      	cmp	r0, #0
 8015b78:	dc03      	bgt.n	8015b82 <_dtoa_r+0xa32>
 8015b7a:	d1e0      	bne.n	8015b3e <_dtoa_r+0x9ee>
 8015b7c:	f018 0f01 	tst.w	r8, #1
 8015b80:	d0dd      	beq.n	8015b3e <_dtoa_r+0x9ee>
 8015b82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015b86:	d1d8      	bne.n	8015b3a <_dtoa_r+0x9ea>
 8015b88:	9b05      	ldr	r3, [sp, #20]
 8015b8a:	9a05      	ldr	r2, [sp, #20]
 8015b8c:	1c5d      	adds	r5, r3, #1
 8015b8e:	2339      	movs	r3, #57	; 0x39
 8015b90:	7013      	strb	r3, [r2, #0]
 8015b92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015b96:	2b39      	cmp	r3, #57	; 0x39
 8015b98:	f105 32ff 	add.w	r2, r5, #4294967295
 8015b9c:	d04f      	beq.n	8015c3e <_dtoa_r+0xaee>
 8015b9e:	3301      	adds	r3, #1
 8015ba0:	7013      	strb	r3, [r2, #0]
 8015ba2:	e754      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015ba4:	9a05      	ldr	r2, [sp, #20]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	f102 0501 	add.w	r5, r2, #1
 8015bac:	dd06      	ble.n	8015bbc <_dtoa_r+0xa6c>
 8015bae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015bb2:	d0e9      	beq.n	8015b88 <_dtoa_r+0xa38>
 8015bb4:	f108 0801 	add.w	r8, r8, #1
 8015bb8:	9b05      	ldr	r3, [sp, #20]
 8015bba:	e7c2      	b.n	8015b42 <_dtoa_r+0x9f2>
 8015bbc:	9a02      	ldr	r2, [sp, #8]
 8015bbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8015bc2:	eba5 030b 	sub.w	r3, r5, fp
 8015bc6:	4293      	cmp	r3, r2
 8015bc8:	d021      	beq.n	8015c0e <_dtoa_r+0xabe>
 8015bca:	2300      	movs	r3, #0
 8015bcc:	220a      	movs	r2, #10
 8015bce:	9904      	ldr	r1, [sp, #16]
 8015bd0:	4620      	mov	r0, r4
 8015bd2:	f000 fe12 	bl	80167fa <__multadd>
 8015bd6:	45b1      	cmp	r9, r6
 8015bd8:	9004      	str	r0, [sp, #16]
 8015bda:	f04f 0300 	mov.w	r3, #0
 8015bde:	f04f 020a 	mov.w	r2, #10
 8015be2:	4649      	mov	r1, r9
 8015be4:	4620      	mov	r0, r4
 8015be6:	d105      	bne.n	8015bf4 <_dtoa_r+0xaa4>
 8015be8:	f000 fe07 	bl	80167fa <__multadd>
 8015bec:	4681      	mov	r9, r0
 8015bee:	4606      	mov	r6, r0
 8015bf0:	9505      	str	r5, [sp, #20]
 8015bf2:	e776      	b.n	8015ae2 <_dtoa_r+0x992>
 8015bf4:	f000 fe01 	bl	80167fa <__multadd>
 8015bf8:	4631      	mov	r1, r6
 8015bfa:	4681      	mov	r9, r0
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	220a      	movs	r2, #10
 8015c00:	4620      	mov	r0, r4
 8015c02:	f000 fdfa 	bl	80167fa <__multadd>
 8015c06:	4606      	mov	r6, r0
 8015c08:	e7f2      	b.n	8015bf0 <_dtoa_r+0xaa0>
 8015c0a:	f04f 0900 	mov.w	r9, #0
 8015c0e:	2201      	movs	r2, #1
 8015c10:	9904      	ldr	r1, [sp, #16]
 8015c12:	4620      	mov	r0, r4
 8015c14:	f000 ffa6 	bl	8016b64 <__lshift>
 8015c18:	4639      	mov	r1, r7
 8015c1a:	9004      	str	r0, [sp, #16]
 8015c1c:	f000 fff6 	bl	8016c0c <__mcmp>
 8015c20:	2800      	cmp	r0, #0
 8015c22:	dcb6      	bgt.n	8015b92 <_dtoa_r+0xa42>
 8015c24:	d102      	bne.n	8015c2c <_dtoa_r+0xadc>
 8015c26:	f018 0f01 	tst.w	r8, #1
 8015c2a:	d1b2      	bne.n	8015b92 <_dtoa_r+0xa42>
 8015c2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015c30:	2b30      	cmp	r3, #48	; 0x30
 8015c32:	f105 32ff 	add.w	r2, r5, #4294967295
 8015c36:	f47f af0a 	bne.w	8015a4e <_dtoa_r+0x8fe>
 8015c3a:	4615      	mov	r5, r2
 8015c3c:	e7f6      	b.n	8015c2c <_dtoa_r+0xadc>
 8015c3e:	4593      	cmp	fp, r2
 8015c40:	d105      	bne.n	8015c4e <_dtoa_r+0xafe>
 8015c42:	2331      	movs	r3, #49	; 0x31
 8015c44:	f10a 0a01 	add.w	sl, sl, #1
 8015c48:	f88b 3000 	strb.w	r3, [fp]
 8015c4c:	e6ff      	b.n	8015a4e <_dtoa_r+0x8fe>
 8015c4e:	4615      	mov	r5, r2
 8015c50:	e79f      	b.n	8015b92 <_dtoa_r+0xa42>
 8015c52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015cb8 <_dtoa_r+0xb68>
 8015c56:	e007      	b.n	8015c68 <_dtoa_r+0xb18>
 8015c58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015c5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015cbc <_dtoa_r+0xb6c>
 8015c5e:	b11b      	cbz	r3, 8015c68 <_dtoa_r+0xb18>
 8015c60:	f10b 0308 	add.w	r3, fp, #8
 8015c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015c66:	6013      	str	r3, [r2, #0]
 8015c68:	4658      	mov	r0, fp
 8015c6a:	b017      	add	sp, #92	; 0x5c
 8015c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c70:	9b06      	ldr	r3, [sp, #24]
 8015c72:	2b01      	cmp	r3, #1
 8015c74:	f77f ae35 	ble.w	80158e2 <_dtoa_r+0x792>
 8015c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c7a:	9307      	str	r3, [sp, #28]
 8015c7c:	e649      	b.n	8015912 <_dtoa_r+0x7c2>
 8015c7e:	9b02      	ldr	r3, [sp, #8]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	dc03      	bgt.n	8015c8c <_dtoa_r+0xb3c>
 8015c84:	9b06      	ldr	r3, [sp, #24]
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	f73f aecc 	bgt.w	8015a24 <_dtoa_r+0x8d4>
 8015c8c:	465d      	mov	r5, fp
 8015c8e:	4639      	mov	r1, r7
 8015c90:	9804      	ldr	r0, [sp, #16]
 8015c92:	f7ff f9d1 	bl	8015038 <quorem>
 8015c96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015c9a:	f805 8b01 	strb.w	r8, [r5], #1
 8015c9e:	9a02      	ldr	r2, [sp, #8]
 8015ca0:	eba5 030b 	sub.w	r3, r5, fp
 8015ca4:	429a      	cmp	r2, r3
 8015ca6:	ddb0      	ble.n	8015c0a <_dtoa_r+0xaba>
 8015ca8:	2300      	movs	r3, #0
 8015caa:	220a      	movs	r2, #10
 8015cac:	9904      	ldr	r1, [sp, #16]
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f000 fda3 	bl	80167fa <__multadd>
 8015cb4:	9004      	str	r0, [sp, #16]
 8015cb6:	e7ea      	b.n	8015c8e <_dtoa_r+0xb3e>
 8015cb8:	080189cb 	.word	0x080189cb
 8015cbc:	08018828 	.word	0x08018828

08015cc0 <__sflush_r>:
 8015cc0:	898a      	ldrh	r2, [r1, #12]
 8015cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cc6:	4605      	mov	r5, r0
 8015cc8:	0710      	lsls	r0, r2, #28
 8015cca:	460c      	mov	r4, r1
 8015ccc:	d458      	bmi.n	8015d80 <__sflush_r+0xc0>
 8015cce:	684b      	ldr	r3, [r1, #4]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	dc05      	bgt.n	8015ce0 <__sflush_r+0x20>
 8015cd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	dc02      	bgt.n	8015ce0 <__sflush_r+0x20>
 8015cda:	2000      	movs	r0, #0
 8015cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ce2:	2e00      	cmp	r6, #0
 8015ce4:	d0f9      	beq.n	8015cda <__sflush_r+0x1a>
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015cec:	682f      	ldr	r7, [r5, #0]
 8015cee:	6a21      	ldr	r1, [r4, #32]
 8015cf0:	602b      	str	r3, [r5, #0]
 8015cf2:	d032      	beq.n	8015d5a <__sflush_r+0x9a>
 8015cf4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015cf6:	89a3      	ldrh	r3, [r4, #12]
 8015cf8:	075a      	lsls	r2, r3, #29
 8015cfa:	d505      	bpl.n	8015d08 <__sflush_r+0x48>
 8015cfc:	6863      	ldr	r3, [r4, #4]
 8015cfe:	1ac0      	subs	r0, r0, r3
 8015d00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015d02:	b10b      	cbz	r3, 8015d08 <__sflush_r+0x48>
 8015d04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015d06:	1ac0      	subs	r0, r0, r3
 8015d08:	2300      	movs	r3, #0
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015d0e:	6a21      	ldr	r1, [r4, #32]
 8015d10:	4628      	mov	r0, r5
 8015d12:	47b0      	blx	r6
 8015d14:	1c43      	adds	r3, r0, #1
 8015d16:	89a3      	ldrh	r3, [r4, #12]
 8015d18:	d106      	bne.n	8015d28 <__sflush_r+0x68>
 8015d1a:	6829      	ldr	r1, [r5, #0]
 8015d1c:	291d      	cmp	r1, #29
 8015d1e:	d848      	bhi.n	8015db2 <__sflush_r+0xf2>
 8015d20:	4a29      	ldr	r2, [pc, #164]	; (8015dc8 <__sflush_r+0x108>)
 8015d22:	40ca      	lsrs	r2, r1
 8015d24:	07d6      	lsls	r6, r2, #31
 8015d26:	d544      	bpl.n	8015db2 <__sflush_r+0xf2>
 8015d28:	2200      	movs	r2, #0
 8015d2a:	6062      	str	r2, [r4, #4]
 8015d2c:	04d9      	lsls	r1, r3, #19
 8015d2e:	6922      	ldr	r2, [r4, #16]
 8015d30:	6022      	str	r2, [r4, #0]
 8015d32:	d504      	bpl.n	8015d3e <__sflush_r+0x7e>
 8015d34:	1c42      	adds	r2, r0, #1
 8015d36:	d101      	bne.n	8015d3c <__sflush_r+0x7c>
 8015d38:	682b      	ldr	r3, [r5, #0]
 8015d3a:	b903      	cbnz	r3, 8015d3e <__sflush_r+0x7e>
 8015d3c:	6560      	str	r0, [r4, #84]	; 0x54
 8015d3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015d40:	602f      	str	r7, [r5, #0]
 8015d42:	2900      	cmp	r1, #0
 8015d44:	d0c9      	beq.n	8015cda <__sflush_r+0x1a>
 8015d46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015d4a:	4299      	cmp	r1, r3
 8015d4c:	d002      	beq.n	8015d54 <__sflush_r+0x94>
 8015d4e:	4628      	mov	r0, r5
 8015d50:	f001 f916 	bl	8016f80 <_free_r>
 8015d54:	2000      	movs	r0, #0
 8015d56:	6360      	str	r0, [r4, #52]	; 0x34
 8015d58:	e7c0      	b.n	8015cdc <__sflush_r+0x1c>
 8015d5a:	2301      	movs	r3, #1
 8015d5c:	4628      	mov	r0, r5
 8015d5e:	47b0      	blx	r6
 8015d60:	1c41      	adds	r1, r0, #1
 8015d62:	d1c8      	bne.n	8015cf6 <__sflush_r+0x36>
 8015d64:	682b      	ldr	r3, [r5, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d0c5      	beq.n	8015cf6 <__sflush_r+0x36>
 8015d6a:	2b1d      	cmp	r3, #29
 8015d6c:	d001      	beq.n	8015d72 <__sflush_r+0xb2>
 8015d6e:	2b16      	cmp	r3, #22
 8015d70:	d101      	bne.n	8015d76 <__sflush_r+0xb6>
 8015d72:	602f      	str	r7, [r5, #0]
 8015d74:	e7b1      	b.n	8015cda <__sflush_r+0x1a>
 8015d76:	89a3      	ldrh	r3, [r4, #12]
 8015d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d7c:	81a3      	strh	r3, [r4, #12]
 8015d7e:	e7ad      	b.n	8015cdc <__sflush_r+0x1c>
 8015d80:	690f      	ldr	r7, [r1, #16]
 8015d82:	2f00      	cmp	r7, #0
 8015d84:	d0a9      	beq.n	8015cda <__sflush_r+0x1a>
 8015d86:	0793      	lsls	r3, r2, #30
 8015d88:	680e      	ldr	r6, [r1, #0]
 8015d8a:	bf08      	it	eq
 8015d8c:	694b      	ldreq	r3, [r1, #20]
 8015d8e:	600f      	str	r7, [r1, #0]
 8015d90:	bf18      	it	ne
 8015d92:	2300      	movne	r3, #0
 8015d94:	eba6 0807 	sub.w	r8, r6, r7
 8015d98:	608b      	str	r3, [r1, #8]
 8015d9a:	f1b8 0f00 	cmp.w	r8, #0
 8015d9e:	dd9c      	ble.n	8015cda <__sflush_r+0x1a>
 8015da0:	4643      	mov	r3, r8
 8015da2:	463a      	mov	r2, r7
 8015da4:	6a21      	ldr	r1, [r4, #32]
 8015da6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015da8:	4628      	mov	r0, r5
 8015daa:	47b0      	blx	r6
 8015dac:	2800      	cmp	r0, #0
 8015dae:	dc06      	bgt.n	8015dbe <__sflush_r+0xfe>
 8015db0:	89a3      	ldrh	r3, [r4, #12]
 8015db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015db6:	81a3      	strh	r3, [r4, #12]
 8015db8:	f04f 30ff 	mov.w	r0, #4294967295
 8015dbc:	e78e      	b.n	8015cdc <__sflush_r+0x1c>
 8015dbe:	4407      	add	r7, r0
 8015dc0:	eba8 0800 	sub.w	r8, r8, r0
 8015dc4:	e7e9      	b.n	8015d9a <__sflush_r+0xda>
 8015dc6:	bf00      	nop
 8015dc8:	20400001 	.word	0x20400001

08015dcc <_fflush_r>:
 8015dcc:	b538      	push	{r3, r4, r5, lr}
 8015dce:	690b      	ldr	r3, [r1, #16]
 8015dd0:	4605      	mov	r5, r0
 8015dd2:	460c      	mov	r4, r1
 8015dd4:	b1db      	cbz	r3, 8015e0e <_fflush_r+0x42>
 8015dd6:	b118      	cbz	r0, 8015de0 <_fflush_r+0x14>
 8015dd8:	6983      	ldr	r3, [r0, #24]
 8015dda:	b90b      	cbnz	r3, 8015de0 <_fflush_r+0x14>
 8015ddc:	f000 f860 	bl	8015ea0 <__sinit>
 8015de0:	4b0c      	ldr	r3, [pc, #48]	; (8015e14 <_fflush_r+0x48>)
 8015de2:	429c      	cmp	r4, r3
 8015de4:	d109      	bne.n	8015dfa <_fflush_r+0x2e>
 8015de6:	686c      	ldr	r4, [r5, #4]
 8015de8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dec:	b17b      	cbz	r3, 8015e0e <_fflush_r+0x42>
 8015dee:	4621      	mov	r1, r4
 8015df0:	4628      	mov	r0, r5
 8015df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015df6:	f7ff bf63 	b.w	8015cc0 <__sflush_r>
 8015dfa:	4b07      	ldr	r3, [pc, #28]	; (8015e18 <_fflush_r+0x4c>)
 8015dfc:	429c      	cmp	r4, r3
 8015dfe:	d101      	bne.n	8015e04 <_fflush_r+0x38>
 8015e00:	68ac      	ldr	r4, [r5, #8]
 8015e02:	e7f1      	b.n	8015de8 <_fflush_r+0x1c>
 8015e04:	4b05      	ldr	r3, [pc, #20]	; (8015e1c <_fflush_r+0x50>)
 8015e06:	429c      	cmp	r4, r3
 8015e08:	bf08      	it	eq
 8015e0a:	68ec      	ldreq	r4, [r5, #12]
 8015e0c:	e7ec      	b.n	8015de8 <_fflush_r+0x1c>
 8015e0e:	2000      	movs	r0, #0
 8015e10:	bd38      	pop	{r3, r4, r5, pc}
 8015e12:	bf00      	nop
 8015e14:	08018858 	.word	0x08018858
 8015e18:	08018878 	.word	0x08018878
 8015e1c:	08018838 	.word	0x08018838

08015e20 <std>:
 8015e20:	2300      	movs	r3, #0
 8015e22:	b510      	push	{r4, lr}
 8015e24:	4604      	mov	r4, r0
 8015e26:	e9c0 3300 	strd	r3, r3, [r0]
 8015e2a:	6083      	str	r3, [r0, #8]
 8015e2c:	8181      	strh	r1, [r0, #12]
 8015e2e:	6643      	str	r3, [r0, #100]	; 0x64
 8015e30:	81c2      	strh	r2, [r0, #14]
 8015e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015e36:	6183      	str	r3, [r0, #24]
 8015e38:	4619      	mov	r1, r3
 8015e3a:	2208      	movs	r2, #8
 8015e3c:	305c      	adds	r0, #92	; 0x5c
 8015e3e:	f7fd f9a2 	bl	8013186 <memset>
 8015e42:	4b05      	ldr	r3, [pc, #20]	; (8015e58 <std+0x38>)
 8015e44:	6263      	str	r3, [r4, #36]	; 0x24
 8015e46:	4b05      	ldr	r3, [pc, #20]	; (8015e5c <std+0x3c>)
 8015e48:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e4a:	4b05      	ldr	r3, [pc, #20]	; (8015e60 <std+0x40>)
 8015e4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e4e:	4b05      	ldr	r3, [pc, #20]	; (8015e64 <std+0x44>)
 8015e50:	6224      	str	r4, [r4, #32]
 8015e52:	6323      	str	r3, [r4, #48]	; 0x30
 8015e54:	bd10      	pop	{r4, pc}
 8015e56:	bf00      	nop
 8015e58:	0801403d 	.word	0x0801403d
 8015e5c:	08014063 	.word	0x08014063
 8015e60:	0801409b 	.word	0x0801409b
 8015e64:	080140bf 	.word	0x080140bf

08015e68 <_cleanup_r>:
 8015e68:	4901      	ldr	r1, [pc, #4]	; (8015e70 <_cleanup_r+0x8>)
 8015e6a:	f000 b885 	b.w	8015f78 <_fwalk_reent>
 8015e6e:	bf00      	nop
 8015e70:	08015dcd 	.word	0x08015dcd

08015e74 <__sfmoreglue>:
 8015e74:	b570      	push	{r4, r5, r6, lr}
 8015e76:	1e4a      	subs	r2, r1, #1
 8015e78:	2568      	movs	r5, #104	; 0x68
 8015e7a:	4355      	muls	r5, r2
 8015e7c:	460e      	mov	r6, r1
 8015e7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015e82:	f001 f8cb 	bl	801701c <_malloc_r>
 8015e86:	4604      	mov	r4, r0
 8015e88:	b140      	cbz	r0, 8015e9c <__sfmoreglue+0x28>
 8015e8a:	2100      	movs	r1, #0
 8015e8c:	e9c0 1600 	strd	r1, r6, [r0]
 8015e90:	300c      	adds	r0, #12
 8015e92:	60a0      	str	r0, [r4, #8]
 8015e94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015e98:	f7fd f975 	bl	8013186 <memset>
 8015e9c:	4620      	mov	r0, r4
 8015e9e:	bd70      	pop	{r4, r5, r6, pc}

08015ea0 <__sinit>:
 8015ea0:	6983      	ldr	r3, [r0, #24]
 8015ea2:	b510      	push	{r4, lr}
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	bb33      	cbnz	r3, 8015ef6 <__sinit+0x56>
 8015ea8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015eac:	6503      	str	r3, [r0, #80]	; 0x50
 8015eae:	4b12      	ldr	r3, [pc, #72]	; (8015ef8 <__sinit+0x58>)
 8015eb0:	4a12      	ldr	r2, [pc, #72]	; (8015efc <__sinit+0x5c>)
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	6282      	str	r2, [r0, #40]	; 0x28
 8015eb6:	4298      	cmp	r0, r3
 8015eb8:	bf04      	itt	eq
 8015eba:	2301      	moveq	r3, #1
 8015ebc:	6183      	streq	r3, [r0, #24]
 8015ebe:	f000 f81f 	bl	8015f00 <__sfp>
 8015ec2:	6060      	str	r0, [r4, #4]
 8015ec4:	4620      	mov	r0, r4
 8015ec6:	f000 f81b 	bl	8015f00 <__sfp>
 8015eca:	60a0      	str	r0, [r4, #8]
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f000 f817 	bl	8015f00 <__sfp>
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	60e0      	str	r0, [r4, #12]
 8015ed6:	2104      	movs	r1, #4
 8015ed8:	6860      	ldr	r0, [r4, #4]
 8015eda:	f7ff ffa1 	bl	8015e20 <std>
 8015ede:	2201      	movs	r2, #1
 8015ee0:	2109      	movs	r1, #9
 8015ee2:	68a0      	ldr	r0, [r4, #8]
 8015ee4:	f7ff ff9c 	bl	8015e20 <std>
 8015ee8:	2202      	movs	r2, #2
 8015eea:	2112      	movs	r1, #18
 8015eec:	68e0      	ldr	r0, [r4, #12]
 8015eee:	f7ff ff97 	bl	8015e20 <std>
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	61a3      	str	r3, [r4, #24]
 8015ef6:	bd10      	pop	{r4, pc}
 8015ef8:	08018798 	.word	0x08018798
 8015efc:	08015e69 	.word	0x08015e69

08015f00 <__sfp>:
 8015f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f02:	4b1b      	ldr	r3, [pc, #108]	; (8015f70 <__sfp+0x70>)
 8015f04:	681e      	ldr	r6, [r3, #0]
 8015f06:	69b3      	ldr	r3, [r6, #24]
 8015f08:	4607      	mov	r7, r0
 8015f0a:	b913      	cbnz	r3, 8015f12 <__sfp+0x12>
 8015f0c:	4630      	mov	r0, r6
 8015f0e:	f7ff ffc7 	bl	8015ea0 <__sinit>
 8015f12:	3648      	adds	r6, #72	; 0x48
 8015f14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015f18:	3b01      	subs	r3, #1
 8015f1a:	d503      	bpl.n	8015f24 <__sfp+0x24>
 8015f1c:	6833      	ldr	r3, [r6, #0]
 8015f1e:	b133      	cbz	r3, 8015f2e <__sfp+0x2e>
 8015f20:	6836      	ldr	r6, [r6, #0]
 8015f22:	e7f7      	b.n	8015f14 <__sfp+0x14>
 8015f24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f28:	b16d      	cbz	r5, 8015f46 <__sfp+0x46>
 8015f2a:	3468      	adds	r4, #104	; 0x68
 8015f2c:	e7f4      	b.n	8015f18 <__sfp+0x18>
 8015f2e:	2104      	movs	r1, #4
 8015f30:	4638      	mov	r0, r7
 8015f32:	f7ff ff9f 	bl	8015e74 <__sfmoreglue>
 8015f36:	6030      	str	r0, [r6, #0]
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	d1f1      	bne.n	8015f20 <__sfp+0x20>
 8015f3c:	230c      	movs	r3, #12
 8015f3e:	603b      	str	r3, [r7, #0]
 8015f40:	4604      	mov	r4, r0
 8015f42:	4620      	mov	r0, r4
 8015f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f46:	4b0b      	ldr	r3, [pc, #44]	; (8015f74 <__sfp+0x74>)
 8015f48:	6665      	str	r5, [r4, #100]	; 0x64
 8015f4a:	e9c4 5500 	strd	r5, r5, [r4]
 8015f4e:	60a5      	str	r5, [r4, #8]
 8015f50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015f54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015f58:	2208      	movs	r2, #8
 8015f5a:	4629      	mov	r1, r5
 8015f5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015f60:	f7fd f911 	bl	8013186 <memset>
 8015f64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015f68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015f6c:	e7e9      	b.n	8015f42 <__sfp+0x42>
 8015f6e:	bf00      	nop
 8015f70:	08018798 	.word	0x08018798
 8015f74:	ffff0001 	.word	0xffff0001

08015f78 <_fwalk_reent>:
 8015f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f7c:	4680      	mov	r8, r0
 8015f7e:	4689      	mov	r9, r1
 8015f80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015f84:	2600      	movs	r6, #0
 8015f86:	b914      	cbnz	r4, 8015f8e <_fwalk_reent+0x16>
 8015f88:	4630      	mov	r0, r6
 8015f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015f92:	3f01      	subs	r7, #1
 8015f94:	d501      	bpl.n	8015f9a <_fwalk_reent+0x22>
 8015f96:	6824      	ldr	r4, [r4, #0]
 8015f98:	e7f5      	b.n	8015f86 <_fwalk_reent+0xe>
 8015f9a:	89ab      	ldrh	r3, [r5, #12]
 8015f9c:	2b01      	cmp	r3, #1
 8015f9e:	d907      	bls.n	8015fb0 <_fwalk_reent+0x38>
 8015fa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015fa4:	3301      	adds	r3, #1
 8015fa6:	d003      	beq.n	8015fb0 <_fwalk_reent+0x38>
 8015fa8:	4629      	mov	r1, r5
 8015faa:	4640      	mov	r0, r8
 8015fac:	47c8      	blx	r9
 8015fae:	4306      	orrs	r6, r0
 8015fb0:	3568      	adds	r5, #104	; 0x68
 8015fb2:	e7ee      	b.n	8015f92 <_fwalk_reent+0x1a>

08015fb4 <rshift>:
 8015fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fb6:	6906      	ldr	r6, [r0, #16]
 8015fb8:	114b      	asrs	r3, r1, #5
 8015fba:	429e      	cmp	r6, r3
 8015fbc:	f100 0414 	add.w	r4, r0, #20
 8015fc0:	dd30      	ble.n	8016024 <rshift+0x70>
 8015fc2:	f011 011f 	ands.w	r1, r1, #31
 8015fc6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015fca:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015fce:	d108      	bne.n	8015fe2 <rshift+0x2e>
 8015fd0:	4621      	mov	r1, r4
 8015fd2:	42b2      	cmp	r2, r6
 8015fd4:	460b      	mov	r3, r1
 8015fd6:	d211      	bcs.n	8015ffc <rshift+0x48>
 8015fd8:	f852 3b04 	ldr.w	r3, [r2], #4
 8015fdc:	f841 3b04 	str.w	r3, [r1], #4
 8015fe0:	e7f7      	b.n	8015fd2 <rshift+0x1e>
 8015fe2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015fe6:	f1c1 0c20 	rsb	ip, r1, #32
 8015fea:	40cd      	lsrs	r5, r1
 8015fec:	3204      	adds	r2, #4
 8015fee:	4623      	mov	r3, r4
 8015ff0:	42b2      	cmp	r2, r6
 8015ff2:	4617      	mov	r7, r2
 8015ff4:	d30c      	bcc.n	8016010 <rshift+0x5c>
 8015ff6:	601d      	str	r5, [r3, #0]
 8015ff8:	b105      	cbz	r5, 8015ffc <rshift+0x48>
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	1b1a      	subs	r2, r3, r4
 8015ffe:	42a3      	cmp	r3, r4
 8016000:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016004:	bf08      	it	eq
 8016006:	2300      	moveq	r3, #0
 8016008:	6102      	str	r2, [r0, #16]
 801600a:	bf08      	it	eq
 801600c:	6143      	streq	r3, [r0, #20]
 801600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016010:	683f      	ldr	r7, [r7, #0]
 8016012:	fa07 f70c 	lsl.w	r7, r7, ip
 8016016:	433d      	orrs	r5, r7
 8016018:	f843 5b04 	str.w	r5, [r3], #4
 801601c:	f852 5b04 	ldr.w	r5, [r2], #4
 8016020:	40cd      	lsrs	r5, r1
 8016022:	e7e5      	b.n	8015ff0 <rshift+0x3c>
 8016024:	4623      	mov	r3, r4
 8016026:	e7e9      	b.n	8015ffc <rshift+0x48>

08016028 <__hexdig_fun>:
 8016028:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801602c:	2b09      	cmp	r3, #9
 801602e:	d802      	bhi.n	8016036 <__hexdig_fun+0xe>
 8016030:	3820      	subs	r0, #32
 8016032:	b2c0      	uxtb	r0, r0
 8016034:	4770      	bx	lr
 8016036:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801603a:	2b05      	cmp	r3, #5
 801603c:	d801      	bhi.n	8016042 <__hexdig_fun+0x1a>
 801603e:	3847      	subs	r0, #71	; 0x47
 8016040:	e7f7      	b.n	8016032 <__hexdig_fun+0xa>
 8016042:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016046:	2b05      	cmp	r3, #5
 8016048:	d801      	bhi.n	801604e <__hexdig_fun+0x26>
 801604a:	3827      	subs	r0, #39	; 0x27
 801604c:	e7f1      	b.n	8016032 <__hexdig_fun+0xa>
 801604e:	2000      	movs	r0, #0
 8016050:	4770      	bx	lr

08016052 <__gethex>:
 8016052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016056:	b08b      	sub	sp, #44	; 0x2c
 8016058:	468a      	mov	sl, r1
 801605a:	9002      	str	r0, [sp, #8]
 801605c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801605e:	9306      	str	r3, [sp, #24]
 8016060:	4690      	mov	r8, r2
 8016062:	f000 fadf 	bl	8016624 <__localeconv_l>
 8016066:	6803      	ldr	r3, [r0, #0]
 8016068:	9303      	str	r3, [sp, #12]
 801606a:	4618      	mov	r0, r3
 801606c:	f7ea f8c8 	bl	8000200 <strlen>
 8016070:	9b03      	ldr	r3, [sp, #12]
 8016072:	9001      	str	r0, [sp, #4]
 8016074:	4403      	add	r3, r0
 8016076:	f04f 0b00 	mov.w	fp, #0
 801607a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801607e:	9307      	str	r3, [sp, #28]
 8016080:	f8da 3000 	ldr.w	r3, [sl]
 8016084:	3302      	adds	r3, #2
 8016086:	461f      	mov	r7, r3
 8016088:	f813 0b01 	ldrb.w	r0, [r3], #1
 801608c:	2830      	cmp	r0, #48	; 0x30
 801608e:	d06c      	beq.n	801616a <__gethex+0x118>
 8016090:	f7ff ffca 	bl	8016028 <__hexdig_fun>
 8016094:	4604      	mov	r4, r0
 8016096:	2800      	cmp	r0, #0
 8016098:	d16a      	bne.n	8016170 <__gethex+0x11e>
 801609a:	9a01      	ldr	r2, [sp, #4]
 801609c:	9903      	ldr	r1, [sp, #12]
 801609e:	4638      	mov	r0, r7
 80160a0:	f001 fe34 	bl	8017d0c <strncmp>
 80160a4:	2800      	cmp	r0, #0
 80160a6:	d166      	bne.n	8016176 <__gethex+0x124>
 80160a8:	9b01      	ldr	r3, [sp, #4]
 80160aa:	5cf8      	ldrb	r0, [r7, r3]
 80160ac:	18fe      	adds	r6, r7, r3
 80160ae:	f7ff ffbb 	bl	8016028 <__hexdig_fun>
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d062      	beq.n	801617c <__gethex+0x12a>
 80160b6:	4633      	mov	r3, r6
 80160b8:	7818      	ldrb	r0, [r3, #0]
 80160ba:	2830      	cmp	r0, #48	; 0x30
 80160bc:	461f      	mov	r7, r3
 80160be:	f103 0301 	add.w	r3, r3, #1
 80160c2:	d0f9      	beq.n	80160b8 <__gethex+0x66>
 80160c4:	f7ff ffb0 	bl	8016028 <__hexdig_fun>
 80160c8:	fab0 f580 	clz	r5, r0
 80160cc:	096d      	lsrs	r5, r5, #5
 80160ce:	4634      	mov	r4, r6
 80160d0:	f04f 0b01 	mov.w	fp, #1
 80160d4:	463a      	mov	r2, r7
 80160d6:	4616      	mov	r6, r2
 80160d8:	3201      	adds	r2, #1
 80160da:	7830      	ldrb	r0, [r6, #0]
 80160dc:	f7ff ffa4 	bl	8016028 <__hexdig_fun>
 80160e0:	2800      	cmp	r0, #0
 80160e2:	d1f8      	bne.n	80160d6 <__gethex+0x84>
 80160e4:	9a01      	ldr	r2, [sp, #4]
 80160e6:	9903      	ldr	r1, [sp, #12]
 80160e8:	4630      	mov	r0, r6
 80160ea:	f001 fe0f 	bl	8017d0c <strncmp>
 80160ee:	b950      	cbnz	r0, 8016106 <__gethex+0xb4>
 80160f0:	b954      	cbnz	r4, 8016108 <__gethex+0xb6>
 80160f2:	9b01      	ldr	r3, [sp, #4]
 80160f4:	18f4      	adds	r4, r6, r3
 80160f6:	4622      	mov	r2, r4
 80160f8:	4616      	mov	r6, r2
 80160fa:	3201      	adds	r2, #1
 80160fc:	7830      	ldrb	r0, [r6, #0]
 80160fe:	f7ff ff93 	bl	8016028 <__hexdig_fun>
 8016102:	2800      	cmp	r0, #0
 8016104:	d1f8      	bne.n	80160f8 <__gethex+0xa6>
 8016106:	b10c      	cbz	r4, 801610c <__gethex+0xba>
 8016108:	1ba4      	subs	r4, r4, r6
 801610a:	00a4      	lsls	r4, r4, #2
 801610c:	7833      	ldrb	r3, [r6, #0]
 801610e:	2b50      	cmp	r3, #80	; 0x50
 8016110:	d001      	beq.n	8016116 <__gethex+0xc4>
 8016112:	2b70      	cmp	r3, #112	; 0x70
 8016114:	d140      	bne.n	8016198 <__gethex+0x146>
 8016116:	7873      	ldrb	r3, [r6, #1]
 8016118:	2b2b      	cmp	r3, #43	; 0x2b
 801611a:	d031      	beq.n	8016180 <__gethex+0x12e>
 801611c:	2b2d      	cmp	r3, #45	; 0x2d
 801611e:	d033      	beq.n	8016188 <__gethex+0x136>
 8016120:	1c71      	adds	r1, r6, #1
 8016122:	f04f 0900 	mov.w	r9, #0
 8016126:	7808      	ldrb	r0, [r1, #0]
 8016128:	f7ff ff7e 	bl	8016028 <__hexdig_fun>
 801612c:	1e43      	subs	r3, r0, #1
 801612e:	b2db      	uxtb	r3, r3
 8016130:	2b18      	cmp	r3, #24
 8016132:	d831      	bhi.n	8016198 <__gethex+0x146>
 8016134:	f1a0 0210 	sub.w	r2, r0, #16
 8016138:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801613c:	f7ff ff74 	bl	8016028 <__hexdig_fun>
 8016140:	1e43      	subs	r3, r0, #1
 8016142:	b2db      	uxtb	r3, r3
 8016144:	2b18      	cmp	r3, #24
 8016146:	d922      	bls.n	801618e <__gethex+0x13c>
 8016148:	f1b9 0f00 	cmp.w	r9, #0
 801614c:	d000      	beq.n	8016150 <__gethex+0xfe>
 801614e:	4252      	negs	r2, r2
 8016150:	4414      	add	r4, r2
 8016152:	f8ca 1000 	str.w	r1, [sl]
 8016156:	b30d      	cbz	r5, 801619c <__gethex+0x14a>
 8016158:	f1bb 0f00 	cmp.w	fp, #0
 801615c:	bf0c      	ite	eq
 801615e:	2706      	moveq	r7, #6
 8016160:	2700      	movne	r7, #0
 8016162:	4638      	mov	r0, r7
 8016164:	b00b      	add	sp, #44	; 0x2c
 8016166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801616a:	f10b 0b01 	add.w	fp, fp, #1
 801616e:	e78a      	b.n	8016086 <__gethex+0x34>
 8016170:	2500      	movs	r5, #0
 8016172:	462c      	mov	r4, r5
 8016174:	e7ae      	b.n	80160d4 <__gethex+0x82>
 8016176:	463e      	mov	r6, r7
 8016178:	2501      	movs	r5, #1
 801617a:	e7c7      	b.n	801610c <__gethex+0xba>
 801617c:	4604      	mov	r4, r0
 801617e:	e7fb      	b.n	8016178 <__gethex+0x126>
 8016180:	f04f 0900 	mov.w	r9, #0
 8016184:	1cb1      	adds	r1, r6, #2
 8016186:	e7ce      	b.n	8016126 <__gethex+0xd4>
 8016188:	f04f 0901 	mov.w	r9, #1
 801618c:	e7fa      	b.n	8016184 <__gethex+0x132>
 801618e:	230a      	movs	r3, #10
 8016190:	fb03 0202 	mla	r2, r3, r2, r0
 8016194:	3a10      	subs	r2, #16
 8016196:	e7cf      	b.n	8016138 <__gethex+0xe6>
 8016198:	4631      	mov	r1, r6
 801619a:	e7da      	b.n	8016152 <__gethex+0x100>
 801619c:	1bf3      	subs	r3, r6, r7
 801619e:	3b01      	subs	r3, #1
 80161a0:	4629      	mov	r1, r5
 80161a2:	2b07      	cmp	r3, #7
 80161a4:	dc49      	bgt.n	801623a <__gethex+0x1e8>
 80161a6:	9802      	ldr	r0, [sp, #8]
 80161a8:	f000 fadc 	bl	8016764 <_Balloc>
 80161ac:	9b01      	ldr	r3, [sp, #4]
 80161ae:	f100 0914 	add.w	r9, r0, #20
 80161b2:	f04f 0b00 	mov.w	fp, #0
 80161b6:	f1c3 0301 	rsb	r3, r3, #1
 80161ba:	4605      	mov	r5, r0
 80161bc:	f8cd 9010 	str.w	r9, [sp, #16]
 80161c0:	46da      	mov	sl, fp
 80161c2:	9308      	str	r3, [sp, #32]
 80161c4:	42b7      	cmp	r7, r6
 80161c6:	d33b      	bcc.n	8016240 <__gethex+0x1ee>
 80161c8:	9804      	ldr	r0, [sp, #16]
 80161ca:	f840 ab04 	str.w	sl, [r0], #4
 80161ce:	eba0 0009 	sub.w	r0, r0, r9
 80161d2:	1080      	asrs	r0, r0, #2
 80161d4:	6128      	str	r0, [r5, #16]
 80161d6:	0147      	lsls	r7, r0, #5
 80161d8:	4650      	mov	r0, sl
 80161da:	f000 fb87 	bl	80168ec <__hi0bits>
 80161de:	f8d8 6000 	ldr.w	r6, [r8]
 80161e2:	1a3f      	subs	r7, r7, r0
 80161e4:	42b7      	cmp	r7, r6
 80161e6:	dd64      	ble.n	80162b2 <__gethex+0x260>
 80161e8:	1bbf      	subs	r7, r7, r6
 80161ea:	4639      	mov	r1, r7
 80161ec:	4628      	mov	r0, r5
 80161ee:	f000 fe97 	bl	8016f20 <__any_on>
 80161f2:	4682      	mov	sl, r0
 80161f4:	b178      	cbz	r0, 8016216 <__gethex+0x1c4>
 80161f6:	1e7b      	subs	r3, r7, #1
 80161f8:	1159      	asrs	r1, r3, #5
 80161fa:	f003 021f 	and.w	r2, r3, #31
 80161fe:	f04f 0a01 	mov.w	sl, #1
 8016202:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8016206:	fa0a f202 	lsl.w	r2, sl, r2
 801620a:	420a      	tst	r2, r1
 801620c:	d003      	beq.n	8016216 <__gethex+0x1c4>
 801620e:	4553      	cmp	r3, sl
 8016210:	dc46      	bgt.n	80162a0 <__gethex+0x24e>
 8016212:	f04f 0a02 	mov.w	sl, #2
 8016216:	4639      	mov	r1, r7
 8016218:	4628      	mov	r0, r5
 801621a:	f7ff fecb 	bl	8015fb4 <rshift>
 801621e:	443c      	add	r4, r7
 8016220:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016224:	42a3      	cmp	r3, r4
 8016226:	da52      	bge.n	80162ce <__gethex+0x27c>
 8016228:	4629      	mov	r1, r5
 801622a:	9802      	ldr	r0, [sp, #8]
 801622c:	f000 face 	bl	80167cc <_Bfree>
 8016230:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016232:	2300      	movs	r3, #0
 8016234:	6013      	str	r3, [r2, #0]
 8016236:	27a3      	movs	r7, #163	; 0xa3
 8016238:	e793      	b.n	8016162 <__gethex+0x110>
 801623a:	3101      	adds	r1, #1
 801623c:	105b      	asrs	r3, r3, #1
 801623e:	e7b0      	b.n	80161a2 <__gethex+0x150>
 8016240:	1e73      	subs	r3, r6, #1
 8016242:	9305      	str	r3, [sp, #20]
 8016244:	9a07      	ldr	r2, [sp, #28]
 8016246:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801624a:	4293      	cmp	r3, r2
 801624c:	d018      	beq.n	8016280 <__gethex+0x22e>
 801624e:	f1bb 0f20 	cmp.w	fp, #32
 8016252:	d107      	bne.n	8016264 <__gethex+0x212>
 8016254:	9b04      	ldr	r3, [sp, #16]
 8016256:	f8c3 a000 	str.w	sl, [r3]
 801625a:	3304      	adds	r3, #4
 801625c:	f04f 0a00 	mov.w	sl, #0
 8016260:	9304      	str	r3, [sp, #16]
 8016262:	46d3      	mov	fp, sl
 8016264:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016268:	f7ff fede 	bl	8016028 <__hexdig_fun>
 801626c:	f000 000f 	and.w	r0, r0, #15
 8016270:	fa00 f00b 	lsl.w	r0, r0, fp
 8016274:	ea4a 0a00 	orr.w	sl, sl, r0
 8016278:	f10b 0b04 	add.w	fp, fp, #4
 801627c:	9b05      	ldr	r3, [sp, #20]
 801627e:	e00d      	b.n	801629c <__gethex+0x24a>
 8016280:	9b05      	ldr	r3, [sp, #20]
 8016282:	9a08      	ldr	r2, [sp, #32]
 8016284:	4413      	add	r3, r2
 8016286:	42bb      	cmp	r3, r7
 8016288:	d3e1      	bcc.n	801624e <__gethex+0x1fc>
 801628a:	4618      	mov	r0, r3
 801628c:	9a01      	ldr	r2, [sp, #4]
 801628e:	9903      	ldr	r1, [sp, #12]
 8016290:	9309      	str	r3, [sp, #36]	; 0x24
 8016292:	f001 fd3b 	bl	8017d0c <strncmp>
 8016296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016298:	2800      	cmp	r0, #0
 801629a:	d1d8      	bne.n	801624e <__gethex+0x1fc>
 801629c:	461e      	mov	r6, r3
 801629e:	e791      	b.n	80161c4 <__gethex+0x172>
 80162a0:	1eb9      	subs	r1, r7, #2
 80162a2:	4628      	mov	r0, r5
 80162a4:	f000 fe3c 	bl	8016f20 <__any_on>
 80162a8:	2800      	cmp	r0, #0
 80162aa:	d0b2      	beq.n	8016212 <__gethex+0x1c0>
 80162ac:	f04f 0a03 	mov.w	sl, #3
 80162b0:	e7b1      	b.n	8016216 <__gethex+0x1c4>
 80162b2:	da09      	bge.n	80162c8 <__gethex+0x276>
 80162b4:	1bf7      	subs	r7, r6, r7
 80162b6:	4629      	mov	r1, r5
 80162b8:	463a      	mov	r2, r7
 80162ba:	9802      	ldr	r0, [sp, #8]
 80162bc:	f000 fc52 	bl	8016b64 <__lshift>
 80162c0:	1be4      	subs	r4, r4, r7
 80162c2:	4605      	mov	r5, r0
 80162c4:	f100 0914 	add.w	r9, r0, #20
 80162c8:	f04f 0a00 	mov.w	sl, #0
 80162cc:	e7a8      	b.n	8016220 <__gethex+0x1ce>
 80162ce:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80162d2:	42a0      	cmp	r0, r4
 80162d4:	dd6a      	ble.n	80163ac <__gethex+0x35a>
 80162d6:	1b04      	subs	r4, r0, r4
 80162d8:	42a6      	cmp	r6, r4
 80162da:	dc2e      	bgt.n	801633a <__gethex+0x2e8>
 80162dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d022      	beq.n	801632a <__gethex+0x2d8>
 80162e4:	2b03      	cmp	r3, #3
 80162e6:	d024      	beq.n	8016332 <__gethex+0x2e0>
 80162e8:	2b01      	cmp	r3, #1
 80162ea:	d115      	bne.n	8016318 <__gethex+0x2c6>
 80162ec:	42a6      	cmp	r6, r4
 80162ee:	d113      	bne.n	8016318 <__gethex+0x2c6>
 80162f0:	2e01      	cmp	r6, #1
 80162f2:	dc0b      	bgt.n	801630c <__gethex+0x2ba>
 80162f4:	9a06      	ldr	r2, [sp, #24]
 80162f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80162fa:	6013      	str	r3, [r2, #0]
 80162fc:	2301      	movs	r3, #1
 80162fe:	612b      	str	r3, [r5, #16]
 8016300:	f8c9 3000 	str.w	r3, [r9]
 8016304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016306:	2762      	movs	r7, #98	; 0x62
 8016308:	601d      	str	r5, [r3, #0]
 801630a:	e72a      	b.n	8016162 <__gethex+0x110>
 801630c:	1e71      	subs	r1, r6, #1
 801630e:	4628      	mov	r0, r5
 8016310:	f000 fe06 	bl	8016f20 <__any_on>
 8016314:	2800      	cmp	r0, #0
 8016316:	d1ed      	bne.n	80162f4 <__gethex+0x2a2>
 8016318:	4629      	mov	r1, r5
 801631a:	9802      	ldr	r0, [sp, #8]
 801631c:	f000 fa56 	bl	80167cc <_Bfree>
 8016320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016322:	2300      	movs	r3, #0
 8016324:	6013      	str	r3, [r2, #0]
 8016326:	2750      	movs	r7, #80	; 0x50
 8016328:	e71b      	b.n	8016162 <__gethex+0x110>
 801632a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801632c:	2b00      	cmp	r3, #0
 801632e:	d0e1      	beq.n	80162f4 <__gethex+0x2a2>
 8016330:	e7f2      	b.n	8016318 <__gethex+0x2c6>
 8016332:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016334:	2b00      	cmp	r3, #0
 8016336:	d1dd      	bne.n	80162f4 <__gethex+0x2a2>
 8016338:	e7ee      	b.n	8016318 <__gethex+0x2c6>
 801633a:	1e67      	subs	r7, r4, #1
 801633c:	f1ba 0f00 	cmp.w	sl, #0
 8016340:	d131      	bne.n	80163a6 <__gethex+0x354>
 8016342:	b127      	cbz	r7, 801634e <__gethex+0x2fc>
 8016344:	4639      	mov	r1, r7
 8016346:	4628      	mov	r0, r5
 8016348:	f000 fdea 	bl	8016f20 <__any_on>
 801634c:	4682      	mov	sl, r0
 801634e:	117a      	asrs	r2, r7, #5
 8016350:	2301      	movs	r3, #1
 8016352:	f007 071f 	and.w	r7, r7, #31
 8016356:	fa03 f707 	lsl.w	r7, r3, r7
 801635a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801635e:	4621      	mov	r1, r4
 8016360:	421f      	tst	r7, r3
 8016362:	4628      	mov	r0, r5
 8016364:	bf18      	it	ne
 8016366:	f04a 0a02 	orrne.w	sl, sl, #2
 801636a:	1b36      	subs	r6, r6, r4
 801636c:	f7ff fe22 	bl	8015fb4 <rshift>
 8016370:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016374:	2702      	movs	r7, #2
 8016376:	f1ba 0f00 	cmp.w	sl, #0
 801637a:	d048      	beq.n	801640e <__gethex+0x3bc>
 801637c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016380:	2b02      	cmp	r3, #2
 8016382:	d015      	beq.n	80163b0 <__gethex+0x35e>
 8016384:	2b03      	cmp	r3, #3
 8016386:	d017      	beq.n	80163b8 <__gethex+0x366>
 8016388:	2b01      	cmp	r3, #1
 801638a:	d109      	bne.n	80163a0 <__gethex+0x34e>
 801638c:	f01a 0f02 	tst.w	sl, #2
 8016390:	d006      	beq.n	80163a0 <__gethex+0x34e>
 8016392:	f8d9 3000 	ldr.w	r3, [r9]
 8016396:	ea4a 0a03 	orr.w	sl, sl, r3
 801639a:	f01a 0f01 	tst.w	sl, #1
 801639e:	d10e      	bne.n	80163be <__gethex+0x36c>
 80163a0:	f047 0710 	orr.w	r7, r7, #16
 80163a4:	e033      	b.n	801640e <__gethex+0x3bc>
 80163a6:	f04f 0a01 	mov.w	sl, #1
 80163aa:	e7d0      	b.n	801634e <__gethex+0x2fc>
 80163ac:	2701      	movs	r7, #1
 80163ae:	e7e2      	b.n	8016376 <__gethex+0x324>
 80163b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163b2:	f1c3 0301 	rsb	r3, r3, #1
 80163b6:	9315      	str	r3, [sp, #84]	; 0x54
 80163b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d0f0      	beq.n	80163a0 <__gethex+0x34e>
 80163be:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80163c2:	f105 0314 	add.w	r3, r5, #20
 80163c6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80163ca:	eb03 010a 	add.w	r1, r3, sl
 80163ce:	f04f 0c00 	mov.w	ip, #0
 80163d2:	4618      	mov	r0, r3
 80163d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80163d8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80163dc:	d01c      	beq.n	8016418 <__gethex+0x3c6>
 80163de:	3201      	adds	r2, #1
 80163e0:	6002      	str	r2, [r0, #0]
 80163e2:	2f02      	cmp	r7, #2
 80163e4:	f105 0314 	add.w	r3, r5, #20
 80163e8:	d138      	bne.n	801645c <__gethex+0x40a>
 80163ea:	f8d8 2000 	ldr.w	r2, [r8]
 80163ee:	3a01      	subs	r2, #1
 80163f0:	42b2      	cmp	r2, r6
 80163f2:	d10a      	bne.n	801640a <__gethex+0x3b8>
 80163f4:	1171      	asrs	r1, r6, #5
 80163f6:	2201      	movs	r2, #1
 80163f8:	f006 061f 	and.w	r6, r6, #31
 80163fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016400:	fa02 f606 	lsl.w	r6, r2, r6
 8016404:	421e      	tst	r6, r3
 8016406:	bf18      	it	ne
 8016408:	4617      	movne	r7, r2
 801640a:	f047 0720 	orr.w	r7, r7, #32
 801640e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016410:	601d      	str	r5, [r3, #0]
 8016412:	9b06      	ldr	r3, [sp, #24]
 8016414:	601c      	str	r4, [r3, #0]
 8016416:	e6a4      	b.n	8016162 <__gethex+0x110>
 8016418:	4299      	cmp	r1, r3
 801641a:	f843 cc04 	str.w	ip, [r3, #-4]
 801641e:	d8d8      	bhi.n	80163d2 <__gethex+0x380>
 8016420:	68ab      	ldr	r3, [r5, #8]
 8016422:	4599      	cmp	r9, r3
 8016424:	db12      	blt.n	801644c <__gethex+0x3fa>
 8016426:	6869      	ldr	r1, [r5, #4]
 8016428:	9802      	ldr	r0, [sp, #8]
 801642a:	3101      	adds	r1, #1
 801642c:	f000 f99a 	bl	8016764 <_Balloc>
 8016430:	692a      	ldr	r2, [r5, #16]
 8016432:	3202      	adds	r2, #2
 8016434:	f105 010c 	add.w	r1, r5, #12
 8016438:	4683      	mov	fp, r0
 801643a:	0092      	lsls	r2, r2, #2
 801643c:	300c      	adds	r0, #12
 801643e:	f7fc fe97 	bl	8013170 <memcpy>
 8016442:	4629      	mov	r1, r5
 8016444:	9802      	ldr	r0, [sp, #8]
 8016446:	f000 f9c1 	bl	80167cc <_Bfree>
 801644a:	465d      	mov	r5, fp
 801644c:	692b      	ldr	r3, [r5, #16]
 801644e:	1c5a      	adds	r2, r3, #1
 8016450:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016454:	612a      	str	r2, [r5, #16]
 8016456:	2201      	movs	r2, #1
 8016458:	615a      	str	r2, [r3, #20]
 801645a:	e7c2      	b.n	80163e2 <__gethex+0x390>
 801645c:	692a      	ldr	r2, [r5, #16]
 801645e:	454a      	cmp	r2, r9
 8016460:	dd0b      	ble.n	801647a <__gethex+0x428>
 8016462:	2101      	movs	r1, #1
 8016464:	4628      	mov	r0, r5
 8016466:	f7ff fda5 	bl	8015fb4 <rshift>
 801646a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801646e:	3401      	adds	r4, #1
 8016470:	42a3      	cmp	r3, r4
 8016472:	f6ff aed9 	blt.w	8016228 <__gethex+0x1d6>
 8016476:	2701      	movs	r7, #1
 8016478:	e7c7      	b.n	801640a <__gethex+0x3b8>
 801647a:	f016 061f 	ands.w	r6, r6, #31
 801647e:	d0fa      	beq.n	8016476 <__gethex+0x424>
 8016480:	449a      	add	sl, r3
 8016482:	f1c6 0620 	rsb	r6, r6, #32
 8016486:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801648a:	f000 fa2f 	bl	80168ec <__hi0bits>
 801648e:	42b0      	cmp	r0, r6
 8016490:	dbe7      	blt.n	8016462 <__gethex+0x410>
 8016492:	e7f0      	b.n	8016476 <__gethex+0x424>

08016494 <L_shift>:
 8016494:	f1c2 0208 	rsb	r2, r2, #8
 8016498:	0092      	lsls	r2, r2, #2
 801649a:	b570      	push	{r4, r5, r6, lr}
 801649c:	f1c2 0620 	rsb	r6, r2, #32
 80164a0:	6843      	ldr	r3, [r0, #4]
 80164a2:	6804      	ldr	r4, [r0, #0]
 80164a4:	fa03 f506 	lsl.w	r5, r3, r6
 80164a8:	432c      	orrs	r4, r5
 80164aa:	40d3      	lsrs	r3, r2
 80164ac:	6004      	str	r4, [r0, #0]
 80164ae:	f840 3f04 	str.w	r3, [r0, #4]!
 80164b2:	4288      	cmp	r0, r1
 80164b4:	d3f4      	bcc.n	80164a0 <L_shift+0xc>
 80164b6:	bd70      	pop	{r4, r5, r6, pc}

080164b8 <__match>:
 80164b8:	b530      	push	{r4, r5, lr}
 80164ba:	6803      	ldr	r3, [r0, #0]
 80164bc:	3301      	adds	r3, #1
 80164be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80164c2:	b914      	cbnz	r4, 80164ca <__match+0x12>
 80164c4:	6003      	str	r3, [r0, #0]
 80164c6:	2001      	movs	r0, #1
 80164c8:	bd30      	pop	{r4, r5, pc}
 80164ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164ce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80164d2:	2d19      	cmp	r5, #25
 80164d4:	bf98      	it	ls
 80164d6:	3220      	addls	r2, #32
 80164d8:	42a2      	cmp	r2, r4
 80164da:	d0f0      	beq.n	80164be <__match+0x6>
 80164dc:	2000      	movs	r0, #0
 80164de:	e7f3      	b.n	80164c8 <__match+0x10>

080164e0 <__hexnan>:
 80164e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164e4:	680b      	ldr	r3, [r1, #0]
 80164e6:	6801      	ldr	r1, [r0, #0]
 80164e8:	115f      	asrs	r7, r3, #5
 80164ea:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80164ee:	f013 031f 	ands.w	r3, r3, #31
 80164f2:	b087      	sub	sp, #28
 80164f4:	bf18      	it	ne
 80164f6:	3704      	addne	r7, #4
 80164f8:	2500      	movs	r5, #0
 80164fa:	1f3e      	subs	r6, r7, #4
 80164fc:	4682      	mov	sl, r0
 80164fe:	4690      	mov	r8, r2
 8016500:	9301      	str	r3, [sp, #4]
 8016502:	f847 5c04 	str.w	r5, [r7, #-4]
 8016506:	46b1      	mov	r9, r6
 8016508:	4634      	mov	r4, r6
 801650a:	9502      	str	r5, [sp, #8]
 801650c:	46ab      	mov	fp, r5
 801650e:	784a      	ldrb	r2, [r1, #1]
 8016510:	1c4b      	adds	r3, r1, #1
 8016512:	9303      	str	r3, [sp, #12]
 8016514:	b342      	cbz	r2, 8016568 <__hexnan+0x88>
 8016516:	4610      	mov	r0, r2
 8016518:	9105      	str	r1, [sp, #20]
 801651a:	9204      	str	r2, [sp, #16]
 801651c:	f7ff fd84 	bl	8016028 <__hexdig_fun>
 8016520:	2800      	cmp	r0, #0
 8016522:	d143      	bne.n	80165ac <__hexnan+0xcc>
 8016524:	9a04      	ldr	r2, [sp, #16]
 8016526:	9905      	ldr	r1, [sp, #20]
 8016528:	2a20      	cmp	r2, #32
 801652a:	d818      	bhi.n	801655e <__hexnan+0x7e>
 801652c:	9b02      	ldr	r3, [sp, #8]
 801652e:	459b      	cmp	fp, r3
 8016530:	dd13      	ble.n	801655a <__hexnan+0x7a>
 8016532:	454c      	cmp	r4, r9
 8016534:	d206      	bcs.n	8016544 <__hexnan+0x64>
 8016536:	2d07      	cmp	r5, #7
 8016538:	dc04      	bgt.n	8016544 <__hexnan+0x64>
 801653a:	462a      	mov	r2, r5
 801653c:	4649      	mov	r1, r9
 801653e:	4620      	mov	r0, r4
 8016540:	f7ff ffa8 	bl	8016494 <L_shift>
 8016544:	4544      	cmp	r4, r8
 8016546:	d944      	bls.n	80165d2 <__hexnan+0xf2>
 8016548:	2300      	movs	r3, #0
 801654a:	f1a4 0904 	sub.w	r9, r4, #4
 801654e:	f844 3c04 	str.w	r3, [r4, #-4]
 8016552:	f8cd b008 	str.w	fp, [sp, #8]
 8016556:	464c      	mov	r4, r9
 8016558:	461d      	mov	r5, r3
 801655a:	9903      	ldr	r1, [sp, #12]
 801655c:	e7d7      	b.n	801650e <__hexnan+0x2e>
 801655e:	2a29      	cmp	r2, #41	; 0x29
 8016560:	d14a      	bne.n	80165f8 <__hexnan+0x118>
 8016562:	3102      	adds	r1, #2
 8016564:	f8ca 1000 	str.w	r1, [sl]
 8016568:	f1bb 0f00 	cmp.w	fp, #0
 801656c:	d044      	beq.n	80165f8 <__hexnan+0x118>
 801656e:	454c      	cmp	r4, r9
 8016570:	d206      	bcs.n	8016580 <__hexnan+0xa0>
 8016572:	2d07      	cmp	r5, #7
 8016574:	dc04      	bgt.n	8016580 <__hexnan+0xa0>
 8016576:	462a      	mov	r2, r5
 8016578:	4649      	mov	r1, r9
 801657a:	4620      	mov	r0, r4
 801657c:	f7ff ff8a 	bl	8016494 <L_shift>
 8016580:	4544      	cmp	r4, r8
 8016582:	d928      	bls.n	80165d6 <__hexnan+0xf6>
 8016584:	4643      	mov	r3, r8
 8016586:	f854 2b04 	ldr.w	r2, [r4], #4
 801658a:	f843 2b04 	str.w	r2, [r3], #4
 801658e:	42a6      	cmp	r6, r4
 8016590:	d2f9      	bcs.n	8016586 <__hexnan+0xa6>
 8016592:	2200      	movs	r2, #0
 8016594:	f843 2b04 	str.w	r2, [r3], #4
 8016598:	429e      	cmp	r6, r3
 801659a:	d2fb      	bcs.n	8016594 <__hexnan+0xb4>
 801659c:	6833      	ldr	r3, [r6, #0]
 801659e:	b91b      	cbnz	r3, 80165a8 <__hexnan+0xc8>
 80165a0:	4546      	cmp	r6, r8
 80165a2:	d127      	bne.n	80165f4 <__hexnan+0x114>
 80165a4:	2301      	movs	r3, #1
 80165a6:	6033      	str	r3, [r6, #0]
 80165a8:	2005      	movs	r0, #5
 80165aa:	e026      	b.n	80165fa <__hexnan+0x11a>
 80165ac:	3501      	adds	r5, #1
 80165ae:	2d08      	cmp	r5, #8
 80165b0:	f10b 0b01 	add.w	fp, fp, #1
 80165b4:	dd06      	ble.n	80165c4 <__hexnan+0xe4>
 80165b6:	4544      	cmp	r4, r8
 80165b8:	d9cf      	bls.n	801655a <__hexnan+0x7a>
 80165ba:	2300      	movs	r3, #0
 80165bc:	f844 3c04 	str.w	r3, [r4, #-4]
 80165c0:	2501      	movs	r5, #1
 80165c2:	3c04      	subs	r4, #4
 80165c4:	6822      	ldr	r2, [r4, #0]
 80165c6:	f000 000f 	and.w	r0, r0, #15
 80165ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80165ce:	6020      	str	r0, [r4, #0]
 80165d0:	e7c3      	b.n	801655a <__hexnan+0x7a>
 80165d2:	2508      	movs	r5, #8
 80165d4:	e7c1      	b.n	801655a <__hexnan+0x7a>
 80165d6:	9b01      	ldr	r3, [sp, #4]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d0df      	beq.n	801659c <__hexnan+0xbc>
 80165dc:	f04f 32ff 	mov.w	r2, #4294967295
 80165e0:	f1c3 0320 	rsb	r3, r3, #32
 80165e4:	fa22 f303 	lsr.w	r3, r2, r3
 80165e8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80165ec:	401a      	ands	r2, r3
 80165ee:	f847 2c04 	str.w	r2, [r7, #-4]
 80165f2:	e7d3      	b.n	801659c <__hexnan+0xbc>
 80165f4:	3e04      	subs	r6, #4
 80165f6:	e7d1      	b.n	801659c <__hexnan+0xbc>
 80165f8:	2004      	movs	r0, #4
 80165fa:	b007      	add	sp, #28
 80165fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016600 <__locale_ctype_ptr_l>:
 8016600:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016604:	4770      	bx	lr
	...

08016608 <__locale_ctype_ptr>:
 8016608:	4b04      	ldr	r3, [pc, #16]	; (801661c <__locale_ctype_ptr+0x14>)
 801660a:	4a05      	ldr	r2, [pc, #20]	; (8016620 <__locale_ctype_ptr+0x18>)
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	6a1b      	ldr	r3, [r3, #32]
 8016610:	2b00      	cmp	r3, #0
 8016612:	bf08      	it	eq
 8016614:	4613      	moveq	r3, r2
 8016616:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801661a:	4770      	bx	lr
 801661c:	2000000c 	.word	0x2000000c
 8016620:	20000070 	.word	0x20000070

08016624 <__localeconv_l>:
 8016624:	30f0      	adds	r0, #240	; 0xf0
 8016626:	4770      	bx	lr

08016628 <_localeconv_r>:
 8016628:	4b04      	ldr	r3, [pc, #16]	; (801663c <_localeconv_r+0x14>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	6a18      	ldr	r0, [r3, #32]
 801662e:	4b04      	ldr	r3, [pc, #16]	; (8016640 <_localeconv_r+0x18>)
 8016630:	2800      	cmp	r0, #0
 8016632:	bf08      	it	eq
 8016634:	4618      	moveq	r0, r3
 8016636:	30f0      	adds	r0, #240	; 0xf0
 8016638:	4770      	bx	lr
 801663a:	bf00      	nop
 801663c:	2000000c 	.word	0x2000000c
 8016640:	20000070 	.word	0x20000070

08016644 <_lseek_r>:
 8016644:	b538      	push	{r3, r4, r5, lr}
 8016646:	4c07      	ldr	r4, [pc, #28]	; (8016664 <_lseek_r+0x20>)
 8016648:	4605      	mov	r5, r0
 801664a:	4608      	mov	r0, r1
 801664c:	4611      	mov	r1, r2
 801664e:	2200      	movs	r2, #0
 8016650:	6022      	str	r2, [r4, #0]
 8016652:	461a      	mov	r2, r3
 8016654:	f7ef fc22 	bl	8005e9c <_lseek>
 8016658:	1c43      	adds	r3, r0, #1
 801665a:	d102      	bne.n	8016662 <_lseek_r+0x1e>
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	b103      	cbz	r3, 8016662 <_lseek_r+0x1e>
 8016660:	602b      	str	r3, [r5, #0]
 8016662:	bd38      	pop	{r3, r4, r5, pc}
 8016664:	20037fa4 	.word	0x20037fa4

08016668 <__swhatbuf_r>:
 8016668:	b570      	push	{r4, r5, r6, lr}
 801666a:	460e      	mov	r6, r1
 801666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016670:	2900      	cmp	r1, #0
 8016672:	b096      	sub	sp, #88	; 0x58
 8016674:	4614      	mov	r4, r2
 8016676:	461d      	mov	r5, r3
 8016678:	da07      	bge.n	801668a <__swhatbuf_r+0x22>
 801667a:	2300      	movs	r3, #0
 801667c:	602b      	str	r3, [r5, #0]
 801667e:	89b3      	ldrh	r3, [r6, #12]
 8016680:	061a      	lsls	r2, r3, #24
 8016682:	d410      	bmi.n	80166a6 <__swhatbuf_r+0x3e>
 8016684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016688:	e00e      	b.n	80166a8 <__swhatbuf_r+0x40>
 801668a:	466a      	mov	r2, sp
 801668c:	f001 fc24 	bl	8017ed8 <_fstat_r>
 8016690:	2800      	cmp	r0, #0
 8016692:	dbf2      	blt.n	801667a <__swhatbuf_r+0x12>
 8016694:	9a01      	ldr	r2, [sp, #4]
 8016696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801669a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801669e:	425a      	negs	r2, r3
 80166a0:	415a      	adcs	r2, r3
 80166a2:	602a      	str	r2, [r5, #0]
 80166a4:	e7ee      	b.n	8016684 <__swhatbuf_r+0x1c>
 80166a6:	2340      	movs	r3, #64	; 0x40
 80166a8:	2000      	movs	r0, #0
 80166aa:	6023      	str	r3, [r4, #0]
 80166ac:	b016      	add	sp, #88	; 0x58
 80166ae:	bd70      	pop	{r4, r5, r6, pc}

080166b0 <__smakebuf_r>:
 80166b0:	898b      	ldrh	r3, [r1, #12]
 80166b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166b4:	079d      	lsls	r5, r3, #30
 80166b6:	4606      	mov	r6, r0
 80166b8:	460c      	mov	r4, r1
 80166ba:	d507      	bpl.n	80166cc <__smakebuf_r+0x1c>
 80166bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	6123      	str	r3, [r4, #16]
 80166c4:	2301      	movs	r3, #1
 80166c6:	6163      	str	r3, [r4, #20]
 80166c8:	b002      	add	sp, #8
 80166ca:	bd70      	pop	{r4, r5, r6, pc}
 80166cc:	ab01      	add	r3, sp, #4
 80166ce:	466a      	mov	r2, sp
 80166d0:	f7ff ffca 	bl	8016668 <__swhatbuf_r>
 80166d4:	9900      	ldr	r1, [sp, #0]
 80166d6:	4605      	mov	r5, r0
 80166d8:	4630      	mov	r0, r6
 80166da:	f000 fc9f 	bl	801701c <_malloc_r>
 80166de:	b948      	cbnz	r0, 80166f4 <__smakebuf_r+0x44>
 80166e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80166e4:	059a      	lsls	r2, r3, #22
 80166e6:	d4ef      	bmi.n	80166c8 <__smakebuf_r+0x18>
 80166e8:	f023 0303 	bic.w	r3, r3, #3
 80166ec:	f043 0302 	orr.w	r3, r3, #2
 80166f0:	81a3      	strh	r3, [r4, #12]
 80166f2:	e7e3      	b.n	80166bc <__smakebuf_r+0xc>
 80166f4:	4b0d      	ldr	r3, [pc, #52]	; (801672c <__smakebuf_r+0x7c>)
 80166f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80166f8:	89a3      	ldrh	r3, [r4, #12]
 80166fa:	6020      	str	r0, [r4, #0]
 80166fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016700:	81a3      	strh	r3, [r4, #12]
 8016702:	9b00      	ldr	r3, [sp, #0]
 8016704:	6163      	str	r3, [r4, #20]
 8016706:	9b01      	ldr	r3, [sp, #4]
 8016708:	6120      	str	r0, [r4, #16]
 801670a:	b15b      	cbz	r3, 8016724 <__smakebuf_r+0x74>
 801670c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016710:	4630      	mov	r0, r6
 8016712:	f001 fbf3 	bl	8017efc <_isatty_r>
 8016716:	b128      	cbz	r0, 8016724 <__smakebuf_r+0x74>
 8016718:	89a3      	ldrh	r3, [r4, #12]
 801671a:	f023 0303 	bic.w	r3, r3, #3
 801671e:	f043 0301 	orr.w	r3, r3, #1
 8016722:	81a3      	strh	r3, [r4, #12]
 8016724:	89a3      	ldrh	r3, [r4, #12]
 8016726:	431d      	orrs	r5, r3
 8016728:	81a5      	strh	r5, [r4, #12]
 801672a:	e7cd      	b.n	80166c8 <__smakebuf_r+0x18>
 801672c:	08015e69 	.word	0x08015e69

08016730 <malloc>:
 8016730:	4b02      	ldr	r3, [pc, #8]	; (801673c <malloc+0xc>)
 8016732:	4601      	mov	r1, r0
 8016734:	6818      	ldr	r0, [r3, #0]
 8016736:	f000 bc71 	b.w	801701c <_malloc_r>
 801673a:	bf00      	nop
 801673c:	2000000c 	.word	0x2000000c

08016740 <__ascii_mbtowc>:
 8016740:	b082      	sub	sp, #8
 8016742:	b901      	cbnz	r1, 8016746 <__ascii_mbtowc+0x6>
 8016744:	a901      	add	r1, sp, #4
 8016746:	b142      	cbz	r2, 801675a <__ascii_mbtowc+0x1a>
 8016748:	b14b      	cbz	r3, 801675e <__ascii_mbtowc+0x1e>
 801674a:	7813      	ldrb	r3, [r2, #0]
 801674c:	600b      	str	r3, [r1, #0]
 801674e:	7812      	ldrb	r2, [r2, #0]
 8016750:	1c10      	adds	r0, r2, #0
 8016752:	bf18      	it	ne
 8016754:	2001      	movne	r0, #1
 8016756:	b002      	add	sp, #8
 8016758:	4770      	bx	lr
 801675a:	4610      	mov	r0, r2
 801675c:	e7fb      	b.n	8016756 <__ascii_mbtowc+0x16>
 801675e:	f06f 0001 	mvn.w	r0, #1
 8016762:	e7f8      	b.n	8016756 <__ascii_mbtowc+0x16>

08016764 <_Balloc>:
 8016764:	b570      	push	{r4, r5, r6, lr}
 8016766:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016768:	4604      	mov	r4, r0
 801676a:	460e      	mov	r6, r1
 801676c:	b93d      	cbnz	r5, 801677e <_Balloc+0x1a>
 801676e:	2010      	movs	r0, #16
 8016770:	f7ff ffde 	bl	8016730 <malloc>
 8016774:	6260      	str	r0, [r4, #36]	; 0x24
 8016776:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801677a:	6005      	str	r5, [r0, #0]
 801677c:	60c5      	str	r5, [r0, #12]
 801677e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016780:	68eb      	ldr	r3, [r5, #12]
 8016782:	b183      	cbz	r3, 80167a6 <_Balloc+0x42>
 8016784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016786:	68db      	ldr	r3, [r3, #12]
 8016788:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801678c:	b9b8      	cbnz	r0, 80167be <_Balloc+0x5a>
 801678e:	2101      	movs	r1, #1
 8016790:	fa01 f506 	lsl.w	r5, r1, r6
 8016794:	1d6a      	adds	r2, r5, #5
 8016796:	0092      	lsls	r2, r2, #2
 8016798:	4620      	mov	r0, r4
 801679a:	f000 fbe2 	bl	8016f62 <_calloc_r>
 801679e:	b160      	cbz	r0, 80167ba <_Balloc+0x56>
 80167a0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80167a4:	e00e      	b.n	80167c4 <_Balloc+0x60>
 80167a6:	2221      	movs	r2, #33	; 0x21
 80167a8:	2104      	movs	r1, #4
 80167aa:	4620      	mov	r0, r4
 80167ac:	f000 fbd9 	bl	8016f62 <_calloc_r>
 80167b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80167b2:	60e8      	str	r0, [r5, #12]
 80167b4:	68db      	ldr	r3, [r3, #12]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1e4      	bne.n	8016784 <_Balloc+0x20>
 80167ba:	2000      	movs	r0, #0
 80167bc:	bd70      	pop	{r4, r5, r6, pc}
 80167be:	6802      	ldr	r2, [r0, #0]
 80167c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80167c4:	2300      	movs	r3, #0
 80167c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80167ca:	e7f7      	b.n	80167bc <_Balloc+0x58>

080167cc <_Bfree>:
 80167cc:	b570      	push	{r4, r5, r6, lr}
 80167ce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80167d0:	4606      	mov	r6, r0
 80167d2:	460d      	mov	r5, r1
 80167d4:	b93c      	cbnz	r4, 80167e6 <_Bfree+0x1a>
 80167d6:	2010      	movs	r0, #16
 80167d8:	f7ff ffaa 	bl	8016730 <malloc>
 80167dc:	6270      	str	r0, [r6, #36]	; 0x24
 80167de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80167e2:	6004      	str	r4, [r0, #0]
 80167e4:	60c4      	str	r4, [r0, #12]
 80167e6:	b13d      	cbz	r5, 80167f8 <_Bfree+0x2c>
 80167e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80167ea:	686a      	ldr	r2, [r5, #4]
 80167ec:	68db      	ldr	r3, [r3, #12]
 80167ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80167f2:	6029      	str	r1, [r5, #0]
 80167f4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80167f8:	bd70      	pop	{r4, r5, r6, pc}

080167fa <__multadd>:
 80167fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fe:	690d      	ldr	r5, [r1, #16]
 8016800:	461f      	mov	r7, r3
 8016802:	4606      	mov	r6, r0
 8016804:	460c      	mov	r4, r1
 8016806:	f101 0c14 	add.w	ip, r1, #20
 801680a:	2300      	movs	r3, #0
 801680c:	f8dc 0000 	ldr.w	r0, [ip]
 8016810:	b281      	uxth	r1, r0
 8016812:	fb02 7101 	mla	r1, r2, r1, r7
 8016816:	0c0f      	lsrs	r7, r1, #16
 8016818:	0c00      	lsrs	r0, r0, #16
 801681a:	fb02 7000 	mla	r0, r2, r0, r7
 801681e:	b289      	uxth	r1, r1
 8016820:	3301      	adds	r3, #1
 8016822:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016826:	429d      	cmp	r5, r3
 8016828:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801682c:	f84c 1b04 	str.w	r1, [ip], #4
 8016830:	dcec      	bgt.n	801680c <__multadd+0x12>
 8016832:	b1d7      	cbz	r7, 801686a <__multadd+0x70>
 8016834:	68a3      	ldr	r3, [r4, #8]
 8016836:	42ab      	cmp	r3, r5
 8016838:	dc12      	bgt.n	8016860 <__multadd+0x66>
 801683a:	6861      	ldr	r1, [r4, #4]
 801683c:	4630      	mov	r0, r6
 801683e:	3101      	adds	r1, #1
 8016840:	f7ff ff90 	bl	8016764 <_Balloc>
 8016844:	6922      	ldr	r2, [r4, #16]
 8016846:	3202      	adds	r2, #2
 8016848:	f104 010c 	add.w	r1, r4, #12
 801684c:	4680      	mov	r8, r0
 801684e:	0092      	lsls	r2, r2, #2
 8016850:	300c      	adds	r0, #12
 8016852:	f7fc fc8d 	bl	8013170 <memcpy>
 8016856:	4621      	mov	r1, r4
 8016858:	4630      	mov	r0, r6
 801685a:	f7ff ffb7 	bl	80167cc <_Bfree>
 801685e:	4644      	mov	r4, r8
 8016860:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016864:	3501      	adds	r5, #1
 8016866:	615f      	str	r7, [r3, #20]
 8016868:	6125      	str	r5, [r4, #16]
 801686a:	4620      	mov	r0, r4
 801686c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016870 <__s2b>:
 8016870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016874:	460c      	mov	r4, r1
 8016876:	4615      	mov	r5, r2
 8016878:	461f      	mov	r7, r3
 801687a:	2209      	movs	r2, #9
 801687c:	3308      	adds	r3, #8
 801687e:	4606      	mov	r6, r0
 8016880:	fb93 f3f2 	sdiv	r3, r3, r2
 8016884:	2100      	movs	r1, #0
 8016886:	2201      	movs	r2, #1
 8016888:	429a      	cmp	r2, r3
 801688a:	db20      	blt.n	80168ce <__s2b+0x5e>
 801688c:	4630      	mov	r0, r6
 801688e:	f7ff ff69 	bl	8016764 <_Balloc>
 8016892:	9b08      	ldr	r3, [sp, #32]
 8016894:	6143      	str	r3, [r0, #20]
 8016896:	2d09      	cmp	r5, #9
 8016898:	f04f 0301 	mov.w	r3, #1
 801689c:	6103      	str	r3, [r0, #16]
 801689e:	dd19      	ble.n	80168d4 <__s2b+0x64>
 80168a0:	f104 0809 	add.w	r8, r4, #9
 80168a4:	46c1      	mov	r9, r8
 80168a6:	442c      	add	r4, r5
 80168a8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80168ac:	4601      	mov	r1, r0
 80168ae:	3b30      	subs	r3, #48	; 0x30
 80168b0:	220a      	movs	r2, #10
 80168b2:	4630      	mov	r0, r6
 80168b4:	f7ff ffa1 	bl	80167fa <__multadd>
 80168b8:	45a1      	cmp	r9, r4
 80168ba:	d1f5      	bne.n	80168a8 <__s2b+0x38>
 80168bc:	eb08 0405 	add.w	r4, r8, r5
 80168c0:	3c08      	subs	r4, #8
 80168c2:	1b2d      	subs	r5, r5, r4
 80168c4:	1963      	adds	r3, r4, r5
 80168c6:	42bb      	cmp	r3, r7
 80168c8:	db07      	blt.n	80168da <__s2b+0x6a>
 80168ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168ce:	0052      	lsls	r2, r2, #1
 80168d0:	3101      	adds	r1, #1
 80168d2:	e7d9      	b.n	8016888 <__s2b+0x18>
 80168d4:	340a      	adds	r4, #10
 80168d6:	2509      	movs	r5, #9
 80168d8:	e7f3      	b.n	80168c2 <__s2b+0x52>
 80168da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80168de:	4601      	mov	r1, r0
 80168e0:	3b30      	subs	r3, #48	; 0x30
 80168e2:	220a      	movs	r2, #10
 80168e4:	4630      	mov	r0, r6
 80168e6:	f7ff ff88 	bl	80167fa <__multadd>
 80168ea:	e7eb      	b.n	80168c4 <__s2b+0x54>

080168ec <__hi0bits>:
 80168ec:	0c02      	lsrs	r2, r0, #16
 80168ee:	0412      	lsls	r2, r2, #16
 80168f0:	4603      	mov	r3, r0
 80168f2:	b9b2      	cbnz	r2, 8016922 <__hi0bits+0x36>
 80168f4:	0403      	lsls	r3, r0, #16
 80168f6:	2010      	movs	r0, #16
 80168f8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80168fc:	bf04      	itt	eq
 80168fe:	021b      	lsleq	r3, r3, #8
 8016900:	3008      	addeq	r0, #8
 8016902:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016906:	bf04      	itt	eq
 8016908:	011b      	lsleq	r3, r3, #4
 801690a:	3004      	addeq	r0, #4
 801690c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016910:	bf04      	itt	eq
 8016912:	009b      	lsleq	r3, r3, #2
 8016914:	3002      	addeq	r0, #2
 8016916:	2b00      	cmp	r3, #0
 8016918:	db06      	blt.n	8016928 <__hi0bits+0x3c>
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	d503      	bpl.n	8016926 <__hi0bits+0x3a>
 801691e:	3001      	adds	r0, #1
 8016920:	4770      	bx	lr
 8016922:	2000      	movs	r0, #0
 8016924:	e7e8      	b.n	80168f8 <__hi0bits+0xc>
 8016926:	2020      	movs	r0, #32
 8016928:	4770      	bx	lr

0801692a <__lo0bits>:
 801692a:	6803      	ldr	r3, [r0, #0]
 801692c:	f013 0207 	ands.w	r2, r3, #7
 8016930:	4601      	mov	r1, r0
 8016932:	d00b      	beq.n	801694c <__lo0bits+0x22>
 8016934:	07da      	lsls	r2, r3, #31
 8016936:	d423      	bmi.n	8016980 <__lo0bits+0x56>
 8016938:	0798      	lsls	r0, r3, #30
 801693a:	bf49      	itett	mi
 801693c:	085b      	lsrmi	r3, r3, #1
 801693e:	089b      	lsrpl	r3, r3, #2
 8016940:	2001      	movmi	r0, #1
 8016942:	600b      	strmi	r3, [r1, #0]
 8016944:	bf5c      	itt	pl
 8016946:	600b      	strpl	r3, [r1, #0]
 8016948:	2002      	movpl	r0, #2
 801694a:	4770      	bx	lr
 801694c:	b298      	uxth	r0, r3
 801694e:	b9a8      	cbnz	r0, 801697c <__lo0bits+0x52>
 8016950:	0c1b      	lsrs	r3, r3, #16
 8016952:	2010      	movs	r0, #16
 8016954:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016958:	bf04      	itt	eq
 801695a:	0a1b      	lsreq	r3, r3, #8
 801695c:	3008      	addeq	r0, #8
 801695e:	071a      	lsls	r2, r3, #28
 8016960:	bf04      	itt	eq
 8016962:	091b      	lsreq	r3, r3, #4
 8016964:	3004      	addeq	r0, #4
 8016966:	079a      	lsls	r2, r3, #30
 8016968:	bf04      	itt	eq
 801696a:	089b      	lsreq	r3, r3, #2
 801696c:	3002      	addeq	r0, #2
 801696e:	07da      	lsls	r2, r3, #31
 8016970:	d402      	bmi.n	8016978 <__lo0bits+0x4e>
 8016972:	085b      	lsrs	r3, r3, #1
 8016974:	d006      	beq.n	8016984 <__lo0bits+0x5a>
 8016976:	3001      	adds	r0, #1
 8016978:	600b      	str	r3, [r1, #0]
 801697a:	4770      	bx	lr
 801697c:	4610      	mov	r0, r2
 801697e:	e7e9      	b.n	8016954 <__lo0bits+0x2a>
 8016980:	2000      	movs	r0, #0
 8016982:	4770      	bx	lr
 8016984:	2020      	movs	r0, #32
 8016986:	4770      	bx	lr

08016988 <__i2b>:
 8016988:	b510      	push	{r4, lr}
 801698a:	460c      	mov	r4, r1
 801698c:	2101      	movs	r1, #1
 801698e:	f7ff fee9 	bl	8016764 <_Balloc>
 8016992:	2201      	movs	r2, #1
 8016994:	6144      	str	r4, [r0, #20]
 8016996:	6102      	str	r2, [r0, #16]
 8016998:	bd10      	pop	{r4, pc}

0801699a <__multiply>:
 801699a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801699e:	4614      	mov	r4, r2
 80169a0:	690a      	ldr	r2, [r1, #16]
 80169a2:	6923      	ldr	r3, [r4, #16]
 80169a4:	429a      	cmp	r2, r3
 80169a6:	bfb8      	it	lt
 80169a8:	460b      	movlt	r3, r1
 80169aa:	4688      	mov	r8, r1
 80169ac:	bfbc      	itt	lt
 80169ae:	46a0      	movlt	r8, r4
 80169b0:	461c      	movlt	r4, r3
 80169b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80169ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80169be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169c2:	eb07 0609 	add.w	r6, r7, r9
 80169c6:	42b3      	cmp	r3, r6
 80169c8:	bfb8      	it	lt
 80169ca:	3101      	addlt	r1, #1
 80169cc:	f7ff feca 	bl	8016764 <_Balloc>
 80169d0:	f100 0514 	add.w	r5, r0, #20
 80169d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80169d8:	462b      	mov	r3, r5
 80169da:	2200      	movs	r2, #0
 80169dc:	4573      	cmp	r3, lr
 80169de:	d316      	bcc.n	8016a0e <__multiply+0x74>
 80169e0:	f104 0214 	add.w	r2, r4, #20
 80169e4:	f108 0114 	add.w	r1, r8, #20
 80169e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80169ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80169f0:	9300      	str	r3, [sp, #0]
 80169f2:	9b00      	ldr	r3, [sp, #0]
 80169f4:	9201      	str	r2, [sp, #4]
 80169f6:	4293      	cmp	r3, r2
 80169f8:	d80c      	bhi.n	8016a14 <__multiply+0x7a>
 80169fa:	2e00      	cmp	r6, #0
 80169fc:	dd03      	ble.n	8016a06 <__multiply+0x6c>
 80169fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d05d      	beq.n	8016ac2 <__multiply+0x128>
 8016a06:	6106      	str	r6, [r0, #16]
 8016a08:	b003      	add	sp, #12
 8016a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a0e:	f843 2b04 	str.w	r2, [r3], #4
 8016a12:	e7e3      	b.n	80169dc <__multiply+0x42>
 8016a14:	f8b2 b000 	ldrh.w	fp, [r2]
 8016a18:	f1bb 0f00 	cmp.w	fp, #0
 8016a1c:	d023      	beq.n	8016a66 <__multiply+0xcc>
 8016a1e:	4689      	mov	r9, r1
 8016a20:	46ac      	mov	ip, r5
 8016a22:	f04f 0800 	mov.w	r8, #0
 8016a26:	f859 4b04 	ldr.w	r4, [r9], #4
 8016a2a:	f8dc a000 	ldr.w	sl, [ip]
 8016a2e:	b2a3      	uxth	r3, r4
 8016a30:	fa1f fa8a 	uxth.w	sl, sl
 8016a34:	fb0b a303 	mla	r3, fp, r3, sl
 8016a38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016a3c:	f8dc 4000 	ldr.w	r4, [ip]
 8016a40:	4443      	add	r3, r8
 8016a42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a46:	fb0b 840a 	mla	r4, fp, sl, r8
 8016a4a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016a4e:	46e2      	mov	sl, ip
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a56:	454f      	cmp	r7, r9
 8016a58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016a5c:	f84a 3b04 	str.w	r3, [sl], #4
 8016a60:	d82b      	bhi.n	8016aba <__multiply+0x120>
 8016a62:	f8cc 8004 	str.w	r8, [ip, #4]
 8016a66:	9b01      	ldr	r3, [sp, #4]
 8016a68:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016a6c:	3204      	adds	r2, #4
 8016a6e:	f1ba 0f00 	cmp.w	sl, #0
 8016a72:	d020      	beq.n	8016ab6 <__multiply+0x11c>
 8016a74:	682b      	ldr	r3, [r5, #0]
 8016a76:	4689      	mov	r9, r1
 8016a78:	46a8      	mov	r8, r5
 8016a7a:	f04f 0b00 	mov.w	fp, #0
 8016a7e:	f8b9 c000 	ldrh.w	ip, [r9]
 8016a82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016a86:	fb0a 440c 	mla	r4, sl, ip, r4
 8016a8a:	445c      	add	r4, fp
 8016a8c:	46c4      	mov	ip, r8
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016a94:	f84c 3b04 	str.w	r3, [ip], #4
 8016a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8016aa0:	0c1b      	lsrs	r3, r3, #16
 8016aa2:	fb0a b303 	mla	r3, sl, r3, fp
 8016aa6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016aaa:	454f      	cmp	r7, r9
 8016aac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8016ab0:	d805      	bhi.n	8016abe <__multiply+0x124>
 8016ab2:	f8c8 3004 	str.w	r3, [r8, #4]
 8016ab6:	3504      	adds	r5, #4
 8016ab8:	e79b      	b.n	80169f2 <__multiply+0x58>
 8016aba:	46d4      	mov	ip, sl
 8016abc:	e7b3      	b.n	8016a26 <__multiply+0x8c>
 8016abe:	46e0      	mov	r8, ip
 8016ac0:	e7dd      	b.n	8016a7e <__multiply+0xe4>
 8016ac2:	3e01      	subs	r6, #1
 8016ac4:	e799      	b.n	80169fa <__multiply+0x60>
	...

08016ac8 <__pow5mult>:
 8016ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016acc:	4615      	mov	r5, r2
 8016ace:	f012 0203 	ands.w	r2, r2, #3
 8016ad2:	4606      	mov	r6, r0
 8016ad4:	460f      	mov	r7, r1
 8016ad6:	d007      	beq.n	8016ae8 <__pow5mult+0x20>
 8016ad8:	3a01      	subs	r2, #1
 8016ada:	4c21      	ldr	r4, [pc, #132]	; (8016b60 <__pow5mult+0x98>)
 8016adc:	2300      	movs	r3, #0
 8016ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016ae2:	f7ff fe8a 	bl	80167fa <__multadd>
 8016ae6:	4607      	mov	r7, r0
 8016ae8:	10ad      	asrs	r5, r5, #2
 8016aea:	d035      	beq.n	8016b58 <__pow5mult+0x90>
 8016aec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016aee:	b93c      	cbnz	r4, 8016b00 <__pow5mult+0x38>
 8016af0:	2010      	movs	r0, #16
 8016af2:	f7ff fe1d 	bl	8016730 <malloc>
 8016af6:	6270      	str	r0, [r6, #36]	; 0x24
 8016af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016afc:	6004      	str	r4, [r0, #0]
 8016afe:	60c4      	str	r4, [r0, #12]
 8016b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016b08:	b94c      	cbnz	r4, 8016b1e <__pow5mult+0x56>
 8016b0a:	f240 2171 	movw	r1, #625	; 0x271
 8016b0e:	4630      	mov	r0, r6
 8016b10:	f7ff ff3a 	bl	8016988 <__i2b>
 8016b14:	2300      	movs	r3, #0
 8016b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	6003      	str	r3, [r0, #0]
 8016b1e:	f04f 0800 	mov.w	r8, #0
 8016b22:	07eb      	lsls	r3, r5, #31
 8016b24:	d50a      	bpl.n	8016b3c <__pow5mult+0x74>
 8016b26:	4639      	mov	r1, r7
 8016b28:	4622      	mov	r2, r4
 8016b2a:	4630      	mov	r0, r6
 8016b2c:	f7ff ff35 	bl	801699a <__multiply>
 8016b30:	4639      	mov	r1, r7
 8016b32:	4681      	mov	r9, r0
 8016b34:	4630      	mov	r0, r6
 8016b36:	f7ff fe49 	bl	80167cc <_Bfree>
 8016b3a:	464f      	mov	r7, r9
 8016b3c:	106d      	asrs	r5, r5, #1
 8016b3e:	d00b      	beq.n	8016b58 <__pow5mult+0x90>
 8016b40:	6820      	ldr	r0, [r4, #0]
 8016b42:	b938      	cbnz	r0, 8016b54 <__pow5mult+0x8c>
 8016b44:	4622      	mov	r2, r4
 8016b46:	4621      	mov	r1, r4
 8016b48:	4630      	mov	r0, r6
 8016b4a:	f7ff ff26 	bl	801699a <__multiply>
 8016b4e:	6020      	str	r0, [r4, #0]
 8016b50:	f8c0 8000 	str.w	r8, [r0]
 8016b54:	4604      	mov	r4, r0
 8016b56:	e7e4      	b.n	8016b22 <__pow5mult+0x5a>
 8016b58:	4638      	mov	r0, r7
 8016b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b5e:	bf00      	nop
 8016b60:	08018998 	.word	0x08018998

08016b64 <__lshift>:
 8016b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016b68:	460c      	mov	r4, r1
 8016b6a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016b6e:	6923      	ldr	r3, [r4, #16]
 8016b70:	6849      	ldr	r1, [r1, #4]
 8016b72:	eb0a 0903 	add.w	r9, sl, r3
 8016b76:	68a3      	ldr	r3, [r4, #8]
 8016b78:	4607      	mov	r7, r0
 8016b7a:	4616      	mov	r6, r2
 8016b7c:	f109 0501 	add.w	r5, r9, #1
 8016b80:	42ab      	cmp	r3, r5
 8016b82:	db32      	blt.n	8016bea <__lshift+0x86>
 8016b84:	4638      	mov	r0, r7
 8016b86:	f7ff fded 	bl	8016764 <_Balloc>
 8016b8a:	2300      	movs	r3, #0
 8016b8c:	4680      	mov	r8, r0
 8016b8e:	f100 0114 	add.w	r1, r0, #20
 8016b92:	461a      	mov	r2, r3
 8016b94:	4553      	cmp	r3, sl
 8016b96:	db2b      	blt.n	8016bf0 <__lshift+0x8c>
 8016b98:	6920      	ldr	r0, [r4, #16]
 8016b9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016b9e:	f104 0314 	add.w	r3, r4, #20
 8016ba2:	f016 021f 	ands.w	r2, r6, #31
 8016ba6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016baa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016bae:	d025      	beq.n	8016bfc <__lshift+0x98>
 8016bb0:	f1c2 0e20 	rsb	lr, r2, #32
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	681e      	ldr	r6, [r3, #0]
 8016bb8:	468a      	mov	sl, r1
 8016bba:	4096      	lsls	r6, r2
 8016bbc:	4330      	orrs	r0, r6
 8016bbe:	f84a 0b04 	str.w	r0, [sl], #4
 8016bc2:	f853 0b04 	ldr.w	r0, [r3], #4
 8016bc6:	459c      	cmp	ip, r3
 8016bc8:	fa20 f00e 	lsr.w	r0, r0, lr
 8016bcc:	d814      	bhi.n	8016bf8 <__lshift+0x94>
 8016bce:	6048      	str	r0, [r1, #4]
 8016bd0:	b108      	cbz	r0, 8016bd6 <__lshift+0x72>
 8016bd2:	f109 0502 	add.w	r5, r9, #2
 8016bd6:	3d01      	subs	r5, #1
 8016bd8:	4638      	mov	r0, r7
 8016bda:	f8c8 5010 	str.w	r5, [r8, #16]
 8016bde:	4621      	mov	r1, r4
 8016be0:	f7ff fdf4 	bl	80167cc <_Bfree>
 8016be4:	4640      	mov	r0, r8
 8016be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bea:	3101      	adds	r1, #1
 8016bec:	005b      	lsls	r3, r3, #1
 8016bee:	e7c7      	b.n	8016b80 <__lshift+0x1c>
 8016bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016bf4:	3301      	adds	r3, #1
 8016bf6:	e7cd      	b.n	8016b94 <__lshift+0x30>
 8016bf8:	4651      	mov	r1, sl
 8016bfa:	e7dc      	b.n	8016bb6 <__lshift+0x52>
 8016bfc:	3904      	subs	r1, #4
 8016bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c02:	f841 2f04 	str.w	r2, [r1, #4]!
 8016c06:	459c      	cmp	ip, r3
 8016c08:	d8f9      	bhi.n	8016bfe <__lshift+0x9a>
 8016c0a:	e7e4      	b.n	8016bd6 <__lshift+0x72>

08016c0c <__mcmp>:
 8016c0c:	6903      	ldr	r3, [r0, #16]
 8016c0e:	690a      	ldr	r2, [r1, #16]
 8016c10:	1a9b      	subs	r3, r3, r2
 8016c12:	b530      	push	{r4, r5, lr}
 8016c14:	d10c      	bne.n	8016c30 <__mcmp+0x24>
 8016c16:	0092      	lsls	r2, r2, #2
 8016c18:	3014      	adds	r0, #20
 8016c1a:	3114      	adds	r1, #20
 8016c1c:	1884      	adds	r4, r0, r2
 8016c1e:	4411      	add	r1, r2
 8016c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016c28:	4295      	cmp	r5, r2
 8016c2a:	d003      	beq.n	8016c34 <__mcmp+0x28>
 8016c2c:	d305      	bcc.n	8016c3a <__mcmp+0x2e>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	4618      	mov	r0, r3
 8016c32:	bd30      	pop	{r4, r5, pc}
 8016c34:	42a0      	cmp	r0, r4
 8016c36:	d3f3      	bcc.n	8016c20 <__mcmp+0x14>
 8016c38:	e7fa      	b.n	8016c30 <__mcmp+0x24>
 8016c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3e:	e7f7      	b.n	8016c30 <__mcmp+0x24>

08016c40 <__mdiff>:
 8016c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c44:	460d      	mov	r5, r1
 8016c46:	4607      	mov	r7, r0
 8016c48:	4611      	mov	r1, r2
 8016c4a:	4628      	mov	r0, r5
 8016c4c:	4614      	mov	r4, r2
 8016c4e:	f7ff ffdd 	bl	8016c0c <__mcmp>
 8016c52:	1e06      	subs	r6, r0, #0
 8016c54:	d108      	bne.n	8016c68 <__mdiff+0x28>
 8016c56:	4631      	mov	r1, r6
 8016c58:	4638      	mov	r0, r7
 8016c5a:	f7ff fd83 	bl	8016764 <_Balloc>
 8016c5e:	2301      	movs	r3, #1
 8016c60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c68:	bfa4      	itt	ge
 8016c6a:	4623      	movge	r3, r4
 8016c6c:	462c      	movge	r4, r5
 8016c6e:	4638      	mov	r0, r7
 8016c70:	6861      	ldr	r1, [r4, #4]
 8016c72:	bfa6      	itte	ge
 8016c74:	461d      	movge	r5, r3
 8016c76:	2600      	movge	r6, #0
 8016c78:	2601      	movlt	r6, #1
 8016c7a:	f7ff fd73 	bl	8016764 <_Balloc>
 8016c7e:	692b      	ldr	r3, [r5, #16]
 8016c80:	60c6      	str	r6, [r0, #12]
 8016c82:	6926      	ldr	r6, [r4, #16]
 8016c84:	f105 0914 	add.w	r9, r5, #20
 8016c88:	f104 0214 	add.w	r2, r4, #20
 8016c8c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016c90:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016c94:	f100 0514 	add.w	r5, r0, #20
 8016c98:	f04f 0e00 	mov.w	lr, #0
 8016c9c:	f852 ab04 	ldr.w	sl, [r2], #4
 8016ca0:	f859 4b04 	ldr.w	r4, [r9], #4
 8016ca4:	fa1e f18a 	uxtah	r1, lr, sl
 8016ca8:	b2a3      	uxth	r3, r4
 8016caa:	1ac9      	subs	r1, r1, r3
 8016cac:	0c23      	lsrs	r3, r4, #16
 8016cae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016cb2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016cb6:	b289      	uxth	r1, r1
 8016cb8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016cbc:	45c8      	cmp	r8, r9
 8016cbe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016cc2:	4694      	mov	ip, r2
 8016cc4:	f845 3b04 	str.w	r3, [r5], #4
 8016cc8:	d8e8      	bhi.n	8016c9c <__mdiff+0x5c>
 8016cca:	45bc      	cmp	ip, r7
 8016ccc:	d304      	bcc.n	8016cd8 <__mdiff+0x98>
 8016cce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016cd2:	b183      	cbz	r3, 8016cf6 <__mdiff+0xb6>
 8016cd4:	6106      	str	r6, [r0, #16]
 8016cd6:	e7c5      	b.n	8016c64 <__mdiff+0x24>
 8016cd8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016cdc:	fa1e f381 	uxtah	r3, lr, r1
 8016ce0:	141a      	asrs	r2, r3, #16
 8016ce2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016ce6:	b29b      	uxth	r3, r3
 8016ce8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016cf0:	f845 3b04 	str.w	r3, [r5], #4
 8016cf4:	e7e9      	b.n	8016cca <__mdiff+0x8a>
 8016cf6:	3e01      	subs	r6, #1
 8016cf8:	e7e9      	b.n	8016cce <__mdiff+0x8e>
	...

08016cfc <__ulp>:
 8016cfc:	4b12      	ldr	r3, [pc, #72]	; (8016d48 <__ulp+0x4c>)
 8016cfe:	ee10 2a90 	vmov	r2, s1
 8016d02:	401a      	ands	r2, r3
 8016d04:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	dd04      	ble.n	8016d16 <__ulp+0x1a>
 8016d0c:	2000      	movs	r0, #0
 8016d0e:	4619      	mov	r1, r3
 8016d10:	ec41 0b10 	vmov	d0, r0, r1
 8016d14:	4770      	bx	lr
 8016d16:	425b      	negs	r3, r3
 8016d18:	151b      	asrs	r3, r3, #20
 8016d1a:	2b13      	cmp	r3, #19
 8016d1c:	f04f 0000 	mov.w	r0, #0
 8016d20:	f04f 0100 	mov.w	r1, #0
 8016d24:	dc04      	bgt.n	8016d30 <__ulp+0x34>
 8016d26:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016d2a:	fa42 f103 	asr.w	r1, r2, r3
 8016d2e:	e7ef      	b.n	8016d10 <__ulp+0x14>
 8016d30:	3b14      	subs	r3, #20
 8016d32:	2b1e      	cmp	r3, #30
 8016d34:	f04f 0201 	mov.w	r2, #1
 8016d38:	bfda      	itte	le
 8016d3a:	f1c3 031f 	rsble	r3, r3, #31
 8016d3e:	fa02 f303 	lslle.w	r3, r2, r3
 8016d42:	4613      	movgt	r3, r2
 8016d44:	4618      	mov	r0, r3
 8016d46:	e7e3      	b.n	8016d10 <__ulp+0x14>
 8016d48:	7ff00000 	.word	0x7ff00000

08016d4c <__b2d>:
 8016d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d4e:	6905      	ldr	r5, [r0, #16]
 8016d50:	f100 0714 	add.w	r7, r0, #20
 8016d54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016d58:	1f2e      	subs	r6, r5, #4
 8016d5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016d5e:	4620      	mov	r0, r4
 8016d60:	f7ff fdc4 	bl	80168ec <__hi0bits>
 8016d64:	f1c0 0320 	rsb	r3, r0, #32
 8016d68:	280a      	cmp	r0, #10
 8016d6a:	600b      	str	r3, [r1, #0]
 8016d6c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016de4 <__b2d+0x98>
 8016d70:	dc14      	bgt.n	8016d9c <__b2d+0x50>
 8016d72:	f1c0 0e0b 	rsb	lr, r0, #11
 8016d76:	fa24 f10e 	lsr.w	r1, r4, lr
 8016d7a:	42b7      	cmp	r7, r6
 8016d7c:	ea41 030c 	orr.w	r3, r1, ip
 8016d80:	bf34      	ite	cc
 8016d82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016d86:	2100      	movcs	r1, #0
 8016d88:	3015      	adds	r0, #21
 8016d8a:	fa04 f000 	lsl.w	r0, r4, r0
 8016d8e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016d92:	ea40 0201 	orr.w	r2, r0, r1
 8016d96:	ec43 2b10 	vmov	d0, r2, r3
 8016d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d9c:	42b7      	cmp	r7, r6
 8016d9e:	bf3a      	itte	cc
 8016da0:	f1a5 0608 	subcc.w	r6, r5, #8
 8016da4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016da8:	2100      	movcs	r1, #0
 8016daa:	380b      	subs	r0, #11
 8016dac:	d015      	beq.n	8016dda <__b2d+0x8e>
 8016dae:	4084      	lsls	r4, r0
 8016db0:	f1c0 0520 	rsb	r5, r0, #32
 8016db4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016db8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016dbc:	42be      	cmp	r6, r7
 8016dbe:	fa21 fc05 	lsr.w	ip, r1, r5
 8016dc2:	ea44 030c 	orr.w	r3, r4, ip
 8016dc6:	bf8c      	ite	hi
 8016dc8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016dcc:	2400      	movls	r4, #0
 8016dce:	fa01 f000 	lsl.w	r0, r1, r0
 8016dd2:	40ec      	lsrs	r4, r5
 8016dd4:	ea40 0204 	orr.w	r2, r0, r4
 8016dd8:	e7dd      	b.n	8016d96 <__b2d+0x4a>
 8016dda:	ea44 030c 	orr.w	r3, r4, ip
 8016dde:	460a      	mov	r2, r1
 8016de0:	e7d9      	b.n	8016d96 <__b2d+0x4a>
 8016de2:	bf00      	nop
 8016de4:	3ff00000 	.word	0x3ff00000

08016de8 <__d2b>:
 8016de8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016dec:	460e      	mov	r6, r1
 8016dee:	2101      	movs	r1, #1
 8016df0:	ec59 8b10 	vmov	r8, r9, d0
 8016df4:	4615      	mov	r5, r2
 8016df6:	f7ff fcb5 	bl	8016764 <_Balloc>
 8016dfa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016dfe:	4607      	mov	r7, r0
 8016e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016e04:	bb34      	cbnz	r4, 8016e54 <__d2b+0x6c>
 8016e06:	9301      	str	r3, [sp, #4]
 8016e08:	f1b8 0300 	subs.w	r3, r8, #0
 8016e0c:	d027      	beq.n	8016e5e <__d2b+0x76>
 8016e0e:	a802      	add	r0, sp, #8
 8016e10:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016e14:	f7ff fd89 	bl	801692a <__lo0bits>
 8016e18:	9900      	ldr	r1, [sp, #0]
 8016e1a:	b1f0      	cbz	r0, 8016e5a <__d2b+0x72>
 8016e1c:	9a01      	ldr	r2, [sp, #4]
 8016e1e:	f1c0 0320 	rsb	r3, r0, #32
 8016e22:	fa02 f303 	lsl.w	r3, r2, r3
 8016e26:	430b      	orrs	r3, r1
 8016e28:	40c2      	lsrs	r2, r0
 8016e2a:	617b      	str	r3, [r7, #20]
 8016e2c:	9201      	str	r2, [sp, #4]
 8016e2e:	9b01      	ldr	r3, [sp, #4]
 8016e30:	61bb      	str	r3, [r7, #24]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	bf14      	ite	ne
 8016e36:	2102      	movne	r1, #2
 8016e38:	2101      	moveq	r1, #1
 8016e3a:	6139      	str	r1, [r7, #16]
 8016e3c:	b1c4      	cbz	r4, 8016e70 <__d2b+0x88>
 8016e3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016e42:	4404      	add	r4, r0
 8016e44:	6034      	str	r4, [r6, #0]
 8016e46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016e4a:	6028      	str	r0, [r5, #0]
 8016e4c:	4638      	mov	r0, r7
 8016e4e:	b003      	add	sp, #12
 8016e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016e54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016e58:	e7d5      	b.n	8016e06 <__d2b+0x1e>
 8016e5a:	6179      	str	r1, [r7, #20]
 8016e5c:	e7e7      	b.n	8016e2e <__d2b+0x46>
 8016e5e:	a801      	add	r0, sp, #4
 8016e60:	f7ff fd63 	bl	801692a <__lo0bits>
 8016e64:	9b01      	ldr	r3, [sp, #4]
 8016e66:	617b      	str	r3, [r7, #20]
 8016e68:	2101      	movs	r1, #1
 8016e6a:	6139      	str	r1, [r7, #16]
 8016e6c:	3020      	adds	r0, #32
 8016e6e:	e7e5      	b.n	8016e3c <__d2b+0x54>
 8016e70:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016e74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016e78:	6030      	str	r0, [r6, #0]
 8016e7a:	6918      	ldr	r0, [r3, #16]
 8016e7c:	f7ff fd36 	bl	80168ec <__hi0bits>
 8016e80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016e84:	e7e1      	b.n	8016e4a <__d2b+0x62>

08016e86 <__ratio>:
 8016e86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e8a:	4688      	mov	r8, r1
 8016e8c:	4669      	mov	r1, sp
 8016e8e:	4681      	mov	r9, r0
 8016e90:	f7ff ff5c 	bl	8016d4c <__b2d>
 8016e94:	a901      	add	r1, sp, #4
 8016e96:	4640      	mov	r0, r8
 8016e98:	ec57 6b10 	vmov	r6, r7, d0
 8016e9c:	f7ff ff56 	bl	8016d4c <__b2d>
 8016ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016ea4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016ea8:	eba3 0c02 	sub.w	ip, r3, r2
 8016eac:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016eb0:	1a9b      	subs	r3, r3, r2
 8016eb2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016eb6:	ec5b ab10 	vmov	sl, fp, d0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	bfce      	itee	gt
 8016ebe:	463a      	movgt	r2, r7
 8016ec0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016ec4:	465a      	movle	r2, fp
 8016ec6:	4659      	mov	r1, fp
 8016ec8:	463d      	mov	r5, r7
 8016eca:	bfd4      	ite	le
 8016ecc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016ed0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016ed4:	4630      	mov	r0, r6
 8016ed6:	ee10 2a10 	vmov	r2, s0
 8016eda:	460b      	mov	r3, r1
 8016edc:	4629      	mov	r1, r5
 8016ede:	f7e9 fccd 	bl	800087c <__aeabi_ddiv>
 8016ee2:	ec41 0b10 	vmov	d0, r0, r1
 8016ee6:	b003      	add	sp, #12
 8016ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016eec <__copybits>:
 8016eec:	3901      	subs	r1, #1
 8016eee:	b510      	push	{r4, lr}
 8016ef0:	1149      	asrs	r1, r1, #5
 8016ef2:	6914      	ldr	r4, [r2, #16]
 8016ef4:	3101      	adds	r1, #1
 8016ef6:	f102 0314 	add.w	r3, r2, #20
 8016efa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016efe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016f02:	42a3      	cmp	r3, r4
 8016f04:	4602      	mov	r2, r0
 8016f06:	d303      	bcc.n	8016f10 <__copybits+0x24>
 8016f08:	2300      	movs	r3, #0
 8016f0a:	428a      	cmp	r2, r1
 8016f0c:	d305      	bcc.n	8016f1a <__copybits+0x2e>
 8016f0e:	bd10      	pop	{r4, pc}
 8016f10:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f14:	f840 2b04 	str.w	r2, [r0], #4
 8016f18:	e7f3      	b.n	8016f02 <__copybits+0x16>
 8016f1a:	f842 3b04 	str.w	r3, [r2], #4
 8016f1e:	e7f4      	b.n	8016f0a <__copybits+0x1e>

08016f20 <__any_on>:
 8016f20:	f100 0214 	add.w	r2, r0, #20
 8016f24:	6900      	ldr	r0, [r0, #16]
 8016f26:	114b      	asrs	r3, r1, #5
 8016f28:	4298      	cmp	r0, r3
 8016f2a:	b510      	push	{r4, lr}
 8016f2c:	db11      	blt.n	8016f52 <__any_on+0x32>
 8016f2e:	dd0a      	ble.n	8016f46 <__any_on+0x26>
 8016f30:	f011 011f 	ands.w	r1, r1, #31
 8016f34:	d007      	beq.n	8016f46 <__any_on+0x26>
 8016f36:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016f3a:	fa24 f001 	lsr.w	r0, r4, r1
 8016f3e:	fa00 f101 	lsl.w	r1, r0, r1
 8016f42:	428c      	cmp	r4, r1
 8016f44:	d10b      	bne.n	8016f5e <__any_on+0x3e>
 8016f46:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016f4a:	4293      	cmp	r3, r2
 8016f4c:	d803      	bhi.n	8016f56 <__any_on+0x36>
 8016f4e:	2000      	movs	r0, #0
 8016f50:	bd10      	pop	{r4, pc}
 8016f52:	4603      	mov	r3, r0
 8016f54:	e7f7      	b.n	8016f46 <__any_on+0x26>
 8016f56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016f5a:	2900      	cmp	r1, #0
 8016f5c:	d0f5      	beq.n	8016f4a <__any_on+0x2a>
 8016f5e:	2001      	movs	r0, #1
 8016f60:	e7f6      	b.n	8016f50 <__any_on+0x30>

08016f62 <_calloc_r>:
 8016f62:	b538      	push	{r3, r4, r5, lr}
 8016f64:	fb02 f401 	mul.w	r4, r2, r1
 8016f68:	4621      	mov	r1, r4
 8016f6a:	f000 f857 	bl	801701c <_malloc_r>
 8016f6e:	4605      	mov	r5, r0
 8016f70:	b118      	cbz	r0, 8016f7a <_calloc_r+0x18>
 8016f72:	4622      	mov	r2, r4
 8016f74:	2100      	movs	r1, #0
 8016f76:	f7fc f906 	bl	8013186 <memset>
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	bd38      	pop	{r3, r4, r5, pc}
	...

08016f80 <_free_r>:
 8016f80:	b538      	push	{r3, r4, r5, lr}
 8016f82:	4605      	mov	r5, r0
 8016f84:	2900      	cmp	r1, #0
 8016f86:	d045      	beq.n	8017014 <_free_r+0x94>
 8016f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f8c:	1f0c      	subs	r4, r1, #4
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	bfb8      	it	lt
 8016f92:	18e4      	addlt	r4, r4, r3
 8016f94:	f000 ffdb 	bl	8017f4e <__malloc_lock>
 8016f98:	4a1f      	ldr	r2, [pc, #124]	; (8017018 <_free_r+0x98>)
 8016f9a:	6813      	ldr	r3, [r2, #0]
 8016f9c:	4610      	mov	r0, r2
 8016f9e:	b933      	cbnz	r3, 8016fae <_free_r+0x2e>
 8016fa0:	6063      	str	r3, [r4, #4]
 8016fa2:	6014      	str	r4, [r2, #0]
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016faa:	f000 bfd1 	b.w	8017f50 <__malloc_unlock>
 8016fae:	42a3      	cmp	r3, r4
 8016fb0:	d90c      	bls.n	8016fcc <_free_r+0x4c>
 8016fb2:	6821      	ldr	r1, [r4, #0]
 8016fb4:	1862      	adds	r2, r4, r1
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	bf04      	itt	eq
 8016fba:	681a      	ldreq	r2, [r3, #0]
 8016fbc:	685b      	ldreq	r3, [r3, #4]
 8016fbe:	6063      	str	r3, [r4, #4]
 8016fc0:	bf04      	itt	eq
 8016fc2:	1852      	addeq	r2, r2, r1
 8016fc4:	6022      	streq	r2, [r4, #0]
 8016fc6:	6004      	str	r4, [r0, #0]
 8016fc8:	e7ec      	b.n	8016fa4 <_free_r+0x24>
 8016fca:	4613      	mov	r3, r2
 8016fcc:	685a      	ldr	r2, [r3, #4]
 8016fce:	b10a      	cbz	r2, 8016fd4 <_free_r+0x54>
 8016fd0:	42a2      	cmp	r2, r4
 8016fd2:	d9fa      	bls.n	8016fca <_free_r+0x4a>
 8016fd4:	6819      	ldr	r1, [r3, #0]
 8016fd6:	1858      	adds	r0, r3, r1
 8016fd8:	42a0      	cmp	r0, r4
 8016fda:	d10b      	bne.n	8016ff4 <_free_r+0x74>
 8016fdc:	6820      	ldr	r0, [r4, #0]
 8016fde:	4401      	add	r1, r0
 8016fe0:	1858      	adds	r0, r3, r1
 8016fe2:	4282      	cmp	r2, r0
 8016fe4:	6019      	str	r1, [r3, #0]
 8016fe6:	d1dd      	bne.n	8016fa4 <_free_r+0x24>
 8016fe8:	6810      	ldr	r0, [r2, #0]
 8016fea:	6852      	ldr	r2, [r2, #4]
 8016fec:	605a      	str	r2, [r3, #4]
 8016fee:	4401      	add	r1, r0
 8016ff0:	6019      	str	r1, [r3, #0]
 8016ff2:	e7d7      	b.n	8016fa4 <_free_r+0x24>
 8016ff4:	d902      	bls.n	8016ffc <_free_r+0x7c>
 8016ff6:	230c      	movs	r3, #12
 8016ff8:	602b      	str	r3, [r5, #0]
 8016ffa:	e7d3      	b.n	8016fa4 <_free_r+0x24>
 8016ffc:	6820      	ldr	r0, [r4, #0]
 8016ffe:	1821      	adds	r1, r4, r0
 8017000:	428a      	cmp	r2, r1
 8017002:	bf04      	itt	eq
 8017004:	6811      	ldreq	r1, [r2, #0]
 8017006:	6852      	ldreq	r2, [r2, #4]
 8017008:	6062      	str	r2, [r4, #4]
 801700a:	bf04      	itt	eq
 801700c:	1809      	addeq	r1, r1, r0
 801700e:	6021      	streq	r1, [r4, #0]
 8017010:	605c      	str	r4, [r3, #4]
 8017012:	e7c7      	b.n	8016fa4 <_free_r+0x24>
 8017014:	bd38      	pop	{r3, r4, r5, pc}
 8017016:	bf00      	nop
 8017018:	20033604 	.word	0x20033604

0801701c <_malloc_r>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	1ccd      	adds	r5, r1, #3
 8017020:	f025 0503 	bic.w	r5, r5, #3
 8017024:	3508      	adds	r5, #8
 8017026:	2d0c      	cmp	r5, #12
 8017028:	bf38      	it	cc
 801702a:	250c      	movcc	r5, #12
 801702c:	2d00      	cmp	r5, #0
 801702e:	4606      	mov	r6, r0
 8017030:	db01      	blt.n	8017036 <_malloc_r+0x1a>
 8017032:	42a9      	cmp	r1, r5
 8017034:	d903      	bls.n	801703e <_malloc_r+0x22>
 8017036:	230c      	movs	r3, #12
 8017038:	6033      	str	r3, [r6, #0]
 801703a:	2000      	movs	r0, #0
 801703c:	bd70      	pop	{r4, r5, r6, pc}
 801703e:	f000 ff86 	bl	8017f4e <__malloc_lock>
 8017042:	4a21      	ldr	r2, [pc, #132]	; (80170c8 <_malloc_r+0xac>)
 8017044:	6814      	ldr	r4, [r2, #0]
 8017046:	4621      	mov	r1, r4
 8017048:	b991      	cbnz	r1, 8017070 <_malloc_r+0x54>
 801704a:	4c20      	ldr	r4, [pc, #128]	; (80170cc <_malloc_r+0xb0>)
 801704c:	6823      	ldr	r3, [r4, #0]
 801704e:	b91b      	cbnz	r3, 8017058 <_malloc_r+0x3c>
 8017050:	4630      	mov	r0, r6
 8017052:	f000 fe19 	bl	8017c88 <_sbrk_r>
 8017056:	6020      	str	r0, [r4, #0]
 8017058:	4629      	mov	r1, r5
 801705a:	4630      	mov	r0, r6
 801705c:	f000 fe14 	bl	8017c88 <_sbrk_r>
 8017060:	1c43      	adds	r3, r0, #1
 8017062:	d124      	bne.n	80170ae <_malloc_r+0x92>
 8017064:	230c      	movs	r3, #12
 8017066:	6033      	str	r3, [r6, #0]
 8017068:	4630      	mov	r0, r6
 801706a:	f000 ff71 	bl	8017f50 <__malloc_unlock>
 801706e:	e7e4      	b.n	801703a <_malloc_r+0x1e>
 8017070:	680b      	ldr	r3, [r1, #0]
 8017072:	1b5b      	subs	r3, r3, r5
 8017074:	d418      	bmi.n	80170a8 <_malloc_r+0x8c>
 8017076:	2b0b      	cmp	r3, #11
 8017078:	d90f      	bls.n	801709a <_malloc_r+0x7e>
 801707a:	600b      	str	r3, [r1, #0]
 801707c:	50cd      	str	r5, [r1, r3]
 801707e:	18cc      	adds	r4, r1, r3
 8017080:	4630      	mov	r0, r6
 8017082:	f000 ff65 	bl	8017f50 <__malloc_unlock>
 8017086:	f104 000b 	add.w	r0, r4, #11
 801708a:	1d23      	adds	r3, r4, #4
 801708c:	f020 0007 	bic.w	r0, r0, #7
 8017090:	1ac3      	subs	r3, r0, r3
 8017092:	d0d3      	beq.n	801703c <_malloc_r+0x20>
 8017094:	425a      	negs	r2, r3
 8017096:	50e2      	str	r2, [r4, r3]
 8017098:	e7d0      	b.n	801703c <_malloc_r+0x20>
 801709a:	428c      	cmp	r4, r1
 801709c:	684b      	ldr	r3, [r1, #4]
 801709e:	bf16      	itet	ne
 80170a0:	6063      	strne	r3, [r4, #4]
 80170a2:	6013      	streq	r3, [r2, #0]
 80170a4:	460c      	movne	r4, r1
 80170a6:	e7eb      	b.n	8017080 <_malloc_r+0x64>
 80170a8:	460c      	mov	r4, r1
 80170aa:	6849      	ldr	r1, [r1, #4]
 80170ac:	e7cc      	b.n	8017048 <_malloc_r+0x2c>
 80170ae:	1cc4      	adds	r4, r0, #3
 80170b0:	f024 0403 	bic.w	r4, r4, #3
 80170b4:	42a0      	cmp	r0, r4
 80170b6:	d005      	beq.n	80170c4 <_malloc_r+0xa8>
 80170b8:	1a21      	subs	r1, r4, r0
 80170ba:	4630      	mov	r0, r6
 80170bc:	f000 fde4 	bl	8017c88 <_sbrk_r>
 80170c0:	3001      	adds	r0, #1
 80170c2:	d0cf      	beq.n	8017064 <_malloc_r+0x48>
 80170c4:	6025      	str	r5, [r4, #0]
 80170c6:	e7db      	b.n	8017080 <_malloc_r+0x64>
 80170c8:	20033604 	.word	0x20033604
 80170cc:	20033608 	.word	0x20033608

080170d0 <__ssputs_r>:
 80170d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170d4:	688e      	ldr	r6, [r1, #8]
 80170d6:	429e      	cmp	r6, r3
 80170d8:	4682      	mov	sl, r0
 80170da:	460c      	mov	r4, r1
 80170dc:	4690      	mov	r8, r2
 80170de:	4699      	mov	r9, r3
 80170e0:	d837      	bhi.n	8017152 <__ssputs_r+0x82>
 80170e2:	898a      	ldrh	r2, [r1, #12]
 80170e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80170e8:	d031      	beq.n	801714e <__ssputs_r+0x7e>
 80170ea:	6825      	ldr	r5, [r4, #0]
 80170ec:	6909      	ldr	r1, [r1, #16]
 80170ee:	1a6f      	subs	r7, r5, r1
 80170f0:	6965      	ldr	r5, [r4, #20]
 80170f2:	2302      	movs	r3, #2
 80170f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80170f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80170fc:	f109 0301 	add.w	r3, r9, #1
 8017100:	443b      	add	r3, r7
 8017102:	429d      	cmp	r5, r3
 8017104:	bf38      	it	cc
 8017106:	461d      	movcc	r5, r3
 8017108:	0553      	lsls	r3, r2, #21
 801710a:	d530      	bpl.n	801716e <__ssputs_r+0x9e>
 801710c:	4629      	mov	r1, r5
 801710e:	f7ff ff85 	bl	801701c <_malloc_r>
 8017112:	4606      	mov	r6, r0
 8017114:	b950      	cbnz	r0, 801712c <__ssputs_r+0x5c>
 8017116:	230c      	movs	r3, #12
 8017118:	f8ca 3000 	str.w	r3, [sl]
 801711c:	89a3      	ldrh	r3, [r4, #12]
 801711e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017122:	81a3      	strh	r3, [r4, #12]
 8017124:	f04f 30ff 	mov.w	r0, #4294967295
 8017128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801712c:	463a      	mov	r2, r7
 801712e:	6921      	ldr	r1, [r4, #16]
 8017130:	f7fc f81e 	bl	8013170 <memcpy>
 8017134:	89a3      	ldrh	r3, [r4, #12]
 8017136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801713a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801713e:	81a3      	strh	r3, [r4, #12]
 8017140:	6126      	str	r6, [r4, #16]
 8017142:	6165      	str	r5, [r4, #20]
 8017144:	443e      	add	r6, r7
 8017146:	1bed      	subs	r5, r5, r7
 8017148:	6026      	str	r6, [r4, #0]
 801714a:	60a5      	str	r5, [r4, #8]
 801714c:	464e      	mov	r6, r9
 801714e:	454e      	cmp	r6, r9
 8017150:	d900      	bls.n	8017154 <__ssputs_r+0x84>
 8017152:	464e      	mov	r6, r9
 8017154:	4632      	mov	r2, r6
 8017156:	4641      	mov	r1, r8
 8017158:	6820      	ldr	r0, [r4, #0]
 801715a:	f000 fedf 	bl	8017f1c <memmove>
 801715e:	68a3      	ldr	r3, [r4, #8]
 8017160:	1b9b      	subs	r3, r3, r6
 8017162:	60a3      	str	r3, [r4, #8]
 8017164:	6823      	ldr	r3, [r4, #0]
 8017166:	441e      	add	r6, r3
 8017168:	6026      	str	r6, [r4, #0]
 801716a:	2000      	movs	r0, #0
 801716c:	e7dc      	b.n	8017128 <__ssputs_r+0x58>
 801716e:	462a      	mov	r2, r5
 8017170:	f000 feef 	bl	8017f52 <_realloc_r>
 8017174:	4606      	mov	r6, r0
 8017176:	2800      	cmp	r0, #0
 8017178:	d1e2      	bne.n	8017140 <__ssputs_r+0x70>
 801717a:	6921      	ldr	r1, [r4, #16]
 801717c:	4650      	mov	r0, sl
 801717e:	f7ff feff 	bl	8016f80 <_free_r>
 8017182:	e7c8      	b.n	8017116 <__ssputs_r+0x46>

08017184 <_svfiprintf_r>:
 8017184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017188:	461d      	mov	r5, r3
 801718a:	898b      	ldrh	r3, [r1, #12]
 801718c:	061f      	lsls	r7, r3, #24
 801718e:	b09d      	sub	sp, #116	; 0x74
 8017190:	4680      	mov	r8, r0
 8017192:	460c      	mov	r4, r1
 8017194:	4616      	mov	r6, r2
 8017196:	d50f      	bpl.n	80171b8 <_svfiprintf_r+0x34>
 8017198:	690b      	ldr	r3, [r1, #16]
 801719a:	b96b      	cbnz	r3, 80171b8 <_svfiprintf_r+0x34>
 801719c:	2140      	movs	r1, #64	; 0x40
 801719e:	f7ff ff3d 	bl	801701c <_malloc_r>
 80171a2:	6020      	str	r0, [r4, #0]
 80171a4:	6120      	str	r0, [r4, #16]
 80171a6:	b928      	cbnz	r0, 80171b4 <_svfiprintf_r+0x30>
 80171a8:	230c      	movs	r3, #12
 80171aa:	f8c8 3000 	str.w	r3, [r8]
 80171ae:	f04f 30ff 	mov.w	r0, #4294967295
 80171b2:	e0c8      	b.n	8017346 <_svfiprintf_r+0x1c2>
 80171b4:	2340      	movs	r3, #64	; 0x40
 80171b6:	6163      	str	r3, [r4, #20]
 80171b8:	2300      	movs	r3, #0
 80171ba:	9309      	str	r3, [sp, #36]	; 0x24
 80171bc:	2320      	movs	r3, #32
 80171be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80171c2:	2330      	movs	r3, #48	; 0x30
 80171c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80171c8:	9503      	str	r5, [sp, #12]
 80171ca:	f04f 0b01 	mov.w	fp, #1
 80171ce:	4637      	mov	r7, r6
 80171d0:	463d      	mov	r5, r7
 80171d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80171d6:	b10b      	cbz	r3, 80171dc <_svfiprintf_r+0x58>
 80171d8:	2b25      	cmp	r3, #37	; 0x25
 80171da:	d13e      	bne.n	801725a <_svfiprintf_r+0xd6>
 80171dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80171e0:	d00b      	beq.n	80171fa <_svfiprintf_r+0x76>
 80171e2:	4653      	mov	r3, sl
 80171e4:	4632      	mov	r2, r6
 80171e6:	4621      	mov	r1, r4
 80171e8:	4640      	mov	r0, r8
 80171ea:	f7ff ff71 	bl	80170d0 <__ssputs_r>
 80171ee:	3001      	adds	r0, #1
 80171f0:	f000 80a4 	beq.w	801733c <_svfiprintf_r+0x1b8>
 80171f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171f6:	4453      	add	r3, sl
 80171f8:	9309      	str	r3, [sp, #36]	; 0x24
 80171fa:	783b      	ldrb	r3, [r7, #0]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	f000 809d 	beq.w	801733c <_svfiprintf_r+0x1b8>
 8017202:	2300      	movs	r3, #0
 8017204:	f04f 32ff 	mov.w	r2, #4294967295
 8017208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801720c:	9304      	str	r3, [sp, #16]
 801720e:	9307      	str	r3, [sp, #28]
 8017210:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017214:	931a      	str	r3, [sp, #104]	; 0x68
 8017216:	462f      	mov	r7, r5
 8017218:	2205      	movs	r2, #5
 801721a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801721e:	4850      	ldr	r0, [pc, #320]	; (8017360 <_svfiprintf_r+0x1dc>)
 8017220:	f7e8 fff6 	bl	8000210 <memchr>
 8017224:	9b04      	ldr	r3, [sp, #16]
 8017226:	b9d0      	cbnz	r0, 801725e <_svfiprintf_r+0xda>
 8017228:	06d9      	lsls	r1, r3, #27
 801722a:	bf44      	itt	mi
 801722c:	2220      	movmi	r2, #32
 801722e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017232:	071a      	lsls	r2, r3, #28
 8017234:	bf44      	itt	mi
 8017236:	222b      	movmi	r2, #43	; 0x2b
 8017238:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801723c:	782a      	ldrb	r2, [r5, #0]
 801723e:	2a2a      	cmp	r2, #42	; 0x2a
 8017240:	d015      	beq.n	801726e <_svfiprintf_r+0xea>
 8017242:	9a07      	ldr	r2, [sp, #28]
 8017244:	462f      	mov	r7, r5
 8017246:	2000      	movs	r0, #0
 8017248:	250a      	movs	r5, #10
 801724a:	4639      	mov	r1, r7
 801724c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017250:	3b30      	subs	r3, #48	; 0x30
 8017252:	2b09      	cmp	r3, #9
 8017254:	d94d      	bls.n	80172f2 <_svfiprintf_r+0x16e>
 8017256:	b1b8      	cbz	r0, 8017288 <_svfiprintf_r+0x104>
 8017258:	e00f      	b.n	801727a <_svfiprintf_r+0xf6>
 801725a:	462f      	mov	r7, r5
 801725c:	e7b8      	b.n	80171d0 <_svfiprintf_r+0x4c>
 801725e:	4a40      	ldr	r2, [pc, #256]	; (8017360 <_svfiprintf_r+0x1dc>)
 8017260:	1a80      	subs	r0, r0, r2
 8017262:	fa0b f000 	lsl.w	r0, fp, r0
 8017266:	4318      	orrs	r0, r3
 8017268:	9004      	str	r0, [sp, #16]
 801726a:	463d      	mov	r5, r7
 801726c:	e7d3      	b.n	8017216 <_svfiprintf_r+0x92>
 801726e:	9a03      	ldr	r2, [sp, #12]
 8017270:	1d11      	adds	r1, r2, #4
 8017272:	6812      	ldr	r2, [r2, #0]
 8017274:	9103      	str	r1, [sp, #12]
 8017276:	2a00      	cmp	r2, #0
 8017278:	db01      	blt.n	801727e <_svfiprintf_r+0xfa>
 801727a:	9207      	str	r2, [sp, #28]
 801727c:	e004      	b.n	8017288 <_svfiprintf_r+0x104>
 801727e:	4252      	negs	r2, r2
 8017280:	f043 0302 	orr.w	r3, r3, #2
 8017284:	9207      	str	r2, [sp, #28]
 8017286:	9304      	str	r3, [sp, #16]
 8017288:	783b      	ldrb	r3, [r7, #0]
 801728a:	2b2e      	cmp	r3, #46	; 0x2e
 801728c:	d10c      	bne.n	80172a8 <_svfiprintf_r+0x124>
 801728e:	787b      	ldrb	r3, [r7, #1]
 8017290:	2b2a      	cmp	r3, #42	; 0x2a
 8017292:	d133      	bne.n	80172fc <_svfiprintf_r+0x178>
 8017294:	9b03      	ldr	r3, [sp, #12]
 8017296:	1d1a      	adds	r2, r3, #4
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	9203      	str	r2, [sp, #12]
 801729c:	2b00      	cmp	r3, #0
 801729e:	bfb8      	it	lt
 80172a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80172a4:	3702      	adds	r7, #2
 80172a6:	9305      	str	r3, [sp, #20]
 80172a8:	4d2e      	ldr	r5, [pc, #184]	; (8017364 <_svfiprintf_r+0x1e0>)
 80172aa:	7839      	ldrb	r1, [r7, #0]
 80172ac:	2203      	movs	r2, #3
 80172ae:	4628      	mov	r0, r5
 80172b0:	f7e8 ffae 	bl	8000210 <memchr>
 80172b4:	b138      	cbz	r0, 80172c6 <_svfiprintf_r+0x142>
 80172b6:	2340      	movs	r3, #64	; 0x40
 80172b8:	1b40      	subs	r0, r0, r5
 80172ba:	fa03 f000 	lsl.w	r0, r3, r0
 80172be:	9b04      	ldr	r3, [sp, #16]
 80172c0:	4303      	orrs	r3, r0
 80172c2:	3701      	adds	r7, #1
 80172c4:	9304      	str	r3, [sp, #16]
 80172c6:	7839      	ldrb	r1, [r7, #0]
 80172c8:	4827      	ldr	r0, [pc, #156]	; (8017368 <_svfiprintf_r+0x1e4>)
 80172ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172ce:	2206      	movs	r2, #6
 80172d0:	1c7e      	adds	r6, r7, #1
 80172d2:	f7e8 ff9d 	bl	8000210 <memchr>
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d038      	beq.n	801734c <_svfiprintf_r+0x1c8>
 80172da:	4b24      	ldr	r3, [pc, #144]	; (801736c <_svfiprintf_r+0x1e8>)
 80172dc:	bb13      	cbnz	r3, 8017324 <_svfiprintf_r+0x1a0>
 80172de:	9b03      	ldr	r3, [sp, #12]
 80172e0:	3307      	adds	r3, #7
 80172e2:	f023 0307 	bic.w	r3, r3, #7
 80172e6:	3308      	adds	r3, #8
 80172e8:	9303      	str	r3, [sp, #12]
 80172ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172ec:	444b      	add	r3, r9
 80172ee:	9309      	str	r3, [sp, #36]	; 0x24
 80172f0:	e76d      	b.n	80171ce <_svfiprintf_r+0x4a>
 80172f2:	fb05 3202 	mla	r2, r5, r2, r3
 80172f6:	2001      	movs	r0, #1
 80172f8:	460f      	mov	r7, r1
 80172fa:	e7a6      	b.n	801724a <_svfiprintf_r+0xc6>
 80172fc:	2300      	movs	r3, #0
 80172fe:	3701      	adds	r7, #1
 8017300:	9305      	str	r3, [sp, #20]
 8017302:	4619      	mov	r1, r3
 8017304:	250a      	movs	r5, #10
 8017306:	4638      	mov	r0, r7
 8017308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801730c:	3a30      	subs	r2, #48	; 0x30
 801730e:	2a09      	cmp	r2, #9
 8017310:	d903      	bls.n	801731a <_svfiprintf_r+0x196>
 8017312:	2b00      	cmp	r3, #0
 8017314:	d0c8      	beq.n	80172a8 <_svfiprintf_r+0x124>
 8017316:	9105      	str	r1, [sp, #20]
 8017318:	e7c6      	b.n	80172a8 <_svfiprintf_r+0x124>
 801731a:	fb05 2101 	mla	r1, r5, r1, r2
 801731e:	2301      	movs	r3, #1
 8017320:	4607      	mov	r7, r0
 8017322:	e7f0      	b.n	8017306 <_svfiprintf_r+0x182>
 8017324:	ab03      	add	r3, sp, #12
 8017326:	9300      	str	r3, [sp, #0]
 8017328:	4622      	mov	r2, r4
 801732a:	4b11      	ldr	r3, [pc, #68]	; (8017370 <_svfiprintf_r+0x1ec>)
 801732c:	a904      	add	r1, sp, #16
 801732e:	4640      	mov	r0, r8
 8017330:	f7fb ffc6 	bl	80132c0 <_printf_float>
 8017334:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017338:	4681      	mov	r9, r0
 801733a:	d1d6      	bne.n	80172ea <_svfiprintf_r+0x166>
 801733c:	89a3      	ldrh	r3, [r4, #12]
 801733e:	065b      	lsls	r3, r3, #25
 8017340:	f53f af35 	bmi.w	80171ae <_svfiprintf_r+0x2a>
 8017344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017346:	b01d      	add	sp, #116	; 0x74
 8017348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801734c:	ab03      	add	r3, sp, #12
 801734e:	9300      	str	r3, [sp, #0]
 8017350:	4622      	mov	r2, r4
 8017352:	4b07      	ldr	r3, [pc, #28]	; (8017370 <_svfiprintf_r+0x1ec>)
 8017354:	a904      	add	r1, sp, #16
 8017356:	4640      	mov	r0, r8
 8017358:	f7fc fa68 	bl	801382c <_printf_i>
 801735c:	e7ea      	b.n	8017334 <_svfiprintf_r+0x1b0>
 801735e:	bf00      	nop
 8017360:	080189a4 	.word	0x080189a4
 8017364:	080189aa 	.word	0x080189aa
 8017368:	080189ae 	.word	0x080189ae
 801736c:	080132c1 	.word	0x080132c1
 8017370:	080170d1 	.word	0x080170d1

08017374 <_sungetc_r>:
 8017374:	b538      	push	{r3, r4, r5, lr}
 8017376:	1c4b      	adds	r3, r1, #1
 8017378:	4614      	mov	r4, r2
 801737a:	d103      	bne.n	8017384 <_sungetc_r+0x10>
 801737c:	f04f 35ff 	mov.w	r5, #4294967295
 8017380:	4628      	mov	r0, r5
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	8993      	ldrh	r3, [r2, #12]
 8017386:	f023 0320 	bic.w	r3, r3, #32
 801738a:	8193      	strh	r3, [r2, #12]
 801738c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801738e:	6852      	ldr	r2, [r2, #4]
 8017390:	b2cd      	uxtb	r5, r1
 8017392:	b18b      	cbz	r3, 80173b8 <_sungetc_r+0x44>
 8017394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017396:	4293      	cmp	r3, r2
 8017398:	dd08      	ble.n	80173ac <_sungetc_r+0x38>
 801739a:	6823      	ldr	r3, [r4, #0]
 801739c:	1e5a      	subs	r2, r3, #1
 801739e:	6022      	str	r2, [r4, #0]
 80173a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80173a4:	6863      	ldr	r3, [r4, #4]
 80173a6:	3301      	adds	r3, #1
 80173a8:	6063      	str	r3, [r4, #4]
 80173aa:	e7e9      	b.n	8017380 <_sungetc_r+0xc>
 80173ac:	4621      	mov	r1, r4
 80173ae:	f000 fd4b 	bl	8017e48 <__submore>
 80173b2:	2800      	cmp	r0, #0
 80173b4:	d0f1      	beq.n	801739a <_sungetc_r+0x26>
 80173b6:	e7e1      	b.n	801737c <_sungetc_r+0x8>
 80173b8:	6921      	ldr	r1, [r4, #16]
 80173ba:	6823      	ldr	r3, [r4, #0]
 80173bc:	b151      	cbz	r1, 80173d4 <_sungetc_r+0x60>
 80173be:	4299      	cmp	r1, r3
 80173c0:	d208      	bcs.n	80173d4 <_sungetc_r+0x60>
 80173c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80173c6:	42a9      	cmp	r1, r5
 80173c8:	d104      	bne.n	80173d4 <_sungetc_r+0x60>
 80173ca:	3b01      	subs	r3, #1
 80173cc:	3201      	adds	r2, #1
 80173ce:	6023      	str	r3, [r4, #0]
 80173d0:	6062      	str	r2, [r4, #4]
 80173d2:	e7d5      	b.n	8017380 <_sungetc_r+0xc>
 80173d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80173d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173dc:	6363      	str	r3, [r4, #52]	; 0x34
 80173de:	2303      	movs	r3, #3
 80173e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80173e2:	4623      	mov	r3, r4
 80173e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80173e8:	6023      	str	r3, [r4, #0]
 80173ea:	2301      	movs	r3, #1
 80173ec:	e7dc      	b.n	80173a8 <_sungetc_r+0x34>

080173ee <__ssrefill_r>:
 80173ee:	b510      	push	{r4, lr}
 80173f0:	460c      	mov	r4, r1
 80173f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80173f4:	b169      	cbz	r1, 8017412 <__ssrefill_r+0x24>
 80173f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80173fa:	4299      	cmp	r1, r3
 80173fc:	d001      	beq.n	8017402 <__ssrefill_r+0x14>
 80173fe:	f7ff fdbf 	bl	8016f80 <_free_r>
 8017402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017404:	6063      	str	r3, [r4, #4]
 8017406:	2000      	movs	r0, #0
 8017408:	6360      	str	r0, [r4, #52]	; 0x34
 801740a:	b113      	cbz	r3, 8017412 <__ssrefill_r+0x24>
 801740c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801740e:	6023      	str	r3, [r4, #0]
 8017410:	bd10      	pop	{r4, pc}
 8017412:	6923      	ldr	r3, [r4, #16]
 8017414:	6023      	str	r3, [r4, #0]
 8017416:	2300      	movs	r3, #0
 8017418:	6063      	str	r3, [r4, #4]
 801741a:	89a3      	ldrh	r3, [r4, #12]
 801741c:	f043 0320 	orr.w	r3, r3, #32
 8017420:	81a3      	strh	r3, [r4, #12]
 8017422:	f04f 30ff 	mov.w	r0, #4294967295
 8017426:	e7f3      	b.n	8017410 <__ssrefill_r+0x22>

08017428 <__ssvfiscanf_r>:
 8017428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801742c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8017430:	460c      	mov	r4, r1
 8017432:	2100      	movs	r1, #0
 8017434:	9144      	str	r1, [sp, #272]	; 0x110
 8017436:	9145      	str	r1, [sp, #276]	; 0x114
 8017438:	499f      	ldr	r1, [pc, #636]	; (80176b8 <__ssvfiscanf_r+0x290>)
 801743a:	91a0      	str	r1, [sp, #640]	; 0x280
 801743c:	f10d 0804 	add.w	r8, sp, #4
 8017440:	499e      	ldr	r1, [pc, #632]	; (80176bc <__ssvfiscanf_r+0x294>)
 8017442:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80176c0 <__ssvfiscanf_r+0x298>
 8017446:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801744a:	4606      	mov	r6, r0
 801744c:	4692      	mov	sl, r2
 801744e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	270a      	movs	r7, #10
 8017454:	f89a 3000 	ldrb.w	r3, [sl]
 8017458:	2b00      	cmp	r3, #0
 801745a:	f000 812a 	beq.w	80176b2 <__ssvfiscanf_r+0x28a>
 801745e:	4655      	mov	r5, sl
 8017460:	f7ff f8d2 	bl	8016608 <__locale_ctype_ptr>
 8017464:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017468:	4458      	add	r0, fp
 801746a:	7843      	ldrb	r3, [r0, #1]
 801746c:	f013 0308 	ands.w	r3, r3, #8
 8017470:	d01c      	beq.n	80174ac <__ssvfiscanf_r+0x84>
 8017472:	6863      	ldr	r3, [r4, #4]
 8017474:	2b00      	cmp	r3, #0
 8017476:	dd12      	ble.n	801749e <__ssvfiscanf_r+0x76>
 8017478:	f7ff f8c6 	bl	8016608 <__locale_ctype_ptr>
 801747c:	6823      	ldr	r3, [r4, #0]
 801747e:	781a      	ldrb	r2, [r3, #0]
 8017480:	4410      	add	r0, r2
 8017482:	7842      	ldrb	r2, [r0, #1]
 8017484:	0712      	lsls	r2, r2, #28
 8017486:	d401      	bmi.n	801748c <__ssvfiscanf_r+0x64>
 8017488:	46aa      	mov	sl, r5
 801748a:	e7e3      	b.n	8017454 <__ssvfiscanf_r+0x2c>
 801748c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801748e:	3201      	adds	r2, #1
 8017490:	9245      	str	r2, [sp, #276]	; 0x114
 8017492:	6862      	ldr	r2, [r4, #4]
 8017494:	3301      	adds	r3, #1
 8017496:	3a01      	subs	r2, #1
 8017498:	6062      	str	r2, [r4, #4]
 801749a:	6023      	str	r3, [r4, #0]
 801749c:	e7e9      	b.n	8017472 <__ssvfiscanf_r+0x4a>
 801749e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80174a0:	4621      	mov	r1, r4
 80174a2:	4630      	mov	r0, r6
 80174a4:	4798      	blx	r3
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d0e6      	beq.n	8017478 <__ssvfiscanf_r+0x50>
 80174aa:	e7ed      	b.n	8017488 <__ssvfiscanf_r+0x60>
 80174ac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80174b0:	f040 8082 	bne.w	80175b8 <__ssvfiscanf_r+0x190>
 80174b4:	9343      	str	r3, [sp, #268]	; 0x10c
 80174b6:	9341      	str	r3, [sp, #260]	; 0x104
 80174b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80174bc:	2b2a      	cmp	r3, #42	; 0x2a
 80174be:	d103      	bne.n	80174c8 <__ssvfiscanf_r+0xa0>
 80174c0:	2310      	movs	r3, #16
 80174c2:	9341      	str	r3, [sp, #260]	; 0x104
 80174c4:	f10a 0502 	add.w	r5, sl, #2
 80174c8:	46aa      	mov	sl, r5
 80174ca:	f815 1b01 	ldrb.w	r1, [r5], #1
 80174ce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80174d2:	2a09      	cmp	r2, #9
 80174d4:	d922      	bls.n	801751c <__ssvfiscanf_r+0xf4>
 80174d6:	2203      	movs	r2, #3
 80174d8:	4879      	ldr	r0, [pc, #484]	; (80176c0 <__ssvfiscanf_r+0x298>)
 80174da:	f7e8 fe99 	bl	8000210 <memchr>
 80174de:	b138      	cbz	r0, 80174f0 <__ssvfiscanf_r+0xc8>
 80174e0:	eba0 0309 	sub.w	r3, r0, r9
 80174e4:	2001      	movs	r0, #1
 80174e6:	4098      	lsls	r0, r3
 80174e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80174ea:	4318      	orrs	r0, r3
 80174ec:	9041      	str	r0, [sp, #260]	; 0x104
 80174ee:	46aa      	mov	sl, r5
 80174f0:	f89a 3000 	ldrb.w	r3, [sl]
 80174f4:	2b67      	cmp	r3, #103	; 0x67
 80174f6:	f10a 0501 	add.w	r5, sl, #1
 80174fa:	d82b      	bhi.n	8017554 <__ssvfiscanf_r+0x12c>
 80174fc:	2b65      	cmp	r3, #101	; 0x65
 80174fe:	f080 809f 	bcs.w	8017640 <__ssvfiscanf_r+0x218>
 8017502:	2b47      	cmp	r3, #71	; 0x47
 8017504:	d810      	bhi.n	8017528 <__ssvfiscanf_r+0x100>
 8017506:	2b45      	cmp	r3, #69	; 0x45
 8017508:	f080 809a 	bcs.w	8017640 <__ssvfiscanf_r+0x218>
 801750c:	2b00      	cmp	r3, #0
 801750e:	d06c      	beq.n	80175ea <__ssvfiscanf_r+0x1c2>
 8017510:	2b25      	cmp	r3, #37	; 0x25
 8017512:	d051      	beq.n	80175b8 <__ssvfiscanf_r+0x190>
 8017514:	2303      	movs	r3, #3
 8017516:	9347      	str	r3, [sp, #284]	; 0x11c
 8017518:	9742      	str	r7, [sp, #264]	; 0x108
 801751a:	e027      	b.n	801756c <__ssvfiscanf_r+0x144>
 801751c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801751e:	fb07 1303 	mla	r3, r7, r3, r1
 8017522:	3b30      	subs	r3, #48	; 0x30
 8017524:	9343      	str	r3, [sp, #268]	; 0x10c
 8017526:	e7cf      	b.n	80174c8 <__ssvfiscanf_r+0xa0>
 8017528:	2b5b      	cmp	r3, #91	; 0x5b
 801752a:	d06a      	beq.n	8017602 <__ssvfiscanf_r+0x1da>
 801752c:	d80c      	bhi.n	8017548 <__ssvfiscanf_r+0x120>
 801752e:	2b58      	cmp	r3, #88	; 0x58
 8017530:	d1f0      	bne.n	8017514 <__ssvfiscanf_r+0xec>
 8017532:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017534:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017538:	9241      	str	r2, [sp, #260]	; 0x104
 801753a:	2210      	movs	r2, #16
 801753c:	9242      	str	r2, [sp, #264]	; 0x108
 801753e:	2b6e      	cmp	r3, #110	; 0x6e
 8017540:	bf8c      	ite	hi
 8017542:	2304      	movhi	r3, #4
 8017544:	2303      	movls	r3, #3
 8017546:	e010      	b.n	801756a <__ssvfiscanf_r+0x142>
 8017548:	2b63      	cmp	r3, #99	; 0x63
 801754a:	d065      	beq.n	8017618 <__ssvfiscanf_r+0x1f0>
 801754c:	2b64      	cmp	r3, #100	; 0x64
 801754e:	d1e1      	bne.n	8017514 <__ssvfiscanf_r+0xec>
 8017550:	9742      	str	r7, [sp, #264]	; 0x108
 8017552:	e7f4      	b.n	801753e <__ssvfiscanf_r+0x116>
 8017554:	2b70      	cmp	r3, #112	; 0x70
 8017556:	d04b      	beq.n	80175f0 <__ssvfiscanf_r+0x1c8>
 8017558:	d826      	bhi.n	80175a8 <__ssvfiscanf_r+0x180>
 801755a:	2b6e      	cmp	r3, #110	; 0x6e
 801755c:	d062      	beq.n	8017624 <__ssvfiscanf_r+0x1fc>
 801755e:	d84c      	bhi.n	80175fa <__ssvfiscanf_r+0x1d2>
 8017560:	2b69      	cmp	r3, #105	; 0x69
 8017562:	d1d7      	bne.n	8017514 <__ssvfiscanf_r+0xec>
 8017564:	2300      	movs	r3, #0
 8017566:	9342      	str	r3, [sp, #264]	; 0x108
 8017568:	2303      	movs	r3, #3
 801756a:	9347      	str	r3, [sp, #284]	; 0x11c
 801756c:	6863      	ldr	r3, [r4, #4]
 801756e:	2b00      	cmp	r3, #0
 8017570:	dd68      	ble.n	8017644 <__ssvfiscanf_r+0x21c>
 8017572:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017574:	0659      	lsls	r1, r3, #25
 8017576:	d407      	bmi.n	8017588 <__ssvfiscanf_r+0x160>
 8017578:	f7ff f846 	bl	8016608 <__locale_ctype_ptr>
 801757c:	6823      	ldr	r3, [r4, #0]
 801757e:	781a      	ldrb	r2, [r3, #0]
 8017580:	4410      	add	r0, r2
 8017582:	7842      	ldrb	r2, [r0, #1]
 8017584:	0712      	lsls	r2, r2, #28
 8017586:	d464      	bmi.n	8017652 <__ssvfiscanf_r+0x22a>
 8017588:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801758a:	2b02      	cmp	r3, #2
 801758c:	dc73      	bgt.n	8017676 <__ssvfiscanf_r+0x24e>
 801758e:	466b      	mov	r3, sp
 8017590:	4622      	mov	r2, r4
 8017592:	a941      	add	r1, sp, #260	; 0x104
 8017594:	4630      	mov	r0, r6
 8017596:	f000 f9d7 	bl	8017948 <_scanf_chars>
 801759a:	2801      	cmp	r0, #1
 801759c:	f000 8089 	beq.w	80176b2 <__ssvfiscanf_r+0x28a>
 80175a0:	2802      	cmp	r0, #2
 80175a2:	f47f af71 	bne.w	8017488 <__ssvfiscanf_r+0x60>
 80175a6:	e01d      	b.n	80175e4 <__ssvfiscanf_r+0x1bc>
 80175a8:	2b75      	cmp	r3, #117	; 0x75
 80175aa:	d0d1      	beq.n	8017550 <__ssvfiscanf_r+0x128>
 80175ac:	2b78      	cmp	r3, #120	; 0x78
 80175ae:	d0c0      	beq.n	8017532 <__ssvfiscanf_r+0x10a>
 80175b0:	2b73      	cmp	r3, #115	; 0x73
 80175b2:	d1af      	bne.n	8017514 <__ssvfiscanf_r+0xec>
 80175b4:	2302      	movs	r3, #2
 80175b6:	e7d8      	b.n	801756a <__ssvfiscanf_r+0x142>
 80175b8:	6863      	ldr	r3, [r4, #4]
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dd0c      	ble.n	80175d8 <__ssvfiscanf_r+0x1b0>
 80175be:	6823      	ldr	r3, [r4, #0]
 80175c0:	781a      	ldrb	r2, [r3, #0]
 80175c2:	455a      	cmp	r2, fp
 80175c4:	d175      	bne.n	80176b2 <__ssvfiscanf_r+0x28a>
 80175c6:	3301      	adds	r3, #1
 80175c8:	6862      	ldr	r2, [r4, #4]
 80175ca:	6023      	str	r3, [r4, #0]
 80175cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80175ce:	3a01      	subs	r2, #1
 80175d0:	3301      	adds	r3, #1
 80175d2:	6062      	str	r2, [r4, #4]
 80175d4:	9345      	str	r3, [sp, #276]	; 0x114
 80175d6:	e757      	b.n	8017488 <__ssvfiscanf_r+0x60>
 80175d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80175da:	4621      	mov	r1, r4
 80175dc:	4630      	mov	r0, r6
 80175de:	4798      	blx	r3
 80175e0:	2800      	cmp	r0, #0
 80175e2:	d0ec      	beq.n	80175be <__ssvfiscanf_r+0x196>
 80175e4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80175e6:	2800      	cmp	r0, #0
 80175e8:	d159      	bne.n	801769e <__ssvfiscanf_r+0x276>
 80175ea:	f04f 30ff 	mov.w	r0, #4294967295
 80175ee:	e05c      	b.n	80176aa <__ssvfiscanf_r+0x282>
 80175f0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80175f2:	f042 0220 	orr.w	r2, r2, #32
 80175f6:	9241      	str	r2, [sp, #260]	; 0x104
 80175f8:	e79b      	b.n	8017532 <__ssvfiscanf_r+0x10a>
 80175fa:	2308      	movs	r3, #8
 80175fc:	9342      	str	r3, [sp, #264]	; 0x108
 80175fe:	2304      	movs	r3, #4
 8017600:	e7b3      	b.n	801756a <__ssvfiscanf_r+0x142>
 8017602:	4629      	mov	r1, r5
 8017604:	4640      	mov	r0, r8
 8017606:	f000 fb4f 	bl	8017ca8 <__sccl>
 801760a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801760c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017610:	9341      	str	r3, [sp, #260]	; 0x104
 8017612:	4605      	mov	r5, r0
 8017614:	2301      	movs	r3, #1
 8017616:	e7a8      	b.n	801756a <__ssvfiscanf_r+0x142>
 8017618:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801761a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801761e:	9341      	str	r3, [sp, #260]	; 0x104
 8017620:	2300      	movs	r3, #0
 8017622:	e7a2      	b.n	801756a <__ssvfiscanf_r+0x142>
 8017624:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017626:	06c3      	lsls	r3, r0, #27
 8017628:	f53f af2e 	bmi.w	8017488 <__ssvfiscanf_r+0x60>
 801762c:	9b00      	ldr	r3, [sp, #0]
 801762e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017630:	1d19      	adds	r1, r3, #4
 8017632:	9100      	str	r1, [sp, #0]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	07c0      	lsls	r0, r0, #31
 8017638:	bf4c      	ite	mi
 801763a:	801a      	strhmi	r2, [r3, #0]
 801763c:	601a      	strpl	r2, [r3, #0]
 801763e:	e723      	b.n	8017488 <__ssvfiscanf_r+0x60>
 8017640:	2305      	movs	r3, #5
 8017642:	e792      	b.n	801756a <__ssvfiscanf_r+0x142>
 8017644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017646:	4621      	mov	r1, r4
 8017648:	4630      	mov	r0, r6
 801764a:	4798      	blx	r3
 801764c:	2800      	cmp	r0, #0
 801764e:	d090      	beq.n	8017572 <__ssvfiscanf_r+0x14a>
 8017650:	e7c8      	b.n	80175e4 <__ssvfiscanf_r+0x1bc>
 8017652:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017654:	3201      	adds	r2, #1
 8017656:	9245      	str	r2, [sp, #276]	; 0x114
 8017658:	6862      	ldr	r2, [r4, #4]
 801765a:	3a01      	subs	r2, #1
 801765c:	2a00      	cmp	r2, #0
 801765e:	6062      	str	r2, [r4, #4]
 8017660:	dd02      	ble.n	8017668 <__ssvfiscanf_r+0x240>
 8017662:	3301      	adds	r3, #1
 8017664:	6023      	str	r3, [r4, #0]
 8017666:	e787      	b.n	8017578 <__ssvfiscanf_r+0x150>
 8017668:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801766a:	4621      	mov	r1, r4
 801766c:	4630      	mov	r0, r6
 801766e:	4798      	blx	r3
 8017670:	2800      	cmp	r0, #0
 8017672:	d081      	beq.n	8017578 <__ssvfiscanf_r+0x150>
 8017674:	e7b6      	b.n	80175e4 <__ssvfiscanf_r+0x1bc>
 8017676:	2b04      	cmp	r3, #4
 8017678:	dc06      	bgt.n	8017688 <__ssvfiscanf_r+0x260>
 801767a:	466b      	mov	r3, sp
 801767c:	4622      	mov	r2, r4
 801767e:	a941      	add	r1, sp, #260	; 0x104
 8017680:	4630      	mov	r0, r6
 8017682:	f000 f9c5 	bl	8017a10 <_scanf_i>
 8017686:	e788      	b.n	801759a <__ssvfiscanf_r+0x172>
 8017688:	4b0e      	ldr	r3, [pc, #56]	; (80176c4 <__ssvfiscanf_r+0x29c>)
 801768a:	2b00      	cmp	r3, #0
 801768c:	f43f aefc 	beq.w	8017488 <__ssvfiscanf_r+0x60>
 8017690:	466b      	mov	r3, sp
 8017692:	4622      	mov	r2, r4
 8017694:	a941      	add	r1, sp, #260	; 0x104
 8017696:	4630      	mov	r0, r6
 8017698:	f7fc f9da 	bl	8013a50 <_scanf_float>
 801769c:	e77d      	b.n	801759a <__ssvfiscanf_r+0x172>
 801769e:	89a3      	ldrh	r3, [r4, #12]
 80176a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80176a4:	bf18      	it	ne
 80176a6:	f04f 30ff 	movne.w	r0, #4294967295
 80176aa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80176ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80176b4:	e7f9      	b.n	80176aa <__ssvfiscanf_r+0x282>
 80176b6:	bf00      	nop
 80176b8:	08017375 	.word	0x08017375
 80176bc:	080173ef 	.word	0x080173ef
 80176c0:	080189aa 	.word	0x080189aa
 80176c4:	08013a51 	.word	0x08013a51

080176c8 <__sfputc_r>:
 80176c8:	6893      	ldr	r3, [r2, #8]
 80176ca:	3b01      	subs	r3, #1
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	b410      	push	{r4}
 80176d0:	6093      	str	r3, [r2, #8]
 80176d2:	da08      	bge.n	80176e6 <__sfputc_r+0x1e>
 80176d4:	6994      	ldr	r4, [r2, #24]
 80176d6:	42a3      	cmp	r3, r4
 80176d8:	db01      	blt.n	80176de <__sfputc_r+0x16>
 80176da:	290a      	cmp	r1, #10
 80176dc:	d103      	bne.n	80176e6 <__sfputc_r+0x1e>
 80176de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176e2:	f7fd bbc7 	b.w	8014e74 <__swbuf_r>
 80176e6:	6813      	ldr	r3, [r2, #0]
 80176e8:	1c58      	adds	r0, r3, #1
 80176ea:	6010      	str	r0, [r2, #0]
 80176ec:	7019      	strb	r1, [r3, #0]
 80176ee:	4608      	mov	r0, r1
 80176f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176f4:	4770      	bx	lr

080176f6 <__sfputs_r>:
 80176f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f8:	4606      	mov	r6, r0
 80176fa:	460f      	mov	r7, r1
 80176fc:	4614      	mov	r4, r2
 80176fe:	18d5      	adds	r5, r2, r3
 8017700:	42ac      	cmp	r4, r5
 8017702:	d101      	bne.n	8017708 <__sfputs_r+0x12>
 8017704:	2000      	movs	r0, #0
 8017706:	e007      	b.n	8017718 <__sfputs_r+0x22>
 8017708:	463a      	mov	r2, r7
 801770a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801770e:	4630      	mov	r0, r6
 8017710:	f7ff ffda 	bl	80176c8 <__sfputc_r>
 8017714:	1c43      	adds	r3, r0, #1
 8017716:	d1f3      	bne.n	8017700 <__sfputs_r+0xa>
 8017718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801771c <_vfiprintf_r>:
 801771c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017720:	460c      	mov	r4, r1
 8017722:	b09d      	sub	sp, #116	; 0x74
 8017724:	4617      	mov	r7, r2
 8017726:	461d      	mov	r5, r3
 8017728:	4606      	mov	r6, r0
 801772a:	b118      	cbz	r0, 8017734 <_vfiprintf_r+0x18>
 801772c:	6983      	ldr	r3, [r0, #24]
 801772e:	b90b      	cbnz	r3, 8017734 <_vfiprintf_r+0x18>
 8017730:	f7fe fbb6 	bl	8015ea0 <__sinit>
 8017734:	4b7c      	ldr	r3, [pc, #496]	; (8017928 <_vfiprintf_r+0x20c>)
 8017736:	429c      	cmp	r4, r3
 8017738:	d158      	bne.n	80177ec <_vfiprintf_r+0xd0>
 801773a:	6874      	ldr	r4, [r6, #4]
 801773c:	89a3      	ldrh	r3, [r4, #12]
 801773e:	0718      	lsls	r0, r3, #28
 8017740:	d55e      	bpl.n	8017800 <_vfiprintf_r+0xe4>
 8017742:	6923      	ldr	r3, [r4, #16]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d05b      	beq.n	8017800 <_vfiprintf_r+0xe4>
 8017748:	2300      	movs	r3, #0
 801774a:	9309      	str	r3, [sp, #36]	; 0x24
 801774c:	2320      	movs	r3, #32
 801774e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017752:	2330      	movs	r3, #48	; 0x30
 8017754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017758:	9503      	str	r5, [sp, #12]
 801775a:	f04f 0b01 	mov.w	fp, #1
 801775e:	46b8      	mov	r8, r7
 8017760:	4645      	mov	r5, r8
 8017762:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017766:	b10b      	cbz	r3, 801776c <_vfiprintf_r+0x50>
 8017768:	2b25      	cmp	r3, #37	; 0x25
 801776a:	d154      	bne.n	8017816 <_vfiprintf_r+0xfa>
 801776c:	ebb8 0a07 	subs.w	sl, r8, r7
 8017770:	d00b      	beq.n	801778a <_vfiprintf_r+0x6e>
 8017772:	4653      	mov	r3, sl
 8017774:	463a      	mov	r2, r7
 8017776:	4621      	mov	r1, r4
 8017778:	4630      	mov	r0, r6
 801777a:	f7ff ffbc 	bl	80176f6 <__sfputs_r>
 801777e:	3001      	adds	r0, #1
 8017780:	f000 80c2 	beq.w	8017908 <_vfiprintf_r+0x1ec>
 8017784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017786:	4453      	add	r3, sl
 8017788:	9309      	str	r3, [sp, #36]	; 0x24
 801778a:	f898 3000 	ldrb.w	r3, [r8]
 801778e:	2b00      	cmp	r3, #0
 8017790:	f000 80ba 	beq.w	8017908 <_vfiprintf_r+0x1ec>
 8017794:	2300      	movs	r3, #0
 8017796:	f04f 32ff 	mov.w	r2, #4294967295
 801779a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801779e:	9304      	str	r3, [sp, #16]
 80177a0:	9307      	str	r3, [sp, #28]
 80177a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177a6:	931a      	str	r3, [sp, #104]	; 0x68
 80177a8:	46a8      	mov	r8, r5
 80177aa:	2205      	movs	r2, #5
 80177ac:	f818 1b01 	ldrb.w	r1, [r8], #1
 80177b0:	485e      	ldr	r0, [pc, #376]	; (801792c <_vfiprintf_r+0x210>)
 80177b2:	f7e8 fd2d 	bl	8000210 <memchr>
 80177b6:	9b04      	ldr	r3, [sp, #16]
 80177b8:	bb78      	cbnz	r0, 801781a <_vfiprintf_r+0xfe>
 80177ba:	06d9      	lsls	r1, r3, #27
 80177bc:	bf44      	itt	mi
 80177be:	2220      	movmi	r2, #32
 80177c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177c4:	071a      	lsls	r2, r3, #28
 80177c6:	bf44      	itt	mi
 80177c8:	222b      	movmi	r2, #43	; 0x2b
 80177ca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177ce:	782a      	ldrb	r2, [r5, #0]
 80177d0:	2a2a      	cmp	r2, #42	; 0x2a
 80177d2:	d02a      	beq.n	801782a <_vfiprintf_r+0x10e>
 80177d4:	9a07      	ldr	r2, [sp, #28]
 80177d6:	46a8      	mov	r8, r5
 80177d8:	2000      	movs	r0, #0
 80177da:	250a      	movs	r5, #10
 80177dc:	4641      	mov	r1, r8
 80177de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177e2:	3b30      	subs	r3, #48	; 0x30
 80177e4:	2b09      	cmp	r3, #9
 80177e6:	d969      	bls.n	80178bc <_vfiprintf_r+0x1a0>
 80177e8:	b360      	cbz	r0, 8017844 <_vfiprintf_r+0x128>
 80177ea:	e024      	b.n	8017836 <_vfiprintf_r+0x11a>
 80177ec:	4b50      	ldr	r3, [pc, #320]	; (8017930 <_vfiprintf_r+0x214>)
 80177ee:	429c      	cmp	r4, r3
 80177f0:	d101      	bne.n	80177f6 <_vfiprintf_r+0xda>
 80177f2:	68b4      	ldr	r4, [r6, #8]
 80177f4:	e7a2      	b.n	801773c <_vfiprintf_r+0x20>
 80177f6:	4b4f      	ldr	r3, [pc, #316]	; (8017934 <_vfiprintf_r+0x218>)
 80177f8:	429c      	cmp	r4, r3
 80177fa:	bf08      	it	eq
 80177fc:	68f4      	ldreq	r4, [r6, #12]
 80177fe:	e79d      	b.n	801773c <_vfiprintf_r+0x20>
 8017800:	4621      	mov	r1, r4
 8017802:	4630      	mov	r0, r6
 8017804:	f7fd fb9a 	bl	8014f3c <__swsetup_r>
 8017808:	2800      	cmp	r0, #0
 801780a:	d09d      	beq.n	8017748 <_vfiprintf_r+0x2c>
 801780c:	f04f 30ff 	mov.w	r0, #4294967295
 8017810:	b01d      	add	sp, #116	; 0x74
 8017812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017816:	46a8      	mov	r8, r5
 8017818:	e7a2      	b.n	8017760 <_vfiprintf_r+0x44>
 801781a:	4a44      	ldr	r2, [pc, #272]	; (801792c <_vfiprintf_r+0x210>)
 801781c:	1a80      	subs	r0, r0, r2
 801781e:	fa0b f000 	lsl.w	r0, fp, r0
 8017822:	4318      	orrs	r0, r3
 8017824:	9004      	str	r0, [sp, #16]
 8017826:	4645      	mov	r5, r8
 8017828:	e7be      	b.n	80177a8 <_vfiprintf_r+0x8c>
 801782a:	9a03      	ldr	r2, [sp, #12]
 801782c:	1d11      	adds	r1, r2, #4
 801782e:	6812      	ldr	r2, [r2, #0]
 8017830:	9103      	str	r1, [sp, #12]
 8017832:	2a00      	cmp	r2, #0
 8017834:	db01      	blt.n	801783a <_vfiprintf_r+0x11e>
 8017836:	9207      	str	r2, [sp, #28]
 8017838:	e004      	b.n	8017844 <_vfiprintf_r+0x128>
 801783a:	4252      	negs	r2, r2
 801783c:	f043 0302 	orr.w	r3, r3, #2
 8017840:	9207      	str	r2, [sp, #28]
 8017842:	9304      	str	r3, [sp, #16]
 8017844:	f898 3000 	ldrb.w	r3, [r8]
 8017848:	2b2e      	cmp	r3, #46	; 0x2e
 801784a:	d10e      	bne.n	801786a <_vfiprintf_r+0x14e>
 801784c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017850:	2b2a      	cmp	r3, #42	; 0x2a
 8017852:	d138      	bne.n	80178c6 <_vfiprintf_r+0x1aa>
 8017854:	9b03      	ldr	r3, [sp, #12]
 8017856:	1d1a      	adds	r2, r3, #4
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	9203      	str	r2, [sp, #12]
 801785c:	2b00      	cmp	r3, #0
 801785e:	bfb8      	it	lt
 8017860:	f04f 33ff 	movlt.w	r3, #4294967295
 8017864:	f108 0802 	add.w	r8, r8, #2
 8017868:	9305      	str	r3, [sp, #20]
 801786a:	4d33      	ldr	r5, [pc, #204]	; (8017938 <_vfiprintf_r+0x21c>)
 801786c:	f898 1000 	ldrb.w	r1, [r8]
 8017870:	2203      	movs	r2, #3
 8017872:	4628      	mov	r0, r5
 8017874:	f7e8 fccc 	bl	8000210 <memchr>
 8017878:	b140      	cbz	r0, 801788c <_vfiprintf_r+0x170>
 801787a:	2340      	movs	r3, #64	; 0x40
 801787c:	1b40      	subs	r0, r0, r5
 801787e:	fa03 f000 	lsl.w	r0, r3, r0
 8017882:	9b04      	ldr	r3, [sp, #16]
 8017884:	4303      	orrs	r3, r0
 8017886:	f108 0801 	add.w	r8, r8, #1
 801788a:	9304      	str	r3, [sp, #16]
 801788c:	f898 1000 	ldrb.w	r1, [r8]
 8017890:	482a      	ldr	r0, [pc, #168]	; (801793c <_vfiprintf_r+0x220>)
 8017892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017896:	2206      	movs	r2, #6
 8017898:	f108 0701 	add.w	r7, r8, #1
 801789c:	f7e8 fcb8 	bl	8000210 <memchr>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	d037      	beq.n	8017914 <_vfiprintf_r+0x1f8>
 80178a4:	4b26      	ldr	r3, [pc, #152]	; (8017940 <_vfiprintf_r+0x224>)
 80178a6:	bb1b      	cbnz	r3, 80178f0 <_vfiprintf_r+0x1d4>
 80178a8:	9b03      	ldr	r3, [sp, #12]
 80178aa:	3307      	adds	r3, #7
 80178ac:	f023 0307 	bic.w	r3, r3, #7
 80178b0:	3308      	adds	r3, #8
 80178b2:	9303      	str	r3, [sp, #12]
 80178b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b6:	444b      	add	r3, r9
 80178b8:	9309      	str	r3, [sp, #36]	; 0x24
 80178ba:	e750      	b.n	801775e <_vfiprintf_r+0x42>
 80178bc:	fb05 3202 	mla	r2, r5, r2, r3
 80178c0:	2001      	movs	r0, #1
 80178c2:	4688      	mov	r8, r1
 80178c4:	e78a      	b.n	80177dc <_vfiprintf_r+0xc0>
 80178c6:	2300      	movs	r3, #0
 80178c8:	f108 0801 	add.w	r8, r8, #1
 80178cc:	9305      	str	r3, [sp, #20]
 80178ce:	4619      	mov	r1, r3
 80178d0:	250a      	movs	r5, #10
 80178d2:	4640      	mov	r0, r8
 80178d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d8:	3a30      	subs	r2, #48	; 0x30
 80178da:	2a09      	cmp	r2, #9
 80178dc:	d903      	bls.n	80178e6 <_vfiprintf_r+0x1ca>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d0c3      	beq.n	801786a <_vfiprintf_r+0x14e>
 80178e2:	9105      	str	r1, [sp, #20]
 80178e4:	e7c1      	b.n	801786a <_vfiprintf_r+0x14e>
 80178e6:	fb05 2101 	mla	r1, r5, r1, r2
 80178ea:	2301      	movs	r3, #1
 80178ec:	4680      	mov	r8, r0
 80178ee:	e7f0      	b.n	80178d2 <_vfiprintf_r+0x1b6>
 80178f0:	ab03      	add	r3, sp, #12
 80178f2:	9300      	str	r3, [sp, #0]
 80178f4:	4622      	mov	r2, r4
 80178f6:	4b13      	ldr	r3, [pc, #76]	; (8017944 <_vfiprintf_r+0x228>)
 80178f8:	a904      	add	r1, sp, #16
 80178fa:	4630      	mov	r0, r6
 80178fc:	f7fb fce0 	bl	80132c0 <_printf_float>
 8017900:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017904:	4681      	mov	r9, r0
 8017906:	d1d5      	bne.n	80178b4 <_vfiprintf_r+0x198>
 8017908:	89a3      	ldrh	r3, [r4, #12]
 801790a:	065b      	lsls	r3, r3, #25
 801790c:	f53f af7e 	bmi.w	801780c <_vfiprintf_r+0xf0>
 8017910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017912:	e77d      	b.n	8017810 <_vfiprintf_r+0xf4>
 8017914:	ab03      	add	r3, sp, #12
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	4622      	mov	r2, r4
 801791a:	4b0a      	ldr	r3, [pc, #40]	; (8017944 <_vfiprintf_r+0x228>)
 801791c:	a904      	add	r1, sp, #16
 801791e:	4630      	mov	r0, r6
 8017920:	f7fb ff84 	bl	801382c <_printf_i>
 8017924:	e7ec      	b.n	8017900 <_vfiprintf_r+0x1e4>
 8017926:	bf00      	nop
 8017928:	08018858 	.word	0x08018858
 801792c:	080189a4 	.word	0x080189a4
 8017930:	08018878 	.word	0x08018878
 8017934:	08018838 	.word	0x08018838
 8017938:	080189aa 	.word	0x080189aa
 801793c:	080189ae 	.word	0x080189ae
 8017940:	080132c1 	.word	0x080132c1
 8017944:	080176f7 	.word	0x080176f7

08017948 <_scanf_chars>:
 8017948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801794c:	4615      	mov	r5, r2
 801794e:	688a      	ldr	r2, [r1, #8]
 8017950:	4680      	mov	r8, r0
 8017952:	460c      	mov	r4, r1
 8017954:	b932      	cbnz	r2, 8017964 <_scanf_chars+0x1c>
 8017956:	698a      	ldr	r2, [r1, #24]
 8017958:	2a00      	cmp	r2, #0
 801795a:	bf14      	ite	ne
 801795c:	f04f 32ff 	movne.w	r2, #4294967295
 8017960:	2201      	moveq	r2, #1
 8017962:	608a      	str	r2, [r1, #8]
 8017964:	6822      	ldr	r2, [r4, #0]
 8017966:	06d1      	lsls	r1, r2, #27
 8017968:	bf5f      	itttt	pl
 801796a:	681a      	ldrpl	r2, [r3, #0]
 801796c:	1d11      	addpl	r1, r2, #4
 801796e:	6019      	strpl	r1, [r3, #0]
 8017970:	6817      	ldrpl	r7, [r2, #0]
 8017972:	2600      	movs	r6, #0
 8017974:	69a3      	ldr	r3, [r4, #24]
 8017976:	b1db      	cbz	r3, 80179b0 <_scanf_chars+0x68>
 8017978:	2b01      	cmp	r3, #1
 801797a:	d107      	bne.n	801798c <_scanf_chars+0x44>
 801797c:	682b      	ldr	r3, [r5, #0]
 801797e:	6962      	ldr	r2, [r4, #20]
 8017980:	781b      	ldrb	r3, [r3, #0]
 8017982:	5cd3      	ldrb	r3, [r2, r3]
 8017984:	b9a3      	cbnz	r3, 80179b0 <_scanf_chars+0x68>
 8017986:	2e00      	cmp	r6, #0
 8017988:	d132      	bne.n	80179f0 <_scanf_chars+0xa8>
 801798a:	e006      	b.n	801799a <_scanf_chars+0x52>
 801798c:	2b02      	cmp	r3, #2
 801798e:	d007      	beq.n	80179a0 <_scanf_chars+0x58>
 8017990:	2e00      	cmp	r6, #0
 8017992:	d12d      	bne.n	80179f0 <_scanf_chars+0xa8>
 8017994:	69a3      	ldr	r3, [r4, #24]
 8017996:	2b01      	cmp	r3, #1
 8017998:	d12a      	bne.n	80179f0 <_scanf_chars+0xa8>
 801799a:	2001      	movs	r0, #1
 801799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179a0:	f7fe fe32 	bl	8016608 <__locale_ctype_ptr>
 80179a4:	682b      	ldr	r3, [r5, #0]
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	4418      	add	r0, r3
 80179aa:	7843      	ldrb	r3, [r0, #1]
 80179ac:	071b      	lsls	r3, r3, #28
 80179ae:	d4ef      	bmi.n	8017990 <_scanf_chars+0x48>
 80179b0:	6823      	ldr	r3, [r4, #0]
 80179b2:	06da      	lsls	r2, r3, #27
 80179b4:	bf5e      	ittt	pl
 80179b6:	682b      	ldrpl	r3, [r5, #0]
 80179b8:	781b      	ldrbpl	r3, [r3, #0]
 80179ba:	703b      	strbpl	r3, [r7, #0]
 80179bc:	682a      	ldr	r2, [r5, #0]
 80179be:	686b      	ldr	r3, [r5, #4]
 80179c0:	f102 0201 	add.w	r2, r2, #1
 80179c4:	602a      	str	r2, [r5, #0]
 80179c6:	68a2      	ldr	r2, [r4, #8]
 80179c8:	f103 33ff 	add.w	r3, r3, #4294967295
 80179cc:	f102 32ff 	add.w	r2, r2, #4294967295
 80179d0:	606b      	str	r3, [r5, #4]
 80179d2:	f106 0601 	add.w	r6, r6, #1
 80179d6:	bf58      	it	pl
 80179d8:	3701      	addpl	r7, #1
 80179da:	60a2      	str	r2, [r4, #8]
 80179dc:	b142      	cbz	r2, 80179f0 <_scanf_chars+0xa8>
 80179de:	2b00      	cmp	r3, #0
 80179e0:	dcc8      	bgt.n	8017974 <_scanf_chars+0x2c>
 80179e2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80179e6:	4629      	mov	r1, r5
 80179e8:	4640      	mov	r0, r8
 80179ea:	4798      	blx	r3
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d0c1      	beq.n	8017974 <_scanf_chars+0x2c>
 80179f0:	6823      	ldr	r3, [r4, #0]
 80179f2:	f013 0310 	ands.w	r3, r3, #16
 80179f6:	d105      	bne.n	8017a04 <_scanf_chars+0xbc>
 80179f8:	68e2      	ldr	r2, [r4, #12]
 80179fa:	3201      	adds	r2, #1
 80179fc:	60e2      	str	r2, [r4, #12]
 80179fe:	69a2      	ldr	r2, [r4, #24]
 8017a00:	b102      	cbz	r2, 8017a04 <_scanf_chars+0xbc>
 8017a02:	703b      	strb	r3, [r7, #0]
 8017a04:	6923      	ldr	r3, [r4, #16]
 8017a06:	441e      	add	r6, r3
 8017a08:	6126      	str	r6, [r4, #16]
 8017a0a:	2000      	movs	r0, #0
 8017a0c:	e7c6      	b.n	801799c <_scanf_chars+0x54>
	...

08017a10 <_scanf_i>:
 8017a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a14:	469a      	mov	sl, r3
 8017a16:	4b74      	ldr	r3, [pc, #464]	; (8017be8 <_scanf_i+0x1d8>)
 8017a18:	460c      	mov	r4, r1
 8017a1a:	4683      	mov	fp, r0
 8017a1c:	4616      	mov	r6, r2
 8017a1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017a22:	b087      	sub	sp, #28
 8017a24:	ab03      	add	r3, sp, #12
 8017a26:	68a7      	ldr	r7, [r4, #8]
 8017a28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017a2c:	4b6f      	ldr	r3, [pc, #444]	; (8017bec <_scanf_i+0x1dc>)
 8017a2e:	69a1      	ldr	r1, [r4, #24]
 8017a30:	4a6f      	ldr	r2, [pc, #444]	; (8017bf0 <_scanf_i+0x1e0>)
 8017a32:	2903      	cmp	r1, #3
 8017a34:	bf08      	it	eq
 8017a36:	461a      	moveq	r2, r3
 8017a38:	1e7b      	subs	r3, r7, #1
 8017a3a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017a3e:	bf84      	itt	hi
 8017a40:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017a44:	60a3      	strhi	r3, [r4, #8]
 8017a46:	6823      	ldr	r3, [r4, #0]
 8017a48:	9200      	str	r2, [sp, #0]
 8017a4a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017a4e:	bf88      	it	hi
 8017a50:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017a54:	f104 091c 	add.w	r9, r4, #28
 8017a58:	6023      	str	r3, [r4, #0]
 8017a5a:	bf8c      	ite	hi
 8017a5c:	197f      	addhi	r7, r7, r5
 8017a5e:	2700      	movls	r7, #0
 8017a60:	464b      	mov	r3, r9
 8017a62:	f04f 0800 	mov.w	r8, #0
 8017a66:	9301      	str	r3, [sp, #4]
 8017a68:	6831      	ldr	r1, [r6, #0]
 8017a6a:	ab03      	add	r3, sp, #12
 8017a6c:	2202      	movs	r2, #2
 8017a6e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017a72:	7809      	ldrb	r1, [r1, #0]
 8017a74:	f7e8 fbcc 	bl	8000210 <memchr>
 8017a78:	9b01      	ldr	r3, [sp, #4]
 8017a7a:	b330      	cbz	r0, 8017aca <_scanf_i+0xba>
 8017a7c:	f1b8 0f01 	cmp.w	r8, #1
 8017a80:	d15a      	bne.n	8017b38 <_scanf_i+0x128>
 8017a82:	6862      	ldr	r2, [r4, #4]
 8017a84:	b92a      	cbnz	r2, 8017a92 <_scanf_i+0x82>
 8017a86:	6822      	ldr	r2, [r4, #0]
 8017a88:	2108      	movs	r1, #8
 8017a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017a8e:	6061      	str	r1, [r4, #4]
 8017a90:	6022      	str	r2, [r4, #0]
 8017a92:	6822      	ldr	r2, [r4, #0]
 8017a94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017a98:	6022      	str	r2, [r4, #0]
 8017a9a:	68a2      	ldr	r2, [r4, #8]
 8017a9c:	1e51      	subs	r1, r2, #1
 8017a9e:	60a1      	str	r1, [r4, #8]
 8017aa0:	b19a      	cbz	r2, 8017aca <_scanf_i+0xba>
 8017aa2:	6832      	ldr	r2, [r6, #0]
 8017aa4:	1c51      	adds	r1, r2, #1
 8017aa6:	6031      	str	r1, [r6, #0]
 8017aa8:	7812      	ldrb	r2, [r2, #0]
 8017aaa:	701a      	strb	r2, [r3, #0]
 8017aac:	1c5d      	adds	r5, r3, #1
 8017aae:	6873      	ldr	r3, [r6, #4]
 8017ab0:	3b01      	subs	r3, #1
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	6073      	str	r3, [r6, #4]
 8017ab6:	dc07      	bgt.n	8017ac8 <_scanf_i+0xb8>
 8017ab8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017abc:	4631      	mov	r1, r6
 8017abe:	4658      	mov	r0, fp
 8017ac0:	4798      	blx	r3
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	f040 8086 	bne.w	8017bd4 <_scanf_i+0x1c4>
 8017ac8:	462b      	mov	r3, r5
 8017aca:	f108 0801 	add.w	r8, r8, #1
 8017ace:	f1b8 0f03 	cmp.w	r8, #3
 8017ad2:	d1c8      	bne.n	8017a66 <_scanf_i+0x56>
 8017ad4:	6862      	ldr	r2, [r4, #4]
 8017ad6:	b90a      	cbnz	r2, 8017adc <_scanf_i+0xcc>
 8017ad8:	220a      	movs	r2, #10
 8017ada:	6062      	str	r2, [r4, #4]
 8017adc:	6862      	ldr	r2, [r4, #4]
 8017ade:	4945      	ldr	r1, [pc, #276]	; (8017bf4 <_scanf_i+0x1e4>)
 8017ae0:	6960      	ldr	r0, [r4, #20]
 8017ae2:	9301      	str	r3, [sp, #4]
 8017ae4:	1a89      	subs	r1, r1, r2
 8017ae6:	f000 f8df 	bl	8017ca8 <__sccl>
 8017aea:	9b01      	ldr	r3, [sp, #4]
 8017aec:	f04f 0800 	mov.w	r8, #0
 8017af0:	461d      	mov	r5, r3
 8017af2:	68a3      	ldr	r3, [r4, #8]
 8017af4:	6822      	ldr	r2, [r4, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d03a      	beq.n	8017b70 <_scanf_i+0x160>
 8017afa:	6831      	ldr	r1, [r6, #0]
 8017afc:	6960      	ldr	r0, [r4, #20]
 8017afe:	f891 c000 	ldrb.w	ip, [r1]
 8017b02:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017b06:	2800      	cmp	r0, #0
 8017b08:	d032      	beq.n	8017b70 <_scanf_i+0x160>
 8017b0a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017b0e:	d121      	bne.n	8017b54 <_scanf_i+0x144>
 8017b10:	0510      	lsls	r0, r2, #20
 8017b12:	d51f      	bpl.n	8017b54 <_scanf_i+0x144>
 8017b14:	f108 0801 	add.w	r8, r8, #1
 8017b18:	b117      	cbz	r7, 8017b20 <_scanf_i+0x110>
 8017b1a:	3301      	adds	r3, #1
 8017b1c:	3f01      	subs	r7, #1
 8017b1e:	60a3      	str	r3, [r4, #8]
 8017b20:	6873      	ldr	r3, [r6, #4]
 8017b22:	3b01      	subs	r3, #1
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	6073      	str	r3, [r6, #4]
 8017b28:	dd1b      	ble.n	8017b62 <_scanf_i+0x152>
 8017b2a:	6833      	ldr	r3, [r6, #0]
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	6033      	str	r3, [r6, #0]
 8017b30:	68a3      	ldr	r3, [r4, #8]
 8017b32:	3b01      	subs	r3, #1
 8017b34:	60a3      	str	r3, [r4, #8]
 8017b36:	e7dc      	b.n	8017af2 <_scanf_i+0xe2>
 8017b38:	f1b8 0f02 	cmp.w	r8, #2
 8017b3c:	d1ad      	bne.n	8017a9a <_scanf_i+0x8a>
 8017b3e:	6822      	ldr	r2, [r4, #0]
 8017b40:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017b44:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017b48:	d1bf      	bne.n	8017aca <_scanf_i+0xba>
 8017b4a:	2110      	movs	r1, #16
 8017b4c:	6061      	str	r1, [r4, #4]
 8017b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017b52:	e7a1      	b.n	8017a98 <_scanf_i+0x88>
 8017b54:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017b58:	6022      	str	r2, [r4, #0]
 8017b5a:	780b      	ldrb	r3, [r1, #0]
 8017b5c:	702b      	strb	r3, [r5, #0]
 8017b5e:	3501      	adds	r5, #1
 8017b60:	e7de      	b.n	8017b20 <_scanf_i+0x110>
 8017b62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017b66:	4631      	mov	r1, r6
 8017b68:	4658      	mov	r0, fp
 8017b6a:	4798      	blx	r3
 8017b6c:	2800      	cmp	r0, #0
 8017b6e:	d0df      	beq.n	8017b30 <_scanf_i+0x120>
 8017b70:	6823      	ldr	r3, [r4, #0]
 8017b72:	05d9      	lsls	r1, r3, #23
 8017b74:	d50c      	bpl.n	8017b90 <_scanf_i+0x180>
 8017b76:	454d      	cmp	r5, r9
 8017b78:	d908      	bls.n	8017b8c <_scanf_i+0x17c>
 8017b7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017b7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017b82:	4632      	mov	r2, r6
 8017b84:	4658      	mov	r0, fp
 8017b86:	4798      	blx	r3
 8017b88:	1e6f      	subs	r7, r5, #1
 8017b8a:	463d      	mov	r5, r7
 8017b8c:	454d      	cmp	r5, r9
 8017b8e:	d029      	beq.n	8017be4 <_scanf_i+0x1d4>
 8017b90:	6822      	ldr	r2, [r4, #0]
 8017b92:	f012 0210 	ands.w	r2, r2, #16
 8017b96:	d113      	bne.n	8017bc0 <_scanf_i+0x1b0>
 8017b98:	702a      	strb	r2, [r5, #0]
 8017b9a:	6863      	ldr	r3, [r4, #4]
 8017b9c:	9e00      	ldr	r6, [sp, #0]
 8017b9e:	4649      	mov	r1, r9
 8017ba0:	4658      	mov	r0, fp
 8017ba2:	47b0      	blx	r6
 8017ba4:	f8da 3000 	ldr.w	r3, [sl]
 8017ba8:	6821      	ldr	r1, [r4, #0]
 8017baa:	1d1a      	adds	r2, r3, #4
 8017bac:	f8ca 2000 	str.w	r2, [sl]
 8017bb0:	f011 0f20 	tst.w	r1, #32
 8017bb4:	681b      	ldr	r3, [r3, #0]
 8017bb6:	d010      	beq.n	8017bda <_scanf_i+0x1ca>
 8017bb8:	6018      	str	r0, [r3, #0]
 8017bba:	68e3      	ldr	r3, [r4, #12]
 8017bbc:	3301      	adds	r3, #1
 8017bbe:	60e3      	str	r3, [r4, #12]
 8017bc0:	eba5 0509 	sub.w	r5, r5, r9
 8017bc4:	44a8      	add	r8, r5
 8017bc6:	6925      	ldr	r5, [r4, #16]
 8017bc8:	4445      	add	r5, r8
 8017bca:	6125      	str	r5, [r4, #16]
 8017bcc:	2000      	movs	r0, #0
 8017bce:	b007      	add	sp, #28
 8017bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bd4:	f04f 0800 	mov.w	r8, #0
 8017bd8:	e7ca      	b.n	8017b70 <_scanf_i+0x160>
 8017bda:	07ca      	lsls	r2, r1, #31
 8017bdc:	bf4c      	ite	mi
 8017bde:	8018      	strhmi	r0, [r3, #0]
 8017be0:	6018      	strpl	r0, [r3, #0]
 8017be2:	e7ea      	b.n	8017bba <_scanf_i+0x1aa>
 8017be4:	2001      	movs	r0, #1
 8017be6:	e7f2      	b.n	8017bce <_scanf_i+0x1be>
 8017be8:	08018500 	.word	0x08018500
 8017bec:	08014e11 	.word	0x08014e11
 8017bf0:	08017e25 	.word	0x08017e25
 8017bf4:	080189c5 	.word	0x080189c5

08017bf8 <_putc_r>:
 8017bf8:	b570      	push	{r4, r5, r6, lr}
 8017bfa:	460d      	mov	r5, r1
 8017bfc:	4614      	mov	r4, r2
 8017bfe:	4606      	mov	r6, r0
 8017c00:	b118      	cbz	r0, 8017c0a <_putc_r+0x12>
 8017c02:	6983      	ldr	r3, [r0, #24]
 8017c04:	b90b      	cbnz	r3, 8017c0a <_putc_r+0x12>
 8017c06:	f7fe f94b 	bl	8015ea0 <__sinit>
 8017c0a:	4b13      	ldr	r3, [pc, #76]	; (8017c58 <_putc_r+0x60>)
 8017c0c:	429c      	cmp	r4, r3
 8017c0e:	d112      	bne.n	8017c36 <_putc_r+0x3e>
 8017c10:	6874      	ldr	r4, [r6, #4]
 8017c12:	68a3      	ldr	r3, [r4, #8]
 8017c14:	3b01      	subs	r3, #1
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	60a3      	str	r3, [r4, #8]
 8017c1a:	da16      	bge.n	8017c4a <_putc_r+0x52>
 8017c1c:	69a2      	ldr	r2, [r4, #24]
 8017c1e:	4293      	cmp	r3, r2
 8017c20:	db02      	blt.n	8017c28 <_putc_r+0x30>
 8017c22:	b2eb      	uxtb	r3, r5
 8017c24:	2b0a      	cmp	r3, #10
 8017c26:	d110      	bne.n	8017c4a <_putc_r+0x52>
 8017c28:	4622      	mov	r2, r4
 8017c2a:	4629      	mov	r1, r5
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c32:	f7fd b91f 	b.w	8014e74 <__swbuf_r>
 8017c36:	4b09      	ldr	r3, [pc, #36]	; (8017c5c <_putc_r+0x64>)
 8017c38:	429c      	cmp	r4, r3
 8017c3a:	d101      	bne.n	8017c40 <_putc_r+0x48>
 8017c3c:	68b4      	ldr	r4, [r6, #8]
 8017c3e:	e7e8      	b.n	8017c12 <_putc_r+0x1a>
 8017c40:	4b07      	ldr	r3, [pc, #28]	; (8017c60 <_putc_r+0x68>)
 8017c42:	429c      	cmp	r4, r3
 8017c44:	bf08      	it	eq
 8017c46:	68f4      	ldreq	r4, [r6, #12]
 8017c48:	e7e3      	b.n	8017c12 <_putc_r+0x1a>
 8017c4a:	6823      	ldr	r3, [r4, #0]
 8017c4c:	1c5a      	adds	r2, r3, #1
 8017c4e:	6022      	str	r2, [r4, #0]
 8017c50:	701d      	strb	r5, [r3, #0]
 8017c52:	b2e8      	uxtb	r0, r5
 8017c54:	bd70      	pop	{r4, r5, r6, pc}
 8017c56:	bf00      	nop
 8017c58:	08018858 	.word	0x08018858
 8017c5c:	08018878 	.word	0x08018878
 8017c60:	08018838 	.word	0x08018838

08017c64 <_read_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4c07      	ldr	r4, [pc, #28]	; (8017c84 <_read_r+0x20>)
 8017c68:	4605      	mov	r5, r0
 8017c6a:	4608      	mov	r0, r1
 8017c6c:	4611      	mov	r1, r2
 8017c6e:	2200      	movs	r2, #0
 8017c70:	6022      	str	r2, [r4, #0]
 8017c72:	461a      	mov	r2, r3
 8017c74:	f7ee f8ce 	bl	8005e14 <_read>
 8017c78:	1c43      	adds	r3, r0, #1
 8017c7a:	d102      	bne.n	8017c82 <_read_r+0x1e>
 8017c7c:	6823      	ldr	r3, [r4, #0]
 8017c7e:	b103      	cbz	r3, 8017c82 <_read_r+0x1e>
 8017c80:	602b      	str	r3, [r5, #0]
 8017c82:	bd38      	pop	{r3, r4, r5, pc}
 8017c84:	20037fa4 	.word	0x20037fa4

08017c88 <_sbrk_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	4c06      	ldr	r4, [pc, #24]	; (8017ca4 <_sbrk_r+0x1c>)
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	4605      	mov	r5, r0
 8017c90:	4608      	mov	r0, r1
 8017c92:	6023      	str	r3, [r4, #0]
 8017c94:	f7ee f910 	bl	8005eb8 <_sbrk>
 8017c98:	1c43      	adds	r3, r0, #1
 8017c9a:	d102      	bne.n	8017ca2 <_sbrk_r+0x1a>
 8017c9c:	6823      	ldr	r3, [r4, #0]
 8017c9e:	b103      	cbz	r3, 8017ca2 <_sbrk_r+0x1a>
 8017ca0:	602b      	str	r3, [r5, #0]
 8017ca2:	bd38      	pop	{r3, r4, r5, pc}
 8017ca4:	20037fa4 	.word	0x20037fa4

08017ca8 <__sccl>:
 8017ca8:	b570      	push	{r4, r5, r6, lr}
 8017caa:	780b      	ldrb	r3, [r1, #0]
 8017cac:	2b5e      	cmp	r3, #94	; 0x5e
 8017cae:	bf13      	iteet	ne
 8017cb0:	1c4a      	addne	r2, r1, #1
 8017cb2:	1c8a      	addeq	r2, r1, #2
 8017cb4:	784b      	ldrbeq	r3, [r1, #1]
 8017cb6:	2100      	movne	r1, #0
 8017cb8:	bf08      	it	eq
 8017cba:	2101      	moveq	r1, #1
 8017cbc:	1e44      	subs	r4, r0, #1
 8017cbe:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017cc2:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017cc6:	42ac      	cmp	r4, r5
 8017cc8:	d1fb      	bne.n	8017cc2 <__sccl+0x1a>
 8017cca:	b913      	cbnz	r3, 8017cd2 <__sccl+0x2a>
 8017ccc:	3a01      	subs	r2, #1
 8017cce:	4610      	mov	r0, r2
 8017cd0:	bd70      	pop	{r4, r5, r6, pc}
 8017cd2:	f081 0401 	eor.w	r4, r1, #1
 8017cd6:	54c4      	strb	r4, [r0, r3]
 8017cd8:	1c51      	adds	r1, r2, #1
 8017cda:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017cde:	2d2d      	cmp	r5, #45	; 0x2d
 8017ce0:	f101 36ff 	add.w	r6, r1, #4294967295
 8017ce4:	460a      	mov	r2, r1
 8017ce6:	d006      	beq.n	8017cf6 <__sccl+0x4e>
 8017ce8:	2d5d      	cmp	r5, #93	; 0x5d
 8017cea:	d0f0      	beq.n	8017cce <__sccl+0x26>
 8017cec:	b90d      	cbnz	r5, 8017cf2 <__sccl+0x4a>
 8017cee:	4632      	mov	r2, r6
 8017cf0:	e7ed      	b.n	8017cce <__sccl+0x26>
 8017cf2:	462b      	mov	r3, r5
 8017cf4:	e7ef      	b.n	8017cd6 <__sccl+0x2e>
 8017cf6:	780e      	ldrb	r6, [r1, #0]
 8017cf8:	2e5d      	cmp	r6, #93	; 0x5d
 8017cfa:	d0fa      	beq.n	8017cf2 <__sccl+0x4a>
 8017cfc:	42b3      	cmp	r3, r6
 8017cfe:	dcf8      	bgt.n	8017cf2 <__sccl+0x4a>
 8017d00:	3301      	adds	r3, #1
 8017d02:	429e      	cmp	r6, r3
 8017d04:	54c4      	strb	r4, [r0, r3]
 8017d06:	dcfb      	bgt.n	8017d00 <__sccl+0x58>
 8017d08:	3102      	adds	r1, #2
 8017d0a:	e7e6      	b.n	8017cda <__sccl+0x32>

08017d0c <strncmp>:
 8017d0c:	b510      	push	{r4, lr}
 8017d0e:	b16a      	cbz	r2, 8017d2c <strncmp+0x20>
 8017d10:	3901      	subs	r1, #1
 8017d12:	1884      	adds	r4, r0, r2
 8017d14:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017d18:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	d103      	bne.n	8017d28 <strncmp+0x1c>
 8017d20:	42a0      	cmp	r0, r4
 8017d22:	d001      	beq.n	8017d28 <strncmp+0x1c>
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d1f5      	bne.n	8017d14 <strncmp+0x8>
 8017d28:	1a98      	subs	r0, r3, r2
 8017d2a:	bd10      	pop	{r4, pc}
 8017d2c:	4610      	mov	r0, r2
 8017d2e:	e7fc      	b.n	8017d2a <strncmp+0x1e>

08017d30 <_strtoul_l.isra.0>:
 8017d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d34:	4680      	mov	r8, r0
 8017d36:	4689      	mov	r9, r1
 8017d38:	4692      	mov	sl, r2
 8017d3a:	461e      	mov	r6, r3
 8017d3c:	460f      	mov	r7, r1
 8017d3e:	463d      	mov	r5, r7
 8017d40:	9808      	ldr	r0, [sp, #32]
 8017d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017d46:	f7fe fc5b 	bl	8016600 <__locale_ctype_ptr_l>
 8017d4a:	4420      	add	r0, r4
 8017d4c:	7843      	ldrb	r3, [r0, #1]
 8017d4e:	f013 0308 	ands.w	r3, r3, #8
 8017d52:	d130      	bne.n	8017db6 <_strtoul_l.isra.0+0x86>
 8017d54:	2c2d      	cmp	r4, #45	; 0x2d
 8017d56:	d130      	bne.n	8017dba <_strtoul_l.isra.0+0x8a>
 8017d58:	787c      	ldrb	r4, [r7, #1]
 8017d5a:	1cbd      	adds	r5, r7, #2
 8017d5c:	2101      	movs	r1, #1
 8017d5e:	2e00      	cmp	r6, #0
 8017d60:	d05c      	beq.n	8017e1c <_strtoul_l.isra.0+0xec>
 8017d62:	2e10      	cmp	r6, #16
 8017d64:	d109      	bne.n	8017d7a <_strtoul_l.isra.0+0x4a>
 8017d66:	2c30      	cmp	r4, #48	; 0x30
 8017d68:	d107      	bne.n	8017d7a <_strtoul_l.isra.0+0x4a>
 8017d6a:	782b      	ldrb	r3, [r5, #0]
 8017d6c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017d70:	2b58      	cmp	r3, #88	; 0x58
 8017d72:	d14e      	bne.n	8017e12 <_strtoul_l.isra.0+0xe2>
 8017d74:	786c      	ldrb	r4, [r5, #1]
 8017d76:	2610      	movs	r6, #16
 8017d78:	3502      	adds	r5, #2
 8017d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8017d7e:	2300      	movs	r3, #0
 8017d80:	fbb2 f2f6 	udiv	r2, r2, r6
 8017d84:	fb06 fc02 	mul.w	ip, r6, r2
 8017d88:	ea6f 0c0c 	mvn.w	ip, ip
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8017d92:	2f09      	cmp	r7, #9
 8017d94:	d817      	bhi.n	8017dc6 <_strtoul_l.isra.0+0x96>
 8017d96:	463c      	mov	r4, r7
 8017d98:	42a6      	cmp	r6, r4
 8017d9a:	dd23      	ble.n	8017de4 <_strtoul_l.isra.0+0xb4>
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	db1e      	blt.n	8017dde <_strtoul_l.isra.0+0xae>
 8017da0:	4282      	cmp	r2, r0
 8017da2:	d31c      	bcc.n	8017dde <_strtoul_l.isra.0+0xae>
 8017da4:	d101      	bne.n	8017daa <_strtoul_l.isra.0+0x7a>
 8017da6:	45a4      	cmp	ip, r4
 8017da8:	db19      	blt.n	8017dde <_strtoul_l.isra.0+0xae>
 8017daa:	fb00 4006 	mla	r0, r0, r6, r4
 8017dae:	2301      	movs	r3, #1
 8017db0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017db4:	e7eb      	b.n	8017d8e <_strtoul_l.isra.0+0x5e>
 8017db6:	462f      	mov	r7, r5
 8017db8:	e7c1      	b.n	8017d3e <_strtoul_l.isra.0+0xe>
 8017dba:	2c2b      	cmp	r4, #43	; 0x2b
 8017dbc:	bf04      	itt	eq
 8017dbe:	1cbd      	addeq	r5, r7, #2
 8017dc0:	787c      	ldrbeq	r4, [r7, #1]
 8017dc2:	4619      	mov	r1, r3
 8017dc4:	e7cb      	b.n	8017d5e <_strtoul_l.isra.0+0x2e>
 8017dc6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017dca:	2f19      	cmp	r7, #25
 8017dcc:	d801      	bhi.n	8017dd2 <_strtoul_l.isra.0+0xa2>
 8017dce:	3c37      	subs	r4, #55	; 0x37
 8017dd0:	e7e2      	b.n	8017d98 <_strtoul_l.isra.0+0x68>
 8017dd2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017dd6:	2f19      	cmp	r7, #25
 8017dd8:	d804      	bhi.n	8017de4 <_strtoul_l.isra.0+0xb4>
 8017dda:	3c57      	subs	r4, #87	; 0x57
 8017ddc:	e7dc      	b.n	8017d98 <_strtoul_l.isra.0+0x68>
 8017dde:	f04f 33ff 	mov.w	r3, #4294967295
 8017de2:	e7e5      	b.n	8017db0 <_strtoul_l.isra.0+0x80>
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	da09      	bge.n	8017dfc <_strtoul_l.isra.0+0xcc>
 8017de8:	2322      	movs	r3, #34	; 0x22
 8017dea:	f8c8 3000 	str.w	r3, [r8]
 8017dee:	f04f 30ff 	mov.w	r0, #4294967295
 8017df2:	f1ba 0f00 	cmp.w	sl, #0
 8017df6:	d107      	bne.n	8017e08 <_strtoul_l.isra.0+0xd8>
 8017df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfc:	b101      	cbz	r1, 8017e00 <_strtoul_l.isra.0+0xd0>
 8017dfe:	4240      	negs	r0, r0
 8017e00:	f1ba 0f00 	cmp.w	sl, #0
 8017e04:	d0f8      	beq.n	8017df8 <_strtoul_l.isra.0+0xc8>
 8017e06:	b10b      	cbz	r3, 8017e0c <_strtoul_l.isra.0+0xdc>
 8017e08:	f105 39ff 	add.w	r9, r5, #4294967295
 8017e0c:	f8ca 9000 	str.w	r9, [sl]
 8017e10:	e7f2      	b.n	8017df8 <_strtoul_l.isra.0+0xc8>
 8017e12:	2430      	movs	r4, #48	; 0x30
 8017e14:	2e00      	cmp	r6, #0
 8017e16:	d1b0      	bne.n	8017d7a <_strtoul_l.isra.0+0x4a>
 8017e18:	2608      	movs	r6, #8
 8017e1a:	e7ae      	b.n	8017d7a <_strtoul_l.isra.0+0x4a>
 8017e1c:	2c30      	cmp	r4, #48	; 0x30
 8017e1e:	d0a4      	beq.n	8017d6a <_strtoul_l.isra.0+0x3a>
 8017e20:	260a      	movs	r6, #10
 8017e22:	e7aa      	b.n	8017d7a <_strtoul_l.isra.0+0x4a>

08017e24 <_strtoul_r>:
 8017e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e26:	4c06      	ldr	r4, [pc, #24]	; (8017e40 <_strtoul_r+0x1c>)
 8017e28:	4d06      	ldr	r5, [pc, #24]	; (8017e44 <_strtoul_r+0x20>)
 8017e2a:	6824      	ldr	r4, [r4, #0]
 8017e2c:	6a24      	ldr	r4, [r4, #32]
 8017e2e:	2c00      	cmp	r4, #0
 8017e30:	bf08      	it	eq
 8017e32:	462c      	moveq	r4, r5
 8017e34:	9400      	str	r4, [sp, #0]
 8017e36:	f7ff ff7b 	bl	8017d30 <_strtoul_l.isra.0>
 8017e3a:	b003      	add	sp, #12
 8017e3c:	bd30      	pop	{r4, r5, pc}
 8017e3e:	bf00      	nop
 8017e40:	2000000c 	.word	0x2000000c
 8017e44:	20000070 	.word	0x20000070

08017e48 <__submore>:
 8017e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e4c:	460c      	mov	r4, r1
 8017e4e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017e50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e54:	4299      	cmp	r1, r3
 8017e56:	d11d      	bne.n	8017e94 <__submore+0x4c>
 8017e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017e5c:	f7ff f8de 	bl	801701c <_malloc_r>
 8017e60:	b918      	cbnz	r0, 8017e6a <__submore+0x22>
 8017e62:	f04f 30ff 	mov.w	r0, #4294967295
 8017e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e6e:	63a3      	str	r3, [r4, #56]	; 0x38
 8017e70:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017e74:	6360      	str	r0, [r4, #52]	; 0x34
 8017e76:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017e7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8017e7e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8017e82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017e86:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017e8a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8017e8e:	6020      	str	r0, [r4, #0]
 8017e90:	2000      	movs	r0, #0
 8017e92:	e7e8      	b.n	8017e66 <__submore+0x1e>
 8017e94:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017e96:	0077      	lsls	r7, r6, #1
 8017e98:	463a      	mov	r2, r7
 8017e9a:	f000 f85a 	bl	8017f52 <_realloc_r>
 8017e9e:	4605      	mov	r5, r0
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d0de      	beq.n	8017e62 <__submore+0x1a>
 8017ea4:	eb00 0806 	add.w	r8, r0, r6
 8017ea8:	4601      	mov	r1, r0
 8017eaa:	4632      	mov	r2, r6
 8017eac:	4640      	mov	r0, r8
 8017eae:	f7fb f95f 	bl	8013170 <memcpy>
 8017eb2:	f8c4 8000 	str.w	r8, [r4]
 8017eb6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017eba:	e7e9      	b.n	8017e90 <__submore+0x48>

08017ebc <__ascii_wctomb>:
 8017ebc:	b149      	cbz	r1, 8017ed2 <__ascii_wctomb+0x16>
 8017ebe:	2aff      	cmp	r2, #255	; 0xff
 8017ec0:	bf85      	ittet	hi
 8017ec2:	238a      	movhi	r3, #138	; 0x8a
 8017ec4:	6003      	strhi	r3, [r0, #0]
 8017ec6:	700a      	strbls	r2, [r1, #0]
 8017ec8:	f04f 30ff 	movhi.w	r0, #4294967295
 8017ecc:	bf98      	it	ls
 8017ece:	2001      	movls	r0, #1
 8017ed0:	4770      	bx	lr
 8017ed2:	4608      	mov	r0, r1
 8017ed4:	4770      	bx	lr
	...

08017ed8 <_fstat_r>:
 8017ed8:	b538      	push	{r3, r4, r5, lr}
 8017eda:	4c07      	ldr	r4, [pc, #28]	; (8017ef8 <_fstat_r+0x20>)
 8017edc:	2300      	movs	r3, #0
 8017ede:	4605      	mov	r5, r0
 8017ee0:	4608      	mov	r0, r1
 8017ee2:	4611      	mov	r1, r2
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	f7ed ffbe 	bl	8005e66 <_fstat>
 8017eea:	1c43      	adds	r3, r0, #1
 8017eec:	d102      	bne.n	8017ef4 <_fstat_r+0x1c>
 8017eee:	6823      	ldr	r3, [r4, #0]
 8017ef0:	b103      	cbz	r3, 8017ef4 <_fstat_r+0x1c>
 8017ef2:	602b      	str	r3, [r5, #0]
 8017ef4:	bd38      	pop	{r3, r4, r5, pc}
 8017ef6:	bf00      	nop
 8017ef8:	20037fa4 	.word	0x20037fa4

08017efc <_isatty_r>:
 8017efc:	b538      	push	{r3, r4, r5, lr}
 8017efe:	4c06      	ldr	r4, [pc, #24]	; (8017f18 <_isatty_r+0x1c>)
 8017f00:	2300      	movs	r3, #0
 8017f02:	4605      	mov	r5, r0
 8017f04:	4608      	mov	r0, r1
 8017f06:	6023      	str	r3, [r4, #0]
 8017f08:	f7ed ffbd 	bl	8005e86 <_isatty>
 8017f0c:	1c43      	adds	r3, r0, #1
 8017f0e:	d102      	bne.n	8017f16 <_isatty_r+0x1a>
 8017f10:	6823      	ldr	r3, [r4, #0]
 8017f12:	b103      	cbz	r3, 8017f16 <_isatty_r+0x1a>
 8017f14:	602b      	str	r3, [r5, #0]
 8017f16:	bd38      	pop	{r3, r4, r5, pc}
 8017f18:	20037fa4 	.word	0x20037fa4

08017f1c <memmove>:
 8017f1c:	4288      	cmp	r0, r1
 8017f1e:	b510      	push	{r4, lr}
 8017f20:	eb01 0302 	add.w	r3, r1, r2
 8017f24:	d807      	bhi.n	8017f36 <memmove+0x1a>
 8017f26:	1e42      	subs	r2, r0, #1
 8017f28:	4299      	cmp	r1, r3
 8017f2a:	d00a      	beq.n	8017f42 <memmove+0x26>
 8017f2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f30:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017f34:	e7f8      	b.n	8017f28 <memmove+0xc>
 8017f36:	4283      	cmp	r3, r0
 8017f38:	d9f5      	bls.n	8017f26 <memmove+0xa>
 8017f3a:	1881      	adds	r1, r0, r2
 8017f3c:	1ad2      	subs	r2, r2, r3
 8017f3e:	42d3      	cmn	r3, r2
 8017f40:	d100      	bne.n	8017f44 <memmove+0x28>
 8017f42:	bd10      	pop	{r4, pc}
 8017f44:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017f48:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017f4c:	e7f7      	b.n	8017f3e <memmove+0x22>

08017f4e <__malloc_lock>:
 8017f4e:	4770      	bx	lr

08017f50 <__malloc_unlock>:
 8017f50:	4770      	bx	lr

08017f52 <_realloc_r>:
 8017f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f54:	4607      	mov	r7, r0
 8017f56:	4614      	mov	r4, r2
 8017f58:	460e      	mov	r6, r1
 8017f5a:	b921      	cbnz	r1, 8017f66 <_realloc_r+0x14>
 8017f5c:	4611      	mov	r1, r2
 8017f5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f62:	f7ff b85b 	b.w	801701c <_malloc_r>
 8017f66:	b922      	cbnz	r2, 8017f72 <_realloc_r+0x20>
 8017f68:	f7ff f80a 	bl	8016f80 <_free_r>
 8017f6c:	4625      	mov	r5, r4
 8017f6e:	4628      	mov	r0, r5
 8017f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f72:	f000 f814 	bl	8017f9e <_malloc_usable_size_r>
 8017f76:	42a0      	cmp	r0, r4
 8017f78:	d20f      	bcs.n	8017f9a <_realloc_r+0x48>
 8017f7a:	4621      	mov	r1, r4
 8017f7c:	4638      	mov	r0, r7
 8017f7e:	f7ff f84d 	bl	801701c <_malloc_r>
 8017f82:	4605      	mov	r5, r0
 8017f84:	2800      	cmp	r0, #0
 8017f86:	d0f2      	beq.n	8017f6e <_realloc_r+0x1c>
 8017f88:	4631      	mov	r1, r6
 8017f8a:	4622      	mov	r2, r4
 8017f8c:	f7fb f8f0 	bl	8013170 <memcpy>
 8017f90:	4631      	mov	r1, r6
 8017f92:	4638      	mov	r0, r7
 8017f94:	f7fe fff4 	bl	8016f80 <_free_r>
 8017f98:	e7e9      	b.n	8017f6e <_realloc_r+0x1c>
 8017f9a:	4635      	mov	r5, r6
 8017f9c:	e7e7      	b.n	8017f6e <_realloc_r+0x1c>

08017f9e <_malloc_usable_size_r>:
 8017f9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017fa2:	1f18      	subs	r0, r3, #4
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	bfbc      	itt	lt
 8017fa8:	580b      	ldrlt	r3, [r1, r0]
 8017faa:	18c0      	addlt	r0, r0, r3
 8017fac:	4770      	bx	lr
	...

08017fb0 <_init>:
 8017fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fb2:	bf00      	nop
 8017fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fb6:	bc08      	pop	{r3}
 8017fb8:	469e      	mov	lr, r3
 8017fba:	4770      	bx	lr

08017fbc <_fini>:
 8017fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017fbe:	bf00      	nop
 8017fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017fc2:	bc08      	pop	{r3}
 8017fc4:	469e      	mov	lr, r3
 8017fc6:	4770      	bx	lr
