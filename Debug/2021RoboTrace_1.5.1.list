
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017294  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a54  08017458  08017458  00027458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017eac  08017eac  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017eac  08017eac  00027eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017eb4  08017eb4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017eb4  08017eb4  00027eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ebc  08017ebc  00027ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017ec0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f8d0  200001e0  0801809c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  2002fab0  0801809c  0003fab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037268  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007a25  00000000  00000000  00067474  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021a0  00000000  00000000  0006eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ed0  00000000  00000000  00071040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000376c4  00000000  00000000  00072f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00025ac8  00000000  00000000  000aa5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011064e  00000000  00000000  000d009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e06ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a318  00000000  00000000  001e0768  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801743c 	.word	0x0801743c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0801743c 	.word	0x0801743c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f007 f9ce 	bl	8008378 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2002d5a8 	.word	0x2002d5a8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f007 f9b6 	bl	8008378 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2002d5a8 	.word	0x2002d5a8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f007 f83f 	bl	80080a4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fda6 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fda0 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fd9a 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fd94 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fd8e 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fd88 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 fd82 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 fd7c 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 fd76 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 fd70 	bl	8006b78 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 fd64 	bl	8006b78 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 fd5e 	bl	8006b78 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 f915 	bl	8014358 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a ff6e 	bl	800c0a8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a ff6a 	bl	800c0a8 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2002d7fc 	.word	0x2002d7fc
 80011f0:	2002d4e0 	.word	0x2002d4e0
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f993 	bl	8001784 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 f9a7 	bl	80017b0 <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fb70 	bl	8010b5c <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2002c3ec 	.word	0x2002c3ec

0800148c <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write_float+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write_float+0x98>)
 80014c6:	f011 ffb7 	bl	8013438 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write_float+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write_float+0x9c>)
 80014d8:	f00f fbb4 	bl	8010c44 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write_float+0x9c>)
 80014e2:	f00f fbaf 	bl	8010c44 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write_float+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write_float+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write_float+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write_float+0x9c>)
 80014f4:	f00f f91d 	bl	8010732 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 f974 	bl	80017e4 <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write_float+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017458 	.word	0x08017458
 8001524:	2002c35c 	.word	0x2002c35c
 8001528:	2002c3ec 	.word	0x2002c3ec
 800152c:	2002c3dc 	.word	0x2002c3dc

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f91c 	bl	8001784 <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fb2b 	bl	8010bb0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fd96 	bl	801108c <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fb25 	bl	8010bb0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f923 	bl	80017b0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f011 ff52 	bl	8013438 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fb52 	bl	8010c44 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f f8c0 	bl	8010732 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f917 	bl	80017e4 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fac4 	bl	8010b5c <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2002c25c 	.word	0x2002c25c
 80015e4:	2002b11c 	.word	0x2002b11c
 80015e8:	08017474 	.word	0x08017474
 80015ec:	08017458 	.word	0x08017458
 80015f0:	2002c35c 	.word	0x2002c35c
 80015f4:	2002c3ec 	.word	0x2002c3ec
 80015f8:	2002c3dc 	.word	0x2002c3dc

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f8b6 	bl	8001784 <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fac5 	bl	8010bb0 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fd30 	bl	801108c <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fabf 	bl	8010bb0 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f8bd 	bl	80017b0 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%lf\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f011 fef0 	bl	8013438 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f faf0 	bl	8010c44 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f85e 	bl	8010732 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f8b5 	bl	80017e4 <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fa62 	bl	8010b5c <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2002c25c 	.word	0x2002c25c
 80016a8:	2002b11c 	.word	0x2002b11c
 80016ac:	08017474 	.word	0x08017474
 80016b0:	08017468 	.word	0x08017468
 80016b4:	2002c35c 	.word	0x2002c35c
 80016b8:	2002c3ec 	.word	0x2002c3ec
 80016bc:	2002c3dc 	.word	0x2002c3dc

080016c0 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f000 f852 	bl	8001784 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016e0:	f000 f866 	bl	80017b0 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016e4:	e019      	b.n	800171a <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80016e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	461a      	mov	r2, r3
 80016f2:	4913      	ldr	r1, [pc, #76]	; (8001740 <sd_read_array_double+0x80>)
 80016f4:	4813      	ldr	r0, [pc, #76]	; (8001744 <sd_read_array_double+0x84>)
 80016f6:	f011 fef3 	bl	80134e0 <siscanf>
		i++;
 80016fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3301      	adds	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001706:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800170a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800170e:	429a      	cmp	r2, r3
 8001710:	db03      	blt.n	800171a <sd_read_array_double+0x5a>
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800171a:	4a0b      	ldr	r2, [pc, #44]	; (8001748 <sd_read_array_double+0x88>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <sd_read_array_double+0x84>)
 8001720:	f00f fe92 	bl	8011448 <f_gets>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1dd      	bne.n	80016e6 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800172a:	f000 f85b 	bl	80017e4 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800172e:	4806      	ldr	r0, [pc, #24]	; (8001748 <sd_read_array_double+0x88>)
 8001730:	f00f fa14 	bl	8010b5c <f_close>

	return ret;
 8001734:	7d7b      	ldrb	r3, [r7, #21]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	08017470 	.word	0x08017470
 8001744:	2002c35c 	.word	0x2002c35c
 8001748:	2002c3ec 	.word	0x2002c3ec

0800174c <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001756:	2201      	movs	r2, #1
 8001758:	4908      	ldr	r1, [pc, #32]	; (800177c <sd_mount+0x30>)
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <sd_mount+0x34>)
 800175c:	f00e fc76 	bl	801004c <f_mount>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <sd_mount+0x20>
 8001766:	2301      	movs	r3, #1
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e001      	b.n	8001770 <sd_mount+0x24>
	else ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001770:	79fb      	ldrb	r3, [r7, #7]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	08017480 	.word	0x08017480
 8001780:	2002b21c 	.word	0x2002b21c

08001784 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	4805      	ldr	r0, [pc, #20]	; (80017a8 <create_path+0x24>)
 8001792:	f011 ff14 	bl	80135be <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001796:	6839      	ldr	r1, [r7, #0]
 8001798:	4804      	ldr	r0, [pc, #16]	; (80017ac <create_path+0x28>)
 800179a:	f011 ff10 	bl	80135be <strcpy>

}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2002c25c 	.word	0x2002c25c
 80017ac:	2002b11c 	.word	0x2002b11c

080017b0 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 80017b4:	4807      	ldr	r0, [pc, #28]	; (80017d4 <fopen_folder_and_file+0x24>)
 80017b6:	f00f fd2b 	bl	8011210 <f_mkdir>

	f_chdir(dirpath);
 80017ba:	4806      	ldr	r0, [pc, #24]	; (80017d4 <fopen_folder_and_file+0x24>)
 80017bc:	f00f f9f8 	bl	8010bb0 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80017c0:	2213      	movs	r2, #19
 80017c2:	4905      	ldr	r1, [pc, #20]	; (80017d8 <fopen_folder_and_file+0x28>)
 80017c4:	4805      	ldr	r0, [pc, #20]	; (80017dc <fopen_folder_and_file+0x2c>)
 80017c6:	f00e fc87 	bl	80100d8 <f_open>

	f_chdir("..");
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <fopen_folder_and_file+0x30>)
 80017cc:	f00f f9f0 	bl	8010bb0 <f_chdir>


}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2002c25c 	.word	0x2002c25c
 80017d8:	2002b11c 	.word	0x2002b11c
 80017dc:	2002c3ec 	.word	0x2002c3ec
 80017e0:	08017474 	.word	0x08017474

080017e4 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	e007      	b.n	8001800 <bufclear+0x1c>
		buffer[i] = '\0';
 80017f0:	4a08      	ldr	r2, [pc, #32]	; (8001814 <bufclear+0x30>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	2200      	movs	r2, #0
 80017f8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3301      	adds	r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2b7f      	cmp	r3, #127	; 0x7f
 8001804:	ddf4      	ble.n	80017f0 <bufclear+0xc>
	}
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	2002c35c 	.word	0x2002c35c

08001818 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001828:	b2db      	uxtb	r3, r3
 800182a:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	480e      	ldr	r0, [pc, #56]	; (800186c <read_byte+0x54>)
 8001834:	f006 fc36 	bl	80080a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001838:	f107 010f 	add.w	r1, r7, #15
 800183c:	2364      	movs	r3, #100	; 0x64
 800183e:	2201      	movs	r2, #1
 8001840:	480b      	ldr	r0, [pc, #44]	; (8001870 <read_byte+0x58>)
 8001842:	f009 fdf7 	bl	800b434 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001846:	f107 010e 	add.w	r1, r7, #14
 800184a:	2364      	movs	r3, #100	; 0x64
 800184c:	2201      	movs	r2, #1
 800184e:	4808      	ldr	r0, [pc, #32]	; (8001870 <read_byte+0x58>)
 8001850:	f009 ff24 	bl	800b69c <HAL_SPI_Receive>
	CS_SET;
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800185a:	4804      	ldr	r0, [pc, #16]	; (800186c <read_byte+0x54>)
 800185c:	f006 fc22 	bl	80080a4 <HAL_GPIO_WritePin>

	return val;
 8001860:	7bbb      	ldrb	r3, [r7, #14]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020400 	.word	0x40020400
 8001870:	2002d488 	.word	0x2002d488

08001874 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800188a:	b2db      	uxtb	r3, r3
 800188c:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001894:	480c      	ldr	r0, [pc, #48]	; (80018c8 <write_byte+0x54>)
 8001896:	f006 fc05 	bl	80080a4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 800189a:	f107 010f 	add.w	r1, r7, #15
 800189e:	2364      	movs	r3, #100	; 0x64
 80018a0:	2201      	movs	r2, #1
 80018a2:	480a      	ldr	r0, [pc, #40]	; (80018cc <write_byte+0x58>)
 80018a4:	f009 fdc6 	bl	800b434 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 80018a8:	1db9      	adds	r1, r7, #6
 80018aa:	2364      	movs	r3, #100	; 0x64
 80018ac:	2201      	movs	r2, #1
 80018ae:	4807      	ldr	r0, [pc, #28]	; (80018cc <write_byte+0x58>)
 80018b0:	f009 fdc0 	bl	800b434 <HAL_SPI_Transmit>
	CS_SET;
 80018b4:	2201      	movs	r2, #1
 80018b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ba:	4803      	ldr	r0, [pc, #12]	; (80018c8 <write_byte+0x54>)
 80018bc:	f006 fbf2 	bl	80080a4 <HAL_GPIO_WritePin>
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020400 	.word	0x40020400
 80018cc:	2002d488 	.word	0x2002d488

080018d0 <IMU_init>:

uint16_t IMU_init() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff ff9c 	bl	8001818 <read_byte>
 80018e0:	4603      	mov	r3, r0
 80018e2:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80018e4:	797b      	ldrb	r3, [r7, #5]
 80018e6:	2be0      	cmp	r3, #224	; 0xe0
 80018e8:	d119      	bne.n	800191e <IMU_init+0x4e>
		ret = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80018ee:	2101      	movs	r1, #1
 80018f0:	2006      	movs	r0, #6
 80018f2:	f7ff ffbf 	bl	8001874 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80018f6:	2110      	movs	r1, #16
 80018f8:	2003      	movs	r0, #3
 80018fa:	f7ff ffbb 	bl	8001874 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80018fe:	2120      	movs	r1, #32
 8001900:	207f      	movs	r0, #127	; 0x7f
 8001902:	f7ff ffb7 	bl	8001874 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001906:	2106      	movs	r1, #6
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff ffb3 	bl	8001874 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800190e:	2106      	movs	r1, #6
 8001910:	2014      	movs	r0, #20
 8001912:	f7ff ffaf 	bl	8001874 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001916:	2100      	movs	r1, #0
 8001918:	207f      	movs	r0, #127	; 0x7f
 800191a:	f7ff ffab 	bl	8001874 <write_byte>
	}
	return ret;
 800191e:	88fb      	ldrh	r3, [r7, #6]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <read_gyro_data>:

void read_gyro_data() {
 8001928:	b598      	push	{r3, r4, r7, lr}
 800192a:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 800192c:	2033      	movs	r0, #51	; 0x33
 800192e:	f7ff ff73 	bl	8001818 <read_byte>
 8001932:	4603      	mov	r3, r0
 8001934:	021b      	lsls	r3, r3, #8
 8001936:	b21c      	sxth	r4, r3
 8001938:	2034      	movs	r0, #52	; 0x34
 800193a:	f7ff ff6d 	bl	8001818 <read_byte>
 800193e:	4603      	mov	r3, r0
 8001940:	b21b      	sxth	r3, r3
 8001942:	4323      	orrs	r3, r4
 8001944:	b21a      	sxth	r2, r3
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <read_gyro_data+0x64>)
 8001948:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 800194a:	2035      	movs	r0, #53	; 0x35
 800194c:	f7ff ff64 	bl	8001818 <read_byte>
 8001950:	4603      	mov	r3, r0
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21c      	sxth	r4, r3
 8001956:	2036      	movs	r0, #54	; 0x36
 8001958:	f7ff ff5e 	bl	8001818 <read_byte>
 800195c:	4603      	mov	r3, r0
 800195e:	b21b      	sxth	r3, r3
 8001960:	4323      	orrs	r3, r4
 8001962:	b21a      	sxth	r2, r3
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <read_gyro_data+0x68>)
 8001966:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001968:	2037      	movs	r0, #55	; 0x37
 800196a:	f7ff ff55 	bl	8001818 <read_byte>
 800196e:	4603      	mov	r3, r0
 8001970:	021b      	lsls	r3, r3, #8
 8001972:	b21c      	sxth	r4, r3
 8001974:	2038      	movs	r0, #56	; 0x38
 8001976:	f7ff ff4f 	bl	8001818 <read_byte>
 800197a:	4603      	mov	r3, r0
 800197c:	b21b      	sxth	r3, r3
 800197e:	4323      	orrs	r3, r4
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b04      	ldr	r3, [pc, #16]	; (8001994 <read_gyro_data+0x6c>)
 8001984:	801a      	strh	r2, [r3, #0]
}
 8001986:	bf00      	nop
 8001988:	bd98      	pop	{r3, r4, r7, pc}
 800198a:	bf00      	nop
 800198c:	2002d424 	.word	0x2002d424
 8001990:	2002d422 	.word	0x2002d422
 8001994:	2002d41c 	.word	0x2002d41c

08001998 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	801a      	strh	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	805a      	strh	r2, [r3, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	809a      	strh	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	80da      	strh	r2, [r3, #6]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	811a      	strh	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	815a      	strh	r2, [r3, #10]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
{

}
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <_ZN3IMU4initEv>:

void IMU::init()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019e4:	f7ff ff74 	bl	80018d0 <IMU_init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019ec:	89fb      	ldrh	r3, [r7, #14]
 80019ee:	4619      	mov	r1, r3
 80019f0:	480e      	ldr	r0, [pc, #56]	; (8001a2c <_ZN3IMU4initEv+0x50>)
 80019f2:	f011 fc9f 	bl	8013334 <iprintf>

	lcd_clear();
 80019f6:	f7ff fb53 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80019fa:	2100      	movs	r1, #0
 80019fc:	2000      	movs	r0, #0
 80019fe:	f7ff fb5f 	bl	80010c0 <lcd_locate>
	lcd_printf("Who I am");
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <_ZN3IMU4initEv+0x54>)
 8001a04:	f7ff fb86 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff fb58 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	4619      	mov	r1, r3
 8001a14:	4807      	ldr	r0, [pc, #28]	; (8001a34 <_ZN3IMU4initEv+0x58>)
 8001a16:	f7ff fb7d 	bl	8001114 <lcd_printf>

	HAL_Delay(1000);
 8001a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a1e:	f005 f8ab 	bl	8006b78 <HAL_Delay>

}
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	08017484 	.word	0x08017484
 8001a30:	08017494 	.word	0x08017494
 8001a34:	080174a0 	.word	0x080174a0

08001a38 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a42:	f7ff ff71 	bl	8001928 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <_ZN3IMU12updateValuesEv+0xbc>)
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b21a      	sxth	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <_ZN3IMU12updateValuesEv+0xc0>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	b21a      	sxth	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <_ZN3IMU12updateValuesEv+0xc4>)
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	b21a      	sxth	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	float r = 0.03; //The smaller it is, the more effective/
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <_ZN3IMU12updateValuesEv+0xc8>)
 8001a66:	60fb      	str	r3, [r7, #12]

	zg_ = ((r)*(zg_) + (1.0 - (r))* (pre_zg));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7e:	ee17 0a90 	vmov	r0, s15
 8001a82:	f7fe fd79 	bl	8000578 <__aeabi_f2d>
 8001a86:	4604      	mov	r4, r0
 8001a88:	460d      	mov	r5, r1
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7fe fd73 	bl	8000578 <__aeabi_f2d>
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	491a      	ldr	r1, [pc, #104]	; (8001b04 <_ZN3IMU12updateValuesEv+0xcc>)
 8001a9c:	f7fe fc0c 	bl	80002b8 <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4690      	mov	r8, r2
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <_ZN3IMU12updateValuesEv+0xd0>)
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd50 	bl	8000554 <__aeabi_i2d>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4640      	mov	r0, r8
 8001aba:	4649      	mov	r1, r9
 8001abc:	f7fe fdb4 	bl	8000628 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4620      	mov	r0, r4
 8001ac6:	4629      	mov	r1, r5
 8001ac8:	f7fe fbf8 	bl	80002bc <__adddf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	460c      	mov	r4, r1
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	f7ff f858 	bl	8000b88 <__aeabi_d2iz>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b21a      	sxth	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_ZN3IMU12updateValuesEv+0xd0>)
 8001ae8:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001af4:	2002d424 	.word	0x2002d424
 8001af8:	2002d422 	.word	0x2002d422
 8001afc:	2002d41c 	.word	0x2002d41c
 8001b00:	3cf5c28f 	.word	0x3cf5c28f
 8001b04:	3ff00000 	.word	0x3ff00000
 8001b08:	20000200 	.word	0x20000200
 8001b0c:	00000000 	.word	0x00000000

08001b10 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7fe fd1f 	bl	8000578 <__aeabi_f2d>
 8001b3a:	a316      	add	r3, pc, #88	; (adr r3, 8001b94 <_ZN3IMU8getOmegaEv+0x84>)
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	f7fe fe9c 	bl	800087c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4614      	mov	r4, r2
 8001b4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001b4e:	a313      	add	r3, pc, #76	; (adr r3, 8001b9c <_ZN3IMU8getOmegaEv+0x8c>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	4620      	mov	r0, r4
 8001b56:	4629      	mov	r1, r5
 8001b58:	f7fe fd66 	bl	8000628 <__aeabi_dmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	460c      	mov	r4, r1
 8001b60:	4618      	mov	r0, r3
 8001b62:	4621      	mov	r1, r4
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <_ZN3IMU8getOmegaEv+0x80>)
 8001b6a:	f7fe fe87 	bl	800087c <__aeabi_ddiv>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7ff f84f 	bl	8000c18 <__aeabi_d2f>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	ee07 3a90 	vmov	s15, r3
}
 8001b80:	eeb0 0a67 	vmov.f32	s0, s15
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	40668000 	.word	0x40668000
 8001b94:	66666666 	.word	0x66666666
 8001b98:	40306666 	.word	0x40306666
 8001b9c:	54411744 	.word	0x54411744
 8001ba0:	400921fb 	.word	0x400921fb

08001ba4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ba6:	b08b      	sub	sp, #44	; 0x2c
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001bac:	466b      	mov	r3, sp
 8001bae:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001bb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bb4:	f004 ffe0 	bl	8006b78 <HAL_Delay>
	int16_t num = 2000;
 8001bb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001bbc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001bbe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc2:	1e5d      	subs	r5, r3, #1
 8001bc4:	61bd      	str	r5, [r7, #24]
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	f04f 0400 	mov.w	r4, #0
 8001bd8:	0154      	lsls	r4, r2, #5
 8001bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bde:	014b      	lsls	r3, r1, #5
 8001be0:	462b      	mov	r3, r5
 8001be2:	3301      	adds	r3, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	462b      	mov	r3, r5
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	3303      	adds	r3, #3
 8001c02:	3307      	adds	r3, #7
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	ebad 0d03 	sub.w	sp, sp, r3
 8001c0c:	466b      	mov	r3, sp
 8001c0e:	3303      	adds	r3, #3
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c16:	2300      	movs	r3, #0
 8001c18:	83fb      	strh	r3, [r7, #30]
 8001c1a:	8bfa      	ldrh	r2, [r7, #30]
 8001c1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	da13      	bge.n	8001c4c <_ZN3IMU11calibrationEv+0xa8>
		zg_vals[i] = float(zg_);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001c2a:	8bfb      	ldrh	r3, [r7, #30]
 8001c2c:	ee07 2a90 	vmov	s15, r2
 8001c30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c34:	697a      	ldr	r2, [r7, #20]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f004 ff9a 	bl	8006b78 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001c44:	8bfb      	ldrh	r3, [r7, #30]
 8001c46:	3301      	adds	r3, #1
 8001c48:	83fb      	strh	r3, [r7, #30]
 8001c4a:	e7e6      	b.n	8001c1a <_ZN3IMU11calibrationEv+0x76>
	for(const auto &v : zg_vals){
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	462b      	mov	r3, r5
 8001c54:	3301      	adds	r3, #1
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
 8001c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d00e      	beq.n	8001c82 <_ZN3IMU11calibrationEv+0xde>
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	3304      	adds	r3, #4
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c80:	e7ec      	b.n	8001c5c <_ZN3IMU11calibrationEv+0xb8>
	offset_ = sum / num;
 8001c82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c86:	ee07 3a90 	vmov	s15, r3
 8001c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001c9c:	46b5      	mov	sp, r6
}
 8001c9e:	bf00      	nop
 8001ca0:	372c      	adds	r7, #44	; 0x2c
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca6 <_ZN3IMU12getOffsetValEv>:

float IMU::getOffsetVal()
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
	return offset_;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	ee07 3a90 	vmov	s15, r3
}
 8001cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	1dfa      	adds	r2, r7, #7
 8001cda:	2364      	movs	r3, #100	; 0x64
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2301      	movs	r3, #1
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <INA260_read+0x50>)
 8001ce2:	f006 fb49 	bl	8008378 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001ce6:	79bb      	ldrb	r3, [r7, #6]
 8001ce8:	b299      	uxth	r1, r3
 8001cea:	f107 020c 	add.w	r2, r7, #12
 8001cee:	2364      	movs	r3, #100	; 0x64
 8001cf0:	9300      	str	r3, [sp, #0]
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	4807      	ldr	r0, [pc, #28]	; (8001d14 <INA260_read+0x50>)
 8001cf6:	f006 fc3d 	bl	8008574 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001cfa:	7b3b      	ldrb	r3, [r7, #12]
 8001cfc:	021b      	lsls	r3, r3, #8
 8001cfe:	b21a      	sxth	r2, r3
 8001d00:	7b7b      	ldrb	r3, [r7, #13]
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d0a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	2002d63c 	.word	0x2002d63c

08001d18 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d18:	b590      	push	{r4, r7, lr}
 8001d1a:	b087      	sub	sp, #28
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	4604      	mov	r4, r0
 8001d20:	4608      	mov	r0, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	461a      	mov	r2, r3
 8001d26:	4623      	mov	r3, r4
 8001d28:	71fb      	strb	r3, [r7, #7]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71bb      	strb	r3, [r7, #6]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	717b      	strb	r3, [r7, #5]
 8001d32:	4613      	mov	r3, r2
 8001d34:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	733b      	strb	r3, [r7, #12]
 8001d3a:	79bb      	ldrb	r3, [r7, #6]
 8001d3c:	737b      	strb	r3, [r7, #13]
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001d42:	793b      	ldrb	r3, [r7, #4]
 8001d44:	b299      	uxth	r1, r3
 8001d46:	f107 020c 	add.w	r2, r7, #12
 8001d4a:	2364      	movs	r3, #100	; 0x64
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2303      	movs	r3, #3
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <INA260_write+0x48>)
 8001d52:	f006 fb11 	bl	8008378 <HAL_I2C_Master_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	2002d63c 	.word	0x2002d63c

08001d64 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	71fb      	strb	r3, [r7, #7]
 8001d6e:	460b      	mov	r3, r1
 8001d70:	71bb      	strb	r3, [r7, #6]
 8001d72:	4613      	mov	r3, r2
 8001d74:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001d76:	797b      	ldrb	r3, [r7, #5]
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	79f9      	ldrb	r1, [r7, #7]
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ffcb 	bl	8001d18 <INA260_write>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	4603      	mov	r3, r0
 8001d92:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	461a      	mov	r2, r3
 8001d98:	21df      	movs	r1, #223	; 0xdf
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff ffe2 	bl	8001d64 <setConfig>
}
 8001da0:	bf00      	nop
 8001da2:	3708      	adds	r7, #8
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
{

}
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd0:	482a      	ldr	r0, [pc, #168]	; (8001e7c <_ZN8JoyStick8getValueEv+0xbc>)
 8001dd2:	f006 f94f 	bl	8008074 <HAL_GPIO_ReadPin>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	bf0c      	ite	eq
 8001ddc:	2301      	moveq	r3, #1
 8001dde:	2300      	movne	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <_ZN8JoyStick8getValueEv+0x2e>
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001dee:	2101      	movs	r1, #1
 8001df0:	4823      	ldr	r0, [pc, #140]	; (8001e80 <_ZN8JoyStick8getValueEv+0xc0>)
 8001df2:	f006 f93f 	bl	8008074 <HAL_GPIO_ReadPin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	bf0c      	ite	eq
 8001dfc:	2301      	moveq	r3, #1
 8001dfe:	2300      	movne	r3, #0
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <_ZN8JoyStick8getValueEv+0x4e>
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	f043 0302 	orr.w	r3, r3, #2
 8001e0c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e12:	481a      	ldr	r0, [pc, #104]	; (8001e7c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e14:	f006 f92e 	bl	8008074 <HAL_GPIO_ReadPin>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	bf0c      	ite	eq
 8001e1e:	2301      	moveq	r3, #1
 8001e20:	2300      	movne	r3, #0
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <_ZN8JoyStick8getValueEv+0x70>
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001e30:	2104      	movs	r1, #4
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <_ZN8JoyStick8getValueEv+0xc4>)
 8001e34:	f006 f91e 	bl	8008074 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf0c      	ite	eq
 8001e3e:	2301      	moveq	r3, #1
 8001e40:	2300      	movne	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <_ZN8JoyStick8getValueEv+0x90>
 8001e48:	89fb      	ldrh	r3, [r7, #14]
 8001e4a:	f043 0308 	orr.w	r3, r3, #8
 8001e4e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	480a      	ldr	r0, [pc, #40]	; (8001e7c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e54:	f006 f90e 	bl	8008074 <HAL_GPIO_ReadPin>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <_ZN8JoyStick8getValueEv+0xb0>
 8001e68:	89fb      	ldrh	r3, [r7, #14]
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001e70:	89fb      	ldrh	r3, [r7, #14]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40020400 	.word	0x40020400

08001e88 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	2b52      	cmp	r3, #82	; 0x52
 8001e98:	d112      	bne.n	8001ec0 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ea0:	4856      	ldr	r0, [pc, #344]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001ea2:	f006 f8ff 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eac:	4853      	ldr	r0, [pc, #332]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001eae:	f006 f8f9 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eb8:	4850      	ldr	r0, [pc, #320]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001eba:	f006 f8f3 	bl	80080a4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001ebe:	e098      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001ec0:	78fb      	ldrb	r3, [r7, #3]
 8001ec2:	2b47      	cmp	r3, #71	; 0x47
 8001ec4:	d112      	bne.n	8001eec <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ecc:	484b      	ldr	r0, [pc, #300]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001ece:	f006 f8e9 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ed8:	4848      	ldr	r0, [pc, #288]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001eda:	f006 f8e3 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ee4:	4845      	ldr	r0, [pc, #276]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001ee6:	f006 f8dd 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001eea:	e082      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	2b42      	cmp	r3, #66	; 0x42
 8001ef0:	d112      	bne.n	8001f18 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ef8:	4840      	ldr	r0, [pc, #256]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001efa:	f006 f8d3 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f04:	483d      	ldr	r0, [pc, #244]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f06:	f006 f8cd 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f10:	483a      	ldr	r0, [pc, #232]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f12:	f006 f8c7 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001f16:	e06c      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	2b43      	cmp	r3, #67	; 0x43
 8001f1c:	d112      	bne.n	8001f44 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f24:	4835      	ldr	r0, [pc, #212]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f26:	f006 f8bd 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	4832      	ldr	r0, [pc, #200]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f006 f8b7 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f3c:	482f      	ldr	r0, [pc, #188]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f006 f8b1 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001f42:	e056      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001f44:	78fb      	ldrb	r3, [r7, #3]
 8001f46:	2b4d      	cmp	r3, #77	; 0x4d
 8001f48:	d112      	bne.n	8001f70 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f50:	482a      	ldr	r0, [pc, #168]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f52:	f006 f8a7 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f5c:	4827      	ldr	r0, [pc, #156]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f006 f8a1 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f68:	4824      	ldr	r0, [pc, #144]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f006 f89b 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001f6e:	e040      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	2b59      	cmp	r3, #89	; 0x59
 8001f74:	d112      	bne.n	8001f9c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7c:	481f      	ldr	r0, [pc, #124]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f7e:	f006 f891 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f82:	2200      	movs	r2, #0
 8001f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f88:	481c      	ldr	r0, [pc, #112]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f006 f88b 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f94:	4819      	ldr	r0, [pc, #100]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f006 f885 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001f9a:	e02a      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	2b57      	cmp	r3, #87	; 0x57
 8001fa0:	d112      	bne.n	8001fc8 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fa8:	4814      	ldr	r0, [pc, #80]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001faa:	f006 f87b 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb4:	4811      	ldr	r0, [pc, #68]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f006 f875 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc0:	480e      	ldr	r0, [pc, #56]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f006 f86f 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001fc6:	e014      	b.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b7e      	cmp	r3, #126	; 0x7e
 8001fcc:	d111      	bne.n	8001ff2 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd4:	4809      	ldr	r0, [pc, #36]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001fd6:	f006 f865 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe0:	4806      	ldr	r0, [pc, #24]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f006 f85f 	bl	80080a4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f006 f859 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40020000 	.word	0x40020000

08002000 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	70fb      	strb	r3, [r7, #3]
 800200c:	4613      	mov	r3, r2
 800200e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002010:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002018:	2201      	movs	r2, #1
 800201a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800201e:	4813      	ldr	r0, [pc, #76]	; (800206c <_ZN3LED2LREaa+0x6c>)
 8002020:	f006 f840 	bl	80080a4 <HAL_GPIO_WritePin>
 8002024:	e009      	b.n	800203a <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002026:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d105      	bne.n	800203a <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <_ZN3LED2LREaa+0x6c>)
 8002036:	f006 f835 	bl	80080a4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 800203a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d106      	bne.n	8002050 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <_ZN3LED2LREaa+0x6c>)
 800204a:	f006 f82b 	bl	80080a4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800204e:	e009      	b.n	8002064 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002050:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002058:	2200      	movs	r2, #0
 800205a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800205e:	4803      	ldr	r0, [pc, #12]	; (800206c <_ZN3LED2LREaa+0x6c>)
 8002060:	f006 f820 	bl	80080a4 <HAL_GPIO_WritePin>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40020000 	.word	0x40020000

08002070 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002070:	b580      	push	{r7, lr}
 8002072:	b092      	sub	sp, #72	; 0x48
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fe92 	bl	8001da8 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	637b      	str	r3, [r7, #52]	; 0x34
 8002088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208a:	647b      	str	r3, [r7, #68]	; 0x44
 800208c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800208e:	331c      	adds	r3, #28
 8002090:	633b      	str	r3, [r7, #48]	; 0x30
 8002092:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	429a      	cmp	r2, r3
 8002098:	d008      	beq.n	80020ac <_ZN10LineSensorC1Ev+0x3c>
 800209a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a0:	2200      	movs	r2, #0
 80020a2:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80020a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020a6:	3302      	adds	r3, #2
 80020a8:	647b      	str	r3, [r7, #68]	; 0x44
 80020aa:	e7f2      	b.n	8002092 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b6:	643b      	str	r3, [r7, #64]	; 0x40
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	3338      	adds	r3, #56	; 0x38
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d009      	beq.n	80020da <_ZN10LineSensorC1Ev+0x6a>
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	623b      	str	r3, [r7, #32]
		s = 0;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	3304      	adds	r3, #4
 80020d6:	643b      	str	r3, [r7, #64]	; 0x40
 80020d8:	e7f1      	b.n	80020be <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3338      	adds	r3, #56	; 0x38
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d009      	beq.n	8002108 <_ZN10LineSensorC1Ev+0x98>
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	617b      	str	r3, [r7, #20]
		m = 0;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002102:	3304      	adds	r3, #4
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002106:	e7f1      	b.n	80020ec <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	63bb      	str	r3, [r7, #56]	; 0x38
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	3338      	adds	r3, #56	; 0x38
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	429a      	cmp	r2, r3
 8002120:	d009      	beq.n	8002136 <_ZN10LineSensorC1Ev+0xc6>
 8002122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002124:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800212c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	3304      	adds	r3, #4
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
 8002134:	e7f1      	b.n	800211a <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	3748      	adds	r7, #72	; 0x48
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	220e      	movs	r2, #14
 800214c:	4619      	mov	r1, r3
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002150:	f004 fd78 	bl	8006c44 <HAL_ADC_Start_DMA>
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	2002d560 	.word	0x2002d560

08002160 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b0d      	cmp	r3, #13
 8002170:	dc2f      	bgt.n	80021d2 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3392      	adds	r3, #146	; 0x92
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3304      	adds	r3, #4
 800217e:	ed93 7a00 	vldr	s14, [r3]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	33a0      	adds	r3, #160	; 0xa0
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	4619      	mov	r1, r3
 80021ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	1a5b      	subs	r3, r3, r1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	440b      	add	r3, r1
 80021be:	3306      	adds	r3, #6
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e7cc      	b.n	800216c <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80021d2:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021dc:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b09      	cmp	r3, #9
 80021e4:	d902      	bls.n	80021ec <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80021e6:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]


}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000202 	.word	0x20000202

080021fc <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80021fc:	b490      	push	{r4, r7}
 80021fe:	b08e      	sub	sp, #56	; 0x38
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002204:	2300      	movs	r3, #0
 8002206:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800220a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800220e:	2b0d      	cmp	r3, #13
 8002210:	f200 8087 	bhi.w	8002322 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002214:	2300      	movs	r3, #0
 8002216:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800221a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800221e:	2b09      	cmp	r3, #9
 8002220:	d81c      	bhi.n	800225c <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002222:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002226:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800222a:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	4423      	add	r3, r4
 800223a:	3306      	adds	r3, #6
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4403      	add	r3, r0
 8002240:	3304      	adds	r3, #4
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	008b      	lsls	r3, r1, #2
 8002246:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800224a:	440b      	add	r3, r1
 800224c:	3b30      	subs	r3, #48	; 0x30
 800224e:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002250:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002254:	3301      	adds	r3, #1
 8002256:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800225a:	e7de      	b.n	800221a <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 800225c:	2300      	movs	r3, #0
 800225e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002262:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002266:	2b09      	cmp	r3, #9
 8002268:	d84d      	bhi.n	8002306 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800226a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800226e:	3301      	adds	r3, #1
 8002270:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002274:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002278:	2b09      	cmp	r3, #9
 800227a:	d83e      	bhi.n	80022fa <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800227c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002286:	4413      	add	r3, r2
 8002288:	3b30      	subs	r3, #48	; 0x30
 800228a:	ed93 7a00 	vldr	s14, [r3]
 800228e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002298:	4413      	add	r3, r2
 800229a:	3b30      	subs	r3, #48	; 0x30
 800229c:	edd3 7a00 	vldr	s15, [r3]
 80022a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a8:	d521      	bpl.n	80022ee <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80022aa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022b4:	4413      	add	r3, r2
 80022b6:	3b30      	subs	r3, #48	; 0x30
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80022bc:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80022c0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022c4:	0092      	lsls	r2, r2, #2
 80022c6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022ca:	440a      	add	r2, r1
 80022cc:	3a30      	subs	r2, #48	; 0x30
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022d6:	440b      	add	r3, r1
 80022d8:	3b30      	subs	r3, #48	; 0x30
 80022da:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80022dc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022e6:	4413      	add	r3, r2
 80022e8:	3b30      	subs	r3, #48	; 0x30
 80022ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022ec:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80022ee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022f2:	3301      	adds	r3, #1
 80022f4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022f8:	e7bc      	b.n	8002274 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80022fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002304:	e7ad      	b.n	8002262 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800230a:	69fa      	ldr	r2, [r7, #28]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	33b0      	adds	r3, #176	; 0xb0
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002316:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800231a:	3301      	adds	r3, #1
 800231c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002320:	e773      	b.n	800220a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 8002322:	bf00      	nop
 8002324:	3738      	adds	r7, #56	; 0x38
 8002326:	46bd      	mov	sp, r7
 8002328:	bc90      	pop	{r4, r7}
 800232a:	4770      	bx	lr

0800232c <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	; 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	61bb      	str	r3, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	3338      	adds	r3, #56	; 0x38
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	429a      	cmp	r2, r3
 8002350:	d012      	beq.n	8002378 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	edd3 7a00 	vldr	s15, [r3]
 800235c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002398 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002368:	db02      	blt.n	8002370 <_ZN10LineSensor13emergencyStopEv+0x44>
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	3301      	adds	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	3304      	adds	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	e7e8      	b.n	800234a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002378:	7ffb      	ldrb	r3, [r7, #31]
 800237a:	2b0d      	cmp	r3, #13
 800237c:	d902      	bls.n	8002384 <_ZN10LineSensor13emergencyStopEv+0x58>
 800237e:	2301      	movs	r3, #1
 8002380:	75fb      	strb	r3, [r7, #23]
 8002382:	e001      	b.n	8002388 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002384:	2300      	movs	r3, #0
 8002386:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002388:	7dfb      	ldrb	r3, [r7, #23]

}
 800238a:	4618      	mov	r0, r3
 800238c:	3724      	adds	r7, #36	; 0x24
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	44160000 	.word	0x44160000

0800239c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	619a      	str	r2, [r3, #24]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
	motor_ = motor;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	609a      	str	r2, [r3, #8]
}
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr

080023f2 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80023f2:	b480      	push	{r7}
 80023f4:	b085      	sub	sp, #20
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 800240a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 800242e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 800243a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002446:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 800245a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002466:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002472:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800247e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 800248a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002496:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 800249a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249e:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	ee07 3a90 	vmov	s15, r3

}
 80024a8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <_ZN9LineTrace23pidAngularVelocityTraceEv>:
	pre_diff = diff;

}

void LineTrace::pidAngularVelocityTrace()
{
 80024b8:	b5b0      	push	{r4, r5, r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff ff96 	bl	80023f2 <_ZN9LineTrace9calcErrorEv>
 80024c6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;
	float target_omega = 0;
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]

	p = kp_velo_ * diff;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	edd3 7a07 	vldr	s15, [r3, #28]
 80024d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80024da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024de:	edc7 7a03 	vstr	s15, [r7, #12]
	d = kd_velo_ * (diff - pre_diff) / DELTA_T;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	ed93 7a08 	vldr	s14, [r3, #32]
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 80024ea:	edd3 7a00 	vldr	s15, [r3]
 80024ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80024f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fa:	ee17 0a90 	vmov	r0, s15
 80024fe:	f7fe f83b 	bl	8000578 <__aeabi_f2d>
 8002502:	a329      	add	r3, pc, #164	; (adr r3, 80025a8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f9b8 	bl	800087c <__aeabi_ddiv>
 800250c:	4603      	mov	r3, r0
 800250e:	460c      	mov	r4, r1
 8002510:	4618      	mov	r0, r3
 8002512:	4621      	mov	r1, r4
 8002514:	f7fe fb80 	bl	8000c18 <__aeabi_d2f>
 8002518:	4603      	mov	r3, r0
 800251a:	60bb      	str	r3, [r7, #8]
	i += ki_velo_ * diff * DELTA_T;
 800251c:	4b25      	ldr	r3, [pc, #148]	; (80025b4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f829 	bl	8000578 <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002530:	edd7 7a05 	vldr	s15, [r7, #20]
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	ee17 0a90 	vmov	r0, s15
 800253c:	f7fe f81c 	bl	8000578 <__aeabi_f2d>
 8002540:	a319      	add	r3, pc, #100	; (adr r3, 80025a8 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf0>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f86f 	bl	8000628 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4620      	mov	r0, r4
 8002550:	4629      	mov	r1, r5
 8002552:	f7fd feb3 	bl	80002bc <__adddf3>
 8002556:	4603      	mov	r3, r0
 8002558:	460c      	mov	r4, r1
 800255a:	4618      	mov	r0, r3
 800255c:	4621      	mov	r1, r4
 800255e:	f7fe fb5b 	bl	8000c18 <__aeabi_d2f>
 8002562:	4602      	mov	r2, r0
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002566:	601a      	str	r2, [r3, #0]

	target_omega = p + d + i;
 8002568:	ed97 7a03 	vldr	s14, [r7, #12]
 800256c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002570:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002574:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xfc>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	edc7 7a04 	vstr	s15, [r7, #16]

	velocity_ctrl_->setVelocity(target_velocity_, target_omega);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800258c:	edd7 0a04 	vldr	s1, [r7, #16]
 8002590:	eeb0 0a67 	vmov.f32	s0, s15
 8002594:	4610      	mov	r0, r2
 8002596:	f001 f91b 	bl	80037d0 <_ZN12VelocityCtrl11setVelocityEff>

	pre_diff = diff;
 800259a:	4a05      	ldr	r2, [pc, #20]	; (80025b0 <_ZN9LineTrace23pidAngularVelocityTraceEv+0xf8>)
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	6013      	str	r3, [r2, #0]

}
 80025a0:	bf00      	nop
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bdb0      	pop	{r4, r5, r7, pc}
 80025a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025ac:	3f50624d 	.word	0x3f50624d
 80025b0:	20000204 	.word	0x20000204
 80025b4:	20000208 	.word	0x20000208

080025b8 <_ZN9LineTrace4initEv>:
	monitor_r = r;
}

// -------public---------- //
void LineTrace::init()
{
 80025b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025ba:	b089      	sub	sp, #36	; 0x24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	double temp_kp_v, temp_ki_v, temp_kd_v;
	sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 80025c0:	f107 0318 	add.w	r3, r7, #24
 80025c4:	2201      	movs	r2, #1
 80025c6:	491a      	ldr	r1, [pc, #104]	; (8002630 <_ZN9LineTrace4initEv+0x78>)
 80025c8:	481a      	ldr	r0, [pc, #104]	; (8002634 <_ZN9LineTrace4initEv+0x7c>)
 80025ca:	f7ff f879 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	2201      	movs	r2, #1
 80025d4:	4918      	ldr	r1, [pc, #96]	; (8002638 <_ZN9LineTrace4initEv+0x80>)
 80025d6:	4817      	ldr	r0, [pc, #92]	; (8002634 <_ZN9LineTrace4initEv+0x7c>)
 80025d8:	f7ff f872 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 80025dc:	f107 0308 	add.w	r3, r7, #8
 80025e0:	2201      	movs	r2, #1
 80025e2:	4916      	ldr	r1, [pc, #88]	; (800263c <_ZN9LineTrace4initEv+0x84>)
 80025e4:	4813      	ldr	r0, [pc, #76]	; (8002634 <_ZN9LineTrace4initEv+0x7c>)
 80025e6:	f7ff f86b 	bl	80016c0 <sd_read_array_double>
	setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 80025ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80025ee:	4618      	mov	r0, r3
 80025f0:	4621      	mov	r1, r4
 80025f2:	f7fe fb11 	bl	8000c18 <__aeabi_d2f>
 80025f6:	4605      	mov	r5, r0
 80025f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80025fc:	4618      	mov	r0, r3
 80025fe:	4621      	mov	r1, r4
 8002600:	f7fe fb0a 	bl	8000c18 <__aeabi_d2f>
 8002604:	4606      	mov	r6, r0
 8002606:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800260a:	4618      	mov	r0, r3
 800260c:	4621      	mov	r1, r4
 800260e:	f7fe fb03 	bl	8000c18 <__aeabi_d2f>
 8002612:	4603      	mov	r3, r0
 8002614:	ee01 3a10 	vmov	s2, r3
 8002618:	ee00 6a90 	vmov	s1, r6
 800261c:	ee00 5a10 	vmov	s0, r5
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f826 	bl	8002672 <_ZN9LineTrace11setVeloGainEfff>

}
 8002626:	bf00      	nop
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	bf00      	nop
 8002630:	080174a4 	.word	0x080174a4
 8002634:	080174b0 	.word	0x080174b0
 8002638:	080174b8 	.word	0x080174b8
 800263c:	080174c4 	.word	0x080174c4

08002640 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	ed87 0a02 	vstr	s0, [r7, #8]
 800264c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002650:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	611a      	str	r2, [r3, #16]
	ki_ = ki;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
	kd_ = kd;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	615a      	str	r2, [r3, #20]
}
 8002666:	bf00      	nop
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_ZN9LineTrace11setVeloGainEfff>:


void LineTrace::setVeloGain(float kp, float ki, float kd)
{
 8002672:	b480      	push	{r7}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	60f8      	str	r0, [r7, #12]
 800267a:	ed87 0a02 	vstr	s0, [r7, #8]
 800267e:	edc7 0a01 	vstr	s1, [r7, #4]
 8002682:	ed87 1a00 	vstr	s2, [r7]
	kp_velo_ = kp;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	61da      	str	r2, [r3, #28]
	ki_velo_ = ki;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
	kd_velo_ = kd;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	621a      	str	r2, [r3, #32]
}
 8002698:	bf00      	nop
 800269a:	3714      	adds	r7, #20
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <_ZN9LineTrace6getKpVEv>:
{
	return kd_;
}

float LineTrace::getKpV()
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	return kp_velo_;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	ee07 3a90 	vmov	s15, r3
}
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_ZN9LineTrace6getKiVEv>:
float LineTrace::getKiV()
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	return ki_velo_;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	ee07 3a90 	vmov	s15, r3
}
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_ZN9LineTrace6getKdVEv>:
float LineTrace::getKdV()
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	return kd_velo_;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	ee07 3a90 	vmov	s15, r3
}
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	0000      	movs	r0, r0
 800273c:	0000      	movs	r0, r0
	...

08002740 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800274e:	2b00      	cmp	r3, #0
 8002750:	d024      	beq.n	800279c <_ZN9LineTrace4flipEv+0x5c>
		//pidTrace();
		pidAngularVelocityTrace();
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff feb0 	bl	80024b8 <_ZN9LineTrace23pidAngularVelocityTraceEv>
		//steeringAngleTrace();

		if(line_sensor_->emergencyStop() == true){
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fde5 	bl	800232c <_ZN10LineSensor13emergencyStopEv>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d011      	beq.n	800278c <_ZN9LineTrace4flipEv+0x4c>
			motor_->setRatio(0, 0);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 80027a8 <_ZN9LineTrace4flipEv+0x68>
 8002770:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80027a8 <_ZN9LineTrace4flipEv+0x68>
 8002774:	4618      	mov	r0, r3
 8002776:	f000 f9b9 	bl	8002aec <_ZN5Motor8setRatioEdd>
			led_.LR(1, -1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	330c      	adds	r3, #12
 800277e:	f04f 32ff 	mov.w	r2, #4294967295
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fc3b 	bl	8002000 <_ZN3LED2LREaa>
			led_.LR(0, -1);

		}
	}

}
 800278a:	e007      	b.n	800279c <_ZN9LineTrace4flipEv+0x5c>
			led_.LR(0, -1);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	330c      	adds	r3, #12
 8002790:	f04f 32ff 	mov.w	r2, #4294967295
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc32 	bl	8002000 <_ZN3LED2LREaa>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	f3af 8000 	nop.w
	...

080027b0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	0000      	movs	r0, r0
	...

080027d0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8002800 <_ZN9LineTrace4stopEv+0x30>
 80027e8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8002800 <_ZN9LineTrace4stopEv+0x30>
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f97d 	bl	8002aec <_ZN5Motor8setRatioEdd>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	f3af 8000 	nop.w
	...

08002808 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002816:	33b0      	adds	r3, #176	; 0xb0
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002822:	33b2      	adds	r3, #178	; 0xb2
 8002824:	2200      	movs	r2, #0
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800282e:	33b4      	adds	r3, #180	; 0xb4
 8002830:	2200      	movs	r2, #0
 8002832:	801a      	strh	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4618      	mov	r0, r3
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8002850:	f7fe ff7c 	bl	800174c <sd_mount>
 8002854:	4603      	mov	r3, r0
 8002856:	2b01      	cmp	r3, #1
 8002858:	bf0c      	ite	eq
 800285a:	2301      	moveq	r3, #1
 800285c:	2300      	movne	r3, #0
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d019      	beq.n	8002898 <_ZN6Logger10sdCardInitEv+0x54>
	  printf("mount success\r\n");
 8002864:	481b      	ldr	r0, [pc, #108]	; (80028d4 <_ZN6Logger10sdCardInitEv+0x90>)
 8002866:	f010 fdd9 	bl	801341c <puts>

	  lcd_clear();
 800286a:	f7fe fc19 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800286e:	2100      	movs	r1, #0
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fc25 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8002876:	4818      	ldr	r0, [pc, #96]	; (80028d8 <_ZN6Logger10sdCardInitEv+0x94>)
 8002878:	f7fe fc4c 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800287c:	2101      	movs	r1, #1
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fc1e 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8002884:	4815      	ldr	r0, [pc, #84]	; (80028dc <_ZN6Logger10sdCardInitEv+0x98>)
 8002886:	f7fe fc45 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800288a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800288e:	f004 f973 	bl	8006b78 <HAL_Delay>

	  ret = true;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e018      	b.n	80028ca <_ZN6Logger10sdCardInitEv+0x86>
	}
	else{
	  printf("mount error\r\n");
 8002898:	4811      	ldr	r0, [pc, #68]	; (80028e0 <_ZN6Logger10sdCardInitEv+0x9c>)
 800289a:	f010 fdbf 	bl	801341c <puts>

	  lcd_clear();
 800289e:	f7fe fbff 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80028a2:	2100      	movs	r1, #0
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7fe fc0b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80028aa:	480b      	ldr	r0, [pc, #44]	; (80028d8 <_ZN6Logger10sdCardInitEv+0x94>)
 80028ac:	f7fe fc32 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80028b0:	2101      	movs	r1, #1
 80028b2:	2000      	movs	r0, #0
 80028b4:	f7fe fc04 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80028b8:	480a      	ldr	r0, [pc, #40]	; (80028e4 <_ZN6Logger10sdCardInitEv+0xa0>)
 80028ba:	f7fe fc2b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80028be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028c2:	f004 f959 	bl	8006b78 <HAL_Delay>

	  ret = false;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	080174d0 	.word	0x080174d0
 80028d8:	080174e0 	.word	0x080174e0
 80028dc:	080174ec 	.word	0x080174ec
 80028e0:	080174f4 	.word	0x080174f4
 80028e4:	08017504 	.word	0x08017504

080028e8 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80028fa:	33b0      	adds	r3, #176	; 0xb0
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d024      	beq.n	800294c <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002908:	33b2      	adds	r3, #178	; 0xb2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800291c:	33b2      	adds	r3, #178	; 0xb2
 800291e:	881b      	ldrh	r3, [r3, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 800292a:	33b2      	adds	r3, #178	; 0xb2
 800292c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002934:	33b2      	adds	r3, #178	; 0xb2
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	f241 3287 	movw	r2, #4999	; 0x1387
 800293c:	4293      	cmp	r3, r2
 800293e:	d905      	bls.n	800294c <_ZN6Logger8storeLogEf+0x64>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002946:	33b2      	adds	r3, #178	; 0xb2
 8002948:	2200      	movs	r2, #0
 800294a:	801a      	strh	r2, [r3, #0]
	}
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af02      	add	r7, sp, #8
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	2300      	movs	r3, #0
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	68b8      	ldr	r0, [r7, #8]
 8002974:	f7fe fddc 	bl	8001530 <sd_write_array_float>
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002994:	3330      	adds	r3, #48	; 0x30
 8002996:	2200      	movs	r2, #0
 8002998:	9200      	str	r2, [sp, #0]
 800299a:	f241 7270 	movw	r2, #6000	; 0x1770
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	68b8      	ldr	r0, [r7, #8]
 80029a2:	f7fe fdc5 	bl	8001530 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 4352 	add.w	r3, r3, #53760	; 0xd200
 80029ac:	33f0      	adds	r3, #240	; 0xf0
 80029ae:	2200      	movs	r2, #0
 80029b0:	9200      	str	r2, [sp, #0]
 80029b2:	f241 7270 	movw	r2, #6000	; 0x1770
 80029b6:	6839      	ldr	r1, [r7, #0]
 80029b8:	68b8      	ldr	r0, [r7, #8]
 80029ba:	f7fe fdb9 	bl	8001530 <sd_write_array_float>
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80029d4:	33b0      	adds	r3, #176	; 0xb0
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 80029f4:	33b0      	adds	r3, #176	; 0xb0
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	805a      	strh	r2, [r3, #2]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a30:	2108      	movs	r1, #8
 8002a32:	4805      	ldr	r0, [pc, #20]	; (8002a48 <_ZN5Motor4initEv+0x20>)
 8002a34:	f009 fa68 	bl	800bf08 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a38:	210c      	movs	r1, #12
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <_ZN5Motor4initEv+0x20>)
 8002a3c:	f009 fa64 	bl	800bf08 <HAL_TIM_PWM_Start>

}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	2002d520 	.word	0x2002d520

08002a4c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	da0d      	bge.n	8002a7a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a64:	481f      	ldr	r0, [pc, #124]	; (8002ae4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a66:	f005 fb1d 	bl	80080a4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	425b      	negs	r3, r3
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	81fb      	strh	r3, [r7, #14]
 8002a78:	e00a      	b.n	8002a90 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a80:	4818      	ldr	r0, [pc, #96]	; (8002ae4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a82:	f005 fb0f 	bl	80080a4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da0d      	bge.n	8002ab6 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aa0:	4810      	ldr	r0, [pc, #64]	; (8002ae4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002aa2:	f005 faff 	bl	80080a4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	425b      	negs	r3, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	81bb      	strh	r3, [r7, #12]
 8002ab4:	e00a      	b.n	8002acc <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002abc:	4809      	ldr	r0, [pc, #36]	; (8002ae4 <_ZN5Motor9motorCtrlEv+0x98>)
 8002abe:	f005 faf1 	bl	80080a4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002acc:	89fa      	ldrh	r2, [r7, #14]
 8002ace:	4b06      	ldr	r3, [pc, #24]	; (8002ae8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002ad4:	89ba      	ldrh	r2, [r7, #12]
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40020c00 	.word	0x40020c00
 8002ae8:	2002d520 	.word	0x2002d520

08002aec <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b087      	sub	sp, #28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6178      	str	r0, [r7, #20]
 8002af4:	ed87 0b02 	vstr	d0, [r7, #8]
 8002af8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b30      	ldr	r3, [pc, #192]	; (8002bc4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b06:	f7fe f81f 	bl	8000b48 <__aeabi_dcmpgt>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <_ZN5Motor8setRatioEdd+0x30>
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	4c2b      	ldr	r4, [pc, #172]	; (8002bc4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b16:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002b1a:	e00e      	b.n	8002b3a <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b26:	f7fd fff1 	bl	8000b0c <__aeabi_dcmplt>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d004      	beq.n	8002b3a <_ZN5Motor8setRatioEdd+0x4e>
 8002b30:	f04f 0300 	mov.w	r3, #0
 8002b34:	4c24      	ldr	r4, [pc, #144]	; (8002bc8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002b36:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	4b21      	ldr	r3, [pc, #132]	; (8002bc4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b44:	f7fe f800 	bl	8000b48 <__aeabi_dcmpgt>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d005      	beq.n	8002b5a <_ZN5Motor8setRatioEdd+0x6e>
 8002b4e:	f04f 0300 	mov.w	r3, #0
 8002b52:	4c1c      	ldr	r4, [pc, #112]	; (8002bc4 <_ZN5Motor8setRatioEdd+0xd8>)
 8002b54:	e9c7 3400 	strd	r3, r4, [r7]
 8002b58:	e00e      	b.n	8002b78 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002b60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b64:	f7fd ffd2 	bl	8000b0c <__aeabi_dcmplt>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d004      	beq.n	8002b78 <_ZN5Motor8setRatioEdd+0x8c>
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	4c15      	ldr	r4, [pc, #84]	; (8002bc8 <_ZN5Motor8setRatioEdd+0xdc>)
 8002b74:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <_ZN5Motor8setRatioEdd+0xe0>)
 8002b7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b82:	f7fd fd51 	bl	8000628 <__aeabi_dmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	460c      	mov	r4, r1
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	4621      	mov	r1, r4
 8002b8e:	f7fd fffb 	bl	8000b88 <__aeabi_d2iz>
 8002b92:	4603      	mov	r3, r0
 8002b94:	b21a      	sxth	r2, r3
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <_ZN5Motor8setRatioEdd+0xe0>)
 8002ba0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ba4:	f7fd fd40 	bl	8000628 <__aeabi_dmul>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	460c      	mov	r4, r1
 8002bac:	4618      	mov	r0, r3
 8002bae:	4621      	mov	r1, r4
 8002bb0:	f7fd ffea 	bl	8000b88 <__aeabi_d2iz>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	b21a      	sxth	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	805a      	strh	r2, [r3, #2]

}
 8002bbc:	bf00      	nop
 8002bbe:	371c      	adds	r7, #28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	3ff00000 	.word	0x3ff00000
 8002bc8:	bff00000 	.word	0xbff00000
 8002bcc:	409c2000 	.word	0x409c2000

08002bd0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002bd0:	b490      	push	{r4, r7}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f04f 0300 	mov.w	r3, #0
 8002be4:	f04f 0400 	mov.w	r4, #0
 8002be8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	f04f 0400 	mov.w	r4, #0
 8002bf6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	f04f 0400 	mov.w	r4, #0
 8002c04:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	609a      	str	r2, [r3, #8]
}
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc90      	pop	{r4, r7}
 8002c24:	4770      	bx	lr
	...

08002c28 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe ff6a 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 8002c3c:	ee10 3a10 	vmov	r3, s0
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc99 	bl	8000578 <__aeabi_f2d>
 8002c46:	4603      	mov	r3, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7fe fb8f 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002c58:	ec54 3b10 	vmov	r3, r4, d0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	f7fd ffda 	bl	8000c18 <__aeabi_d2f>
 8002c64:	4603      	mov	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002c68:	a356      	add	r3, pc, #344	; (adr r3, 8002dc4 <_ZN8Odometry12calcPotitionEv+0x19c>)
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c72:	f7fd fcd9 	bl	8000628 <__aeabi_dmul>
 8002c76:	4603      	mov	r3, r0
 8002c78:	460c      	mov	r4, r1
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7fd fc76 	bl	8000578 <__aeabi_f2d>
 8002c8c:	4682      	mov	sl, r0
 8002c8e:	468b      	mov	fp, r1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ca4:	f7fd fdea 	bl	800087c <__aeabi_ddiv>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd fb04 	bl	80002bc <__adddf3>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	ec43 2b17 	vmov	d7, r2, r3
 8002cbc:	eeb0 0a47 	vmov.f32	s0, s14
 8002cc0:	eef0 0a67 	vmov.f32	s1, s15
 8002cc4:	f00e fc64 	bl	8011590 <cos>
 8002cc8:	ec53 2b10 	vmov	r2, r3, d0
 8002ccc:	4650      	mov	r0, sl
 8002cce:	4659      	mov	r1, fp
 8002cd0:	f7fd fcaa 	bl	8000628 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4620      	mov	r0, r4
 8002cda:	4629      	mov	r1, r5
 8002cdc:	f7fd faee 	bl	80002bc <__adddf3>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	460c      	mov	r4, r1
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7fd fc41 	bl	8000578 <__aeabi_f2d>
 8002cf6:	4682      	mov	sl, r0
 8002cf8:	468b      	mov	fp, r1
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d0e:	f7fd fdb5 	bl	800087c <__aeabi_ddiv>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4640      	mov	r0, r8
 8002d18:	4649      	mov	r1, r9
 8002d1a:	f7fd facf 	bl	80002bc <__adddf3>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	ec43 2b17 	vmov	d7, r2, r3
 8002d26:	eeb0 0a47 	vmov.f32	s0, s14
 8002d2a:	eef0 0a67 	vmov.f32	s1, s15
 8002d2e:	f00e fc73 	bl	8011618 <sin>
 8002d32:	ec53 2b10 	vmov	r2, r3, d0
 8002d36:	4650      	mov	r0, sl
 8002d38:	4659      	mov	r1, fp
 8002d3a:	f7fd fc75 	bl	8000628 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fab9 	bl	80002bc <__adddf3>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002d60:	461a      	mov	r2, r3
 8002d62:	4623      	mov	r3, r4
 8002d64:	f7fd faaa 	bl	80002bc <__adddf3>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	e9c2 3408 	strd	r3, r4, [r2, #32]

	monitor_x = x_;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	f7fd ff4c 	bl	8000c18 <__aeabi_d2f>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002d84:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	4621      	mov	r1, r4
 8002d90:	f7fd ff42 	bl	8000c18 <__aeabi_d2f>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <_ZN8Odometry12calcPotitionEv+0x194>)
 8002d98:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002da0:	4618      	mov	r0, r3
 8002da2:	4621      	mov	r1, r4
 8002da4:	f7fd ff38 	bl	8000c18 <__aeabi_d2f>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <_ZN8Odometry12calcPotitionEv+0x198>)
 8002dac:	601a      	str	r2, [r3, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db8:	2000020c 	.word	0x2000020c
 8002dbc:	20000210 	.word	0x20000210
 8002dc0:	20000214 	.word	0x20000214
 8002dc4:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dc8:	3f50624d 	.word	0x3f50624d

08002dcc <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff27 	bl	8002c28 <_ZN8Odometry12calcPotitionEv>
}
 8002dda:	bf00      	nop
 8002ddc:	3708      	adds	r7, #8
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8002de2:	b490      	push	{r4, r7}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
	x_ = 0;
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	f04f 0300 	mov.w	r3, #0
 8002df0:	f04f 0400 	mov.w	r4, #0
 8002df4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	f04f 0400 	mov.w	r4, #0
 8002e02:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	f04f 0300 	mov.w	r3, #0
 8002e0c:	f04f 0400 	mov.w	r4, #0
 8002e10:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bc90      	pop	{r4, r7}
 8002e1c:	4770      	bx	lr
	...

08002e20 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8002e20:	b490      	push	{r4, r7}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	f04f 0400 	mov.w	r4, #0
 8002e38:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	f04f 0300 	mov.w	r3, #0
 8002e42:	f04f 0400 	mov.w	r4, #0
 8002e46:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f04f 0400 	mov.w	r4, #0
 8002e54:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8002e5e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002e62:	2200      	movs	r2, #0
 8002e64:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8002e66:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <_ZN13PathFollowingC1Ev+0xec>)
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	f04f 0400 	mov.w	r4, #0
 8002e70:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8002e74:	4a25      	ldr	r2, [pc, #148]	; (8002f0c <_ZN13PathFollowingC1Ev+0xec>)
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	f04f 0400 	mov.w	r4, #0
 8002e7e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8002e82:	4a22      	ldr	r2, [pc, #136]	; (8002f0c <_ZN13PathFollowingC1Ev+0xec>)
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	f04f 0400 	mov.w	r4, #0
 8002e8c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8002e90:	4a1f      	ldr	r2, [pc, #124]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f04f 0400 	mov.w	r4, #0
 8002e9a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	f04f 0400 	mov.w	r4, #0
 8002ea8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8002eac:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002eae:	f04f 0300 	mov.w	r3, #0
 8002eb2:	f04f 0400 	mov.w	r4, #0
 8002eb6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	f04f 0400 	mov.w	r4, #0
 8002ec4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002eca:	f04f 0300 	mov.w	r3, #0
 8002ece:	f04f 0400 	mov.w	r4, #0
 8002ed2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8002ed6:	4a0e      	ldr	r2, [pc, #56]	; (8002f10 <_ZN13PathFollowingC1Ev+0xf0>)
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	f04f 0400 	mov.w	r4, #0
 8002ee0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	; (8002f14 <_ZN13PathFollowingC1Ev+0xf4>)
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	f04f 0400 	mov.w	r4, #0
 8002eee:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <_ZN13PathFollowingC1Ev+0xf4>)
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	f04f 0400 	mov.w	r4, #0
 8002efc:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4618      	mov	r0, r3
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc90      	pop	{r4, r7}
 8002f0a:	4770      	bx	lr
 8002f0c:	2002da20 	.word	0x2002da20
 8002f10:	2002d9b0 	.word	0x2002d9b0
 8002f14:	2002da10 	.word	0x2002da10

08002f18 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8002f20:	f001 fcb8 	bl	8004894 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 8002f24:	f107 0318 	add.w	r3, r7, #24
 8002f28:	2201      	movs	r2, #1
 8002f2a:	4915      	ldr	r1, [pc, #84]	; (8002f80 <_ZN13PathFollowing4initEv+0x68>)
 8002f2c:	4815      	ldr	r0, [pc, #84]	; (8002f84 <_ZN13PathFollowing4initEv+0x6c>)
 8002f2e:	f7fe fbc7 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 8002f32:	f107 0310 	add.w	r3, r7, #16
 8002f36:	2201      	movs	r2, #1
 8002f38:	4913      	ldr	r1, [pc, #76]	; (8002f88 <_ZN13PathFollowing4initEv+0x70>)
 8002f3a:	4812      	ldr	r0, [pc, #72]	; (8002f84 <_ZN13PathFollowing4initEv+0x6c>)
 8002f3c:	f7fe fbc0 	bl	80016c0 <sd_read_array_double>
	sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8002f40:	f107 0308 	add.w	r3, r7, #8
 8002f44:	2201      	movs	r2, #1
 8002f46:	4911      	ldr	r1, [pc, #68]	; (8002f8c <_ZN13PathFollowing4initEv+0x74>)
 8002f48:	480e      	ldr	r0, [pc, #56]	; (8002f84 <_ZN13PathFollowing4initEv+0x6c>)
 8002f4a:	f7fe fbb9 	bl	80016c0 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8002f4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002f52:	ed97 6b04 	vldr	d6, [r7, #16]
 8002f56:	ed97 5b02 	vldr	d5, [r7, #8]
 8002f5a:	eeb0 2a45 	vmov.f32	s4, s10
 8002f5e:	eef0 2a65 	vmov.f32	s5, s11
 8002f62:	eeb0 1a46 	vmov.f32	s2, s12
 8002f66:	eef0 1a66 	vmov.f32	s3, s13
 8002f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6e:	eef0 0a67 	vmov.f32	s1, s15
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f80c 	bl	8002f90 <_ZN13PathFollowing7setGainEddd>
}
 8002f78:	bf00      	nop
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	0801750c 	.word	0x0801750c
 8002f84:	08017514 	.word	0x08017514
 8002f88:	0801751c 	.word	0x0801751c
 8002f8c:	08017524 	.word	0x08017524

08002f90 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8002f90:	b490      	push	{r4, r7}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	61f8      	str	r0, [r7, #28]
 8002f98:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f9c:	ed87 1b02 	vstr	d1, [r7, #8]
 8002fa0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002fa6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002faa:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002fb0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002fb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <_ZN13PathFollowing7setGainEddd+0x3c>)
 8002fba:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002fbe:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8002fc2:	bf00      	nop
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc90      	pop	{r4, r7}
 8002fca:	4770      	bx	lr
 8002fcc:	2002da20 	.word	0x2002da20

08002fd0 <_ZN13PathFollowing8getKxValEv>:

double PathFollowing::getKxVal()
{
 8002fd0:	b490      	push	{r4, r7}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	return rtParam.kx;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <_ZN13PathFollowing8getKxValEv+0x24>)
 8002fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fde:	ec44 3b17 	vmov	d7, r3, r4
}
 8002fe2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe6:	eef0 0a67 	vmov.f32	s1, s15
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc90      	pop	{r4, r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2002da20 	.word	0x2002da20

08002ff8 <_ZN13PathFollowing8getKyValEv>:

double PathFollowing::getKyVal()
{
 8002ff8:	b490      	push	{r4, r7}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	return rtParam.ky;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <_ZN13PathFollowing8getKyValEv+0x24>)
 8003002:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003006:	ec44 3b17 	vmov	d7, r3, r4
}
 800300a:	eeb0 0a47 	vmov.f32	s0, s14
 800300e:	eef0 0a67 	vmov.f32	s1, s15
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bc90      	pop	{r4, r7}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2002da20 	.word	0x2002da20

08003020 <_ZN13PathFollowing8getKtValEv>:

double PathFollowing::getKtVal()
{
 8003020:	b490      	push	{r4, r7}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
	return rtParam.kt;
 8003028:	4b06      	ldr	r3, [pc, #24]	; (8003044 <_ZN13PathFollowing8getKtValEv+0x24>)
 800302a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800302e:	ec44 3b17 	vmov	d7, r3, r4
}
 8003032:	eeb0 0a47 	vmov.f32	s0, s14
 8003036:	eef0 0a67 	vmov.f32	s1, s15
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bc90      	pop	{r4, r7}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	2002da20 	.word	0x2002da20

08003048 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8003050:	2088      	movs	r0, #136	; 0x88
 8003052:	f7fe fe9a 	bl	8001d8a <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003056:	2080      	movs	r0, #128	; 0x80
 8003058:	f7fe fe97 	bl	8001d8a <INA260_init>
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	0000      	movs	r0, r0
	...

08003068 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003070:	2188      	movs	r1, #136	; 0x88
 8003072:	2002      	movs	r0, #2
 8003074:	f7fe fe26 	bl	8001cc4 <INA260_read>
 8003078:	4603      	mov	r3, r0
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa6a 	bl	8000554 <__aeabi_i2d>
 8003080:	a30c      	add	r3, pc, #48	; (adr r3, 80030b4 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd facf 	bl	8000628 <__aeabi_dmul>
 800308a:	4603      	mov	r3, r0
 800308c:	460c      	mov	r4, r1
 800308e:	4618      	mov	r0, r3
 8003090:	4621      	mov	r1, r4
 8003092:	f7fd fdc1 	bl	8000c18 <__aeabi_d2f>
 8003096:	4602      	mov	r2, r0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	4a03      	ldr	r2, [pc, #12]	; (80030b0 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80030a2:	6013      	str	r3, [r2, #0]
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}
 80030ac:	f3af 8000 	nop.w
 80030b0:	20000218 	.word	0x20000218
 80030b4:	47ae147b 	.word	0x47ae147b
 80030b8:	3f547ae1 	.word	0x3f547ae1

080030bc <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	ee07 3a90 	vmov	s15, r3

}
 80030cc:	eeb0 0a67 	vmov.f32	s0, s15
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	0000      	movs	r0, r0
 80030dc:	0000      	movs	r0, r0
	...

080030e0 <_ZN11PowerSensor12butteryCheckEv>:

bool PowerSensor::butteryCheck()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa41 	bl	8000578 <__aeabi_f2d>
 80030f6:	a311      	add	r3, pc, #68	; (adr r3, 800313c <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd fd06 	bl	8000b0c <__aeabi_dcmplt>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003108:	881b      	ldrh	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003110:	801a      	strh	r2, [r3, #0]
 8003112:	e002      	b.n	800311a <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8003114:	4b08      	ldr	r3, [pc, #32]	; (8003138 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003116:	2200      	movs	r2, #0
 8003118:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 800311a:	4b07      	ldr	r3, [pc, #28]	; (8003138 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d004      	beq.n	800312c <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003128:	2201      	movs	r2, #1
 800312a:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2000021c 	.word	0x2000021c
 800313c:	9999999a 	.word	0x9999999a
 8003140:	401d9999 	.word	0x401d9999

08003144 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003150:	2102      	movs	r1, #2
 8003152:	4822      	ldr	r0, [pc, #136]	; (80031dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003154:	f004 ff8e 	bl	8008074 <HAL_GPIO_ReadPin>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <_ZN12RotarySwitch8getValueEv+0x2c>
 8003168:	89fb      	ldrh	r3, [r7, #14]
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8003170:	2108      	movs	r1, #8
 8003172:	481a      	ldr	r0, [pc, #104]	; (80031dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003174:	f004 ff7e 	bl	8008074 <HAL_GPIO_ReadPin>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf0c      	ite	eq
 800317e:	2301      	moveq	r3, #1
 8003180:	2300      	movne	r3, #0
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	f043 0302 	orr.w	r3, r3, #2
 800318e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003190:	2110      	movs	r1, #16
 8003192:	4812      	ldr	r0, [pc, #72]	; (80031dc <_ZN12RotarySwitch8getValueEv+0x98>)
 8003194:	f004 ff6e 	bl	8008074 <HAL_GPIO_ReadPin>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf0c      	ite	eq
 800319e:	2301      	moveq	r3, #1
 80031a0:	2300      	movne	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	f043 0304 	orr.w	r3, r3, #4
 80031ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	480a      	ldr	r0, [pc, #40]	; (80031dc <_ZN12RotarySwitch8getValueEv+0x98>)
 80031b4:	f004 ff5e 	bl	8008074 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80031c8:	89fb      	ldrh	r3, [r7, #14]
 80031ca:	f043 0308 	orr.w	r3, r3, #8
 80031ce:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80031d0:	89fb      	ldrh	r3, [r7, #14]

}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40020c00 	.word	0x40020c00

080031e0 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
{

}
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4618      	mov	r0, r3
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8003204:	887b      	ldrh	r3, [r7, #2]
 8003206:	2b04      	cmp	r3, #4
 8003208:	d111      	bne.n	800322e <_ZN10SideSensor12updateStatusEt+0x36>
 800320a:	4b28      	ldr	r3, [pc, #160]	; (80032ac <_ZN10SideSensor12updateStatusEt+0xb4>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8003226:	4b21      	ldr	r3, [pc, #132]	; (80032ac <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
 800322c:	e010      	b.n	8003250 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d10d      	bne.n	8003250 <_ZN10SideSensor12updateStatusEt+0x58>
 8003234:	4b1d      	ldr	r3, [pc, #116]	; (80032ac <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	f083 0301 	eor.w	r3, r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 800324a:	4b18      	ldr	r3, [pc, #96]	; (80032ac <_ZN10SideSensor12updateStatusEt+0xb4>)
 800324c:	2200      	movs	r2, #0
 800324e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003256:	d111      	bne.n	800327c <_ZN10SideSensor12updateStatusEt+0x84>
 8003258:	4b15      	ldr	r3, [pc, #84]	; (80032b0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f083 0301 	eor.w	r3, r3, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	f043 0302 	orr.w	r3, r3, #2
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8003274:	4b0e      	ldr	r3, [pc, #56]	; (80032b0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 800327a:	e011      	b.n	80032a0 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 800327c:	887b      	ldrh	r3, [r7, #2]
 800327e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003282:	d10d      	bne.n	80032a0 <_ZN10SideSensor12updateStatusEt+0xa8>
 8003284:	4b0a      	ldr	r3, [pc, #40]	; (80032b0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d009      	beq.n	80032a0 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	f083 0302 	eor.w	r3, r3, #2
 8003294:	b29a      	uxth	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	2000021e 	.word	0x2000021e
 80032b0:	2000021f 	.word	0x2000021f

080032b4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a10      	ldr	r2, [pc, #64]	; (8003304 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80032c4:	3308      	adds	r3, #8
 80032c6:	4611      	mov	r1, r2
 80032c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80032cc:	4618      	mov	r0, r3
 80032ce:	f00f f9df 	bl	8012690 <memcpy>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	08017548 	.word	0x08017548

08003308 <_ZN20SystemIdentification11outputStoreEf>:
{

}

void SystemIdentification::outputStore(float output)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800331a:	2b00      	cmp	r3, #0
 800331c:	d006      	beq.n	800332c <_ZN20SystemIdentification11outputStoreEf+0x24>
		logger_->storeLog(output);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	ed97 0a00 	vldr	s0, [r7]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fade 	bl	80028e8 <_ZN6Logger8storeLogEf>
	}

}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <_ZN20SystemIdentification10outputSaveEv>:

void SystemIdentification::outputSave()
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a04      	ldr	r2, [pc, #16]	; (8003354 <_ZN20SystemIdentification10outputSaveEv+0x20>)
 8003342:	4905      	ldr	r1, [pc, #20]	; (8003358 <_ZN20SystemIdentification10outputSaveEv+0x24>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fb07 	bl	8002958 <_ZN6Logger8saveLogsEPKcS1_>
}
 800334a:	bf00      	nop
 800334c:	3708      	adds	r7, #8
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	0801773c 	.word	0x0801773c
 8003358:	08017748 	.word	0x08017748

0800335c <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 800335c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800336a:	2b00      	cmp	r3, #0
 800336c:	d048      	beq.n	8003400 <_ZN20SystemIdentification10updateMsigEv+0xa4>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4413      	add	r3, r2
 8003380:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800338c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800339c:	3301      	adds	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <_ZN20SystemIdentification10updateMsigEv+0xac>)
 80033ae:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80033b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033ba:	d304      	bcc.n	80033c6 <_ZN20SystemIdentification10updateMsigEv+0x6a>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80033c2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685c      	ldr	r4, [r3, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fd f8d1 	bl	8000578 <__aeabi_f2d>
 80033d6:	4605      	mov	r5, r0
 80033d8:	460e      	mov	r6, r1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80033e0:	eef1 7a67 	vneg.f32	s15, s15
 80033e4:	ee17 3a90 	vmov	r3, s15
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8c5 	bl	8000578 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	ec43 2b11 	vmov	d1, r2, r3
 80033f6:	ec46 5b10 	vmov	d0, r5, r6
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff fb76 	bl	8002aec <_ZN5Motor8setRatioEdd>

	}

}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003408:	20000220 	.word	0x20000220

0800340c <_ZN20SystemIdentification5startEv>:
{
	inputRatio_ = ratio;
}

void SystemIdentification::start()
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f7ff fad4 	bl	80029c6 <_ZN6Logger5startEv>
	processing_flag_ = true;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fad2 	bl	80029e6 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003470 <_ZN20SystemIdentification4stopEv+0x40>
 800345a:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003470 <_ZN20SystemIdentification4stopEv+0x40>
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fb44 	bl	8002aec <_ZN5Motor8setRatioEdd>
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}
 800346c:	f3af 8000 	nop.w
	...

08003478 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8003478:	b490      	push	{r4, r7}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f04f 0200 	mov.w	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	f04f 0400 	mov.w	r4, #0
 80034a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	621a      	str	r2, [r3, #32]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	625a      	str	r2, [r3, #36]	; 0x24
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc90      	pop	{r4, r7}
 8003500:	4770      	bx	lr
 8003502:	0000      	movs	r0, r0
 8003504:	0000      	movs	r0, r0
	...

08003508 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003508:	b590      	push	{r4, r7, lr}
 800350a:	b089      	sub	sp, #36	; 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	f107 0208 	add.w	r2, r7, #8
 8003518:	f107 0110 	add.w	r1, r7, #16
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd ff13 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 8003522:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003526:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	f7fc fec5 	bl	80002bc <__adddf3>
 8003532:	4603      	mov	r3, r0
 8003534:	460c      	mov	r4, r1
 8003536:	4618      	mov	r0, r3
 8003538:	4621      	mov	r1, r4
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003542:	f7fd f99b 	bl	800087c <__aeabi_ddiv>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800354e:	a310      	add	r3, pc, #64	; (adr r3, 8003590 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 8003550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003554:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003558:	f7fd f866 	bl	8000628 <__aeabi_dmul>
 800355c:	4603      	mov	r3, r0
 800355e:	460c      	mov	r4, r1
 8003560:	4618      	mov	r0, r3
 8003562:	4621      	mov	r1, r4
 8003564:	f7fd fb58 	bl	8000c18 <__aeabi_d2f>
 8003568:	4602      	mov	r2, r0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd f800 	bl	8000578 <__aeabi_f2d>
 8003578:	4603      	mov	r3, r0
 800357a:	460c      	mov	r4, r1
 800357c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003580:	eeb0 0a47 	vmov.f32	s0, s14
 8003584:	eef0 0a67 	vmov.f32	s1, s15
 8003588:	3724      	adds	r7, #36	; 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}
 800358e:	bf00      	nop
 8003590:	1ab1d998 	.word	0x1ab1d998
 8003594:	3f7830b5 	.word	0x3f7830b5

08003598 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359a:	ed2d 8b02 	vpush	{d8}
 800359e:	b08d      	sub	sp, #52	; 0x34
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	ed93 7a00 	vldr	s14, [r3]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80035b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035b4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	ed93 8a01 	vldr	s16, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe faa4 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 80035c8:	eef0 7a40 	vmov.f32	s15, s0
 80035cc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80035d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80035da:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_i += v_ki_ * v_diff * DELTA_T;
 80035e6:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <_ZN12VelocityCtrl3pidEv+0x228>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fc ffc4 	bl	8000578 <__aeabi_f2d>
 80035f0:	4604      	mov	r4, r0
 80035f2:	460d      	mov	r5, r1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80035fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80035fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003602:	ee17 0a90 	vmov	r0, s15
 8003606:	f7fc ffb7 	bl	8000578 <__aeabi_f2d>
 800360a:	a36b      	add	r3, pc, #428	; (adr r3, 80037b8 <_ZN12VelocityCtrl3pidEv+0x220>)
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f7fd f80a 	bl	8000628 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4620      	mov	r0, r4
 800361a:	4629      	mov	r1, r5
 800361c:	f7fc fe4e 	bl	80002bc <__adddf3>
 8003620:	4603      	mov	r3, r0
 8003622:	460c      	mov	r4, r1
 8003624:	4618      	mov	r0, r3
 8003626:	4621      	mov	r1, r4
 8003628:	f7fd faf6 	bl	8000c18 <__aeabi_d2f>
 800362c:	4602      	mov	r2, r0
 800362e:	4b64      	ldr	r3, [pc, #400]	; (80037c0 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003630:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	ed93 7a07 	vldr	s14, [r3, #28]
 8003638:	4b62      	ldr	r3, [pc, #392]	; (80037c4 <_ZN12VelocityCtrl3pidEv+0x22c>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003642:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff93 	bl	8000578 <__aeabi_f2d>
 8003652:	a359      	add	r3, pc, #356	; (adr r3, 80037b8 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f7fc ffe6 	bl	8000628 <__aeabi_dmul>
 800365c:	4603      	mov	r3, r0
 800365e:	460c      	mov	r4, r1
 8003660:	4618      	mov	r0, r3
 8003662:	4621      	mov	r1, r4
 8003664:	f7fd fad8 	bl	8000c18 <__aeabi_d2f>
 8003668:	4603      	mov	r3, r0
 800366a:	623b      	str	r3, [r7, #32]

	o_p = o_kp_ * o_diff;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003672:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800367a:	edc7 7a07 	vstr	s15, [r7, #28]
	o_i += o_ki_ * o_diff * DELTA_T;
 800367e:	4b52      	ldr	r3, [pc, #328]	; (80037c8 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff78 	bl	8000578 <__aeabi_f2d>
 8003688:	4604      	mov	r4, r0
 800368a:	460d      	mov	r5, r1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003692:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800369a:	ee17 0a90 	vmov	r0, s15
 800369e:	f7fc ff6b 	bl	8000578 <__aeabi_f2d>
 80036a2:	a345      	add	r3, pc, #276	; (adr r3, 80037b8 <_ZN12VelocityCtrl3pidEv+0x220>)
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	f7fc ffbe 	bl	8000628 <__aeabi_dmul>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4620      	mov	r0, r4
 80036b2:	4629      	mov	r1, r5
 80036b4:	f7fc fe02 	bl	80002bc <__adddf3>
 80036b8:	4603      	mov	r3, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	4618      	mov	r0, r3
 80036be:	4621      	mov	r1, r4
 80036c0:	f7fd faaa 	bl	8000c18 <__aeabi_d2f>
 80036c4:	4602      	mov	r2, r0
 80036c6:	4b40      	ldr	r3, [pc, #256]	; (80037c8 <_ZN12VelocityCtrl3pidEv+0x230>)
 80036c8:	601a      	str	r2, [r3, #0]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80036d0:	4b3e      	ldr	r3, [pc, #248]	; (80037cc <_ZN12VelocityCtrl3pidEv+0x234>)
 80036d2:	edd3 7a00 	vldr	s15, [r3]
 80036d6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80036da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e2:	ee17 0a90 	vmov	r0, s15
 80036e6:	f7fc ff47 	bl	8000578 <__aeabi_f2d>
 80036ea:	a333      	add	r3, pc, #204	; (adr r3, 80037b8 <_ZN12VelocityCtrl3pidEv+0x220>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fc ff9a 	bl	8000628 <__aeabi_dmul>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	4618      	mov	r0, r3
 80036fa:	4621      	mov	r1, r4
 80036fc:	f7fd fa8c 	bl	8000c18 <__aeabi_d2f>
 8003700:	4603      	mov	r3, r0
 8003702:	61bb      	str	r3, [r7, #24]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003704:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003708:	edd7 7a08 	vldr	s15, [r7, #32]
 800370c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <_ZN12VelocityCtrl3pidEv+0x228>)
 8003712:	edd3 7a00 	vldr	s15, [r3]
 8003716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371a:	edc7 7a05 	vstr	s15, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 8003722:	ed97 7a07 	vldr	s14, [r7, #28]
 8003726:	edd7 7a06 	vldr	s15, [r7, #24]
 800372a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372e:	4b26      	ldr	r3, [pc, #152]	; (80037c8 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003730:	edd3 7a00 	vldr	s15, [r3]
 8003734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003738:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 800373c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003740:	edd7 7a06 	vldr	s15, [r7, #24]
 8003744:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <_ZN12VelocityCtrl3pidEv+0x230>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003752:	eef1 7a67 	vneg.f32	s15, s15
 8003756:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800375e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003762:	edd7 7a03 	vldr	s15, [r7, #12]
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	ee17 0a90 	vmov	r0, s15
 800376e:	f7fc ff03 	bl	8000578 <__aeabi_f2d>
 8003772:	4605      	mov	r5, r0
 8003774:	460e      	mov	r6, r1
 8003776:	ed97 7a05 	vldr	s14, [r7, #20]
 800377a:	edd7 7a02 	vldr	s15, [r7, #8]
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	ee17 0a90 	vmov	r0, s15
 8003786:	f7fc fef7 	bl	8000578 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	ec43 2b11 	vmov	d1, r2, r3
 8003792:	ec46 5b10 	vmov	d0, r5, r6
 8003796:	4620      	mov	r0, r4
 8003798:	f7ff f9a8 	bl	8002aec <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800379c:	4a09      	ldr	r2, [pc, #36]	; (80037c4 <_ZN12VelocityCtrl3pidEv+0x22c>)
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <_ZN12VelocityCtrl3pidEv+0x234>)
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	6013      	str	r3, [r2, #0]
}
 80037a8:	bf00      	nop
 80037aa:	3734      	adds	r7, #52	; 0x34
 80037ac:	46bd      	mov	sp, r7
 80037ae:	ecbd 8b02 	vpop	{d8}
 80037b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037b4:	f3af 8000 	nop.w
 80037b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80037bc:	3f50624d 	.word	0x3f50624d
 80037c0:	2000022c 	.word	0x2000022c
 80037c4:	20000224 	.word	0x20000224
 80037c8:	20000230 	.word	0x20000230
 80037cc:	20000228 	.word	0x20000228

080037d0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80037dc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	605a      	str	r2, [r3, #4]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	ed87 0a02 	vstr	s0, [r7, #8]
 8003804:	edc7 0a01 	vstr	s1, [r7, #4]
 8003808:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	619a      	str	r2, [r3, #24]
	v_ki_ = ki;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	621a      	str	r2, [r3, #32]
	v_kd_ = kd;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	61da      	str	r2, [r3, #28]
}
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	ed87 0a02 	vstr	s0, [r7, #8]
 8003836:	edc7 0a01 	vstr	s1, [r7, #4]
 800383a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
	o_ki_ = ki;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
	o_kd_ = kd;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fe4f 	bl	8003508 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff fe8f 	bl	8003598 <_ZN12VelocityCtrl3pidEv>
	}


}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b4:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80038d0 <_ZN12VelocityCtrl4stopEv+0x30>
 80038b8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80038d0 <_ZN12VelocityCtrl4stopEv+0x30>
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff f915 	bl	8002aec <_ZN5Motor8setRatioEdd>

}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	f3af 8000 	nop.w
	...

080038d8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80038e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038e4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80038f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80038f4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80038f8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003900:	e000      	b.n	8003904 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003902:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003904:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f9      	beq.n	8003902 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800390e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003918:	687b      	ldr	r3, [r7, #4]
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b086      	sub	sp, #24
 800392a:	af00      	add	r7, sp, #0
 800392c:	60f8      	str	r0, [r7, #12]
 800392e:	60b9      	str	r1, [r7, #8]
 8003930:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003932:	2300      	movs	r3, #0
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e009      	b.n	800394c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	60ba      	str	r2, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ffc9 	bl	80038d8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	3301      	adds	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	dbf1      	blt.n	8003938 <_write+0x12>
  }
  return len;
 8003954:	687b      	ldr	r3, [r7, #4]
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b082      	sub	sp, #8
 8003962:	af00      	add	r7, sp, #0
 8003964:	4603      	mov	r3, r0
 8003966:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003968:	88fb      	ldrh	r3, [r7, #6]
 800396a:	4618      	mov	r0, r3
 800396c:	f001 ff3a 	bl	80057e4 <cppExit>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 800398a:	f001 fe9d 	bl	80056c8 <cppFlip1ms>

		tim6_timer++;
 800398e:	4b1d      	ldr	r3, [pc, #116]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003996:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d902      	bls.n	80039a8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a17      	ldr	r2, [pc, #92]	; (8003a0c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d10e      	bne.n	80039d0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 80039b2:	f001 feef 	bl	8005794 <cppFlip100ns>

		tim7_timer++;
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3301      	adds	r3, #1
 80039bc:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039be:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d902      	bls.n	80039d0 <HAL_TIM_PeriodElapsedCallback+0x58>
 80039ca:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0f      	ldr	r2, [pc, #60]	; (8003a14 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d10e      	bne.n	80039f8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 80039da:	f001 fee5 	bl	80057a8 <cppFlip10ms>

		tim13_timer++;
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	4a0c      	ldr	r2, [pc, #48]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80039e6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a06      	ldr	r2, [pc, #24]	; (8003a08 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d902      	bls.n	80039f8 <HAL_TIM_PeriodElapsedCallback+0x80>
 80039f2:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]
	}

}
 80039f8:	bf00      	nop
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	40001000 	.word	0x40001000
 8003a04:	2002d690 	.word	0x2002d690
 8003a08:	0001869f 	.word	0x0001869f
 8003a0c:	40001400 	.word	0x40001400
 8003a10:	2002d6d4 	.word	0x2002d6d4
 8003a14:	40001c00 	.word	0x40001c00
 8003a18:	2002d6d8 	.word	0x2002d6d8

08003a1c <init>:

void init()
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a26:	4808      	ldr	r0, [pc, #32]	; (8003a48 <init+0x2c>)
 8003a28:	f004 fb3c 	bl	80080a4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003a2c:	4807      	ldr	r0, [pc, #28]	; (8003a4c <init+0x30>)
 8003a2e:	f008 fa1c 	bl	800be6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003a32:	4807      	ldr	r0, [pc, #28]	; (8003a50 <init+0x34>)
 8003a34:	f008 fa19 	bl	800be6a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003a38:	4806      	ldr	r0, [pc, #24]	; (8003a54 <init+0x38>)
 8003a3a:	f008 fa16 	bl	800be6a <HAL_TIM_Base_Start_IT>

	cppInit();
 8003a3e:	f001 fd93 	bl	8005568 <cppInit>

	//path_following_initialize();

}
 8003a42:	bf00      	nop
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	2002d7bc 	.word	0x2002d7bc
 8003a50:	2002d960 	.word	0x2002d960
 8003a54:	2002d6dc 	.word	0x2002d6dc

08003a58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a5c:	f003 f81a 	bl	8006a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a60:	f000 f82a 	bl	8003ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a64:	f000 fdbc 	bl	80045e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a68:	f000 fd8a 	bl	8004580 <MX_DMA_Init>
  MX_I2C2_Init();
 8003a6c:	f000 f9e8 	bl	8003e40 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003a70:	f000 fa14 	bl	8003e9c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003a74:	f000 fa32 	bl	8003edc <MX_SPI2_Init>
  MX_TIM1_Init();
 8003a78:	f000 fa66 	bl	8003f48 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003a7c:	f000 fb70 	bl	8004160 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003a80:	f000 fc3c 	bl	80042fc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003a84:	f000 fd52 	bl	800452c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003a88:	f00a f9c2 	bl	800de10 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003a8c:	f000 fbcc 	bl	8004228 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003a90:	f000 f9a8 	bl	8003de4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003a94:	f000 fb00 	bl	8004098 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003a98:	f000 fc88 	bl	80043ac <MX_TIM10_Init>
  MX_TIM11_Init();
 8003a9c:	f000 fcd4 	bl	8004448 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003aa0:	f000 f898 	bl	8003bd4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003aa4:	f000 fbf6 	bl	8004294 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003aa8:	f000 fd1c 	bl	80044e4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003aac:	f7ff ffb6 	bl	8003a1c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003ab0:	f001 feaa 	bl	8005808 <cppLoop>
 8003ab4:	e7fc      	b.n	8003ab0 <main+0x58>
	...

08003ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b0a4      	sub	sp, #144	; 0x90
 8003abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003abe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003ac2:	2234      	movs	r2, #52	; 0x34
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f00e fded 	bl	80126a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003acc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	609a      	str	r2, [r3, #8]
 8003ad8:	60da      	str	r2, [r3, #12]
 8003ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	223c      	movs	r2, #60	; 0x3c
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00e fdde 	bl	80126a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	4b37      	ldr	r3, [pc, #220]	; (8003bcc <SystemClock_Config+0x114>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a36      	ldr	r2, [pc, #216]	; (8003bcc <SystemClock_Config+0x114>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <SystemClock_Config+0x114>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b06:	2300      	movs	r3, #0
 8003b08:	607b      	str	r3, [r7, #4]
 8003b0a:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <SystemClock_Config+0x118>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a30      	ldr	r2, [pc, #192]	; (8003bd0 <SystemClock_Config+0x118>)
 8003b10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <SystemClock_Config+0x118>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b22:	2301      	movs	r3, #1
 8003b24:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b2a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b34:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003b36:	2308      	movs	r3, #8
 8003b38:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003b3a:	23b4      	movs	r3, #180	; 0xb4
 8003b3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b40:	2302      	movs	r3, #2
 8003b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003b46:	2308      	movs	r3, #8
 8003b48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b56:	4618      	mov	r0, r3
 8003b58:	f005 fede 	bl	8009918 <HAL_RCC_OscConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003b62:	f000 fe93 	bl	800488c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003b66:	f005 fa59 	bl	800901c <HAL_PWREx_EnableOverDrive>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d001      	beq.n	8003b74 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003b70:	f000 fe8c 	bl	800488c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b74:	230f      	movs	r3, #15
 8003b76:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b8a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b90:	2105      	movs	r1, #5
 8003b92:	4618      	mov	r0, r3
 8003b94:	f005 fa92 	bl	80090bc <HAL_RCC_ClockConfig>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d001      	beq.n	8003ba2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003b9e:	f000 fe75 	bl	800488c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003ba2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003ba6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003bac:	2300      	movs	r3, #0
 8003bae:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f005 fc71 	bl	800949c <HAL_RCCEx_PeriphCLKConfig>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003bc0:	f000 fe64 	bl	800488c <Error_Handler>
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	3790      	adds	r7, #144	; 0x90
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	40007000 	.word	0x40007000

08003bd4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003bda:	463b      	mov	r3, r7
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003be6:	4b7c      	ldr	r3, [pc, #496]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003be8:	4a7c      	ldr	r2, [pc, #496]	; (8003ddc <MX_ADC2_Init+0x208>)
 8003bea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003bec:	4b7a      	ldr	r3, [pc, #488]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003bee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bf2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003bf4:	4b78      	ldr	r3, [pc, #480]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003bfa:	4b77      	ldr	r3, [pc, #476]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003c00:	4b75      	ldr	r3, [pc, #468]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c06:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c0e:	4b72      	ldr	r3, [pc, #456]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c14:	4b70      	ldr	r3, [pc, #448]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c16:	4a72      	ldr	r2, [pc, #456]	; (8003de0 <MX_ADC2_Init+0x20c>)
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c1a:	4b6f      	ldr	r3, [pc, #444]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003c20:	4b6d      	ldr	r3, [pc, #436]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c22:	220e      	movs	r2, #14
 8003c24:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003c26:	4b6c      	ldr	r3, [pc, #432]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c2e:	4b6a      	ldr	r3, [pc, #424]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c30:	2201      	movs	r2, #1
 8003c32:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003c34:	4868      	ldr	r0, [pc, #416]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c36:	f002 ffc1 	bl	8006bbc <HAL_ADC_Init>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003c40:	f000 fe24 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c44:	230a      	movs	r3, #10
 8003c46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003c4c:	2306      	movs	r3, #6
 8003c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c50:	463b      	mov	r3, r7
 8003c52:	4619      	mov	r1, r3
 8003c54:	4860      	ldr	r0, [pc, #384]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c56:	f003 f905 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003c60:	f000 fe14 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003c64:	230b      	movs	r3, #11
 8003c66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4859      	ldr	r0, [pc, #356]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c72:	f003 f8f7 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003c7c:	f000 fe06 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003c80:	230c      	movs	r3, #12
 8003c82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003c84:	2303      	movs	r3, #3
 8003c86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003c88:	463b      	mov	r3, r7
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4852      	ldr	r0, [pc, #328]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003c8e:	f003 f8e9 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003c98:	f000 fdf8 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003c9c:	230d      	movs	r3, #13
 8003c9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	484b      	ldr	r0, [pc, #300]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003caa:	f003 f8db 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003cb4:	f000 fdea 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003cbc:	2305      	movs	r3, #5
 8003cbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cc0:	463b      	mov	r3, r7
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4844      	ldr	r0, [pc, #272]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003cc6:	f003 f8cd 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003cd0:	f000 fddc 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003cd8:	2306      	movs	r3, #6
 8003cda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cdc:	463b      	mov	r3, r7
 8003cde:	4619      	mov	r1, r3
 8003ce0:	483d      	ldr	r0, [pc, #244]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003ce2:	f003 f8bf 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003cec:	f000 fdce 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003cf4:	2307      	movs	r3, #7
 8003cf6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4836      	ldr	r0, [pc, #216]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003cfe:	f003 f8b1 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003d08:	f000 fdc0 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003d10:	2308      	movs	r3, #8
 8003d12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d14:	463b      	mov	r3, r7
 8003d16:	4619      	mov	r1, r3
 8003d18:	482f      	ldr	r0, [pc, #188]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003d1a:	f003 f8a3 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003d24:	f000 fdb2 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003d28:	2304      	movs	r3, #4
 8003d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003d2c:	2309      	movs	r3, #9
 8003d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d30:	463b      	mov	r3, r7
 8003d32:	4619      	mov	r1, r3
 8003d34:	4828      	ldr	r0, [pc, #160]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003d36:	f003 f895 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003d40:	f000 fda4 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003d44:	2305      	movs	r3, #5
 8003d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003d48:	230a      	movs	r3, #10
 8003d4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d4c:	463b      	mov	r3, r7
 8003d4e:	4619      	mov	r1, r3
 8003d50:	4821      	ldr	r0, [pc, #132]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003d52:	f003 f887 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003d5c:	f000 fd96 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003d60:	2306      	movs	r3, #6
 8003d62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003d64:	230b      	movs	r3, #11
 8003d66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d68:	463b      	mov	r3, r7
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	481a      	ldr	r0, [pc, #104]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003d6e:	f003 f879 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003d78:	f000 fd88 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003d80:	230c      	movs	r3, #12
 8003d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d84:	463b      	mov	r3, r7
 8003d86:	4619      	mov	r1, r3
 8003d88:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003d8a:	f003 f86b 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003d94:	f000 fd7a 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003d98:	2308      	movs	r3, #8
 8003d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003d9c:	230d      	movs	r3, #13
 8003d9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da0:	463b      	mov	r3, r7
 8003da2:	4619      	mov	r1, r3
 8003da4:	480c      	ldr	r0, [pc, #48]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003da6:	f003 f85d 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003db0:	f000 fd6c 	bl	800488c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003db4:	2309      	movs	r3, #9
 8003db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003db8:	230e      	movs	r3, #14
 8003dba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dbc:	463b      	mov	r3, r7
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4805      	ldr	r0, [pc, #20]	; (8003dd8 <MX_ADC2_Init+0x204>)
 8003dc2:	f003 f84f 	bl	8006e64 <HAL_ADC_ConfigChannel>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003dcc:	f000 fd5e 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	2002d560 	.word	0x2002d560
 8003ddc:	40012100 	.word	0x40012100
 8003de0:	0f000001 	.word	0x0f000001

08003de4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003de8:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003dea:	4a13      	ldr	r2, [pc, #76]	; (8003e38 <MX_I2C1_Init+0x54>)
 8003dec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003df0:	4a12      	ldr	r2, [pc, #72]	; (8003e3c <MX_I2C1_Init+0x58>)
 8003df2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003df4:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e00:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e0e:	4b09      	ldr	r3, [pc, #36]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e14:	4b07      	ldr	r3, [pc, #28]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003e1a:	4b06      	ldr	r3, [pc, #24]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e1c:	2280      	movs	r2, #128	; 0x80
 8003e1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003e20:	4804      	ldr	r0, [pc, #16]	; (8003e34 <MX_I2C1_Init+0x50>)
 8003e22:	f004 f971 	bl	8008108 <HAL_I2C_Init>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003e2c:	f000 fd2e 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003e30:	bf00      	nop
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	2002d5a8 	.word	0x2002d5a8
 8003e38:	40005400 	.word	0x40005400
 8003e3c:	000186a0 	.word	0x000186a0

08003e40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <MX_I2C2_Init+0x54>)
 8003e48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e4c:	4a12      	ldr	r2, [pc, #72]	; (8003e98 <MX_I2C2_Init+0x58>)
 8003e4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e62:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e70:	4b07      	ldr	r3, [pc, #28]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003e7c:	4804      	ldr	r0, [pc, #16]	; (8003e90 <MX_I2C2_Init+0x50>)
 8003e7e:	f004 f943 	bl	8008108 <HAL_I2C_Init>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003e88:	f000 fd00 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003e8c:	bf00      	nop
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2002d63c 	.word	0x2002d63c
 8003e94:	40005800 	.word	0x40005800
 8003e98:	000186a0 	.word	0x000186a0

08003e9c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <MX_SDIO_SD_Init+0x3c>)
 8003ea4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003eac:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ebe:	4b05      	ldr	r3, [pc, #20]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003ec4:	4b03      	ldr	r3, [pc, #12]	; (8003ed4 <MX_SDIO_SD_Init+0x38>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	2002d83c 	.word	0x2002d83c
 8003ed8:	40012c00 	.word	0x40012c00

08003edc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003ee2:	4a18      	ldr	r2, [pc, #96]	; (8003f44 <MX_SPI2_Init+0x68>)
 8003ee4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ee6:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003eec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ef4:	4b12      	ldr	r3, [pc, #72]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003efc:	2202      	movs	r2, #2
 8003efe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f10:	2228      	movs	r2, #40	; 0x28
 8003f12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f20:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003f26:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f28:	220a      	movs	r2, #10
 8003f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003f2c:	4804      	ldr	r0, [pc, #16]	; (8003f40 <MX_SPI2_Init+0x64>)
 8003f2e:	f007 fa1d 	bl	800b36c <HAL_SPI_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003f38:	f000 fca8 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f3c:	bf00      	nop
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	2002d488 	.word	0x2002d488
 8003f44:	40003800 	.word	0x40003800

08003f48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b09a      	sub	sp, #104	; 0x68
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f00e fba5 	bl	80126a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f66:	f107 0320 	add.w	r3, r7, #32
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	609a      	str	r2, [r3, #8]
 8003f72:	60da      	str	r2, [r3, #12]
 8003f74:	611a      	str	r2, [r3, #16]
 8003f76:	615a      	str	r2, [r3, #20]
 8003f78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f7a:	463b      	mov	r3, r7
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	2100      	movs	r1, #0
 8003f80:	4618      	mov	r0, r3
 8003f82:	f00e fb90 	bl	80126a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f86:	4b42      	ldr	r3, [pc, #264]	; (8004090 <MX_TIM1_Init+0x148>)
 8003f88:	4a42      	ldr	r2, [pc, #264]	; (8004094 <MX_TIM1_Init+0x14c>)
 8003f8a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f8c:	4b40      	ldr	r3, [pc, #256]	; (8004090 <MX_TIM1_Init+0x148>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <MX_TIM1_Init+0x148>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f98:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <MX_TIM1_Init+0x148>)
 8003f9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fa0:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <MX_TIM1_Init+0x148>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003fa6:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <MX_TIM1_Init+0x148>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fac:	4b38      	ldr	r3, [pc, #224]	; (8004090 <MX_TIM1_Init+0x148>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fb2:	4837      	ldr	r0, [pc, #220]	; (8004090 <MX_TIM1_Init+0x148>)
 8003fb4:	f007 ff7d 	bl	800beb2 <HAL_TIM_PWM_Init>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003fbe:	f000 fc65 	bl	800488c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fea:	4619      	mov	r1, r3
 8003fec:	4828      	ldr	r0, [pc, #160]	; (8004090 <MX_TIM1_Init+0x148>)
 8003fee:	f007 ffc9 	bl	800bf84 <HAL_TIM_Encoder_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003ff8:	f000 fc48 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004000:	2300      	movs	r3, #0
 8004002:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004004:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004008:	4619      	mov	r1, r3
 800400a:	4821      	ldr	r0, [pc, #132]	; (8004090 <MX_TIM1_Init+0x148>)
 800400c:	f008 fcf0 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8004016:	f000 fc39 	bl	800488c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800401a:	2360      	movs	r3, #96	; 0x60
 800401c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004022:	2300      	movs	r3, #0
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004026:	2300      	movs	r3, #0
 8004028:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800402e:	2300      	movs	r3, #0
 8004030:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004032:	2300      	movs	r3, #0
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004036:	f107 0320 	add.w	r3, r7, #32
 800403a:	2208      	movs	r2, #8
 800403c:	4619      	mov	r1, r3
 800403e:	4814      	ldr	r0, [pc, #80]	; (8004090 <MX_TIM1_Init+0x148>)
 8004040:	f008 f972 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800404a:	f000 fc1f 	bl	800488c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004056:	2300      	movs	r3, #0
 8004058:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800405e:	2300      	movs	r3, #0
 8004060:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004066:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800406c:	463b      	mov	r3, r7
 800406e:	4619      	mov	r1, r3
 8004070:	4807      	ldr	r0, [pc, #28]	; (8004090 <MX_TIM1_Init+0x148>)
 8004072:	f008 fd39 	bl	800cae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800407c:	f000 fc06 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004080:	4803      	ldr	r0, [pc, #12]	; (8004090 <MX_TIM1_Init+0x148>)
 8004082:	f000 fff3 	bl	800506c <HAL_TIM_MspPostInit>

}
 8004086:	bf00      	nop
 8004088:	3768      	adds	r7, #104	; 0x68
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	2002d7fc 	.word	0x2002d7fc
 8004094:	40010000 	.word	0x40010000

08004098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800409e:	f107 0320 	add.w	r3, r7, #32
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
 80040b4:	611a      	str	r2, [r3, #16]
 80040b6:	615a      	str	r2, [r3, #20]
 80040b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040bc:	4a27      	ldr	r2, [pc, #156]	; (800415c <MX_TIM3_Init+0xc4>)
 80040be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80040c0:	4b25      	ldr	r3, [pc, #148]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040c2:	2200      	movs	r2, #0
 80040c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c6:	4b24      	ldr	r3, [pc, #144]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80040cc:	4b22      	ldr	r3, [pc, #136]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d4:	4b20      	ldr	r3, [pc, #128]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040da:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80040e0:	481d      	ldr	r0, [pc, #116]	; (8004158 <MX_TIM3_Init+0xc0>)
 80040e2:	f007 fee6 	bl	800beb2 <HAL_TIM_PWM_Init>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80040ec:	f000 fbce 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040f8:	f107 0320 	add.w	r3, r7, #32
 80040fc:	4619      	mov	r1, r3
 80040fe:	4816      	ldr	r0, [pc, #88]	; (8004158 <MX_TIM3_Init+0xc0>)
 8004100:	f008 fc76 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800410a:	f000 fbbf 	bl	800488c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800410e:	2360      	movs	r3, #96	; 0x60
 8004110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004112:	2300      	movs	r3, #0
 8004114:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800411e:	1d3b      	adds	r3, r7, #4
 8004120:	2200      	movs	r2, #0
 8004122:	4619      	mov	r1, r3
 8004124:	480c      	ldr	r0, [pc, #48]	; (8004158 <MX_TIM3_Init+0xc0>)
 8004126:	f008 f8ff 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004130:	f000 fbac 	bl	800488c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004134:	1d3b      	adds	r3, r7, #4
 8004136:	2204      	movs	r2, #4
 8004138:	4619      	mov	r1, r3
 800413a:	4807      	ldr	r0, [pc, #28]	; (8004158 <MX_TIM3_Init+0xc0>)
 800413c:	f008 f8f4 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004146:	f000 fba1 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800414a:	4803      	ldr	r0, [pc, #12]	; (8004158 <MX_TIM3_Init+0xc0>)
 800414c:	f000 ff8e 	bl	800506c <HAL_TIM_MspPostInit>

}
 8004150:	bf00      	nop
 8004152:	3728      	adds	r7, #40	; 0x28
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	2002d694 	.word	0x2002d694
 800415c:	40000400 	.word	0x40000400

08004160 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004166:	f107 0320 	add.w	r3, r7, #32
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	60da      	str	r2, [r3, #12]
 800417c:	611a      	str	r2, [r3, #16]
 800417e:	615a      	str	r2, [r3, #20]
 8004180:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004182:	4b27      	ldr	r3, [pc, #156]	; (8004220 <MX_TIM4_Init+0xc0>)
 8004184:	4a27      	ldr	r2, [pc, #156]	; (8004224 <MX_TIM4_Init+0xc4>)
 8004186:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004188:	4b25      	ldr	r3, [pc, #148]	; (8004220 <MX_TIM4_Init+0xc0>)
 800418a:	2200      	movs	r2, #0
 800418c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <MX_TIM4_Init+0xc0>)
 8004190:	2200      	movs	r2, #0
 8004192:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004194:	4b22      	ldr	r3, [pc, #136]	; (8004220 <MX_TIM4_Init+0xc0>)
 8004196:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800419a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800419c:	4b20      	ldr	r3, [pc, #128]	; (8004220 <MX_TIM4_Init+0xc0>)
 800419e:	2200      	movs	r2, #0
 80041a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041a2:	4b1f      	ldr	r3, [pc, #124]	; (8004220 <MX_TIM4_Init+0xc0>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80041a8:	481d      	ldr	r0, [pc, #116]	; (8004220 <MX_TIM4_Init+0xc0>)
 80041aa:	f007 fe82 	bl	800beb2 <HAL_TIM_PWM_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80041b4:	f000 fb6a 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041b8:	2300      	movs	r3, #0
 80041ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80041c0:	f107 0320 	add.w	r3, r7, #32
 80041c4:	4619      	mov	r1, r3
 80041c6:	4816      	ldr	r0, [pc, #88]	; (8004220 <MX_TIM4_Init+0xc0>)
 80041c8:	f008 fc12 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80041d2:	f000 fb5b 	bl	800488c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041d6:	2360      	movs	r3, #96	; 0x60
 80041d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2208      	movs	r2, #8
 80041ea:	4619      	mov	r1, r3
 80041ec:	480c      	ldr	r0, [pc, #48]	; (8004220 <MX_TIM4_Init+0xc0>)
 80041ee:	f008 f89b 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80041f8:	f000 fb48 	bl	800488c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	220c      	movs	r2, #12
 8004200:	4619      	mov	r1, r3
 8004202:	4807      	ldr	r0, [pc, #28]	; (8004220 <MX_TIM4_Init+0xc0>)
 8004204:	f008 f890 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800420e:	f000 fb3d 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004212:	4803      	ldr	r0, [pc, #12]	; (8004220 <MX_TIM4_Init+0xc0>)
 8004214:	f000 ff2a 	bl	800506c <HAL_TIM_MspPostInit>

}
 8004218:	bf00      	nop
 800421a:	3728      	adds	r7, #40	; 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	2002d520 	.word	0x2002d520
 8004224:	40000800 	.word	0x40000800

08004228 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800422e:	463b      	mov	r3, r7
 8004230:	2200      	movs	r2, #0
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004236:	4b15      	ldr	r3, [pc, #84]	; (800428c <MX_TIM6_Init+0x64>)
 8004238:	4a15      	ldr	r2, [pc, #84]	; (8004290 <MX_TIM6_Init+0x68>)
 800423a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800423c:	4b13      	ldr	r3, [pc, #76]	; (800428c <MX_TIM6_Init+0x64>)
 800423e:	2259      	movs	r2, #89	; 0x59
 8004240:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004242:	4b12      	ldr	r3, [pc, #72]	; (800428c <MX_TIM6_Init+0x64>)
 8004244:	2200      	movs	r2, #0
 8004246:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004248:	4b10      	ldr	r3, [pc, #64]	; (800428c <MX_TIM6_Init+0x64>)
 800424a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800424e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004250:	4b0e      	ldr	r3, [pc, #56]	; (800428c <MX_TIM6_Init+0x64>)
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004256:	480d      	ldr	r0, [pc, #52]	; (800428c <MX_TIM6_Init+0x64>)
 8004258:	f007 fddc 	bl	800be14 <HAL_TIM_Base_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004262:	f000 fb13 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800426e:	463b      	mov	r3, r7
 8004270:	4619      	mov	r1, r3
 8004272:	4806      	ldr	r0, [pc, #24]	; (800428c <MX_TIM6_Init+0x64>)
 8004274:	f008 fbbc 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800427e:	f000 fb05 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004282:	bf00      	nop
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2002d7bc 	.word	0x2002d7bc
 8004290:	40001000 	.word	0x40001000

08004294 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800429a:	463b      	mov	r3, r7
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80042a2:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <MX_TIM7_Init+0x64>)
 80042a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80042a8:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042aa:	22b3      	movs	r2, #179	; 0xb3
 80042ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ae:	4b11      	ldr	r3, [pc, #68]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80042b4:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042b6:	2231      	movs	r2, #49	; 0x31
 80042b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042ba:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80042c0:	480c      	ldr	r0, [pc, #48]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042c2:	f007 fda7 	bl	800be14 <HAL_TIM_Base_Init>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80042cc:	f000 fade 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042d4:	2300      	movs	r3, #0
 80042d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80042d8:	463b      	mov	r3, r7
 80042da:	4619      	mov	r1, r3
 80042dc:	4805      	ldr	r0, [pc, #20]	; (80042f4 <MX_TIM7_Init+0x60>)
 80042de:	f008 fb87 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80042e8:	f000 fad0 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80042ec:	bf00      	nop
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	2002d960 	.word	0x2002d960
 80042f8:	40001400 	.word	0x40001400

080042fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004302:	f107 030c 	add.w	r3, r7, #12
 8004306:	2224      	movs	r2, #36	; 0x24
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f00e f9cb 	bl	80126a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004310:	1d3b      	adds	r3, r7, #4
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004318:	4b22      	ldr	r3, [pc, #136]	; (80043a4 <MX_TIM8_Init+0xa8>)
 800431a:	4a23      	ldr	r2, [pc, #140]	; (80043a8 <MX_TIM8_Init+0xac>)
 800431c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800431e:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <MX_TIM8_Init+0xa8>)
 8004320:	2200      	movs	r2, #0
 8004322:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004324:	4b1f      	ldr	r3, [pc, #124]	; (80043a4 <MX_TIM8_Init+0xa8>)
 8004326:	2210      	movs	r2, #16
 8004328:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800432a:	4b1e      	ldr	r3, [pc, #120]	; (80043a4 <MX_TIM8_Init+0xa8>)
 800432c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004330:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <MX_TIM8_Init+0xa8>)
 8004334:	2200      	movs	r2, #0
 8004336:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004338:	4b1a      	ldr	r3, [pc, #104]	; (80043a4 <MX_TIM8_Init+0xa8>)
 800433a:	2200      	movs	r2, #0
 800433c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800433e:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <MX_TIM8_Init+0xa8>)
 8004340:	2200      	movs	r2, #0
 8004342:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004344:	2303      	movs	r3, #3
 8004346:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004348:	2300      	movs	r3, #0
 800434a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800434c:	2301      	movs	r3, #1
 800434e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004358:	2300      	movs	r3, #0
 800435a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800435c:	2301      	movs	r3, #1
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004368:	f107 030c 	add.w	r3, r7, #12
 800436c:	4619      	mov	r1, r3
 800436e:	480d      	ldr	r0, [pc, #52]	; (80043a4 <MX_TIM8_Init+0xa8>)
 8004370:	f007 fe08 	bl	800bf84 <HAL_TIM_Encoder_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800437a:	f000 fa87 	bl	800488c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4806      	ldr	r0, [pc, #24]	; (80043a4 <MX_TIM8_Init+0xa8>)
 800438c:	f008 fb30 	bl	800c9f0 <HAL_TIMEx_MasterConfigSynchronization>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004396:	f000 fa79 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	3730      	adds	r7, #48	; 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2002d4e0 	.word	0x2002d4e0
 80043a8:	40010400 	.word	0x40010400

080043ac <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	605a      	str	r2, [r3, #4]
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	60da      	str	r2, [r3, #12]
 80043be:	611a      	str	r2, [r3, #16]
 80043c0:	615a      	str	r2, [r3, #20]
 80043c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80043c4:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <MX_TIM10_Init+0x94>)
 80043c6:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <MX_TIM10_Init+0x98>)
 80043c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80043ca:	4b1d      	ldr	r3, [pc, #116]	; (8004440 <MX_TIM10_Init+0x94>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <MX_TIM10_Init+0x94>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80043d6:	4b1a      	ldr	r3, [pc, #104]	; (8004440 <MX_TIM10_Init+0x94>)
 80043d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043dc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043de:	4b18      	ldr	r3, [pc, #96]	; (8004440 <MX_TIM10_Init+0x94>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <MX_TIM10_Init+0x94>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80043ea:	4815      	ldr	r0, [pc, #84]	; (8004440 <MX_TIM10_Init+0x94>)
 80043ec:	f007 fd12 	bl	800be14 <HAL_TIM_Base_Init>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80043f6:	f000 fa49 	bl	800488c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80043fa:	4811      	ldr	r0, [pc, #68]	; (8004440 <MX_TIM10_Init+0x94>)
 80043fc:	f007 fd59 	bl	800beb2 <HAL_TIM_PWM_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004406:	f000 fa41 	bl	800488c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800440a:	2360      	movs	r3, #96	; 0x60
 800440c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	2200      	movs	r2, #0
 800441e:	4619      	mov	r1, r3
 8004420:	4807      	ldr	r0, [pc, #28]	; (8004440 <MX_TIM10_Init+0x94>)
 8004422:	f007 ff81 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800442c:	f000 fa2e 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <MX_TIM10_Init+0x94>)
 8004432:	f000 fe1b 	bl	800506c <HAL_TIM_MspPostInit>

}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2002d5fc 	.word	0x2002d5fc
 8004444:	40014400 	.word	0x40014400

08004448 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
 8004454:	605a      	str	r2, [r3, #4]
 8004456:	609a      	str	r2, [r3, #8]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	611a      	str	r2, [r3, #16]
 800445c:	615a      	str	r2, [r3, #20]
 800445e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004460:	4b1e      	ldr	r3, [pc, #120]	; (80044dc <MX_TIM11_Init+0x94>)
 8004462:	4a1f      	ldr	r2, [pc, #124]	; (80044e0 <MX_TIM11_Init+0x98>)
 8004464:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004466:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <MX_TIM11_Init+0x94>)
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800446c:	4b1b      	ldr	r3, [pc, #108]	; (80044dc <MX_TIM11_Init+0x94>)
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004472:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <MX_TIM11_Init+0x94>)
 8004474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004478:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800447a:	4b18      	ldr	r3, [pc, #96]	; (80044dc <MX_TIM11_Init+0x94>)
 800447c:	2200      	movs	r2, #0
 800447e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004480:	4b16      	ldr	r3, [pc, #88]	; (80044dc <MX_TIM11_Init+0x94>)
 8004482:	2200      	movs	r2, #0
 8004484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004486:	4815      	ldr	r0, [pc, #84]	; (80044dc <MX_TIM11_Init+0x94>)
 8004488:	f007 fcc4 	bl	800be14 <HAL_TIM_Base_Init>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004492:	f000 f9fb 	bl	800488c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004496:	4811      	ldr	r0, [pc, #68]	; (80044dc <MX_TIM11_Init+0x94>)
 8004498:	f007 fd0b 	bl	800beb2 <HAL_TIM_PWM_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80044a2:	f000 f9f3 	bl	800488c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044a6:	2360      	movs	r3, #96	; 0x60
 80044a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044b6:	1d3b      	adds	r3, r7, #4
 80044b8:	2200      	movs	r2, #0
 80044ba:	4619      	mov	r1, r3
 80044bc:	4807      	ldr	r0, [pc, #28]	; (80044dc <MX_TIM11_Init+0x94>)
 80044be:	f007 ff33 	bl	800c328 <HAL_TIM_PWM_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80044c8:	f000 f9e0 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80044cc:	4803      	ldr	r0, [pc, #12]	; (80044dc <MX_TIM11_Init+0x94>)
 80044ce:	f000 fdcd 	bl	800506c <HAL_TIM_MspPostInit>

}
 80044d2:	bf00      	nop
 80044d4:	3720      	adds	r7, #32
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	2002d71c 	.word	0x2002d71c
 80044e0:	40014800 	.word	0x40014800

080044e4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80044e8:	4b0e      	ldr	r3, [pc, #56]	; (8004524 <MX_TIM13_Init+0x40>)
 80044ea:	4a0f      	ldr	r2, [pc, #60]	; (8004528 <MX_TIM13_Init+0x44>)
 80044ec:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80044ee:	4b0d      	ldr	r3, [pc, #52]	; (8004524 <MX_TIM13_Init+0x40>)
 80044f0:	2259      	movs	r2, #89	; 0x59
 80044f2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044f4:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <MX_TIM13_Init+0x40>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <MX_TIM13_Init+0x40>)
 80044fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8004500:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004502:	4b08      	ldr	r3, [pc, #32]	; (8004524 <MX_TIM13_Init+0x40>)
 8004504:	2200      	movs	r2, #0
 8004506:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <MX_TIM13_Init+0x40>)
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800450e:	4805      	ldr	r0, [pc, #20]	; (8004524 <MX_TIM13_Init+0x40>)
 8004510:	f007 fc80 	bl	800be14 <HAL_TIM_Base_Init>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800451a:	f000 f9b7 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	2002d6dc 	.word	0x2002d6dc
 8004528:	40001c00 	.word	0x40001c00

0800452c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004530:	4b11      	ldr	r3, [pc, #68]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <MX_USART2_UART_Init+0x50>)
 8004534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800453c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800453e:	4b0e      	ldr	r3, [pc, #56]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004544:	4b0c      	ldr	r3, [pc, #48]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004546:	2200      	movs	r2, #0
 8004548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800454a:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 800454c:	2200      	movs	r2, #0
 800454e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004550:	4b09      	ldr	r3, [pc, #36]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004552:	220c      	movs	r2, #12
 8004554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004556:	4b08      	ldr	r3, [pc, #32]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800455c:	4b06      	ldr	r3, [pc, #24]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 800455e:	2200      	movs	r2, #0
 8004560:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <MX_USART2_UART_Init+0x4c>)
 8004564:	f008 fb26 	bl	800cbb4 <HAL_UART_Init>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800456e:	f000 f98d 	bl	800488c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2002d8c0 	.word	0x2002d8c0
 800457c:	40004400 	.word	0x40004400

08004580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
 800458a:	4b14      	ldr	r3, [pc, #80]	; (80045dc <MX_DMA_Init+0x5c>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a13      	ldr	r2, [pc, #76]	; (80045dc <MX_DMA_Init+0x5c>)
 8004590:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <MX_DMA_Init+0x5c>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800459e:	607b      	str	r3, [r7, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2100      	movs	r1, #0
 80045a6:	203a      	movs	r0, #58	; 0x3a
 80045a8:	f002 ffe7 	bl	800757a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80045ac:	203a      	movs	r0, #58	; 0x3a
 80045ae:	f003 f800 	bl	80075b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2100      	movs	r1, #0
 80045b6:	203b      	movs	r0, #59	; 0x3b
 80045b8:	f002 ffdf 	bl	800757a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80045bc:	203b      	movs	r0, #59	; 0x3b
 80045be:	f002 fff8 	bl	80075b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	2100      	movs	r1, #0
 80045c6:	2045      	movs	r0, #69	; 0x45
 80045c8:	f002 ffd7 	bl	800757a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80045cc:	2045      	movs	r0, #69	; 0x45
 80045ce:	f002 fff0 	bl	80075b2 <HAL_NVIC_EnableIRQ>

}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800

080045e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	; 0x30
 80045e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e6:	f107 031c 	add.w	r3, r7, #28
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
 80045ee:	605a      	str	r2, [r3, #4]
 80045f0:	609a      	str	r2, [r3, #8]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80045f6:	2300      	movs	r3, #0
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	4b9c      	ldr	r3, [pc, #624]	; (800486c <MX_GPIO_Init+0x28c>)
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	4a9b      	ldr	r2, [pc, #620]	; (800486c <MX_GPIO_Init+0x28c>)
 8004600:	f043 0310 	orr.w	r3, r3, #16
 8004604:	6313      	str	r3, [r2, #48]	; 0x30
 8004606:	4b99      	ldr	r3, [pc, #612]	; (800486c <MX_GPIO_Init+0x28c>)
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f003 0310 	and.w	r3, r3, #16
 800460e:	61bb      	str	r3, [r7, #24]
 8004610:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	4b95      	ldr	r3, [pc, #596]	; (800486c <MX_GPIO_Init+0x28c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a94      	ldr	r2, [pc, #592]	; (800486c <MX_GPIO_Init+0x28c>)
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b92      	ldr	r3, [pc, #584]	; (800486c <MX_GPIO_Init+0x28c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462a:	617b      	str	r3, [r7, #20]
 800462c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	4b8e      	ldr	r3, [pc, #568]	; (800486c <MX_GPIO_Init+0x28c>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	4a8d      	ldr	r2, [pc, #564]	; (800486c <MX_GPIO_Init+0x28c>)
 8004638:	f043 0304 	orr.w	r3, r3, #4
 800463c:	6313      	str	r3, [r2, #48]	; 0x30
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <MX_GPIO_Init+0x28c>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	4b87      	ldr	r3, [pc, #540]	; (800486c <MX_GPIO_Init+0x28c>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	4a86      	ldr	r2, [pc, #536]	; (800486c <MX_GPIO_Init+0x28c>)
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	6313      	str	r3, [r2, #48]	; 0x30
 800465a:	4b84      	ldr	r3, [pc, #528]	; (800486c <MX_GPIO_Init+0x28c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	4b80      	ldr	r3, [pc, #512]	; (800486c <MX_GPIO_Init+0x28c>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	4a7f      	ldr	r2, [pc, #508]	; (800486c <MX_GPIO_Init+0x28c>)
 8004670:	f043 0302 	orr.w	r3, r3, #2
 8004674:	6313      	str	r3, [r2, #48]	; 0x30
 8004676:	4b7d      	ldr	r3, [pc, #500]	; (800486c <MX_GPIO_Init+0x28c>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	60bb      	str	r3, [r7, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	4b79      	ldr	r3, [pc, #484]	; (800486c <MX_GPIO_Init+0x28c>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a78      	ldr	r2, [pc, #480]	; (800486c <MX_GPIO_Init+0x28c>)
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b76      	ldr	r3, [pc, #472]	; (800486c <MX_GPIO_Init+0x28c>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800469e:	2200      	movs	r2, #0
 80046a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80046a4:	4872      	ldr	r0, [pc, #456]	; (8004870 <MX_GPIO_Init+0x290>)
 80046a6:	f003 fcfd 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80046aa:	2200      	movs	r2, #0
 80046ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046b0:	4870      	ldr	r0, [pc, #448]	; (8004874 <MX_GPIO_Init+0x294>)
 80046b2:	f003 fcf7 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80046b6:	2200      	movs	r2, #0
 80046b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80046bc:	486e      	ldr	r0, [pc, #440]	; (8004878 <MX_GPIO_Init+0x298>)
 80046be:	f003 fcf1 	bl	80080a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80046c2:	2200      	movs	r2, #0
 80046c4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80046c8:	486c      	ldr	r0, [pc, #432]	; (800487c <MX_GPIO_Init+0x29c>)
 80046ca:	f003 fceb 	bl	80080a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046ce:	2304      	movs	r3, #4
 80046d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80046d2:	4b6b      	ldr	r3, [pc, #428]	; (8004880 <MX_GPIO_Init+0x2a0>)
 80046d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80046da:	f107 031c 	add.w	r3, r7, #28
 80046de:	4619      	mov	r1, r3
 80046e0:	4863      	ldr	r0, [pc, #396]	; (8004870 <MX_GPIO_Init+0x290>)
 80046e2:	f003 fb1d 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80046e6:	230f      	movs	r3, #15
 80046e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046ea:	2303      	movs	r3, #3
 80046ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046f2:	f107 031c 	add.w	r3, r7, #28
 80046f6:	4619      	mov	r1, r3
 80046f8:	4862      	ldr	r0, [pc, #392]	; (8004884 <MX_GPIO_Init+0x2a4>)
 80046fa:	f003 fb11 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80046fe:	23e1      	movs	r3, #225	; 0xe1
 8004700:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004702:	2303      	movs	r3, #3
 8004704:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800470a:	f107 031c 	add.w	r3, r7, #28
 800470e:	4619      	mov	r1, r3
 8004710:	485a      	ldr	r0, [pc, #360]	; (800487c <MX_GPIO_Init+0x29c>)
 8004712:	f003 fb05 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004716:	2303      	movs	r3, #3
 8004718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800471a:	2303      	movs	r3, #3
 800471c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004722:	f107 031c 	add.w	r3, r7, #28
 8004726:	4619      	mov	r1, r3
 8004728:	4852      	ldr	r0, [pc, #328]	; (8004874 <MX_GPIO_Init+0x294>)
 800472a:	f003 faf9 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800472e:	2304      	movs	r3, #4
 8004730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004732:	2300      	movs	r3, #0
 8004734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004736:	2301      	movs	r3, #1
 8004738:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800473a:	f107 031c 	add.w	r3, r7, #28
 800473e:	4619      	mov	r1, r3
 8004740:	484c      	ldr	r0, [pc, #304]	; (8004874 <MX_GPIO_Init+0x294>)
 8004742:	f003 faed 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004746:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800474a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800474c:	2300      	movs	r3, #0
 800474e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004750:	2301      	movs	r3, #1
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004754:	f107 031c 	add.w	r3, r7, #28
 8004758:	4619      	mov	r1, r3
 800475a:	4845      	ldr	r0, [pc, #276]	; (8004870 <MX_GPIO_Init+0x290>)
 800475c:	f003 fae0 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004760:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004766:	2301      	movs	r3, #1
 8004768:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476a:	2300      	movs	r3, #0
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004772:	f107 031c 	add.w	r3, r7, #28
 8004776:	4619      	mov	r1, r3
 8004778:	483d      	ldr	r0, [pc, #244]	; (8004870 <MX_GPIO_Init+0x290>)
 800477a:	f003 fad1 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800477e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004784:	2301      	movs	r3, #1
 8004786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478c:	2300      	movs	r3, #0
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004790:	f107 031c 	add.w	r3, r7, #28
 8004794:	4619      	mov	r1, r3
 8004796:	4837      	ldr	r0, [pc, #220]	; (8004874 <MX_GPIO_Init+0x294>)
 8004798:	f003 fac2 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800479c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047a2:	4b39      	ldr	r3, [pc, #228]	; (8004888 <MX_GPIO_Init+0x2a8>)
 80047a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4831      	ldr	r0, [pc, #196]	; (8004878 <MX_GPIO_Init+0x298>)
 80047b2:	f003 fab5 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047bc:	2301      	movs	r3, #1
 80047be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c0:	2300      	movs	r3, #0
 80047c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047c8:	f107 031c 	add.w	r3, r7, #28
 80047cc:	4619      	mov	r1, r3
 80047ce:	482a      	ldr	r0, [pc, #168]	; (8004878 <MX_GPIO_Init+0x298>)
 80047d0:	f003 faa6 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80047d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047da:	2301      	movs	r3, #1
 80047dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047de:	2301      	movs	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e2:	2300      	movs	r3, #0
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047e6:	f107 031c 	add.w	r3, r7, #28
 80047ea:	4619      	mov	r1, r3
 80047ec:	4822      	ldr	r0, [pc, #136]	; (8004878 <MX_GPIO_Init+0x298>)
 80047ee:	f003 fa97 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80047f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80047f6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f8:	2301      	movs	r3, #1
 80047fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004800:	2300      	movs	r3, #0
 8004802:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4619      	mov	r1, r3
 800480a:	481c      	ldr	r0, [pc, #112]	; (800487c <MX_GPIO_Init+0x29c>)
 800480c:	f003 fa88 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004810:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	4815      	ldr	r0, [pc, #84]	; (800487c <MX_GPIO_Init+0x29c>)
 8004826:	f003 fa7b 	bl	8007d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800482a:	239b      	movs	r3, #155	; 0x9b
 800482c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482e:	2300      	movs	r3, #0
 8004830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004832:	2301      	movs	r3, #1
 8004834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004836:	f107 031c 	add.w	r3, r7, #28
 800483a:	4619      	mov	r1, r3
 800483c:	480e      	ldr	r0, [pc, #56]	; (8004878 <MX_GPIO_Init+0x298>)
 800483e:	f003 fa6f 	bl	8007d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	2008      	movs	r0, #8
 8004848:	f002 fe97 	bl	800757a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800484c:	2008      	movs	r0, #8
 800484e:	f002 feb0 	bl	80075b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2100      	movs	r1, #0
 8004856:	2017      	movs	r0, #23
 8004858:	f002 fe8f 	bl	800757a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800485c:	2017      	movs	r0, #23
 800485e:	f002 fea8 	bl	80075b2 <HAL_NVIC_EnableIRQ>

}
 8004862:	bf00      	nop
 8004864:	3730      	adds	r7, #48	; 0x30
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	40021000 	.word	0x40021000
 8004874:	40020400 	.word	0x40020400
 8004878:	40020c00 	.word	0x40020c00
 800487c:	40020000 	.word	0x40020000
 8004880:	10310000 	.word	0x10310000
 8004884:	40020800 	.word	0x40020800
 8004888:	10110000 	.word	0x10110000

0800488c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004890:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004892:	e7fe      	b.n	8004892 <Error_Handler+0x6>

08004894 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048aa:	2300      	movs	r3, #0
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <HAL_MspInit+0x4c>)
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	4a0f      	ldr	r2, [pc, #60]	; (80048f0 <HAL_MspInit+0x4c>)
 80048b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048b8:	6453      	str	r3, [r2, #68]	; 0x44
 80048ba:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <HAL_MspInit+0x4c>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <HAL_MspInit+0x4c>)
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	4a08      	ldr	r2, [pc, #32]	; (80048f0 <HAL_MspInit+0x4c>)
 80048d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048d4:	6413      	str	r3, [r2, #64]	; 0x40
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_MspInit+0x4c>)
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800

080048f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b08c      	sub	sp, #48	; 0x30
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048fc:	f107 031c 	add.w	r3, r7, #28
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	605a      	str	r2, [r3, #4]
 8004906:	609a      	str	r2, [r3, #8]
 8004908:	60da      	str	r2, [r3, #12]
 800490a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a4a      	ldr	r2, [pc, #296]	; (8004a3c <HAL_ADC_MspInit+0x148>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f040 808e 	bne.w	8004a34 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004918:	2300      	movs	r3, #0
 800491a:	61bb      	str	r3, [r7, #24]
 800491c:	4b48      	ldr	r3, [pc, #288]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800491e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004920:	4a47      	ldr	r2, [pc, #284]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004922:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004926:	6453      	str	r3, [r2, #68]	; 0x44
 8004928:	4b45      	ldr	r3, [pc, #276]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800492a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800493e:	f043 0304 	orr.w	r3, r3, #4
 8004942:	6313      	str	r3, [r2, #48]	; 0x30
 8004944:	4b3e      	ldr	r3, [pc, #248]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	617b      	str	r3, [r7, #20]
 800494e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	4b3a      	ldr	r3, [pc, #232]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004958:	4a39      	ldr	r2, [pc, #228]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6313      	str	r3, [r2, #48]	; 0x30
 8004960:	4b37      	ldr	r3, [pc, #220]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	613b      	str	r3, [r7, #16]
 800496a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	4b33      	ldr	r3, [pc, #204]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 8004976:	f043 0302 	orr.w	r3, r3, #2
 800497a:	6313      	str	r3, [r2, #48]	; 0x30
 800497c:	4b30      	ldr	r3, [pc, #192]	; (8004a40 <HAL_ADC_MspInit+0x14c>)
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004988:	230f      	movs	r3, #15
 800498a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800498c:	2303      	movs	r3, #3
 800498e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004994:	f107 031c 	add.w	r3, r7, #28
 8004998:	4619      	mov	r1, r3
 800499a:	482a      	ldr	r0, [pc, #168]	; (8004a44 <HAL_ADC_MspInit+0x150>)
 800499c:	f003 f9c0 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80049a0:	23ff      	movs	r3, #255	; 0xff
 80049a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049a4:	2303      	movs	r3, #3
 80049a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	f107 031c 	add.w	r3, r7, #28
 80049b0:	4619      	mov	r1, r3
 80049b2:	4825      	ldr	r0, [pc, #148]	; (8004a48 <HAL_ADC_MspInit+0x154>)
 80049b4:	f003 f9b4 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80049b8:	2303      	movs	r3, #3
 80049ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049bc:	2303      	movs	r3, #3
 80049be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c0:	2300      	movs	r3, #0
 80049c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c4:	f107 031c 	add.w	r3, r7, #28
 80049c8:	4619      	mov	r1, r3
 80049ca:	4820      	ldr	r0, [pc, #128]	; (8004a4c <HAL_ADC_MspInit+0x158>)
 80049cc:	f003 f9a8 	bl	8007d20 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80049d0:	4b1f      	ldr	r3, [pc, #124]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049d2:	4a20      	ldr	r2, [pc, #128]	; (8004a54 <HAL_ADC_MspInit+0x160>)
 80049d4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049dc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049de:	4b1c      	ldr	r3, [pc, #112]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80049e4:	4b1a      	ldr	r3, [pc, #104]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049f0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80049f2:	4b17      	ldr	r3, [pc, #92]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049f8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049fa:	4b15      	ldr	r3, [pc, #84]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 80049fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a00:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a02:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a08:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004a10:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a12:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a18:	480d      	ldr	r0, [pc, #52]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a1a:	f002 fde5 	bl	80075e8 <HAL_DMA_Init>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004a24:	f7ff ff32 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a09      	ldr	r2, [pc, #36]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a2e:	4a08      	ldr	r2, [pc, #32]	; (8004a50 <HAL_ADC_MspInit+0x15c>)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004a34:	bf00      	nop
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	40012100 	.word	0x40012100
 8004a40:	40023800 	.word	0x40023800
 8004a44:	40020800 	.word	0x40020800
 8004a48:	40020000 	.word	0x40020000
 8004a4c:	40020400 	.word	0x40020400
 8004a50:	2002d900 	.word	0x2002d900
 8004a54:	40026440 	.word	0x40026440

08004a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b08c      	sub	sp, #48	; 0x30
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a60:	f107 031c 	add.w	r3, r7, #28
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	605a      	str	r2, [r3, #4]
 8004a6a:	609a      	str	r2, [r3, #8]
 8004a6c:	60da      	str	r2, [r3, #12]
 8004a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a32      	ldr	r2, [pc, #200]	; (8004b40 <HAL_I2C_MspInit+0xe8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d12c      	bne.n	8004ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a30      	ldr	r2, [pc, #192]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004a84:	f043 0302 	orr.w	r3, r3, #2
 8004a88:	6313      	str	r3, [r2, #48]	; 0x30
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a96:	23c0      	movs	r3, #192	; 0xc0
 8004a98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a9a:	2312      	movs	r3, #18
 8004a9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004aa6:	2304      	movs	r3, #4
 8004aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aaa:	f107 031c 	add.w	r3, r7, #28
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4825      	ldr	r0, [pc, #148]	; (8004b48 <HAL_I2C_MspInit+0xf0>)
 8004ab2:	f003 f935 	bl	8007d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abe:	4a21      	ldr	r2, [pc, #132]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004ac0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ac6:	4b1f      	ldr	r3, [pc, #124]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004ad2:	e031      	b.n	8004b38 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1c      	ldr	r2, [pc, #112]	; (8004b4c <HAL_I2C_MspInit+0xf4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d12c      	bne.n	8004b38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	613b      	str	r3, [r7, #16]
 8004ae2:	4b18      	ldr	r3, [pc, #96]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004ae8:	f043 0302 	orr.w	r3, r3, #2
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b15      	ldr	r3, [pc, #84]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004afa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b00:	2312      	movs	r3, #18
 8004b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b04:	2301      	movs	r3, #1
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b10:	f107 031c 	add.w	r3, r7, #28
 8004b14:	4619      	mov	r1, r3
 8004b16:	480c      	ldr	r0, [pc, #48]	; (8004b48 <HAL_I2C_MspInit+0xf0>)
 8004b18:	f003 f902 	bl	8007d20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	4a07      	ldr	r2, [pc, #28]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004b26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2c:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_I2C_MspInit+0xec>)
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]
}
 8004b38:	bf00      	nop
 8004b3a:	3730      	adds	r7, #48	; 0x30
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40005400 	.word	0x40005400
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40020400 	.word	0x40020400
 8004b4c:	40005800 	.word	0x40005800

08004b50 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08a      	sub	sp, #40	; 0x28
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b58:	f107 0314 	add.w	r3, r7, #20
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	605a      	str	r2, [r3, #4]
 8004b62:	609a      	str	r2, [r3, #8]
 8004b64:	60da      	str	r2, [r3, #12]
 8004b66:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a69      	ldr	r2, [pc, #420]	; (8004d14 <HAL_SD_MspInit+0x1c4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f040 80cb 	bne.w	8004d0a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	4b67      	ldr	r3, [pc, #412]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7c:	4a66      	ldr	r2, [pc, #408]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004b7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b82:	6453      	str	r3, [r2, #68]	; 0x44
 8004b84:	4b64      	ldr	r3, [pc, #400]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	4a5f      	ldr	r2, [pc, #380]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004b9a:	f043 0304 	orr.w	r3, r3, #4
 8004b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba0:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004bac:	2300      	movs	r3, #0
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	4a58      	ldr	r2, [pc, #352]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004bb6:	f043 0308 	orr.w	r3, r3, #8
 8004bba:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbc:	4b56      	ldr	r3, [pc, #344]	; (8004d18 <HAL_SD_MspInit+0x1c8>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004bc8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004bcc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bce:	2302      	movs	r3, #2
 8004bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004bda:	230c      	movs	r3, #12
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bde:	f107 0314 	add.w	r3, r7, #20
 8004be2:	4619      	mov	r1, r3
 8004be4:	484d      	ldr	r0, [pc, #308]	; (8004d1c <HAL_SD_MspInit+0x1cc>)
 8004be6:	f003 f89b 	bl	8007d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bea:	2304      	movs	r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bee:	2302      	movs	r3, #2
 8004bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bfe:	f107 0314 	add.w	r3, r7, #20
 8004c02:	4619      	mov	r1, r3
 8004c04:	4846      	ldr	r0, [pc, #280]	; (8004d20 <HAL_SD_MspInit+0x1d0>)
 8004c06:	f003 f88b 	bl	8007d20 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004c0a:	4b46      	ldr	r3, [pc, #280]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c0c:	4a46      	ldr	r2, [pc, #280]	; (8004d28 <HAL_SD_MspInit+0x1d8>)
 8004c0e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004c10:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c16:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c18:	4b42      	ldr	r3, [pc, #264]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c1e:	4b41      	ldr	r3, [pc, #260]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c24:	4b3f      	ldr	r3, [pc, #252]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c2a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c2c:	4b3d      	ldr	r3, [pc, #244]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c32:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c34:	4b3b      	ldr	r3, [pc, #236]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c3a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004c3c:	4b39      	ldr	r3, [pc, #228]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c3e:	2220      	movs	r2, #32
 8004c40:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004c42:	4b38      	ldr	r3, [pc, #224]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c48:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004c4a:	4b36      	ldr	r3, [pc, #216]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004c50:	4b34      	ldr	r3, [pc, #208]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c52:	2203      	movs	r2, #3
 8004c54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004c56:	4b33      	ldr	r3, [pc, #204]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004c5e:	4b31      	ldr	r3, [pc, #196]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004c64:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004c66:	482f      	ldr	r0, [pc, #188]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c68:	f002 fcbe 	bl	80075e8 <HAL_DMA_Init>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8004c72:	f7ff fe0b 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_SD_MspInit+0x1d4>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004c82:	4b2a      	ldr	r3, [pc, #168]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <HAL_SD_MspInit+0x1e0>)
 8004c86:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004c88:	4b28      	ldr	r3, [pc, #160]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c90:	4b26      	ldr	r3, [pc, #152]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c96:	4b25      	ldr	r3, [pc, #148]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ca4:	4b21      	ldr	r3, [pc, #132]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004caa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cb2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004cb4:	4b1d      	ldr	r3, [pc, #116]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cba:	4b1c      	ldr	r3, [pc, #112]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cbc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cc0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004cc2:	4b1a      	ldr	r3, [pc, #104]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cc4:	2204      	movs	r2, #4
 8004cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cca:	2203      	movs	r2, #3
 8004ccc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004cce:	4b17      	ldr	r3, [pc, #92]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cd0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004cd6:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cd8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004cde:	4813      	ldr	r0, [pc, #76]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004ce0:	f002 fc82 	bl	80075e8 <HAL_DMA_Init>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004cea:	f7ff fdcf 	bl	800488c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a0e      	ldr	r2, [pc, #56]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cf4:	4a0d      	ldr	r2, [pc, #52]	; (8004d2c <HAL_SD_MspInit+0x1dc>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	2031      	movs	r0, #49	; 0x31
 8004d00:	f002 fc3b 	bl	800757a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004d04:	2031      	movs	r0, #49	; 0x31
 8004d06:	f002 fc54 	bl	80075b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004d0a:	bf00      	nop
 8004d0c:	3728      	adds	r7, #40	; 0x28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40020800 	.word	0x40020800
 8004d20:	40020c00 	.word	0x40020c00
 8004d24:	2002d428 	.word	0x2002d428
 8004d28:	40026458 	.word	0x40026458
 8004d2c:	2002d75c 	.word	0x2002d75c
 8004d30:	400264a0 	.word	0x400264a0

08004d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a19      	ldr	r2, [pc, #100]	; (8004db8 <HAL_SPI_MspInit+0x84>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d12c      	bne.n	8004db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
 8004d5a:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d64:	6413      	str	r3, [r2, #64]	; 0x40
 8004d66:	4b15      	ldr	r3, [pc, #84]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d7c:	f043 0302 	orr.w	r3, r3, #2
 8004d80:	6313      	str	r3, [r2, #48]	; 0x30
 8004d82:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <HAL_SPI_MspInit+0x88>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	60fb      	str	r3, [r7, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004d8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d94:	2302      	movs	r3, #2
 8004d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004da0:	2305      	movs	r3, #5
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da4:	f107 0314 	add.w	r3, r7, #20
 8004da8:	4619      	mov	r1, r3
 8004daa:	4805      	ldr	r0, [pc, #20]	; (8004dc0 <HAL_SPI_MspInit+0x8c>)
 8004dac:	f002 ffb8 	bl	8007d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004db0:	bf00      	nop
 8004db2:	3728      	adds	r7, #40	; 0x28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40003800 	.word	0x40003800
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40020400 	.word	0x40020400

08004dc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08c      	sub	sp, #48	; 0x30
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 031c 	add.w	r3, r7, #28
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <HAL_TIM_PWM_MspInit+0xd4>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d12d      	bne.n	8004e42 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6453      	str	r3, [r2, #68]	; 0x44
 8004df6:	4b29      	ldr	r3, [pc, #164]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	617b      	str	r3, [r7, #20]
 8004e06:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	4a24      	ldr	r2, [pc, #144]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e0c:	f043 0310 	orr.w	r3, r3, #16
 8004e10:	6313      	str	r3, [r2, #48]	; 0x30
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8004e1e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8004e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e24:	2302      	movs	r3, #2
 8004e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004e30:	2301      	movs	r3, #1
 8004e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e34:	f107 031c 	add.w	r3, r7, #28
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4819      	ldr	r0, [pc, #100]	; (8004ea0 <HAL_TIM_PWM_MspInit+0xdc>)
 8004e3c:	f002 ff70 	bl	8007d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004e40:	e026      	b.n	8004e90 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a17      	ldr	r2, [pc, #92]	; (8004ea4 <HAL_TIM_PWM_MspInit+0xe0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d10e      	bne.n	8004e6a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	4a11      	ldr	r2, [pc, #68]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e56:	f043 0302 	orr.w	r3, r3, #2
 8004e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e5c:	4b0f      	ldr	r3, [pc, #60]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	693b      	ldr	r3, [r7, #16]
}
 8004e68:	e012      	b.n	8004e90 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_TIM_PWM_MspInit+0xe4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d10d      	bne.n	8004e90 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004e74:	2300      	movs	r3, #0
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	4b08      	ldr	r3, [pc, #32]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	4a07      	ldr	r2, [pc, #28]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e7e:	f043 0304 	orr.w	r3, r3, #4
 8004e82:	6413      	str	r3, [r2, #64]	; 0x40
 8004e84:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <HAL_TIM_PWM_MspInit+0xd8>)
 8004e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	60fb      	str	r3, [r7, #12]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	bf00      	nop
 8004e92:	3730      	adds	r7, #48	; 0x30
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800

08004eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b088      	sub	sp, #32
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a3e      	ldr	r2, [pc, #248]	; (8004fb4 <HAL_TIM_Base_MspInit+0x108>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d116      	bne.n	8004eec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
 8004ec2:	4b3d      	ldr	r3, [pc, #244]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	4a3c      	ldr	r2, [pc, #240]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ec8:	f043 0310 	orr.w	r3, r3, #16
 8004ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ece:	4b3a      	ldr	r3, [pc, #232]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004eda:	2200      	movs	r2, #0
 8004edc:	2101      	movs	r1, #1
 8004ede:	2036      	movs	r0, #54	; 0x36
 8004ee0:	f002 fb4b 	bl	800757a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ee4:	2036      	movs	r0, #54	; 0x36
 8004ee6:	f002 fb64 	bl	80075b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004eea:	e05e      	b.n	8004faa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a32      	ldr	r2, [pc, #200]	; (8004fbc <HAL_TIM_Base_MspInit+0x110>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d116      	bne.n	8004f24 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	4b2f      	ldr	r3, [pc, #188]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a2e      	ldr	r2, [pc, #184]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f00:	f043 0320 	orr.w	r3, r3, #32
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b2c      	ldr	r3, [pc, #176]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 0320 	and.w	r3, r3, #32
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2100      	movs	r1, #0
 8004f16:	2037      	movs	r0, #55	; 0x37
 8004f18:	f002 fb2f 	bl	800757a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004f1c:	2037      	movs	r0, #55	; 0x37
 8004f1e:	f002 fb48 	bl	80075b2 <HAL_NVIC_EnableIRQ>
}
 8004f22:	e042      	b.n	8004faa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_TIM_Base_MspInit+0x114>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10e      	bne.n	8004f4c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	4b21      	ldr	r3, [pc, #132]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	4a20      	ldr	r2, [pc, #128]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3e:	4b1e      	ldr	r3, [pc, #120]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	697b      	ldr	r3, [r7, #20]
}
 8004f4a:	e02e      	b.n	8004faa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <HAL_TIM_Base_MspInit+0x118>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d10e      	bne.n	8004f74 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	4b17      	ldr	r3, [pc, #92]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f64:	6453      	str	r3, [r2, #68]	; 0x44
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
}
 8004f72:	e01a      	b.n	8004faa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a13      	ldr	r2, [pc, #76]	; (8004fc8 <HAL_TIM_Base_MspInit+0x11c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d115      	bne.n	8004faa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	4b0d      	ldr	r3, [pc, #52]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	202c      	movs	r0, #44	; 0x2c
 8004fa0:	f002 faeb 	bl	800757a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004fa4:	202c      	movs	r0, #44	; 0x2c
 8004fa6:	f002 fb04 	bl	80075b2 <HAL_NVIC_EnableIRQ>
}
 8004faa:	bf00      	nop
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40001000 	.word	0x40001000
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	40001400 	.word	0x40001400
 8004fc0:	40014400 	.word	0x40014400
 8004fc4:	40014800 	.word	0x40014800
 8004fc8:	40001c00 	.word	0x40001c00

08004fcc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fd4:	f107 0314 	add.w	r3, r7, #20
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	605a      	str	r2, [r3, #4]
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	60da      	str	r2, [r3, #12]
 8004fe2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1d      	ldr	r2, [pc, #116]	; (8005060 <HAL_TIM_Encoder_MspInit+0x94>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d133      	bne.n	8005056 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	613b      	str	r3, [r7, #16]
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ff8:	f043 0302 	orr.w	r3, r3, #2
 8004ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ffe:	4b19      	ldr	r3, [pc, #100]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 8005010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005012:	4a14      	ldr	r2, [pc, #80]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 8005014:	f043 0304 	orr.w	r3, r3, #4
 8005018:	6313      	str	r3, [r2, #48]	; 0x30
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <HAL_TIM_Encoder_MspInit+0x98>)
 800501c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005026:	23c0      	movs	r3, #192	; 0xc0
 8005028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502a:	2302      	movs	r3, #2
 800502c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005032:	2300      	movs	r3, #0
 8005034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005036:	2303      	movs	r3, #3
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503a:	f107 0314 	add.w	r3, r7, #20
 800503e:	4619      	mov	r1, r3
 8005040:	4809      	ldr	r0, [pc, #36]	; (8005068 <HAL_TIM_Encoder_MspInit+0x9c>)
 8005042:	f002 fe6d 	bl	8007d20 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005046:	2200      	movs	r2, #0
 8005048:	2100      	movs	r1, #0
 800504a:	202c      	movs	r0, #44	; 0x2c
 800504c:	f002 fa95 	bl	800757a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005050:	202c      	movs	r0, #44	; 0x2c
 8005052:	f002 faae 	bl	80075b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005056:	bf00      	nop
 8005058:	3728      	adds	r7, #40	; 0x28
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40010400 	.word	0x40010400
 8005064:	40023800 	.word	0x40023800
 8005068:	40020800 	.word	0x40020800

0800506c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08c      	sub	sp, #48	; 0x30
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005074:	f107 031c 	add.w	r3, r7, #28
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	60da      	str	r2, [r3, #12]
 8005082:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a5c      	ldr	r2, [pc, #368]	; (80051fc <HAL_TIM_MspPostInit+0x190>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d11f      	bne.n	80050ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	4b5b      	ldr	r3, [pc, #364]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a5a      	ldr	r2, [pc, #360]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005098:	f043 0310 	orr.w	r3, r3, #16
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b58      	ldr	r3, [pc, #352]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0310 	and.w	r3, r3, #16
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80050aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b0:	2302      	movs	r3, #2
 80050b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050b8:	2300      	movs	r3, #0
 80050ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050bc:	2301      	movs	r3, #1
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80050c0:	f107 031c 	add.w	r3, r7, #28
 80050c4:	4619      	mov	r1, r3
 80050c6:	484f      	ldr	r0, [pc, #316]	; (8005204 <HAL_TIM_MspPostInit+0x198>)
 80050c8:	f002 fe2a 	bl	8007d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80050cc:	e091      	b.n	80051f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a4d      	ldr	r2, [pc, #308]	; (8005208 <HAL_TIM_MspPostInit+0x19c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d11e      	bne.n	8005116 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	4b48      	ldr	r3, [pc, #288]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	4a47      	ldr	r2, [pc, #284]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80050e2:	f043 0302 	orr.w	r3, r3, #2
 80050e6:	6313      	str	r3, [r2, #48]	; 0x30
 80050e8:	4b45      	ldr	r3, [pc, #276]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80050f4:	2330      	movs	r3, #48	; 0x30
 80050f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f8:	2302      	movs	r3, #2
 80050fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050fc:	2300      	movs	r3, #0
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005100:	2300      	movs	r3, #0
 8005102:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005104:	2302      	movs	r3, #2
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005108:	f107 031c 	add.w	r3, r7, #28
 800510c:	4619      	mov	r1, r3
 800510e:	483f      	ldr	r0, [pc, #252]	; (800520c <HAL_TIM_MspPostInit+0x1a0>)
 8005110:	f002 fe06 	bl	8007d20 <HAL_GPIO_Init>
}
 8005114:	e06d      	b.n	80051f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a3d      	ldr	r2, [pc, #244]	; (8005210 <HAL_TIM_MspPostInit+0x1a4>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d11f      	bne.n	8005160 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005120:	2300      	movs	r3, #0
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	4b36      	ldr	r3, [pc, #216]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005128:	4a35      	ldr	r2, [pc, #212]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 800512a:	f043 0308 	orr.w	r3, r3, #8
 800512e:	6313      	str	r3, [r2, #48]	; 0x30
 8005130:	4b33      	ldr	r3, [pc, #204]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005134:	f003 0308 	and.w	r3, r3, #8
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800513c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514a:	2300      	movs	r3, #0
 800514c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800514e:	2302      	movs	r3, #2
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005152:	f107 031c 	add.w	r3, r7, #28
 8005156:	4619      	mov	r1, r3
 8005158:	482e      	ldr	r0, [pc, #184]	; (8005214 <HAL_TIM_MspPostInit+0x1a8>)
 800515a:	f002 fde1 	bl	8007d20 <HAL_GPIO_Init>
}
 800515e:	e048      	b.n	80051f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a2c      	ldr	r2, [pc, #176]	; (8005218 <HAL_TIM_MspPostInit+0x1ac>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d11f      	bne.n	80051aa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800516a:	2300      	movs	r3, #0
 800516c:	60fb      	str	r3, [r7, #12]
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005172:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 8005174:	f043 0302 	orr.w	r3, r3, #2
 8005178:	6313      	str	r3, [r2, #48]	; 0x30
 800517a:	4b21      	ldr	r3, [pc, #132]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	60fb      	str	r3, [r7, #12]
 8005184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005186:	f44f 7380 	mov.w	r3, #256	; 0x100
 800518a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518c:	2302      	movs	r3, #2
 800518e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005190:	2300      	movs	r3, #0
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005194:	2300      	movs	r3, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005198:	2303      	movs	r3, #3
 800519a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519c:	f107 031c 	add.w	r3, r7, #28
 80051a0:	4619      	mov	r1, r3
 80051a2:	481a      	ldr	r0, [pc, #104]	; (800520c <HAL_TIM_MspPostInit+0x1a0>)
 80051a4:	f002 fdbc 	bl	8007d20 <HAL_GPIO_Init>
}
 80051a8:	e023      	b.n	80051f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1b      	ldr	r2, [pc, #108]	; (800521c <HAL_TIM_MspPostInit+0x1b0>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d11e      	bne.n	80051f2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	4a10      	ldr	r2, [pc, #64]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80051be:	f043 0302 	orr.w	r3, r3, #2
 80051c2:	6313      	str	r3, [r2, #48]	; 0x30
 80051c4:	4b0e      	ldr	r3, [pc, #56]	; (8005200 <HAL_TIM_MspPostInit+0x194>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	60bb      	str	r3, [r7, #8]
 80051ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d6:	2302      	movs	r3, #2
 80051d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051de:	2300      	movs	r3, #0
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80051e2:	2303      	movs	r3, #3
 80051e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051e6:	f107 031c 	add.w	r3, r7, #28
 80051ea:	4619      	mov	r1, r3
 80051ec:	4807      	ldr	r0, [pc, #28]	; (800520c <HAL_TIM_MspPostInit+0x1a0>)
 80051ee:	f002 fd97 	bl	8007d20 <HAL_GPIO_Init>
}
 80051f2:	bf00      	nop
 80051f4:	3730      	adds	r7, #48	; 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40010000 	.word	0x40010000
 8005200:	40023800 	.word	0x40023800
 8005204:	40021000 	.word	0x40021000
 8005208:	40000400 	.word	0x40000400
 800520c:	40020400 	.word	0x40020400
 8005210:	40000800 	.word	0x40000800
 8005214:	40020c00 	.word	0x40020c00
 8005218:	40014400 	.word	0x40014400
 800521c:	40014800 	.word	0x40014800

08005220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	; 0x28
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005228:	f107 0314 	add.w	r3, r7, #20
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	605a      	str	r2, [r3, #4]
 8005232:	609a      	str	r2, [r3, #8]
 8005234:	60da      	str	r2, [r3, #12]
 8005236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_UART_MspInit+0x84>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d12b      	bne.n	800529a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
 8005246:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_UART_MspInit+0x88>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <HAL_UART_MspInit+0x88>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <HAL_UART_MspInit+0x88>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	4b11      	ldr	r3, [pc, #68]	; (80052a8 <HAL_UART_MspInit+0x88>)
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4a10      	ldr	r2, [pc, #64]	; (80052a8 <HAL_UART_MspInit+0x88>)
 8005268:	f043 0308 	orr.w	r3, r3, #8
 800526c:	6313      	str	r3, [r2, #48]	; 0x30
 800526e:	4b0e      	ldr	r3, [pc, #56]	; (80052a8 <HAL_UART_MspInit+0x88>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	60fb      	str	r3, [r7, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800527a:	2360      	movs	r3, #96	; 0x60
 800527c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	2302      	movs	r3, #2
 8005280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005282:	2300      	movs	r3, #0
 8005284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005286:	2303      	movs	r3, #3
 8005288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800528a:	2307      	movs	r3, #7
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800528e:	f107 0314 	add.w	r3, r7, #20
 8005292:	4619      	mov	r1, r3
 8005294:	4805      	ldr	r0, [pc, #20]	; (80052ac <HAL_UART_MspInit+0x8c>)
 8005296:	f002 fd43 	bl	8007d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800529a:	bf00      	nop
 800529c:	3728      	adds	r7, #40	; 0x28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40004400 	.word	0x40004400
 80052a8:	40023800 	.word	0x40023800
 80052ac:	40020c00 	.word	0x40020c00

080052b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80052b4:	e7fe      	b.n	80052b4 <NMI_Handler+0x4>

080052b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80052b6:	b480      	push	{r7}
 80052b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80052ba:	e7fe      	b.n	80052ba <HardFault_Handler+0x4>

080052bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80052bc:	b480      	push	{r7}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80052c0:	e7fe      	b.n	80052c0 <MemManage_Handler+0x4>

080052c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80052c2:	b480      	push	{r7}
 80052c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80052c6:	e7fe      	b.n	80052c6 <BusFault_Handler+0x4>

080052c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80052cc:	e7fe      	b.n	80052cc <UsageFault_Handler+0x4>

080052ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80052ce:	b480      	push	{r7}
 80052d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052ea:	b480      	push	{r7}
 80052ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052ee:	bf00      	nop
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052fc:	f001 fc1c 	bl	8006b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005300:	bf00      	nop
 8005302:	bd80      	pop	{r7, pc}

08005304 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8005308:	2004      	movs	r0, #4
 800530a:	f002 fee5 	bl	80080d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}

08005312 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005316:	f44f 7080 	mov.w	r0, #256	; 0x100
 800531a:	f002 fedd 	bl	80080d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800531e:	bf00      	nop
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005328:	4803      	ldr	r0, [pc, #12]	; (8005338 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800532a:	f006 fef4 	bl	800c116 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800532e:	4803      	ldr	r0, [pc, #12]	; (800533c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005330:	f006 fef1 	bl	800c116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8005334:	bf00      	nop
 8005336:	bd80      	pop	{r7, pc}
 8005338:	2002d4e0 	.word	0x2002d4e0
 800533c:	2002d6dc 	.word	0x2002d6dc

08005340 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005344:	4802      	ldr	r0, [pc, #8]	; (8005350 <SDIO_IRQHandler+0x10>)
 8005346:	f004 ff8d 	bl	800a264 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800534a:	bf00      	nop
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	2002d83c 	.word	0x2002d83c

08005354 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005358:	4802      	ldr	r0, [pc, #8]	; (8005364 <TIM6_DAC_IRQHandler+0x10>)
 800535a:	f006 fedc 	bl	800c116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	2002d7bc 	.word	0x2002d7bc

08005368 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <TIM7_IRQHandler+0x10>)
 800536e:	f006 fed2 	bl	800c116 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2002d960 	.word	0x2002d960

0800537c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005380:	4802      	ldr	r0, [pc, #8]	; (800538c <DMA2_Stream2_IRQHandler+0x10>)
 8005382:	f002 fa59 	bl	8007838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005386:	bf00      	nop
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	2002d900 	.word	0x2002d900

08005390 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005394:	4802      	ldr	r0, [pc, #8]	; (80053a0 <DMA2_Stream3_IRQHandler+0x10>)
 8005396:	f002 fa4f 	bl	8007838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800539a:	bf00      	nop
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2002d428 	.word	0x2002d428

080053a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80053a8:	4802      	ldr	r0, [pc, #8]	; (80053b4 <DMA2_Stream6_IRQHandler+0x10>)
 80053aa:	f002 fa45 	bl	8007838 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80053ae:	bf00      	nop
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	2002d75c 	.word	0x2002d75c

080053b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e00a      	b.n	80053e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80053ca:	f3af 8000 	nop.w
 80053ce:	4601      	mov	r1, r0
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	60ba      	str	r2, [r7, #8]
 80053d6:	b2ca      	uxtb	r2, r1
 80053d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	dbf0      	blt.n	80053ca <_read+0x12>
	}

return len;
 80053e8:	687b      	ldr	r3, [r7, #4]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
	return -1;
 80053fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800541a:	605a      	str	r2, [r3, #4]
	return 0;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <_isatty>:

int _isatty(int file)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	return 1;
 8005432:	2301      	movs	r3, #1
}
 8005434:	4618      	mov	r0, r3
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
	return 0;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b086      	sub	sp, #24
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005464:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <_sbrk+0x5c>)
 8005466:	4b15      	ldr	r3, [pc, #84]	; (80054bc <_sbrk+0x60>)
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005470:	4b13      	ldr	r3, [pc, #76]	; (80054c0 <_sbrk+0x64>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d102      	bne.n	800547e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005478:	4b11      	ldr	r3, [pc, #68]	; (80054c0 <_sbrk+0x64>)
 800547a:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <_sbrk+0x68>)
 800547c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800547e:	4b10      	ldr	r3, [pc, #64]	; (80054c0 <_sbrk+0x64>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4413      	add	r3, r2
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	429a      	cmp	r2, r3
 800548a:	d207      	bcs.n	800549c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800548c:	f00d f8d6 	bl	801263c <__errno>
 8005490:	4602      	mov	r2, r0
 8005492:	230c      	movs	r3, #12
 8005494:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	e009      	b.n	80054b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800549c:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <_sbrk+0x64>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <_sbrk+0x64>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4413      	add	r3, r2
 80054aa:	4a05      	ldr	r2, [pc, #20]	; (80054c0 <_sbrk+0x64>)
 80054ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80054ae:	68fb      	ldr	r3, [r7, #12]
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20050000 	.word	0x20050000
 80054bc:	00000800 	.word	0x00000800
 80054c0:	20000234 	.word	0x20000234
 80054c4:	2002fab0 	.word	0x2002fab0

080054c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <SystemInit+0x28>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	4a07      	ldr	r2, [pc, #28]	; (80054f0 <SystemInit+0x28>)
 80054d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80054d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80054dc:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <SystemInit+0x28>)
 80054de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80054e2:	609a      	str	r2, [r3, #8]
#endif
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	e000ed00 	.word	0xe000ed00

080054f4 <batteryLowMode>:
float mon_v, mon_w;
uint16_t mon_cnt;
float mon_zg, mon_offset;

void batteryLowMode()
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
	lcd_clear();
 80054f8:	f7fb fdd2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80054fc:	2100      	movs	r1, #0
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fb fdde 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005504:	4814      	ldr	r0, [pc, #80]	; (8005558 <batteryLowMode+0x64>)
 8005506:	f7fb fe05 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800550a:	2101      	movs	r1, #1
 800550c:	2000      	movs	r0, #0
 800550e:	f7fb fdd7 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 8005512:	4812      	ldr	r0, [pc, #72]	; (800555c <batteryLowMode+0x68>)
 8005514:	f7fb fdfe 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005518:	2152      	movs	r1, #82	; 0x52
 800551a:	4811      	ldr	r0, [pc, #68]	; (8005560 <batteryLowMode+0x6c>)
 800551c:	f7fc fcb4 	bl	8001e88 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005520:	2064      	movs	r0, #100	; 0x64
 8005522:	f001 fb29 	bl	8006b78 <HAL_Delay>
		led.fullColor('Y');
 8005526:	2159      	movs	r1, #89	; 0x59
 8005528:	480d      	ldr	r0, [pc, #52]	; (8005560 <batteryLowMode+0x6c>)
 800552a:	f7fc fcad 	bl	8001e88 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800552e:	2064      	movs	r0, #100	; 0x64
 8005530:	f001 fb22 	bl	8006b78 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 8005534:	480b      	ldr	r0, [pc, #44]	; (8005564 <batteryLowMode+0x70>)
 8005536:	f7fc fc43 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 800553a:	4603      	mov	r3, r0
 800553c:	2b02      	cmp	r3, #2
 800553e:	bf0c      	ite	eq
 8005540:	2301      	moveq	r3, #1
 8005542:	2300      	movne	r3, #0
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0e6      	beq.n	8005518 <batteryLowMode+0x24>
			HAL_Delay(500);
 800554a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800554e:	f001 fb13 	bl	8006b78 <HAL_Delay>
			break;
 8005552:	bf00      	nop
		}
	}
}
 8005554:	bf00      	nop
 8005556:	bd80      	pop	{r7, pc}
 8005558:	08017754 	.word	0x08017754
 800555c:	0801775c 	.word	0x0801775c
 8005560:	20000540 	.word	0x20000540
 8005564:	20000534 	.word	0x20000534

08005568 <cppInit>:

void cppInit(void)
{
 8005568:	b598      	push	{r3, r4, r7, lr}
 800556a:	af00      	add	r7, sp, #0
	lcd_init();
 800556c:	f7fb fd54 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005570:	4842      	ldr	r0, [pc, #264]	; (800567c <cppInit+0x114>)
 8005572:	f7fd fd69 	bl	8003048 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005576:	2064      	movs	r0, #100	; 0x64
 8005578:	f001 fafe 	bl	8006b78 <HAL_Delay>
	power_sensor.updateValues();
 800557c:	483f      	ldr	r0, [pc, #252]	; (800567c <cppInit+0x114>)
 800557e:	f7fd fd73 	bl	8003068 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8005582:	f7fb fd8d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005586:	2100      	movs	r1, #0
 8005588:	2000      	movs	r0, #0
 800558a:	f7fb fd99 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800558e:	483c      	ldr	r0, [pc, #240]	; (8005680 <cppInit+0x118>)
 8005590:	f7fb fdc0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005594:	2101      	movs	r1, #1
 8005596:	2000      	movs	r0, #0
 8005598:	f7fb fd92 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 800559c:	4837      	ldr	r0, [pc, #220]	; (800567c <cppInit+0x114>)
 800559e:	f7fd fd8d 	bl	80030bc <_ZN11PowerSensor17getButteryVoltageEv>
 80055a2:	ee10 3a10 	vmov	r3, s0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fa ffe6 	bl	8000578 <__aeabi_f2d>
 80055ac:	4603      	mov	r3, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	461a      	mov	r2, r3
 80055b2:	4623      	mov	r3, r4
 80055b4:	4833      	ldr	r0, [pc, #204]	; (8005684 <cppInit+0x11c>)
 80055b6:	f7fb fdad 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80055ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80055be:	f001 fadb 	bl	8006b78 <HAL_Delay>

	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 80055c2:	482e      	ldr	r0, [pc, #184]	; (800567c <cppInit+0x114>)
 80055c4:	f7fd fd8c 	bl	80030e0 <_ZN11PowerSensor12butteryCheckEv>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <cppInit+0x6a>
 80055ce:	f7ff ff91 	bl	80054f4 <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80055d2:	482d      	ldr	r0, [pc, #180]	; (8005688 <cppInit+0x120>)
 80055d4:	f7fd f936 	bl	8002844 <_ZN6Logger10sdCardInitEv>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d007      	beq.n	80055ee <cppInit+0x86>
		led.fullColor('G');
 80055de:	2147      	movs	r1, #71	; 0x47
 80055e0:	482a      	ldr	r0, [pc, #168]	; (800568c <cppInit+0x124>)
 80055e2:	f7fc fc51 	bl	8001e88 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80055e6:	2064      	movs	r0, #100	; 0x64
 80055e8:	f001 fac6 	bl	8006b78 <HAL_Delay>
 80055ec:	e006      	b.n	80055fc <cppInit+0x94>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80055ee:	2152      	movs	r1, #82	; 0x52
 80055f0:	4826      	ldr	r0, [pc, #152]	; (800568c <cppInit+0x124>)
 80055f2:	f7fc fc49 	bl	8001e88 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80055f6:	2064      	movs	r0, #100	; 0x64
 80055f8:	f001 fabe 	bl	8006b78 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80055fc:	4824      	ldr	r0, [pc, #144]	; (8005690 <cppInit+0x128>)
 80055fe:	f7fc fd9f 	bl	8002140 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8005602:	4824      	ldr	r0, [pc, #144]	; (8005694 <cppInit+0x12c>)
 8005604:	f7fd fa10 	bl	8002a28 <_ZN5Motor4initEv>
	encoder.init();
 8005608:	4823      	ldr	r0, [pc, #140]	; (8005698 <cppInit+0x130>)
 800560a:	f7fb fdd7 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 800560e:	4823      	ldr	r0, [pc, #140]	; (800569c <cppInit+0x134>)
 8005610:	f7fc f9e4 	bl	80019dc <_ZN3IMU4initEv>
	line_trace.init();
 8005614:	4822      	ldr	r0, [pc, #136]	; (80056a0 <cppInit+0x138>)
 8005616:	f7fc ffcf 	bl	80025b8 <_ZN9LineTrace4initEv>

	//line_sensor.calibration();
	HAL_Delay(1000);
 800561a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800561e:	f001 faab 	bl	8006b78 <HAL_Delay>

	led.fullColor('M');
 8005622:	214d      	movs	r1, #77	; 0x4d
 8005624:	4819      	ldr	r0, [pc, #100]	; (800568c <cppInit+0x124>)
 8005626:	f7fc fc2f 	bl	8001e88 <_ZN3LED9fullColorEc>
	imu.calibration();
 800562a:	481c      	ldr	r0, [pc, #112]	; (800569c <cppInit+0x134>)
 800562c:	f7fc faba 	bl	8001ba4 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005630:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80056a4 <cppInit+0x13c>
 8005634:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80056a8 <cppInit+0x140>
 8005638:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80056ac <cppInit+0x144>
 800563c:	4818      	ldr	r0, [pc, #96]	; (80056a0 <cppInit+0x138>)
 800563e:	f7fc ffff 	bl	8002640 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 8005642:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80056a4 <cppInit+0x13c>
 8005646:	eddf 0a17 	vldr	s1, [pc, #92]	; 80056a4 <cppInit+0x13c>
 800564a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80056a4 <cppInit+0x13c>
 800564e:	4818      	ldr	r0, [pc, #96]	; (80056b0 <cppInit+0x148>)
 8005650:	f7fe f8d2 	bl	80037f8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.48398, 8.7326, 0.0061017);
 8005654:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80056b4 <cppInit+0x14c>
 8005658:	eddf 0a17 	vldr	s1, [pc, #92]	; 80056b8 <cppInit+0x150>
 800565c:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80056bc <cppInit+0x154>
 8005660:	4813      	ldr	r0, [pc, #76]	; (80056b0 <cppInit+0x148>)
 8005662:	f7fe f8e2 	bl	800382a <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005666:	480c      	ldr	r0, [pc, #48]	; (8005698 <cppInit+0x130>)
 8005668:	f7fb fe96 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 800566c:	4814      	ldr	r0, [pc, #80]	; (80056c0 <cppInit+0x158>)
 800566e:	f7fd fbb8 	bl	8002de2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005672:	4814      	ldr	r0, [pc, #80]	; (80056c4 <cppInit+0x15c>)
 8005674:	f7fd fc50 	bl	8002f18 <_ZN13PathFollowing4initEv>

}
 8005678:	bf00      	nop
 800567a:	bd98      	pop	{r3, r4, r7, pc}
 800567c:	20000544 	.word	0x20000544
 8005680:	08017760 	.word	0x08017760
 8005684:	08017768 	.word	0x08017768
 8005688:	20000564 	.word	0x20000564
 800568c:	20000540 	.word	0x20000540
 8005690:	20000238 	.word	0x20000238
 8005694:	2000053c 	.word	0x2000053c
 8005698:	20013620 	.word	0x20013620
 800569c:	20000550 	.word	0x20000550
 80056a0:	20013690 	.word	0x20013690
 80056a4:	00000000 	.word	0x00000000
 80056a8:	360637bd 	.word	0x360637bd
 80056ac:	3a03126f 	.word	0x3a03126f
 80056b0:	20013650 	.word	0x20013650
 80056b4:	3bc7f0c5 	.word	0x3bc7f0c5
 80056b8:	410bb8bb 	.word	0x410bb8bb
 80056bc:	3ef7cc3a 	.word	0x3ef7cc3a
 80056c0:	200136f8 	.word	0x200136f8
 80056c4:	20013938 	.word	0x20013938

080056c8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80056cc:	4825      	ldr	r0, [pc, #148]	; (8005764 <cppFlip1ms+0x9c>)
 80056ce:	f7fc fd95 	bl	80021fc <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80056d2:	4825      	ldr	r0, [pc, #148]	; (8005768 <cppFlip1ms+0xa0>)
 80056d4:	f7fc f9b0 	bl	8001a38 <_ZN3IMU12updateValuesEv>
	mon_zg = imu.getOmega();
 80056d8:	4823      	ldr	r0, [pc, #140]	; (8005768 <cppFlip1ms+0xa0>)
 80056da:	f7fc fa19 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 80056de:	eef0 7a40 	vmov.f32	s15, s0
 80056e2:	4b22      	ldr	r3, [pc, #136]	; (800576c <cppFlip1ms+0xa4>)
 80056e4:	edc3 7a00 	vstr	s15, [r3]
	mon_offset = imu.getOffsetVal();
 80056e8:	481f      	ldr	r0, [pc, #124]	; (8005768 <cppFlip1ms+0xa0>)
 80056ea:	f7fc fadc 	bl	8001ca6 <_ZN3IMU12getOffsetValEv>
 80056ee:	eef0 7a40 	vmov.f32	s15, s0
 80056f2:	4b1f      	ldr	r3, [pc, #124]	; (8005770 <cppFlip1ms+0xa8>)
 80056f4:	edc3 7a00 	vstr	s15, [r3]
	encoder.updateCnt();
 80056f8:	481e      	ldr	r0, [pc, #120]	; (8005774 <cppFlip1ms+0xac>)
 80056fa:	f7fb fd81 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80056fe:	481e      	ldr	r0, [pc, #120]	; (8005778 <cppFlip1ms+0xb0>)
 8005700:	f7fd f81e 	bl	8002740 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005704:	481d      	ldr	r0, [pc, #116]	; (800577c <cppFlip1ms+0xb4>)
 8005706:	f7fe f8a9 	bl	800385c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800570a:	481d      	ldr	r0, [pc, #116]	; (8005780 <cppFlip1ms+0xb8>)
 800570c:	f7fd fb5e 	bl	8002dcc <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005710:	481c      	ldr	r0, [pc, #112]	; (8005784 <cppFlip1ms+0xbc>)
 8005712:	f7fd f99b 	bl	8002a4c <_ZN5Motor9motorCtrlEv>

	logger.storeLog(imu.getOmega());
 8005716:	4814      	ldr	r0, [pc, #80]	; (8005768 <cppFlip1ms+0xa0>)
 8005718:	f7fc f9fa 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 800571c:	eef0 7a40 	vmov.f32	s15, s0
 8005720:	eeb0 0a67 	vmov.f32	s0, s15
 8005724:	4818      	ldr	r0, [pc, #96]	; (8005788 <cppFlip1ms+0xc0>)
 8005726:	f7fd f8df 	bl	80028e8 <_ZN6Logger8storeLogEf>

	static uint16_t twice_cnt;
	twice_cnt++;
 800572a:	4b18      	ldr	r3, [pc, #96]	; (800578c <cppFlip1ms+0xc4>)
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	4b16      	ldr	r3, [pc, #88]	; (800578c <cppFlip1ms+0xc4>)
 8005734:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 5){
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <cppFlip1ms+0xc4>)
 8005738:	881b      	ldrh	r3, [r3, #0]
 800573a:	2b04      	cmp	r3, #4
 800573c:	d90c      	bls.n	8005758 <cppFlip1ms+0x90>
		sys_ident.outputStore(imu.getOmega());
 800573e:	480a      	ldr	r0, [pc, #40]	; (8005768 <cppFlip1ms+0xa0>)
 8005740:	f7fc f9e6 	bl	8001b10 <_ZN3IMU8getOmegaEv>
 8005744:	eef0 7a40 	vmov.f32	s15, s0
 8005748:	eeb0 0a67 	vmov.f32	s0, s15
 800574c:	4810      	ldr	r0, [pc, #64]	; (8005790 <cppFlip1ms+0xc8>)
 800574e:	f7fd fddb 	bl	8003308 <_ZN20SystemIdentification11outputStoreEf>
		twice_cnt = 0;
 8005752:	4b0e      	ldr	r3, [pc, #56]	; (800578c <cppFlip1ms+0xc4>)
 8005754:	2200      	movs	r2, #0
 8005756:	801a      	strh	r2, [r3, #0]
		encoder.clearTotalCnt();
		odometry.clearPotition();
	}
	*/

	encoder.clearCnt();
 8005758:	4806      	ldr	r0, [pc, #24]	; (8005774 <cppFlip1ms+0xac>)
 800575a:	f7fb fe2d 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000238 	.word	0x20000238
 8005768:	20000550 	.word	0x20000550
 800576c:	2002b064 	.word	0x2002b064
 8005770:	2002b068 	.word	0x2002b068
 8005774:	20013620 	.word	0x20013620
 8005778:	20013690 	.word	0x20013690
 800577c:	20013650 	.word	0x20013650
 8005780:	200136f8 	.word	0x200136f8
 8005784:	2000053c 	.word	0x2000053c
 8005788:	20000564 	.word	0x20000564
 800578c:	2002b06c 	.word	0x2002b06c
 8005790:	20013728 	.word	0x20013728

08005794 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005798:	4802      	ldr	r0, [pc, #8]	; (80057a4 <cppFlip100ns+0x10>)
 800579a:	f7fc fce1 	bl	8002160 <_ZN10LineSensor17storeSensorValuesEv>
	if(cnt >= 2){ //200ns
		cnt = 0;
		//imu.storeValues();
	}
	*/
}
 800579e:	bf00      	nop
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000238 	.word	0x20000238

080057a8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <cppFlip10ms+0x30>)
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	3301      	adds	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	4b08      	ldr	r3, [pc, #32]	; (80057d8 <cppFlip10ms+0x30>)
 80057b6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 5){
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <cppFlip10ms+0x30>)
 80057ba:	881b      	ldrh	r3, [r3, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d905      	bls.n	80057cc <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 80057c0:	4806      	ldr	r0, [pc, #24]	; (80057dc <cppFlip10ms+0x34>)
 80057c2:	f7fd fdcb 	bl	800335c <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 80057c6:	4b04      	ldr	r3, [pc, #16]	; (80057d8 <cppFlip10ms+0x30>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <cppFlip10ms+0x30>)
 80057ce:	881a      	ldrh	r2, [r3, #0]
 80057d0:	4b03      	ldr	r3, [pc, #12]	; (80057e0 <cppFlip10ms+0x38>)
 80057d2:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 80057d4:	bf00      	nop
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	2002b06e 	.word	0x2002b06e
 80057dc:	20013728 	.word	0x20013728
 80057e0:	2002b060 	.word	0x2002b060

080057e4 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b082      	sub	sp, #8
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 80057ee:	88fb      	ldrh	r3, [r7, #6]
 80057f0:	4619      	mov	r1, r3
 80057f2:	4803      	ldr	r0, [pc, #12]	; (8005800 <cppExit+0x1c>)
 80057f4:	f7fd fd00 	bl	80031f8 <_ZN10SideSensor12updateStatusEt>
}
 80057f8:	bf00      	nop
 80057fa:	3708      	adds	r7, #8
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	20000530 	.word	0x20000530
 8005804:	00000000 	.word	0x00000000

08005808 <cppLoop>:

void cppLoop(void)
{
 8005808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800580a:	b091      	sub	sp, #68	; 0x44
 800580c:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 800580e:	48b8      	ldr	r0, [pc, #736]	; (8005af0 <cppLoop+0x2e8>)
 8005810:	f7fd fc98 	bl	8003144 <_ZN12RotarySwitch8getValueEv>
 8005814:	4603      	mov	r3, r0
 8005816:	2b0f      	cmp	r3, #15
 8005818:	f201 807a 	bhi.w	8006910 <cppLoop+0x1108>
 800581c:	a201      	add	r2, pc, #4	; (adr r2, 8005824 <cppLoop+0x1c>)
 800581e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005822:	bf00      	nop
 8005824:	08005865 	.word	0x08005865
 8005828:	08005d3d 	.word	0x08005d3d
 800582c:	08005e11 	.word	0x08005e11
 8005830:	08005e87 	.word	0x08005e87
 8005834:	08005f41 	.word	0x08005f41
 8005838:	08005fcf 	.word	0x08005fcf
 800583c:	0800609d 	.word	0x0800609d
 8005840:	080061c1 	.word	0x080061c1
 8005844:	08006261 	.word	0x08006261
 8005848:	08006701 	.word	0x08006701
 800584c:	080067fd 	.word	0x080067fd
 8005850:	0800688f 	.word	0x0800688f
 8005854:	08006911 	.word	0x08006911
 8005858:	08006911 	.word	0x08006911
 800585c:	08006911 	.word	0x08006911
 8005860:	08006911 	.word	0x08006911
	static int16_t selector;

	case 0:
		lcd_clear();
 8005864:	f7fb fc1c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005868:	2100      	movs	r1, #0
 800586a:	2000      	movs	r0, #0
 800586c:	f7fb fc28 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKpV()*1000);
 8005870:	48a0      	ldr	r0, [pc, #640]	; (8005af4 <cppLoop+0x2ec>)
 8005872:	f7fc ff17 	bl	80026a4 <_ZN9LineTrace6getKpVEv>
 8005876:	eeb0 7a40 	vmov.f32	s14, s0
 800587a:	eddf 7a9f 	vldr	s15, [pc, #636]	; 8005af8 <cppLoop+0x2f0>
 800587e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005882:	ee17 0a90 	vmov	r0, s15
 8005886:	f7fa fe77 	bl	8000578 <__aeabi_f2d>
 800588a:	4603      	mov	r3, r0
 800588c:	460c      	mov	r4, r1
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	489a      	ldr	r0, [pc, #616]	; (8005afc <cppLoop+0x2f4>)
 8005894:	f7fb fc3e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005898:	2101      	movs	r1, #1
 800589a:	2000      	movs	r0, #0
 800589c:	f7fb fc10 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKiV()*1000, line_trace.getKdV()*1000);
 80058a0:	4894      	ldr	r0, [pc, #592]	; (8005af4 <cppLoop+0x2ec>)
 80058a2:	f7fc ff0e 	bl	80026c2 <_ZN9LineTrace6getKiVEv>
 80058a6:	eeb0 7a40 	vmov.f32	s14, s0
 80058aa:	eddf 7a93 	vldr	s15, [pc, #588]	; 8005af8 <cppLoop+0x2f0>
 80058ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b2:	ee17 0a90 	vmov	r0, s15
 80058b6:	f7fa fe5f 	bl	8000578 <__aeabi_f2d>
 80058ba:	4605      	mov	r5, r0
 80058bc:	460e      	mov	r6, r1
 80058be:	488d      	ldr	r0, [pc, #564]	; (8005af4 <cppLoop+0x2ec>)
 80058c0:	f7fc ff0e 	bl	80026e0 <_ZN9LineTrace6getKdVEv>
 80058c4:	eeb0 7a40 	vmov.f32	s14, s0
 80058c8:	eddf 7a8b 	vldr	s15, [pc, #556]	; 8005af8 <cppLoop+0x2f0>
 80058cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d0:	ee17 0a90 	vmov	r0, s15
 80058d4:	f7fa fe50 	bl	8000578 <__aeabi_f2d>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	e9cd 3400 	strd	r3, r4, [sp]
 80058e0:	462a      	mov	r2, r5
 80058e2:	4633      	mov	r3, r6
 80058e4:	4886      	ldr	r0, [pc, #536]	; (8005b00 <cppLoop+0x2f8>)
 80058e6:	f7fb fc15 	bl	8001114 <lcd_printf>

		static double adj_kp_v = line_trace.getKpV();
 80058ea:	4b86      	ldr	r3, [pc, #536]	; (8005b04 <cppLoop+0x2fc>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	f3bf 8f5b 	dmb	ish
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01a      	beq.n	800593c <cppLoop+0x134>
 8005906:	487f      	ldr	r0, [pc, #508]	; (8005b04 <cppLoop+0x2fc>)
 8005908:	f00b fe33 	bl	8011572 <__cxa_guard_acquire>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	bf14      	ite	ne
 8005912:	2301      	movne	r3, #1
 8005914:	2300      	moveq	r3, #0
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00f      	beq.n	800593c <cppLoop+0x134>
 800591c:	4875      	ldr	r0, [pc, #468]	; (8005af4 <cppLoop+0x2ec>)
 800591e:	f7fc fec1 	bl	80026a4 <_ZN9LineTrace6getKpVEv>
 8005922:	ee10 3a10 	vmov	r3, s0
 8005926:	4618      	mov	r0, r3
 8005928:	f7fa fe26 	bl	8000578 <__aeabi_f2d>
 800592c:	4603      	mov	r3, r0
 800592e:	460c      	mov	r4, r1
 8005930:	4a75      	ldr	r2, [pc, #468]	; (8005b08 <cppLoop+0x300>)
 8005932:	e9c2 3400 	strd	r3, r4, [r2]
 8005936:	4873      	ldr	r0, [pc, #460]	; (8005b04 <cppLoop+0x2fc>)
 8005938:	f00b fe27 	bl	801158a <__cxa_guard_release>
		static double adj_ki_v = line_trace.getKiV();
 800593c:	4b73      	ldr	r3, [pc, #460]	; (8005b0c <cppLoop+0x304>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f3bf 8f5b 	dmb	ish
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf0c      	ite	eq
 800594e:	2301      	moveq	r3, #1
 8005950:	2300      	movne	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01a      	beq.n	800598e <cppLoop+0x186>
 8005958:	486c      	ldr	r0, [pc, #432]	; (8005b0c <cppLoop+0x304>)
 800595a:	f00b fe0a 	bl	8011572 <__cxa_guard_acquire>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00f      	beq.n	800598e <cppLoop+0x186>
 800596e:	4861      	ldr	r0, [pc, #388]	; (8005af4 <cppLoop+0x2ec>)
 8005970:	f7fc fea7 	bl	80026c2 <_ZN9LineTrace6getKiVEv>
 8005974:	ee10 3a10 	vmov	r3, s0
 8005978:	4618      	mov	r0, r3
 800597a:	f7fa fdfd 	bl	8000578 <__aeabi_f2d>
 800597e:	4603      	mov	r3, r0
 8005980:	460c      	mov	r4, r1
 8005982:	4a63      	ldr	r2, [pc, #396]	; (8005b10 <cppLoop+0x308>)
 8005984:	e9c2 3400 	strd	r3, r4, [r2]
 8005988:	4860      	ldr	r0, [pc, #384]	; (8005b0c <cppLoop+0x304>)
 800598a:	f00b fdfe 	bl	801158a <__cxa_guard_release>
		static double adj_kd_v = line_trace.getKdV();
 800598e:	4b61      	ldr	r3, [pc, #388]	; (8005b14 <cppLoop+0x30c>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f3bf 8f5b 	dmb	ish
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b00      	cmp	r3, #0
 800599e:	bf0c      	ite	eq
 80059a0:	2301      	moveq	r3, #1
 80059a2:	2300      	movne	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d01a      	beq.n	80059e0 <cppLoop+0x1d8>
 80059aa:	485a      	ldr	r0, [pc, #360]	; (8005b14 <cppLoop+0x30c>)
 80059ac:	f00b fde1 	bl	8011572 <__cxa_guard_acquire>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bf14      	ite	ne
 80059b6:	2301      	movne	r3, #1
 80059b8:	2300      	moveq	r3, #0
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00f      	beq.n	80059e0 <cppLoop+0x1d8>
 80059c0:	484c      	ldr	r0, [pc, #304]	; (8005af4 <cppLoop+0x2ec>)
 80059c2:	f7fc fe8d 	bl	80026e0 <_ZN9LineTrace6getKdVEv>
 80059c6:	ee10 3a10 	vmov	r3, s0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fa fdd4 	bl	8000578 <__aeabi_f2d>
 80059d0:	4603      	mov	r3, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4a50      	ldr	r2, [pc, #320]	; (8005b18 <cppLoop+0x310>)
 80059d6:	e9c2 3400 	strd	r3, r4, [r2]
 80059da:	484e      	ldr	r0, [pc, #312]	; (8005b14 <cppLoop+0x30c>)
 80059dc:	f00b fdd5 	bl	801158a <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80059e0:	484e      	ldr	r0, [pc, #312]	; (8005b1c <cppLoop+0x314>)
 80059e2:	f7fc f9ed 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d022      	beq.n	8005a3c <cppLoop+0x234>
			led.LR(-1, 1);
 80059f6:	2201      	movs	r2, #1
 80059f8:	f04f 31ff 	mov.w	r1, #4294967295
 80059fc:	4848      	ldr	r0, [pc, #288]	; (8005b20 <cppLoop+0x318>)
 80059fe:	f7fc faff 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005a02:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a06:	f001 f8b7 	bl	8006b78 <HAL_Delay>

			selector++;
 8005a0a:	4b46      	ldr	r3, [pc, #280]	; (8005b24 <cppLoop+0x31c>)
 8005a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3301      	adds	r3, #1
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	b21a      	sxth	r2, r3
 8005a18:	4b42      	ldr	r3, [pc, #264]	; (8005b24 <cppLoop+0x31c>)
 8005a1a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8005a1c:	4b41      	ldr	r3, [pc, #260]	; (8005b24 <cppLoop+0x31c>)
 8005a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	dd02      	ble.n	8005a2c <cppLoop+0x224>
 8005a26:	4b3f      	ldr	r3, [pc, #252]	; (8005b24 <cppLoop+0x31c>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005a32:	483b      	ldr	r0, [pc, #236]	; (8005b20 <cppLoop+0x318>)
 8005a34:	f7fc fae4 	bl	8002000 <_ZN3LED2LREaa>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);

			led.LR(-1, 0);
		}
		break;
 8005a38:	f000 bf6c 	b.w	8006914 <cppLoop+0x110c>
		else if(joy_stick.getValue() == JOY_R){
 8005a3c:	4837      	ldr	r0, [pc, #220]	; (8005b1c <cppLoop+0x314>)
 8005a3e:	f7fc f9bf 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	bf0c      	ite	eq
 8005a48:	2301      	moveq	r3, #1
 8005a4a:	2300      	movne	r3, #0
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d06a      	beq.n	8005b28 <cppLoop+0x320>
			led.LR(-1, 1);
 8005a52:	2201      	movs	r2, #1
 8005a54:	f04f 31ff 	mov.w	r1, #4294967295
 8005a58:	4831      	ldr	r0, [pc, #196]	; (8005b20 <cppLoop+0x318>)
 8005a5a:	f7fc fad1 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005a5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005a62:	f001 f889 	bl	8006b78 <HAL_Delay>
			if(selector == 0){
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <cppLoop+0x31c>)
 8005a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10d      	bne.n	8005a8c <cppLoop+0x284>
				adj_kp_v = adj_kp_v + 0.00001;
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <cppLoop+0x300>)
 8005a72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a76:	a31c      	add	r3, pc, #112	; (adr r3, 8005ae8 <cppLoop+0x2e0>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fc1e 	bl	80002bc <__adddf3>
 8005a80:	4603      	mov	r3, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	4a20      	ldr	r2, [pc, #128]	; (8005b08 <cppLoop+0x300>)
 8005a86:	e9c2 3400 	strd	r3, r4, [r2]
 8005a8a:	e01f      	b.n	8005acc <cppLoop+0x2c4>
			else if(selector == 1){
 8005a8c:	4b25      	ldr	r3, [pc, #148]	; (8005b24 <cppLoop+0x31c>)
 8005a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d10d      	bne.n	8005ab2 <cppLoop+0x2aa>
				adj_ki_v = adj_ki_v + 0.00001;
 8005a96:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <cppLoop+0x308>)
 8005a98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a9c:	a312      	add	r3, pc, #72	; (adr r3, 8005ae8 <cppLoop+0x2e0>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f7fa fc0b 	bl	80002bc <__adddf3>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	460c      	mov	r4, r1
 8005aaa:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <cppLoop+0x308>)
 8005aac:	e9c2 3400 	strd	r3, r4, [r2]
 8005ab0:	e00c      	b.n	8005acc <cppLoop+0x2c4>
				adj_kd_v = adj_kd_v + 0.00001;
 8005ab2:	4b19      	ldr	r3, [pc, #100]	; (8005b18 <cppLoop+0x310>)
 8005ab4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ab8:	a30b      	add	r3, pc, #44	; (adr r3, 8005ae8 <cppLoop+0x2e0>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	f7fa fbfd 	bl	80002bc <__adddf3>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	4a14      	ldr	r2, [pc, #80]	; (8005b18 <cppLoop+0x310>)
 8005ac8:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005acc:	2152      	movs	r1, #82	; 0x52
 8005ace:	4814      	ldr	r0, [pc, #80]	; (8005b20 <cppLoop+0x318>)
 8005ad0:	f7fc f9da 	bl	8001e88 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8005ada:	4811      	ldr	r0, [pc, #68]	; (8005b20 <cppLoop+0x318>)
 8005adc:	f7fc fa90 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8005ae0:	f000 bf18 	b.w	8006914 <cppLoop+0x110c>
 8005ae4:	f3af 8000 	nop.w
 8005ae8:	88e368f1 	.word	0x88e368f1
 8005aec:	3ee4f8b5 	.word	0x3ee4f8b5
 8005af0:	20000538 	.word	0x20000538
 8005af4:	20013690 	.word	0x20013690
 8005af8:	447a0000 	.word	0x447a0000
 8005afc:	0801776c 	.word	0x0801776c
 8005b00:	08017778 	.word	0x08017778
 8005b04:	2002b080 	.word	0x2002b080
 8005b08:	2002b078 	.word	0x2002b078
 8005b0c:	2002b090 	.word	0x2002b090
 8005b10:	2002b088 	.word	0x2002b088
 8005b14:	2002b0a0 	.word	0x2002b0a0
 8005b18:	2002b098 	.word	0x2002b098
 8005b1c:	20000534 	.word	0x20000534
 8005b20:	20000540 	.word	0x20000540
 8005b24:	2002b070 	.word	0x2002b070
		else if(joy_stick.getValue() == JOY_L){
 8005b28:	48a9      	ldr	r0, [pc, #676]	; (8005dd0 <cppLoop+0x5c8>)
 8005b2a:	f7fc f949 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d048      	beq.n	8005bd0 <cppLoop+0x3c8>
			led.LR(-1, 1);
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f04f 31ff 	mov.w	r1, #4294967295
 8005b44:	48a3      	ldr	r0, [pc, #652]	; (8005dd4 <cppLoop+0x5cc>)
 8005b46:	f7fc fa5b 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005b4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005b4e:	f001 f813 	bl	8006b78 <HAL_Delay>
			if(selector == 0){
 8005b52:	4ba1      	ldr	r3, [pc, #644]	; (8005dd8 <cppLoop+0x5d0>)
 8005b54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10d      	bne.n	8005b78 <cppLoop+0x370>
				adj_kp_v = adj_kp_v - 0.00001;
 8005b5c:	4b9f      	ldr	r3, [pc, #636]	; (8005ddc <cppLoop+0x5d4>)
 8005b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b62:	a399      	add	r3, pc, #612	; (adr r3, 8005dc8 <cppLoop+0x5c0>)
 8005b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b68:	f7fa fba6 	bl	80002b8 <__aeabi_dsub>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	460c      	mov	r4, r1
 8005b70:	4a9a      	ldr	r2, [pc, #616]	; (8005ddc <cppLoop+0x5d4>)
 8005b72:	e9c2 3400 	strd	r3, r4, [r2]
 8005b76:	e01f      	b.n	8005bb8 <cppLoop+0x3b0>
			else if(selector == 1){
 8005b78:	4b97      	ldr	r3, [pc, #604]	; (8005dd8 <cppLoop+0x5d0>)
 8005b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10d      	bne.n	8005b9e <cppLoop+0x396>
				adj_ki_v = adj_ki_v - 0.00001;
 8005b82:	4b97      	ldr	r3, [pc, #604]	; (8005de0 <cppLoop+0x5d8>)
 8005b84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b88:	a38f      	add	r3, pc, #572	; (adr r3, 8005dc8 <cppLoop+0x5c0>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fb93 	bl	80002b8 <__aeabi_dsub>
 8005b92:	4603      	mov	r3, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	4a92      	ldr	r2, [pc, #584]	; (8005de0 <cppLoop+0x5d8>)
 8005b98:	e9c2 3400 	strd	r3, r4, [r2]
 8005b9c:	e00c      	b.n	8005bb8 <cppLoop+0x3b0>
				adj_kd_v = adj_kd_v - 0.00001;
 8005b9e:	4b91      	ldr	r3, [pc, #580]	; (8005de4 <cppLoop+0x5dc>)
 8005ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ba4:	a388      	add	r3, pc, #544	; (adr r3, 8005dc8 <cppLoop+0x5c0>)
 8005ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005baa:	f7fa fb85 	bl	80002b8 <__aeabi_dsub>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	4a8c      	ldr	r2, [pc, #560]	; (8005de4 <cppLoop+0x5dc>)
 8005bb4:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8005bb8:	2152      	movs	r1, #82	; 0x52
 8005bba:	4886      	ldr	r0, [pc, #536]	; (8005dd4 <cppLoop+0x5cc>)
 8005bbc:	f7fc f964 	bl	8001e88 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc6:	4883      	ldr	r0, [pc, #524]	; (8005dd4 <cppLoop+0x5cc>)
 8005bc8:	f7fc fa1a 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8005bcc:	f000 bea2 	b.w	8006914 <cppLoop+0x110c>
		else if(joy_stick.getValue() == JOY_D){
 8005bd0:	487f      	ldr	r0, [pc, #508]	; (8005dd0 <cppLoop+0x5c8>)
 8005bd2:	f7fc f8f5 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d053      	beq.n	8005c8e <cppLoop+0x486>
			led.LR(-1, 1);
 8005be6:	2201      	movs	r2, #1
 8005be8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bec:	4879      	ldr	r0, [pc, #484]	; (8005dd4 <cppLoop+0x5cc>)
 8005bee:	f7fc fa07 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005bf2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005bf6:	f000 ffbf 	bl	8006b78 <HAL_Delay>
			sd_read_array_double("Params", "kp_v.txt", 1, &temp_kp_v);
 8005bfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4979      	ldr	r1, [pc, #484]	; (8005de8 <cppLoop+0x5e0>)
 8005c02:	487a      	ldr	r0, [pc, #488]	; (8005dec <cppLoop+0x5e4>)
 8005c04:	f7fb fd5c 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ki_v.txt", 1, &temp_ki_v);
 8005c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4978      	ldr	r1, [pc, #480]	; (8005df0 <cppLoop+0x5e8>)
 8005c10:	4876      	ldr	r0, [pc, #472]	; (8005dec <cppLoop+0x5e4>)
 8005c12:	f7fb fd55 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kd_v.txt", 1, &temp_kd_v);
 8005c16:	f107 0320 	add.w	r3, r7, #32
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4975      	ldr	r1, [pc, #468]	; (8005df4 <cppLoop+0x5ec>)
 8005c1e:	4873      	ldr	r0, [pc, #460]	; (8005dec <cppLoop+0x5e4>)
 8005c20:	f7fb fd4e 	bl	80016c0 <sd_read_array_double>
			line_trace.setVeloGain(temp_kp_v, temp_ki_v, temp_kd_v);
 8005c24:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	f7fa fff4 	bl	8000c18 <__aeabi_d2f>
 8005c30:	4605      	mov	r5, r0
 8005c32:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8005c36:	4618      	mov	r0, r3
 8005c38:	4621      	mov	r1, r4
 8005c3a:	f7fa ffed 	bl	8000c18 <__aeabi_d2f>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005c44:	4618      	mov	r0, r3
 8005c46:	4621      	mov	r1, r4
 8005c48:	f7fa ffe6 	bl	8000c18 <__aeabi_d2f>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	ee01 3a10 	vmov	s2, r3
 8005c52:	ee00 6a90 	vmov	s1, r6
 8005c56:	ee00 5a10 	vmov	s0, r5
 8005c5a:	4867      	ldr	r0, [pc, #412]	; (8005df8 <cppLoop+0x5f0>)
 8005c5c:	f7fc fd09 	bl	8002672 <_ZN9LineTrace11setVeloGainEfff>
			adj_kp_v = temp_kp_v;
 8005c60:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005c64:	4a5d      	ldr	r2, [pc, #372]	; (8005ddc <cppLoop+0x5d4>)
 8005c66:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ki_v = temp_kp_v;
 8005c6a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005c6e:	4a5c      	ldr	r2, [pc, #368]	; (8005de0 <cppLoop+0x5d8>)
 8005c70:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kd_v = temp_kp_v;
 8005c74:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8005c78:	4a5a      	ldr	r2, [pc, #360]	; (8005de4 <cppLoop+0x5dc>)
 8005c7a:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f04f 31ff 	mov.w	r1, #4294967295
 8005c84:	4853      	ldr	r0, [pc, #332]	; (8005dd4 <cppLoop+0x5cc>)
 8005c86:	f7fc f9bb 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8005c8a:	f000 be43 	b.w	8006914 <cppLoop+0x110c>
		else if(joy_stick.getValue() == JOY_C){
 8005c8e:	4850      	ldr	r0, [pc, #320]	; (8005dd0 <cppLoop+0x5c8>)
 8005c90:	f7fc f896 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	bf0c      	ite	eq
 8005c9a:	2301      	moveq	r3, #1
 8005c9c:	2300      	movne	r3, #0
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8637 	beq.w	8006914 <cppLoop+0x110c>
			led.LR(-1, 1);
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8005cac:	4849      	ldr	r0, [pc, #292]	; (8005dd4 <cppLoop+0x5cc>)
 8005cae:	f7fc f9a7 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8005cb2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8005cb6:	f000 ff5f 	bl	8006b78 <HAL_Delay>
			sd_write_array_double("Params", "kp_v.txt", 1, &adj_kp_v, OVER_WRITE);
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	4b47      	ldr	r3, [pc, #284]	; (8005ddc <cppLoop+0x5d4>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4949      	ldr	r1, [pc, #292]	; (8005de8 <cppLoop+0x5e0>)
 8005cc4:	4849      	ldr	r0, [pc, #292]	; (8005dec <cppLoop+0x5e4>)
 8005cc6:	f7fb fc99 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ki_v.txt", 1, &adj_ki_v, OVER_WRITE);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	4b44      	ldr	r3, [pc, #272]	; (8005de0 <cppLoop+0x5d8>)
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	4947      	ldr	r1, [pc, #284]	; (8005df0 <cppLoop+0x5e8>)
 8005cd4:	4845      	ldr	r0, [pc, #276]	; (8005dec <cppLoop+0x5e4>)
 8005cd6:	f7fb fc91 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kd_v.txt", 1, &adj_kd_v, OVER_WRITE);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	4b41      	ldr	r3, [pc, #260]	; (8005de4 <cppLoop+0x5dc>)
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	4944      	ldr	r1, [pc, #272]	; (8005df4 <cppLoop+0x5ec>)
 8005ce4:	4841      	ldr	r0, [pc, #260]	; (8005dec <cppLoop+0x5e4>)
 8005ce6:	f7fb fc89 	bl	80015fc <sd_write_array_double>
			line_trace.setVeloGain(adj_kp_v, adj_ki_v, adj_kd_v);
 8005cea:	4b3c      	ldr	r3, [pc, #240]	; (8005ddc <cppLoop+0x5d4>)
 8005cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	4621      	mov	r1, r4
 8005cf4:	f7fa ff90 	bl	8000c18 <__aeabi_d2f>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	4b39      	ldr	r3, [pc, #228]	; (8005de0 <cppLoop+0x5d8>)
 8005cfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d00:	4618      	mov	r0, r3
 8005d02:	4621      	mov	r1, r4
 8005d04:	f7fa ff88 	bl	8000c18 <__aeabi_d2f>
 8005d08:	4606      	mov	r6, r0
 8005d0a:	4b36      	ldr	r3, [pc, #216]	; (8005de4 <cppLoop+0x5dc>)
 8005d0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d10:	4618      	mov	r0, r3
 8005d12:	4621      	mov	r1, r4
 8005d14:	f7fa ff80 	bl	8000c18 <__aeabi_d2f>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	ee01 3a10 	vmov	s2, r3
 8005d1e:	ee00 6a90 	vmov	s1, r6
 8005d22:	ee00 5a10 	vmov	s0, r5
 8005d26:	4834      	ldr	r0, [pc, #208]	; (8005df8 <cppLoop+0x5f0>)
 8005d28:	f7fc fca3 	bl	8002672 <_ZN9LineTrace11setVeloGainEfff>
			led.LR(-1, 0);
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8005d32:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <cppLoop+0x5cc>)
 8005d34:	f7fc f964 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8005d38:	f000 bdec 	b.w	8006914 <cppLoop+0x110c>

	case 1:
		lcd_clear();
 8005d3c:	f7fb f9b0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d40:	2100      	movs	r1, #0
 8005d42:	2000      	movs	r0, #0
 8005d44:	f7fb f9bc 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005d48:	482c      	ldr	r0, [pc, #176]	; (8005dfc <cppLoop+0x5f4>)
 8005d4a:	f7fb f9e3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d4e:	2101      	movs	r1, #1
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7fb f9b5 	bl	80010c0 <lcd_locate>
		lcd_printf("trace");
 8005d56:	482a      	ldr	r0, [pc, #168]	; (8005e00 <cppLoop+0x5f8>)
 8005d58:	f7fb f9dc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d5c:	481c      	ldr	r0, [pc, #112]	; (8005dd0 <cppLoop+0x5c8>)
 8005d5e:	f7fc f82f 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	bf0c      	ite	eq
 8005d68:	2301      	moveq	r3, #1
 8005d6a:	2300      	movne	r3, #0
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f000 85d2 	beq.w	8006918 <cppLoop+0x1110>
			HAL_Delay(500);
 8005d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d78:	f000 fefe 	bl	8006b78 <HAL_Delay>

			velocity_ctrl.start();
 8005d7c:	4821      	ldr	r0, [pc, #132]	; (8005e04 <cppLoop+0x5fc>)
 8005d7e:	f7fd fd80 	bl	8003882 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005d82:	481d      	ldr	r0, [pc, #116]	; (8005df8 <cppLoop+0x5f0>)
 8005d84:	f7fc fd14 	bl	80027b0 <_ZN9LineTrace5startEv>
			line_trace.setTargetVelocity(0.8);
 8005d88:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8005e08 <cppLoop+0x600>
 8005d8c:	481a      	ldr	r0, [pc, #104]	; (8005df8 <cppLoop+0x5f0>)
 8005d8e:	f7fc fcc5 	bl	800271c <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	2101      	movs	r1, #1
 8005d98:	480e      	ldr	r0, [pc, #56]	; (8005dd4 <cppLoop+0x5cc>)
 8005d9a:	f7fc f931 	bl	8002000 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005d9e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005da2:	f000 fee9 	bl	8006b78 <HAL_Delay>

			velocity_ctrl.stop();
 8005da6:	4817      	ldr	r0, [pc, #92]	; (8005e04 <cppLoop+0x5fc>)
 8005da8:	f7fd fd7a 	bl	80038a0 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	2100      	movs	r1, #0
 8005db2:	4808      	ldr	r0, [pc, #32]	; (8005dd4 <cppLoop+0x5cc>)
 8005db4:	f7fc f924 	bl	8002000 <_ZN3LED2LREaa>

			logger.stop();
 8005db8:	4814      	ldr	r0, [pc, #80]	; (8005e0c <cppLoop+0x604>)
 8005dba:	f7fc fe14 	bl	80029e6 <_ZN6Logger4stopEv>
		}

		break;
 8005dbe:	f000 bdab 	b.w	8006918 <cppLoop+0x1110>
 8005dc2:	bf00      	nop
 8005dc4:	f3af 8000 	nop.w
 8005dc8:	88e368f1 	.word	0x88e368f1
 8005dcc:	3ee4f8b5 	.word	0x3ee4f8b5
 8005dd0:	20000534 	.word	0x20000534
 8005dd4:	20000540 	.word	0x20000540
 8005dd8:	2002b070 	.word	0x2002b070
 8005ddc:	2002b078 	.word	0x2002b078
 8005de0:	2002b088 	.word	0x2002b088
 8005de4:	2002b098 	.word	0x2002b098
 8005de8:	08017788 	.word	0x08017788
 8005dec:	08017794 	.word	0x08017794
 8005df0:	0801779c 	.word	0x0801779c
 8005df4:	080177a8 	.word	0x080177a8
 8005df8:	20013690 	.word	0x20013690
 8005dfc:	080177b4 	.word	0x080177b4
 8005e00:	080177c0 	.word	0x080177c0
 8005e04:	20013650 	.word	0x20013650
 8005e08:	3f4ccccd 	.word	0x3f4ccccd
 8005e0c:	20000564 	.word	0x20000564

	case 2:
		lcd_clear();
 8005e10:	f7fb f946 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e14:	2100      	movs	r1, #0
 8005e16:	2000      	movs	r0, #0
 8005e18:	f7fb f952 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8005e1c:	48ce      	ldr	r0, [pc, #824]	; (8006158 <cppLoop+0x950>)
 8005e1e:	f7fb f979 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e22:	2101      	movs	r1, #1
 8005e24:	2000      	movs	r0, #0
 8005e26:	f7fb f94b 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8005e2a:	48cc      	ldr	r0, [pc, #816]	; (800615c <cppLoop+0x954>)
 8005e2c:	f7fb f972 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e30:	48cb      	ldr	r0, [pc, #812]	; (8006160 <cppLoop+0x958>)
 8005e32:	f7fb ffc5 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	bf0c      	ite	eq
 8005e3c:	2301      	moveq	r3, #1
 8005e3e:	2300      	movne	r3, #0
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 856a 	beq.w	800691c <cppLoop+0x1114>
			led.LR(-1, 1);
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f04f 31ff 	mov.w	r1, #4294967295
 8005e4e:	48c5      	ldr	r0, [pc, #788]	; (8006164 <cppLoop+0x95c>)
 8005e50:	f7fc f8d6 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(1000);
 8005e54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e58:	f000 fe8e 	bl	8006b78 <HAL_Delay>

			sys_ident.start();
 8005e5c:	48c2      	ldr	r0, [pc, #776]	; (8006168 <cppLoop+0x960>)
 8005e5e:	f7fd fad5 	bl	800340c <_ZN20SystemIdentification5startEv>
			HAL_Delay(10000);
 8005e62:	f242 7010 	movw	r0, #10000	; 0x2710
 8005e66:	f000 fe87 	bl	8006b78 <HAL_Delay>
			sys_ident.stop();
 8005e6a:	48bf      	ldr	r0, [pc, #764]	; (8006168 <cppLoop+0x960>)
 8005e6c:	f7fd fae0 	bl	8003430 <_ZN20SystemIdentification4stopEv>
			sys_ident.outputSave();
 8005e70:	48bd      	ldr	r0, [pc, #756]	; (8006168 <cppLoop+0x960>)
 8005e72:	f7fd fa5f 	bl	8003334 <_ZN20SystemIdentification10outputSaveEv>

			led.LR(-1, 0);
 8005e76:	2200      	movs	r2, #0
 8005e78:	f04f 31ff 	mov.w	r1, #4294967295
 8005e7c:	48b9      	ldr	r0, [pc, #740]	; (8006164 <cppLoop+0x95c>)
 8005e7e:	f7fc f8bf 	bl	8002000 <_ZN3LED2LREaa>
		}
		break;
 8005e82:	f000 bd4b 	b.w	800691c <cppLoop+0x1114>

	case 3:
		led.fullColor('C');
 8005e86:	2143      	movs	r1, #67	; 0x43
 8005e88:	48b6      	ldr	r0, [pc, #728]	; (8006164 <cppLoop+0x95c>)
 8005e8a:	f7fb fffd 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e8e:	f7fb f907 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e92:	2100      	movs	r1, #0
 8005e94:	2000      	movs	r0, #0
 8005e96:	f7fb f913 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005e9a:	48b4      	ldr	r0, [pc, #720]	; (800616c <cppLoop+0x964>)
 8005e9c:	f7fb f93a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ea0:	2101      	movs	r1, #1
 8005ea2:	2000      	movs	r0, #0
 8005ea4:	f7fb f90c 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005ea8:	48b1      	ldr	r0, [pc, #708]	; (8006170 <cppLoop+0x968>)
 8005eaa:	f7fb f933 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005eae:	48ac      	ldr	r0, [pc, #688]	; (8006160 <cppLoop+0x958>)
 8005eb0:	f7fb ff86 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	bf0c      	ite	eq
 8005eba:	2301      	moveq	r3, #1
 8005ebc:	2300      	movne	r3, #0
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 852d 	beq.w	8006920 <cppLoop+0x1118>
			led.LR(-1, 1);
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8005ecc:	48a5      	ldr	r0, [pc, #660]	; (8006164 <cppLoop+0x95c>)
 8005ece:	f7fc f897 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ed6:	f000 fe4f 	bl	8006b78 <HAL_Delay>

			logger.start();
 8005eda:	48a6      	ldr	r0, [pc, #664]	; (8006174 <cppLoop+0x96c>)
 8005edc:	f7fc fd73 	bl	80029c6 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005ee0:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8006178 <cppLoop+0x970>
 8005ee4:	48a5      	ldr	r0, [pc, #660]	; (800617c <cppLoop+0x974>)
 8005ee6:	f7fc fc0a 	bl	80026fe <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005eea:	48a4      	ldr	r0, [pc, #656]	; (800617c <cppLoop+0x974>)
 8005eec:	f7fc fc60 	bl	80027b0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005ef0:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ef4:	f000 fe40 	bl	8006b78 <HAL_Delay>

			logger.stop();
 8005ef8:	489e      	ldr	r0, [pc, #632]	; (8006174 <cppLoop+0x96c>)
 8005efa:	f7fc fd74 	bl	80029e6 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005efe:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8006178 <cppLoop+0x970>
 8005f02:	489e      	ldr	r0, [pc, #632]	; (800617c <cppLoop+0x974>)
 8005f04:	f7fc fbfb 	bl	80026fe <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005f08:	489c      	ldr	r0, [pc, #624]	; (800617c <cppLoop+0x974>)
 8005f0a:	f7fc fc61 	bl	80027d0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f12:	2101      	movs	r1, #1
 8005f14:	4893      	ldr	r0, [pc, #588]	; (8006164 <cppLoop+0x95c>)
 8005f16:	f7fc f873 	bl	8002000 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005f1a:	4a99      	ldr	r2, [pc, #612]	; (8006180 <cppLoop+0x978>)
 8005f1c:	4999      	ldr	r1, [pc, #612]	; (8006184 <cppLoop+0x97c>)
 8005f1e:	4895      	ldr	r0, [pc, #596]	; (8006174 <cppLoop+0x96c>)
 8005f20:	f7fc fd1a 	bl	8002958 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005f24:	f04f 32ff 	mov.w	r2, #4294967295
 8005f28:	2100      	movs	r1, #0
 8005f2a:	488e      	ldr	r0, [pc, #568]	; (8006164 <cppLoop+0x95c>)
 8005f2c:	f7fc f868 	bl	8002000 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005f30:	2200      	movs	r2, #0
 8005f32:	f04f 31ff 	mov.w	r1, #4294967295
 8005f36:	488b      	ldr	r0, [pc, #556]	; (8006164 <cppLoop+0x95c>)
 8005f38:	f7fc f862 	bl	8002000 <_ZN3LED2LREaa>
		}

		break;
 8005f3c:	f000 bcf0 	b.w	8006920 <cppLoop+0x1118>

	case 4:
		led.fullColor('M');
 8005f40:	214d      	movs	r1, #77	; 0x4d
 8005f42:	4888      	ldr	r0, [pc, #544]	; (8006164 <cppLoop+0x95c>)
 8005f44:	f7fb ffa0 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f48:	f7fb f8aa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f7fb f8b6 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005f54:	488c      	ldr	r0, [pc, #560]	; (8006188 <cppLoop+0x980>)
 8005f56:	f7fb f8dd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	f7fb f8af 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005f62:	4883      	ldr	r0, [pc, #524]	; (8006170 <cppLoop+0x968>)
 8005f64:	f7fb f8d6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f68:	487d      	ldr	r0, [pc, #500]	; (8006160 <cppLoop+0x958>)
 8005f6a:	f7fb ff29 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 84d2 	beq.w	8006924 <cppLoop+0x111c>
			led.LR(-1, 1);
 8005f80:	2201      	movs	r2, #1
 8005f82:	f04f 31ff 	mov.w	r1, #4294967295
 8005f86:	4877      	ldr	r0, [pc, #476]	; (8006164 <cppLoop+0x95c>)
 8005f88:	f7fc f83a 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f90:	f000 fdf2 	bl	8006b78 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005f94:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8006178 <cppLoop+0x970>
 8005f98:	4878      	ldr	r0, [pc, #480]	; (800617c <cppLoop+0x974>)
 8005f9a:	f7fc fbbf 	bl	800271c <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005f9e:	487b      	ldr	r0, [pc, #492]	; (800618c <cppLoop+0x984>)
 8005fa0:	f7fd fc6f 	bl	8003882 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005fa4:	4875      	ldr	r0, [pc, #468]	; (800617c <cppLoop+0x974>)
 8005fa6:	f7fc fc03 	bl	80027b0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005faa:	f242 7010 	movw	r0, #10000	; 0x2710
 8005fae:	f000 fde3 	bl	8006b78 <HAL_Delay>

			line_trace.stop();
 8005fb2:	4872      	ldr	r0, [pc, #456]	; (800617c <cppLoop+0x974>)
 8005fb4:	f7fc fc0c 	bl	80027d0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005fb8:	4874      	ldr	r0, [pc, #464]	; (800618c <cppLoop+0x984>)
 8005fba:	f7fd fc71 	bl	80038a0 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fc4:	4867      	ldr	r0, [pc, #412]	; (8006164 <cppLoop+0x95c>)
 8005fc6:	f7fc f81b 	bl	8002000 <_ZN3LED2LREaa>
		}
		break;
 8005fca:	f000 bcab 	b.w	8006924 <cppLoop+0x111c>

	case 5:
		led.fullColor('Y');
 8005fce:	2159      	movs	r1, #89	; 0x59
 8005fd0:	4864      	ldr	r0, [pc, #400]	; (8006164 <cppLoop+0x95c>)
 8005fd2:	f7fb ff59 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005fd6:	f7fb f863 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2000      	movs	r0, #0
 8005fde:	f7fb f86f 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005fe2:	486b      	ldr	r0, [pc, #428]	; (8006190 <cppLoop+0x988>)
 8005fe4:	f7fb f896 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005fe8:	2101      	movs	r1, #1
 8005fea:	2000      	movs	r0, #0
 8005fec:	f7fb f868 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8005ff0:	4868      	ldr	r0, [pc, #416]	; (8006194 <cppLoop+0x98c>)
 8005ff2:	f7fb f88f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005ff6:	485a      	ldr	r0, [pc, #360]	; (8006160 <cppLoop+0x958>)
 8005ff8:	f7fb fee2 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	bf0c      	ite	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	2300      	movne	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 848d 	beq.w	8006928 <cppLoop+0x1120>
			led.LR(-1, 1);
 800600e:	2201      	movs	r2, #1
 8006010:	f04f 31ff 	mov.w	r1, #4294967295
 8006014:	4853      	ldr	r0, [pc, #332]	; (8006164 <cppLoop+0x95c>)
 8006016:	f7fb fff3 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800601a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800601e:	f000 fdab 	bl	8006b78 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006022:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8006198 <cppLoop+0x990>
 8006026:	4855      	ldr	r0, [pc, #340]	; (800617c <cppLoop+0x974>)
 8006028:	f7fc fb69 	bl	80026fe <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800602c:	4853      	ldr	r0, [pc, #332]	; (800617c <cppLoop+0x974>)
 800602e:	f7fc fbbf 	bl	80027b0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006032:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006036:	f000 fd9f 	bl	8006b78 <HAL_Delay>

			led.fullColor('R');
 800603a:	2152      	movs	r1, #82	; 0x52
 800603c:	4849      	ldr	r0, [pc, #292]	; (8006164 <cppLoop+0x95c>)
 800603e:	f7fb ff23 	bl	8001e88 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006042:	4856      	ldr	r0, [pc, #344]	; (800619c <cppLoop+0x994>)
 8006044:	f7fb f9e2 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006048:	4854      	ldr	r0, [pc, #336]	; (800619c <cppLoop+0x994>)
 800604a:	f7fb f9a5 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 800604e:	f242 7010 	movw	r0, #10000	; 0x2710
 8006052:	f000 fd91 	bl	8006b78 <HAL_Delay>

			line_trace.stop();
 8006056:	4849      	ldr	r0, [pc, #292]	; (800617c <cppLoop+0x974>)
 8006058:	f7fc fbba 	bl	80027d0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800605c:	4950      	ldr	r1, [pc, #320]	; (80061a0 <cppLoop+0x998>)
 800605e:	4851      	ldr	r0, [pc, #324]	; (80061a4 <cppLoop+0x99c>)
 8006060:	f7fb f9f2 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 8006064:	484d      	ldr	r0, [pc, #308]	; (800619c <cppLoop+0x994>)
 8006066:	f7fb f986 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 800606a:	ec54 3b10 	vmov	r3, r4, d0
 800606e:	4618      	mov	r0, r3
 8006070:	4621      	mov	r1, r4
 8006072:	f7fa fdd1 	bl	8000c18 <__aeabi_d2f>
 8006076:	4603      	mov	r3, r0
 8006078:	61fb      	str	r3, [r7, #28]
			sd_write_float(1, &d, ADD_WRITE);
 800607a:	f107 031c 	add.w	r3, r7, #28
 800607e:	2201      	movs	r2, #1
 8006080:	4619      	mov	r1, r3
 8006082:	2001      	movs	r0, #1
 8006084:	f7fb fa02 	bl	800148c <sd_write_float>
			user_fclose();
 8006088:	f7fb f9f0 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 800608c:	2200      	movs	r2, #0
 800608e:	f04f 31ff 	mov.w	r1, #4294967295
 8006092:	4834      	ldr	r0, [pc, #208]	; (8006164 <cppLoop+0x95c>)
 8006094:	f7fb ffb4 	bl	8002000 <_ZN3LED2LREaa>
		}

		break;
 8006098:	f000 bc46 	b.w	8006928 <cppLoop+0x1120>

	case 6:
		led.fullColor('C');
 800609c:	2143      	movs	r1, #67	; 0x43
 800609e:	4831      	ldr	r0, [pc, #196]	; (8006164 <cppLoop+0x95c>)
 80060a0:	f7fb fef2 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 80060a4:	f7fa fffc 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060a8:	2100      	movs	r1, #0
 80060aa:	2000      	movs	r0, #0
 80060ac:	f7fb f808 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80060b0:	483d      	ldr	r0, [pc, #244]	; (80061a8 <cppLoop+0x9a0>)
 80060b2:	f7fb f82f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060b6:	2101      	movs	r1, #1
 80060b8:	2000      	movs	r0, #0
 80060ba:	f7fb f801 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80060be:	4827      	ldr	r0, [pc, #156]	; (800615c <cppLoop+0x954>)
 80060c0:	f7fb f828 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80060c4:	4826      	ldr	r0, [pc, #152]	; (8006160 <cppLoop+0x958>)
 80060c6:	f7fb fe7b 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8428 	beq.w	800692c <cppLoop+0x1124>
			HAL_Delay(500);
 80060dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060e0:	f000 fd4a 	bl	8006b78 <HAL_Delay>
			led.LR(-1, 1);
 80060e4:	2201      	movs	r2, #1
 80060e6:	f04f 31ff 	mov.w	r1, #4294967295
 80060ea:	481e      	ldr	r0, [pc, #120]	; (8006164 <cppLoop+0x95c>)
 80060ec:	f7fb ff88 	bl	8002000 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.07);
 80060f0:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 80061ac <cppLoop+0x9a4>
 80060f4:	4821      	ldr	r0, [pc, #132]	; (800617c <cppLoop+0x974>)
 80060f6:	f7fc fb02 	bl	80026fe <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80060fa:	4820      	ldr	r0, [pc, #128]	; (800617c <cppLoop+0x974>)
 80060fc:	f7fc fb58 	bl	80027b0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006104:	f000 fd38 	bl	8006b78 <HAL_Delay>

			led.fullColor('R');
 8006108:	2152      	movs	r1, #82	; 0x52
 800610a:	4816      	ldr	r0, [pc, #88]	; (8006164 <cppLoop+0x95c>)
 800610c:	f7fb febc 	bl	8001e88 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006110:	4822      	ldr	r0, [pc, #136]	; (800619c <cppLoop+0x994>)
 8006112:	f7fb f97b 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006116:	4821      	ldr	r0, [pc, #132]	; (800619c <cppLoop+0x994>)
 8006118:	f7fb f93e 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 800611c:	4824      	ldr	r0, [pc, #144]	; (80061b0 <cppLoop+0x9a8>)
 800611e:	f7fc fe60 	bl	8002de2 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006122:	4814      	ldr	r0, [pc, #80]	; (8006174 <cppLoop+0x96c>)
 8006124:	f7fc fc4f 	bl	80029c6 <_ZN6Logger5startEv>

			HAL_Delay(3000);
 8006128:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800612c:	f000 fd24 	bl	8006b78 <HAL_Delay>

			line_trace.stop();
 8006130:	4812      	ldr	r0, [pc, #72]	; (800617c <cppLoop+0x974>)
 8006132:	f7fc fb4d 	bl	80027d0 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006136:	480f      	ldr	r0, [pc, #60]	; (8006174 <cppLoop+0x96c>)
 8006138:	f7fc fc55 	bl	80029e6 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Pos", "dis_s2.txt", "th_s2.txt");
 800613c:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <cppLoop+0x9ac>)
 800613e:	4a1e      	ldr	r2, [pc, #120]	; (80061b8 <cppLoop+0x9b0>)
 8006140:	491e      	ldr	r1, [pc, #120]	; (80061bc <cppLoop+0x9b4>)
 8006142:	480c      	ldr	r0, [pc, #48]	; (8006174 <cppLoop+0x96c>)
 8006144:	f7fc fc1c 	bl	8002980 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 8006148:	2200      	movs	r2, #0
 800614a:	f04f 31ff 	mov.w	r1, #4294967295
 800614e:	4805      	ldr	r0, [pc, #20]	; (8006164 <cppLoop+0x95c>)
 8006150:	f7fb ff56 	bl	8002000 <_ZN3LED2LREaa>
		}

		break;
 8006154:	e3ea      	b.n	800692c <cppLoop+0x1124>
 8006156:	bf00      	nop
 8006158:	080177c8 	.word	0x080177c8
 800615c:	080177d0 	.word	0x080177d0
 8006160:	20000534 	.word	0x20000534
 8006164:	20000540 	.word	0x20000540
 8006168:	20013728 	.word	0x20013728
 800616c:	080177d8 	.word	0x080177d8
 8006170:	080177e0 	.word	0x080177e0
 8006174:	20000564 	.word	0x20000564
 8006178:	3dcccccd 	.word	0x3dcccccd
 800617c:	20013690 	.word	0x20013690
 8006180:	080177e8 	.word	0x080177e8
 8006184:	080177f4 	.word	0x080177f4
 8006188:	08017804 	.word	0x08017804
 800618c:	20013650 	.word	0x20013650
 8006190:	08017810 	.word	0x08017810
 8006194:	08017818 	.word	0x08017818
 8006198:	00000000 	.word	0x00000000
 800619c:	20013620 	.word	0x20013620
 80061a0:	08017824 	.word	0x08017824
 80061a4:	0801782c 	.word	0x0801782c
 80061a8:	08017838 	.word	0x08017838
 80061ac:	3d8f5c29 	.word	0x3d8f5c29
 80061b0:	200136f8 	.word	0x200136f8
 80061b4:	08017844 	.word	0x08017844
 80061b8:	08017850 	.word	0x08017850
 80061bc:	0801785c 	.word	0x0801785c

	case 7:
		led.fullColor('M');
 80061c0:	214d      	movs	r1, #77	; 0x4d
 80061c2:	48b7      	ldr	r0, [pc, #732]	; (80064a0 <cppLoop+0xc98>)
 80061c4:	f7fb fe60 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 80061c8:	f7fa ff6a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80061cc:	2100      	movs	r1, #0
 80061ce:	2000      	movs	r0, #0
 80061d0:	f7fa ff76 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 80061d4:	48b3      	ldr	r0, [pc, #716]	; (80064a4 <cppLoop+0xc9c>)
 80061d6:	f7fa ff9d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80061da:	2101      	movs	r1, #1
 80061dc:	2000      	movs	r0, #0
 80061de:	f7fa ff6f 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 80061e2:	48b1      	ldr	r0, [pc, #708]	; (80064a8 <cppLoop+0xca0>)
 80061e4:	f7fa ff96 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80061e8:	48b0      	ldr	r0, [pc, #704]	; (80064ac <cppLoop+0xca4>)
 80061ea:	f7fb fde9 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	bf0c      	ite	eq
 80061f4:	2301      	moveq	r3, #1
 80061f6:	2300      	movne	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f000 8398 	beq.w	8006930 <cppLoop+0x1128>
			led.LR(-1, 1);
 8006200:	2201      	movs	r2, #1
 8006202:	f04f 31ff 	mov.w	r1, #4294967295
 8006206:	48a6      	ldr	r0, [pc, #664]	; (80064a0 <cppLoop+0xc98>)
 8006208:	f7fb fefa 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800620c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006210:	f000 fcb2 	bl	8006b78 <HAL_Delay>

			led.fullColor('R');
 8006214:	2152      	movs	r1, #82	; 0x52
 8006216:	48a2      	ldr	r0, [pc, #648]	; (80064a0 <cppLoop+0xc98>)
 8006218:	f7fb fe36 	bl	8001e88 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 800621c:	eddf 0aa4 	vldr	s1, [pc, #656]	; 80064b0 <cppLoop+0xca8>
 8006220:	ed9f 0aa4 	vldr	s0, [pc, #656]	; 80064b4 <cppLoop+0xcac>
 8006224:	48a4      	ldr	r0, [pc, #656]	; (80064b8 <cppLoop+0xcb0>)
 8006226:	f7fd fad3 	bl	80037d0 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 800622a:	48a3      	ldr	r0, [pc, #652]	; (80064b8 <cppLoop+0xcb0>)
 800622c:	f7fd fb29 	bl	8003882 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 8006230:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006234:	f000 fca0 	bl	8006b78 <HAL_Delay>
			velocity_ctrl.setVelocity(0, 0);
 8006238:	eddf 0a9e 	vldr	s1, [pc, #632]	; 80064b4 <cppLoop+0xcac>
 800623c:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80064b4 <cppLoop+0xcac>
 8006240:	489d      	ldr	r0, [pc, #628]	; (80064b8 <cppLoop+0xcb0>)
 8006242:	f7fd fac5 	bl	80037d0 <_ZN12VelocityCtrl11setVelocityEff>
			HAL_Delay(100);
 8006246:	2064      	movs	r0, #100	; 0x64
 8006248:	f000 fc96 	bl	8006b78 <HAL_Delay>
			velocity_ctrl.stop();
 800624c:	489a      	ldr	r0, [pc, #616]	; (80064b8 <cppLoop+0xcb0>)
 800624e:	f7fd fb27 	bl	80038a0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006252:	2200      	movs	r2, #0
 8006254:	f04f 31ff 	mov.w	r1, #4294967295
 8006258:	4891      	ldr	r0, [pc, #580]	; (80064a0 <cppLoop+0xc98>)
 800625a:	f7fb fed1 	bl	8002000 <_ZN3LED2LREaa>
		}
		break;
 800625e:	e367      	b.n	8006930 <cppLoop+0x1128>

	case 8:
		led.fullColor('M');
 8006260:	214d      	movs	r1, #77	; 0x4d
 8006262:	488f      	ldr	r0, [pc, #572]	; (80064a0 <cppLoop+0xc98>)
 8006264:	f7fb fe10 	bl	8001e88 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006268:	f7fa ff1a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800626c:	2100      	movs	r1, #0
 800626e:	2000      	movs	r0, #0
 8006270:	f7fa ff26 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", path_following.getKxVal()*1000);
 8006274:	4891      	ldr	r0, [pc, #580]	; (80064bc <cppLoop+0xcb4>)
 8006276:	f7fc feab 	bl	8002fd0 <_ZN13PathFollowing8getKxValEv>
 800627a:	ec51 0b10 	vmov	r0, r1, d0
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <cppLoop+0xcb8>)
 8006284:	f7fa f9d0 	bl	8000628 <__aeabi_dmul>
 8006288:	4603      	mov	r3, r0
 800628a:	460c      	mov	r4, r1
 800628c:	461a      	mov	r2, r3
 800628e:	4623      	mov	r3, r4
 8006290:	488c      	ldr	r0, [pc, #560]	; (80064c4 <cppLoop+0xcbc>)
 8006292:	f7fa ff3f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006296:	2101      	movs	r1, #1
 8006298:	2000      	movs	r0, #0
 800629a:	f7fa ff11 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", path_following.getKyVal()*1000, path_following.getKtVal()*1000);
 800629e:	4887      	ldr	r0, [pc, #540]	; (80064bc <cppLoop+0xcb4>)
 80062a0:	f7fc feaa 	bl	8002ff8 <_ZN13PathFollowing8getKyValEv>
 80062a4:	ec51 0b10 	vmov	r0, r1, d0
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	4b84      	ldr	r3, [pc, #528]	; (80064c0 <cppLoop+0xcb8>)
 80062ae:	f7fa f9bb 	bl	8000628 <__aeabi_dmul>
 80062b2:	4603      	mov	r3, r0
 80062b4:	460c      	mov	r4, r1
 80062b6:	461d      	mov	r5, r3
 80062b8:	4626      	mov	r6, r4
 80062ba:	4880      	ldr	r0, [pc, #512]	; (80064bc <cppLoop+0xcb4>)
 80062bc:	f7fc feb0 	bl	8003020 <_ZN13PathFollowing8getKtValEv>
 80062c0:	ec51 0b10 	vmov	r0, r1, d0
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	4b7d      	ldr	r3, [pc, #500]	; (80064c0 <cppLoop+0xcb8>)
 80062ca:	f7fa f9ad 	bl	8000628 <__aeabi_dmul>
 80062ce:	4603      	mov	r3, r0
 80062d0:	460c      	mov	r4, r1
 80062d2:	e9cd 3400 	strd	r3, r4, [sp]
 80062d6:	462a      	mov	r2, r5
 80062d8:	4633      	mov	r3, r6
 80062da:	487b      	ldr	r0, [pc, #492]	; (80064c8 <cppLoop+0xcc0>)
 80062dc:	f7fa ff1a 	bl	8001114 <lcd_printf>

		static double adj_kx = path_following.getKxVal();
 80062e0:	4b7a      	ldr	r3, [pc, #488]	; (80064cc <cppLoop+0xcc4>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f3bf 8f5b 	dmb	ish
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bf0c      	ite	eq
 80062f2:	2301      	moveq	r3, #1
 80062f4:	2300      	movne	r3, #0
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d017      	beq.n	800632c <cppLoop+0xb24>
 80062fc:	4873      	ldr	r0, [pc, #460]	; (80064cc <cppLoop+0xcc4>)
 80062fe:	f00b f938 	bl	8011572 <__cxa_guard_acquire>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00c      	beq.n	800632c <cppLoop+0xb24>
 8006312:	486a      	ldr	r0, [pc, #424]	; (80064bc <cppLoop+0xcb4>)
 8006314:	f7fc fe5c 	bl	8002fd0 <_ZN13PathFollowing8getKxValEv>
 8006318:	eeb0 7a40 	vmov.f32	s14, s0
 800631c:	eef0 7a60 	vmov.f32	s15, s1
 8006320:	4b6b      	ldr	r3, [pc, #428]	; (80064d0 <cppLoop+0xcc8>)
 8006322:	ed83 7b00 	vstr	d7, [r3]
 8006326:	4869      	ldr	r0, [pc, #420]	; (80064cc <cppLoop+0xcc4>)
 8006328:	f00b f92f 	bl	801158a <__cxa_guard_release>
		static double adj_ky = path_following.getKyVal();
 800632c:	4b69      	ldr	r3, [pc, #420]	; (80064d4 <cppLoop+0xccc>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	f3bf 8f5b 	dmb	ish
 8006334:	b2db      	uxtb	r3, r3
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <cppLoop+0xb70>
 8006348:	4862      	ldr	r0, [pc, #392]	; (80064d4 <cppLoop+0xccc>)
 800634a:	f00b f912 	bl	8011572 <__cxa_guard_acquire>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	bf14      	ite	ne
 8006354:	2301      	movne	r3, #1
 8006356:	2300      	moveq	r3, #0
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <cppLoop+0xb70>
 800635e:	4857      	ldr	r0, [pc, #348]	; (80064bc <cppLoop+0xcb4>)
 8006360:	f7fc fe4a 	bl	8002ff8 <_ZN13PathFollowing8getKyValEv>
 8006364:	eeb0 7a40 	vmov.f32	s14, s0
 8006368:	eef0 7a60 	vmov.f32	s15, s1
 800636c:	4b5a      	ldr	r3, [pc, #360]	; (80064d8 <cppLoop+0xcd0>)
 800636e:	ed83 7b00 	vstr	d7, [r3]
 8006372:	4858      	ldr	r0, [pc, #352]	; (80064d4 <cppLoop+0xccc>)
 8006374:	f00b f909 	bl	801158a <__cxa_guard_release>
		static double adj_kt = path_following.getKtVal();
 8006378:	4b58      	ldr	r3, [pc, #352]	; (80064dc <cppLoop+0xcd4>)
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	f3bf 8f5b 	dmb	ish
 8006380:	b2db      	uxtb	r3, r3
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	bf0c      	ite	eq
 800638a:	2301      	moveq	r3, #1
 800638c:	2300      	movne	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <cppLoop+0xbbc>
 8006394:	4851      	ldr	r0, [pc, #324]	; (80064dc <cppLoop+0xcd4>)
 8006396:	f00b f8ec 	bl	8011572 <__cxa_guard_acquire>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	bf14      	ite	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	2300      	moveq	r3, #0
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d00c      	beq.n	80063c4 <cppLoop+0xbbc>
 80063aa:	4844      	ldr	r0, [pc, #272]	; (80064bc <cppLoop+0xcb4>)
 80063ac:	f7fc fe38 	bl	8003020 <_ZN13PathFollowing8getKtValEv>
 80063b0:	eeb0 7a40 	vmov.f32	s14, s0
 80063b4:	eef0 7a60 	vmov.f32	s15, s1
 80063b8:	4b49      	ldr	r3, [pc, #292]	; (80064e0 <cppLoop+0xcd8>)
 80063ba:	ed83 7b00 	vstr	d7, [r3]
 80063be:	4847      	ldr	r0, [pc, #284]	; (80064dc <cppLoop+0xcd4>)
 80063c0:	f00b f8e3 	bl	801158a <__cxa_guard_release>

		if(joy_stick.getValue() == JOY_U){
 80063c4:	4839      	ldr	r0, [pc, #228]	; (80064ac <cppLoop+0xca4>)
 80063c6:	f7fb fcfb 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b08      	cmp	r3, #8
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d021      	beq.n	800641e <cppLoop+0xc16>
			led.LR(-1, 1);
 80063da:	2201      	movs	r2, #1
 80063dc:	f04f 31ff 	mov.w	r1, #4294967295
 80063e0:	482f      	ldr	r0, [pc, #188]	; (80064a0 <cppLoop+0xc98>)
 80063e2:	f7fb fe0d 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80063e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80063ea:	f000 fbc5 	bl	8006b78 <HAL_Delay>

			selector++;
 80063ee:	4b3d      	ldr	r3, [pc, #244]	; (80064e4 <cppLoop+0xcdc>)
 80063f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3301      	adds	r3, #1
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	b21a      	sxth	r2, r3
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <cppLoop+0xcdc>)
 80063fe:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8006400:	4b38      	ldr	r3, [pc, #224]	; (80064e4 <cppLoop+0xcdc>)
 8006402:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006406:	2b02      	cmp	r3, #2
 8006408:	dd02      	ble.n	8006410 <cppLoop+0xc08>
 800640a:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <cppLoop+0xcdc>)
 800640c:	2200      	movs	r2, #0
 800640e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	f04f 31ff 	mov.w	r1, #4294967295
 8006416:	4822      	ldr	r0, [pc, #136]	; (80064a0 <cppLoop+0xc98>)
 8006418:	f7fb fdf2 	bl	8002000 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}


		break;
 800641c:	e28a      	b.n	8006934 <cppLoop+0x112c>
		else if(joy_stick.getValue() == JOY_R){
 800641e:	4823      	ldr	r0, [pc, #140]	; (80064ac <cppLoop+0xca4>)
 8006420:	f7fb fcce 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8006424:	4603      	mov	r3, r0
 8006426:	2b10      	cmp	r3, #16
 8006428:	bf0c      	ite	eq
 800642a:	2301      	moveq	r3, #1
 800642c:	2300      	movne	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b00      	cmp	r3, #0
 8006432:	d071      	beq.n	8006518 <cppLoop+0xd10>
			led.LR(-1, 1);
 8006434:	2201      	movs	r2, #1
 8006436:	f04f 31ff 	mov.w	r1, #4294967295
 800643a:	4819      	ldr	r0, [pc, #100]	; (80064a0 <cppLoop+0xc98>)
 800643c:	f7fb fde0 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8006440:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006444:	f000 fb98 	bl	8006b78 <HAL_Delay>
			if(selector == 0){
 8006448:	4b26      	ldr	r3, [pc, #152]	; (80064e4 <cppLoop+0xcdc>)
 800644a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10d      	bne.n	800646e <cppLoop+0xc66>
				adj_kx = adj_kx + 0.00001;
 8006452:	4b1f      	ldr	r3, [pc, #124]	; (80064d0 <cppLoop+0xcc8>)
 8006454:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006458:	a30f      	add	r3, pc, #60	; (adr r3, 8006498 <cppLoop+0xc90>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7f9 ff2d 	bl	80002bc <__adddf3>
 8006462:	4603      	mov	r3, r0
 8006464:	460c      	mov	r4, r1
 8006466:	4a1a      	ldr	r2, [pc, #104]	; (80064d0 <cppLoop+0xcc8>)
 8006468:	e9c2 3400 	strd	r3, r4, [r2]
 800646c:	e049      	b.n	8006502 <cppLoop+0xcfa>
			else if(selector == 1){
 800646e:	4b1d      	ldr	r3, [pc, #116]	; (80064e4 <cppLoop+0xcdc>)
 8006470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d137      	bne.n	80064e8 <cppLoop+0xce0>
				adj_ky = adj_ky + 0.00001;
 8006478:	4b17      	ldr	r3, [pc, #92]	; (80064d8 <cppLoop+0xcd0>)
 800647a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800647e:	a306      	add	r3, pc, #24	; (adr r3, 8006498 <cppLoop+0xc90>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f7f9 ff1a 	bl	80002bc <__adddf3>
 8006488:	4603      	mov	r3, r0
 800648a:	460c      	mov	r4, r1
 800648c:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <cppLoop+0xcd0>)
 800648e:	e9c2 3400 	strd	r3, r4, [r2]
 8006492:	e036      	b.n	8006502 <cppLoop+0xcfa>
 8006494:	f3af 8000 	nop.w
 8006498:	88e368f1 	.word	0x88e368f1
 800649c:	3ee4f8b5 	.word	0x3ee4f8b5
 80064a0:	20000540 	.word	0x20000540
 80064a4:	08017860 	.word	0x08017860
 80064a8:	0801786c 	.word	0x0801786c
 80064ac:	20000534 	.word	0x20000534
 80064b0:	3fc8f5c3 	.word	0x3fc8f5c3
 80064b4:	00000000 	.word	0x00000000
 80064b8:	20013650 	.word	0x20013650
 80064bc:	20013938 	.word	0x20013938
 80064c0:	408f4000 	.word	0x408f4000
 80064c4:	0801776c 	.word	0x0801776c
 80064c8:	08017778 	.word	0x08017778
 80064cc:	2002b0b0 	.word	0x2002b0b0
 80064d0:	2002b0a8 	.word	0x2002b0a8
 80064d4:	2002b0c0 	.word	0x2002b0c0
 80064d8:	2002b0b8 	.word	0x2002b0b8
 80064dc:	2002b0d0 	.word	0x2002b0d0
 80064e0:	2002b0c8 	.word	0x2002b0c8
 80064e4:	2002b070 	.word	0x2002b070
				adj_kt = adj_kt + 0.00001;
 80064e8:	4bb3      	ldr	r3, [pc, #716]	; (80067b8 <cppLoop+0xfb0>)
 80064ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064ee:	a3aa      	add	r3, pc, #680	; (adr r3, 8006798 <cppLoop+0xf90>)
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7f9 fee2 	bl	80002bc <__adddf3>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	4aae      	ldr	r2, [pc, #696]	; (80067b8 <cppLoop+0xfb0>)
 80064fe:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 8006502:	2152      	movs	r1, #82	; 0x52
 8006504:	48ad      	ldr	r0, [pc, #692]	; (80067bc <cppLoop+0xfb4>)
 8006506:	f7fb fcbf 	bl	8001e88 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800650a:	2200      	movs	r2, #0
 800650c:	f04f 31ff 	mov.w	r1, #4294967295
 8006510:	48aa      	ldr	r0, [pc, #680]	; (80067bc <cppLoop+0xfb4>)
 8006512:	f7fb fd75 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8006516:	e20d      	b.n	8006934 <cppLoop+0x112c>
		else if(joy_stick.getValue() == JOY_L){
 8006518:	48a9      	ldr	r0, [pc, #676]	; (80067c0 <cppLoop+0xfb8>)
 800651a:	f7fb fc51 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 800651e:	4603      	mov	r3, r0
 8006520:	2b01      	cmp	r3, #1
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d047      	beq.n	80065be <cppLoop+0xdb6>
			led.LR(-1, 1);
 800652e:	2201      	movs	r2, #1
 8006530:	f04f 31ff 	mov.w	r1, #4294967295
 8006534:	48a1      	ldr	r0, [pc, #644]	; (80067bc <cppLoop+0xfb4>)
 8006536:	f7fb fd63 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800653a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800653e:	f000 fb1b 	bl	8006b78 <HAL_Delay>
			if(selector == 0){
 8006542:	4ba0      	ldr	r3, [pc, #640]	; (80067c4 <cppLoop+0xfbc>)
 8006544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10d      	bne.n	8006568 <cppLoop+0xd60>
				adj_kx = adj_kx - 0.00001;
 800654c:	4b9e      	ldr	r3, [pc, #632]	; (80067c8 <cppLoop+0xfc0>)
 800654e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006552:	a391      	add	r3, pc, #580	; (adr r3, 8006798 <cppLoop+0xf90>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7f9 feae 	bl	80002b8 <__aeabi_dsub>
 800655c:	4603      	mov	r3, r0
 800655e:	460c      	mov	r4, r1
 8006560:	4a99      	ldr	r2, [pc, #612]	; (80067c8 <cppLoop+0xfc0>)
 8006562:	e9c2 3400 	strd	r3, r4, [r2]
 8006566:	e01f      	b.n	80065a8 <cppLoop+0xda0>
			else if(selector == 1){
 8006568:	4b96      	ldr	r3, [pc, #600]	; (80067c4 <cppLoop+0xfbc>)
 800656a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d10d      	bne.n	800658e <cppLoop+0xd86>
				adj_ky = adj_ky - 0.00001;
 8006572:	4b96      	ldr	r3, [pc, #600]	; (80067cc <cppLoop+0xfc4>)
 8006574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006578:	a387      	add	r3, pc, #540	; (adr r3, 8006798 <cppLoop+0xf90>)
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	f7f9 fe9b 	bl	80002b8 <__aeabi_dsub>
 8006582:	4603      	mov	r3, r0
 8006584:	460c      	mov	r4, r1
 8006586:	4a91      	ldr	r2, [pc, #580]	; (80067cc <cppLoop+0xfc4>)
 8006588:	e9c2 3400 	strd	r3, r4, [r2]
 800658c:	e00c      	b.n	80065a8 <cppLoop+0xda0>
				adj_kt = adj_kt - 0.00001;
 800658e:	4b8a      	ldr	r3, [pc, #552]	; (80067b8 <cppLoop+0xfb0>)
 8006590:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006594:	a380      	add	r3, pc, #512	; (adr r3, 8006798 <cppLoop+0xf90>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe8d 	bl	80002b8 <__aeabi_dsub>
 800659e:	4603      	mov	r3, r0
 80065a0:	460c      	mov	r4, r1
 80065a2:	4a85      	ldr	r2, [pc, #532]	; (80067b8 <cppLoop+0xfb0>)
 80065a4:	e9c2 3400 	strd	r3, r4, [r2]
			led.fullColor('R');
 80065a8:	2152      	movs	r1, #82	; 0x52
 80065aa:	4884      	ldr	r0, [pc, #528]	; (80067bc <cppLoop+0xfb4>)
 80065ac:	f7fb fc6c 	bl	8001e88 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80065b0:	2200      	movs	r2, #0
 80065b2:	f04f 31ff 	mov.w	r1, #4294967295
 80065b6:	4881      	ldr	r0, [pc, #516]	; (80067bc <cppLoop+0xfb4>)
 80065b8:	f7fb fd22 	bl	8002000 <_ZN3LED2LREaa>
		break;
 80065bc:	e1ba      	b.n	8006934 <cppLoop+0x112c>
		else if(joy_stick.getValue() == JOY_D){
 80065be:	4880      	ldr	r0, [pc, #512]	; (80067c0 <cppLoop+0xfb8>)
 80065c0:	f7fb fbfe 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d048      	beq.n	8006666 <cppLoop+0xe5e>
			led.LR(-1, 1);
 80065d4:	2201      	movs	r2, #1
 80065d6:	f04f 31ff 	mov.w	r1, #4294967295
 80065da:	4878      	ldr	r0, [pc, #480]	; (80067bc <cppLoop+0xfb4>)
 80065dc:	f7fb fd10 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80065e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80065e4:	f000 fac8 	bl	8006b78 <HAL_Delay>
			sd_read_array_double("Params", "kx.txt", 1, &temp_kx);
 80065e8:	f107 0310 	add.w	r3, r7, #16
 80065ec:	2201      	movs	r2, #1
 80065ee:	4978      	ldr	r1, [pc, #480]	; (80067d0 <cppLoop+0xfc8>)
 80065f0:	4878      	ldr	r0, [pc, #480]	; (80067d4 <cppLoop+0xfcc>)
 80065f2:	f7fb f865 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "ky.txt", 1, &temp_ky);
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	2201      	movs	r2, #1
 80065fc:	4976      	ldr	r1, [pc, #472]	; (80067d8 <cppLoop+0xfd0>)
 80065fe:	4875      	ldr	r0, [pc, #468]	; (80067d4 <cppLoop+0xfcc>)
 8006600:	f7fb f85e 	bl	80016c0 <sd_read_array_double>
			sd_read_array_double("Params", "kt.txt", 1, &temp_kt);
 8006604:	463b      	mov	r3, r7
 8006606:	2201      	movs	r2, #1
 8006608:	4974      	ldr	r1, [pc, #464]	; (80067dc <cppLoop+0xfd4>)
 800660a:	4872      	ldr	r0, [pc, #456]	; (80067d4 <cppLoop+0xfcc>)
 800660c:	f7fb f858 	bl	80016c0 <sd_read_array_double>
			path_following.setGain(temp_kx, temp_ky, temp_kt);
 8006610:	ed97 7b04 	vldr	d7, [r7, #16]
 8006614:	ed97 6b02 	vldr	d6, [r7, #8]
 8006618:	ed97 5b00 	vldr	d5, [r7]
 800661c:	eeb0 2a45 	vmov.f32	s4, s10
 8006620:	eef0 2a65 	vmov.f32	s5, s11
 8006624:	eeb0 1a46 	vmov.f32	s2, s12
 8006628:	eef0 1a66 	vmov.f32	s3, s13
 800662c:	eeb0 0a47 	vmov.f32	s0, s14
 8006630:	eef0 0a67 	vmov.f32	s1, s15
 8006634:	486a      	ldr	r0, [pc, #424]	; (80067e0 <cppLoop+0xfd8>)
 8006636:	f7fc fcab 	bl	8002f90 <_ZN13PathFollowing7setGainEddd>
			adj_kx = temp_kx;
 800663a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800663e:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <cppLoop+0xfc0>)
 8006640:	e9c2 3400 	strd	r3, r4, [r2]
			adj_ky = temp_ky;
 8006644:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006648:	4a60      	ldr	r2, [pc, #384]	; (80067cc <cppLoop+0xfc4>)
 800664a:	e9c2 3400 	strd	r3, r4, [r2]
			adj_kt = temp_kt;
 800664e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006652:	4a59      	ldr	r2, [pc, #356]	; (80067b8 <cppLoop+0xfb0>)
 8006654:	e9c2 3400 	strd	r3, r4, [r2]
			led.LR(-1, 0);
 8006658:	2200      	movs	r2, #0
 800665a:	f04f 31ff 	mov.w	r1, #4294967295
 800665e:	4857      	ldr	r0, [pc, #348]	; (80067bc <cppLoop+0xfb4>)
 8006660:	f7fb fcce 	bl	8002000 <_ZN3LED2LREaa>
		break;
 8006664:	e166      	b.n	8006934 <cppLoop+0x112c>
		else if(joy_stick.getValue() == JOY_C){
 8006666:	4856      	ldr	r0, [pc, #344]	; (80067c0 <cppLoop+0xfb8>)
 8006668:	f7fb fbaa 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 800666c:	4603      	mov	r3, r0
 800666e:	2b02      	cmp	r3, #2
 8006670:	bf0c      	ite	eq
 8006672:	2301      	moveq	r3, #1
 8006674:	2300      	movne	r3, #0
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 815b 	beq.w	8006934 <cppLoop+0x112c>
			led.LR(-1, 1);
 800667e:	2201      	movs	r2, #1
 8006680:	f04f 31ff 	mov.w	r1, #4294967295
 8006684:	484d      	ldr	r0, [pc, #308]	; (80067bc <cppLoop+0xfb4>)
 8006686:	f7fb fcbb 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800668a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800668e:	f000 fa73 	bl	8006b78 <HAL_Delay>
			sd_write_array_double("Params", "kx.txt", 1, &adj_kx, OVER_WRITE);
 8006692:	2300      	movs	r3, #0
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4b4c      	ldr	r3, [pc, #304]	; (80067c8 <cppLoop+0xfc0>)
 8006698:	2201      	movs	r2, #1
 800669a:	494d      	ldr	r1, [pc, #308]	; (80067d0 <cppLoop+0xfc8>)
 800669c:	484d      	ldr	r0, [pc, #308]	; (80067d4 <cppLoop+0xfcc>)
 800669e:	f7fa ffad 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "ky.txt", 1, &adj_ky, OVER_WRITE);
 80066a2:	2300      	movs	r3, #0
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	4b49      	ldr	r3, [pc, #292]	; (80067cc <cppLoop+0xfc4>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	494b      	ldr	r1, [pc, #300]	; (80067d8 <cppLoop+0xfd0>)
 80066ac:	4849      	ldr	r0, [pc, #292]	; (80067d4 <cppLoop+0xfcc>)
 80066ae:	f7fa ffa5 	bl	80015fc <sd_write_array_double>
			sd_write_array_double("Params", "kt.txt", 1, &adj_kt, OVER_WRITE);
 80066b2:	2300      	movs	r3, #0
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4b40      	ldr	r3, [pc, #256]	; (80067b8 <cppLoop+0xfb0>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	4948      	ldr	r1, [pc, #288]	; (80067dc <cppLoop+0xfd4>)
 80066bc:	4845      	ldr	r0, [pc, #276]	; (80067d4 <cppLoop+0xfcc>)
 80066be:	f7fa ff9d 	bl	80015fc <sd_write_array_double>
			path_following.setGain(adj_kx, adj_ky, adj_kt);
 80066c2:	4b41      	ldr	r3, [pc, #260]	; (80067c8 <cppLoop+0xfc0>)
 80066c4:	ed93 7b00 	vldr	d7, [r3]
 80066c8:	4b40      	ldr	r3, [pc, #256]	; (80067cc <cppLoop+0xfc4>)
 80066ca:	ed93 6b00 	vldr	d6, [r3]
 80066ce:	4b3a      	ldr	r3, [pc, #232]	; (80067b8 <cppLoop+0xfb0>)
 80066d0:	ed93 5b00 	vldr	d5, [r3]
 80066d4:	eeb0 2a45 	vmov.f32	s4, s10
 80066d8:	eef0 2a65 	vmov.f32	s5, s11
 80066dc:	eeb0 1a46 	vmov.f32	s2, s12
 80066e0:	eef0 1a66 	vmov.f32	s3, s13
 80066e4:	eeb0 0a47 	vmov.f32	s0, s14
 80066e8:	eef0 0a67 	vmov.f32	s1, s15
 80066ec:	483c      	ldr	r0, [pc, #240]	; (80067e0 <cppLoop+0xfd8>)
 80066ee:	f7fc fc4f 	bl	8002f90 <_ZN13PathFollowing7setGainEddd>
			led.LR(-1, 0);
 80066f2:	2200      	movs	r2, #0
 80066f4:	f04f 31ff 	mov.w	r1, #4294967295
 80066f8:	4830      	ldr	r0, [pc, #192]	; (80067bc <cppLoop+0xfb4>)
 80066fa:	f7fb fc81 	bl	8002000 <_ZN3LED2LREaa>
		break;
 80066fe:	e119      	b.n	8006934 <cppLoop+0x112c>

	case 9:
		lcd_clear();
 8006700:	f7fa fcce 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006704:	2100      	movs	r1, #0
 8006706:	2000      	movs	r0, #0
 8006708:	f7fa fcda 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 800670c:	4835      	ldr	r0, [pc, #212]	; (80067e4 <cppLoop+0xfdc>)
 800670e:	f7fa fd01 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006712:	2101      	movs	r1, #1
 8006714:	2000      	movs	r0, #0
 8006716:	f7fa fcd3 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 800671a:	4833      	ldr	r0, [pc, #204]	; (80067e8 <cppLoop+0xfe0>)
 800671c:	f7fa fcfa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006720:	4827      	ldr	r0, [pc, #156]	; (80067c0 <cppLoop+0xfb8>)
 8006722:	f7fb fb4d 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8006726:	4603      	mov	r3, r0
 8006728:	2b02      	cmp	r3, #2
 800672a:	bf0c      	ite	eq
 800672c:	2301      	moveq	r3, #1
 800672e:	2300      	movne	r3, #0
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8100 	beq.w	8006938 <cppLoop+0x1130>
			HAL_Delay(500);
 8006738:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800673c:	f000 fa1c 	bl	8006b78 <HAL_Delay>
			led.LR(-1, 1);
 8006740:	2201      	movs	r2, #1
 8006742:	f04f 31ff 	mov.w	r1, #4294967295
 8006746:	481d      	ldr	r0, [pc, #116]	; (80067bc <cppLoop+0xfb4>)
 8006748:	f7fb fc5a 	bl	8002000 <_ZN3LED2LREaa>

			logger.start();
 800674c:	4827      	ldr	r0, [pc, #156]	; (80067ec <cppLoop+0xfe4>)
 800674e:	f7fc f93a 	bl	80029c6 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8006752:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80067a0 <cppLoop+0xf98>
 8006756:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80067a8 <cppLoop+0xfa0>
 800675a:	4825      	ldr	r0, [pc, #148]	; (80067f0 <cppLoop+0xfe8>)
 800675c:	f7fc f9c6 	bl	8002aec <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8006760:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006764:	f000 fa08 	bl	8006b78 <HAL_Delay>

			logger.stop();
 8006768:	4820      	ldr	r0, [pc, #128]	; (80067ec <cppLoop+0xfe4>)
 800676a:	f7fc f93c 	bl	80029e6 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 800676e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80067b0 <cppLoop+0xfa8>
 8006772:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80067b0 <cppLoop+0xfa8>
 8006776:	481e      	ldr	r0, [pc, #120]	; (80067f0 <cppLoop+0xfe8>)
 8006778:	f7fc f9b8 	bl	8002aec <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 800677c:	4a1d      	ldr	r2, [pc, #116]	; (80067f4 <cppLoop+0xfec>)
 800677e:	491e      	ldr	r1, [pc, #120]	; (80067f8 <cppLoop+0xff0>)
 8006780:	481a      	ldr	r0, [pc, #104]	; (80067ec <cppLoop+0xfe4>)
 8006782:	f7fc f8e9 	bl	8002958 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006786:	2200      	movs	r2, #0
 8006788:	f04f 31ff 	mov.w	r1, #4294967295
 800678c:	480b      	ldr	r0, [pc, #44]	; (80067bc <cppLoop+0xfb4>)
 800678e:	f7fb fc37 	bl	8002000 <_ZN3LED2LREaa>
		}
		break;
 8006792:	e0d1      	b.n	8006938 <cppLoop+0x1130>
 8006794:	f3af 8000 	nop.w
 8006798:	88e368f1 	.word	0x88e368f1
 800679c:	3ee4f8b5 	.word	0x3ee4f8b5
 80067a0:	33333333 	.word	0x33333333
 80067a4:	bfd33333 	.word	0xbfd33333
 80067a8:	33333333 	.word	0x33333333
 80067ac:	3fd33333 	.word	0x3fd33333
	...
 80067b8:	2002b0c8 	.word	0x2002b0c8
 80067bc:	20000540 	.word	0x20000540
 80067c0:	20000534 	.word	0x20000534
 80067c4:	2002b070 	.word	0x2002b070
 80067c8:	2002b0a8 	.word	0x2002b0a8
 80067cc:	2002b0b8 	.word	0x2002b0b8
 80067d0:	08017874 	.word	0x08017874
 80067d4:	08017794 	.word	0x08017794
 80067d8:	0801787c 	.word	0x0801787c
 80067dc:	08017884 	.word	0x08017884
 80067e0:	20013938 	.word	0x20013938
 80067e4:	0801788c 	.word	0x0801788c
 80067e8:	080177d0 	.word	0x080177d0
 80067ec:	20000564 	.word	0x20000564
 80067f0:	2000053c 	.word	0x2000053c
 80067f4:	08017894 	.word	0x08017894
 80067f8:	080178a0 	.word	0x080178a0

	case 10:
		lcd_clear();
 80067fc:	f7fa fc50 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006800:	2100      	movs	r1, #0
 8006802:	2000      	movs	r0, #0
 8006804:	f7fa fc5c 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8006808:	4851      	ldr	r0, [pc, #324]	; (8006950 <cppLoop+0x1148>)
 800680a:	f7fa fc83 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800680e:	2101      	movs	r1, #1
 8006810:	2000      	movs	r0, #0
 8006812:	f7fa fc55 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8006816:	484f      	ldr	r0, [pc, #316]	; (8006954 <cppLoop+0x114c>)
 8006818:	f7fa fc7c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800681c:	484e      	ldr	r0, [pc, #312]	; (8006958 <cppLoop+0x1150>)
 800681e:	f7fb facf 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 8006822:	4603      	mov	r3, r0
 8006824:	2b02      	cmp	r3, #2
 8006826:	bf0c      	ite	eq
 8006828:	2301      	moveq	r3, #1
 800682a:	2300      	movne	r3, #0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 8084 	beq.w	800693c <cppLoop+0x1134>
			HAL_Delay(500);
 8006834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006838:	f000 f99e 	bl	8006b78 <HAL_Delay>
			led.LR(-1, 1);
 800683c:	2201      	movs	r2, #1
 800683e:	f04f 31ff 	mov.w	r1, #4294967295
 8006842:	4846      	ldr	r0, [pc, #280]	; (800695c <cppLoop+0x1154>)
 8006844:	f7fb fbdc 	bl	8002000 <_ZN3LED2LREaa>

			logger.start();
 8006848:	4845      	ldr	r0, [pc, #276]	; (8006960 <cppLoop+0x1158>)
 800684a:	f7fc f8bc 	bl	80029c6 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800684e:	4845      	ldr	r0, [pc, #276]	; (8006964 <cppLoop+0x115c>)
 8006850:	f7fd f817 	bl	8003882 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 1);
 8006854:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006858:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8006968 <cppLoop+0x1160>
 800685c:	4841      	ldr	r0, [pc, #260]	; (8006964 <cppLoop+0x115c>)
 800685e:	f7fc ffb7 	bl	80037d0 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8006862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006866:	f000 f987 	bl	8006b78 <HAL_Delay>

			logger.stop();
 800686a:	483d      	ldr	r0, [pc, #244]	; (8006960 <cppLoop+0x1158>)
 800686c:	f7fc f8bb 	bl	80029e6 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8006870:	483c      	ldr	r0, [pc, #240]	; (8006964 <cppLoop+0x115c>)
 8006872:	f7fd f815 	bl	80038a0 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8006876:	4a3d      	ldr	r2, [pc, #244]	; (800696c <cppLoop+0x1164>)
 8006878:	493d      	ldr	r1, [pc, #244]	; (8006970 <cppLoop+0x1168>)
 800687a:	4839      	ldr	r0, [pc, #228]	; (8006960 <cppLoop+0x1158>)
 800687c:	f7fc f86c 	bl	8002958 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8006880:	2200      	movs	r2, #0
 8006882:	f04f 31ff 	mov.w	r1, #4294967295
 8006886:	4835      	ldr	r0, [pc, #212]	; (800695c <cppLoop+0x1154>)
 8006888:	f7fb fbba 	bl	8002000 <_ZN3LED2LREaa>
		}

		break;
 800688c:	e056      	b.n	800693c <cppLoop+0x1134>

	case 11:
		lcd_clear();
 800688e:	f7fa fc07 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006892:	2100      	movs	r1, #0
 8006894:	2000      	movs	r0, #0
 8006896:	f7fa fc13 	bl	80010c0 <lcd_locate>
		lcd_printf("Velocity");
 800689a:	4836      	ldr	r0, [pc, #216]	; (8006974 <cppLoop+0x116c>)
 800689c:	f7fa fc3a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80068a0:	2101      	movs	r1, #1
 80068a2:	2000      	movs	r0, #0
 80068a4:	f7fa fc0c 	bl	80010c0 <lcd_locate>
		lcd_printf("Test");
 80068a8:	4833      	ldr	r0, [pc, #204]	; (8006978 <cppLoop+0x1170>)
 80068aa:	f7fa fc33 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80068ae:	482a      	ldr	r0, [pc, #168]	; (8006958 <cppLoop+0x1150>)
 80068b0:	f7fb fa86 	bl	8001dc0 <_ZN8JoyStick8getValueEv>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	bf0c      	ite	eq
 80068ba:	2301      	moveq	r3, #1
 80068bc:	2300      	movne	r3, #0
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d03d      	beq.n	8006940 <cppLoop+0x1138>
			led.LR(-1, 1);
 80068c4:	2201      	movs	r2, #1
 80068c6:	f04f 31ff 	mov.w	r1, #4294967295
 80068ca:	4824      	ldr	r0, [pc, #144]	; (800695c <cppLoop+0x1154>)
 80068cc:	f7fb fb98 	bl	8002000 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80068d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068d4:	f000 f950 	bl	8006b78 <HAL_Delay>

			led.fullColor('R');
 80068d8:	2152      	movs	r1, #82	; 0x52
 80068da:	4820      	ldr	r0, [pc, #128]	; (800695c <cppLoop+0x1154>)
 80068dc:	f7fb fad4 	bl	8001e88 <_ZN3LED9fullColorEc>
			velocity_ctrl.setVelocity(0, 1.57);
 80068e0:	eddf 0a26 	vldr	s1, [pc, #152]	; 800697c <cppLoop+0x1174>
 80068e4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8006968 <cppLoop+0x1160>
 80068e8:	481e      	ldr	r0, [pc, #120]	; (8006964 <cppLoop+0x115c>)
 80068ea:	f7fc ff71 	bl	80037d0 <_ZN12VelocityCtrl11setVelocityEff>
			velocity_ctrl.start();
 80068ee:	481d      	ldr	r0, [pc, #116]	; (8006964 <cppLoop+0x115c>)
 80068f0:	f7fc ffc7 	bl	8003882 <_ZN12VelocityCtrl5startEv>

			HAL_Delay(1000);
 80068f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068f8:	f000 f93e 	bl	8006b78 <HAL_Delay>

			velocity_ctrl.stop();
 80068fc:	4819      	ldr	r0, [pc, #100]	; (8006964 <cppLoop+0x115c>)
 80068fe:	f7fc ffcf 	bl	80038a0 <_ZN12VelocityCtrl4stopEv>

			led.LR(-1, 0);
 8006902:	2200      	movs	r2, #0
 8006904:	f04f 31ff 	mov.w	r1, #4294967295
 8006908:	4814      	ldr	r0, [pc, #80]	; (800695c <cppLoop+0x1154>)
 800690a:	f7fb fb79 	bl	8002000 <_ZN3LED2LREaa>
		}
		break;
 800690e:	e017      	b.n	8006940 <cppLoop+0x1138>
	case 15:

		break;

	default:
		break;
 8006910:	bf00      	nop
 8006912:	e016      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006914:	bf00      	nop
 8006916:	e014      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006918:	bf00      	nop
 800691a:	e012      	b.n	8006942 <cppLoop+0x113a>
		break;
 800691c:	bf00      	nop
 800691e:	e010      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006920:	bf00      	nop
 8006922:	e00e      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006924:	bf00      	nop
 8006926:	e00c      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006928:	bf00      	nop
 800692a:	e00a      	b.n	8006942 <cppLoop+0x113a>
		break;
 800692c:	bf00      	nop
 800692e:	e008      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006930:	bf00      	nop
 8006932:	e006      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006934:	bf00      	nop
 8006936:	e004      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006938:	bf00      	nop
 800693a:	e002      	b.n	8006942 <cppLoop+0x113a>
		break;
 800693c:	bf00      	nop
 800693e:	e000      	b.n	8006942 <cppLoop+0x113a>
		break;
 8006940:	bf00      	nop

	}

	HAL_Delay(30);
 8006942:	201e      	movs	r0, #30
 8006944:	f000 f918 	bl	8006b78 <HAL_Delay>

}
 8006948:	bf00      	nop
 800694a:	373c      	adds	r7, #60	; 0x3c
 800694c:	46bd      	mov	sp, r7
 800694e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006950:	080178ac 	.word	0x080178ac
 8006954:	080178b0 	.word	0x080178b0
 8006958:	20000534 	.word	0x20000534
 800695c:	20000540 	.word	0x20000540
 8006960:	20000564 	.word	0x20000564
 8006964:	20013650 	.word	0x20013650
 8006968:	00000000 	.word	0x00000000
 800696c:	080178bc 	.word	0x080178bc
 8006970:	080178a0 	.word	0x080178a0
 8006974:	08017860 	.word	0x08017860
 8006978:	0801786c 	.word	0x0801786c
 800697c:	3fc8f5c3 	.word	0x3fc8f5c3

08006980 <_Z41__static_initialization_and_destruction_0ii>:
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d133      	bne.n	80069f8 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006996:	4293      	cmp	r3, r2
 8006998:	d12e      	bne.n	80069f8 <_Z41__static_initialization_and_destruction_0ii+0x78>
LineSensor line_sensor;
 800699a:	4819      	ldr	r0, [pc, #100]	; (8006a00 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800699c:	f7fb fb68 	bl	8002070 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80069a0:	4818      	ldr	r0, [pc, #96]	; (8006a04 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80069a2:	f7fc fc1d 	bl	80031e0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80069a6:	4818      	ldr	r0, [pc, #96]	; (8006a08 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80069a8:	f7fb f9fe 	bl	8001da8 <_ZN8JoyStickC1Ev>
Motor motor;
 80069ac:	4817      	ldr	r0, [pc, #92]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80069ae:	f7fc f82a 	bl	8002a06 <_ZN5MotorC1Ev>
IMU imu;
 80069b2:	4817      	ldr	r0, [pc, #92]	; (8006a10 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80069b4:	f7fa fff0 	bl	8001998 <_ZN3IMUC1Ev>
Logger logger;
 80069b8:	4816      	ldr	r0, [pc, #88]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80069ba:	f7fb ff25 	bl	8002808 <_ZN6LoggerC1Ev>
Encoder encoder;
 80069be:	4816      	ldr	r0, [pc, #88]	; (8006a18 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80069c0:	f7fa fbc8 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80069c8:	4910      	ldr	r1, [pc, #64]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80069ca:	4814      	ldr	r0, [pc, #80]	; (8006a1c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80069cc:	f7fc fd54 	bl	8003478 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80069d2:	4a0b      	ldr	r2, [pc, #44]	; (8006a00 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80069d4:	490d      	ldr	r1, [pc, #52]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80069d6:	4812      	ldr	r0, [pc, #72]	; (8006a20 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80069d8:	f7fb fce0 	bl	800239c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80069dc:	4b0f      	ldr	r3, [pc, #60]	; (8006a1c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80069de:	4a0c      	ldr	r2, [pc, #48]	; (8006a10 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80069e0:	490d      	ldr	r1, [pc, #52]	; (8006a18 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80069e2:	4810      	ldr	r0, [pc, #64]	; (8006a24 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80069e4:	f7fc f8f4 	bl	8002bd0 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
SystemIdentification sys_ident(&logger, &motor);
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80069ea:	490a      	ldr	r1, [pc, #40]	; (8006a14 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80069ec:	480e      	ldr	r0, [pc, #56]	; (8006a28 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80069ee:	f7fc fc61 	bl	80032b4 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80069f2:	480e      	ldr	r0, [pc, #56]	; (8006a2c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80069f4:	f7fc fa14 	bl	8002e20 <_ZN13PathFollowingC1Ev>
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20000238 	.word	0x20000238
 8006a04:	20000530 	.word	0x20000530
 8006a08:	20000534 	.word	0x20000534
 8006a0c:	2000053c 	.word	0x2000053c
 8006a10:	20000550 	.word	0x20000550
 8006a14:	20000564 	.word	0x20000564
 8006a18:	20013620 	.word	0x20013620
 8006a1c:	20013650 	.word	0x20013650
 8006a20:	20013690 	.word	0x20013690
 8006a24:	200136f8 	.word	0x200136f8
 8006a28:	20013728 	.word	0x20013728
 8006a2c:	20013938 	.word	0x20013938

08006a30 <_GLOBAL__sub_I_line_sensor>:
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006a38:	2001      	movs	r0, #1
 8006a3a:	f7ff ffa1 	bl	8006980 <_Z41__static_initialization_and_destruction_0ii>
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a78 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006a44:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006a46:	e003      	b.n	8006a50 <LoopCopyDataInit>

08006a48 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006a48:	4b0c      	ldr	r3, [pc, #48]	; (8006a7c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006a4a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006a4c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006a4e:	3104      	adds	r1, #4

08006a50 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006a50:	480b      	ldr	r0, [pc, #44]	; (8006a80 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006a52:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006a54:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006a56:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006a58:	d3f6      	bcc.n	8006a48 <CopyDataInit>
  ldr  r2, =_sbss
 8006a5a:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006a5c:	e002      	b.n	8006a64 <LoopFillZerobss>

08006a5e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006a5e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006a60:	f842 3b04 	str.w	r3, [r2], #4

08006a64 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006a66:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006a68:	d3f9      	bcc.n	8006a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a6a:	f7fe fd2d 	bl	80054c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a6e:	f00b fdeb 	bl	8012648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a72:	f7fc fff1 	bl	8003a58 <main>
  bx  lr    
 8006a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a78:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006a7c:	08017ec0 	.word	0x08017ec0
  ldr  r0, =_sdata
 8006a80:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006a84:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006a88:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006a8c:	2002fab0 	.word	0x2002fab0

08006a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a90:	e7fe      	b.n	8006a90 <ADC_IRQHandler>
	...

08006a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a98:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <HAL_Init+0x40>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <HAL_Init+0x40>)
 8006a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_Init+0x40>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <HAL_Init+0x40>)
 8006aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ab0:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_Init+0x40>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_Init+0x40>)
 8006ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006abc:	2003      	movs	r0, #3
 8006abe:	f000 fd51 	bl	8007564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	f000 f808 	bl	8006ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ac8:	f7fd feec 	bl	80048a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023c00 	.word	0x40023c00

08006ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_InitTick+0x54>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <HAL_InitTick+0x58>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fd69 	bl	80075ce <HAL_SYSTICK_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e00e      	b.n	8006b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d80a      	bhi.n	8006b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295
 8006b14:	f000 fd31 	bl	800757a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b18:	4a06      	ldr	r2, [pc, #24]	; (8006b34 <HAL_InitTick+0x5c>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e000      	b.n	8006b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000000 	.word	0x20000000
 8006b30:	20000008 	.word	0x20000008
 8006b34:	20000004 	.word	0x20000004

08006b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <HAL_IncTick+0x20>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_IncTick+0x24>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4413      	add	r3, r2
 8006b48:	4a04      	ldr	r2, [pc, #16]	; (8006b5c <HAL_IncTick+0x24>)
 8006b4a:	6013      	str	r3, [r2, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000008 	.word	0x20000008
 8006b5c:	2002da38 	.word	0x2002da38

08006b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  return uwTick;
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <HAL_GetTick+0x14>)
 8006b66:	681b      	ldr	r3, [r3, #0]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	2002da38 	.word	0x2002da38

08006b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b80:	f7ff ffee 	bl	8006b60 <HAL_GetTick>
 8006b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d005      	beq.n	8006b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b92:	4b09      	ldr	r3, [pc, #36]	; (8006bb8 <HAL_Delay+0x40>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b9e:	bf00      	nop
 8006ba0:	f7ff ffde 	bl	8006b60 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d8f7      	bhi.n	8006ba0 <HAL_Delay+0x28>
  {
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	20000008 	.word	0x20000008

08006bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e033      	b.n	8006c3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fd fe8a 	bl	80048f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d118      	bne.n	8006c2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c02:	f023 0302 	bic.w	r3, r3, #2
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa5a 	bl	80070c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f043 0201 	orr.w	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
 8006c2a:	e001      	b.n	8006c30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_ADC_Start_DMA+0x1e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e0cc      	b.n	8006dfc <HAL_ADC_Start_DMA+0x1b8>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d018      	beq.n	8006caa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c88:	4b5e      	ldr	r3, [pc, #376]	; (8006e04 <HAL_ADC_Start_DMA+0x1c0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a5e      	ldr	r2, [pc, #376]	; (8006e08 <HAL_ADC_Start_DMA+0x1c4>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	0c9a      	lsrs	r2, r3, #18
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c9c:	e002      	b.n	8006ca4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f9      	bne.n	8006c9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	f040 80a0 	bne.w	8006dfa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d007      	beq.n	8006cec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006ce4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf8:	d106      	bne.n	8006d08 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cfe:	f023 0206 	bic.w	r2, r3, #6
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	645a      	str	r2, [r3, #68]	; 0x44
 8006d06:	e002      	b.n	8006d0e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d16:	4b3d      	ldr	r3, [pc, #244]	; (8006e0c <HAL_ADC_Start_DMA+0x1c8>)
 8006d18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1e:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <HAL_ADC_Start_DMA+0x1cc>)
 8006d20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d26:	4a3b      	ldr	r2, [pc, #236]	; (8006e14 <HAL_ADC_Start_DMA+0x1d0>)
 8006d28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d2e:	4a3a      	ldr	r2, [pc, #232]	; (8006e18 <HAL_ADC_Start_DMA+0x1d4>)
 8006d30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006d3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685a      	ldr	r2, [r3, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006d4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	334c      	adds	r3, #76	; 0x4c
 8006d66:	4619      	mov	r1, r3
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f000 fcea 	bl	8007744 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d12a      	bne.n	8006dd2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a26      	ldr	r2, [pc, #152]	; (8006e1c <HAL_ADC_Start_DMA+0x1d8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d015      	beq.n	8006db2 <HAL_ADC_Start_DMA+0x16e>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a25      	ldr	r2, [pc, #148]	; (8006e20 <HAL_ADC_Start_DMA+0x1dc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d105      	bne.n	8006d9c <HAL_ADC_Start_DMA+0x158>
 8006d90:	4b1e      	ldr	r3, [pc, #120]	; (8006e0c <HAL_ADC_Start_DMA+0x1c8>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a20      	ldr	r2, [pc, #128]	; (8006e24 <HAL_ADC_Start_DMA+0x1e0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d129      	bne.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <HAL_ADC_Start_DMA+0x1c8>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f003 031f 	and.w	r3, r3, #31
 8006dae:	2b0f      	cmp	r3, #15
 8006db0:	d823      	bhi.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d11c      	bne.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006dce:	609a      	str	r2, [r3, #8]
 8006dd0:	e013      	b.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a11      	ldr	r2, [pc, #68]	; (8006e1c <HAL_ADC_Start_DMA+0x1d8>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d10e      	bne.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d107      	bne.n	8006dfa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006df8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000000 	.word	0x20000000
 8006e08:	431bde83 	.word	0x431bde83
 8006e0c:	40012300 	.word	0x40012300
 8006e10:	080072c1 	.word	0x080072c1
 8006e14:	0800737b 	.word	0x0800737b
 8006e18:	08007397 	.word	0x08007397
 8006e1c:	40012000 	.word	0x40012000
 8006e20:	40012100 	.word	0x40012100
 8006e24:	40012200 	.word	0x40012200

08006e28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b083      	sub	sp, #12
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e58:	bf00      	nop
 8006e5a:	370c      	adds	r7, #12
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr

08006e64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_ADC_ConfigChannel+0x1c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e113      	b.n	80070a8 <HAL_ADC_ConfigChannel+0x244>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b09      	cmp	r3, #9
 8006e8e:	d925      	bls.n	8006edc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68d9      	ldr	r1, [r3, #12]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3b1e      	subs	r3, #30
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eac:	43da      	mvns	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	400a      	ands	r2, r1
 8006eb4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68d9      	ldr	r1, [r3, #12]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	4603      	mov	r3, r0
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4403      	add	r3, r0
 8006ece:	3b1e      	subs	r3, #30
 8006ed0:	409a      	lsls	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	430a      	orrs	r2, r1
 8006ed8:	60da      	str	r2, [r3, #12]
 8006eda:	e022      	b.n	8006f22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6919      	ldr	r1, [r3, #16]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4613      	mov	r3, r2
 8006eec:	005b      	lsls	r3, r3, #1
 8006eee:	4413      	add	r3, r2
 8006ef0:	2207      	movs	r2, #7
 8006ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef6:	43da      	mvns	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	400a      	ands	r2, r1
 8006efe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6919      	ldr	r1, [r3, #16]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689a      	ldr	r2, [r3, #8]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	4618      	mov	r0, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4403      	add	r3, r0
 8006f18:	409a      	lsls	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b06      	cmp	r3, #6
 8006f28:	d824      	bhi.n	8006f74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	3b05      	subs	r3, #5
 8006f3c:	221f      	movs	r2, #31
 8006f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f42:	43da      	mvns	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	400a      	ands	r2, r1
 8006f4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	4618      	mov	r0, r3
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	3b05      	subs	r3, #5
 8006f66:	fa00 f203 	lsl.w	r2, r0, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	635a      	str	r2, [r3, #52]	; 0x34
 8006f72:	e04c      	b.n	800700e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	2b0c      	cmp	r3, #12
 8006f7a:	d824      	bhi.n	8006fc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	3b23      	subs	r3, #35	; 0x23
 8006f8e:	221f      	movs	r2, #31
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	43da      	mvns	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	400a      	ands	r2, r1
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	4618      	mov	r0, r3
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3b23      	subs	r3, #35	; 0x23
 8006fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc4:	e023      	b.n	800700e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685a      	ldr	r2, [r3, #4]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	3b41      	subs	r3, #65	; 0x41
 8006fd8:	221f      	movs	r2, #31
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43da      	mvns	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	400a      	ands	r2, r1
 8006fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	3b41      	subs	r3, #65	; 0x41
 8007002:	fa00 f203 	lsl.w	r2, r0, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <HAL_ADC_ConfigChannel+0x250>)
 8007010:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a28      	ldr	r2, [pc, #160]	; (80070b8 <HAL_ADC_ConfigChannel+0x254>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d10f      	bne.n	800703c <HAL_ADC_ConfigChannel+0x1d8>
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b12      	cmp	r3, #18
 8007022:	d10b      	bne.n	800703c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1d      	ldr	r2, [pc, #116]	; (80070b8 <HAL_ADC_ConfigChannel+0x254>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d12b      	bne.n	800709e <HAL_ADC_ConfigChannel+0x23a>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <HAL_ADC_ConfigChannel+0x258>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d003      	beq.n	8007058 <HAL_ADC_ConfigChannel+0x1f4>
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2b11      	cmp	r3, #17
 8007056:	d122      	bne.n	800709e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a11      	ldr	r2, [pc, #68]	; (80070bc <HAL_ADC_ConfigChannel+0x258>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d111      	bne.n	800709e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <HAL_ADC_ConfigChannel+0x25c>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <HAL_ADC_ConfigChannel+0x260>)
 8007080:	fba2 2303 	umull	r2, r3, r2, r3
 8007084:	0c9a      	lsrs	r2, r3, #18
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007090:	e002      	b.n	8007098 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3b01      	subs	r3, #1
 8007096:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1f9      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	40012300 	.word	0x40012300
 80070b8:	40012000 	.word	0x40012000
 80070bc:	10000012 	.word	0x10000012
 80070c0:	20000000 	.word	0x20000000
 80070c4:	431bde83 	.word	0x431bde83

080070c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80070d0:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <ADC_Init+0x1f0>)
 80070d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6859      	ldr	r1, [r3, #4]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	021a      	lsls	r2, r3, #8
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	6859      	ldr	r1, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6899      	ldr	r1, [r3, #8]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715a:	4a58      	ldr	r2, [pc, #352]	; (80072bc <ADC_Init+0x1f4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d022      	beq.n	80071a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800716e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6899      	ldr	r1, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007190:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6899      	ldr	r1, [r3, #8]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	e00f      	b.n	80071c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	689a      	ldr	r2, [r3, #8]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0202 	bic.w	r2, r2, #2
 80071d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7e1b      	ldrb	r3, [r3, #24]
 80071e0:	005a      	lsls	r2, r3, #1
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d01b      	beq.n	800722c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007202:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007212:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6859      	ldr	r1, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	3b01      	subs	r3, #1
 8007220:	035a      	lsls	r2, r3, #13
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
 800722a:	e007      	b.n	800723c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800723a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800724a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	3b01      	subs	r3, #1
 8007258:	051a      	lsls	r2, r3, #20
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	689a      	ldr	r2, [r3, #8]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007270:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6899      	ldr	r1, [r3, #8]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800727e:	025a      	lsls	r2, r3, #9
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	430a      	orrs	r2, r1
 8007286:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007296:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6899      	ldr	r1, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	029a      	lsls	r2, r3, #10
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	609a      	str	r2, [r3, #8]
}
 80072ac:	bf00      	nop
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	40012300 	.word	0x40012300
 80072bc:	0f000001 	.word	0x0f000001

080072c0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d13c      	bne.n	8007354 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d12b      	bne.n	800734c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d127      	bne.n	800734c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007302:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007306:	2b00      	cmp	r3, #0
 8007308:	d006      	beq.n	8007318 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007314:	2b00      	cmp	r3, #0
 8007316:	d119      	bne.n	800734c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0220 	bic.w	r2, r2, #32
 8007326:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d105      	bne.n	800734c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	f043 0201 	orr.w	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f7ff fd6b 	bl	8006e28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007352:	e00e      	b.n	8007372 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007358:	f003 0310 	and.w	r3, r3, #16
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff fd75 	bl	8006e50 <HAL_ADC_ErrorCallback>
}
 8007366:	e004      	b.n	8007372 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fd57 	bl	8006e3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2240      	movs	r2, #64	; 0x40
 80073a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	f043 0204 	orr.w	r2, r3, #4
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f7ff fd4a 	bl	8006e50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073bc:	bf00      	nop
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <__NVIC_SetPriorityGrouping>:
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <__NVIC_SetPriorityGrouping+0x44>)
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80073e0:	4013      	ands	r3, r2
 80073e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80073ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80073f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80073f6:	4a04      	ldr	r2, [pc, #16]	; (8007408 <__NVIC_SetPriorityGrouping+0x44>)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	60d3      	str	r3, [r2, #12]
}
 80073fc:	bf00      	nop
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr
 8007408:	e000ed00 	.word	0xe000ed00

0800740c <__NVIC_GetPriorityGrouping>:
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007410:	4b04      	ldr	r3, [pc, #16]	; (8007424 <__NVIC_GetPriorityGrouping+0x18>)
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	0a1b      	lsrs	r3, r3, #8
 8007416:	f003 0307 	and.w	r3, r3, #7
}
 800741a:	4618      	mov	r0, r3
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	e000ed00 	.word	0xe000ed00

08007428 <__NVIC_EnableIRQ>:
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	4603      	mov	r3, r0
 8007430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007436:	2b00      	cmp	r3, #0
 8007438:	db0b      	blt.n	8007452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	f003 021f 	and.w	r2, r3, #31
 8007440:	4907      	ldr	r1, [pc, #28]	; (8007460 <__NVIC_EnableIRQ+0x38>)
 8007442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007446:	095b      	lsrs	r3, r3, #5
 8007448:	2001      	movs	r0, #1
 800744a:	fa00 f202 	lsl.w	r2, r0, r2
 800744e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	e000e100 	.word	0xe000e100

08007464 <__NVIC_SetPriority>:
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	6039      	str	r1, [r7, #0]
 800746e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007474:	2b00      	cmp	r3, #0
 8007476:	db0a      	blt.n	800748e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	490c      	ldr	r1, [pc, #48]	; (80074b0 <__NVIC_SetPriority+0x4c>)
 800747e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007482:	0112      	lsls	r2, r2, #4
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	440b      	add	r3, r1
 8007488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800748c:	e00a      	b.n	80074a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	b2da      	uxtb	r2, r3
 8007492:	4908      	ldr	r1, [pc, #32]	; (80074b4 <__NVIC_SetPriority+0x50>)
 8007494:	79fb      	ldrb	r3, [r7, #7]
 8007496:	f003 030f 	and.w	r3, r3, #15
 800749a:	3b04      	subs	r3, #4
 800749c:	0112      	lsls	r2, r2, #4
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	440b      	add	r3, r1
 80074a2:	761a      	strb	r2, [r3, #24]
}
 80074a4:	bf00      	nop
 80074a6:	370c      	adds	r7, #12
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000e100 	.word	0xe000e100
 80074b4:	e000ed00 	.word	0xe000ed00

080074b8 <NVIC_EncodePriority>:
{
 80074b8:	b480      	push	{r7}
 80074ba:	b089      	sub	sp, #36	; 0x24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	f1c3 0307 	rsb	r3, r3, #7
 80074d2:	2b04      	cmp	r3, #4
 80074d4:	bf28      	it	cs
 80074d6:	2304      	movcs	r3, #4
 80074d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	3304      	adds	r3, #4
 80074de:	2b06      	cmp	r3, #6
 80074e0:	d902      	bls.n	80074e8 <NVIC_EncodePriority+0x30>
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	3b03      	subs	r3, #3
 80074e6:	e000      	b.n	80074ea <NVIC_EncodePriority+0x32>
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80074ec:	f04f 32ff 	mov.w	r2, #4294967295
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43da      	mvns	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	401a      	ands	r2, r3
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007500:	f04f 31ff 	mov.w	r1, #4294967295
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	fa01 f303 	lsl.w	r3, r1, r3
 800750a:	43d9      	mvns	r1, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007510:	4313      	orrs	r3, r2
}
 8007512:	4618      	mov	r0, r3
 8007514:	3724      	adds	r7, #36	; 0x24
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <SysTick_Config>:
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	3b01      	subs	r3, #1
 800752c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007530:	d301      	bcc.n	8007536 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007532:	2301      	movs	r3, #1
 8007534:	e00f      	b.n	8007556 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007536:	4a0a      	ldr	r2, [pc, #40]	; (8007560 <SysTick_Config+0x40>)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	3b01      	subs	r3, #1
 800753c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800753e:	210f      	movs	r1, #15
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	f7ff ff8e 	bl	8007464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <SysTick_Config+0x40>)
 800754a:	2200      	movs	r2, #0
 800754c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <SysTick_Config+0x40>)
 8007550:	2207      	movs	r2, #7
 8007552:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	e000e010 	.word	0xe000e010

08007564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f7ff ff29 	bl	80073c4 <__NVIC_SetPriorityGrouping>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800757a:	b580      	push	{r7, lr}
 800757c:	b086      	sub	sp, #24
 800757e:	af00      	add	r7, sp, #0
 8007580:	4603      	mov	r3, r0
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800758c:	f7ff ff3e 	bl	800740c <__NVIC_GetPriorityGrouping>
 8007590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	6978      	ldr	r0, [r7, #20]
 8007598:	f7ff ff8e 	bl	80074b8 <NVIC_EncodePriority>
 800759c:	4602      	mov	r2, r0
 800759e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075a2:	4611      	mov	r1, r2
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7ff ff5d 	bl	8007464 <__NVIC_SetPriority>
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	4603      	mov	r3, r0
 80075ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80075bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075c0:	4618      	mov	r0, r3
 80075c2:	f7ff ff31 	bl	8007428 <__NVIC_EnableIRQ>
}
 80075c6:	bf00      	nop
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff ffa2 	bl	8007520 <SysTick_Config>
 80075dc:	4603      	mov	r3, r0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80075f4:	f7ff fab4 	bl	8006b60 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e099      	b.n	8007738 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2202      	movs	r2, #2
 8007610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0201 	bic.w	r2, r2, #1
 8007622:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007624:	e00f      	b.n	8007646 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007626:	f7ff fa9b 	bl	8006b60 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b05      	cmp	r3, #5
 8007632:	d908      	bls.n	8007646 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2220      	movs	r2, #32
 8007638:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2203      	movs	r2, #3
 800763e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	e078      	b.n	8007738 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e8      	bne.n	8007626 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4b38      	ldr	r3, [pc, #224]	; (8007740 <HAL_DMA_Init+0x158>)
 8007660:	4013      	ands	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007672:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800767e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800768a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b04      	cmp	r3, #4
 800769e:	d107      	bne.n	80076b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	4313      	orrs	r3, r2
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	f023 0307 	bic.w	r3, r3, #7
 80076c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d117      	bne.n	800770a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00e      	beq.n	800770a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fa9d 	bl	8007c2c <DMA_CheckFifoParam>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d008      	beq.n	800770a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2240      	movs	r2, #64	; 0x40
 80076fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007706:	2301      	movs	r3, #1
 8007708:	e016      	b.n	8007738 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fa54 	bl	8007bc0 <DMA_CalcBaseAndBitshift>
 8007718:	4603      	mov	r3, r0
 800771a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007720:	223f      	movs	r2, #63	; 0x3f
 8007722:	409a      	lsls	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007736:	2300      	movs	r3, #0
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	f010803f 	.word	0xf010803f

08007744 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b086      	sub	sp, #24
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_DMA_Start_IT+0x26>
 8007766:	2302      	movs	r3, #2
 8007768:	e040      	b.n	80077ec <HAL_DMA_Start_IT+0xa8>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b01      	cmp	r3, #1
 800777c:	d12f      	bne.n	80077de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2202      	movs	r2, #2
 8007782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2200      	movs	r2, #0
 800778a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f000 f9e6 	bl	8007b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800779c:	223f      	movs	r2, #63	; 0x3f
 800779e:	409a      	lsls	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0216 	orr.w	r2, r2, #22
 80077b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d007      	beq.n	80077cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0208 	orr.w	r2, r2, #8
 80077ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0201 	orr.w	r2, r2, #1
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e005      	b.n	80077ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80077e6:	2302      	movs	r3, #2
 80077e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80077ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b02      	cmp	r3, #2
 8007806:	d004      	beq.n	8007812 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e00c      	b.n	800782c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2205      	movs	r2, #5
 8007816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0201 	bic.w	r2, r2, #1
 8007828:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007844:	4b92      	ldr	r3, [pc, #584]	; (8007a90 <HAL_DMA_IRQHandler+0x258>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a92      	ldr	r2, [pc, #584]	; (8007a94 <HAL_DMA_IRQHandler+0x25c>)
 800784a:	fba2 2303 	umull	r2, r3, r2, r3
 800784e:	0a9b      	lsrs	r3, r3, #10
 8007850:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007856:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007862:	2208      	movs	r2, #8
 8007864:	409a      	lsls	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01a      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	2b00      	cmp	r3, #0
 800787a:	d013      	beq.n	80078a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0204 	bic.w	r2, r2, #4
 800788a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007890:	2208      	movs	r2, #8
 8007892:	409a      	lsls	r2, r3
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789c:	f043 0201 	orr.w	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4013      	ands	r3, r2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d012      	beq.n	80078da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00b      	beq.n	80078da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c6:	2201      	movs	r2, #1
 80078c8:	409a      	lsls	r2, r3
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d2:	f043 0202 	orr.w	r2, r3, #2
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078de:	2204      	movs	r2, #4
 80078e0:	409a      	lsls	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d012      	beq.n	8007910 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 0302 	and.w	r3, r3, #2
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00b      	beq.n	8007910 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078fc:	2204      	movs	r2, #4
 80078fe:	409a      	lsls	r2, r3
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007908:	f043 0204 	orr.w	r2, r3, #4
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007914:	2210      	movs	r2, #16
 8007916:	409a      	lsls	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	4013      	ands	r3, r2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d043      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d03c      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007932:	2210      	movs	r2, #16
 8007934:	409a      	lsls	r2, r3
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d018      	beq.n	800797a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d108      	bne.n	8007968 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d024      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	e01f      	b.n	80079a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	4798      	blx	r3
 8007978:	e016      	b.n	80079a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d107      	bne.n	8007998 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0208 	bic.w	r2, r2, #8
 8007996:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799c:	2b00      	cmp	r3, #0
 800799e:	d003      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ac:	2220      	movs	r2, #32
 80079ae:	409a      	lsls	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 808e 	beq.w	8007ad6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0310 	and.w	r3, r3, #16
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8086 	beq.w	8007ad6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ce:	2220      	movs	r2, #32
 80079d0:	409a      	lsls	r2, r3
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b05      	cmp	r3, #5
 80079e0:	d136      	bne.n	8007a50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f022 0216 	bic.w	r2, r2, #22
 80079f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695a      	ldr	r2, [r3, #20]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d103      	bne.n	8007a12 <HAL_DMA_IRQHandler+0x1da>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f022 0208 	bic.w	r2, r2, #8
 8007a20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a26:	223f      	movs	r2, #63	; 0x3f
 8007a28:	409a      	lsls	r2, r3
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d07d      	beq.n	8007b42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	4798      	blx	r3
        }
        return;
 8007a4e:	e078      	b.n	8007b42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01c      	beq.n	8007a98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d108      	bne.n	8007a7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d030      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	4798      	blx	r3
 8007a7c:	e02b      	b.n	8007ad6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d027      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
 8007a8e:	e022      	b.n	8007ad6 <HAL_DMA_IRQHandler+0x29e>
 8007a90:	20000000 	.word	0x20000000
 8007a94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10f      	bne.n	8007ac6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f022 0210 	bic.w	r2, r2, #16
 8007ab4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d032      	beq.n	8007b44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	f003 0301 	and.w	r3, r3, #1
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d022      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2205      	movs	r2, #5
 8007aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0201 	bic.w	r2, r2, #1
 8007b00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	3301      	adds	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d307      	bcc.n	8007b1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f2      	bne.n	8007b02 <HAL_DMA_IRQHandler+0x2ca>
 8007b1c:	e000      	b.n	8007b20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007b1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d005      	beq.n	8007b44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	4798      	blx	r3
 8007b40:	e000      	b.n	8007b44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007b42:	bf00      	nop
    }
  }
}
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop

08007b4c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	60b9      	str	r1, [r7, #8]
 8007b6e:	607a      	str	r2, [r7, #4]
 8007b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d108      	bne.n	8007ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007ba2:	e007      	b.n	8007bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68ba      	ldr	r2, [r7, #8]
 8007baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b085      	sub	sp, #20
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	3b10      	subs	r3, #16
 8007bd0:	4a14      	ldr	r2, [pc, #80]	; (8007c24 <DMA_CalcBaseAndBitshift+0x64>)
 8007bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd6:	091b      	lsrs	r3, r3, #4
 8007bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007bda:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <DMA_CalcBaseAndBitshift+0x68>)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	4413      	add	r3, r2
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d909      	bls.n	8007c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007bf6:	f023 0303 	bic.w	r3, r3, #3
 8007bfa:	1d1a      	adds	r2, r3, #4
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	659a      	str	r2, [r3, #88]	; 0x58
 8007c00:	e007      	b.n	8007c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3714      	adds	r7, #20
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c20:	4770      	bx	lr
 8007c22:	bf00      	nop
 8007c24:	aaaaaaab 	.word	0xaaaaaaab
 8007c28:	080178fc 	.word	0x080178fc

08007c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11f      	bne.n	8007c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2b03      	cmp	r3, #3
 8007c4a:	d855      	bhi.n	8007cf8 <DMA_CheckFifoParam+0xcc>
 8007c4c:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <DMA_CheckFifoParam+0x28>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c65 	.word	0x08007c65
 8007c58:	08007c77 	.word	0x08007c77
 8007c5c:	08007c65 	.word	0x08007c65
 8007c60:	08007cf9 	.word	0x08007cf9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d045      	beq.n	8007cfc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c74:	e042      	b.n	8007cfc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007c7e:	d13f      	bne.n	8007d00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c84:	e03c      	b.n	8007d00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8e:	d121      	bne.n	8007cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d836      	bhi.n	8007d04 <DMA_CheckFifoParam+0xd8>
 8007c96:	a201      	add	r2, pc, #4	; (adr r2, 8007c9c <DMA_CheckFifoParam+0x70>)
 8007c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c9c:	08007cad 	.word	0x08007cad
 8007ca0:	08007cb3 	.word	0x08007cb3
 8007ca4:	08007cad 	.word	0x08007cad
 8007ca8:	08007cc5 	.word	0x08007cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e02f      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d024      	beq.n	8007d08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cc2:	e021      	b.n	8007d08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ccc:	d11e      	bne.n	8007d0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007cd2:	e01b      	b.n	8007d0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d902      	bls.n	8007ce0 <DMA_CheckFifoParam+0xb4>
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d003      	beq.n	8007ce6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007cde:	e018      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e015      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00e      	beq.n	8007d10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf6:	e00b      	b.n	8007d10 <DMA_CheckFifoParam+0xe4>
      break;
 8007cf8:	bf00      	nop
 8007cfa:	e00a      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e008      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;
 8007d00:	bf00      	nop
 8007d02:	e006      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;
 8007d04:	bf00      	nop
 8007d06:	e004      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e002      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;   
 8007d0c:	bf00      	nop
 8007d0e:	e000      	b.n	8007d12 <DMA_CheckFifoParam+0xe6>
      break;
 8007d10:	bf00      	nop
    }
  } 
  
  return status; 
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b089      	sub	sp, #36	; 0x24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007d32:	2300      	movs	r3, #0
 8007d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007d36:	2300      	movs	r3, #0
 8007d38:	61fb      	str	r3, [r7, #28]
 8007d3a:	e177      	b.n	800802c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	fa02 f303 	lsl.w	r3, r2, r3
 8007d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	f040 8166 	bne.w	8008026 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d00b      	beq.n	8007d7a <HAL_GPIO_Init+0x5a>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d007      	beq.n	8007d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007d6e:	2b11      	cmp	r3, #17
 8007d70:	d003      	beq.n	8007d7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b12      	cmp	r3, #18
 8007d78:	d130      	bne.n	8007ddc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	005b      	lsls	r3, r3, #1
 8007d84:	2203      	movs	r2, #3
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43db      	mvns	r3, r3
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	4013      	ands	r3, r2
 8007d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	69fb      	ldr	r3, [r7, #28]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	69ba      	ldr	r2, [r7, #24]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007db0:	2201      	movs	r2, #1
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	fa02 f303 	lsl.w	r3, r2, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	091b      	lsrs	r3, r3, #4
 8007dc6:	f003 0201 	and.w	r2, r3, #1
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69ba      	ldr	r2, [r7, #24]
 8007dda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	005b      	lsls	r3, r3, #1
 8007de6:	2203      	movs	r2, #3
 8007de8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dec:	43db      	mvns	r3, r3
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	4013      	ands	r3, r2
 8007df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	689a      	ldr	r2, [r3, #8]
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	005b      	lsls	r3, r3, #1
 8007dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	69ba      	ldr	r2, [r7, #24]
 8007e0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d003      	beq.n	8007e1c <HAL_GPIO_Init+0xfc>
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b12      	cmp	r3, #18
 8007e1a:	d123      	bne.n	8007e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	08da      	lsrs	r2, r3, #3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3208      	adds	r2, #8
 8007e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	220f      	movs	r2, #15
 8007e34:	fa02 f303 	lsl.w	r3, r2, r3
 8007e38:	43db      	mvns	r3, r3
 8007e3a:	69ba      	ldr	r2, [r7, #24]
 8007e3c:	4013      	ands	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e56:	69fb      	ldr	r3, [r7, #28]
 8007e58:	08da      	lsrs	r2, r3, #3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3208      	adds	r2, #8
 8007e5e:	69b9      	ldr	r1, [r7, #24]
 8007e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	005b      	lsls	r3, r3, #1
 8007e6e:	2203      	movs	r2, #3
 8007e70:	fa02 f303 	lsl.w	r3, r2, r3
 8007e74:	43db      	mvns	r3, r3
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f003 0203 	and.w	r2, r3, #3
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8c:	69ba      	ldr	r2, [r7, #24]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 80c0 	beq.w	8008026 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	4b65      	ldr	r3, [pc, #404]	; (8008040 <HAL_GPIO_Init+0x320>)
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	4a64      	ldr	r2, [pc, #400]	; (8008040 <HAL_GPIO_Init+0x320>)
 8007eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8007eb6:	4b62      	ldr	r3, [pc, #392]	; (8008040 <HAL_GPIO_Init+0x320>)
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ebe:	60fb      	str	r3, [r7, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ec2:	4a60      	ldr	r2, [pc, #384]	; (8008044 <HAL_GPIO_Init+0x324>)
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	089b      	lsrs	r3, r3, #2
 8007ec8:	3302      	adds	r3, #2
 8007eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	220f      	movs	r2, #15
 8007eda:	fa02 f303 	lsl.w	r3, r2, r3
 8007ede:	43db      	mvns	r3, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a57      	ldr	r2, [pc, #348]	; (8008048 <HAL_GPIO_Init+0x328>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d037      	beq.n	8007f5e <HAL_GPIO_Init+0x23e>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a56      	ldr	r2, [pc, #344]	; (800804c <HAL_GPIO_Init+0x32c>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d031      	beq.n	8007f5a <HAL_GPIO_Init+0x23a>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a55      	ldr	r2, [pc, #340]	; (8008050 <HAL_GPIO_Init+0x330>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d02b      	beq.n	8007f56 <HAL_GPIO_Init+0x236>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a54      	ldr	r2, [pc, #336]	; (8008054 <HAL_GPIO_Init+0x334>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d025      	beq.n	8007f52 <HAL_GPIO_Init+0x232>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a53      	ldr	r2, [pc, #332]	; (8008058 <HAL_GPIO_Init+0x338>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d01f      	beq.n	8007f4e <HAL_GPIO_Init+0x22e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a52      	ldr	r2, [pc, #328]	; (800805c <HAL_GPIO_Init+0x33c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d019      	beq.n	8007f4a <HAL_GPIO_Init+0x22a>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a51      	ldr	r2, [pc, #324]	; (8008060 <HAL_GPIO_Init+0x340>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d013      	beq.n	8007f46 <HAL_GPIO_Init+0x226>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a50      	ldr	r2, [pc, #320]	; (8008064 <HAL_GPIO_Init+0x344>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00d      	beq.n	8007f42 <HAL_GPIO_Init+0x222>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a4f      	ldr	r2, [pc, #316]	; (8008068 <HAL_GPIO_Init+0x348>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d007      	beq.n	8007f3e <HAL_GPIO_Init+0x21e>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a4e      	ldr	r2, [pc, #312]	; (800806c <HAL_GPIO_Init+0x34c>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d101      	bne.n	8007f3a <HAL_GPIO_Init+0x21a>
 8007f36:	2309      	movs	r3, #9
 8007f38:	e012      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f3a:	230a      	movs	r3, #10
 8007f3c:	e010      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f3e:	2308      	movs	r3, #8
 8007f40:	e00e      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f42:	2307      	movs	r3, #7
 8007f44:	e00c      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f46:	2306      	movs	r3, #6
 8007f48:	e00a      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f4a:	2305      	movs	r3, #5
 8007f4c:	e008      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f4e:	2304      	movs	r3, #4
 8007f50:	e006      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f52:	2303      	movs	r3, #3
 8007f54:	e004      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f56:	2302      	movs	r3, #2
 8007f58:	e002      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e000      	b.n	8007f60 <HAL_GPIO_Init+0x240>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	69fa      	ldr	r2, [r7, #28]
 8007f62:	f002 0203 	and.w	r2, r2, #3
 8007f66:	0092      	lsls	r2, r2, #2
 8007f68:	4093      	lsls	r3, r2
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f70:	4934      	ldr	r1, [pc, #208]	; (8008044 <HAL_GPIO_Init+0x324>)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	089b      	lsrs	r3, r3, #2
 8007f76:	3302      	adds	r3, #2
 8007f78:	69ba      	ldr	r2, [r7, #24]
 8007f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007f7e:	4b3c      	ldr	r3, [pc, #240]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	43db      	mvns	r3, r3
 8007f88:	69ba      	ldr	r2, [r7, #24]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007f9a:	69ba      	ldr	r2, [r7, #24]
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007fa2:	4a33      	ldr	r2, [pc, #204]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007fa8:	4b31      	ldr	r3, [pc, #196]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	43db      	mvns	r3, r3
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007fcc:	4a28      	ldr	r2, [pc, #160]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007fd2:	4b27      	ldr	r3, [pc, #156]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	43db      	mvns	r3, r3
 8007fdc:	69ba      	ldr	r2, [r7, #24]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ff6:	4a1e      	ldr	r2, [pc, #120]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <HAL_GPIO_Init+0x350>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	43db      	mvns	r3, r3
 8008006:	69ba      	ldr	r2, [r7, #24]
 8008008:	4013      	ands	r3, r2
 800800a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4313      	orrs	r3, r2
 800801e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008020:	4a13      	ldr	r2, [pc, #76]	; (8008070 <HAL_GPIO_Init+0x350>)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	2b0f      	cmp	r3, #15
 8008030:	f67f ae84 	bls.w	8007d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008034:	bf00      	nop
 8008036:	3724      	adds	r7, #36	; 0x24
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	40023800 	.word	0x40023800
 8008044:	40013800 	.word	0x40013800
 8008048:	40020000 	.word	0x40020000
 800804c:	40020400 	.word	0x40020400
 8008050:	40020800 	.word	0x40020800
 8008054:	40020c00 	.word	0x40020c00
 8008058:	40021000 	.word	0x40021000
 800805c:	40021400 	.word	0x40021400
 8008060:	40021800 	.word	0x40021800
 8008064:	40021c00 	.word	0x40021c00
 8008068:	40022000 	.word	0x40022000
 800806c:	40022400 	.word	0x40022400
 8008070:	40013c00 	.word	0x40013c00

08008074 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691a      	ldr	r2, [r3, #16]
 8008084:	887b      	ldrh	r3, [r7, #2]
 8008086:	4013      	ands	r3, r2
 8008088:	2b00      	cmp	r3, #0
 800808a:	d002      	beq.n	8008092 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800808c:	2301      	movs	r3, #1
 800808e:	73fb      	strb	r3, [r7, #15]
 8008090:	e001      	b.n	8008096 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008092:	2300      	movs	r3, #0
 8008094:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3714      	adds	r7, #20
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	460b      	mov	r3, r1
 80080ae:	807b      	strh	r3, [r7, #2]
 80080b0:	4613      	mov	r3, r2
 80080b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80080b4:	787b      	ldrb	r3, [r7, #1]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d003      	beq.n	80080c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080ba:	887a      	ldrh	r2, [r7, #2]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80080c0:	e003      	b.n	80080ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	041a      	lsls	r2, r3, #16
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	619a      	str	r2, [r3, #24]
}
 80080ca:	bf00      	nop
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
	...

080080d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80080e2:	4b08      	ldr	r3, [pc, #32]	; (8008104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080e4:	695a      	ldr	r2, [r3, #20]
 80080e6:	88fb      	ldrh	r3, [r7, #6]
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d006      	beq.n	80080fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080ee:	4a05      	ldr	r2, [pc, #20]	; (8008104 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80080f0:	88fb      	ldrh	r3, [r7, #6]
 80080f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080f4:	88fb      	ldrh	r3, [r7, #6]
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fb fc31 	bl	800395e <HAL_GPIO_EXTI_Callback>
  }
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}
 8008104:	40013c00 	.word	0x40013c00

08008108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e11f      	b.n	800835a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d106      	bne.n	8008134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7fc fc92 	bl	8004a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2224      	movs	r2, #36	; 0x24
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f022 0201 	bic.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800815a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800816a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800816c:	f001 f96e 	bl	800944c <HAL_RCC_GetPCLK1Freq>
 8008170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	4a7b      	ldr	r2, [pc, #492]	; (8008364 <HAL_I2C_Init+0x25c>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d807      	bhi.n	800818c <HAL_I2C_Init+0x84>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	4a7a      	ldr	r2, [pc, #488]	; (8008368 <HAL_I2C_Init+0x260>)
 8008180:	4293      	cmp	r3, r2
 8008182:	bf94      	ite	ls
 8008184:	2301      	movls	r3, #1
 8008186:	2300      	movhi	r3, #0
 8008188:	b2db      	uxtb	r3, r3
 800818a:	e006      	b.n	800819a <HAL_I2C_Init+0x92>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	4a77      	ldr	r2, [pc, #476]	; (800836c <HAL_I2C_Init+0x264>)
 8008190:	4293      	cmp	r3, r2
 8008192:	bf94      	ite	ls
 8008194:	2301      	movls	r3, #1
 8008196:	2300      	movhi	r3, #0
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0db      	b.n	800835a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a72      	ldr	r2, [pc, #456]	; (8008370 <HAL_I2C_Init+0x268>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	0c9b      	lsrs	r3, r3, #18
 80081ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a64      	ldr	r2, [pc, #400]	; (8008364 <HAL_I2C_Init+0x25c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d802      	bhi.n	80081dc <HAL_I2C_Init+0xd4>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3301      	adds	r3, #1
 80081da:	e009      	b.n	80081f0 <HAL_I2C_Init+0xe8>
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80081e2:	fb02 f303 	mul.w	r3, r2, r3
 80081e6:	4a63      	ldr	r2, [pc, #396]	; (8008374 <HAL_I2C_Init+0x26c>)
 80081e8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ec:	099b      	lsrs	r3, r3, #6
 80081ee:	3301      	adds	r3, #1
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	430b      	orrs	r3, r1
 80081f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	4956      	ldr	r1, [pc, #344]	; (8008364 <HAL_I2C_Init+0x25c>)
 800820c:	428b      	cmp	r3, r1
 800820e:	d80d      	bhi.n	800822c <HAL_I2C_Init+0x124>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1e59      	subs	r1, r3, #1
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	005b      	lsls	r3, r3, #1
 800821a:	fbb1 f3f3 	udiv	r3, r1, r3
 800821e:	3301      	adds	r3, #1
 8008220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008224:	2b04      	cmp	r3, #4
 8008226:	bf38      	it	cc
 8008228:	2304      	movcc	r3, #4
 800822a:	e04f      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d111      	bne.n	8008258 <HAL_I2C_Init+0x150>
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	1e58      	subs	r0, r3, #1
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	440b      	add	r3, r1
 8008242:	fbb0 f3f3 	udiv	r3, r0, r3
 8008246:	3301      	adds	r3, #1
 8008248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800824c:	2b00      	cmp	r3, #0
 800824e:	bf0c      	ite	eq
 8008250:	2301      	moveq	r3, #1
 8008252:	2300      	movne	r3, #0
 8008254:	b2db      	uxtb	r3, r3
 8008256:	e012      	b.n	800827e <HAL_I2C_Init+0x176>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	1e58      	subs	r0, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6859      	ldr	r1, [r3, #4]
 8008260:	460b      	mov	r3, r1
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	0099      	lsls	r1, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	fbb0 f3f3 	udiv	r3, r0, r3
 800826e:	3301      	adds	r3, #1
 8008270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008274:	2b00      	cmp	r3, #0
 8008276:	bf0c      	ite	eq
 8008278:	2301      	moveq	r3, #1
 800827a:	2300      	movne	r3, #0
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_I2C_Init+0x17e>
 8008282:	2301      	movs	r3, #1
 8008284:	e022      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10e      	bne.n	80082ac <HAL_I2C_Init+0x1a4>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1e58      	subs	r0, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6859      	ldr	r1, [r3, #4]
 8008296:	460b      	mov	r3, r1
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	440b      	add	r3, r1
 800829c:	fbb0 f3f3 	udiv	r3, r0, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082aa:	e00f      	b.n	80082cc <HAL_I2C_Init+0x1c4>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1e58      	subs	r0, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6859      	ldr	r1, [r3, #4]
 80082b4:	460b      	mov	r3, r1
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	0099      	lsls	r1, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c2:	3301      	adds	r3, #1
 80082c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082cc:	6879      	ldr	r1, [r7, #4]
 80082ce:	6809      	ldr	r1, [r1, #0]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	431a      	orrs	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	430a      	orrs	r2, r1
 80082ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80082fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	6911      	ldr	r1, [r2, #16]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	68d2      	ldr	r2, [r2, #12]
 8008306:	4311      	orrs	r1, r2
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	6812      	ldr	r2, [r2, #0]
 800830c:	430b      	orrs	r3, r1
 800830e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695a      	ldr	r2, [r3, #20]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	431a      	orrs	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	430a      	orrs	r2, r1
 800832a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0201 	orr.w	r2, r2, #1
 800833a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2220      	movs	r2, #32
 8008346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2200      	movs	r2, #0
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	000186a0 	.word	0x000186a0
 8008368:	001e847f 	.word	0x001e847f
 800836c:	003d08ff 	.word	0x003d08ff
 8008370:	431bde83 	.word	0x431bde83
 8008374:	10624dd3 	.word	0x10624dd3

08008378 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af02      	add	r7, sp, #8
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	607a      	str	r2, [r7, #4]
 8008382:	461a      	mov	r2, r3
 8008384:	460b      	mov	r3, r1
 8008386:	817b      	strh	r3, [r7, #10]
 8008388:	4613      	mov	r3, r2
 800838a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800838c:	f7fe fbe8 	bl	8006b60 <HAL_GetTick>
 8008390:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b20      	cmp	r3, #32
 800839c:	f040 80e0 	bne.w	8008560 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2319      	movs	r3, #25
 80083a6:	2201      	movs	r2, #1
 80083a8:	4970      	ldr	r1, [pc, #448]	; (800856c <HAL_I2C_Master_Transmit+0x1f4>)
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fc58 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80083b6:	2302      	movs	r3, #2
 80083b8:	e0d3      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d101      	bne.n	80083c8 <HAL_I2C_Master_Transmit+0x50>
 80083c4:	2302      	movs	r3, #2
 80083c6:	e0cc      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d007      	beq.n	80083ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f042 0201 	orr.w	r2, r2, #1
 80083ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2221      	movs	r2, #33	; 0x21
 8008402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2210      	movs	r2, #16
 800840a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	893a      	ldrh	r2, [r7, #8]
 800841e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008424:	b29a      	uxth	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4a50      	ldr	r2, [pc, #320]	; (8008570 <HAL_I2C_Master_Transmit+0x1f8>)
 800842e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008430:	8979      	ldrh	r1, [r7, #10]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a3a      	ldr	r2, [r7, #32]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f000 fac2 	bl	80089c0 <I2C_MasterRequestWrite>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e08d      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008446:	2300      	movs	r3, #0
 8008448:	613b      	str	r3, [r7, #16]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	695b      	ldr	r3, [r3, #20]
 8008450:	613b      	str	r3, [r7, #16]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800845c:	e066      	b.n	800852c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	6a39      	ldr	r1, [r7, #32]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 fcd2 	bl	8008e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d00d      	beq.n	800848a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	2b04      	cmp	r3, #4
 8008474:	d107      	bne.n	8008486 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e06b      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	781a      	ldrb	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	3b01      	subs	r3, #1
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084b2:	3b01      	subs	r3, #1
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b04      	cmp	r3, #4
 80084c6:	d11b      	bne.n	8008500 <HAL_I2C_Master_Transmit+0x188>
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d017      	beq.n	8008500 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d4:	781a      	ldrb	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	3b01      	subs	r3, #1
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	6a39      	ldr	r1, [r7, #32]
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fcc2 	bl	8008e8e <I2C_WaitOnBTFFlagUntilTimeout>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00d      	beq.n	800852c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008514:	2b04      	cmp	r3, #4
 8008516:	d107      	bne.n	8008528 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008526:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e01a      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d194      	bne.n	800845e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2220      	movs	r2, #32
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2200      	movs	r2, #0
 8008558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800855c:	2300      	movs	r3, #0
 800855e:	e000      	b.n	8008562 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008560:	2302      	movs	r3, #2
  }
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	00100002 	.word	0x00100002
 8008570:	ffff0000 	.word	0xffff0000

08008574 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08c      	sub	sp, #48	; 0x30
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	461a      	mov	r2, r3
 8008580:	460b      	mov	r3, r1
 8008582:	817b      	strh	r3, [r7, #10]
 8008584:	4613      	mov	r3, r2
 8008586:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008588:	f7fe faea 	bl	8006b60 <HAL_GetTick>
 800858c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b20      	cmp	r3, #32
 8008598:	f040 820b 	bne.w	80089b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800859c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859e:	9300      	str	r3, [sp, #0]
 80085a0:	2319      	movs	r3, #25
 80085a2:	2201      	movs	r2, #1
 80085a4:	497c      	ldr	r1, [pc, #496]	; (8008798 <HAL_I2C_Master_Receive+0x224>)
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 fb5a 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
 80085b4:	e1fe      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_I2C_Master_Receive+0x50>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e1f7      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0301 	and.w	r3, r3, #1
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d007      	beq.n	80085ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f042 0201 	orr.w	r2, r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2222      	movs	r2, #34	; 0x22
 80085fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2210      	movs	r2, #16
 8008606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	893a      	ldrh	r2, [r7, #8]
 800861a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4a5c      	ldr	r2, [pc, #368]	; (800879c <HAL_I2C_Master_Receive+0x228>)
 800862a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800862c:	8979      	ldrh	r1, [r7, #10]
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f000 fa46 	bl	8008ac4 <I2C_MasterRequestRead>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e1b8      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d113      	bne.n	8008672 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800864a:	2300      	movs	r3, #0
 800864c:	623b      	str	r3, [r7, #32]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	623b      	str	r3, [r7, #32]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	623b      	str	r3, [r7, #32]
 800865e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	e18c      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008676:	2b01      	cmp	r3, #1
 8008678:	d11b      	bne.n	80086b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008688:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800868a:	2300      	movs	r3, #0
 800868c:	61fb      	str	r3, [r7, #28]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	61fb      	str	r3, [r7, #28]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	61fb      	str	r3, [r7, #28]
 800869e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	e16c      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d11b      	bne.n	80086f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086da:	2300      	movs	r3, #0
 80086dc:	61bb      	str	r3, [r7, #24]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	695b      	ldr	r3, [r3, #20]
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	69bb      	ldr	r3, [r7, #24]
 80086f0:	e14c      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008700:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008702:	2300      	movs	r3, #0
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	695b      	ldr	r3, [r3, #20]
 800870c:	617b      	str	r3, [r7, #20]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	617b      	str	r3, [r7, #20]
 8008716:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008718:	e138      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871e:	2b03      	cmp	r3, #3
 8008720:	f200 80f1 	bhi.w	8008906 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008728:	2b01      	cmp	r3, #1
 800872a:	d123      	bne.n	8008774 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 fbed 	bl	8008f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	e139      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874a:	b2d2      	uxtb	r2, r2
 800874c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	1c5a      	adds	r2, r3, #1
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800875c:	3b01      	subs	r3, #1
 800875e:	b29a      	uxth	r2, r3
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008768:	b29b      	uxth	r3, r3
 800876a:	3b01      	subs	r3, #1
 800876c:	b29a      	uxth	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008772:	e10b      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008778:	2b02      	cmp	r3, #2
 800877a:	d14e      	bne.n	800881a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2200      	movs	r2, #0
 8008784:	4906      	ldr	r1, [pc, #24]	; (80087a0 <HAL_I2C_Master_Receive+0x22c>)
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 fa6a 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d008      	beq.n	80087a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e10e      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
 8008796:	bf00      	nop
 8008798:	00100002 	.word	0x00100002
 800879c:	ffff0000 	.word	0xffff0000
 80087a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087be:	b2d2      	uxtb	r2, r2
 80087c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087c6:	1c5a      	adds	r2, r3, #1
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087d0:	3b01      	subs	r3, #1
 80087d2:	b29a      	uxth	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	3b01      	subs	r3, #1
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691a      	ldr	r2, [r3, #16]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	b2d2      	uxtb	r2, r2
 80087f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	1c5a      	adds	r2, r3, #1
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008802:	3b01      	subs	r3, #1
 8008804:	b29a      	uxth	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880e:	b29b      	uxth	r3, r3
 8008810:	3b01      	subs	r3, #1
 8008812:	b29a      	uxth	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008818:	e0b8      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	2200      	movs	r2, #0
 8008822:	4966      	ldr	r1, [pc, #408]	; (80089bc <HAL_I2C_Master_Receive+0x448>)
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 fa1b 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e0bf      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	b2d2      	uxtb	r2, r2
 8008850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008856:	1c5a      	adds	r2, r3, #1
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008860:	3b01      	subs	r3, #1
 8008862:	b29a      	uxth	r2, r3
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800886c:	b29b      	uxth	r3, r3
 800886e:	3b01      	subs	r3, #1
 8008870:	b29a      	uxth	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008878:	9300      	str	r3, [sp, #0]
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	2200      	movs	r2, #0
 800887e:	494f      	ldr	r1, [pc, #316]	; (80089bc <HAL_I2C_Master_Receive+0x448>)
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 f9ed 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	e091      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800889e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691a      	ldr	r2, [r3, #16]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	b2d2      	uxtb	r2, r2
 80088de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	1c5a      	adds	r2, r3, #1
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	3b01      	subs	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008904:	e042      	b.n	800898c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 fb00 	bl	8008f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e04c      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	691a      	ldr	r2, [r3, #16]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	b2d2      	uxtb	r2, r2
 8008926:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	1c5a      	adds	r2, r3, #1
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008936:	3b01      	subs	r3, #1
 8008938:	b29a      	uxth	r2, r3
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	f003 0304 	and.w	r3, r3, #4
 8008956:	2b04      	cmp	r3, #4
 8008958:	d118      	bne.n	800898c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	691a      	ldr	r2, [r3, #16]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	b2d2      	uxtb	r2, r2
 8008966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008976:	3b01      	subs	r3, #1
 8008978:	b29a      	uxth	r2, r3
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008982:	b29b      	uxth	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	b29a      	uxth	r2, r3
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	f47f aec2 	bne.w	800871a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3728      	adds	r7, #40	; 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	00010004 	.word	0x00010004

080089c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b088      	sub	sp, #32
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	460b      	mov	r3, r1
 80089ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d006      	beq.n	80089ea <I2C_MasterRequestWrite+0x2a>
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d003      	beq.n	80089ea <I2C_MasterRequestWrite+0x2a>
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089e8:	d108      	bne.n	80089fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089f8:	601a      	str	r2, [r3, #0]
 80089fa:	e00b      	b.n	8008a14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a00:	2b12      	cmp	r3, #18
 8008a02:	d107      	bne.n	8008a14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 f91d 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00d      	beq.n	8008a48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a3a:	d103      	bne.n	8008a44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e035      	b.n	8008ab4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a50:	d108      	bne.n	8008a64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a52:	897b      	ldrh	r3, [r7, #10]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	461a      	mov	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a60:	611a      	str	r2, [r3, #16]
 8008a62:	e01b      	b.n	8008a9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a64:	897b      	ldrh	r3, [r7, #10]
 8008a66:	11db      	asrs	r3, r3, #7
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	f003 0306 	and.w	r3, r3, #6
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	f063 030f 	orn	r3, r3, #15
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	490e      	ldr	r1, [pc, #56]	; (8008abc <I2C_MasterRequestWrite+0xfc>)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f943 	bl	8008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e010      	b.n	8008ab4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a92:	897b      	ldrh	r3, [r7, #10]
 8008a94:	b2da      	uxtb	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	4907      	ldr	r1, [pc, #28]	; (8008ac0 <I2C_MasterRequestWrite+0x100>)
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f933 	bl	8008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	00010008 	.word	0x00010008
 8008ac0:	00010002 	.word	0x00010002

08008ac4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b08      	cmp	r3, #8
 8008aee:	d006      	beq.n	8008afe <I2C_MasterRequestRead+0x3a>
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d003      	beq.n	8008afe <I2C_MasterRequestRead+0x3a>
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008afc:	d108      	bne.n	8008b10 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	e00b      	b.n	8008b28 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b14:	2b11      	cmp	r3, #17
 8008b16:	d107      	bne.n	8008b28 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 f893 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00d      	beq.n	8008b5c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b4e:	d103      	bne.n	8008b58 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008b58:	2303      	movs	r3, #3
 8008b5a:	e079      	b.n	8008c50 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	691b      	ldr	r3, [r3, #16]
 8008b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b64:	d108      	bne.n	8008b78 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008b66:	897b      	ldrh	r3, [r7, #10]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	611a      	str	r2, [r3, #16]
 8008b76:	e05f      	b.n	8008c38 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b78:	897b      	ldrh	r3, [r7, #10]
 8008b7a:	11db      	asrs	r3, r3, #7
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	f003 0306 	and.w	r3, r3, #6
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f063 030f 	orn	r3, r3, #15
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	4930      	ldr	r1, [pc, #192]	; (8008c58 <I2C_MasterRequestRead+0x194>)
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f8b9 	bl	8008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e054      	b.n	8008c50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008ba6:	897b      	ldrh	r3, [r7, #10]
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	4929      	ldr	r1, [pc, #164]	; (8008c5c <I2C_MasterRequestRead+0x198>)
 8008bb6:	68f8      	ldr	r0, [r7, #12]
 8008bb8:	f000 f8a9 	bl	8008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d001      	beq.n	8008bc6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	e044      	b.n	8008c50 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 f831 	bl	8008c60 <I2C_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00d      	beq.n	8008c20 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c12:	d103      	bne.n	8008c1c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c1a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	e017      	b.n	8008c50 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008c20:	897b      	ldrh	r3, [r7, #10]
 8008c22:	11db      	asrs	r3, r3, #7
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0306 	and.w	r3, r3, #6
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f063 030e 	orn	r3, r3, #14
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	4907      	ldr	r1, [pc, #28]	; (8008c5c <I2C_MasterRequestRead+0x198>)
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f000 f865 	bl	8008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e000      	b.n	8008c50 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	00010008 	.word	0x00010008
 8008c5c:	00010002 	.word	0x00010002

08008c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c70:	e025      	b.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c78:	d021      	beq.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c7a:	f7fd ff71 	bl	8006b60 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d116      	bne.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	f043 0220 	orr.w	r2, r3, #32
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e023      	b.n	8008d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0c1b      	lsrs	r3, r3, #16
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d10d      	bne.n	8008ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	43da      	mvns	r2, r3
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	e00c      	b.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	43da      	mvns	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	4013      	ands	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	bf0c      	ite	eq
 8008cf6:	2301      	moveq	r3, #1
 8008cf8:	2300      	movne	r3, #0
 8008cfa:	b2db      	uxtb	r3, r3
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d0b6      	beq.n	8008c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d1c:	e051      	b.n	8008dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d2c:	d123      	bne.n	8008d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2220      	movs	r2, #32
 8008d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d62:	f043 0204 	orr.w	r2, r3, #4
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e046      	b.n	8008e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d7c:	d021      	beq.n	8008dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7e:	f7fd feef 	bl	8006b60 <HAL_GetTick>
 8008d82:	4602      	mov	r2, r0
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d302      	bcc.n	8008d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d116      	bne.n	8008dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2200      	movs	r2, #0
 8008d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dae:	f043 0220 	orr.w	r2, r3, #32
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e020      	b.n	8008e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	0c1b      	lsrs	r3, r3, #16
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d10c      	bne.n	8008de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	43da      	mvns	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	e00b      	b.n	8008dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	699b      	ldr	r3, [r3, #24]
 8008dec:	43da      	mvns	r2, r3
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	4013      	ands	r3, r2
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bf14      	ite	ne
 8008df8:	2301      	movne	r3, #1
 8008dfa:	2300      	moveq	r3, #0
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d18d      	bne.n	8008d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e18:	e02d      	b.n	8008e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 f8ce 	bl	8008fbc <I2C_IsAcknowledgeFailed>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e02d      	b.n	8008e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e30:	d021      	beq.n	8008e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e32:	f7fd fe95 	bl	8006b60 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d302      	bcc.n	8008e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d116      	bne.n	8008e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	2220      	movs	r2, #32
 8008e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e62:	f043 0220 	orr.w	r2, r3, #32
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e007      	b.n	8008e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e80:	2b80      	cmp	r3, #128	; 0x80
 8008e82:	d1ca      	bne.n	8008e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	60f8      	str	r0, [r7, #12]
 8008e96:	60b9      	str	r1, [r7, #8]
 8008e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e9a:	e02d      	b.n	8008ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f000 f88d 	bl	8008fbc <I2C_IsAcknowledgeFailed>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d001      	beq.n	8008eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e02d      	b.n	8008f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb2:	d021      	beq.n	8008ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eb4:	f7fd fe54 	bl	8006b60 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d302      	bcc.n	8008eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d116      	bne.n	8008ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2220      	movs	r2, #32
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	f043 0220 	orr.w	r2, r3, #32
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e007      	b.n	8008f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	f003 0304 	and.w	r3, r3, #4
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d1ca      	bne.n	8008e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008f1c:	e042      	b.n	8008fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	695b      	ldr	r3, [r3, #20]
 8008f24:	f003 0310 	and.w	r3, r3, #16
 8008f28:	2b10      	cmp	r3, #16
 8008f2a:	d119      	bne.n	8008f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f06f 0210 	mvn.w	r2, #16
 8008f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2220      	movs	r2, #32
 8008f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e029      	b.n	8008fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f60:	f7fd fdfe 	bl	8006b60 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d302      	bcc.n	8008f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d116      	bne.n	8008fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2220      	movs	r2, #32
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	f043 0220 	orr.w	r2, r3, #32
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e007      	b.n	8008fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fae:	2b40      	cmp	r3, #64	; 0x40
 8008fb0:	d1b5      	bne.n	8008f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	695b      	ldr	r3, [r3, #20]
 8008fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd2:	d11b      	bne.n	800900c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2220      	movs	r2, #32
 8008fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	f043 0204 	orr.w	r2, r3, #4
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e000      	b.n	800900e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
	...

0800901c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4b20      	ldr	r3, [pc, #128]	; (80090ac <HAL_PWREx_EnableOverDrive+0x90>)
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	4a1f      	ldr	r2, [pc, #124]	; (80090ac <HAL_PWREx_EnableOverDrive+0x90>)
 8009030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009034:	6413      	str	r3, [r2, #64]	; 0x40
 8009036:	4b1d      	ldr	r3, [pc, #116]	; (80090ac <HAL_PWREx_EnableOverDrive+0x90>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903e:	603b      	str	r3, [r7, #0]
 8009040:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8009042:	4b1b      	ldr	r3, [pc, #108]	; (80090b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8009044:	2201      	movs	r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009048:	f7fd fd8a 	bl	8006b60 <HAL_GetTick>
 800904c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800904e:	e009      	b.n	8009064 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009050:	f7fd fd86 	bl	8006b60 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800905e:	d901      	bls.n	8009064 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e01f      	b.n	80090a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8009064:	4b13      	ldr	r3, [pc, #76]	; (80090b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d1ee      	bne.n	8009050 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8009072:	4b11      	ldr	r3, [pc, #68]	; (80090b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8009074:	2201      	movs	r2, #1
 8009076:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009078:	f7fd fd72 	bl	8006b60 <HAL_GetTick>
 800907c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800907e:	e009      	b.n	8009094 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8009080:	f7fd fd6e 	bl	8006b60 <HAL_GetTick>
 8009084:	4602      	mov	r2, r0
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	1ad3      	subs	r3, r2, r3
 800908a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800908e:	d901      	bls.n	8009094 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8009090:	2303      	movs	r3, #3
 8009092:	e007      	b.n	80090a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8009094:	4b07      	ldr	r3, [pc, #28]	; (80090b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090a0:	d1ee      	bne.n	8009080 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3708      	adds	r7, #8
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	40023800 	.word	0x40023800
 80090b0:	420e0040 	.word	0x420e0040
 80090b4:	40007000 	.word	0x40007000
 80090b8:	420e0044 	.word	0x420e0044

080090bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d101      	bne.n	80090d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090cc:	2301      	movs	r3, #1
 80090ce:	e0cc      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090d0:	4b68      	ldr	r3, [pc, #416]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d90c      	bls.n	80090f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090de:	4b65      	ldr	r3, [pc, #404]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	b2d2      	uxtb	r2, r2
 80090e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e6:	4b63      	ldr	r3, [pc, #396]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d001      	beq.n	80090f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e0b8      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0302 	and.w	r3, r3, #2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d020      	beq.n	8009146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d005      	beq.n	800911c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009110:	4b59      	ldr	r3, [pc, #356]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009112:	689b      	ldr	r3, [r3, #8]
 8009114:	4a58      	ldr	r2, [pc, #352]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800911a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b00      	cmp	r3, #0
 8009126:	d005      	beq.n	8009134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009128:	4b53      	ldr	r3, [pc, #332]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	4a52      	ldr	r2, [pc, #328]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800912e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009134:	4b50      	ldr	r3, [pc, #320]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	494d      	ldr	r1, [pc, #308]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009142:	4313      	orrs	r3, r2
 8009144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0301 	and.w	r3, r3, #1
 800914e:	2b00      	cmp	r3, #0
 8009150:	d044      	beq.n	80091dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d107      	bne.n	800916a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800915a:	4b47      	ldr	r3, [pc, #284]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d119      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e07f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	2b02      	cmp	r3, #2
 8009170:	d003      	beq.n	800917a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009176:	2b03      	cmp	r3, #3
 8009178:	d107      	bne.n	800918a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800917a:	4b3f      	ldr	r3, [pc, #252]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d109      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	e06f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800918a:	4b3b      	ldr	r3, [pc, #236]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e067      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800919a:	4b37      	ldr	r3, [pc, #220]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f023 0203 	bic.w	r2, r3, #3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	4934      	ldr	r1, [pc, #208]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 80091a8:	4313      	orrs	r3, r2
 80091aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091ac:	f7fd fcd8 	bl	8006b60 <HAL_GetTick>
 80091b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091b2:	e00a      	b.n	80091ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091b4:	f7fd fcd4 	bl	8006b60 <HAL_GetTick>
 80091b8:	4602      	mov	r2, r0
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	1ad3      	subs	r3, r2, r3
 80091be:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e04f      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ca:	4b2b      	ldr	r3, [pc, #172]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f003 020c 	and.w	r2, r3, #12
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	429a      	cmp	r2, r3
 80091da:	d1eb      	bne.n	80091b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091dc:	4b25      	ldr	r3, [pc, #148]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 030f 	and.w	r3, r3, #15
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d20c      	bcs.n	8009204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ea:	4b22      	ldr	r3, [pc, #136]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091ec:	683a      	ldr	r2, [r7, #0]
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f2:	4b20      	ldr	r3, [pc, #128]	; (8009274 <HAL_RCC_ClockConfig+0x1b8>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d001      	beq.n	8009204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e032      	b.n	800926a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d008      	beq.n	8009222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	4916      	ldr	r1, [pc, #88]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800921e:	4313      	orrs	r3, r2
 8009220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800922e:	4b12      	ldr	r3, [pc, #72]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	490e      	ldr	r1, [pc, #56]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800923e:	4313      	orrs	r3, r2
 8009240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009242:	f000 f821 	bl	8009288 <HAL_RCC_GetSysClockFreq>
 8009246:	4601      	mov	r1, r0
 8009248:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <HAL_RCC_ClockConfig+0x1bc>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	091b      	lsrs	r3, r3, #4
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	4a0a      	ldr	r2, [pc, #40]	; (800927c <HAL_RCC_ClockConfig+0x1c0>)
 8009254:	5cd3      	ldrb	r3, [r2, r3]
 8009256:	fa21 f303 	lsr.w	r3, r1, r3
 800925a:	4a09      	ldr	r2, [pc, #36]	; (8009280 <HAL_RCC_ClockConfig+0x1c4>)
 800925c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800925e:	4b09      	ldr	r3, [pc, #36]	; (8009284 <HAL_RCC_ClockConfig+0x1c8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4618      	mov	r0, r3
 8009264:	f7fd fc38 	bl	8006ad8 <HAL_InitTick>

  return HAL_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	40023c00 	.word	0x40023c00
 8009278:	40023800 	.word	0x40023800
 800927c:	080178e4 	.word	0x080178e4
 8009280:	20000000 	.word	0x20000000
 8009284:	20000004 	.word	0x20000004

08009288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800928a:	b085      	sub	sp, #20
 800928c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800928e:	2300      	movs	r3, #0
 8009290:	607b      	str	r3, [r7, #4]
 8009292:	2300      	movs	r3, #0
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	2300      	movs	r3, #0
 8009298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800929e:	4b63      	ldr	r3, [pc, #396]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d007      	beq.n	80092ba <HAL_RCC_GetSysClockFreq+0x32>
 80092aa:	2b08      	cmp	r3, #8
 80092ac:	d008      	beq.n	80092c0 <HAL_RCC_GetSysClockFreq+0x38>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f040 80b4 	bne.w	800941c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092b4:	4b5e      	ldr	r3, [pc, #376]	; (8009430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80092b6:	60bb      	str	r3, [r7, #8]
       break;
 80092b8:	e0b3      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092ba:	4b5d      	ldr	r3, [pc, #372]	; (8009430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80092bc:	60bb      	str	r3, [r7, #8]
      break;
 80092be:	e0b0      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092c0:	4b5a      	ldr	r3, [pc, #360]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092ca:	4b58      	ldr	r3, [pc, #352]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d04a      	beq.n	800936c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092d6:	4b55      	ldr	r3, [pc, #340]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	099b      	lsrs	r3, r3, #6
 80092dc:	f04f 0400 	mov.w	r4, #0
 80092e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	ea03 0501 	and.w	r5, r3, r1
 80092ec:	ea04 0602 	and.w	r6, r4, r2
 80092f0:	4629      	mov	r1, r5
 80092f2:	4632      	mov	r2, r6
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	f04f 0400 	mov.w	r4, #0
 80092fc:	0154      	lsls	r4, r2, #5
 80092fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009302:	014b      	lsls	r3, r1, #5
 8009304:	4619      	mov	r1, r3
 8009306:	4622      	mov	r2, r4
 8009308:	1b49      	subs	r1, r1, r5
 800930a:	eb62 0206 	sbc.w	r2, r2, r6
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	f04f 0400 	mov.w	r4, #0
 8009316:	0194      	lsls	r4, r2, #6
 8009318:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800931c:	018b      	lsls	r3, r1, #6
 800931e:	1a5b      	subs	r3, r3, r1
 8009320:	eb64 0402 	sbc.w	r4, r4, r2
 8009324:	f04f 0100 	mov.w	r1, #0
 8009328:	f04f 0200 	mov.w	r2, #0
 800932c:	00e2      	lsls	r2, r4, #3
 800932e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009332:	00d9      	lsls	r1, r3, #3
 8009334:	460b      	mov	r3, r1
 8009336:	4614      	mov	r4, r2
 8009338:	195b      	adds	r3, r3, r5
 800933a:	eb44 0406 	adc.w	r4, r4, r6
 800933e:	f04f 0100 	mov.w	r1, #0
 8009342:	f04f 0200 	mov.w	r2, #0
 8009346:	02a2      	lsls	r2, r4, #10
 8009348:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800934c:	0299      	lsls	r1, r3, #10
 800934e:	460b      	mov	r3, r1
 8009350:	4614      	mov	r4, r2
 8009352:	4618      	mov	r0, r3
 8009354:	4621      	mov	r1, r4
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f04f 0400 	mov.w	r4, #0
 800935c:	461a      	mov	r2, r3
 800935e:	4623      	mov	r3, r4
 8009360:	f7f7 fcaa 	bl	8000cb8 <__aeabi_uldivmod>
 8009364:	4603      	mov	r3, r0
 8009366:	460c      	mov	r4, r1
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	e049      	b.n	8009400 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800936c:	4b2f      	ldr	r3, [pc, #188]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	099b      	lsrs	r3, r3, #6
 8009372:	f04f 0400 	mov.w	r4, #0
 8009376:	f240 11ff 	movw	r1, #511	; 0x1ff
 800937a:	f04f 0200 	mov.w	r2, #0
 800937e:	ea03 0501 	and.w	r5, r3, r1
 8009382:	ea04 0602 	and.w	r6, r4, r2
 8009386:	4629      	mov	r1, r5
 8009388:	4632      	mov	r2, r6
 800938a:	f04f 0300 	mov.w	r3, #0
 800938e:	f04f 0400 	mov.w	r4, #0
 8009392:	0154      	lsls	r4, r2, #5
 8009394:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009398:	014b      	lsls	r3, r1, #5
 800939a:	4619      	mov	r1, r3
 800939c:	4622      	mov	r2, r4
 800939e:	1b49      	subs	r1, r1, r5
 80093a0:	eb62 0206 	sbc.w	r2, r2, r6
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	f04f 0400 	mov.w	r4, #0
 80093ac:	0194      	lsls	r4, r2, #6
 80093ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80093b2:	018b      	lsls	r3, r1, #6
 80093b4:	1a5b      	subs	r3, r3, r1
 80093b6:	eb64 0402 	sbc.w	r4, r4, r2
 80093ba:	f04f 0100 	mov.w	r1, #0
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	00e2      	lsls	r2, r4, #3
 80093c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80093c8:	00d9      	lsls	r1, r3, #3
 80093ca:	460b      	mov	r3, r1
 80093cc:	4614      	mov	r4, r2
 80093ce:	195b      	adds	r3, r3, r5
 80093d0:	eb44 0406 	adc.w	r4, r4, r6
 80093d4:	f04f 0100 	mov.w	r1, #0
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	02a2      	lsls	r2, r4, #10
 80093de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80093e2:	0299      	lsls	r1, r3, #10
 80093e4:	460b      	mov	r3, r1
 80093e6:	4614      	mov	r4, r2
 80093e8:	4618      	mov	r0, r3
 80093ea:	4621      	mov	r1, r4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f04f 0400 	mov.w	r4, #0
 80093f2:	461a      	mov	r2, r3
 80093f4:	4623      	mov	r3, r4
 80093f6:	f7f7 fc5f 	bl	8000cb8 <__aeabi_uldivmod>
 80093fa:	4603      	mov	r3, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009400:	4b0a      	ldr	r3, [pc, #40]	; (800942c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	0c1b      	lsrs	r3, r3, #16
 8009406:	f003 0303 	and.w	r3, r3, #3
 800940a:	3301      	adds	r3, #1
 800940c:	005b      	lsls	r3, r3, #1
 800940e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	fbb2 f3f3 	udiv	r3, r2, r3
 8009418:	60bb      	str	r3, [r7, #8]
      break;
 800941a:	e002      	b.n	8009422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800941e:	60bb      	str	r3, [r7, #8]
      break;
 8009420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009422:	68bb      	ldr	r3, [r7, #8]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942c:	40023800 	.word	0x40023800
 8009430:	00f42400 	.word	0x00f42400

08009434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009438:	4b03      	ldr	r3, [pc, #12]	; (8009448 <HAL_RCC_GetHCLKFreq+0x14>)
 800943a:	681b      	ldr	r3, [r3, #0]
}
 800943c:	4618      	mov	r0, r3
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr
 8009446:	bf00      	nop
 8009448:	20000000 	.word	0x20000000

0800944c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009450:	f7ff fff0 	bl	8009434 <HAL_RCC_GetHCLKFreq>
 8009454:	4601      	mov	r1, r0
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	0a9b      	lsrs	r3, r3, #10
 800945c:	f003 0307 	and.w	r3, r3, #7
 8009460:	4a03      	ldr	r2, [pc, #12]	; (8009470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009462:	5cd3      	ldrb	r3, [r2, r3]
 8009464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009468:	4618      	mov	r0, r3
 800946a:	bd80      	pop	{r7, pc}
 800946c:	40023800 	.word	0x40023800
 8009470:	080178f4 	.word	0x080178f4

08009474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009478:	f7ff ffdc 	bl	8009434 <HAL_RCC_GetHCLKFreq>
 800947c:	4601      	mov	r1, r0
 800947e:	4b05      	ldr	r3, [pc, #20]	; (8009494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	0b5b      	lsrs	r3, r3, #13
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	4a03      	ldr	r2, [pc, #12]	; (8009498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800948a:	5cd3      	ldrb	r3, [r2, r3]
 800948c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009490:	4618      	mov	r0, r3
 8009492:	bd80      	pop	{r7, pc}
 8009494:	40023800 	.word	0x40023800
 8009498:	080178f4 	.word	0x080178f4

0800949c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80094c4:	4b66      	ldr	r3, [pc, #408]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80094c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ca:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	4963      	ldr	r1, [pc, #396]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80094d4:	4313      	orrs	r3, r2
 80094d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d00a      	beq.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80094e6:	4b5e      	ldr	r3, [pc, #376]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ec:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f4:	495a      	ldr	r1, [pc, #360]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10b      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009510:	2b00      	cmp	r3, #0
 8009512:	d105      	bne.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800951c:	2b00      	cmp	r3, #0
 800951e:	d075      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009520:	4b50      	ldr	r3, [pc, #320]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009526:	f7fd fb1b 	bl	8006b60 <HAL_GetTick>
 800952a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800952c:	e008      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800952e:	f7fd fb17 	bl	8006b60 <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	69fb      	ldr	r3, [r7, #28]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b02      	cmp	r3, #2
 800953a:	d901      	bls.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e1dc      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009540:	4b47      	ldr	r3, [pc, #284]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1f0      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	019a      	lsls	r2, r3, #6
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	071b      	lsls	r3, r3, #28
 8009564:	493e      	ldr	r1, [pc, #248]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009566:	4313      	orrs	r3, r2
 8009568:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f003 0302 	and.w	r3, r3, #2
 8009574:	2b00      	cmp	r3, #0
 8009576:	d01f      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009578:	4b39      	ldr	r3, [pc, #228]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800957a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800957e:	0f1b      	lsrs	r3, r3, #28
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	019a      	lsls	r2, r3, #6
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	061b      	lsls	r3, r3, #24
 8009592:	431a      	orrs	r2, r3
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	071b      	lsls	r3, r3, #28
 8009598:	4931      	ldr	r1, [pc, #196]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800959a:	4313      	orrs	r3, r2
 800959c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80095a0:	4b2f      	ldr	r3, [pc, #188]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a6:	f023 021f 	bic.w	r2, r3, #31
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	492b      	ldr	r1, [pc, #172]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095b2:	4313      	orrs	r3, r2
 80095b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d00d      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	019a      	lsls	r2, r3, #6
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	061b      	lsls	r3, r3, #24
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	071b      	lsls	r3, r3, #28
 80095d8:	4921      	ldr	r1, [pc, #132]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80095e0:	4b20      	ldr	r3, [pc, #128]	; (8009664 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80095e2:	2201      	movs	r2, #1
 80095e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095e6:	f7fd fabb 	bl	8006b60 <HAL_GetTick>
 80095ea:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80095ec:	e008      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095ee:	f7fd fab7 	bl	8006b60 <HAL_GetTick>
 80095f2:	4602      	mov	r2, r0
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	1ad3      	subs	r3, r2, r3
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d901      	bls.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095fc:	2303      	movs	r3, #3
 80095fe:	e17c      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009600:	4b17      	ldr	r3, [pc, #92]	; (8009660 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d0f0      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0304 	and.w	r3, r3, #4
 8009614:	2b00      	cmp	r3, #0
 8009616:	d112      	bne.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10c      	bne.n	800963e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80ce 	beq.w	80097ce <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8009636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800963a:	f040 80c8 	bne.w	80097ce <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800963e:	4b0a      	ldr	r3, [pc, #40]	; (8009668 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009644:	f7fd fa8c 	bl	8006b60 <HAL_GetTick>
 8009648:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800964a:	e00f      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800964c:	f7fd fa88 	bl	8006b60 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d908      	bls.n	800966c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e14d      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800965e:	bf00      	nop
 8009660:	40023800 	.word	0x40023800
 8009664:	42470068 	.word	0x42470068
 8009668:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800966c:	4ba5      	ldr	r3, [pc, #660]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009678:	d0e8      	beq.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d02e      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8009686:	4b9f      	ldr	r3, [pc, #636]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	3301      	adds	r3, #1
 8009694:	005b      	lsls	r3, r3, #1
 8009696:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009698:	4b9a      	ldr	r3, [pc, #616]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800969a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969e:	0f1b      	lsrs	r3, r3, #28
 80096a0:	f003 0307 	and.w	r3, r3, #7
 80096a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	019a      	lsls	r2, r3, #6
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	085b      	lsrs	r3, r3, #1
 80096b0:	3b01      	subs	r3, #1
 80096b2:	041b      	lsls	r3, r3, #16
 80096b4:	431a      	orrs	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	061b      	lsls	r3, r3, #24
 80096bc:	431a      	orrs	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	071b      	lsls	r3, r3, #28
 80096c2:	4990      	ldr	r1, [pc, #576]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096c4:	4313      	orrs	r3, r2
 80096c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80096ca:	4b8e      	ldr	r3, [pc, #568]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	3b01      	subs	r3, #1
 80096da:	021b      	lsls	r3, r3, #8
 80096dc:	4989      	ldr	r1, [pc, #548]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0308 	and.w	r3, r3, #8
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d02c      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80096f0:	4b84      	ldr	r3, [pc, #528]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80096f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f6:	0c1b      	lsrs	r3, r3, #16
 80096f8:	f003 0303 	and.w	r3, r3, #3
 80096fc:	3301      	adds	r3, #1
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009702:	4b80      	ldr	r3, [pc, #512]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	0e1b      	lsrs	r3, r3, #24
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	019a      	lsls	r2, r3, #6
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	085b      	lsrs	r3, r3, #1
 800971a:	3b01      	subs	r3, #1
 800971c:	041b      	lsls	r3, r3, #16
 800971e:	431a      	orrs	r2, r3
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	061b      	lsls	r3, r3, #24
 8009724:	431a      	orrs	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	071b      	lsls	r3, r3, #28
 800972c:	4975      	ldr	r1, [pc, #468]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800972e:	4313      	orrs	r3, r2
 8009730:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009734:	4b73      	ldr	r3, [pc, #460]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800973a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	4970      	ldr	r1, [pc, #448]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b00      	cmp	r3, #0
 8009754:	d024      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800975a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800975e:	d11f      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009760:	4b68      	ldr	r3, [pc, #416]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009766:	0e1b      	lsrs	r3, r3, #24
 8009768:	f003 030f 	and.w	r3, r3, #15
 800976c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800976e:	4b65      	ldr	r3, [pc, #404]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009774:	0f1b      	lsrs	r3, r3, #28
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	019a      	lsls	r2, r3, #6
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	085b      	lsrs	r3, r3, #1
 8009788:	3b01      	subs	r3, #1
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	431a      	orrs	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	061b      	lsls	r3, r3, #24
 8009792:	431a      	orrs	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	071b      	lsls	r3, r3, #28
 8009798:	495a      	ldr	r1, [pc, #360]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800979a:	4313      	orrs	r3, r2
 800979c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097a0:	4b59      	ldr	r3, [pc, #356]	; (8009908 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80097a6:	f7fd f9db 	bl	8006b60 <HAL_GetTick>
 80097aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097ac:	e008      	b.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80097ae:	f7fd f9d7 	bl	8006b60 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d901      	bls.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	e09c      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097c0:	4b50      	ldr	r3, [pc, #320]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097cc:	d1ef      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 8083 	beq.w	80098e2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80097dc:	2300      	movs	r3, #0
 80097de:	60bb      	str	r3, [r7, #8]
 80097e0:	4b48      	ldr	r3, [pc, #288]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e4:	4a47      	ldr	r2, [pc, #284]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ea:	6413      	str	r3, [r2, #64]	; 0x40
 80097ec:	4b45      	ldr	r3, [pc, #276]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80097ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097f4:	60bb      	str	r3, [r7, #8]
 80097f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80097f8:	4b44      	ldr	r3, [pc, #272]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a43      	ldr	r2, [pc, #268]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80097fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009802:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009804:	f7fd f9ac 	bl	8006b60 <HAL_GetTick>
 8009808:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800980a:	e008      	b.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800980c:	f7fd f9a8 	bl	8006b60 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	2b02      	cmp	r3, #2
 8009818:	d901      	bls.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800981a:	2303      	movs	r3, #3
 800981c:	e06d      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800981e:	4b3b      	ldr	r3, [pc, #236]	; (800990c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009826:	2b00      	cmp	r3, #0
 8009828:	d0f0      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800982a:	4b36      	ldr	r3, [pc, #216]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009832:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02f      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	429a      	cmp	r2, r3
 8009846:	d028      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009848:	4b2e      	ldr	r3, [pc, #184]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800984a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800984c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009850:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009852:	4b2f      	ldr	r3, [pc, #188]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009854:	2201      	movs	r2, #1
 8009856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009858:	4b2d      	ldr	r3, [pc, #180]	; (8009910 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800985e:	4a29      	ldr	r2, [pc, #164]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009864:	4b27      	ldr	r3, [pc, #156]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009868:	f003 0301 	and.w	r3, r3, #1
 800986c:	2b01      	cmp	r3, #1
 800986e:	d114      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009870:	f7fd f976 	bl	8006b60 <HAL_GetTick>
 8009874:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009876:	e00a      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009878:	f7fd f972 	bl	8006b60 <HAL_GetTick>
 800987c:	4602      	mov	r2, r0
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	f241 3288 	movw	r2, #5000	; 0x1388
 8009886:	4293      	cmp	r3, r2
 8009888:	d901      	bls.n	800988e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800988a:	2303      	movs	r3, #3
 800988c:	e035      	b.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800988e:	4b1d      	ldr	r3, [pc, #116]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009892:	f003 0302 	and.w	r3, r3, #2
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0ee      	beq.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098a6:	d10d      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80098a8:	4b16      	ldr	r3, [pc, #88]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098bc:	4911      	ldr	r1, [pc, #68]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098be:	4313      	orrs	r3, r2
 80098c0:	608b      	str	r3, [r1, #8]
 80098c2:	e005      	b.n	80098d0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	4a0e      	ldr	r2, [pc, #56]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80098ce:	6093      	str	r3, [r2, #8]
 80098d0:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098dc:	4909      	ldr	r1, [pc, #36]	; (8009904 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80098de:	4313      	orrs	r3, r2
 80098e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f003 0310 	and.w	r3, r3, #16
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80098f4:	4b07      	ldr	r3, [pc, #28]	; (8009914 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80098f6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	40023800 	.word	0x40023800
 8009908:	42470070 	.word	0x42470070
 800990c:	40007000 	.word	0x40007000
 8009910:	42470e40 	.word	0x42470e40
 8009914:	424711e0 	.word	0x424711e0

08009918 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0301 	and.w	r3, r3, #1
 800992c:	2b00      	cmp	r3, #0
 800992e:	d075      	beq.n	8009a1c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009930:	4ba2      	ldr	r3, [pc, #648]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	f003 030c 	and.w	r3, r3, #12
 8009938:	2b04      	cmp	r3, #4
 800993a:	d00c      	beq.n	8009956 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800993c:	4b9f      	ldr	r3, [pc, #636]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009944:	2b08      	cmp	r3, #8
 8009946:	d112      	bne.n	800996e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009948:	4b9c      	ldr	r3, [pc, #624]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009954:	d10b      	bne.n	800996e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009956:	4b99      	ldr	r3, [pc, #612]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995e:	2b00      	cmp	r3, #0
 8009960:	d05b      	beq.n	8009a1a <HAL_RCC_OscConfig+0x102>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d157      	bne.n	8009a1a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e20b      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009976:	d106      	bne.n	8009986 <HAL_RCC_OscConfig+0x6e>
 8009978:	4b90      	ldr	r3, [pc, #576]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a8f      	ldr	r2, [pc, #572]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 800997e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	e01d      	b.n	80099c2 <HAL_RCC_OscConfig+0xaa>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800998e:	d10c      	bne.n	80099aa <HAL_RCC_OscConfig+0x92>
 8009990:	4b8a      	ldr	r3, [pc, #552]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a89      	ldr	r2, [pc, #548]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800999a:	6013      	str	r3, [r2, #0]
 800999c:	4b87      	ldr	r3, [pc, #540]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a86      	ldr	r2, [pc, #536]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a6:	6013      	str	r3, [r2, #0]
 80099a8:	e00b      	b.n	80099c2 <HAL_RCC_OscConfig+0xaa>
 80099aa:	4b84      	ldr	r3, [pc, #528]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a83      	ldr	r2, [pc, #524]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	4b81      	ldr	r3, [pc, #516]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a80      	ldr	r2, [pc, #512]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d013      	beq.n	80099f2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ca:	f7fd f8c9 	bl	8006b60 <HAL_GetTick>
 80099ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099d0:	e008      	b.n	80099e4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099d2:	f7fd f8c5 	bl	8006b60 <HAL_GetTick>
 80099d6:	4602      	mov	r2, r0
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	2b64      	cmp	r3, #100	; 0x64
 80099de:	d901      	bls.n	80099e4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80099e0:	2303      	movs	r3, #3
 80099e2:	e1d0      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80099e4:	4b75      	ldr	r3, [pc, #468]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f0      	beq.n	80099d2 <HAL_RCC_OscConfig+0xba>
 80099f0:	e014      	b.n	8009a1c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f2:	f7fd f8b5 	bl	8006b60 <HAL_GetTick>
 80099f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80099f8:	e008      	b.n	8009a0c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80099fa:	f7fd f8b1 	bl	8006b60 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	2b64      	cmp	r3, #100	; 0x64
 8009a06:	d901      	bls.n	8009a0c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	e1bc      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009a0c:	4b6b      	ldr	r3, [pc, #428]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1f0      	bne.n	80099fa <HAL_RCC_OscConfig+0xe2>
 8009a18:	e000      	b.n	8009a1c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d063      	beq.n	8009af0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009a28:	4b64      	ldr	r3, [pc, #400]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	f003 030c 	and.w	r3, r3, #12
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a34:	4b61      	ldr	r3, [pc, #388]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009a3c:	2b08      	cmp	r3, #8
 8009a3e:	d11c      	bne.n	8009a7a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009a40:	4b5e      	ldr	r3, [pc, #376]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d116      	bne.n	8009a7a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a4c:	4b5b      	ldr	r3, [pc, #364]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d005      	beq.n	8009a64 <HAL_RCC_OscConfig+0x14c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68db      	ldr	r3, [r3, #12]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d001      	beq.n	8009a64 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009a60:	2301      	movs	r3, #1
 8009a62:	e190      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a64:	4b55      	ldr	r3, [pc, #340]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	4952      	ldr	r1, [pc, #328]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009a78:	e03a      	b.n	8009af0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68db      	ldr	r3, [r3, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d020      	beq.n	8009ac4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009a82:	4b4f      	ldr	r3, [pc, #316]	; (8009bc0 <HAL_RCC_OscConfig+0x2a8>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a88:	f7fd f86a 	bl	8006b60 <HAL_GetTick>
 8009a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a8e:	e008      	b.n	8009aa2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a90:	f7fd f866 	bl	8006b60 <HAL_GetTick>
 8009a94:	4602      	mov	r2, r0
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	1ad3      	subs	r3, r2, r3
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d901      	bls.n	8009aa2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e171      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009aa2:	4b46      	ldr	r3, [pc, #280]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0f0      	beq.n	8009a90 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aae:	4b43      	ldr	r3, [pc, #268]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	493f      	ldr	r1, [pc, #252]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	e015      	b.n	8009af0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009ac4:	4b3e      	ldr	r3, [pc, #248]	; (8009bc0 <HAL_RCC_OscConfig+0x2a8>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aca:	f7fd f849 	bl	8006b60 <HAL_GetTick>
 8009ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ad0:	e008      	b.n	8009ae4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009ad2:	f7fd f845 	bl	8006b60 <HAL_GetTick>
 8009ad6:	4602      	mov	r2, r0
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	1ad3      	subs	r3, r2, r3
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	d901      	bls.n	8009ae4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	e150      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009ae4:	4b35      	ldr	r3, [pc, #212]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1f0      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f003 0308 	and.w	r3, r3, #8
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d030      	beq.n	8009b5e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d016      	beq.n	8009b32 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b04:	4b2f      	ldr	r3, [pc, #188]	; (8009bc4 <HAL_RCC_OscConfig+0x2ac>)
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0a:	f7fd f829 	bl	8006b60 <HAL_GetTick>
 8009b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b10:	e008      	b.n	8009b24 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b12:	f7fd f825 	bl	8006b60 <HAL_GetTick>
 8009b16:	4602      	mov	r2, r0
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d901      	bls.n	8009b24 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009b20:	2303      	movs	r3, #3
 8009b22:	e130      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009b24:	4b25      	ldr	r3, [pc, #148]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0f0      	beq.n	8009b12 <HAL_RCC_OscConfig+0x1fa>
 8009b30:	e015      	b.n	8009b5e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <HAL_RCC_OscConfig+0x2ac>)
 8009b34:	2200      	movs	r2, #0
 8009b36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b38:	f7fd f812 	bl	8006b60 <HAL_GetTick>
 8009b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b3e:	e008      	b.n	8009b52 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b40:	f7fd f80e 	bl	8006b60 <HAL_GetTick>
 8009b44:	4602      	mov	r2, r0
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	1ad3      	subs	r3, r2, r3
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d901      	bls.n	8009b52 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009b4e:	2303      	movs	r3, #3
 8009b50:	e119      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009b52:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d1f0      	bne.n	8009b40 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0304 	and.w	r3, r3, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	f000 809f 	beq.w	8009caa <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b70:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10f      	bne.n	8009b9c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b84:	4a0d      	ldr	r2, [pc, #52]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8009b8c:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <HAL_RCC_OscConfig+0x2a4>)
 8009b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b9c:	4b0a      	ldr	r3, [pc, #40]	; (8009bc8 <HAL_RCC_OscConfig+0x2b0>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d120      	bne.n	8009bea <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <HAL_RCC_OscConfig+0x2b0>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a06      	ldr	r2, [pc, #24]	; (8009bc8 <HAL_RCC_OscConfig+0x2b0>)
 8009bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009bb4:	f7fc ffd4 	bl	8006b60 <HAL_GetTick>
 8009bb8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bba:	e010      	b.n	8009bde <HAL_RCC_OscConfig+0x2c6>
 8009bbc:	40023800 	.word	0x40023800
 8009bc0:	42470000 	.word	0x42470000
 8009bc4:	42470e80 	.word	0x42470e80
 8009bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009bcc:	f7fc ffc8 	bl	8006b60 <HAL_GetTick>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	1ad3      	subs	r3, r2, r3
 8009bd6:	2b02      	cmp	r3, #2
 8009bd8:	d901      	bls.n	8009bde <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e0d3      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009bde:	4b6c      	ldr	r3, [pc, #432]	; (8009d90 <HAL_RCC_OscConfig+0x478>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f0      	beq.n	8009bcc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	689b      	ldr	r3, [r3, #8]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d106      	bne.n	8009c00 <HAL_RCC_OscConfig+0x2e8>
 8009bf2:	4b68      	ldr	r3, [pc, #416]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf6:	4a67      	ldr	r2, [pc, #412]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009bf8:	f043 0301 	orr.w	r3, r3, #1
 8009bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8009bfe:	e01c      	b.n	8009c3a <HAL_RCC_OscConfig+0x322>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2b05      	cmp	r3, #5
 8009c06:	d10c      	bne.n	8009c22 <HAL_RCC_OscConfig+0x30a>
 8009c08:	4b62      	ldr	r3, [pc, #392]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c0c:	4a61      	ldr	r2, [pc, #388]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c0e:	f043 0304 	orr.w	r3, r3, #4
 8009c12:	6713      	str	r3, [r2, #112]	; 0x70
 8009c14:	4b5f      	ldr	r3, [pc, #380]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c18:	4a5e      	ldr	r2, [pc, #376]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c20:	e00b      	b.n	8009c3a <HAL_RCC_OscConfig+0x322>
 8009c22:	4b5c      	ldr	r3, [pc, #368]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c26:	4a5b      	ldr	r2, [pc, #364]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c28:	f023 0301 	bic.w	r3, r3, #1
 8009c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c2e:	4b59      	ldr	r3, [pc, #356]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c32:	4a58      	ldr	r2, [pc, #352]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c34:	f023 0304 	bic.w	r3, r3, #4
 8009c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d015      	beq.n	8009c6e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c42:	f7fc ff8d 	bl	8006b60 <HAL_GetTick>
 8009c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c48:	e00a      	b.n	8009c60 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c4a:	f7fc ff89 	bl	8006b60 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d901      	bls.n	8009c60 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e092      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c60:	4b4c      	ldr	r3, [pc, #304]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c64:	f003 0302 	and.w	r3, r3, #2
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d0ee      	beq.n	8009c4a <HAL_RCC_OscConfig+0x332>
 8009c6c:	e014      	b.n	8009c98 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c6e:	f7fc ff77 	bl	8006b60 <HAL_GetTick>
 8009c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c74:	e00a      	b.n	8009c8c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c76:	f7fc ff73 	bl	8006b60 <HAL_GetTick>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	1ad3      	subs	r3, r2, r3
 8009c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d901      	bls.n	8009c8c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e07c      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009c8c:	4b41      	ldr	r3, [pc, #260]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c90:	f003 0302 	and.w	r3, r3, #2
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1ee      	bne.n	8009c76 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d105      	bne.n	8009caa <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c9e:	4b3d      	ldr	r3, [pc, #244]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca2:	4a3c      	ldr	r2, [pc, #240]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	699b      	ldr	r3, [r3, #24]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d068      	beq.n	8009d84 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009cb2:	4b38      	ldr	r3, [pc, #224]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f003 030c 	and.w	r3, r3, #12
 8009cba:	2b08      	cmp	r3, #8
 8009cbc:	d060      	beq.n	8009d80 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d145      	bne.n	8009d52 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009cc6:	4b34      	ldr	r3, [pc, #208]	; (8009d98 <HAL_RCC_OscConfig+0x480>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ccc:	f7fc ff48 	bl	8006b60 <HAL_GetTick>
 8009cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009cd4:	f7fc ff44 	bl	8006b60 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e04f      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ce6:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f0      	bne.n	8009cd4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	69da      	ldr	r2, [r3, #28]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6a1b      	ldr	r3, [r3, #32]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d00:	019b      	lsls	r3, r3, #6
 8009d02:	431a      	orrs	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d08:	085b      	lsrs	r3, r3, #1
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	041b      	lsls	r3, r3, #16
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d14:	061b      	lsls	r3, r3, #24
 8009d16:	431a      	orrs	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d1c:	071b      	lsls	r3, r3, #28
 8009d1e:	491d      	ldr	r1, [pc, #116]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009d20:	4313      	orrs	r3, r2
 8009d22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009d24:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <HAL_RCC_OscConfig+0x480>)
 8009d26:	2201      	movs	r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2a:	f7fc ff19 	bl	8006b60 <HAL_GetTick>
 8009d2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d30:	e008      	b.n	8009d44 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d32:	f7fc ff15 	bl	8006b60 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e020      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009d44:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f0      	beq.n	8009d32 <HAL_RCC_OscConfig+0x41a>
 8009d50:	e018      	b.n	8009d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d52:	4b11      	ldr	r3, [pc, #68]	; (8009d98 <HAL_RCC_OscConfig+0x480>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d58:	f7fc ff02 	bl	8006b60 <HAL_GetTick>
 8009d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d5e:	e008      	b.n	8009d72 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d60:	f7fc fefe 	bl	8006b60 <HAL_GetTick>
 8009d64:	4602      	mov	r2, r0
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	1ad3      	subs	r3, r2, r3
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d901      	bls.n	8009d72 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009d6e:	2303      	movs	r3, #3
 8009d70:	e009      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009d72:	4b08      	ldr	r3, [pc, #32]	; (8009d94 <HAL_RCC_OscConfig+0x47c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1f0      	bne.n	8009d60 <HAL_RCC_OscConfig+0x448>
 8009d7e:	e001      	b.n	8009d84 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40007000 	.word	0x40007000
 8009d94:	40023800 	.word	0x40023800
 8009d98:	42470060 	.word	0x42470060

08009d9c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e022      	b.n	8009df4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009db4:	b2db      	uxtb	r3, r3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d105      	bne.n	8009dc6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f7fa fec5 	bl	8004b50 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2203      	movs	r2, #3
 8009dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f814 	bl	8009dfc <HAL_SD_InitCard>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e00a      	b.n	8009df4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009dfc:	b5b0      	push	{r4, r5, r7, lr}
 8009dfe:	b08e      	sub	sp, #56	; 0x38
 8009e00:	af04      	add	r7, sp, #16
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009e04:	2300      	movs	r3, #0
 8009e06:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009e10:	2300      	movs	r3, #0
 8009e12:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e14:	2300      	movs	r3, #0
 8009e16:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009e18:	2376      	movs	r3, #118	; 0x76
 8009e1a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681d      	ldr	r5, [r3, #0]
 8009e20:	466c      	mov	r4, sp
 8009e22:	f107 0314 	add.w	r3, r7, #20
 8009e26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009e2e:	f107 0308 	add.w	r3, r7, #8
 8009e32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e34:	4628      	mov	r0, r5
 8009e36:	f003 fa87 	bl	800d348 <SDIO_Init>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e031      	b.n	8009eb0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009e4c:	4b1a      	ldr	r3, [pc, #104]	; (8009eb8 <HAL_SD_InitCard+0xbc>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f003 fabf 	bl	800d3da <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009e5c:	4b16      	ldr	r3, [pc, #88]	; (8009eb8 <HAL_SD_InitCard+0xbc>)
 8009e5e:	2201      	movs	r2, #1
 8009e60:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 ffc6 	bl	800adf4 <SD_PowerON>
 8009e68:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e6a:	6a3b      	ldr	r3, [r7, #32]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00b      	beq.n	8009e88 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009e84:	2301      	movs	r3, #1
 8009e86:	e013      	b.n	8009eb0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fee5 	bl	800ac58 <SD_InitCard>
 8009e8e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009e90:	6a3b      	ldr	r3, [r7, #32]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00b      	beq.n	8009eae <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e000      	b.n	8009eb0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3728      	adds	r7, #40	; 0x28
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8009eb8:	422580a0 	.word	0x422580a0

08009ebc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b08c      	sub	sp, #48	; 0x30
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d107      	bne.n	8009ee4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e0c7      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	f040 80c0 	bne.w	800a072 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d907      	bls.n	8009f16 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009f12:	2301      	movs	r3, #1
 8009f14:	e0ae      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2203      	movs	r2, #3
 8009f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2200      	movs	r2, #0
 8009f24:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009f34:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3a:	4a50      	ldr	r2, [pc, #320]	; (800a07c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009f3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f42:	4a4f      	ldr	r2, [pc, #316]	; (800a080 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009f44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	3380      	adds	r3, #128	; 0x80
 8009f58:	4619      	mov	r1, r3
 8009f5a:	68ba      	ldr	r2, [r7, #8]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	025b      	lsls	r3, r3, #9
 8009f60:	089b      	lsrs	r3, r3, #2
 8009f62:	f7fd fbef 	bl	8007744 <HAL_DMA_Start_IT>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d017      	beq.n	8009f9c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8009f7a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a40      	ldr	r2, [pc, #256]	; (800a084 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	2201      	movs	r2, #1
 8009f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e06b      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009f9c:	4b3a      	ldr	r3, [pc, #232]	; (800a088 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d002      	beq.n	8009fb0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8009faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fac:	025b      	lsls	r3, r3, #9
 8009fae:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f003 faa1 	bl	800d500 <SDMMC_CmdBlockLength>
 8009fbe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d00f      	beq.n	8009fe6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2e      	ldr	r2, [pc, #184]	; (800a084 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd4:	431a      	orrs	r2, r3
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e046      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fea:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	025b      	lsls	r3, r3, #9
 8009ff0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009ff2:	2390      	movs	r3, #144	; 0x90
 8009ff4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009ff6:	2302      	movs	r3, #2
 8009ff8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009ffe:	2301      	movs	r3, #1
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f107 0210 	add.w	r2, r7, #16
 800a00a:	4611      	mov	r1, r2
 800a00c:	4618      	mov	r0, r3
 800a00e:	f003 fa4b 	bl	800d4a8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d90a      	bls.n	800a02e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2282      	movs	r2, #130	; 0x82
 800a01c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a024:	4618      	mov	r0, r3
 800a026:	f003 faaf 	bl	800d588 <SDMMC_CmdReadMultiBlock>
 800a02a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a02c:	e009      	b.n	800a042 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2281      	movs	r2, #129	; 0x81
 800a032:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a03a:	4618      	mov	r0, r3
 800a03c:	f003 fa82 	bl	800d544 <SDMMC_CmdReadSingleBlock>
 800a040:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a044:	2b00      	cmp	r3, #0
 800a046:	d012      	beq.n	800a06e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a0d      	ldr	r2, [pc, #52]	; (800a084 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a04e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a056:	431a      	orrs	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e002      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	e000      	b.n	800a074 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800a072:	2302      	movs	r3, #2
  }
}
 800a074:	4618      	mov	r0, r3
 800a076:	3730      	adds	r7, #48	; 0x30
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	0800aa67 	.word	0x0800aa67
 800a080:	0800aad9 	.word	0x0800aad9
 800a084:	004005ff 	.word	0x004005ff
 800a088:	4225858c 	.word	0x4225858c

0800a08c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08c      	sub	sp, #48	; 0x30
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d107      	bne.n	800a0b4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0ca      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	f040 80c3 	bne.w	800a248 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d907      	bls.n	800a0e6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e0b1      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 021a 	orr.w	r2, r2, #26
 800a104:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a10a:	4a52      	ldr	r2, [pc, #328]	; (800a254 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a10c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a112:	4a51      	ldr	r2, [pc, #324]	; (800a258 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800a114:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	2200      	movs	r2, #0
 800a11c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a122:	2b01      	cmp	r3, #1
 800a124:	d002      	beq.n	800a12c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	025b      	lsls	r3, r3, #9
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a134:	4618      	mov	r0, r3
 800a136:	f003 f9e3 	bl	800d500 <SDMMC_CmdBlockLength>
 800a13a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00f      	beq.n	800a162 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a45      	ldr	r2, [pc, #276]	; (800a25c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	431a      	orrs	r2, r3
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2201      	movs	r2, #1
 800a15a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	e073      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d90a      	bls.n	800a17e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	22a0      	movs	r2, #160	; 0xa0
 800a16c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a174:	4618      	mov	r0, r3
 800a176:	f003 fa4b 	bl	800d610 <SDMMC_CmdWriteMultiBlock>
 800a17a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a17c:	e009      	b.n	800a192 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2290      	movs	r2, #144	; 0x90
 800a182:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a18a:	4618      	mov	r0, r3
 800a18c:	f003 fa1e 	bl	800d5cc <SDMMC_CmdWriteSingleBlock>
 800a190:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d012      	beq.n	800a1be <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a2f      	ldr	r2, [pc, #188]	; (800a25c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a19e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2201      	movs	r2, #1
 800a1b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e045      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a1be:	4b28      	ldr	r3, [pc, #160]	; (800a260 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a1c8:	68b9      	ldr	r1, [r7, #8]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3380      	adds	r3, #128	; 0x80
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	025b      	lsls	r3, r3, #9
 800a1d6:	089b      	lsrs	r3, r3, #2
 800a1d8:	f7fd fab4 	bl	8007744 <HAL_DMA_Start_IT>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d01a      	beq.n	800a218 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f022 021a 	bic.w	r2, r2, #26
 800a1f0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4a19      	ldr	r2, [pc, #100]	; (800a25c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a1f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2201      	movs	r2, #1
 800a20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e018      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a218:	f04f 33ff 	mov.w	r3, #4294967295
 800a21c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	025b      	lsls	r3, r3, #9
 800a222:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a224:	2390      	movs	r3, #144	; 0x90
 800a226:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a22c:	2300      	movs	r3, #0
 800a22e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a230:	2301      	movs	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f107 0210 	add.w	r2, r7, #16
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f003 f932 	bl	800d4a8 <SDIO_ConfigData>

      return HAL_OK;
 800a244:	2300      	movs	r3, #0
 800a246:	e000      	b.n	800a24a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800a248:	2302      	movs	r3, #2
  }
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3730      	adds	r7, #48	; 0x30
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	0800aa3d 	.word	0x0800aa3d
 800a258:	0800aad9 	.word	0x0800aad9
 800a25c:	004005ff 	.word	0x004005ff
 800a260:	4225858c 	.word	0x4225858c

0800a264 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a270:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d008      	beq.n	800a292 <HAL_SD_IRQHandler+0x2e>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f003 0308 	and.w	r3, r3, #8
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 ffc8 	bl	800b220 <SD_Read_IT>
 800a290:	e155      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 808f 	beq.w	800a3c0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2aa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6812      	ldr	r2, [r2, #0]
 800a2b6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800a2ba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a2be:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f022 0201 	bic.w	r2, r2, #1
 800a2ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d039      	beq.n	800a34e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d104      	bne.n	800a2ee <HAL_SD_IRQHandler+0x8a>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d011      	beq.n	800a312 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f003 f9ae 	bl	800d654 <SDMMC_CmdStopTransfer>
 800a2f8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d008      	beq.n	800a312 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 f91f 	bl	800a550 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f240 523a 	movw	r2, #1338	; 0x53a
 800a31a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <HAL_SD_IRQHandler+0xda>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f003 0302 	and.w	r3, r3, #2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d003      	beq.n	800a346 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f003 fe04 	bl	800df4c <HAL_SD_RxCpltCallback>
 800a344:	e0fb      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f003 fdf6 	bl	800df38 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a34c:	e0f7      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b00      	cmp	r3, #0
 800a356:	f000 80f2 	beq.w	800a53e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f003 0320 	and.w	r3, r3, #32
 800a360:	2b00      	cmp	r3, #0
 800a362:	d011      	beq.n	800a388 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4618      	mov	r0, r3
 800a36a:	f003 f973 	bl	800d654 <SDMMC_CmdStopTransfer>
 800a36e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d008      	beq.n	800a388 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	431a      	orrs	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 f8e4 	bl	800a550 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f040 80d5 	bne.w	800a53e <HAL_SD_IRQHandler+0x2da>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f040 80cf 	bne.w	800a53e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f022 0208 	bic.w	r2, r2, #8
 800a3ae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f003 fdbd 	bl	800df38 <HAL_SD_TxCpltCallback>
}
 800a3be:	e0be      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d008      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x17c>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	f003 0308 	and.w	r3, r3, #8
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f000 ff72 	bl	800b2c2 <SD_Write_IT>
 800a3de:	e0ae      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	f000 80a7 	beq.w	800a53e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	f043 0202 	orr.w	r2, r3, #2
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a410:	f003 0308 	and.w	r3, r3, #8
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41c:	f043 0208 	orr.w	r2, r3, #8
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	f043 0220 	orr.w	r2, r3, #32
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a444:	f003 0310 	and.w	r3, r3, #16
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d005      	beq.n	800a458 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a450:	f043 0210 	orr.w	r2, r3, #16
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a460:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a470:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f003 f8ec 	bl	800d654 <SDMMC_CmdStopTransfer>
 800a47c:	4602      	mov	r2, r0
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	431a      	orrs	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f003 0308 	and.w	r3, r3, #8
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d00a      	beq.n	800a4a8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2201      	movs	r2, #1
 800a496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 f855 	bl	800a550 <HAL_SD_ErrorCallback>
}
 800a4a6:	e04a      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d045      	beq.n	800a53e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f003 0310 	and.w	r3, r3, #16
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <HAL_SD_IRQHandler+0x262>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f003 0320 	and.w	r3, r3, #32
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d011      	beq.n	800a4ea <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	4a1f      	ldr	r2, [pc, #124]	; (800a548 <HAL_SD_IRQHandler+0x2e4>)
 800a4cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fd f98e 	bl	80077f4 <HAL_DMA_Abort_IT>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d02f      	beq.n	800a53e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f000 fb4a 	bl	800ab7c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a4e8:	e029      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f003 0301 	and.w	r3, r3, #1
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <HAL_SD_IRQHandler+0x29a>
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f003 0302 	and.w	r3, r3, #2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d011      	beq.n	800a522 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a502:	4a12      	ldr	r2, [pc, #72]	; (800a54c <HAL_SD_IRQHandler+0x2e8>)
 800a504:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd f972 	bl	80077f4 <HAL_DMA_Abort_IT>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d013      	beq.n	800a53e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fb65 	bl	800abea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a520:	e00d      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2201      	movs	r2, #1
 800a52c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f003 fcf4 	bl	800df24 <HAL_SD_AbortCallback>
}
 800a53c:	e7ff      	b.n	800a53e <HAL_SD_IRQHandler+0x2da>
 800a53e:	bf00      	nop
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	0800ab7d 	.word	0x0800ab7d
 800a54c:	0800abeb 	.word	0x0800abeb

0800a550 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a572:	0f9b      	lsrs	r3, r3, #30
 800a574:	b2da      	uxtb	r2, r3
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a57e:	0e9b      	lsrs	r3, r3, #26
 800a580:	b2db      	uxtb	r3, r3
 800a582:	f003 030f 	and.w	r3, r3, #15
 800a586:	b2da      	uxtb	r2, r3
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a590:	0e1b      	lsrs	r3, r3, #24
 800a592:	b2db      	uxtb	r3, r3
 800a594:	f003 0303 	and.w	r3, r3, #3
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	b2da      	uxtb	r2, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ae:	0a1b      	lsrs	r3, r3, #8
 800a5b0:	b2da      	uxtb	r2, r3
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5c4:	0d1b      	lsrs	r3, r3, #20
 800a5c6:	b29a      	uxth	r2, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5d0:	0c1b      	lsrs	r3, r3, #16
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	f003 030f 	and.w	r3, r3, #15
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5e2:	0bdb      	lsrs	r3, r3, #15
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	f003 0301 	and.w	r3, r3, #1
 800a5ea:	b2da      	uxtb	r2, r3
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f4:	0b9b      	lsrs	r3, r3, #14
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a606:	0b5b      	lsrs	r3, r3, #13
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	f003 0301 	and.w	r3, r3, #1
 800a60e:	b2da      	uxtb	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a618:	0b1b      	lsrs	r3, r3, #12
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f003 0301 	and.w	r3, r3, #1
 800a620:	b2da      	uxtb	r2, r3
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	2200      	movs	r2, #0
 800a62a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a630:	2b00      	cmp	r3, #0
 800a632:	d163      	bne.n	800a6fc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a638:	009a      	lsls	r2, r3, #2
 800a63a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a63e:	4013      	ands	r3, r2
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a644:	0f92      	lsrs	r2, r2, #30
 800a646:	431a      	orrs	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a650:	0edb      	lsrs	r3, r3, #27
 800a652:	b2db      	uxtb	r3, r3
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	b2da      	uxtb	r2, r3
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a662:	0e1b      	lsrs	r3, r3, #24
 800a664:	b2db      	uxtb	r3, r3
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	b2da      	uxtb	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a674:	0d5b      	lsrs	r3, r3, #21
 800a676:	b2db      	uxtb	r3, r3
 800a678:	f003 0307 	and.w	r3, r3, #7
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a686:	0c9b      	lsrs	r3, r3, #18
 800a688:	b2db      	uxtb	r3, r3
 800a68a:	f003 0307 	and.w	r3, r3, #7
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a698:	0bdb      	lsrs	r3, r3, #15
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f003 0307 	and.w	r3, r3, #7
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	7e1b      	ldrb	r3, [r3, #24]
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	f003 0307 	and.w	r3, r3, #7
 800a6ba:	3302      	adds	r3, #2
 800a6bc:	2201      	movs	r2, #1
 800a6be:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a6c6:	fb02 f203 	mul.w	r2, r2, r3
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	7a1b      	ldrb	r3, [r3, #8]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	2201      	movs	r2, #1
 800a6da:	409a      	lsls	r2, r3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a6e8:	0a52      	lsrs	r2, r2, #9
 800a6ea:	fb02 f203 	mul.w	r2, r2, r3
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6f8:	661a      	str	r2, [r3, #96]	; 0x60
 800a6fa:	e031      	b.n	800a760 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a700:	2b01      	cmp	r3, #1
 800a702:	d11d      	bne.n	800a740 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a708:	041b      	lsls	r3, r3, #16
 800a70a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a712:	0c1b      	lsrs	r3, r3, #16
 800a714:	431a      	orrs	r2, r3
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	3301      	adds	r3, #1
 800a720:	029a      	lsls	r2, r3, #10
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a734:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	661a      	str	r2, [r3, #96]	; 0x60
 800a73e:	e00f      	b.n	800a760 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a58      	ldr	r2, [pc, #352]	; (800a8a8 <HAL_SD_GetCardCSD+0x344>)
 800a746:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a74c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	e09d      	b.n	800a89c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a764:	0b9b      	lsrs	r3, r3, #14
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 0301 	and.w	r3, r3, #1
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a776:	09db      	lsrs	r3, r3, #7
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a77e:	b2da      	uxtb	r2, r3
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a798:	0fdb      	lsrs	r3, r3, #31
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a4:	0f5b      	lsrs	r3, r3, #29
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b6:	0e9b      	lsrs	r3, r3, #26
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	f003 0307 	and.w	r3, r3, #7
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7c8:	0d9b      	lsrs	r3, r3, #22
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	f003 030f 	and.w	r3, r3, #15
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7da:	0d5b      	lsrs	r3, r3, #21
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	f003 0301 	and.w	r3, r3, #1
 800a7e2:	b2da      	uxtb	r2, r3
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7f6:	0c1b      	lsrs	r3, r3, #16
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f003 0301 	and.w	r3, r3, #1
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a80a:	0bdb      	lsrs	r3, r3, #15
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	f003 0301 	and.w	r3, r3, #1
 800a812:	b2da      	uxtb	r2, r3
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a81e:	0b9b      	lsrs	r3, r3, #14
 800a820:	b2db      	uxtb	r3, r3
 800a822:	f003 0301 	and.w	r3, r3, #1
 800a826:	b2da      	uxtb	r2, r3
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	0b5b      	lsrs	r3, r3, #13
 800a834:	b2db      	uxtb	r3, r3
 800a836:	f003 0301 	and.w	r3, r3, #1
 800a83a:	b2da      	uxtb	r2, r3
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a846:	0b1b      	lsrs	r3, r3, #12
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a85a:	0a9b      	lsrs	r3, r3, #10
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	b2da      	uxtb	r2, r3
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a86e:	0a1b      	lsrs	r3, r3, #8
 800a870:	b2db      	uxtb	r3, r3
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	b2da      	uxtb	r2, r3
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	085b      	lsrs	r3, r3, #1
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	004005ff 	.word	0x004005ff

0800a8ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a904:	b5b0      	push	{r4, r5, r7, lr}
 800a906:	b08e      	sub	sp, #56	; 0x38
 800a908:	af04      	add	r7, sp, #16
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2203      	movs	r2, #3
 800a912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	d02e      	beq.n	800a97c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a924:	d106      	bne.n	800a934 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	639a      	str	r2, [r3, #56]	; 0x38
 800a932:	e029      	b.n	800a988 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a93a:	d10a      	bne.n	800a952 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 fb0f 	bl	800af60 <SD_WideBus_Enable>
 800a942:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94a:	431a      	orrs	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	639a      	str	r2, [r3, #56]	; 0x38
 800a950:	e01a      	b.n	800a988 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d10a      	bne.n	800a96e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fb4c 	bl	800aff6 <SD_WideBus_Disable>
 800a95e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	431a      	orrs	r2, r3
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	639a      	str	r2, [r3, #56]	; 0x38
 800a96c:	e00c      	b.n	800a988 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a972:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	639a      	str	r2, [r3, #56]	; 0x38
 800a97a:	e005      	b.n	800a988 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a980:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d009      	beq.n	800a9a4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	4a18      	ldr	r2, [pc, #96]	; (800a9f8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a996:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	e024      	b.n	800a9ee <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681d      	ldr	r5, [r3, #0]
 800a9ca:	466c      	mov	r4, sp
 800a9cc:	f107 0318 	add.w	r3, r7, #24
 800a9d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a9d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a9d8:	f107 030c 	add.w	r3, r7, #12
 800a9dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f002 fcb2 	bl	800d348 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
}
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	3728      	adds	r7, #40	; 0x28
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a9f6:	bf00      	nop
 800a9f8:	004005ff 	.word	0x004005ff

0800a9fc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800aa08:	f107 030c 	add.w	r3, r7, #12
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fa7e 	bl	800af10 <SD_SendStatus>
 800aa14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	0a5b      	lsrs	r3, r3, #9
 800aa2c:	f003 030f 	and.w	r3, r3, #15
 800aa30:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800aa32:	693b      	ldr	r3, [r7, #16]
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800aa5a:	bf00      	nop
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b084      	sub	sp, #16
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa78:	2b82      	cmp	r3, #130	; 0x82
 800aa7a:	d111      	bne.n	800aaa0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f002 fde7 	bl	800d654 <SDMMC_CmdStopTransfer>
 800aa86:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d008      	beq.n	800aaa0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	431a      	orrs	r2, r3
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff fd58 	bl	800a550 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f022 0208 	bic.w	r2, r2, #8
 800aaae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f240 523a 	movw	r2, #1338	; 0x53a
 800aab8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f003 fa3f 	bl	800df4c <HAL_SD_RxCpltCallback>
#endif
}
 800aace:	bf00      	nop
 800aad0:	3710      	adds	r7, #16
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f7fd f830 	bl	8007b4c <HAL_DMA_GetError>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d03e      	beq.n	800ab70 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaf8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab00:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d002      	beq.n	800ab0e <SD_DMAError+0x36>
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d12d      	bne.n	800ab6a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab0e:	697b      	ldr	r3, [r7, #20]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a19      	ldr	r2, [pc, #100]	; (800ab78 <SD_DMAError+0xa0>)
 800ab14:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ab24:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab2a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ab32:	6978      	ldr	r0, [r7, #20]
 800ab34:	f7ff ff62 	bl	800a9fc <HAL_SD_GetCardState>
 800ab38:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	2b06      	cmp	r3, #6
 800ab3e:	d002      	beq.n	800ab46 <SD_DMAError+0x6e>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	2b05      	cmp	r3, #5
 800ab44:	d10a      	bne.n	800ab5c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f002 fd82 	bl	800d654 <SDMMC_CmdStopTransfer>
 800ab50:	4602      	mov	r2, r0
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab56:	431a      	orrs	r2, r3
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	2200      	movs	r2, #0
 800ab68:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ab6a:	6978      	ldr	r0, [r7, #20]
 800ab6c:	f7ff fcf0 	bl	800a550 <HAL_SD_ErrorCallback>
#endif
  }
}
 800ab70:	bf00      	nop
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}
 800ab78:	004005ff 	.word	0x004005ff

0800ab7c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab88:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab92:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ab94:	68f8      	ldr	r0, [r7, #12]
 800ab96:	f7ff ff31 	bl	800a9fc <HAL_SD_GetCardState>
 800ab9a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	2b06      	cmp	r3, #6
 800abae:	d002      	beq.n	800abb6 <SD_DMATxAbort+0x3a>
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	d10a      	bne.n	800abcc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4618      	mov	r0, r3
 800abbc:	f002 fd4a 	bl	800d654 <SDMMC_CmdStopTransfer>
 800abc0:	4602      	mov	r2, r0
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	431a      	orrs	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d103      	bne.n	800abdc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f003 f9a5 	bl	800df24 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800abda:	e002      	b.n	800abe2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fcb7 	bl	800a550 <HAL_SD_ErrorCallback>
}
 800abe2:	bf00      	nop
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac00:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7ff fefa 	bl	800a9fc <HAL_SD_GetCardState>
 800ac08:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2200      	movs	r2, #0
 800ac16:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	2b06      	cmp	r3, #6
 800ac1c:	d002      	beq.n	800ac24 <SD_DMARxAbort+0x3a>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b05      	cmp	r3, #5
 800ac22:	d10a      	bne.n	800ac3a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f002 fd13 	bl	800d654 <SDMMC_CmdStopTransfer>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac34:	431a      	orrs	r2, r3
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d103      	bne.n	800ac4a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ac42:	68f8      	ldr	r0, [r7, #12]
 800ac44:	f003 f96e 	bl	800df24 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ac48:	e002      	b.n	800ac50 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f7ff fc80 	bl	800a550 <HAL_SD_ErrorCallback>
}
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ac58:	b5b0      	push	{r4, r5, r7, lr}
 800ac5a:	b094      	sub	sp, #80	; 0x50
 800ac5c:	af04      	add	r7, sp, #16
 800ac5e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ac60:	2301      	movs	r3, #1
 800ac62:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f002 fbc5 	bl	800d3f8 <SDIO_GetPowerState>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d102      	bne.n	800ac7a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ac74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ac78:	e0b7      	b.n	800adea <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac7e:	2b03      	cmp	r3, #3
 800ac80:	d02f      	beq.n	800ace2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f002 fdee 	bl	800d868 <SDMMC_CmdSendCID>
 800ac8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d001      	beq.n	800ac98 <SD_InitCard+0x40>
    {
      return errorstate;
 800ac94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac96:	e0a8      	b.n	800adea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f002 fbef 	bl	800d482 <SDIO_GetResponse>
 800aca4:	4602      	mov	r2, r0
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2104      	movs	r1, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f002 fbe6 	bl	800d482 <SDIO_GetResponse>
 800acb6:	4602      	mov	r2, r0
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	2108      	movs	r1, #8
 800acc2:	4618      	mov	r0, r3
 800acc4:	f002 fbdd 	bl	800d482 <SDIO_GetResponse>
 800acc8:	4602      	mov	r2, r0
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	210c      	movs	r1, #12
 800acd4:	4618      	mov	r0, r3
 800acd6:	f002 fbd4 	bl	800d482 <SDIO_GetResponse>
 800acda:	4602      	mov	r2, r0
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ace6:	2b03      	cmp	r3, #3
 800ace8:	d00d      	beq.n	800ad06 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f107 020e 	add.w	r2, r7, #14
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f002 fdf4 	bl	800d8e2 <SDMMC_CmdSetRelAdd>
 800acfa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800acfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d001      	beq.n	800ad06 <SD_InitCard+0xae>
    {
      return errorstate;
 800ad02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad04:	e071      	b.n	800adea <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0a:	2b03      	cmp	r3, #3
 800ad0c:	d036      	beq.n	800ad7c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ad0e:	89fb      	ldrh	r3, [r7, #14]
 800ad10:	461a      	mov	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad1e:	041b      	lsls	r3, r3, #16
 800ad20:	4619      	mov	r1, r3
 800ad22:	4610      	mov	r0, r2
 800ad24:	f002 fdbe 	bl	800d8a4 <SDMMC_CmdSendCSD>
 800ad28:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d001      	beq.n	800ad34 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ad30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad32:	e05a      	b.n	800adea <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2100      	movs	r1, #0
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f002 fba1 	bl	800d482 <SDIO_GetResponse>
 800ad40:	4602      	mov	r2, r0
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2104      	movs	r1, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f002 fb98 	bl	800d482 <SDIO_GetResponse>
 800ad52:	4602      	mov	r2, r0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2108      	movs	r1, #8
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f002 fb8f 	bl	800d482 <SDIO_GetResponse>
 800ad64:	4602      	mov	r2, r0
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	210c      	movs	r1, #12
 800ad70:	4618      	mov	r0, r3
 800ad72:	f002 fb86 	bl	800d482 <SDIO_GetResponse>
 800ad76:	4602      	mov	r2, r0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2104      	movs	r1, #4
 800ad82:	4618      	mov	r0, r3
 800ad84:	f002 fb7d 	bl	800d482 <SDIO_GetResponse>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	0d1a      	lsrs	r2, r3, #20
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ad90:	f107 0310 	add.w	r3, r7, #16
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff fbe4 	bl	800a564 <HAL_SD_GetCardCSD>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d002      	beq.n	800ada8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ada2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ada6:	e020      	b.n	800adea <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6819      	ldr	r1, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	f04f 0400 	mov.w	r4, #0
 800adb6:	461a      	mov	r2, r3
 800adb8:	4623      	mov	r3, r4
 800adba:	4608      	mov	r0, r1
 800adbc:	f002 fc6c 	bl	800d698 <SDMMC_CmdSelDesel>
 800adc0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800adc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <SD_InitCard+0x174>
  {
    return errorstate;
 800adc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adca:	e00e      	b.n	800adea <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681d      	ldr	r5, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	466c      	mov	r4, sp
 800add4:	f103 0210 	add.w	r2, r3, #16
 800add8:	ca07      	ldmia	r2, {r0, r1, r2}
 800adda:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800adde:	3304      	adds	r3, #4
 800ade0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ade2:	4628      	mov	r0, r5
 800ade4:	f002 fab0 	bl	800d348 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3740      	adds	r7, #64	; 0x40
 800adee:	46bd      	mov	sp, r7
 800adf0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800adf4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b086      	sub	sp, #24
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800adfc:	2300      	movs	r3, #0
 800adfe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	2300      	movs	r3, #0
 800ae06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f002 fc66 	bl	800d6de <SDMMC_CmdGoIdleState>
 800ae12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <SD_PowerON+0x2a>
  {
    return errorstate;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	e072      	b.n	800af04 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f002 fc79 	bl	800d71a <SDMMC_CmdOperCond>
 800ae28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00d      	beq.n	800ae4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f002 fc4f 	bl	800d6de <SDMMC_CmdGoIdleState>
 800ae40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d004      	beq.n	800ae52 <SD_PowerON+0x5e>
    {
      return errorstate;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	e05b      	b.n	800af04 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2201      	movs	r2, #1
 800ae50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d137      	bne.n	800aeca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f002 fc79 	bl	800d758 <SDMMC_CmdAppCommand>
 800ae66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d02d      	beq.n	800aeca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ae72:	e047      	b.n	800af04 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	f002 fc6c 	bl	800d758 <SDMMC_CmdAppCommand>
 800ae80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <SD_PowerON+0x98>
    {
      return errorstate;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	e03b      	b.n	800af04 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	491e      	ldr	r1, [pc, #120]	; (800af0c <SD_PowerON+0x118>)
 800ae92:	4618      	mov	r0, r3
 800ae94:	f002 fc82 	bl	800d79c <SDMMC_CmdAppOperCommand>
 800ae98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d002      	beq.n	800aea6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aea4:	e02e      	b.n	800af04 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f002 fae8 	bl	800d482 <SDIO_GetResponse>
 800aeb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	0fdb      	lsrs	r3, r3, #31
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <SD_PowerON+0xcc>
 800aebc:	2301      	movs	r3, #1
 800aebe:	e000      	b.n	800aec2 <SD_PowerON+0xce>
 800aec0:	2300      	movs	r3, #0
 800aec2:	613b      	str	r3, [r7, #16]

    count++;
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	3301      	adds	r3, #1
 800aec8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d802      	bhi.n	800aeda <SD_PowerON+0xe6>
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0cc      	beq.n	800ae74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d902      	bls.n	800aeea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800aee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aee8:	e00c      	b.n	800af04 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d003      	beq.n	800aefc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2201      	movs	r2, #1
 800aef8:	645a      	str	r2, [r3, #68]	; 0x44
 800aefa:	e002      	b.n	800af02 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800af02:	2300      	movs	r3, #0
}
 800af04:	4618      	mov	r0, r3
 800af06:	3718      	adds	r7, #24
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	c1100000 	.word	0xc1100000

0800af10 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d102      	bne.n	800af26 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800af20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af24:	e018      	b.n	800af58 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af2e:	041b      	lsls	r3, r3, #16
 800af30:	4619      	mov	r1, r3
 800af32:	4610      	mov	r0, r2
 800af34:	f002 fcf6 	bl	800d924 <SDMMC_CmdSendStatus>
 800af38:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <SD_SendStatus+0x34>
  {
    return errorstate;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	e009      	b.n	800af58 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 fa99 	bl	800d482 <SDIO_GetResponse>
 800af50:	4602      	mov	r2, r0
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]
 800af6c:	2300      	movs	r3, #0
 800af6e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f002 fa83 	bl	800d482 <SDIO_GetResponse>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af86:	d102      	bne.n	800af8e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800af88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af8c:	e02f      	b.n	800afee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800af8e:	f107 030c 	add.w	r3, r7, #12
 800af92:	4619      	mov	r1, r3
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f879 	bl	800b08c <SD_FindSCR>
 800af9a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d001      	beq.n	800afa6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	e023      	b.n	800afee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d01c      	beq.n	800afea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afb8:	041b      	lsls	r3, r3, #16
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f002 fbcb 	bl	800d758 <SDMMC_CmdAppCommand>
 800afc2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afc4:	697b      	ldr	r3, [r7, #20]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d001      	beq.n	800afce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	e00f      	b.n	800afee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2102      	movs	r1, #2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f002 fc04 	bl	800d7e2 <SDMMC_CmdBusWidth>
 800afda:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d001      	beq.n	800afe6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	e003      	b.n	800afee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800afe6:	2300      	movs	r3, #0
 800afe8:	e001      	b.n	800afee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3718      	adds	r7, #24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b086      	sub	sp, #24
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800affe:	2300      	movs	r3, #0
 800b000:	60fb      	str	r3, [r7, #12]
 800b002:	2300      	movs	r3, #0
 800b004:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2100      	movs	r1, #0
 800b00c:	4618      	mov	r0, r3
 800b00e:	f002 fa38 	bl	800d482 <SDIO_GetResponse>
 800b012:	4603      	mov	r3, r0
 800b014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b018:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b01c:	d102      	bne.n	800b024 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b01e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b022:	e02f      	b.n	800b084 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b024:	f107 030c 	add.w	r3, r7, #12
 800b028:	4619      	mov	r1, r3
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f82e 	bl	800b08c <SD_FindSCR>
 800b030:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d001      	beq.n	800b03c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	e023      	b.n	800b084 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d01c      	beq.n	800b080 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	041b      	lsls	r3, r3, #16
 800b050:	4619      	mov	r1, r3
 800b052:	4610      	mov	r0, r2
 800b054:	f002 fb80 	bl	800d758 <SDMMC_CmdAppCommand>
 800b058:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	e00f      	b.n	800b084 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f002 fbb9 	bl	800d7e2 <SDMMC_CmdBusWidth>
 800b070:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	e003      	b.n	800b084 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	e001      	b.n	800b084 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b080:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b08c:	b590      	push	{r4, r7, lr}
 800b08e:	b08f      	sub	sp, #60	; 0x3c
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b096:	f7fb fd63 	bl	8006b60 <HAL_GetTick>
 800b09a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60bb      	str	r3, [r7, #8]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2108      	movs	r1, #8
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f002 fa24 	bl	800d500 <SDMMC_CmdBlockLength>
 800b0b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	e0a9      	b.n	800b218 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0cc:	041b      	lsls	r3, r3, #16
 800b0ce:	4619      	mov	r1, r3
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	f002 fb41 	bl	800d758 <SDMMC_CmdAppCommand>
 800b0d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	e09a      	b.n	800b218 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b0e2:	f04f 33ff 	mov.w	r3, #4294967295
 800b0e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b0e8:	2308      	movs	r3, #8
 800b0ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b0ec:	2330      	movs	r3, #48	; 0x30
 800b0ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f107 0210 	add.w	r2, r7, #16
 800b104:	4611      	mov	r1, r2
 800b106:	4618      	mov	r0, r3
 800b108:	f002 f9ce 	bl	800d4a8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4618      	mov	r0, r3
 800b112:	f002 fb88 	bl	800d826 <SDMMC_CmdSendSCR>
 800b116:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d022      	beq.n	800b164 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	e07a      	b.n	800b218 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00e      	beq.n	800b14e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6819      	ldr	r1, [r3, #0]
 800b134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	f107 0208 	add.w	r2, r7, #8
 800b13c:	18d4      	adds	r4, r2, r3
 800b13e:	4608      	mov	r0, r1
 800b140:	f002 f92d 	bl	800d39e <SDIO_ReadFIFO>
 800b144:	4603      	mov	r3, r0
 800b146:	6023      	str	r3, [r4, #0]
      index++;
 800b148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14a:	3301      	adds	r3, #1
 800b14c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b14e:	f7fb fd07 	bl	8006b60 <HAL_GetTick>
 800b152:	4602      	mov	r2, r0
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	1ad3      	subs	r3, r2, r3
 800b158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b15c:	d102      	bne.n	800b164 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b15e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b162:	e059      	b.n	800b218 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b16a:	f240 432a 	movw	r3, #1066	; 0x42a
 800b16e:	4013      	ands	r3, r2
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0d6      	beq.n	800b122 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17a:	f003 0308 	and.w	r3, r3, #8
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d005      	beq.n	800b18e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	2208      	movs	r2, #8
 800b188:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b18a:	2308      	movs	r3, #8
 800b18c:	e044      	b.n	800b218 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b194:	f003 0302 	and.w	r3, r3, #2
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d005      	beq.n	800b1a8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	2202      	movs	r2, #2
 800b1a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e037      	b.n	800b218 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	f003 0320 	and.w	r3, r3, #32
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d005      	beq.n	800b1c2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b1be:	2320      	movs	r3, #32
 800b1c0:	e02a      	b.n	800b218 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	f240 523a 	movw	r2, #1338	; 0x53a
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	061a      	lsls	r2, r3, #24
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1d8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	0a1b      	lsrs	r3, r3, #8
 800b1de:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1e2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	0e1b      	lsrs	r3, r3, #24
 800b1e8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ec:	601a      	str	r2, [r3, #0]
    scr++;
 800b1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	061a      	lsls	r2, r3, #24
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	021b      	lsls	r3, r3, #8
 800b1fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b200:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	0a1b      	lsrs	r3, r3, #8
 800b206:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b20a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	0e1b      	lsrs	r3, r3, #24
 800b210:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b214:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b216:	2300      	movs	r3, #0
}
 800b218:	4618      	mov	r0, r3
 800b21a:	373c      	adds	r7, #60	; 0x3c
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}

0800b220 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b232:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d03f      	beq.n	800b2ba <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b23a:	2300      	movs	r3, #0
 800b23c:	617b      	str	r3, [r7, #20]
 800b23e:	e033      	b.n	800b2a8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4618      	mov	r0, r3
 800b246:	f002 f8aa 	bl	800d39e <SDIO_ReadFIFO>
 800b24a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	b2da      	uxtb	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3301      	adds	r3, #1
 800b258:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	3b01      	subs	r3, #1
 800b25e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	0a1b      	lsrs	r3, r3, #8
 800b264:	b2da      	uxtb	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	3301      	adds	r3, #1
 800b26e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	3b01      	subs	r3, #1
 800b274:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	0c1b      	lsrs	r3, r3, #16
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3301      	adds	r3, #1
 800b284:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	3b01      	subs	r3, #1
 800b28a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	0e1b      	lsrs	r3, r3, #24
 800b290:	b2da      	uxtb	r2, r3
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	3301      	adds	r3, #1
 800b29a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	617b      	str	r3, [r7, #20]
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	2b07      	cmp	r3, #7
 800b2ac:	d9c8      	bls.n	800b240 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	693a      	ldr	r2, [r7, #16]
 800b2b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}

0800b2c2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b086      	sub	sp, #24
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d043      	beq.n	800b364 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b2dc:	2300      	movs	r3, #0
 800b2de:	617b      	str	r3, [r7, #20]
 800b2e0:	e037      	b.n	800b352 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	3b01      	subs	r3, #1
 800b2f2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	021a      	lsls	r2, r3, #8
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	3b01      	subs	r3, #1
 800b30a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	041a      	lsls	r2, r3, #16
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	4313      	orrs	r3, r2
 800b316:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3301      	adds	r3, #1
 800b31c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	3b01      	subs	r3, #1
 800b322:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	781b      	ldrb	r3, [r3, #0]
 800b328:	061a      	lsls	r2, r3, #24
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	4313      	orrs	r3, r2
 800b32e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	3301      	adds	r3, #1
 800b334:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	3b01      	subs	r3, #1
 800b33a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	f107 0208 	add.w	r2, r7, #8
 800b344:	4611      	mov	r1, r2
 800b346:	4618      	mov	r0, r3
 800b348:	f002 f836 	bl	800d3b8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	3301      	adds	r3, #1
 800b350:	617b      	str	r3, [r7, #20]
 800b352:	697b      	ldr	r3, [r7, #20]
 800b354:	2b07      	cmp	r3, #7
 800b356:	d9c4      	bls.n	800b2e2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	693a      	ldr	r2, [r7, #16]
 800b362:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b364:	bf00      	nop
 800b366:	3718      	adds	r7, #24
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}

0800b36c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d101      	bne.n	800b37e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b37a:	2301      	movs	r3, #1
 800b37c:	e056      	b.n	800b42c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2200      	movs	r2, #0
 800b382:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b38a:	b2db      	uxtb	r3, r3
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d106      	bne.n	800b39e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f7f9 fccb 	bl	8004d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2202      	movs	r2, #2
 800b3a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685a      	ldr	r2, [r3, #4]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	68db      	ldr	r3, [r3, #12]
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	431a      	orrs	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	699b      	ldr	r3, [r3, #24]
 800b3d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	69db      	ldr	r3, [r3, #28]
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	ea42 0103 	orr.w	r1, r2, r3
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	430a      	orrs	r2, r1
 800b3f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	699b      	ldr	r3, [r3, #24]
 800b3fa:	0c1b      	lsrs	r3, r3, #16
 800b3fc:	f003 0104 	and.w	r1, r3, #4
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	430a      	orrs	r2, r1
 800b40a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	69da      	ldr	r2, [r3, #28]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b41a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2201      	movs	r2, #1
 800b426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3708      	adds	r7, #8
 800b430:	46bd      	mov	sp, r7
 800b432:	bd80      	pop	{r7, pc}

0800b434 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b088      	sub	sp, #32
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	603b      	str	r3, [r7, #0]
 800b440:	4613      	mov	r3, r2
 800b442:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <HAL_SPI_Transmit+0x22>
 800b452:	2302      	movs	r3, #2
 800b454:	e11e      	b.n	800b694 <HAL_SPI_Transmit+0x260>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b45e:	f7fb fb7f 	bl	8006b60 <HAL_GetTick>
 800b462:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b464:	88fb      	ldrh	r3, [r7, #6]
 800b466:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b46e:	b2db      	uxtb	r3, r3
 800b470:	2b01      	cmp	r3, #1
 800b472:	d002      	beq.n	800b47a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b474:	2302      	movs	r3, #2
 800b476:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b478:	e103      	b.n	800b682 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d002      	beq.n	800b486 <HAL_SPI_Transmit+0x52>
 800b480:	88fb      	ldrh	r3, [r7, #6]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d102      	bne.n	800b48c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b48a:	e0fa      	b.n	800b682 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2203      	movs	r2, #3
 800b490:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	88fa      	ldrh	r2, [r7, #6]
 800b4a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	88fa      	ldrh	r2, [r7, #6]
 800b4aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4d2:	d107      	bne.n	800b4e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b4e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ee:	2b40      	cmp	r3, #64	; 0x40
 800b4f0:	d007      	beq.n	800b502 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	68db      	ldr	r3, [r3, #12]
 800b506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b50a:	d14b      	bne.n	800b5a4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	685b      	ldr	r3, [r3, #4]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d002      	beq.n	800b51a <HAL_SPI_Transmit+0xe6>
 800b514:	8afb      	ldrh	r3, [r7, #22]
 800b516:	2b01      	cmp	r3, #1
 800b518:	d13e      	bne.n	800b598 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	881a      	ldrh	r2, [r3, #0]
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52a:	1c9a      	adds	r2, r3, #2
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b534:	b29b      	uxth	r3, r3
 800b536:	3b01      	subs	r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b53e:	e02b      	b.n	800b598 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f003 0302 	and.w	r3, r3, #2
 800b54a:	2b02      	cmp	r3, #2
 800b54c:	d112      	bne.n	800b574 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b552:	881a      	ldrh	r2, [r3, #0]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b55e:	1c9a      	adds	r2, r3, #2
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b568:	b29b      	uxth	r3, r3
 800b56a:	3b01      	subs	r3, #1
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	86da      	strh	r2, [r3, #54]	; 0x36
 800b572:	e011      	b.n	800b598 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b574:	f7fb faf4 	bl	8006b60 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	69bb      	ldr	r3, [r7, #24]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d803      	bhi.n	800b58c <HAL_SPI_Transmit+0x158>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b58a:	d102      	bne.n	800b592 <HAL_SPI_Transmit+0x15e>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d102      	bne.n	800b598 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b596:	e074      	b.n	800b682 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1ce      	bne.n	800b540 <HAL_SPI_Transmit+0x10c>
 800b5a2:	e04c      	b.n	800b63e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <HAL_SPI_Transmit+0x17e>
 800b5ac:	8afb      	ldrh	r3, [r7, #22]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d140      	bne.n	800b634 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	330c      	adds	r3, #12
 800b5bc:	7812      	ldrb	r2, [r2, #0]
 800b5be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c4:	1c5a      	adds	r2, r3, #1
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	b29a      	uxth	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b5d8:	e02c      	b.n	800b634 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f003 0302 	and.w	r3, r3, #2
 800b5e4:	2b02      	cmp	r3, #2
 800b5e6:	d113      	bne.n	800b610 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	330c      	adds	r3, #12
 800b5f2:	7812      	ldrb	r2, [r2, #0]
 800b5f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5fa:	1c5a      	adds	r2, r3, #1
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b604:	b29b      	uxth	r3, r3
 800b606:	3b01      	subs	r3, #1
 800b608:	b29a      	uxth	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	86da      	strh	r2, [r3, #54]	; 0x36
 800b60e:	e011      	b.n	800b634 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b610:	f7fb faa6 	bl	8006b60 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	69bb      	ldr	r3, [r7, #24]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	683a      	ldr	r2, [r7, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d803      	bhi.n	800b628 <HAL_SPI_Transmit+0x1f4>
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b626:	d102      	bne.n	800b62e <HAL_SPI_Transmit+0x1fa>
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d102      	bne.n	800b634 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b632:	e026      	b.n	800b682 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b638:	b29b      	uxth	r3, r3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d1cd      	bne.n	800b5da <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b63e:	69ba      	ldr	r2, [r7, #24]
 800b640:	6839      	ldr	r1, [r7, #0]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 fba4 	bl	800bd90 <SPI_EndRxTxTransaction>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2220      	movs	r2, #32
 800b652:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	689b      	ldr	r3, [r3, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10a      	bne.n	800b672 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b65c:	2300      	movs	r3, #0
 800b65e:	613b      	str	r3, [r7, #16]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	613b      	str	r3, [r7, #16]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	613b      	str	r3, [r7, #16]
 800b670:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b676:	2b00      	cmp	r3, #0
 800b678:	d002      	beq.n	800b680 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	77fb      	strb	r3, [r7, #31]
 800b67e:	e000      	b.n	800b682 <HAL_SPI_Transmit+0x24e>
  }

error:
 800b680:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b692:	7ffb      	ldrb	r3, [r7, #31]
}
 800b694:	4618      	mov	r0, r3
 800b696:	3720      	adds	r7, #32
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}

0800b69c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b088      	sub	sp, #32
 800b6a0:	af02      	add	r7, sp, #8
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	603b      	str	r3, [r7, #0]
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6b8:	d112      	bne.n	800b6e0 <HAL_SPI_Receive+0x44>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10e      	bne.n	800b6e0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2204      	movs	r2, #4
 800b6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b6ca:	88fa      	ldrh	r2, [r7, #6]
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	9300      	str	r3, [sp, #0]
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	68b9      	ldr	r1, [r7, #8]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 f8e9 	bl	800b8ae <HAL_SPI_TransmitReceive>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	e0e2      	b.n	800b8a6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	d101      	bne.n	800b6ee <HAL_SPI_Receive+0x52>
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	e0db      	b.n	800b8a6 <HAL_SPI_Receive+0x20a>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2201      	movs	r2, #1
 800b6f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b6f6:	f7fb fa33 	bl	8006b60 <HAL_GetTick>
 800b6fa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b01      	cmp	r3, #1
 800b706:	d002      	beq.n	800b70e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b708:	2302      	movs	r3, #2
 800b70a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b70c:	e0c2      	b.n	800b894 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d002      	beq.n	800b71a <HAL_SPI_Receive+0x7e>
 800b714:	88fb      	ldrh	r3, [r7, #6]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b71e:	e0b9      	b.n	800b894 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2204      	movs	r2, #4
 800b724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	2200      	movs	r2, #0
 800b72c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	88fa      	ldrh	r2, [r7, #6]
 800b738:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	88fa      	ldrh	r2, [r7, #6]
 800b73e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	2200      	movs	r2, #0
 800b744:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2200      	movs	r2, #0
 800b75c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b766:	d107      	bne.n	800b778 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b776:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b782:	2b40      	cmp	r3, #64	; 0x40
 800b784:	d007      	beq.n	800b796 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b794:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d162      	bne.n	800b864 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b79e:	e02e      	b.n	800b7fe <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d115      	bne.n	800b7da <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f103 020c 	add.w	r2, r3, #12
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ba:	7812      	ldrb	r2, [r2, #0]
 800b7bc:	b2d2      	uxtb	r2, r2
 800b7be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c4:	1c5a      	adds	r2, r3, #1
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	3b01      	subs	r3, #1
 800b7d2:	b29a      	uxth	r2, r3
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7d8:	e011      	b.n	800b7fe <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7da:	f7fb f9c1 	bl	8006b60 <HAL_GetTick>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d803      	bhi.n	800b7f2 <HAL_SPI_Receive+0x156>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7f0:	d102      	bne.n	800b7f8 <HAL_SPI_Receive+0x15c>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d102      	bne.n	800b7fe <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b7f8:	2303      	movs	r3, #3
 800b7fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b7fc:	e04a      	b.n	800b894 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b802:	b29b      	uxth	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1cb      	bne.n	800b7a0 <HAL_SPI_Receive+0x104>
 800b808:	e031      	b.n	800b86e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b01      	cmp	r3, #1
 800b816:	d113      	bne.n	800b840 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68da      	ldr	r2, [r3, #12]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b822:	b292      	uxth	r2, r2
 800b824:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82a:	1c9a      	adds	r2, r3, #2
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b834:	b29b      	uxth	r3, r3
 800b836:	3b01      	subs	r3, #1
 800b838:	b29a      	uxth	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b83e:	e011      	b.n	800b864 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b840:	f7fb f98e 	bl	8006b60 <HAL_GetTick>
 800b844:	4602      	mov	r2, r0
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	1ad3      	subs	r3, r2, r3
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d803      	bhi.n	800b858 <HAL_SPI_Receive+0x1bc>
 800b850:	683b      	ldr	r3, [r7, #0]
 800b852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b856:	d102      	bne.n	800b85e <HAL_SPI_Receive+0x1c2>
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d102      	bne.n	800b864 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b862:	e017      	b.n	800b894 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b868:	b29b      	uxth	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d1cd      	bne.n	800b80a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f000 fa27 	bl	800bcc6 <SPI_EndRxTransaction>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2220      	movs	r2, #32
 800b882:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b88c:	2301      	movs	r3, #1
 800b88e:	75fb      	strb	r3, [r7, #23]
 800b890:	e000      	b.n	800b894 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b892:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	2201      	movs	r2, #1
 800b898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b08c      	sub	sp, #48	; 0x30
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	60f8      	str	r0, [r7, #12]
 800b8b6:	60b9      	str	r1, [r7, #8]
 800b8b8:	607a      	str	r2, [r7, #4]
 800b8ba:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b8cc:	2b01      	cmp	r3, #1
 800b8ce:	d101      	bne.n	800b8d4 <HAL_SPI_TransmitReceive+0x26>
 800b8d0:	2302      	movs	r3, #2
 800b8d2:	e18a      	b.n	800bbea <HAL_SPI_TransmitReceive+0x33c>
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b8dc:	f7fb f940 	bl	8006b60 <HAL_GetTick>
 800b8e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b8e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b8f2:	887b      	ldrh	r3, [r7, #2]
 800b8f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b8f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d00f      	beq.n	800b91e <HAL_SPI_TransmitReceive+0x70>
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b904:	d107      	bne.n	800b916 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <HAL_SPI_TransmitReceive+0x68>
 800b90e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b912:	2b04      	cmp	r3, #4
 800b914:	d003      	beq.n	800b91e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b916:	2302      	movs	r3, #2
 800b918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b91c:	e15b      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d005      	beq.n	800b930 <HAL_SPI_TransmitReceive+0x82>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d002      	beq.n	800b930 <HAL_SPI_TransmitReceive+0x82>
 800b92a:	887b      	ldrh	r3, [r7, #2]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d103      	bne.n	800b938 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b936:	e14e      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b04      	cmp	r3, #4
 800b942:	d003      	beq.n	800b94c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2205      	movs	r2, #5
 800b948:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2200      	movs	r2, #0
 800b950:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	887a      	ldrh	r2, [r7, #2]
 800b95c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	887a      	ldrh	r2, [r7, #2]
 800b962:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	887a      	ldrh	r2, [r7, #2]
 800b96e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	887a      	ldrh	r2, [r7, #2]
 800b974:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2200      	movs	r2, #0
 800b980:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b40      	cmp	r3, #64	; 0x40
 800b98e:	d007      	beq.n	800b9a0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b99e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9a8:	d178      	bne.n	800ba9c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <HAL_SPI_TransmitReceive+0x10a>
 800b9b2:	8b7b      	ldrh	r3, [r7, #26]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d166      	bne.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9bc:	881a      	ldrh	r2, [r3, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9c8:	1c9a      	adds	r2, r3, #2
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b9dc:	e053      	b.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f003 0302 	and.w	r3, r3, #2
 800b9e8:	2b02      	cmp	r3, #2
 800b9ea:	d11b      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b9f0:	b29b      	uxth	r3, r3
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d016      	beq.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
 800b9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d113      	bne.n	800ba24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba00:	881a      	ldrh	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba0c:	1c9a      	adds	r2, r3, #2
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	3b01      	subs	r3, #1
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ba20:	2300      	movs	r3, #0
 800ba22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f003 0301 	and.w	r3, r3, #1
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d119      	bne.n	800ba66 <HAL_SPI_TransmitReceive+0x1b8>
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d014      	beq.n	800ba66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68da      	ldr	r2, [r3, #12]
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba46:	b292      	uxth	r2, r2
 800ba48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba4e:	1c9a      	adds	r2, r3, #2
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ba62:	2301      	movs	r3, #1
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ba66:	f7fb f87b 	bl	8006b60 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d807      	bhi.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
 800ba76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba7c:	d003      	beq.n	800ba86 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ba84:	e0a7      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1a6      	bne.n	800b9de <HAL_SPI_TransmitReceive+0x130>
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1a1      	bne.n	800b9de <HAL_SPI_TransmitReceive+0x130>
 800ba9a:	e07c      	b.n	800bb96 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d002      	beq.n	800baaa <HAL_SPI_TransmitReceive+0x1fc>
 800baa4:	8b7b      	ldrh	r3, [r7, #26]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d16b      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	330c      	adds	r3, #12
 800bab4:	7812      	ldrb	r2, [r2, #0]
 800bab6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	3b01      	subs	r3, #1
 800baca:	b29a      	uxth	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bad0:	e057      	b.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b02      	cmp	r3, #2
 800bade:	d11c      	bne.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bae4:	b29b      	uxth	r3, r3
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d017      	beq.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d114      	bne.n	800bb1a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	330c      	adds	r3, #12
 800bafa:	7812      	ldrb	r2, [r2, #0]
 800bafc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb02:	1c5a      	adds	r2, r3, #1
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	b29a      	uxth	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d119      	bne.n	800bb5c <HAL_SPI_TransmitReceive+0x2ae>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d014      	beq.n	800bb5c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68da      	ldr	r2, [r3, #12]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb3c:	b2d2      	uxtb	r2, r2
 800bb3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb44:	1c5a      	adds	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800bb5c:	f7fb f800 	bl	8006b60 <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d803      	bhi.n	800bb74 <HAL_SPI_TransmitReceive+0x2c6>
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d102      	bne.n	800bb7a <HAL_SPI_TransmitReceive+0x2cc>
 800bb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d103      	bne.n	800bb82 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bb80:	e029      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1a2      	bne.n	800bad2 <HAL_SPI_TransmitReceive+0x224>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d19d      	bne.n	800bad2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f8f8 	bl	800bd90 <SPI_EndRxTxTransaction>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d006      	beq.n	800bbb4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2220      	movs	r2, #32
 800bbb0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800bbb2:	e010      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	689b      	ldr	r3, [r3, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10b      	bne.n	800bbd4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	617b      	str	r3, [r7, #20]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	689b      	ldr	r3, [r3, #8]
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	e000      	b.n	800bbd6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800bbd4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2201      	movs	r2, #1
 800bbda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bbe6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3730      	adds	r7, #48	; 0x30
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	60f8      	str	r0, [r7, #12]
 800bbfa:	60b9      	str	r1, [r7, #8]
 800bbfc:	603b      	str	r3, [r7, #0]
 800bbfe:	4613      	mov	r3, r2
 800bc00:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc02:	e04c      	b.n	800bc9e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0a:	d048      	beq.n	800bc9e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800bc0c:	f7fa ffa8 	bl	8006b60 <HAL_GetTick>
 800bc10:	4602      	mov	r2, r0
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d902      	bls.n	800bc22 <SPI_WaitFlagStateUntilTimeout+0x30>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d13d      	bne.n	800bc9e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bc30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bc3a:	d111      	bne.n	800bc60 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc44:	d004      	beq.n	800bc50 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc4e:	d107      	bne.n	800bc60 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc68:	d10f      	bne.n	800bc8a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc78:	601a      	str	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bc88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2201      	movs	r2, #1
 800bc8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bc9a:	2303      	movs	r3, #3
 800bc9c:	e00f      	b.n	800bcbe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	4013      	ands	r3, r2
 800bca8:	68ba      	ldr	r2, [r7, #8]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	bf0c      	ite	eq
 800bcae:	2301      	moveq	r3, #1
 800bcb0:	2300      	movne	r3, #0
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	79fb      	ldrb	r3, [r7, #7]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d1a3      	bne.n	800bc04 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}

0800bcc6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b086      	sub	sp, #24
 800bcca:	af02      	add	r7, sp, #8
 800bccc:	60f8      	str	r0, [r7, #12]
 800bcce:	60b9      	str	r1, [r7, #8]
 800bcd0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bcda:	d111      	bne.n	800bd00 <SPI_EndRxTransaction+0x3a>
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce4:	d004      	beq.n	800bcf0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcee:	d107      	bne.n	800bd00 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681a      	ldr	r2, [r3, #0]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcfe:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bd08:	d12a      	bne.n	800bd60 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bd12:	d012      	beq.n	800bd3a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	2180      	movs	r1, #128	; 0x80
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f7ff ff67 	bl	800bbf2 <SPI_WaitFlagStateUntilTimeout>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d02d      	beq.n	800bd86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd2e:	f043 0220 	orr.w	r2, r3, #32
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e026      	b.n	800bd88 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	9300      	str	r3, [sp, #0]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	2200      	movs	r2, #0
 800bd42:	2101      	movs	r1, #1
 800bd44:	68f8      	ldr	r0, [r7, #12]
 800bd46:	f7ff ff54 	bl	800bbf2 <SPI_WaitFlagStateUntilTimeout>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d01a      	beq.n	800bd86 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd54:	f043 0220 	orr.w	r2, r3, #32
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800bd5c:	2303      	movs	r3, #3
 800bd5e:	e013      	b.n	800bd88 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	2200      	movs	r2, #0
 800bd68:	2101      	movs	r1, #1
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff ff41 	bl	800bbf2 <SPI_WaitFlagStateUntilTimeout>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d007      	beq.n	800bd86 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd7a:	f043 0220 	orr.w	r2, r3, #32
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bd82:	2303      	movs	r3, #3
 800bd84:	e000      	b.n	800bd88 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800bd86:	2300      	movs	r3, #0
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b088      	sub	sp, #32
 800bd94:	af02      	add	r7, sp, #8
 800bd96:	60f8      	str	r0, [r7, #12]
 800bd98:	60b9      	str	r1, [r7, #8]
 800bd9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bd9c:	4b1b      	ldr	r3, [pc, #108]	; (800be0c <SPI_EndRxTxTransaction+0x7c>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a1b      	ldr	r2, [pc, #108]	; (800be10 <SPI_EndRxTxTransaction+0x80>)
 800bda2:	fba2 2303 	umull	r2, r3, r2, r3
 800bda6:	0d5b      	lsrs	r3, r3, #21
 800bda8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bdac:	fb02 f303 	mul.w	r3, r2, r3
 800bdb0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bdba:	d112      	bne.n	800bde2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2180      	movs	r1, #128	; 0x80
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	f7ff ff13 	bl	800bbf2 <SPI_WaitFlagStateUntilTimeout>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d016      	beq.n	800be00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdd6:	f043 0220 	orr.w	r2, r3, #32
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	e00f      	b.n	800be02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	3b01      	subs	r3, #1
 800bdec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdf8:	2b80      	cmp	r3, #128	; 0x80
 800bdfa:	d0f2      	beq.n	800bde2 <SPI_EndRxTxTransaction+0x52>
 800bdfc:	e000      	b.n	800be00 <SPI_EndRxTxTransaction+0x70>
        break;
 800bdfe:	bf00      	nop
  }

  return HAL_OK;
 800be00:	2300      	movs	r3, #0
}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop
 800be0c:	20000000 	.word	0x20000000
 800be10:	165e9f81 	.word	0x165e9f81

0800be14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d101      	bne.n	800be26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e01d      	b.n	800be62 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d106      	bne.n	800be40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f7f9 f836 	bl	8004eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	3304      	adds	r3, #4
 800be50:	4619      	mov	r1, r3
 800be52:	4610      	mov	r0, r2
 800be54:	f000 fb56 	bl	800c504 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2201      	movs	r2, #1
 800be5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be60:	2300      	movs	r3, #0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3708      	adds	r7, #8
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}

0800be6a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b085      	sub	sp, #20
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68da      	ldr	r2, [r3, #12]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f042 0201 	orr.w	r2, r2, #1
 800be80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	689b      	ldr	r3, [r3, #8]
 800be88:	f003 0307 	and.w	r3, r3, #7
 800be8c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b06      	cmp	r3, #6
 800be92:	d007      	beq.n	800bea4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f042 0201 	orr.w	r2, r2, #1
 800bea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	e01d      	b.n	800bf00 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800beca:	b2db      	uxtb	r3, r3
 800becc:	2b00      	cmp	r3, #0
 800bece:	d106      	bne.n	800bede <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7f8 ff73 	bl	8004dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2202      	movs	r2, #2
 800bee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	3304      	adds	r3, #4
 800beee:	4619      	mov	r1, r3
 800bef0:	4610      	mov	r0, r2
 800bef2:	f000 fb07 	bl	800c504 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3708      	adds	r7, #8
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2201      	movs	r2, #1
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f000 fd42 	bl	800c9a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4a15      	ldr	r2, [pc, #84]	; (800bf7c <HAL_TIM_PWM_Start+0x74>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d004      	beq.n	800bf34 <HAL_TIM_PWM_Start+0x2c>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a14      	ldr	r2, [pc, #80]	; (800bf80 <HAL_TIM_PWM_Start+0x78>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d101      	bne.n	800bf38 <HAL_TIM_PWM_Start+0x30>
 800bf34:	2301      	movs	r3, #1
 800bf36:	e000      	b.n	800bf3a <HAL_TIM_PWM_Start+0x32>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d007      	beq.n	800bf4e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	f003 0307 	and.w	r3, r3, #7
 800bf58:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	2b06      	cmp	r3, #6
 800bf5e:	d007      	beq.n	800bf70 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	681a      	ldr	r2, [r3, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0201 	orr.w	r2, r2, #1
 800bf6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	40010000 	.word	0x40010000
 800bf80:	40010400 	.word	0x40010400

0800bf84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d101      	bne.n	800bf98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e083      	b.n	800c0a0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d106      	bne.n	800bfb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7f9 f80d 	bl	8004fcc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	687a      	ldr	r2, [r7, #4]
 800bfc2:	6812      	ldr	r2, [r2, #0]
 800bfc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bfc8:	f023 0307 	bic.w	r3, r3, #7
 800bfcc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	3304      	adds	r3, #4
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	4610      	mov	r0, r2
 800bfda:	f000 fa93 	bl	800c504 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	699b      	ldr	r3, [r3, #24]
 800bfec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c006:	f023 0303 	bic.w	r3, r3, #3
 800c00a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	689a      	ldr	r2, [r3, #8]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	021b      	lsls	r3, r3, #8
 800c016:	4313      	orrs	r3, r2
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	4313      	orrs	r3, r2
 800c01c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c024:	f023 030c 	bic.w	r3, r3, #12
 800c028:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c030:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c034:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68da      	ldr	r2, [r3, #12]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	69db      	ldr	r3, [r3, #28]
 800c03e:	021b      	lsls	r3, r3, #8
 800c040:	4313      	orrs	r3, r2
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	4313      	orrs	r3, r2
 800c046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	011a      	lsls	r2, r3, #4
 800c04e:	683b      	ldr	r3, [r7, #0]
 800c050:	6a1b      	ldr	r3, [r3, #32]
 800c052:	031b      	lsls	r3, r3, #12
 800c054:	4313      	orrs	r3, r2
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c062:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c06a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	695b      	ldr	r3, [r3, #20]
 800c074:	011b      	lsls	r3, r3, #4
 800c076:	4313      	orrs	r3, r2
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	697a      	ldr	r2, [r7, #20]
 800c084:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	693a      	ldr	r2, [r7, #16]
 800c08c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2201      	movs	r2, #1
 800c09a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3718      	adds	r7, #24
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <HAL_TIM_Encoder_Start+0x16>
 800c0b8:	2b04      	cmp	r3, #4
 800c0ba:	d008      	beq.n	800c0ce <HAL_TIM_Encoder_Start+0x26>
 800c0bc:	e00f      	b.n	800c0de <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fc6c 	bl	800c9a4 <TIM_CCxChannelCmd>
      break;
 800c0cc:	e016      	b.n	800c0fc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	2104      	movs	r1, #4
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 fc64 	bl	800c9a4 <TIM_CCxChannelCmd>
      break;
 800c0dc:	e00e      	b.n	800c0fc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	2100      	movs	r1, #0
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f000 fc5c 	bl	800c9a4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	2104      	movs	r1, #4
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f000 fc55 	bl	800c9a4 <TIM_CCxChannelCmd>
      break;
 800c0fa:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f042 0201 	orr.w	r2, r2, #1
 800c10a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	691b      	ldr	r3, [r3, #16]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d122      	bne.n	800c172 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b02      	cmp	r3, #2
 800c138:	d11b      	bne.n	800c172 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f06f 0202 	mvn.w	r2, #2
 800c142:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2201      	movs	r2, #1
 800c148:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d003      	beq.n	800c160 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f9b5 	bl	800c4c8 <HAL_TIM_IC_CaptureCallback>
 800c15e:	e005      	b.n	800c16c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 f9a7 	bl	800c4b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f9b8 	bl	800c4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	691b      	ldr	r3, [r3, #16]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b04      	cmp	r3, #4
 800c17e:	d122      	bne.n	800c1c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d11b      	bne.n	800c1c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f06f 0204 	mvn.w	r2, #4
 800c196:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2202      	movs	r2, #2
 800c19c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f98b 	bl	800c4c8 <HAL_TIM_IC_CaptureCallback>
 800c1b2:	e005      	b.n	800c1c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 f97d 	bl	800c4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f98e 	bl	800c4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	691b      	ldr	r3, [r3, #16]
 800c1cc:	f003 0308 	and.w	r3, r3, #8
 800c1d0:	2b08      	cmp	r3, #8
 800c1d2:	d122      	bne.n	800c21a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	f003 0308 	and.w	r3, r3, #8
 800c1de:	2b08      	cmp	r3, #8
 800c1e0:	d11b      	bne.n	800c21a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f06f 0208 	mvn.w	r2, #8
 800c1ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2204      	movs	r2, #4
 800c1f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69db      	ldr	r3, [r3, #28]
 800c1f8:	f003 0303 	and.w	r3, r3, #3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f961 	bl	800c4c8 <HAL_TIM_IC_CaptureCallback>
 800c206:	e005      	b.n	800c214 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f953 	bl	800c4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f964 	bl	800c4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	f003 0310 	and.w	r3, r3, #16
 800c224:	2b10      	cmp	r3, #16
 800c226:	d122      	bne.n	800c26e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	68db      	ldr	r3, [r3, #12]
 800c22e:	f003 0310 	and.w	r3, r3, #16
 800c232:	2b10      	cmp	r3, #16
 800c234:	d11b      	bne.n	800c26e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f06f 0210 	mvn.w	r2, #16
 800c23e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2208      	movs	r2, #8
 800c244:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 f937 	bl	800c4c8 <HAL_TIM_IC_CaptureCallback>
 800c25a:	e005      	b.n	800c268 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f929 	bl	800c4b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f93a 	bl	800c4dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	691b      	ldr	r3, [r3, #16]
 800c274:	f003 0301 	and.w	r3, r3, #1
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d10e      	bne.n	800c29a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	f003 0301 	and.w	r3, r3, #1
 800c286:	2b01      	cmp	r3, #1
 800c288:	d107      	bne.n	800c29a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f06f 0201 	mvn.w	r2, #1
 800c292:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7f7 fb6f 	bl	8003978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a4:	2b80      	cmp	r3, #128	; 0x80
 800c2a6:	d10e      	bne.n	800c2c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b2:	2b80      	cmp	r3, #128	; 0x80
 800c2b4:	d107      	bne.n	800c2c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fc6d 	bl	800cba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d0:	2b40      	cmp	r3, #64	; 0x40
 800c2d2:	d10e      	bne.n	800c2f2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2de:	2b40      	cmp	r3, #64	; 0x40
 800c2e0:	d107      	bne.n	800c2f2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f8ff 	bl	800c4f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	691b      	ldr	r3, [r3, #16]
 800c2f8:	f003 0320 	and.w	r3, r3, #32
 800c2fc:	2b20      	cmp	r3, #32
 800c2fe:	d10e      	bne.n	800c31e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	f003 0320 	and.w	r3, r3, #32
 800c30a:	2b20      	cmp	r3, #32
 800c30c:	d107      	bne.n	800c31e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f06f 0220 	mvn.w	r2, #32
 800c316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 fc37 	bl	800cb8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c31e:	bf00      	nop
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
	...

0800c328 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d101      	bne.n	800c342 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c33e:	2302      	movs	r3, #2
 800c340:	e0b4      	b.n	800c4ac <HAL_TIM_PWM_ConfigChannel+0x184>
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2201      	movs	r2, #1
 800c346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2202      	movs	r2, #2
 800c34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2b0c      	cmp	r3, #12
 800c356:	f200 809f 	bhi.w	800c498 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c35a:	a201      	add	r2, pc, #4	; (adr r2, 800c360 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c360:	0800c395 	.word	0x0800c395
 800c364:	0800c499 	.word	0x0800c499
 800c368:	0800c499 	.word	0x0800c499
 800c36c:	0800c499 	.word	0x0800c499
 800c370:	0800c3d5 	.word	0x0800c3d5
 800c374:	0800c499 	.word	0x0800c499
 800c378:	0800c499 	.word	0x0800c499
 800c37c:	0800c499 	.word	0x0800c499
 800c380:	0800c417 	.word	0x0800c417
 800c384:	0800c499 	.word	0x0800c499
 800c388:	0800c499 	.word	0x0800c499
 800c38c:	0800c499 	.word	0x0800c499
 800c390:	0800c457 	.word	0x0800c457
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68b9      	ldr	r1, [r7, #8]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f952 	bl	800c644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	699a      	ldr	r2, [r3, #24]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f042 0208 	orr.w	r2, r2, #8
 800c3ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	699a      	ldr	r2, [r3, #24]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f022 0204 	bic.w	r2, r2, #4
 800c3be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6999      	ldr	r1, [r3, #24]
 800c3c6:	68bb      	ldr	r3, [r7, #8]
 800c3c8:	691a      	ldr	r2, [r3, #16]
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	619a      	str	r2, [r3, #24]
      break;
 800c3d2:	e062      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 f9a2 	bl	800c724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6999      	ldr	r1, [r3, #24]
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	691b      	ldr	r3, [r3, #16]
 800c40a:	021a      	lsls	r2, r3, #8
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	430a      	orrs	r2, r1
 800c412:	619a      	str	r2, [r3, #24]
      break;
 800c414:	e041      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	68b9      	ldr	r1, [r7, #8]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f9f7 	bl	800c810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	69da      	ldr	r2, [r3, #28]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f042 0208 	orr.w	r2, r2, #8
 800c430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69da      	ldr	r2, [r3, #28]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0204 	bic.w	r2, r2, #4
 800c440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	69d9      	ldr	r1, [r3, #28]
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	691a      	ldr	r2, [r3, #16]
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	430a      	orrs	r2, r1
 800c452:	61da      	str	r2, [r3, #28]
      break;
 800c454:	e021      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 fa4b 	bl	800c8f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	69da      	ldr	r2, [r3, #28]
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	69da      	ldr	r2, [r3, #28]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	69d9      	ldr	r1, [r3, #28]
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	691b      	ldr	r3, [r3, #16]
 800c48c:	021a      	lsls	r2, r3, #8
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	430a      	orrs	r2, r1
 800c494:	61da      	str	r2, [r3, #28]
      break;
 800c496:	e000      	b.n	800c49a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c498:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	2201      	movs	r2, #1
 800c49e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4aa:	2300      	movs	r3, #0
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b083      	sub	sp, #12
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4d0:	bf00      	nop
 800c4d2:	370c      	adds	r7, #12
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4e4:	bf00      	nop
 800c4e6:	370c      	adds	r7, #12
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ee:	4770      	bx	lr

0800c4f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c504:	b480      	push	{r7}
 800c506:	b085      	sub	sp, #20
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a40      	ldr	r2, [pc, #256]	; (800c618 <TIM_Base_SetConfig+0x114>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d013      	beq.n	800c544 <TIM_Base_SetConfig+0x40>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c522:	d00f      	beq.n	800c544 <TIM_Base_SetConfig+0x40>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a3d      	ldr	r2, [pc, #244]	; (800c61c <TIM_Base_SetConfig+0x118>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00b      	beq.n	800c544 <TIM_Base_SetConfig+0x40>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a3c      	ldr	r2, [pc, #240]	; (800c620 <TIM_Base_SetConfig+0x11c>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d007      	beq.n	800c544 <TIM_Base_SetConfig+0x40>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a3b      	ldr	r2, [pc, #236]	; (800c624 <TIM_Base_SetConfig+0x120>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_Base_SetConfig+0x40>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a3a      	ldr	r2, [pc, #232]	; (800c628 <TIM_Base_SetConfig+0x124>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d108      	bne.n	800c556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4313      	orrs	r3, r2
 800c554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a2f      	ldr	r2, [pc, #188]	; (800c618 <TIM_Base_SetConfig+0x114>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d02b      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c564:	d027      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a2c      	ldr	r2, [pc, #176]	; (800c61c <TIM_Base_SetConfig+0x118>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d023      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a2b      	ldr	r2, [pc, #172]	; (800c620 <TIM_Base_SetConfig+0x11c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d01f      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a2a      	ldr	r2, [pc, #168]	; (800c624 <TIM_Base_SetConfig+0x120>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d01b      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a29      	ldr	r2, [pc, #164]	; (800c628 <TIM_Base_SetConfig+0x124>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d017      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a28      	ldr	r2, [pc, #160]	; (800c62c <TIM_Base_SetConfig+0x128>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d013      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a27      	ldr	r2, [pc, #156]	; (800c630 <TIM_Base_SetConfig+0x12c>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d00f      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a26      	ldr	r2, [pc, #152]	; (800c634 <TIM_Base_SetConfig+0x130>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d00b      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	4a25      	ldr	r2, [pc, #148]	; (800c638 <TIM_Base_SetConfig+0x134>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d007      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4a24      	ldr	r2, [pc, #144]	; (800c63c <TIM_Base_SetConfig+0x138>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d003      	beq.n	800c5b6 <TIM_Base_SetConfig+0xb2>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4a23      	ldr	r2, [pc, #140]	; (800c640 <TIM_Base_SetConfig+0x13c>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d108      	bne.n	800c5c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	689a      	ldr	r2, [r3, #8]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a0a      	ldr	r2, [pc, #40]	; (800c618 <TIM_Base_SetConfig+0x114>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d003      	beq.n	800c5fc <TIM_Base_SetConfig+0xf8>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a0c      	ldr	r2, [pc, #48]	; (800c628 <TIM_Base_SetConfig+0x124>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d103      	bne.n	800c604 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	691a      	ldr	r2, [r3, #16]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	615a      	str	r2, [r3, #20]
}
 800c60a:	bf00      	nop
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	40010000 	.word	0x40010000
 800c61c:	40000400 	.word	0x40000400
 800c620:	40000800 	.word	0x40000800
 800c624:	40000c00 	.word	0x40000c00
 800c628:	40010400 	.word	0x40010400
 800c62c:	40014000 	.word	0x40014000
 800c630:	40014400 	.word	0x40014400
 800c634:	40014800 	.word	0x40014800
 800c638:	40001800 	.word	0x40001800
 800c63c:	40001c00 	.word	0x40001c00
 800c640:	40002000 	.word	0x40002000

0800c644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	f023 0201 	bic.w	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f023 0302 	bic.w	r3, r3, #2
 800c68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	4313      	orrs	r3, r2
 800c696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a20      	ldr	r2, [pc, #128]	; (800c71c <TIM_OC1_SetConfig+0xd8>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d003      	beq.n	800c6a8 <TIM_OC1_SetConfig+0x64>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a1f      	ldr	r2, [pc, #124]	; (800c720 <TIM_OC1_SetConfig+0xdc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d10c      	bne.n	800c6c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f023 0308 	bic.w	r3, r3, #8
 800c6ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f023 0304 	bic.w	r3, r3, #4
 800c6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a15      	ldr	r2, [pc, #84]	; (800c71c <TIM_OC1_SetConfig+0xd8>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d003      	beq.n	800c6d2 <TIM_OC1_SetConfig+0x8e>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a14      	ldr	r2, [pc, #80]	; (800c720 <TIM_OC1_SetConfig+0xdc>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d111      	bne.n	800c6f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	621a      	str	r2, [r3, #32]
}
 800c710:	bf00      	nop
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	40010000 	.word	0x40010000
 800c720:	40010400 	.word	0x40010400

0800c724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	f023 0210 	bic.w	r2, r3, #16
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	021b      	lsls	r3, r3, #8
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	4313      	orrs	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f023 0320 	bic.w	r3, r3, #32
 800c76e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	011b      	lsls	r3, r3, #4
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a22      	ldr	r2, [pc, #136]	; (800c808 <TIM_OC2_SetConfig+0xe4>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d003      	beq.n	800c78c <TIM_OC2_SetConfig+0x68>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a21      	ldr	r2, [pc, #132]	; (800c80c <TIM_OC2_SetConfig+0xe8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d10d      	bne.n	800c7a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a17      	ldr	r2, [pc, #92]	; (800c808 <TIM_OC2_SetConfig+0xe4>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <TIM_OC2_SetConfig+0x94>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a16      	ldr	r2, [pc, #88]	; (800c80c <TIM_OC2_SetConfig+0xe8>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d113      	bne.n	800c7e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr
 800c806:	bf00      	nop
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400

0800c810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c810:	b480      	push	{r7}
 800c812:	b087      	sub	sp, #28
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6a1b      	ldr	r3, [r3, #32]
 800c81e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	69db      	ldr	r3, [r3, #28]
 800c836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	68fa      	ldr	r2, [r7, #12]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	021b      	lsls	r3, r3, #8
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	4313      	orrs	r3, r2
 800c864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4a21      	ldr	r2, [pc, #132]	; (800c8f0 <TIM_OC3_SetConfig+0xe0>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d003      	beq.n	800c876 <TIM_OC3_SetConfig+0x66>
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a20      	ldr	r2, [pc, #128]	; (800c8f4 <TIM_OC3_SetConfig+0xe4>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d10d      	bne.n	800c892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c87c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	68db      	ldr	r3, [r3, #12]
 800c882:	021b      	lsls	r3, r3, #8
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	4313      	orrs	r3, r2
 800c888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a16      	ldr	r2, [pc, #88]	; (800c8f0 <TIM_OC3_SetConfig+0xe0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d003      	beq.n	800c8a2 <TIM_OC3_SetConfig+0x92>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	4a15      	ldr	r2, [pc, #84]	; (800c8f4 <TIM_OC3_SetConfig+0xe4>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d113      	bne.n	800c8ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	011b      	lsls	r3, r3, #4
 800c8b8:	693a      	ldr	r2, [r7, #16]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	011b      	lsls	r3, r3, #4
 800c8c4:	693a      	ldr	r2, [r7, #16]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	693a      	ldr	r2, [r7, #16]
 800c8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	697a      	ldr	r2, [r7, #20]
 800c8e2:	621a      	str	r2, [r3, #32]
}
 800c8e4:	bf00      	nop
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	40010000 	.word	0x40010000
 800c8f4:	40010400 	.word	0x40010400

0800c8f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	69db      	ldr	r3, [r3, #28]
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	021b      	lsls	r3, r3, #8
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	4313      	orrs	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	031b      	lsls	r3, r3, #12
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a12      	ldr	r2, [pc, #72]	; (800c99c <TIM_OC4_SetConfig+0xa4>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC4_SetConfig+0x68>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a11      	ldr	r2, [pc, #68]	; (800c9a0 <TIM_OC4_SetConfig+0xa8>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d109      	bne.n	800c974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	695b      	ldr	r3, [r3, #20]
 800c96c:	019b      	lsls	r3, r3, #6
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	4313      	orrs	r3, r2
 800c972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	68fa      	ldr	r2, [r7, #12]
 800c97e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	621a      	str	r2, [r3, #32]
}
 800c98e:	bf00      	nop
 800c990:	371c      	adds	r7, #28
 800c992:	46bd      	mov	sp, r7
 800c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c998:	4770      	bx	lr
 800c99a:	bf00      	nop
 800c99c:	40010000 	.word	0x40010000
 800c9a0:	40010400 	.word	0x40010400

0800c9a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b087      	sub	sp, #28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	f003 031f 	and.w	r3, r3, #31
 800c9b6:	2201      	movs	r2, #1
 800c9b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c9bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6a1a      	ldr	r2, [r3, #32]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	43db      	mvns	r3, r3
 800c9c6:	401a      	ands	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	6a1a      	ldr	r2, [r3, #32]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	f003 031f 	and.w	r3, r3, #31
 800c9d6:	6879      	ldr	r1, [r7, #4]
 800c9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c9dc:	431a      	orrs	r2, r3
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	621a      	str	r2, [r3, #32]
}
 800c9e2:	bf00      	nop
 800c9e4:	371c      	adds	r7, #28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
	...

0800c9f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d101      	bne.n	800ca08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca04:	2302      	movs	r3, #2
 800ca06:	e05a      	b.n	800cabe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2202      	movs	r2, #2
 800ca14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4313      	orrs	r3, r2
 800ca38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68fa      	ldr	r2, [r7, #12]
 800ca40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a21      	ldr	r2, [pc, #132]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d022      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca54:	d01d      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1d      	ldr	r2, [pc, #116]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d018      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1b      	ldr	r2, [pc, #108]	; (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d013      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1a      	ldr	r2, [pc, #104]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d00e      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a18      	ldr	r2, [pc, #96]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d009      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a17      	ldr	r2, [pc, #92]	; (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d004      	beq.n	800ca92 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d10c      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	68ba      	ldr	r2, [r7, #8]
 800caa0:	4313      	orrs	r3, r2
 800caa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	40010000 	.word	0x40010000
 800cad0:	40000400 	.word	0x40000400
 800cad4:	40000800 	.word	0x40000800
 800cad8:	40000c00 	.word	0x40000c00
 800cadc:	40010400 	.word	0x40010400
 800cae0:	40014000 	.word	0x40014000
 800cae4:	40001800 	.word	0x40001800

0800cae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e03d      	b.n	800cb80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	69db      	ldr	r3, [r3, #28]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr

0800cb8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb94:	bf00      	nop
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr

0800cbb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b082      	sub	sp, #8
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e03f      	b.n	800cc46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d106      	bne.n	800cbe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f7f8 fb20 	bl	8005220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2224      	movs	r2, #36	; 0x24
 800cbe4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f000 f829 	bl	800cc50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	691a      	ldr	r2, [r3, #16]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	695a      	ldr	r2, [r3, #20]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2220      	movs	r2, #32
 800cc38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2220      	movs	r2, #32
 800cc40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800cc44:	2300      	movs	r3, #0
}
 800cc46:	4618      	mov	r0, r3
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc54:	b085      	sub	sp, #20
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	68da      	ldr	r2, [r3, #12]
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	689a      	ldr	r2, [r3, #8]
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	695b      	ldr	r3, [r3, #20]
 800cc7e:	431a      	orrs	r2, r3
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	69db      	ldr	r3, [r3, #28]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	68db      	ldr	r3, [r3, #12]
 800cc8e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cc92:	f023 030c 	bic.w	r3, r3, #12
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	6812      	ldr	r2, [r2, #0]
 800cc9a:	68f9      	ldr	r1, [r7, #12]
 800cc9c:	430b      	orrs	r3, r1
 800cc9e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	695b      	ldr	r3, [r3, #20]
 800cca6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	699a      	ldr	r2, [r3, #24]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	430a      	orrs	r2, r1
 800ccb4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	69db      	ldr	r3, [r3, #28]
 800ccba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccbe:	f040 818b 	bne.w	800cfd8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4ac1      	ldr	r2, [pc, #772]	; (800cfcc <UART_SetConfig+0x37c>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d005      	beq.n	800ccd8 <UART_SetConfig+0x88>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4abf      	ldr	r2, [pc, #764]	; (800cfd0 <UART_SetConfig+0x380>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	f040 80bd 	bne.w	800ce52 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccd8:	f7fc fbcc 	bl	8009474 <HAL_RCC_GetPCLK2Freq>
 800ccdc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	461d      	mov	r5, r3
 800cce2:	f04f 0600 	mov.w	r6, #0
 800cce6:	46a8      	mov	r8, r5
 800cce8:	46b1      	mov	r9, r6
 800ccea:	eb18 0308 	adds.w	r3, r8, r8
 800ccee:	eb49 0409 	adc.w	r4, r9, r9
 800ccf2:	4698      	mov	r8, r3
 800ccf4:	46a1      	mov	r9, r4
 800ccf6:	eb18 0805 	adds.w	r8, r8, r5
 800ccfa:	eb49 0906 	adc.w	r9, r9, r6
 800ccfe:	f04f 0100 	mov.w	r1, #0
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cd0a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cd0e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cd12:	4688      	mov	r8, r1
 800cd14:	4691      	mov	r9, r2
 800cd16:	eb18 0005 	adds.w	r0, r8, r5
 800cd1a:	eb49 0106 	adc.w	r1, r9, r6
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	461d      	mov	r5, r3
 800cd24:	f04f 0600 	mov.w	r6, #0
 800cd28:	196b      	adds	r3, r5, r5
 800cd2a:	eb46 0406 	adc.w	r4, r6, r6
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4623      	mov	r3, r4
 800cd32:	f7f3 ffc1 	bl	8000cb8 <__aeabi_uldivmod>
 800cd36:	4603      	mov	r3, r0
 800cd38:	460c      	mov	r4, r1
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	4ba5      	ldr	r3, [pc, #660]	; (800cfd4 <UART_SetConfig+0x384>)
 800cd3e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd42:	095b      	lsrs	r3, r3, #5
 800cd44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	461d      	mov	r5, r3
 800cd4c:	f04f 0600 	mov.w	r6, #0
 800cd50:	46a9      	mov	r9, r5
 800cd52:	46b2      	mov	sl, r6
 800cd54:	eb19 0309 	adds.w	r3, r9, r9
 800cd58:	eb4a 040a 	adc.w	r4, sl, sl
 800cd5c:	4699      	mov	r9, r3
 800cd5e:	46a2      	mov	sl, r4
 800cd60:	eb19 0905 	adds.w	r9, r9, r5
 800cd64:	eb4a 0a06 	adc.w	sl, sl, r6
 800cd68:	f04f 0100 	mov.w	r1, #0
 800cd6c:	f04f 0200 	mov.w	r2, #0
 800cd70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd7c:	4689      	mov	r9, r1
 800cd7e:	4692      	mov	sl, r2
 800cd80:	eb19 0005 	adds.w	r0, r9, r5
 800cd84:	eb4a 0106 	adc.w	r1, sl, r6
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	461d      	mov	r5, r3
 800cd8e:	f04f 0600 	mov.w	r6, #0
 800cd92:	196b      	adds	r3, r5, r5
 800cd94:	eb46 0406 	adc.w	r4, r6, r6
 800cd98:	461a      	mov	r2, r3
 800cd9a:	4623      	mov	r3, r4
 800cd9c:	f7f3 ff8c 	bl	8000cb8 <__aeabi_uldivmod>
 800cda0:	4603      	mov	r3, r0
 800cda2:	460c      	mov	r4, r1
 800cda4:	461a      	mov	r2, r3
 800cda6:	4b8b      	ldr	r3, [pc, #556]	; (800cfd4 <UART_SetConfig+0x384>)
 800cda8:	fba3 1302 	umull	r1, r3, r3, r2
 800cdac:	095b      	lsrs	r3, r3, #5
 800cdae:	2164      	movs	r1, #100	; 0x64
 800cdb0:	fb01 f303 	mul.w	r3, r1, r3
 800cdb4:	1ad3      	subs	r3, r2, r3
 800cdb6:	00db      	lsls	r3, r3, #3
 800cdb8:	3332      	adds	r3, #50	; 0x32
 800cdba:	4a86      	ldr	r2, [pc, #536]	; (800cfd4 <UART_SetConfig+0x384>)
 800cdbc:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc0:	095b      	lsrs	r3, r3, #5
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdc8:	4498      	add	r8, r3
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	461d      	mov	r5, r3
 800cdce:	f04f 0600 	mov.w	r6, #0
 800cdd2:	46a9      	mov	r9, r5
 800cdd4:	46b2      	mov	sl, r6
 800cdd6:	eb19 0309 	adds.w	r3, r9, r9
 800cdda:	eb4a 040a 	adc.w	r4, sl, sl
 800cdde:	4699      	mov	r9, r3
 800cde0:	46a2      	mov	sl, r4
 800cde2:	eb19 0905 	adds.w	r9, r9, r5
 800cde6:	eb4a 0a06 	adc.w	sl, sl, r6
 800cdea:	f04f 0100 	mov.w	r1, #0
 800cdee:	f04f 0200 	mov.w	r2, #0
 800cdf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cdf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cdfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cdfe:	4689      	mov	r9, r1
 800ce00:	4692      	mov	sl, r2
 800ce02:	eb19 0005 	adds.w	r0, r9, r5
 800ce06:	eb4a 0106 	adc.w	r1, sl, r6
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	461d      	mov	r5, r3
 800ce10:	f04f 0600 	mov.w	r6, #0
 800ce14:	196b      	adds	r3, r5, r5
 800ce16:	eb46 0406 	adc.w	r4, r6, r6
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	4623      	mov	r3, r4
 800ce1e:	f7f3 ff4b 	bl	8000cb8 <__aeabi_uldivmod>
 800ce22:	4603      	mov	r3, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	461a      	mov	r2, r3
 800ce28:	4b6a      	ldr	r3, [pc, #424]	; (800cfd4 <UART_SetConfig+0x384>)
 800ce2a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce2e:	095b      	lsrs	r3, r3, #5
 800ce30:	2164      	movs	r1, #100	; 0x64
 800ce32:	fb01 f303 	mul.w	r3, r1, r3
 800ce36:	1ad3      	subs	r3, r2, r3
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	3332      	adds	r3, #50	; 0x32
 800ce3c:	4a65      	ldr	r2, [pc, #404]	; (800cfd4 <UART_SetConfig+0x384>)
 800ce3e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce42:	095b      	lsrs	r3, r3, #5
 800ce44:	f003 0207 	and.w	r2, r3, #7
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4442      	add	r2, r8
 800ce4e:	609a      	str	r2, [r3, #8]
 800ce50:	e26f      	b.n	800d332 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ce52:	f7fc fafb 	bl	800944c <HAL_RCC_GetPCLK1Freq>
 800ce56:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	461d      	mov	r5, r3
 800ce5c:	f04f 0600 	mov.w	r6, #0
 800ce60:	46a8      	mov	r8, r5
 800ce62:	46b1      	mov	r9, r6
 800ce64:	eb18 0308 	adds.w	r3, r8, r8
 800ce68:	eb49 0409 	adc.w	r4, r9, r9
 800ce6c:	4698      	mov	r8, r3
 800ce6e:	46a1      	mov	r9, r4
 800ce70:	eb18 0805 	adds.w	r8, r8, r5
 800ce74:	eb49 0906 	adc.w	r9, r9, r6
 800ce78:	f04f 0100 	mov.w	r1, #0
 800ce7c:	f04f 0200 	mov.w	r2, #0
 800ce80:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ce84:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ce88:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ce8c:	4688      	mov	r8, r1
 800ce8e:	4691      	mov	r9, r2
 800ce90:	eb18 0005 	adds.w	r0, r8, r5
 800ce94:	eb49 0106 	adc.w	r1, r9, r6
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	461d      	mov	r5, r3
 800ce9e:	f04f 0600 	mov.w	r6, #0
 800cea2:	196b      	adds	r3, r5, r5
 800cea4:	eb46 0406 	adc.w	r4, r6, r6
 800cea8:	461a      	mov	r2, r3
 800ceaa:	4623      	mov	r3, r4
 800ceac:	f7f3 ff04 	bl	8000cb8 <__aeabi_uldivmod>
 800ceb0:	4603      	mov	r3, r0
 800ceb2:	460c      	mov	r4, r1
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	4b47      	ldr	r3, [pc, #284]	; (800cfd4 <UART_SetConfig+0x384>)
 800ceb8:	fba3 2302 	umull	r2, r3, r3, r2
 800cebc:	095b      	lsrs	r3, r3, #5
 800cebe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	461d      	mov	r5, r3
 800cec6:	f04f 0600 	mov.w	r6, #0
 800ceca:	46a9      	mov	r9, r5
 800cecc:	46b2      	mov	sl, r6
 800cece:	eb19 0309 	adds.w	r3, r9, r9
 800ced2:	eb4a 040a 	adc.w	r4, sl, sl
 800ced6:	4699      	mov	r9, r3
 800ced8:	46a2      	mov	sl, r4
 800ceda:	eb19 0905 	adds.w	r9, r9, r5
 800cede:	eb4a 0a06 	adc.w	sl, sl, r6
 800cee2:	f04f 0100 	mov.w	r1, #0
 800cee6:	f04f 0200 	mov.w	r2, #0
 800ceea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ceee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cef2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cef6:	4689      	mov	r9, r1
 800cef8:	4692      	mov	sl, r2
 800cefa:	eb19 0005 	adds.w	r0, r9, r5
 800cefe:	eb4a 0106 	adc.w	r1, sl, r6
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	461d      	mov	r5, r3
 800cf08:	f04f 0600 	mov.w	r6, #0
 800cf0c:	196b      	adds	r3, r5, r5
 800cf0e:	eb46 0406 	adc.w	r4, r6, r6
 800cf12:	461a      	mov	r2, r3
 800cf14:	4623      	mov	r3, r4
 800cf16:	f7f3 fecf 	bl	8000cb8 <__aeabi_uldivmod>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	461a      	mov	r2, r3
 800cf20:	4b2c      	ldr	r3, [pc, #176]	; (800cfd4 <UART_SetConfig+0x384>)
 800cf22:	fba3 1302 	umull	r1, r3, r3, r2
 800cf26:	095b      	lsrs	r3, r3, #5
 800cf28:	2164      	movs	r1, #100	; 0x64
 800cf2a:	fb01 f303 	mul.w	r3, r1, r3
 800cf2e:	1ad3      	subs	r3, r2, r3
 800cf30:	00db      	lsls	r3, r3, #3
 800cf32:	3332      	adds	r3, #50	; 0x32
 800cf34:	4a27      	ldr	r2, [pc, #156]	; (800cfd4 <UART_SetConfig+0x384>)
 800cf36:	fba2 2303 	umull	r2, r3, r2, r3
 800cf3a:	095b      	lsrs	r3, r3, #5
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cf42:	4498      	add	r8, r3
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	461d      	mov	r5, r3
 800cf48:	f04f 0600 	mov.w	r6, #0
 800cf4c:	46a9      	mov	r9, r5
 800cf4e:	46b2      	mov	sl, r6
 800cf50:	eb19 0309 	adds.w	r3, r9, r9
 800cf54:	eb4a 040a 	adc.w	r4, sl, sl
 800cf58:	4699      	mov	r9, r3
 800cf5a:	46a2      	mov	sl, r4
 800cf5c:	eb19 0905 	adds.w	r9, r9, r5
 800cf60:	eb4a 0a06 	adc.w	sl, sl, r6
 800cf64:	f04f 0100 	mov.w	r1, #0
 800cf68:	f04f 0200 	mov.w	r2, #0
 800cf6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cf70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cf74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cf78:	4689      	mov	r9, r1
 800cf7a:	4692      	mov	sl, r2
 800cf7c:	eb19 0005 	adds.w	r0, r9, r5
 800cf80:	eb4a 0106 	adc.w	r1, sl, r6
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	461d      	mov	r5, r3
 800cf8a:	f04f 0600 	mov.w	r6, #0
 800cf8e:	196b      	adds	r3, r5, r5
 800cf90:	eb46 0406 	adc.w	r4, r6, r6
 800cf94:	461a      	mov	r2, r3
 800cf96:	4623      	mov	r3, r4
 800cf98:	f7f3 fe8e 	bl	8000cb8 <__aeabi_uldivmod>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	460c      	mov	r4, r1
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	4b0c      	ldr	r3, [pc, #48]	; (800cfd4 <UART_SetConfig+0x384>)
 800cfa4:	fba3 1302 	umull	r1, r3, r3, r2
 800cfa8:	095b      	lsrs	r3, r3, #5
 800cfaa:	2164      	movs	r1, #100	; 0x64
 800cfac:	fb01 f303 	mul.w	r3, r1, r3
 800cfb0:	1ad3      	subs	r3, r2, r3
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	3332      	adds	r3, #50	; 0x32
 800cfb6:	4a07      	ldr	r2, [pc, #28]	; (800cfd4 <UART_SetConfig+0x384>)
 800cfb8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfbc:	095b      	lsrs	r3, r3, #5
 800cfbe:	f003 0207 	and.w	r2, r3, #7
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4442      	add	r2, r8
 800cfc8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cfca:	e1b2      	b.n	800d332 <UART_SetConfig+0x6e2>
 800cfcc:	40011000 	.word	0x40011000
 800cfd0:	40011400 	.word	0x40011400
 800cfd4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	4ad7      	ldr	r2, [pc, #860]	; (800d33c <UART_SetConfig+0x6ec>)
 800cfde:	4293      	cmp	r3, r2
 800cfe0:	d005      	beq.n	800cfee <UART_SetConfig+0x39e>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	4ad6      	ldr	r2, [pc, #856]	; (800d340 <UART_SetConfig+0x6f0>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	f040 80d1 	bne.w	800d190 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfee:	f7fc fa41 	bl	8009474 <HAL_RCC_GetPCLK2Freq>
 800cff2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	469a      	mov	sl, r3
 800cff8:	f04f 0b00 	mov.w	fp, #0
 800cffc:	46d0      	mov	r8, sl
 800cffe:	46d9      	mov	r9, fp
 800d000:	eb18 0308 	adds.w	r3, r8, r8
 800d004:	eb49 0409 	adc.w	r4, r9, r9
 800d008:	4698      	mov	r8, r3
 800d00a:	46a1      	mov	r9, r4
 800d00c:	eb18 080a 	adds.w	r8, r8, sl
 800d010:	eb49 090b 	adc.w	r9, r9, fp
 800d014:	f04f 0100 	mov.w	r1, #0
 800d018:	f04f 0200 	mov.w	r2, #0
 800d01c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d020:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d024:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d028:	4688      	mov	r8, r1
 800d02a:	4691      	mov	r9, r2
 800d02c:	eb1a 0508 	adds.w	r5, sl, r8
 800d030:	eb4b 0609 	adc.w	r6, fp, r9
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	685b      	ldr	r3, [r3, #4]
 800d038:	4619      	mov	r1, r3
 800d03a:	f04f 0200 	mov.w	r2, #0
 800d03e:	f04f 0300 	mov.w	r3, #0
 800d042:	f04f 0400 	mov.w	r4, #0
 800d046:	0094      	lsls	r4, r2, #2
 800d048:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d04c:	008b      	lsls	r3, r1, #2
 800d04e:	461a      	mov	r2, r3
 800d050:	4623      	mov	r3, r4
 800d052:	4628      	mov	r0, r5
 800d054:	4631      	mov	r1, r6
 800d056:	f7f3 fe2f 	bl	8000cb8 <__aeabi_uldivmod>
 800d05a:	4603      	mov	r3, r0
 800d05c:	460c      	mov	r4, r1
 800d05e:	461a      	mov	r2, r3
 800d060:	4bb8      	ldr	r3, [pc, #736]	; (800d344 <UART_SetConfig+0x6f4>)
 800d062:	fba3 2302 	umull	r2, r3, r3, r2
 800d066:	095b      	lsrs	r3, r3, #5
 800d068:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	469b      	mov	fp, r3
 800d070:	f04f 0c00 	mov.w	ip, #0
 800d074:	46d9      	mov	r9, fp
 800d076:	46e2      	mov	sl, ip
 800d078:	eb19 0309 	adds.w	r3, r9, r9
 800d07c:	eb4a 040a 	adc.w	r4, sl, sl
 800d080:	4699      	mov	r9, r3
 800d082:	46a2      	mov	sl, r4
 800d084:	eb19 090b 	adds.w	r9, r9, fp
 800d088:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d08c:	f04f 0100 	mov.w	r1, #0
 800d090:	f04f 0200 	mov.w	r2, #0
 800d094:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d098:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d09c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d0a0:	4689      	mov	r9, r1
 800d0a2:	4692      	mov	sl, r2
 800d0a4:	eb1b 0509 	adds.w	r5, fp, r9
 800d0a8:	eb4c 060a 	adc.w	r6, ip, sl
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	f04f 0200 	mov.w	r2, #0
 800d0b6:	f04f 0300 	mov.w	r3, #0
 800d0ba:	f04f 0400 	mov.w	r4, #0
 800d0be:	0094      	lsls	r4, r2, #2
 800d0c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d0c4:	008b      	lsls	r3, r1, #2
 800d0c6:	461a      	mov	r2, r3
 800d0c8:	4623      	mov	r3, r4
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	4631      	mov	r1, r6
 800d0ce:	f7f3 fdf3 	bl	8000cb8 <__aeabi_uldivmod>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	460c      	mov	r4, r1
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	4b9a      	ldr	r3, [pc, #616]	; (800d344 <UART_SetConfig+0x6f4>)
 800d0da:	fba3 1302 	umull	r1, r3, r3, r2
 800d0de:	095b      	lsrs	r3, r3, #5
 800d0e0:	2164      	movs	r1, #100	; 0x64
 800d0e2:	fb01 f303 	mul.w	r3, r1, r3
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	011b      	lsls	r3, r3, #4
 800d0ea:	3332      	adds	r3, #50	; 0x32
 800d0ec:	4a95      	ldr	r2, [pc, #596]	; (800d344 <UART_SetConfig+0x6f4>)
 800d0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f2:	095b      	lsrs	r3, r3, #5
 800d0f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d0f8:	4498      	add	r8, r3
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	469b      	mov	fp, r3
 800d0fe:	f04f 0c00 	mov.w	ip, #0
 800d102:	46d9      	mov	r9, fp
 800d104:	46e2      	mov	sl, ip
 800d106:	eb19 0309 	adds.w	r3, r9, r9
 800d10a:	eb4a 040a 	adc.w	r4, sl, sl
 800d10e:	4699      	mov	r9, r3
 800d110:	46a2      	mov	sl, r4
 800d112:	eb19 090b 	adds.w	r9, r9, fp
 800d116:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d11a:	f04f 0100 	mov.w	r1, #0
 800d11e:	f04f 0200 	mov.w	r2, #0
 800d122:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d126:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d12a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d12e:	4689      	mov	r9, r1
 800d130:	4692      	mov	sl, r2
 800d132:	eb1b 0509 	adds.w	r5, fp, r9
 800d136:	eb4c 060a 	adc.w	r6, ip, sl
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	4619      	mov	r1, r3
 800d140:	f04f 0200 	mov.w	r2, #0
 800d144:	f04f 0300 	mov.w	r3, #0
 800d148:	f04f 0400 	mov.w	r4, #0
 800d14c:	0094      	lsls	r4, r2, #2
 800d14e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d152:	008b      	lsls	r3, r1, #2
 800d154:	461a      	mov	r2, r3
 800d156:	4623      	mov	r3, r4
 800d158:	4628      	mov	r0, r5
 800d15a:	4631      	mov	r1, r6
 800d15c:	f7f3 fdac 	bl	8000cb8 <__aeabi_uldivmod>
 800d160:	4603      	mov	r3, r0
 800d162:	460c      	mov	r4, r1
 800d164:	461a      	mov	r2, r3
 800d166:	4b77      	ldr	r3, [pc, #476]	; (800d344 <UART_SetConfig+0x6f4>)
 800d168:	fba3 1302 	umull	r1, r3, r3, r2
 800d16c:	095b      	lsrs	r3, r3, #5
 800d16e:	2164      	movs	r1, #100	; 0x64
 800d170:	fb01 f303 	mul.w	r3, r1, r3
 800d174:	1ad3      	subs	r3, r2, r3
 800d176:	011b      	lsls	r3, r3, #4
 800d178:	3332      	adds	r3, #50	; 0x32
 800d17a:	4a72      	ldr	r2, [pc, #456]	; (800d344 <UART_SetConfig+0x6f4>)
 800d17c:	fba2 2303 	umull	r2, r3, r2, r3
 800d180:	095b      	lsrs	r3, r3, #5
 800d182:	f003 020f 	and.w	r2, r3, #15
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4442      	add	r2, r8
 800d18c:	609a      	str	r2, [r3, #8]
 800d18e:	e0d0      	b.n	800d332 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d190:	f7fc f95c 	bl	800944c <HAL_RCC_GetPCLK1Freq>
 800d194:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	469a      	mov	sl, r3
 800d19a:	f04f 0b00 	mov.w	fp, #0
 800d19e:	46d0      	mov	r8, sl
 800d1a0:	46d9      	mov	r9, fp
 800d1a2:	eb18 0308 	adds.w	r3, r8, r8
 800d1a6:	eb49 0409 	adc.w	r4, r9, r9
 800d1aa:	4698      	mov	r8, r3
 800d1ac:	46a1      	mov	r9, r4
 800d1ae:	eb18 080a 	adds.w	r8, r8, sl
 800d1b2:	eb49 090b 	adc.w	r9, r9, fp
 800d1b6:	f04f 0100 	mov.w	r1, #0
 800d1ba:	f04f 0200 	mov.w	r2, #0
 800d1be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800d1c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800d1c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800d1ca:	4688      	mov	r8, r1
 800d1cc:	4691      	mov	r9, r2
 800d1ce:	eb1a 0508 	adds.w	r5, sl, r8
 800d1d2:	eb4b 0609 	adc.w	r6, fp, r9
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	f04f 0400 	mov.w	r4, #0
 800d1e8:	0094      	lsls	r4, r2, #2
 800d1ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d1ee:	008b      	lsls	r3, r1, #2
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	4631      	mov	r1, r6
 800d1f8:	f7f3 fd5e 	bl	8000cb8 <__aeabi_uldivmod>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	460c      	mov	r4, r1
 800d200:	461a      	mov	r2, r3
 800d202:	4b50      	ldr	r3, [pc, #320]	; (800d344 <UART_SetConfig+0x6f4>)
 800d204:	fba3 2302 	umull	r2, r3, r3, r2
 800d208:	095b      	lsrs	r3, r3, #5
 800d20a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	469b      	mov	fp, r3
 800d212:	f04f 0c00 	mov.w	ip, #0
 800d216:	46d9      	mov	r9, fp
 800d218:	46e2      	mov	sl, ip
 800d21a:	eb19 0309 	adds.w	r3, r9, r9
 800d21e:	eb4a 040a 	adc.w	r4, sl, sl
 800d222:	4699      	mov	r9, r3
 800d224:	46a2      	mov	sl, r4
 800d226:	eb19 090b 	adds.w	r9, r9, fp
 800d22a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d22e:	f04f 0100 	mov.w	r1, #0
 800d232:	f04f 0200 	mov.w	r2, #0
 800d236:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d23a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d23e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d242:	4689      	mov	r9, r1
 800d244:	4692      	mov	sl, r2
 800d246:	eb1b 0509 	adds.w	r5, fp, r9
 800d24a:	eb4c 060a 	adc.w	r6, ip, sl
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	4619      	mov	r1, r3
 800d254:	f04f 0200 	mov.w	r2, #0
 800d258:	f04f 0300 	mov.w	r3, #0
 800d25c:	f04f 0400 	mov.w	r4, #0
 800d260:	0094      	lsls	r4, r2, #2
 800d262:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d266:	008b      	lsls	r3, r1, #2
 800d268:	461a      	mov	r2, r3
 800d26a:	4623      	mov	r3, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	4631      	mov	r1, r6
 800d270:	f7f3 fd22 	bl	8000cb8 <__aeabi_uldivmod>
 800d274:	4603      	mov	r3, r0
 800d276:	460c      	mov	r4, r1
 800d278:	461a      	mov	r2, r3
 800d27a:	4b32      	ldr	r3, [pc, #200]	; (800d344 <UART_SetConfig+0x6f4>)
 800d27c:	fba3 1302 	umull	r1, r3, r3, r2
 800d280:	095b      	lsrs	r3, r3, #5
 800d282:	2164      	movs	r1, #100	; 0x64
 800d284:	fb01 f303 	mul.w	r3, r1, r3
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	011b      	lsls	r3, r3, #4
 800d28c:	3332      	adds	r3, #50	; 0x32
 800d28e:	4a2d      	ldr	r2, [pc, #180]	; (800d344 <UART_SetConfig+0x6f4>)
 800d290:	fba2 2303 	umull	r2, r3, r2, r3
 800d294:	095b      	lsrs	r3, r3, #5
 800d296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d29a:	4498      	add	r8, r3
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	469b      	mov	fp, r3
 800d2a0:	f04f 0c00 	mov.w	ip, #0
 800d2a4:	46d9      	mov	r9, fp
 800d2a6:	46e2      	mov	sl, ip
 800d2a8:	eb19 0309 	adds.w	r3, r9, r9
 800d2ac:	eb4a 040a 	adc.w	r4, sl, sl
 800d2b0:	4699      	mov	r9, r3
 800d2b2:	46a2      	mov	sl, r4
 800d2b4:	eb19 090b 	adds.w	r9, r9, fp
 800d2b8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800d2bc:	f04f 0100 	mov.w	r1, #0
 800d2c0:	f04f 0200 	mov.w	r2, #0
 800d2c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d2c8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800d2cc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800d2d0:	4689      	mov	r9, r1
 800d2d2:	4692      	mov	sl, r2
 800d2d4:	eb1b 0509 	adds.w	r5, fp, r9
 800d2d8:	eb4c 060a 	adc.w	r6, ip, sl
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	f04f 0200 	mov.w	r2, #0
 800d2e6:	f04f 0300 	mov.w	r3, #0
 800d2ea:	f04f 0400 	mov.w	r4, #0
 800d2ee:	0094      	lsls	r4, r2, #2
 800d2f0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800d2f4:	008b      	lsls	r3, r1, #2
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	f7f3 fcdb 	bl	8000cb8 <__aeabi_uldivmod>
 800d302:	4603      	mov	r3, r0
 800d304:	460c      	mov	r4, r1
 800d306:	461a      	mov	r2, r3
 800d308:	4b0e      	ldr	r3, [pc, #56]	; (800d344 <UART_SetConfig+0x6f4>)
 800d30a:	fba3 1302 	umull	r1, r3, r3, r2
 800d30e:	095b      	lsrs	r3, r3, #5
 800d310:	2164      	movs	r1, #100	; 0x64
 800d312:	fb01 f303 	mul.w	r3, r1, r3
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	011b      	lsls	r3, r3, #4
 800d31a:	3332      	adds	r3, #50	; 0x32
 800d31c:	4a09      	ldr	r2, [pc, #36]	; (800d344 <UART_SetConfig+0x6f4>)
 800d31e:	fba2 2303 	umull	r2, r3, r2, r3
 800d322:	095b      	lsrs	r3, r3, #5
 800d324:	f003 020f 	and.w	r2, r3, #15
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	4442      	add	r2, r8
 800d32e:	609a      	str	r2, [r3, #8]
}
 800d330:	e7ff      	b.n	800d332 <UART_SetConfig+0x6e2>
 800d332:	bf00      	nop
 800d334:	3714      	adds	r7, #20
 800d336:	46bd      	mov	sp, r7
 800d338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33c:	40011000 	.word	0x40011000
 800d340:	40011400 	.word	0x40011400
 800d344:	51eb851f 	.word	0x51eb851f

0800d348 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800d348:	b084      	sub	sp, #16
 800d34a:	b480      	push	{r7}
 800d34c:	b085      	sub	sp, #20
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	f107 001c 	add.w	r0, r7, #28
 800d356:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800d35e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800d360:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800d362:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800d364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800d366:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800d368:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800d36a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800d36e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800d372:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800d374:	68fa      	ldr	r2, [r7, #12]
 800d376:	4313      	orrs	r3, r2
 800d378:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800d382:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	431a      	orrs	r2, r3
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3714      	adds	r7, #20
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	b004      	add	sp, #16
 800d39c:	4770      	bx	lr

0800d39e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b083      	sub	sp, #12
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	370c      	adds	r7, #12
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800d3b8:	b480      	push	{r7}
 800d3ba:	b083      	sub	sp, #12
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d3cc:	2300      	movs	r3, #0
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	370c      	adds	r7, #12
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d8:	4770      	bx	lr

0800d3da <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2203      	movs	r2, #3
 800d3e6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800d3e8:	2002      	movs	r0, #2
 800d3ea:	f7f9 fbc5 	bl	8006b78 <HAL_Delay>
  
  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3708      	adds	r7, #8
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	b083      	sub	sp, #12
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 0303 	and.w	r3, r3, #3
}
 800d408:	4618      	mov	r0, r3
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d432:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d438:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d43e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	4313      	orrs	r3, r2
 800d444:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	68db      	ldr	r3, [r3, #12]
 800d44a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d44e:	f023 030f 	bic.w	r3, r3, #15
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3714      	adds	r7, #20
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	691b      	ldr	r3, [r3, #16]
 800d474:	b2db      	uxtb	r3, r3
}
 800d476:	4618      	mov	r0, r3
 800d478:	370c      	adds	r7, #12
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr

0800d482 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d482:	b480      	push	{r7}
 800d484:	b085      	sub	sp, #20
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
 800d48a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3314      	adds	r3, #20
 800d490:	461a      	mov	r2, r3
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	4413      	add	r3, r2
 800d496:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
}  
 800d49c:	4618      	mov	r0, r3
 800d49e:	3714      	adds	r7, #20
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a6:	4770      	bx	lr

0800d4a8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b085      	sub	sp, #20
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685a      	ldr	r2, [r3, #4]
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4ce:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d4d4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d4da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d4dc:	68fa      	ldr	r2, [r7, #12]
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	431a      	orrs	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0

}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b088      	sub	sp, #32
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
 800d508:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d50e:	2310      	movs	r3, #16
 800d510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d512:	2340      	movs	r3, #64	; 0x40
 800d514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d516:	2300      	movs	r3, #0
 800d518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d51a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d51e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d520:	f107 0308 	add.w	r3, r7, #8
 800d524:	4619      	mov	r1, r3
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f7ff ff74 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d530:	2110      	movs	r1, #16
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fa40 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d53a:	69fb      	ldr	r3, [r7, #28]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3720      	adds	r7, #32
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b088      	sub	sp, #32
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d552:	2311      	movs	r3, #17
 800d554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d556:	2340      	movs	r3, #64	; 0x40
 800d558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d55a:	2300      	movs	r3, #0
 800d55c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d562:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d564:	f107 0308 	add.w	r3, r7, #8
 800d568:	4619      	mov	r1, r3
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7ff ff52 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d570:	f241 3288 	movw	r2, #5000	; 0x1388
 800d574:	2111      	movs	r1, #17
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fa1e 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d57c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d57e:	69fb      	ldr	r3, [r7, #28]
}
 800d580:	4618      	mov	r0, r3
 800d582:	3720      	adds	r7, #32
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}

0800d588 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b088      	sub	sp, #32
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d596:	2312      	movs	r3, #18
 800d598:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d59a:	2340      	movs	r3, #64	; 0x40
 800d59c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5a8:	f107 0308 	add.w	r3, r7, #8
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f7ff ff30 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d5b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5b8:	2112      	movs	r1, #18
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f9fc 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d5c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5c2:	69fb      	ldr	r3, [r7, #28]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b088      	sub	sp, #32
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d5da:	2318      	movs	r3, #24
 800d5dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d5de:	2340      	movs	r3, #64	; 0x40
 800d5e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d5ec:	f107 0308 	add.w	r3, r7, #8
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f7ff ff0e 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d5f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d5fc:	2118      	movs	r1, #24
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 f9da 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d604:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d606:	69fb      	ldr	r3, [r7, #28]
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3720      	adds	r7, #32
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b088      	sub	sp, #32
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d61e:	2319      	movs	r3, #25
 800d620:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d622:	2340      	movs	r3, #64	; 0x40
 800d624:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d626:	2300      	movs	r3, #0
 800d628:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d62a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d62e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d630:	f107 0308 	add.w	r3, r7, #8
 800d634:	4619      	mov	r1, r3
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff feec 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d63c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d640:	2119      	movs	r1, #25
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f9b8 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d64a:	69fb      	ldr	r3, [r7, #28]
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3720      	adds	r7, #32
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}

0800d654 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b088      	sub	sp, #32
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d65c:	2300      	movs	r3, #0
 800d65e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d660:	230c      	movs	r3, #12
 800d662:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d664:	2340      	movs	r3, #64	; 0x40
 800d666:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d668:	2300      	movs	r3, #0
 800d66a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d66c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d670:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d672:	f107 0308 	add.w	r3, r7, #8
 800d676:	4619      	mov	r1, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fecb 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d67e:	4a05      	ldr	r2, [pc, #20]	; (800d694 <SDMMC_CmdStopTransfer+0x40>)
 800d680:	210c      	movs	r1, #12
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f998 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d688:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d68a:	69fb      	ldr	r3, [r7, #28]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3720      	adds	r7, #32
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	05f5e100 	.word	0x05f5e100

0800d698 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b08a      	sub	sp, #40	; 0x28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d6a8:	2307      	movs	r3, #7
 800d6aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d6ac:	2340      	movs	r3, #64	; 0x40
 800d6ae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6b8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6ba:	f107 0310 	add.w	r3, r7, #16
 800d6be:	4619      	mov	r1, r3
 800d6c0:	68f8      	ldr	r0, [r7, #12]
 800d6c2:	f7ff fea7 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d6c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6ca:	2107      	movs	r1, #7
 800d6cc:	68f8      	ldr	r0, [r7, #12]
 800d6ce:	f000 f973 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d6d2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3728      	adds	r7, #40	; 0x28
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b088      	sub	sp, #32
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d6fc:	f107 0308 	add.w	r3, r7, #8
 800d700:	4619      	mov	r1, r3
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff fe86 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f92d 	bl	800d968 <SDMMC_GetCmdError>
 800d70e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d710:	69fb      	ldr	r3, [r7, #28]
}
 800d712:	4618      	mov	r0, r3
 800d714:	3720      	adds	r7, #32
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b088      	sub	sp, #32
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d722:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d726:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d728:	2308      	movs	r3, #8
 800d72a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d72c:	2340      	movs	r3, #64	; 0x40
 800d72e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d730:	2300      	movs	r3, #0
 800d732:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d734:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d738:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d73a:	f107 0308 	add.w	r3, r7, #8
 800d73e:	4619      	mov	r1, r3
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f7ff fe67 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fb16 	bl	800dd78 <SDMMC_GetCmdResp7>
 800d74c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d74e:	69fb      	ldr	r3, [r7, #28]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3720      	adds	r7, #32
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b088      	sub	sp, #32
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d766:	2337      	movs	r3, #55	; 0x37
 800d768:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d76a:	2340      	movs	r3, #64	; 0x40
 800d76c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d76e:	2300      	movs	r3, #0
 800d770:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d776:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d778:	f107 0308 	add.w	r3, r7, #8
 800d77c:	4619      	mov	r1, r3
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f7ff fe48 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d784:	f241 3288 	movw	r2, #5000	; 0x1388
 800d788:	2137      	movs	r1, #55	; 0x37
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f914 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d790:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d792:	69fb      	ldr	r3, [r7, #28]
}
 800d794:	4618      	mov	r0, r3
 800d796:	3720      	adds	r7, #32
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d7b2:	2329      	movs	r3, #41	; 0x29
 800d7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7b6:	2340      	movs	r3, #64	; 0x40
 800d7b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d7c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d7c4:	f107 0308 	add.w	r3, r7, #8
 800d7c8:	4619      	mov	r1, r3
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7ff fe22 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 fa23 	bl	800dc1c <SDMMC_GetCmdResp3>
 800d7d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b088      	sub	sp, #32
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
 800d7ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d7f0:	2306      	movs	r3, #6
 800d7f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d7f4:	2340      	movs	r3, #64	; 0x40
 800d7f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d7fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d800:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d802:	f107 0308 	add.w	r3, r7, #8
 800d806:	4619      	mov	r1, r3
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f7ff fe03 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d80e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d812:	2106      	movs	r1, #6
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f8cf 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d81a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d81c:	69fb      	ldr	r3, [r7, #28]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3720      	adds	r7, #32
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d826:	b580      	push	{r7, lr}
 800d828:	b088      	sub	sp, #32
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d82e:	2300      	movs	r3, #0
 800d830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d832:	2333      	movs	r3, #51	; 0x33
 800d834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d836:	2340      	movs	r3, #64	; 0x40
 800d838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d83a:	2300      	movs	r3, #0
 800d83c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d83e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d844:	f107 0308 	add.w	r3, r7, #8
 800d848:	4619      	mov	r1, r3
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff fde2 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d850:	f241 3288 	movw	r2, #5000	; 0x1388
 800d854:	2133      	movs	r1, #51	; 0x33
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f8ae 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d85c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d85e:	69fb      	ldr	r3, [r7, #28]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3720      	adds	r7, #32
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}

0800d868 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b088      	sub	sp, #32
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d870:	2300      	movs	r3, #0
 800d872:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d874:	2302      	movs	r3, #2
 800d876:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d878:	23c0      	movs	r3, #192	; 0xc0
 800d87a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d87c:	2300      	movs	r3, #0
 800d87e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d884:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d886:	f107 0308 	add.w	r3, r7, #8
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7ff fdc1 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f97c 	bl	800db90 <SDMMC_GetCmdResp2>
 800d898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d89a:	69fb      	ldr	r3, [r7, #28]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3720      	adds	r7, #32
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b088      	sub	sp, #32
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d8b2:	2309      	movs	r3, #9
 800d8b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d8b6:	23c0      	movs	r3, #192	; 0xc0
 800d8b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d8c4:	f107 0308 	add.w	r3, r7, #8
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fda2 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f95d 	bl	800db90 <SDMMC_GetCmdResp2>
 800d8d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d8d8:	69fb      	ldr	r3, [r7, #28]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3720      	adds	r7, #32
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}

0800d8e2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d8e2:	b580      	push	{r7, lr}
 800d8e4:	b088      	sub	sp, #32
 800d8e6:	af00      	add	r7, sp, #0
 800d8e8:	6078      	str	r0, [r7, #4]
 800d8ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d8f4:	2340      	movs	r3, #64	; 0x40
 800d8f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d8fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d902:	f107 0308 	add.w	r3, r7, #8
 800d906:	4619      	mov	r1, r3
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff fd83 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	2103      	movs	r1, #3
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f000 f9bc 	bl	800dc90 <SDMMC_GetCmdResp6>
 800d918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d91a:	69fb      	ldr	r3, [r7, #28]
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3720      	adds	r7, #32
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b088      	sub	sp, #32
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d932:	230d      	movs	r3, #13
 800d934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d936:	2340      	movs	r3, #64	; 0x40
 800d938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d93a:	2300      	movs	r3, #0
 800d93c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d93e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d942:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d944:	f107 0308 	add.w	r3, r7, #8
 800d948:	4619      	mov	r1, r3
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f7ff fd62 	bl	800d414 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d950:	f241 3288 	movw	r2, #5000	; 0x1388
 800d954:	210d      	movs	r1, #13
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f82e 	bl	800d9b8 <SDMMC_GetCmdResp1>
 800d95c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d95e:	69fb      	ldr	r3, [r7, #28]
}
 800d960:	4618      	mov	r0, r3
 800d962:	3720      	adds	r7, #32
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d968:	b490      	push	{r4, r7}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d970:	4b0f      	ldr	r3, [pc, #60]	; (800d9b0 <SDMMC_GetCmdError+0x48>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a0f      	ldr	r2, [pc, #60]	; (800d9b4 <SDMMC_GetCmdError+0x4c>)
 800d976:	fba2 2303 	umull	r2, r3, r2, r3
 800d97a:	0a5b      	lsrs	r3, r3, #9
 800d97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d980:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d984:	4623      	mov	r3, r4
 800d986:	1e5c      	subs	r4, r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d98c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d990:	e009      	b.n	800d9a6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f2      	beq.n	800d984 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	22c5      	movs	r2, #197	; 0xc5
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3708      	adds	r7, #8
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	bc90      	pop	{r4, r7}
 800d9ae:	4770      	bx	lr
 800d9b0:	20000000 	.word	0x20000000
 800d9b4:	10624dd3 	.word	0x10624dd3

0800d9b8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d9b8:	b590      	push	{r4, r7, lr}
 800d9ba:	b087      	sub	sp, #28
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	60f8      	str	r0, [r7, #12]
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	607a      	str	r2, [r7, #4]
 800d9c4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d9c6:	4b6f      	ldr	r3, [pc, #444]	; (800db84 <SDMMC_GetCmdResp1+0x1cc>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	4a6f      	ldr	r2, [pc, #444]	; (800db88 <SDMMC_GetCmdResp1+0x1d0>)
 800d9cc:	fba2 2303 	umull	r2, r3, r2, r3
 800d9d0:	0a5b      	lsrs	r3, r3, #9
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d9d8:	4623      	mov	r3, r4
 800d9da:	1e5c      	subs	r4, r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d102      	bne.n	800d9e6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d9e4:	e0c9      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ea:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d0f0      	beq.n	800d9d8 <SDMMC_GetCmdResp1+0x20>
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d1eb      	bne.n	800d9d8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d004      	beq.n	800da16 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2204      	movs	r2, #4
 800da10:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da12:	2304      	movs	r3, #4
 800da14:	e0b1      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da1a:	f003 0301 	and.w	r3, r3, #1
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d004      	beq.n	800da2c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	2201      	movs	r2, #1
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da28:	2301      	movs	r3, #1
 800da2a:	e0a6      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	22c5      	movs	r2, #197	; 0xc5
 800da30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f7ff fd18 	bl	800d468 <SDIO_GetCommandResponse>
 800da38:	4603      	mov	r3, r0
 800da3a:	461a      	mov	r2, r3
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	4293      	cmp	r3, r2
 800da40:	d001      	beq.n	800da46 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da42:	2301      	movs	r3, #1
 800da44:	e099      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800da46:	2100      	movs	r1, #0
 800da48:	68f8      	ldr	r0, [r7, #12]
 800da4a:	f7ff fd1a 	bl	800d482 <SDIO_GetResponse>
 800da4e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800da50:	693a      	ldr	r2, [r7, #16]
 800da52:	4b4e      	ldr	r3, [pc, #312]	; (800db8c <SDMMC_GetCmdResp1+0x1d4>)
 800da54:	4013      	ands	r3, r2
 800da56:	2b00      	cmp	r3, #0
 800da58:	d101      	bne.n	800da5e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800da5a:	2300      	movs	r3, #0
 800da5c:	e08d      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	2b00      	cmp	r3, #0
 800da62:	da02      	bge.n	800da6a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800da64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800da68:	e087      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d001      	beq.n	800da78 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	e080      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800da82:	2380      	movs	r3, #128	; 0x80
 800da84:	e079      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d002      	beq.n	800da96 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800da90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800da94:	e071      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800da96:	693b      	ldr	r3, [r7, #16]
 800da98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d002      	beq.n	800daa6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800daa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daa4:	e069      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800daac:	2b00      	cmp	r3, #0
 800daae:	d002      	beq.n	800dab6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800dab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dab4:	e061      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800dab6:	693b      	ldr	r3, [r7, #16]
 800dab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800dac0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dac4:	e059      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800dac6:	693b      	ldr	r3, [r7, #16]
 800dac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d002      	beq.n	800dad6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dad4:	e051      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dae4:	e049      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800daf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800daf4:	e041      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d002      	beq.n	800db06 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800db00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db04:	e039      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800db06:	693b      	ldr	r3, [r7, #16]
 800db08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d002      	beq.n	800db16 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800db10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800db14:	e031      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800db20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800db24:	e029      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800db30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800db34:	e021      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d002      	beq.n	800db46 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800db40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800db44:	e019      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d002      	beq.n	800db56 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800db50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800db54:	e011      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d002      	beq.n	800db66 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800db60:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800db64:	e009      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800db66:	693b      	ldr	r3, [r7, #16]
 800db68:	f003 0308 	and.w	r3, r3, #8
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d002      	beq.n	800db76 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800db70:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800db74:	e001      	b.n	800db7a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800db76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd90      	pop	{r4, r7, pc}
 800db82:	bf00      	nop
 800db84:	20000000 	.word	0x20000000
 800db88:	10624dd3 	.word	0x10624dd3
 800db8c:	fdffe008 	.word	0xfdffe008

0800db90 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800db90:	b490      	push	{r4, r7}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800db98:	4b1e      	ldr	r3, [pc, #120]	; (800dc14 <SDMMC_GetCmdResp2+0x84>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	4a1e      	ldr	r2, [pc, #120]	; (800dc18 <SDMMC_GetCmdResp2+0x88>)
 800db9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dba2:	0a5b      	lsrs	r3, r3, #9
 800dba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dba8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dbac:	4623      	mov	r3, r4
 800dbae:	1e5c      	subs	r4, r3, #1
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d102      	bne.n	800dbba <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dbb8:	e026      	b.n	800dc08 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d0f0      	beq.n	800dbac <SDMMC_GetCmdResp2+0x1c>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1eb      	bne.n	800dbac <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbd8:	f003 0304 	and.w	r3, r3, #4
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d004      	beq.n	800dbea <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2204      	movs	r2, #4
 800dbe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dbe6:	2304      	movs	r3, #4
 800dbe8:	e00e      	b.n	800dc08 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d004      	beq.n	800dc00 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e003      	b.n	800dc08 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	22c5      	movs	r2, #197	; 0xc5
 800dc04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bc90      	pop	{r4, r7}
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	20000000 	.word	0x20000000
 800dc18:	10624dd3 	.word	0x10624dd3

0800dc1c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800dc1c:	b490      	push	{r4, r7}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc24:	4b18      	ldr	r3, [pc, #96]	; (800dc88 <SDMMC_GetCmdResp3+0x6c>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a18      	ldr	r2, [pc, #96]	; (800dc8c <SDMMC_GetCmdResp3+0x70>)
 800dc2a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc2e:	0a5b      	lsrs	r3, r3, #9
 800dc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc34:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dc38:	4623      	mov	r3, r4
 800dc3a:	1e5c      	subs	r4, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d102      	bne.n	800dc46 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dc44:	e01b      	b.n	800dc7e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc4a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d0f0      	beq.n	800dc38 <SDMMC_GetCmdResp3+0x1c>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d1eb      	bne.n	800dc38 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc64:	f003 0304 	and.w	r3, r3, #4
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d004      	beq.n	800dc76 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2204      	movs	r2, #4
 800dc70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc72:	2304      	movs	r3, #4
 800dc74:	e003      	b.n	800dc7e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	22c5      	movs	r2, #197	; 0xc5
 800dc7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bc90      	pop	{r4, r7}
 800dc86:	4770      	bx	lr
 800dc88:	20000000 	.word	0x20000000
 800dc8c:	10624dd3 	.word	0x10624dd3

0800dc90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dc90:	b590      	push	{r4, r7, lr}
 800dc92:	b087      	sub	sp, #28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	460b      	mov	r3, r1
 800dc9a:	607a      	str	r2, [r7, #4]
 800dc9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dc9e:	4b34      	ldr	r3, [pc, #208]	; (800dd70 <SDMMC_GetCmdResp6+0xe0>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4a34      	ldr	r2, [pc, #208]	; (800dd74 <SDMMC_GetCmdResp6+0xe4>)
 800dca4:	fba2 2303 	umull	r2, r3, r2, r3
 800dca8:	0a5b      	lsrs	r3, r3, #9
 800dcaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcae:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dcb2:	4623      	mov	r3, r4
 800dcb4:	1e5c      	subs	r4, r3, #1
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d102      	bne.n	800dcc0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dcba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dcbe:	e052      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d0f0      	beq.n	800dcb2 <SDMMC_GetCmdResp6+0x22>
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d1eb      	bne.n	800dcb2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcde:	f003 0304 	and.w	r3, r3, #4
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d004      	beq.n	800dcf0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2204      	movs	r2, #4
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dcec:	2304      	movs	r3, #4
 800dcee:	e03a      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf4:	f003 0301 	and.w	r3, r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d004      	beq.n	800dd06 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd02:	2301      	movs	r3, #1
 800dd04:	e02f      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fbae 	bl	800d468 <SDIO_GetCommandResponse>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	461a      	mov	r2, r3
 800dd10:	7afb      	ldrb	r3, [r7, #11]
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d001      	beq.n	800dd1a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dd16:	2301      	movs	r3, #1
 800dd18:	e025      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	22c5      	movs	r2, #197	; 0xc5
 800dd1e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800dd20:	2100      	movs	r1, #0
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f7ff fbad 	bl	800d482 <SDIO_GetResponse>
 800dd28:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d106      	bne.n	800dd42 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	0c1b      	lsrs	r3, r3, #16
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800dd3e:	2300      	movs	r3, #0
 800dd40:	e011      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d002      	beq.n	800dd52 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dd4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd50:	e009      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d002      	beq.n	800dd62 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dd5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dd60:	e001      	b.n	800dd66 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dd62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	371c      	adds	r7, #28
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd90      	pop	{r4, r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	20000000 	.word	0x20000000
 800dd74:	10624dd3 	.word	0x10624dd3

0800dd78 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800dd78:	b490      	push	{r4, r7}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800dd80:	4b21      	ldr	r3, [pc, #132]	; (800de08 <SDMMC_GetCmdResp7+0x90>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a21      	ldr	r2, [pc, #132]	; (800de0c <SDMMC_GetCmdResp7+0x94>)
 800dd86:	fba2 2303 	umull	r2, r3, r2, r3
 800dd8a:	0a5b      	lsrs	r3, r3, #9
 800dd8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800dd90:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800dd94:	4623      	mov	r3, r4
 800dd96:	1e5c      	subs	r4, r3, #1
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d102      	bne.n	800dda2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dd9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dda0:	e02c      	b.n	800ddfc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d0f0      	beq.n	800dd94 <SDMMC_GetCmdResp7+0x1c>
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d1eb      	bne.n	800dd94 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d004      	beq.n	800ddd2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2204      	movs	r2, #4
 800ddcc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ddce:	2304      	movs	r3, #4
 800ddd0:	e014      	b.n	800ddfc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e009      	b.n	800ddfc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2240      	movs	r2, #64	; 0x40
 800ddf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ddfa:	2300      	movs	r3, #0
  
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3710      	adds	r7, #16
 800de00:	46bd      	mov	sp, r7
 800de02:	bc90      	pop	{r4, r7}
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20000000 	.word	0x20000000
 800de0c:	10624dd3 	.word	0x10624dd3

0800de10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800de14:	4904      	ldr	r1, [pc, #16]	; (800de28 <MX_FATFS_Init+0x18>)
 800de16:	4805      	ldr	r0, [pc, #20]	; (800de2c <MX_FATFS_Init+0x1c>)
 800de18:	f003 fb9c 	bl	8011554 <FATFS_LinkDriver>
 800de1c:	4603      	mov	r3, r0
 800de1e:	461a      	mov	r2, r3
 800de20:	4b03      	ldr	r3, [pc, #12]	; (800de30 <MX_FATFS_Init+0x20>)
 800de22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800de24:	bf00      	nop
 800de26:	bd80      	pop	{r7, pc}
 800de28:	2002da40 	.word	0x2002da40
 800de2c:	08017904 	.word	0x08017904
 800de30:	2002da3c 	.word	0x2002da3c

0800de34 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800de3e:	f000 f896 	bl	800df6e <BSP_SD_IsDetected>
 800de42:	4603      	mov	r3, r0
 800de44:	2b01      	cmp	r3, #1
 800de46:	d001      	beq.n	800de4c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800de48:	2301      	movs	r3, #1
 800de4a:	e012      	b.n	800de72 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800de4c:	480b      	ldr	r0, [pc, #44]	; (800de7c <BSP_SD_Init+0x48>)
 800de4e:	f7fb ffa5 	bl	8009d9c <HAL_SD_Init>
 800de52:	4603      	mov	r3, r0
 800de54:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800de56:	79fb      	ldrb	r3, [r7, #7]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d109      	bne.n	800de70 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800de5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800de60:	4806      	ldr	r0, [pc, #24]	; (800de7c <BSP_SD_Init+0x48>)
 800de62:	f7fc fd4f 	bl	800a904 <HAL_SD_ConfigWideBusOperation>
 800de66:	4603      	mov	r3, r0
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d001      	beq.n	800de70 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800de6c:	2301      	movs	r3, #1
 800de6e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800de70:	79fb      	ldrb	r3, [r7, #7]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
 800de7a:	bf00      	nop
 800de7c:	2002d83c 	.word	0x2002d83c

0800de80 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b086      	sub	sp, #24
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800de8c:	2300      	movs	r3, #0
 800de8e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	68f9      	ldr	r1, [r7, #12]
 800de96:	4806      	ldr	r0, [pc, #24]	; (800deb0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800de98:	f7fc f810 	bl	8009ebc <HAL_SD_ReadBlocks_DMA>
 800de9c:	4603      	mov	r3, r0
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	2002d83c 	.word	0x2002d83c

0800deb4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b086      	sub	sp, #24
 800deb8:	af00      	add	r7, sp, #0
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dec0:	2300      	movs	r3, #0
 800dec2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	68f9      	ldr	r1, [r7, #12]
 800deca:	4806      	ldr	r0, [pc, #24]	; (800dee4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800decc:	f7fc f8de 	bl	800a08c <HAL_SD_WriteBlocks_DMA>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800deda:	7dfb      	ldrb	r3, [r7, #23]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}
 800dee4:	2002d83c 	.word	0x2002d83c

0800dee8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800deec:	4805      	ldr	r0, [pc, #20]	; (800df04 <BSP_SD_GetCardState+0x1c>)
 800deee:	f7fc fd85 	bl	800a9fc <HAL_SD_GetCardState>
 800def2:	4603      	mov	r3, r0
 800def4:	2b04      	cmp	r3, #4
 800def6:	bf14      	ite	ne
 800def8:	2301      	movne	r3, #1
 800defa:	2300      	moveq	r3, #0
 800defc:	b2db      	uxtb	r3, r3
}
 800defe:	4618      	mov	r0, r3
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	2002d83c 	.word	0x2002d83c

0800df08 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800df10:	6879      	ldr	r1, [r7, #4]
 800df12:	4803      	ldr	r0, [pc, #12]	; (800df20 <BSP_SD_GetCardInfo+0x18>)
 800df14:	f7fc fcca 	bl	800a8ac <HAL_SD_GetCardInfo>
}
 800df18:	bf00      	nop
 800df1a:	3708      	adds	r7, #8
 800df1c:	46bd      	mov	sp, r7
 800df1e:	bd80      	pop	{r7, pc}
 800df20:	2002d83c 	.word	0x2002d83c

0800df24 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b082      	sub	sp, #8
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800df2c:	f000 f818 	bl	800df60 <BSP_SD_AbortCallback>
}
 800df30:	bf00      	nop
 800df32:	3708      	adds	r7, #8
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800df40:	f000 f9a8 	bl	800e294 <BSP_SD_WriteCpltCallback>
}
 800df44:	bf00      	nop
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}

0800df4c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b082      	sub	sp, #8
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800df54:	f000 f9aa 	bl	800e2ac <BSP_SD_ReadCpltCallback>
}
 800df58:	bf00      	nop
 800df5a:	3708      	adds	r7, #8
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800df60:	b480      	push	{r7}
 800df62:	af00      	add	r7, sp, #0

}
 800df64:	bf00      	nop
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800df6e:	b580      	push	{r7, lr}
 800df70:	b082      	sub	sp, #8
 800df72:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800df74:	2301      	movs	r3, #1
 800df76:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800df78:	f000 f80c 	bl	800df94 <BSP_PlatformIsDetected>
 800df7c:	4603      	mov	r3, r0
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800df82:	2300      	movs	r3, #0
 800df84:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800df86:	79fb      	ldrb	r3, [r7, #7]
 800df88:	b2db      	uxtb	r3, r3
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3708      	adds	r7, #8
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
	...

0800df94 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800df9a:	2301      	movs	r3, #1
 800df9c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800df9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dfa2:	4806      	ldr	r0, [pc, #24]	; (800dfbc <BSP_PlatformIsDetected+0x28>)
 800dfa4:	f7fa f866 	bl	8008074 <HAL_GPIO_ReadPin>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d001      	beq.n	800dfb2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dfb2:	79fb      	ldrb	r3, [r7, #7]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3708      	adds	r7, #8
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	40020000 	.word	0x40020000

0800dfc0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800dfc8:	f7f8 fdca 	bl	8006b60 <HAL_GetTick>
 800dfcc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800dfce:	e006      	b.n	800dfde <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dfd0:	f7ff ff8a 	bl	800dee8 <BSP_SD_GetCardState>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dfda:	2300      	movs	r3, #0
 800dfdc:	e009      	b.n	800dff2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800dfde:	f7f8 fdbf 	bl	8006b60 <HAL_GetTick>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	687a      	ldr	r2, [r7, #4]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d8f0      	bhi.n	800dfd0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
	...

0800dffc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b082      	sub	sp, #8
 800e000:	af00      	add	r7, sp, #0
 800e002:	4603      	mov	r3, r0
 800e004:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e006:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <SD_CheckStatus+0x38>)
 800e008:	2201      	movs	r2, #1
 800e00a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e00c:	f7ff ff6c 	bl	800dee8 <BSP_SD_GetCardState>
 800e010:	4603      	mov	r3, r0
 800e012:	2b00      	cmp	r3, #0
 800e014:	d107      	bne.n	800e026 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e016:	4b07      	ldr	r3, [pc, #28]	; (800e034 <SD_CheckStatus+0x38>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	f023 0301 	bic.w	r3, r3, #1
 800e020:	b2da      	uxtb	r2, r3
 800e022:	4b04      	ldr	r3, [pc, #16]	; (800e034 <SD_CheckStatus+0x38>)
 800e024:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e026:	4b03      	ldr	r3, [pc, #12]	; (800e034 <SD_CheckStatus+0x38>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	b2db      	uxtb	r3, r3
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	20000009 	.word	0x20000009

0800e038 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	4603      	mov	r3, r0
 800e040:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e042:	f7ff fef7 	bl	800de34 <BSP_SD_Init>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d107      	bne.n	800e05c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff ffd4 	bl	800dffc <SD_CheckStatus>
 800e054:	4603      	mov	r3, r0
 800e056:	461a      	mov	r2, r3
 800e058:	4b04      	ldr	r3, [pc, #16]	; (800e06c <SD_initialize+0x34>)
 800e05a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e05c:	4b03      	ldr	r3, [pc, #12]	; (800e06c <SD_initialize+0x34>)
 800e05e:	781b      	ldrb	r3, [r3, #0]
 800e060:	b2db      	uxtb	r3, r3
}
 800e062:	4618      	mov	r0, r3
 800e064:	3708      	adds	r7, #8
 800e066:	46bd      	mov	sp, r7
 800e068:	bd80      	pop	{r7, pc}
 800e06a:	bf00      	nop
 800e06c:	20000009 	.word	0x20000009

0800e070 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	4603      	mov	r3, r0
 800e078:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e07a:	79fb      	ldrb	r3, [r7, #7]
 800e07c:	4618      	mov	r0, r3
 800e07e:	f7ff ffbd 	bl	800dffc <SD_CheckStatus>
 800e082:	4603      	mov	r3, r0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3708      	adds	r7, #8
 800e088:	46bd      	mov	sp, r7
 800e08a:	bd80      	pop	{r7, pc}

0800e08c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60b9      	str	r1, [r7, #8]
 800e094:	607a      	str	r2, [r7, #4]
 800e096:	603b      	str	r3, [r7, #0]
 800e098:	4603      	mov	r3, r0
 800e09a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e09c:	2301      	movs	r3, #1
 800e09e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e0a0:	f247 5030 	movw	r0, #30000	; 0x7530
 800e0a4:	f7ff ff8c 	bl	800dfc0 <SD_CheckStatusWithTimeout>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	da01      	bge.n	800e0b2 <SD_read+0x26>
  {
    return res;
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
 800e0b0:	e03b      	b.n	800e12a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	68b8      	ldr	r0, [r7, #8]
 800e0b8:	f7ff fee2 	bl	800de80 <BSP_SD_ReadBlocks_DMA>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d132      	bne.n	800e128 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e0c2:	4b1c      	ldr	r3, [pc, #112]	; (800e134 <SD_read+0xa8>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e0c8:	f7f8 fd4a 	bl	8006b60 <HAL_GetTick>
 800e0cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e0ce:	bf00      	nop
 800e0d0:	4b18      	ldr	r3, [pc, #96]	; (800e134 <SD_read+0xa8>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d108      	bne.n	800e0ea <SD_read+0x5e>
 800e0d8:	f7f8 fd42 	bl	8006b60 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800e0e6:	4293      	cmp	r3, r2
 800e0e8:	d9f2      	bls.n	800e0d0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800e0ea:	4b12      	ldr	r3, [pc, #72]	; (800e134 <SD_read+0xa8>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	75fb      	strb	r3, [r7, #23]
 800e0f6:	e017      	b.n	800e128 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e0f8:	4b0e      	ldr	r3, [pc, #56]	; (800e134 <SD_read+0xa8>)
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e0fe:	f7f8 fd2f 	bl	8006b60 <HAL_GetTick>
 800e102:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e104:	e007      	b.n	800e116 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e106:	f7ff feef 	bl	800dee8 <BSP_SD_GetCardState>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d102      	bne.n	800e116 <SD_read+0x8a>
          {
            res = RES_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e114:	e008      	b.n	800e128 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e116:	f7f8 fd23 	bl	8006b60 <HAL_GetTick>
 800e11a:	4602      	mov	r2, r0
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	f247 522f 	movw	r2, #29999	; 0x752f
 800e124:	4293      	cmp	r3, r2
 800e126:	d9ee      	bls.n	800e106 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e128:	7dfb      	ldrb	r3, [r7, #23]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3718      	adds	r7, #24
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	2002b0d8 	.word	0x2002b0d8

0800e138 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b086      	sub	sp, #24
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60b9      	str	r1, [r7, #8]
 800e140:	607a      	str	r2, [r7, #4]
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	4603      	mov	r3, r0
 800e146:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e148:	2301      	movs	r3, #1
 800e14a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e14c:	4b24      	ldr	r3, [pc, #144]	; (800e1e0 <SD_write+0xa8>)
 800e14e:	2200      	movs	r2, #0
 800e150:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e152:	f247 5030 	movw	r0, #30000	; 0x7530
 800e156:	f7ff ff33 	bl	800dfc0 <SD_CheckStatusWithTimeout>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	da01      	bge.n	800e164 <SD_write+0x2c>
  {
    return res;
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	e038      	b.n	800e1d6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e164:	683a      	ldr	r2, [r7, #0]
 800e166:	6879      	ldr	r1, [r7, #4]
 800e168:	68b8      	ldr	r0, [r7, #8]
 800e16a:	f7ff fea3 	bl	800deb4 <BSP_SD_WriteBlocks_DMA>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d12f      	bne.n	800e1d4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e174:	f7f8 fcf4 	bl	8006b60 <HAL_GetTick>
 800e178:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e17a:	bf00      	nop
 800e17c:	4b18      	ldr	r3, [pc, #96]	; (800e1e0 <SD_write+0xa8>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d108      	bne.n	800e196 <SD_write+0x5e>
 800e184:	f7f8 fcec 	bl	8006b60 <HAL_GetTick>
 800e188:	4602      	mov	r2, r0
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e192:	4293      	cmp	r3, r2
 800e194:	d9f2      	bls.n	800e17c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800e196:	4b12      	ldr	r3, [pc, #72]	; (800e1e0 <SD_write+0xa8>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d102      	bne.n	800e1a4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	75fb      	strb	r3, [r7, #23]
 800e1a2:	e017      	b.n	800e1d4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e1a4:	4b0e      	ldr	r3, [pc, #56]	; (800e1e0 <SD_write+0xa8>)
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e1aa:	f7f8 fcd9 	bl	8006b60 <HAL_GetTick>
 800e1ae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e1b0:	e007      	b.n	800e1c2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e1b2:	f7ff fe99 	bl	800dee8 <BSP_SD_GetCardState>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d102      	bne.n	800e1c2 <SD_write+0x8a>
          {
            res = RES_OK;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	75fb      	strb	r3, [r7, #23]
            break;
 800e1c0:	e008      	b.n	800e1d4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e1c2:	f7f8 fccd 	bl	8006b60 <HAL_GetTick>
 800e1c6:	4602      	mov	r2, r0
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	1ad3      	subs	r3, r2, r3
 800e1cc:	f247 522f 	movw	r2, #29999	; 0x752f
 800e1d0:	4293      	cmp	r3, r2
 800e1d2:	d9ee      	bls.n	800e1b2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	2002b0d4 	.word	0x2002b0d4

0800e1e4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08c      	sub	sp, #48	; 0x30
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	603a      	str	r2, [r7, #0]
 800e1ee:	71fb      	strb	r3, [r7, #7]
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e1fa:	4b25      	ldr	r3, [pc, #148]	; (800e290 <SD_ioctl+0xac>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_ioctl+0x28>
 800e208:	2303      	movs	r3, #3
 800e20a:	e03c      	b.n	800e286 <SD_ioctl+0xa2>

  switch (cmd)
 800e20c:	79bb      	ldrb	r3, [r7, #6]
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d834      	bhi.n	800e27c <SD_ioctl+0x98>
 800e212:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <SD_ioctl+0x34>)
 800e214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e218:	0800e229 	.word	0x0800e229
 800e21c:	0800e231 	.word	0x0800e231
 800e220:	0800e249 	.word	0x0800e249
 800e224:	0800e263 	.word	0x0800e263
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e22e:	e028      	b.n	800e282 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e230:	f107 030c 	add.w	r3, r7, #12
 800e234:	4618      	mov	r0, r3
 800e236:	f7ff fe67 	bl	800df08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e23a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e246:	e01c      	b.n	800e282 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e248:	f107 030c 	add.w	r3, r7, #12
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fe5b 	bl	800df08 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e254:	b29a      	uxth	r2, r3
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e25a:	2300      	movs	r3, #0
 800e25c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e260:	e00f      	b.n	800e282 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e262:	f107 030c 	add.w	r3, r7, #12
 800e266:	4618      	mov	r0, r3
 800e268:	f7ff fe4e 	bl	800df08 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26e:	0a5a      	lsrs	r2, r3, #9
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e274:	2300      	movs	r3, #0
 800e276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e27a:	e002      	b.n	800e282 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e27c:	2304      	movs	r3, #4
 800e27e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e286:	4618      	mov	r0, r3
 800e288:	3730      	adds	r7, #48	; 0x30
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	20000009 	.word	0x20000009

0800e294 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e294:	b480      	push	{r7}
 800e296:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e298:	4b03      	ldr	r3, [pc, #12]	; (800e2a8 <BSP_SD_WriteCpltCallback+0x14>)
 800e29a:	2201      	movs	r2, #1
 800e29c:	601a      	str	r2, [r3, #0]
}
 800e29e:	bf00      	nop
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a6:	4770      	bx	lr
 800e2a8:	2002b0d4 	.word	0x2002b0d4

0800e2ac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e2b0:	4b03      	ldr	r3, [pc, #12]	; (800e2c0 <BSP_SD_ReadCpltCallback+0x14>)
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	601a      	str	r2, [r3, #0]
}
 800e2b6:	bf00      	nop
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2be:	4770      	bx	lr
 800e2c0:	2002b0d8 	.word	0x2002b0d8

0800e2c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	4a08      	ldr	r2, [pc, #32]	; (800e2f4 <disk_status+0x30>)
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	685b      	ldr	r3, [r3, #4]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	79fa      	ldrb	r2, [r7, #7]
 800e2dc:	4905      	ldr	r1, [pc, #20]	; (800e2f4 <disk_status+0x30>)
 800e2de:	440a      	add	r2, r1
 800e2e0:	7a12      	ldrb	r2, [r2, #8]
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	4798      	blx	r3
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	2002b104 	.word	0x2002b104

0800e2f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	4a0d      	ldr	r2, [pc, #52]	; (800e340 <disk_initialize+0x48>)
 800e30a:	5cd3      	ldrb	r3, [r2, r3]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d111      	bne.n	800e334 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	4a0b      	ldr	r2, [pc, #44]	; (800e340 <disk_initialize+0x48>)
 800e314:	2101      	movs	r1, #1
 800e316:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e318:	79fb      	ldrb	r3, [r7, #7]
 800e31a:	4a09      	ldr	r2, [pc, #36]	; (800e340 <disk_initialize+0x48>)
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	685b      	ldr	r3, [r3, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	79fa      	ldrb	r2, [r7, #7]
 800e326:	4906      	ldr	r1, [pc, #24]	; (800e340 <disk_initialize+0x48>)
 800e328:	440a      	add	r2, r1
 800e32a:	7a12      	ldrb	r2, [r2, #8]
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
 800e330:	4603      	mov	r3, r0
 800e332:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e334:	7bfb      	ldrb	r3, [r7, #15]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	2002b104 	.word	0x2002b104

0800e344 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e344:	b590      	push	{r4, r7, lr}
 800e346:	b087      	sub	sp, #28
 800e348:	af00      	add	r7, sp, #0
 800e34a:	60b9      	str	r1, [r7, #8]
 800e34c:	607a      	str	r2, [r7, #4]
 800e34e:	603b      	str	r3, [r7, #0]
 800e350:	4603      	mov	r3, r0
 800e352:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e354:	7bfb      	ldrb	r3, [r7, #15]
 800e356:	4a0a      	ldr	r2, [pc, #40]	; (800e380 <disk_read+0x3c>)
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	689c      	ldr	r4, [r3, #8]
 800e360:	7bfb      	ldrb	r3, [r7, #15]
 800e362:	4a07      	ldr	r2, [pc, #28]	; (800e380 <disk_read+0x3c>)
 800e364:	4413      	add	r3, r2
 800e366:	7a18      	ldrb	r0, [r3, #8]
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	68b9      	ldr	r1, [r7, #8]
 800e36e:	47a0      	blx	r4
 800e370:	4603      	mov	r3, r0
 800e372:	75fb      	strb	r3, [r7, #23]
  return res;
 800e374:	7dfb      	ldrb	r3, [r7, #23]
}
 800e376:	4618      	mov	r0, r3
 800e378:	371c      	adds	r7, #28
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd90      	pop	{r4, r7, pc}
 800e37e:	bf00      	nop
 800e380:	2002b104 	.word	0x2002b104

0800e384 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e384:	b590      	push	{r4, r7, lr}
 800e386:	b087      	sub	sp, #28
 800e388:	af00      	add	r7, sp, #0
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
 800e38e:	603b      	str	r3, [r7, #0]
 800e390:	4603      	mov	r3, r0
 800e392:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e394:	7bfb      	ldrb	r3, [r7, #15]
 800e396:	4a0a      	ldr	r2, [pc, #40]	; (800e3c0 <disk_write+0x3c>)
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	68dc      	ldr	r4, [r3, #12]
 800e3a0:	7bfb      	ldrb	r3, [r7, #15]
 800e3a2:	4a07      	ldr	r2, [pc, #28]	; (800e3c0 <disk_write+0x3c>)
 800e3a4:	4413      	add	r3, r2
 800e3a6:	7a18      	ldrb	r0, [r3, #8]
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	68b9      	ldr	r1, [r7, #8]
 800e3ae:	47a0      	blx	r4
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	75fb      	strb	r3, [r7, #23]
  return res;
 800e3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	371c      	adds	r7, #28
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd90      	pop	{r4, r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	2002b104 	.word	0x2002b104

0800e3c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b084      	sub	sp, #16
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	603a      	str	r2, [r7, #0]
 800e3ce:	71fb      	strb	r3, [r7, #7]
 800e3d0:	460b      	mov	r3, r1
 800e3d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e3d4:	79fb      	ldrb	r3, [r7, #7]
 800e3d6:	4a09      	ldr	r2, [pc, #36]	; (800e3fc <disk_ioctl+0x38>)
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4413      	add	r3, r2
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	79fa      	ldrb	r2, [r7, #7]
 800e3e2:	4906      	ldr	r1, [pc, #24]	; (800e3fc <disk_ioctl+0x38>)
 800e3e4:	440a      	add	r2, r1
 800e3e6:	7a10      	ldrb	r0, [r2, #8]
 800e3e8:	79b9      	ldrb	r1, [r7, #6]
 800e3ea:	683a      	ldr	r2, [r7, #0]
 800e3ec:	4798      	blx	r3
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	73fb      	strb	r3, [r7, #15]
  return res;
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	2002b104 	.word	0x2002b104

0800e400 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	3301      	adds	r3, #1
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e410:	89fb      	ldrh	r3, [r7, #14]
 800e412:	021b      	lsls	r3, r3, #8
 800e414:	b21a      	sxth	r2, r3
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	b21b      	sxth	r3, r3
 800e41c:	4313      	orrs	r3, r2
 800e41e:	b21b      	sxth	r3, r3
 800e420:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e422:	89fb      	ldrh	r3, [r7, #14]
}
 800e424:	4618      	mov	r0, r3
 800e426:	3714      	adds	r7, #20
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e430:	b480      	push	{r7}
 800e432:	b085      	sub	sp, #20
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	3303      	adds	r3, #3
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	021b      	lsls	r3, r3, #8
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	3202      	adds	r2, #2
 800e448:	7812      	ldrb	r2, [r2, #0]
 800e44a:	4313      	orrs	r3, r2
 800e44c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	021b      	lsls	r3, r3, #8
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	3201      	adds	r2, #1
 800e456:	7812      	ldrb	r2, [r2, #0]
 800e458:	4313      	orrs	r3, r2
 800e45a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	021b      	lsls	r3, r3, #8
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	7812      	ldrb	r2, [r2, #0]
 800e464:	4313      	orrs	r3, r2
 800e466:	60fb      	str	r3, [r7, #12]
	return rv;
 800e468:	68fb      	ldr	r3, [r7, #12]
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr

0800e476 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e476:	b480      	push	{r7}
 800e478:	b083      	sub	sp, #12
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	460b      	mov	r3, r1
 800e480:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	1c5a      	adds	r2, r3, #1
 800e486:	607a      	str	r2, [r7, #4]
 800e488:	887a      	ldrh	r2, [r7, #2]
 800e48a:	b2d2      	uxtb	r2, r2
 800e48c:	701a      	strb	r2, [r3, #0]
 800e48e:	887b      	ldrh	r3, [r7, #2]
 800e490:	0a1b      	lsrs	r3, r3, #8
 800e492:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	887a      	ldrh	r2, [r7, #2]
 800e49c:	b2d2      	uxtb	r2, r2
 800e49e:	701a      	strb	r2, [r3, #0]
}
 800e4a0:	bf00      	nop
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b083      	sub	sp, #12
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	1c5a      	adds	r2, r3, #1
 800e4ba:	607a      	str	r2, [r7, #4]
 800e4bc:	683a      	ldr	r2, [r7, #0]
 800e4be:	b2d2      	uxtb	r2, r2
 800e4c0:	701a      	strb	r2, [r3, #0]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	0a1b      	lsrs	r3, r3, #8
 800e4c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	1c5a      	adds	r2, r3, #1
 800e4cc:	607a      	str	r2, [r7, #4]
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	b2d2      	uxtb	r2, r2
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	0a1b      	lsrs	r3, r3, #8
 800e4d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	683a      	ldr	r2, [r7, #0]
 800e4e2:	b2d2      	uxtb	r2, r2
 800e4e4:	701a      	strb	r2, [r3, #0]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	0a1b      	lsrs	r3, r3, #8
 800e4ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	b2d2      	uxtb	r2, r2
 800e4f6:	701a      	strb	r2, [r3, #0]
}
 800e4f8:	bf00      	nop
 800e4fa:	370c      	adds	r7, #12
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e504:	b480      	push	{r7}
 800e506:	b087      	sub	sp, #28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00d      	beq.n	800e53a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e51e:	693a      	ldr	r2, [r7, #16]
 800e520:	1c53      	adds	r3, r2, #1
 800e522:	613b      	str	r3, [r7, #16]
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	1c59      	adds	r1, r3, #1
 800e528:	6179      	str	r1, [r7, #20]
 800e52a:	7812      	ldrb	r2, [r2, #0]
 800e52c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3b01      	subs	r3, #1
 800e532:	607b      	str	r3, [r7, #4]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d1f1      	bne.n	800e51e <mem_cpy+0x1a>
	}
}
 800e53a:	bf00      	nop
 800e53c:	371c      	adds	r7, #28
 800e53e:	46bd      	mov	sp, r7
 800e540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e544:	4770      	bx	lr

0800e546 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e546:	b480      	push	{r7}
 800e548:	b087      	sub	sp, #28
 800e54a:	af00      	add	r7, sp, #0
 800e54c:	60f8      	str	r0, [r7, #12]
 800e54e:	60b9      	str	r1, [r7, #8]
 800e550:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	617a      	str	r2, [r7, #20]
 800e55c:	68ba      	ldr	r2, [r7, #8]
 800e55e:	b2d2      	uxtb	r2, r2
 800e560:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	3b01      	subs	r3, #1
 800e566:	607b      	str	r3, [r7, #4]
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1f3      	bne.n	800e556 <mem_set+0x10>
}
 800e56e:	bf00      	nop
 800e570:	371c      	adds	r7, #28
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e57a:	b480      	push	{r7}
 800e57c:	b089      	sub	sp, #36	; 0x24
 800e57e:	af00      	add	r7, sp, #0
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	61fb      	str	r3, [r7, #28]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e58e:	2300      	movs	r3, #0
 800e590:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	1c5a      	adds	r2, r3, #1
 800e596:	61fa      	str	r2, [r7, #28]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	4619      	mov	r1, r3
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	61ba      	str	r2, [r7, #24]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	1acb      	subs	r3, r1, r3
 800e5a6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	3b01      	subs	r3, #1
 800e5ac:	607b      	str	r3, [r7, #4]
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <mem_cmp+0x40>
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d0eb      	beq.n	800e592 <mem_cmp+0x18>

	return r;
 800e5ba:	697b      	ldr	r3, [r7, #20]
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3724      	adds	r7, #36	; 0x24
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e5d2:	e002      	b.n	800e5da <chk_chr+0x12>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	607b      	str	r3, [r7, #4]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d005      	beq.n	800e5ee <chk_chr+0x26>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	781b      	ldrb	r3, [r3, #0]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d1f2      	bne.n	800e5d4 <chk_chr+0xc>
	return *str;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	781b      	ldrb	r3, [r3, #0]
}
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	370c      	adds	r7, #12
 800e5f6:	46bd      	mov	sp, r7
 800e5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fc:	4770      	bx	lr
	...

0800e600 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e600:	b480      	push	{r7}
 800e602:	b085      	sub	sp, #20
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e60a:	2300      	movs	r3, #0
 800e60c:	60bb      	str	r3, [r7, #8]
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	60fb      	str	r3, [r7, #12]
 800e612:	e029      	b.n	800e668 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e614:	4a27      	ldr	r2, [pc, #156]	; (800e6b4 <chk_lock+0xb4>)
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	011b      	lsls	r3, r3, #4
 800e61a:	4413      	add	r3, r2
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d01d      	beq.n	800e65e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e622:	4a24      	ldr	r2, [pc, #144]	; (800e6b4 <chk_lock+0xb4>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	011b      	lsls	r3, r3, #4
 800e628:	4413      	add	r3, r2
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	429a      	cmp	r2, r3
 800e632:	d116      	bne.n	800e662 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e634:	4a1f      	ldr	r2, [pc, #124]	; (800e6b4 <chk_lock+0xb4>)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	011b      	lsls	r3, r3, #4
 800e63a:	4413      	add	r3, r2
 800e63c:	3304      	adds	r3, #4
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e644:	429a      	cmp	r2, r3
 800e646:	d10c      	bne.n	800e662 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e648:	4a1a      	ldr	r2, [pc, #104]	; (800e6b4 <chk_lock+0xb4>)
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	011b      	lsls	r3, r3, #4
 800e64e:	4413      	add	r3, r2
 800e650:	3308      	adds	r3, #8
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e658:	429a      	cmp	r2, r3
 800e65a:	d102      	bne.n	800e662 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e65c:	e007      	b.n	800e66e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e65e:	2301      	movs	r3, #1
 800e660:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	3301      	adds	r3, #1
 800e666:	60fb      	str	r3, [r7, #12]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	2b01      	cmp	r3, #1
 800e66c:	d9d2      	bls.n	800e614 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	2b02      	cmp	r3, #2
 800e672:	d109      	bne.n	800e688 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d102      	bne.n	800e680 <chk_lock+0x80>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d101      	bne.n	800e684 <chk_lock+0x84>
 800e680:	2300      	movs	r3, #0
 800e682:	e010      	b.n	800e6a6 <chk_lock+0xa6>
 800e684:	2312      	movs	r3, #18
 800e686:	e00e      	b.n	800e6a6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d108      	bne.n	800e6a0 <chk_lock+0xa0>
 800e68e:	4a09      	ldr	r2, [pc, #36]	; (800e6b4 <chk_lock+0xb4>)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	011b      	lsls	r3, r3, #4
 800e694:	4413      	add	r3, r2
 800e696:	330c      	adds	r3, #12
 800e698:	881b      	ldrh	r3, [r3, #0]
 800e69a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e69e:	d101      	bne.n	800e6a4 <chk_lock+0xa4>
 800e6a0:	2310      	movs	r3, #16
 800e6a2:	e000      	b.n	800e6a6 <chk_lock+0xa6>
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3714      	adds	r7, #20
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr
 800e6b2:	bf00      	nop
 800e6b4:	2002b0e4 	.word	0x2002b0e4

0800e6b8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	607b      	str	r3, [r7, #4]
 800e6c2:	e002      	b.n	800e6ca <enq_lock+0x12>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	607b      	str	r3, [r7, #4]
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d806      	bhi.n	800e6de <enq_lock+0x26>
 800e6d0:	4a09      	ldr	r2, [pc, #36]	; (800e6f8 <enq_lock+0x40>)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	011b      	lsls	r3, r3, #4
 800e6d6:	4413      	add	r3, r2
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1f2      	bne.n	800e6c4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	bf14      	ite	ne
 800e6e4:	2301      	movne	r3, #1
 800e6e6:	2300      	moveq	r3, #0
 800e6e8:	b2db      	uxtb	r3, r3
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	370c      	adds	r7, #12
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	2002b0e4 	.word	0x2002b0e4

0800e6fc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b085      	sub	sp, #20
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
 800e704:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e706:	2300      	movs	r3, #0
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	e01f      	b.n	800e74c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e70c:	4a41      	ldr	r2, [pc, #260]	; (800e814 <inc_lock+0x118>)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	011b      	lsls	r3, r3, #4
 800e712:	4413      	add	r3, r2
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d113      	bne.n	800e746 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e71e:	4a3d      	ldr	r2, [pc, #244]	; (800e814 <inc_lock+0x118>)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	011b      	lsls	r3, r3, #4
 800e724:	4413      	add	r3, r2
 800e726:	3304      	adds	r3, #4
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e72e:	429a      	cmp	r2, r3
 800e730:	d109      	bne.n	800e746 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e732:	4a38      	ldr	r2, [pc, #224]	; (800e814 <inc_lock+0x118>)
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	011b      	lsls	r3, r3, #4
 800e738:	4413      	add	r3, r2
 800e73a:	3308      	adds	r3, #8
 800e73c:	681a      	ldr	r2, [r3, #0]
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e742:	429a      	cmp	r2, r3
 800e744:	d006      	beq.n	800e754 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	3301      	adds	r3, #1
 800e74a:	60fb      	str	r3, [r7, #12]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d9dc      	bls.n	800e70c <inc_lock+0x10>
 800e752:	e000      	b.n	800e756 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e754:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d132      	bne.n	800e7c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60fb      	str	r3, [r7, #12]
 800e760:	e002      	b.n	800e768 <inc_lock+0x6c>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	3301      	adds	r3, #1
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	2b01      	cmp	r3, #1
 800e76c:	d806      	bhi.n	800e77c <inc_lock+0x80>
 800e76e:	4a29      	ldr	r2, [pc, #164]	; (800e814 <inc_lock+0x118>)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	011b      	lsls	r3, r3, #4
 800e774:	4413      	add	r3, r2
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1f2      	bne.n	800e762 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d101      	bne.n	800e786 <inc_lock+0x8a>
 800e782:	2300      	movs	r3, #0
 800e784:	e040      	b.n	800e808 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	4922      	ldr	r1, [pc, #136]	; (800e814 <inc_lock+0x118>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	011b      	lsls	r3, r3, #4
 800e790:	440b      	add	r3, r1
 800e792:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	689a      	ldr	r2, [r3, #8]
 800e798:	491e      	ldr	r1, [pc, #120]	; (800e814 <inc_lock+0x118>)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	011b      	lsls	r3, r3, #4
 800e79e:	440b      	add	r3, r1
 800e7a0:	3304      	adds	r3, #4
 800e7a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	695a      	ldr	r2, [r3, #20]
 800e7a8:	491a      	ldr	r1, [pc, #104]	; (800e814 <inc_lock+0x118>)
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	011b      	lsls	r3, r3, #4
 800e7ae:	440b      	add	r3, r1
 800e7b0:	3308      	adds	r3, #8
 800e7b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e7b4:	4a17      	ldr	r2, [pc, #92]	; (800e814 <inc_lock+0x118>)
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	011b      	lsls	r3, r3, #4
 800e7ba:	4413      	add	r3, r2
 800e7bc:	330c      	adds	r3, #12
 800e7be:	2200      	movs	r2, #0
 800e7c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d009      	beq.n	800e7dc <inc_lock+0xe0>
 800e7c8:	4a12      	ldr	r2, [pc, #72]	; (800e814 <inc_lock+0x118>)
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	011b      	lsls	r3, r3, #4
 800e7ce:	4413      	add	r3, r2
 800e7d0:	330c      	adds	r3, #12
 800e7d2:	881b      	ldrh	r3, [r3, #0]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d001      	beq.n	800e7dc <inc_lock+0xe0>
 800e7d8:	2300      	movs	r3, #0
 800e7da:	e015      	b.n	800e808 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d108      	bne.n	800e7f4 <inc_lock+0xf8>
 800e7e2:	4a0c      	ldr	r2, [pc, #48]	; (800e814 <inc_lock+0x118>)
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	011b      	lsls	r3, r3, #4
 800e7e8:	4413      	add	r3, r2
 800e7ea:	330c      	adds	r3, #12
 800e7ec:	881b      	ldrh	r3, [r3, #0]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	e001      	b.n	800e7f8 <inc_lock+0xfc>
 800e7f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7f8:	4906      	ldr	r1, [pc, #24]	; (800e814 <inc_lock+0x118>)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	011b      	lsls	r3, r3, #4
 800e7fe:	440b      	add	r3, r1
 800e800:	330c      	adds	r3, #12
 800e802:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	3301      	adds	r3, #1
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3714      	adds	r7, #20
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	2002b0e4 	.word	0x2002b0e4

0800e818 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3b01      	subs	r3, #1
 800e824:	607b      	str	r3, [r7, #4]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d825      	bhi.n	800e878 <dec_lock+0x60>
		n = Files[i].ctr;
 800e82c:	4a17      	ldr	r2, [pc, #92]	; (800e88c <dec_lock+0x74>)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	011b      	lsls	r3, r3, #4
 800e832:	4413      	add	r3, r2
 800e834:	330c      	adds	r3, #12
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e83a:	89fb      	ldrh	r3, [r7, #14]
 800e83c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e840:	d101      	bne.n	800e846 <dec_lock+0x2e>
 800e842:	2300      	movs	r3, #0
 800e844:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e846:	89fb      	ldrh	r3, [r7, #14]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <dec_lock+0x3a>
 800e84c:	89fb      	ldrh	r3, [r7, #14]
 800e84e:	3b01      	subs	r3, #1
 800e850:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e852:	4a0e      	ldr	r2, [pc, #56]	; (800e88c <dec_lock+0x74>)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	011b      	lsls	r3, r3, #4
 800e858:	4413      	add	r3, r2
 800e85a:	330c      	adds	r3, #12
 800e85c:	89fa      	ldrh	r2, [r7, #14]
 800e85e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e860:	89fb      	ldrh	r3, [r7, #14]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <dec_lock+0x5a>
 800e866:	4a09      	ldr	r2, [pc, #36]	; (800e88c <dec_lock+0x74>)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	011b      	lsls	r3, r3, #4
 800e86c:	4413      	add	r3, r2
 800e86e:	2200      	movs	r2, #0
 800e870:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e872:	2300      	movs	r3, #0
 800e874:	737b      	strb	r3, [r7, #13]
 800e876:	e001      	b.n	800e87c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e878:	2302      	movs	r3, #2
 800e87a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e87c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	2002b0e4 	.word	0x2002b0e4

0800e890 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e898:	2300      	movs	r3, #0
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	e010      	b.n	800e8c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e89e:	4a0d      	ldr	r2, [pc, #52]	; (800e8d4 <clear_lock+0x44>)
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	011b      	lsls	r3, r3, #4
 800e8a4:	4413      	add	r3, r2
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d105      	bne.n	800e8ba <clear_lock+0x2a>
 800e8ae:	4a09      	ldr	r2, [pc, #36]	; (800e8d4 <clear_lock+0x44>)
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	011b      	lsls	r3, r3, #4
 800e8b4:	4413      	add	r3, r2
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	60fb      	str	r3, [r7, #12]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d9eb      	bls.n	800e89e <clear_lock+0xe>
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	3714      	adds	r7, #20
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	2002b0e4 	.word	0x2002b0e4

0800e8d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b086      	sub	sp, #24
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	78db      	ldrb	r3, [r3, #3]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d034      	beq.n	800e956 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	7858      	ldrb	r0, [r3, #1]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8fc:	2301      	movs	r3, #1
 800e8fe:	697a      	ldr	r2, [r7, #20]
 800e900:	f7ff fd40 	bl	800e384 <disk_write>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	d002      	beq.n	800e910 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	73fb      	strb	r3, [r7, #15]
 800e90e:	e022      	b.n	800e956 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e91a:	697a      	ldr	r2, [r7, #20]
 800e91c:	1ad2      	subs	r2, r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a1b      	ldr	r3, [r3, #32]
 800e922:	429a      	cmp	r2, r3
 800e924:	d217      	bcs.n	800e956 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	789b      	ldrb	r3, [r3, #2]
 800e92a:	613b      	str	r3, [r7, #16]
 800e92c:	e010      	b.n	800e950 <sync_window+0x78>
					wsect += fs->fsize;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	4413      	add	r3, r2
 800e936:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	7858      	ldrb	r0, [r3, #1]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e942:	2301      	movs	r3, #1
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	f7ff fd1d 	bl	800e384 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	613b      	str	r3, [r7, #16]
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	2b01      	cmp	r3, #1
 800e954:	d8eb      	bhi.n	800e92e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e956:	7bfb      	ldrb	r3, [r7, #15]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3718      	adds	r7, #24
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b084      	sub	sp, #16
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e96a:	2300      	movs	r3, #0
 800e96c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e972:	683a      	ldr	r2, [r7, #0]
 800e974:	429a      	cmp	r2, r3
 800e976:	d01b      	beq.n	800e9b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff ffad 	bl	800e8d8 <sync_window>
 800e97e:	4603      	mov	r3, r0
 800e980:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e982:	7bfb      	ldrb	r3, [r7, #15]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d113      	bne.n	800e9b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	7858      	ldrb	r0, [r3, #1]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e992:	2301      	movs	r3, #1
 800e994:	683a      	ldr	r2, [r7, #0]
 800e996:	f7ff fcd5 	bl	800e344 <disk_read>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d004      	beq.n	800e9aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e9a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	683a      	ldr	r2, [r7, #0]
 800e9ae:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e9b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
	...

0800e9bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff ff87 	bl	800e8d8 <sync_window>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e9ce:	7bfb      	ldrb	r3, [r7, #15]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d159      	bne.n	800ea88 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	2b03      	cmp	r3, #3
 800e9da:	d149      	bne.n	800ea70 <sync_fs+0xb4>
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	791b      	ldrb	r3, [r3, #4]
 800e9e0:	2b01      	cmp	r3, #1
 800e9e2:	d145      	bne.n	800ea70 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	899b      	ldrh	r3, [r3, #12]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	2100      	movs	r1, #0
 800e9f2:	f7ff fda8 	bl	800e546 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	3338      	adds	r3, #56	; 0x38
 800e9fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e9fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7ff fd37 	bl	800e476 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	3338      	adds	r3, #56	; 0x38
 800ea0c:	4921      	ldr	r1, [pc, #132]	; (800ea94 <sync_fs+0xd8>)
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7ff fd4c 	bl	800e4ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3338      	adds	r3, #56	; 0x38
 800ea18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ea1c:	491e      	ldr	r1, [pc, #120]	; (800ea98 <sync_fs+0xdc>)
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fd44 	bl	800e4ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	3338      	adds	r3, #56	; 0x38
 800ea28:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	4619      	mov	r1, r3
 800ea32:	4610      	mov	r0, r2
 800ea34:	f7ff fd3a 	bl	800e4ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	3338      	adds	r3, #56	; 0x38
 800ea3c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	691b      	ldr	r3, [r3, #16]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4610      	mov	r0, r2
 800ea48:	f7ff fd30 	bl	800e4ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea50:	1c5a      	adds	r2, r3, #1
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7858      	ldrb	r0, [r3, #1]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea64:	2301      	movs	r3, #1
 800ea66:	f7ff fc8d 	bl	800e384 <disk_write>
			fs->fsi_flag = 0;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	785b      	ldrb	r3, [r3, #1]
 800ea74:	2200      	movs	r2, #0
 800ea76:	2100      	movs	r1, #0
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fca3 	bl	800e3c4 <disk_ioctl>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <sync_fs+0xcc>
 800ea84:	2301      	movs	r3, #1
 800ea86:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ea88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3710      	adds	r7, #16
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	41615252 	.word	0x41615252
 800ea98:	61417272 	.word	0x61417272

0800ea9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	3b02      	subs	r3, #2
 800eaaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	69db      	ldr	r3, [r3, #28]
 800eab0:	3b02      	subs	r3, #2
 800eab2:	683a      	ldr	r2, [r7, #0]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d301      	bcc.n	800eabc <clust2sect+0x20>
 800eab8:	2300      	movs	r3, #0
 800eaba:	e008      	b.n	800eace <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	895b      	ldrh	r3, [r3, #10]
 800eac0:	461a      	mov	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	fb03 f202 	mul.w	r2, r3, r2
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eacc:	4413      	add	r3, r2
}
 800eace:	4618      	mov	r0, r3
 800ead0:	370c      	adds	r7, #12
 800ead2:	46bd      	mov	sp, r7
 800ead4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead8:	4770      	bx	lr

0800eada <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eada:	b580      	push	{r7, lr}
 800eadc:	b086      	sub	sp, #24
 800eade:	af00      	add	r7, sp, #0
 800eae0:	6078      	str	r0, [r7, #4]
 800eae2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b01      	cmp	r3, #1
 800eaee:	d904      	bls.n	800eafa <get_fat+0x20>
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	69db      	ldr	r3, [r3, #28]
 800eaf4:	683a      	ldr	r2, [r7, #0]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d302      	bcc.n	800eb00 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eafa:	2301      	movs	r3, #1
 800eafc:	617b      	str	r3, [r7, #20]
 800eafe:	e0b7      	b.n	800ec70 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eb00:	f04f 33ff 	mov.w	r3, #4294967295
 800eb04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eb06:	693b      	ldr	r3, [r7, #16]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d05a      	beq.n	800ebc4 <get_fat+0xea>
 800eb0e:	2b03      	cmp	r3, #3
 800eb10:	d07d      	beq.n	800ec0e <get_fat+0x134>
 800eb12:	2b01      	cmp	r3, #1
 800eb14:	f040 80a2 	bne.w	800ec5c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	085b      	lsrs	r3, r3, #1
 800eb20:	68fa      	ldr	r2, [r7, #12]
 800eb22:	4413      	add	r3, r2
 800eb24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb2a:	693b      	ldr	r3, [r7, #16]
 800eb2c:	899b      	ldrh	r3, [r3, #12]
 800eb2e:	4619      	mov	r1, r3
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb36:	4413      	add	r3, r2
 800eb38:	4619      	mov	r1, r3
 800eb3a:	6938      	ldr	r0, [r7, #16]
 800eb3c:	f7ff ff10 	bl	800e960 <move_window>
 800eb40:	4603      	mov	r3, r0
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	f040 808d 	bne.w	800ec62 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	1c5a      	adds	r2, r3, #1
 800eb4c:	60fa      	str	r2, [r7, #12]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	8992      	ldrh	r2, [r2, #12]
 800eb52:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb56:	fb02 f201 	mul.w	r2, r2, r1
 800eb5a:	1a9b      	subs	r3, r3, r2
 800eb5c:	693a      	ldr	r2, [r7, #16]
 800eb5e:	4413      	add	r3, r2
 800eb60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eb64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	899b      	ldrh	r3, [r3, #12]
 800eb6e:	4619      	mov	r1, r3
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb76:	4413      	add	r3, r2
 800eb78:	4619      	mov	r1, r3
 800eb7a:	6938      	ldr	r0, [r7, #16]
 800eb7c:	f7ff fef0 	bl	800e960 <move_window>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d16f      	bne.n	800ec66 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	899b      	ldrh	r3, [r3, #12]
 800eb8a:	461a      	mov	r2, r3
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb92:	fb02 f201 	mul.w	r2, r2, r1
 800eb96:	1a9b      	subs	r3, r3, r2
 800eb98:	693a      	ldr	r2, [r7, #16]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800eba0:	021b      	lsls	r3, r3, #8
 800eba2:	461a      	mov	r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	4313      	orrs	r3, r2
 800eba8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	f003 0301 	and.w	r3, r3, #1
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d002      	beq.n	800ebba <get_fat+0xe0>
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	091b      	lsrs	r3, r3, #4
 800ebb8:	e002      	b.n	800ebc0 <get_fat+0xe6>
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebc0:	617b      	str	r3, [r7, #20]
			break;
 800ebc2:	e055      	b.n	800ec70 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	899b      	ldrh	r3, [r3, #12]
 800ebcc:	085b      	lsrs	r3, r3, #1
 800ebce:	b29b      	uxth	r3, r3
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ebd8:	4413      	add	r3, r2
 800ebda:	4619      	mov	r1, r3
 800ebdc:	6938      	ldr	r0, [r7, #16]
 800ebde:	f7ff febf 	bl	800e960 <move_window>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d140      	bne.n	800ec6a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	005b      	lsls	r3, r3, #1
 800ebf2:	693a      	ldr	r2, [r7, #16]
 800ebf4:	8992      	ldrh	r2, [r2, #12]
 800ebf6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ebfa:	fb02 f200 	mul.w	r2, r2, r0
 800ebfe:	1a9b      	subs	r3, r3, r2
 800ec00:	440b      	add	r3, r1
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7ff fbfc 	bl	800e400 <ld_word>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	617b      	str	r3, [r7, #20]
			break;
 800ec0c:	e030      	b.n	800ec70 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	899b      	ldrh	r3, [r3, #12]
 800ec16:	089b      	lsrs	r3, r3, #2
 800ec18:	b29b      	uxth	r3, r3
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec22:	4413      	add	r3, r2
 800ec24:	4619      	mov	r1, r3
 800ec26:	6938      	ldr	r0, [r7, #16]
 800ec28:	f7ff fe9a 	bl	800e960 <move_window>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d11d      	bne.n	800ec6e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec38:	683b      	ldr	r3, [r7, #0]
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	693a      	ldr	r2, [r7, #16]
 800ec3e:	8992      	ldrh	r2, [r2, #12]
 800ec40:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec44:	fb02 f200 	mul.w	r2, r2, r0
 800ec48:	1a9b      	subs	r3, r3, r2
 800ec4a:	440b      	add	r3, r1
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7ff fbef 	bl	800e430 <ld_dword>
 800ec52:	4603      	mov	r3, r0
 800ec54:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ec58:	617b      	str	r3, [r7, #20]
			break;
 800ec5a:	e009      	b.n	800ec70 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	617b      	str	r3, [r7, #20]
 800ec60:	e006      	b.n	800ec70 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec62:	bf00      	nop
 800ec64:	e004      	b.n	800ec70 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ec66:	bf00      	nop
 800ec68:	e002      	b.n	800ec70 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ec6a:	bf00      	nop
 800ec6c:	e000      	b.n	800ec70 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ec6e:	bf00      	nop
		}
	}

	return val;
 800ec70:	697b      	ldr	r3, [r7, #20]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3718      	adds	r7, #24
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}

0800ec7a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ec7a:	b590      	push	{r4, r7, lr}
 800ec7c:	b089      	sub	sp, #36	; 0x24
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	60f8      	str	r0, [r7, #12]
 800ec82:	60b9      	str	r1, [r7, #8]
 800ec84:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ec86:	2302      	movs	r3, #2
 800ec88:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	f240 8106 	bls.w	800ee9e <put_fat+0x224>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	69db      	ldr	r3, [r3, #28]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	429a      	cmp	r2, r3
 800ec9a:	f080 8100 	bcs.w	800ee9e <put_fat+0x224>
		switch (fs->fs_type) {
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	2b02      	cmp	r3, #2
 800eca4:	f000 8088 	beq.w	800edb8 <put_fat+0x13e>
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	f000 80b0 	beq.w	800ee0e <put_fat+0x194>
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	f040 80f5 	bne.w	800ee9e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	61bb      	str	r3, [r7, #24]
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	085b      	lsrs	r3, r3, #1
 800ecbc:	69ba      	ldr	r2, [r7, #24]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	899b      	ldrh	r3, [r3, #12]
 800ecca:	4619      	mov	r1, r3
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	fbb3 f3f1 	udiv	r3, r3, r1
 800ecd2:	4413      	add	r3, r2
 800ecd4:	4619      	mov	r1, r3
 800ecd6:	68f8      	ldr	r0, [r7, #12]
 800ecd8:	f7ff fe42 	bl	800e960 <move_window>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ece0:	7ffb      	ldrb	r3, [r7, #31]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	f040 80d4 	bne.w	800ee90 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ecee:	69bb      	ldr	r3, [r7, #24]
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	61ba      	str	r2, [r7, #24]
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	8992      	ldrh	r2, [r2, #12]
 800ecf8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecfc:	fb02 f200 	mul.w	r2, r2, r0
 800ed00:	1a9b      	subs	r3, r3, r2
 800ed02:	440b      	add	r3, r1
 800ed04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	f003 0301 	and.w	r3, r3, #1
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00d      	beq.n	800ed2c <put_fat+0xb2>
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	b25b      	sxtb	r3, r3
 800ed16:	f003 030f 	and.w	r3, r3, #15
 800ed1a:	b25a      	sxtb	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	011b      	lsls	r3, r3, #4
 800ed22:	b25b      	sxtb	r3, r3
 800ed24:	4313      	orrs	r3, r2
 800ed26:	b25b      	sxtb	r3, r3
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	e001      	b.n	800ed30 <put_fat+0xb6>
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	b2db      	uxtb	r3, r3
 800ed30:	697a      	ldr	r2, [r7, #20]
 800ed32:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	2201      	movs	r2, #1
 800ed38:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	899b      	ldrh	r3, [r3, #12]
 800ed42:	4619      	mov	r1, r3
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed4a:	4413      	add	r3, r2
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7ff fe06 	bl	800e960 <move_window>
 800ed54:	4603      	mov	r3, r0
 800ed56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ed58:	7ffb      	ldrb	r3, [r7, #31]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	f040 809a 	bne.w	800ee94 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	899b      	ldrh	r3, [r3, #12]
 800ed6a:	461a      	mov	r2, r3
 800ed6c:	69bb      	ldr	r3, [r7, #24]
 800ed6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed72:	fb02 f200 	mul.w	r2, r2, r0
 800ed76:	1a9b      	subs	r3, r3, r2
 800ed78:	440b      	add	r3, r1
 800ed7a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	f003 0301 	and.w	r3, r3, #1
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d003      	beq.n	800ed8e <put_fat+0x114>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	091b      	lsrs	r3, r3, #4
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	e00e      	b.n	800edac <put_fat+0x132>
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	b25b      	sxtb	r3, r3
 800ed94:	f023 030f 	bic.w	r3, r3, #15
 800ed98:	b25a      	sxtb	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	0a1b      	lsrs	r3, r3, #8
 800ed9e:	b25b      	sxtb	r3, r3
 800eda0:	f003 030f 	and.w	r3, r3, #15
 800eda4:	b25b      	sxtb	r3, r3
 800eda6:	4313      	orrs	r3, r2
 800eda8:	b25b      	sxtb	r3, r3
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	697a      	ldr	r2, [r7, #20]
 800edae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2201      	movs	r2, #1
 800edb4:	70da      	strb	r2, [r3, #3]
			break;
 800edb6:	e072      	b.n	800ee9e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	899b      	ldrh	r3, [r3, #12]
 800edc0:	085b      	lsrs	r3, r3, #1
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	4619      	mov	r1, r3
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	fbb3 f3f1 	udiv	r3, r3, r1
 800edcc:	4413      	add	r3, r2
 800edce:	4619      	mov	r1, r3
 800edd0:	68f8      	ldr	r0, [r7, #12]
 800edd2:	f7ff fdc5 	bl	800e960 <move_window>
 800edd6:	4603      	mov	r3, r0
 800edd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800edda:	7ffb      	ldrb	r3, [r7, #31]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d15b      	bne.n	800ee98 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	005b      	lsls	r3, r3, #1
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	8992      	ldrh	r2, [r2, #12]
 800edee:	fbb3 f0f2 	udiv	r0, r3, r2
 800edf2:	fb02 f200 	mul.w	r2, r2, r0
 800edf6:	1a9b      	subs	r3, r3, r2
 800edf8:	440b      	add	r3, r1
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	b292      	uxth	r2, r2
 800edfe:	4611      	mov	r1, r2
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7ff fb38 	bl	800e476 <st_word>
			fs->wflag = 1;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	70da      	strb	r2, [r3, #3]
			break;
 800ee0c:	e047      	b.n	800ee9e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	899b      	ldrh	r3, [r3, #12]
 800ee16:	089b      	lsrs	r3, r3, #2
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ee22:	4413      	add	r3, r2
 800ee24:	4619      	mov	r1, r3
 800ee26:	68f8      	ldr	r0, [r7, #12]
 800ee28:	f7ff fd9a 	bl	800e960 <move_window>
 800ee2c:	4603      	mov	r3, r0
 800ee2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ee30:	7ffb      	ldrb	r3, [r7, #31]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d132      	bne.n	800ee9c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee42:	68bb      	ldr	r3, [r7, #8]
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	68fa      	ldr	r2, [r7, #12]
 800ee48:	8992      	ldrh	r2, [r2, #12]
 800ee4a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee4e:	fb02 f200 	mul.w	r2, r2, r0
 800ee52:	1a9b      	subs	r3, r3, r2
 800ee54:	440b      	add	r3, r1
 800ee56:	4618      	mov	r0, r3
 800ee58:	f7ff faea 	bl	800e430 <ld_dword>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ee62:	4323      	orrs	r3, r4
 800ee64:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee6c:	68bb      	ldr	r3, [r7, #8]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	8992      	ldrh	r2, [r2, #12]
 800ee74:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee78:	fb02 f200 	mul.w	r2, r2, r0
 800ee7c:	1a9b      	subs	r3, r3, r2
 800ee7e:	440b      	add	r3, r1
 800ee80:	6879      	ldr	r1, [r7, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff fb12 	bl	800e4ac <st_dword>
			fs->wflag = 1;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	70da      	strb	r2, [r3, #3]
			break;
 800ee8e:	e006      	b.n	800ee9e <put_fat+0x224>
			if (res != FR_OK) break;
 800ee90:	bf00      	nop
 800ee92:	e004      	b.n	800ee9e <put_fat+0x224>
			if (res != FR_OK) break;
 800ee94:	bf00      	nop
 800ee96:	e002      	b.n	800ee9e <put_fat+0x224>
			if (res != FR_OK) break;
 800ee98:	bf00      	nop
 800ee9a:	e000      	b.n	800ee9e <put_fat+0x224>
			if (res != FR_OK) break;
 800ee9c:	bf00      	nop
		}
	}
	return res;
 800ee9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3724      	adds	r7, #36	; 0x24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd90      	pop	{r4, r7, pc}

0800eea8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	2b01      	cmp	r3, #1
 800eec2:	d904      	bls.n	800eece <remove_chain+0x26>
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	69db      	ldr	r3, [r3, #28]
 800eec8:	68ba      	ldr	r2, [r7, #8]
 800eeca:	429a      	cmp	r2, r3
 800eecc:	d301      	bcc.n	800eed2 <remove_chain+0x2a>
 800eece:	2302      	movs	r3, #2
 800eed0:	e04b      	b.n	800ef6a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00c      	beq.n	800eef2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800eed8:	f04f 32ff 	mov.w	r2, #4294967295
 800eedc:	6879      	ldr	r1, [r7, #4]
 800eede:	69b8      	ldr	r0, [r7, #24]
 800eee0:	f7ff fecb 	bl	800ec7a <put_fat>
 800eee4:	4603      	mov	r3, r0
 800eee6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800eee8:	7ffb      	ldrb	r3, [r7, #31]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <remove_chain+0x4a>
 800eeee:	7ffb      	ldrb	r3, [r7, #31]
 800eef0:	e03b      	b.n	800ef6a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eef2:	68b9      	ldr	r1, [r7, #8]
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7ff fdf0 	bl	800eada <get_fat>
 800eefa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d031      	beq.n	800ef66 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ef02:	697b      	ldr	r3, [r7, #20]
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d101      	bne.n	800ef0c <remove_chain+0x64>
 800ef08:	2302      	movs	r3, #2
 800ef0a:	e02e      	b.n	800ef6a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef12:	d101      	bne.n	800ef18 <remove_chain+0x70>
 800ef14:	2301      	movs	r3, #1
 800ef16:	e028      	b.n	800ef6a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ef18:	2200      	movs	r2, #0
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	69b8      	ldr	r0, [r7, #24]
 800ef1e:	f7ff feac 	bl	800ec7a <put_fat>
 800ef22:	4603      	mov	r3, r0
 800ef24:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ef26:	7ffb      	ldrb	r3, [r7, #31]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d001      	beq.n	800ef30 <remove_chain+0x88>
 800ef2c:	7ffb      	ldrb	r3, [r7, #31]
 800ef2e:	e01c      	b.n	800ef6a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	695a      	ldr	r2, [r3, #20]
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	69db      	ldr	r3, [r3, #28]
 800ef38:	3b02      	subs	r3, #2
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d20b      	bcs.n	800ef56 <remove_chain+0xae>
			fs->free_clst++;
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	695b      	ldr	r3, [r3, #20]
 800ef42:	1c5a      	adds	r2, r3, #1
 800ef44:	69bb      	ldr	r3, [r7, #24]
 800ef46:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	791b      	ldrb	r3, [r3, #4]
 800ef4c:	f043 0301 	orr.w	r3, r3, #1
 800ef50:	b2da      	uxtb	r2, r3
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ef5a:	69bb      	ldr	r3, [r7, #24]
 800ef5c:	69db      	ldr	r3, [r3, #28]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d3c6      	bcc.n	800eef2 <remove_chain+0x4a>
 800ef64:	e000      	b.n	800ef68 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ef66:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3720      	adds	r7, #32
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b088      	sub	sp, #32
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
 800ef7a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d10d      	bne.n	800efa4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d004      	beq.n	800ef9e <create_chain+0x2c>
 800ef94:	693b      	ldr	r3, [r7, #16]
 800ef96:	69db      	ldr	r3, [r3, #28]
 800ef98:	69ba      	ldr	r2, [r7, #24]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d31b      	bcc.n	800efd6 <create_chain+0x64>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	e018      	b.n	800efd6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800efa4:	6839      	ldr	r1, [r7, #0]
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff fd97 	bl	800eada <get_fat>
 800efac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2b01      	cmp	r3, #1
 800efb2:	d801      	bhi.n	800efb8 <create_chain+0x46>
 800efb4:	2301      	movs	r3, #1
 800efb6:	e070      	b.n	800f09a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d101      	bne.n	800efc4 <create_chain+0x52>
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	e06a      	b.n	800f09a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	69db      	ldr	r3, [r3, #28]
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d201      	bcs.n	800efd2 <create_chain+0x60>
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	e063      	b.n	800f09a <create_chain+0x128>
		scl = clst;
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	3301      	adds	r3, #1
 800efde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800efe0:	693b      	ldr	r3, [r7, #16]
 800efe2:	69db      	ldr	r3, [r3, #28]
 800efe4:	69fa      	ldr	r2, [r7, #28]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d307      	bcc.n	800effa <create_chain+0x88>
				ncl = 2;
 800efea:	2302      	movs	r3, #2
 800efec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800efee:	69fa      	ldr	r2, [r7, #28]
 800eff0:	69bb      	ldr	r3, [r7, #24]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d901      	bls.n	800effa <create_chain+0x88>
 800eff6:	2300      	movs	r3, #0
 800eff8:	e04f      	b.n	800f09a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800effa:	69f9      	ldr	r1, [r7, #28]
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f7ff fd6c 	bl	800eada <get_fat>
 800f002:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00e      	beq.n	800f028 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2b01      	cmp	r3, #1
 800f00e:	d003      	beq.n	800f018 <create_chain+0xa6>
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f016:	d101      	bne.n	800f01c <create_chain+0xaa>
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	e03e      	b.n	800f09a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f01c:	69fa      	ldr	r2, [r7, #28]
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	429a      	cmp	r2, r3
 800f022:	d1da      	bne.n	800efda <create_chain+0x68>
 800f024:	2300      	movs	r3, #0
 800f026:	e038      	b.n	800f09a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f028:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f02a:	f04f 32ff 	mov.w	r2, #4294967295
 800f02e:	69f9      	ldr	r1, [r7, #28]
 800f030:	6938      	ldr	r0, [r7, #16]
 800f032:	f7ff fe22 	bl	800ec7a <put_fat>
 800f036:	4603      	mov	r3, r0
 800f038:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f03a:	7dfb      	ldrb	r3, [r7, #23]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d109      	bne.n	800f054 <create_chain+0xe2>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d006      	beq.n	800f054 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f046:	69fa      	ldr	r2, [r7, #28]
 800f048:	6839      	ldr	r1, [r7, #0]
 800f04a:	6938      	ldr	r0, [r7, #16]
 800f04c:	f7ff fe15 	bl	800ec7a <put_fat>
 800f050:	4603      	mov	r3, r0
 800f052:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d116      	bne.n	800f088 <create_chain+0x116>
		fs->last_clst = ncl;
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	69fa      	ldr	r2, [r7, #28]
 800f05e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	695a      	ldr	r2, [r3, #20]
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	69db      	ldr	r3, [r3, #28]
 800f068:	3b02      	subs	r3, #2
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d804      	bhi.n	800f078 <create_chain+0x106>
 800f06e:	693b      	ldr	r3, [r7, #16]
 800f070:	695b      	ldr	r3, [r3, #20]
 800f072:	1e5a      	subs	r2, r3, #1
 800f074:	693b      	ldr	r3, [r7, #16]
 800f076:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	f043 0301 	orr.w	r3, r3, #1
 800f080:	b2da      	uxtb	r2, r3
 800f082:	693b      	ldr	r3, [r7, #16]
 800f084:	711a      	strb	r2, [r3, #4]
 800f086:	e007      	b.n	800f098 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f088:	7dfb      	ldrb	r3, [r7, #23]
 800f08a:	2b01      	cmp	r3, #1
 800f08c:	d102      	bne.n	800f094 <create_chain+0x122>
 800f08e:	f04f 33ff 	mov.w	r3, #4294967295
 800f092:	e000      	b.n	800f096 <create_chain+0x124>
 800f094:	2301      	movs	r3, #1
 800f096:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f098:	69fb      	ldr	r3, [r7, #28]
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3720      	adds	r7, #32
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f0a2:	b480      	push	{r7}
 800f0a4:	b087      	sub	sp, #28
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
 800f0aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0b6:	3304      	adds	r3, #4
 800f0b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	899b      	ldrh	r3, [r3, #12]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	8952      	ldrh	r2, [r2, #10]
 800f0ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800f0ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0d0:	693b      	ldr	r3, [r7, #16]
 800f0d2:	1d1a      	adds	r2, r3, #4
 800f0d4:	613a      	str	r2, [r7, #16]
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f0da:	68bb      	ldr	r3, [r7, #8]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <clmt_clust+0x42>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e010      	b.n	800f106 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	68bb      	ldr	r3, [r7, #8]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d307      	bcc.n	800f0fc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f0ec:	697a      	ldr	r2, [r7, #20]
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	617b      	str	r3, [r7, #20]
 800f0f4:	693b      	ldr	r3, [r7, #16]
 800f0f6:	3304      	adds	r3, #4
 800f0f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f0fa:	e7e9      	b.n	800f0d0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f0fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	4413      	add	r3, r2
}
 800f106:	4618      	mov	r0, r3
 800f108:	371c      	adds	r7, #28
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f112:	b580      	push	{r7, lr}
 800f114:	b086      	sub	sp, #24
 800f116:	af00      	add	r7, sp, #0
 800f118:	6078      	str	r0, [r7, #4]
 800f11a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f128:	d204      	bcs.n	800f134 <dir_sdi+0x22>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	f003 031f 	and.w	r3, r3, #31
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f134:	2302      	movs	r3, #2
 800f136:	e071      	b.n	800f21c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	689b      	ldr	r3, [r3, #8]
 800f142:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d106      	bne.n	800f158 <dir_sdi+0x46>
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d902      	bls.n	800f158 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f156:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f158:	697b      	ldr	r3, [r7, #20]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d10c      	bne.n	800f178 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f15e:	683b      	ldr	r3, [r7, #0]
 800f160:	095b      	lsrs	r3, r3, #5
 800f162:	693a      	ldr	r2, [r7, #16]
 800f164:	8912      	ldrh	r2, [r2, #8]
 800f166:	4293      	cmp	r3, r2
 800f168:	d301      	bcc.n	800f16e <dir_sdi+0x5c>
 800f16a:	2302      	movs	r3, #2
 800f16c:	e056      	b.n	800f21c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	61da      	str	r2, [r3, #28]
 800f176:	e02d      	b.n	800f1d4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	895b      	ldrh	r3, [r3, #10]
 800f17c:	461a      	mov	r2, r3
 800f17e:	693b      	ldr	r3, [r7, #16]
 800f180:	899b      	ldrh	r3, [r3, #12]
 800f182:	fb03 f302 	mul.w	r3, r3, r2
 800f186:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f188:	e019      	b.n	800f1be <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6979      	ldr	r1, [r7, #20]
 800f18e:	4618      	mov	r0, r3
 800f190:	f7ff fca3 	bl	800eada <get_fat>
 800f194:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f196:	697b      	ldr	r3, [r7, #20]
 800f198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f19c:	d101      	bne.n	800f1a2 <dir_sdi+0x90>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e03c      	b.n	800f21c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d904      	bls.n	800f1b2 <dir_sdi+0xa0>
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	69db      	ldr	r3, [r3, #28]
 800f1ac:	697a      	ldr	r2, [r7, #20]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d301      	bcc.n	800f1b6 <dir_sdi+0xa4>
 800f1b2:	2302      	movs	r3, #2
 800f1b4:	e032      	b.n	800f21c <dir_sdi+0x10a>
			ofs -= csz;
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d2e1      	bcs.n	800f18a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f1c6:	6979      	ldr	r1, [r7, #20]
 800f1c8:	6938      	ldr	r0, [r7, #16]
 800f1ca:	f7ff fc67 	bl	800ea9c <clust2sect>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	69db      	ldr	r3, [r3, #28]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d101      	bne.n	800f1e6 <dir_sdi+0xd4>
 800f1e2:	2302      	movs	r3, #2
 800f1e4:	e01a      	b.n	800f21c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	69da      	ldr	r2, [r3, #28]
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	899b      	ldrh	r3, [r3, #12]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1f6:	441a      	add	r2, r3
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	899b      	ldrh	r3, [r3, #12]
 800f206:	461a      	mov	r2, r3
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f20e:	fb02 f200 	mul.w	r2, r2, r0
 800f212:	1a9b      	subs	r3, r3, r2
 800f214:	18ca      	adds	r2, r1, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f21a:	2300      	movs	r3, #0
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3718      	adds	r7, #24
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b086      	sub	sp, #24
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	695b      	ldr	r3, [r3, #20]
 800f238:	3320      	adds	r3, #32
 800f23a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	69db      	ldr	r3, [r3, #28]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d003      	beq.n	800f24c <dir_next+0x28>
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f24a:	d301      	bcc.n	800f250 <dir_next+0x2c>
 800f24c:	2304      	movs	r3, #4
 800f24e:	e0bb      	b.n	800f3c8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	899b      	ldrh	r3, [r3, #12]
 800f254:	461a      	mov	r2, r3
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	fbb3 f1f2 	udiv	r1, r3, r2
 800f25c:	fb02 f201 	mul.w	r2, r2, r1
 800f260:	1a9b      	subs	r3, r3, r2
 800f262:	2b00      	cmp	r3, #0
 800f264:	f040 809d 	bne.w	800f3a2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	69db      	ldr	r3, [r3, #28]
 800f26c:	1c5a      	adds	r2, r3, #1
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	699b      	ldr	r3, [r3, #24]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10b      	bne.n	800f292 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	095b      	lsrs	r3, r3, #5
 800f27e:	68fa      	ldr	r2, [r7, #12]
 800f280:	8912      	ldrh	r2, [r2, #8]
 800f282:	4293      	cmp	r3, r2
 800f284:	f0c0 808d 	bcc.w	800f3a2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	2200      	movs	r2, #0
 800f28c:	61da      	str	r2, [r3, #28]
 800f28e:	2304      	movs	r3, #4
 800f290:	e09a      	b.n	800f3c8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	899b      	ldrh	r3, [r3, #12]
 800f296:	461a      	mov	r2, r3
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f29e:	68fa      	ldr	r2, [r7, #12]
 800f2a0:	8952      	ldrh	r2, [r2, #10]
 800f2a2:	3a01      	subs	r2, #1
 800f2a4:	4013      	ands	r3, r2
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d17b      	bne.n	800f3a2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	699b      	ldr	r3, [r3, #24]
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	f7ff fc11 	bl	800eada <get_fat>
 800f2b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	2b01      	cmp	r3, #1
 800f2be:	d801      	bhi.n	800f2c4 <dir_next+0xa0>
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	e081      	b.n	800f3c8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2ca:	d101      	bne.n	800f2d0 <dir_next+0xac>
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	e07b      	b.n	800f3c8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	69db      	ldr	r3, [r3, #28]
 800f2d4:	697a      	ldr	r2, [r7, #20]
 800f2d6:	429a      	cmp	r2, r3
 800f2d8:	d359      	bcc.n	800f38e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d104      	bne.n	800f2ea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	61da      	str	r2, [r3, #28]
 800f2e6:	2304      	movs	r3, #4
 800f2e8:	e06e      	b.n	800f3c8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	699b      	ldr	r3, [r3, #24]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	4610      	mov	r0, r2
 800f2f4:	f7ff fe3d 	bl	800ef72 <create_chain>
 800f2f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <dir_next+0xe0>
 800f300:	2307      	movs	r3, #7
 800f302:	e061      	b.n	800f3c8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d101      	bne.n	800f30e <dir_next+0xea>
 800f30a:	2302      	movs	r3, #2
 800f30c:	e05c      	b.n	800f3c8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f314:	d101      	bne.n	800f31a <dir_next+0xf6>
 800f316:	2301      	movs	r3, #1
 800f318:	e056      	b.n	800f3c8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f31a:	68f8      	ldr	r0, [r7, #12]
 800f31c:	f7ff fadc 	bl	800e8d8 <sync_window>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <dir_next+0x106>
 800f326:	2301      	movs	r3, #1
 800f328:	e04e      	b.n	800f3c8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	899b      	ldrh	r3, [r3, #12]
 800f334:	461a      	mov	r2, r3
 800f336:	2100      	movs	r1, #0
 800f338:	f7ff f905 	bl	800e546 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f33c:	2300      	movs	r3, #0
 800f33e:	613b      	str	r3, [r7, #16]
 800f340:	6979      	ldr	r1, [r7, #20]
 800f342:	68f8      	ldr	r0, [r7, #12]
 800f344:	f7ff fbaa 	bl	800ea9c <clust2sect>
 800f348:	4602      	mov	r2, r0
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	635a      	str	r2, [r3, #52]	; 0x34
 800f34e:	e012      	b.n	800f376 <dir_next+0x152>
						fs->wflag = 1;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2201      	movs	r2, #1
 800f354:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f356:	68f8      	ldr	r0, [r7, #12]
 800f358:	f7ff fabe 	bl	800e8d8 <sync_window>
 800f35c:	4603      	mov	r3, r0
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <dir_next+0x142>
 800f362:	2301      	movs	r3, #1
 800f364:	e030      	b.n	800f3c8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f366:	693b      	ldr	r3, [r7, #16]
 800f368:	3301      	adds	r3, #1
 800f36a:	613b      	str	r3, [r7, #16]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f370:	1c5a      	adds	r2, r3, #1
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	635a      	str	r2, [r3, #52]	; 0x34
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	895b      	ldrh	r3, [r3, #10]
 800f37a:	461a      	mov	r2, r3
 800f37c:	693b      	ldr	r3, [r7, #16]
 800f37e:	4293      	cmp	r3, r2
 800f380:	d3e6      	bcc.n	800f350 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	1ad2      	subs	r2, r2, r3
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	697a      	ldr	r2, [r7, #20]
 800f392:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f394:	6979      	ldr	r1, [r7, #20]
 800f396:	68f8      	ldr	r0, [r7, #12]
 800f398:	f7ff fb80 	bl	800ea9c <clust2sect>
 800f39c:	4602      	mov	r2, r0
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68ba      	ldr	r2, [r7, #8]
 800f3a6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	899b      	ldrh	r3, [r3, #12]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	68bb      	ldr	r3, [r7, #8]
 800f3b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3ba:	fb02 f200 	mul.w	r2, r2, r0
 800f3be:	1a9b      	subs	r3, r3, r2
 800f3c0:	18ca      	adds	r2, r1, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b086      	sub	sp, #24
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f3e0:	2100      	movs	r1, #0
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f7ff fe95 	bl	800f112 <dir_sdi>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f3ec:	7dfb      	ldrb	r3, [r7, #23]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d12b      	bne.n	800f44a <dir_alloc+0x7a>
		n = 0;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	69db      	ldr	r3, [r3, #28]
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff faaf 	bl	800e960 <move_window>
 800f402:	4603      	mov	r3, r0
 800f404:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f406:	7dfb      	ldrb	r3, [r7, #23]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d11d      	bne.n	800f448 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6a1b      	ldr	r3, [r3, #32]
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	2be5      	cmp	r3, #229	; 0xe5
 800f414:	d004      	beq.n	800f420 <dir_alloc+0x50>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6a1b      	ldr	r3, [r3, #32]
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d107      	bne.n	800f430 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	3301      	adds	r3, #1
 800f424:	613b      	str	r3, [r7, #16]
 800f426:	693a      	ldr	r2, [r7, #16]
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d102      	bne.n	800f434 <dir_alloc+0x64>
 800f42e:	e00c      	b.n	800f44a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f430:	2300      	movs	r3, #0
 800f432:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f434:	2101      	movs	r1, #1
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fef4 	bl	800f224 <dir_next>
 800f43c:	4603      	mov	r3, r0
 800f43e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f440:	7dfb      	ldrb	r3, [r7, #23]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0d7      	beq.n	800f3f6 <dir_alloc+0x26>
 800f446:	e000      	b.n	800f44a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f448:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	2b04      	cmp	r3, #4
 800f44e:	d101      	bne.n	800f454 <dir_alloc+0x84>
 800f450:	2307      	movs	r3, #7
 800f452:	75fb      	strb	r3, [r7, #23]
	return res;
 800f454:	7dfb      	ldrb	r3, [r7, #23]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}

0800f45e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f45e:	b580      	push	{r7, lr}
 800f460:	b084      	sub	sp, #16
 800f462:	af00      	add	r7, sp, #0
 800f464:	6078      	str	r0, [r7, #4]
 800f466:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	331a      	adds	r3, #26
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fe ffc7 	bl	800e400 <ld_word>
 800f472:	4603      	mov	r3, r0
 800f474:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b03      	cmp	r3, #3
 800f47c:	d109      	bne.n	800f492 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	3314      	adds	r3, #20
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe ffbc 	bl	800e400 <ld_word>
 800f488:	4603      	mov	r3, r0
 800f48a:	041b      	lsls	r3, r3, #16
 800f48c:	68fa      	ldr	r2, [r7, #12]
 800f48e:	4313      	orrs	r3, r2
 800f490:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f492:	68fb      	ldr	r3, [r7, #12]
}
 800f494:	4618      	mov	r0, r3
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	331a      	adds	r3, #26
 800f4ac:	687a      	ldr	r2, [r7, #4]
 800f4ae:	b292      	uxth	r2, r2
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe ffdf 	bl	800e476 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b03      	cmp	r3, #3
 800f4be:	d109      	bne.n	800f4d4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	f103 0214 	add.w	r2, r3, #20
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	0c1b      	lsrs	r3, r3, #16
 800f4ca:	b29b      	uxth	r3, r3
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	f7fe ffd1 	bl	800e476 <st_word>
	}
}
 800f4d4:	bf00      	nop
 800f4d6:	3710      	adds	r7, #16
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b086      	sub	sp, #24
 800f4e0:	af00      	add	r7, sp, #0
 800f4e2:	6078      	str	r0, [r7, #4]
 800f4e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f4e6:	2304      	movs	r3, #4
 800f4e8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800f4f0:	e03c      	b.n	800f56c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	69db      	ldr	r3, [r3, #28]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6938      	ldr	r0, [r7, #16]
 800f4fa:	f7ff fa31 	bl	800e960 <move_window>
 800f4fe:	4603      	mov	r3, r0
 800f500:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f502:	7dfb      	ldrb	r3, [r7, #23]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d136      	bne.n	800f576 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	6a1b      	ldr	r3, [r3, #32]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d102      	bne.n	800f51c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f516:	2304      	movs	r3, #4
 800f518:	75fb      	strb	r3, [r7, #23]
 800f51a:	e031      	b.n	800f580 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	330b      	adds	r3, #11
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f528:	73bb      	strb	r3, [r7, #14]
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	7bba      	ldrb	r2, [r7, #14]
 800f52e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800f530:	7bfb      	ldrb	r3, [r7, #15]
 800f532:	2be5      	cmp	r3, #229	; 0xe5
 800f534:	d011      	beq.n	800f55a <dir_read+0x7e>
 800f536:	7bfb      	ldrb	r3, [r7, #15]
 800f538:	2b2e      	cmp	r3, #46	; 0x2e
 800f53a:	d00e      	beq.n	800f55a <dir_read+0x7e>
 800f53c:	7bbb      	ldrb	r3, [r7, #14]
 800f53e:	2b0f      	cmp	r3, #15
 800f540:	d00b      	beq.n	800f55a <dir_read+0x7e>
 800f542:	7bbb      	ldrb	r3, [r7, #14]
 800f544:	f023 0320 	bic.w	r3, r3, #32
 800f548:	2b08      	cmp	r3, #8
 800f54a:	bf0c      	ite	eq
 800f54c:	2301      	moveq	r3, #1
 800f54e:	2300      	movne	r3, #0
 800f550:	b2db      	uxtb	r3, r3
 800f552:	461a      	mov	r2, r3
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	4293      	cmp	r3, r2
 800f558:	d00f      	beq.n	800f57a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f55a:	2100      	movs	r1, #0
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff fe61 	bl	800f224 <dir_next>
 800f562:	4603      	mov	r3, r0
 800f564:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f566:	7dfb      	ldrb	r3, [r7, #23]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d108      	bne.n	800f57e <dir_read+0xa2>
	while (dp->sect) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	69db      	ldr	r3, [r3, #28]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d1be      	bne.n	800f4f2 <dir_read+0x16>
 800f574:	e004      	b.n	800f580 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f576:	bf00      	nop
 800f578:	e002      	b.n	800f580 <dir_read+0xa4>
				break;
 800f57a:	bf00      	nop
 800f57c:	e000      	b.n	800f580 <dir_read+0xa4>
		if (res != FR_OK) break;
 800f57e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f580:	7dfb      	ldrb	r3, [r7, #23]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <dir_read+0xb0>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	2200      	movs	r2, #0
 800f58a:	61da      	str	r2, [r3, #28]
	return res;
 800f58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3718      	adds	r7, #24
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b086      	sub	sp, #24
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f5a4:	2100      	movs	r1, #0
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f7ff fdb3 	bl	800f112 <dir_sdi>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f5b0:	7dfb      	ldrb	r3, [r7, #23]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <dir_find+0x24>
 800f5b6:	7dfb      	ldrb	r3, [r7, #23]
 800f5b8:	e03e      	b.n	800f638 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	69db      	ldr	r3, [r3, #28]
 800f5be:	4619      	mov	r1, r3
 800f5c0:	6938      	ldr	r0, [r7, #16]
 800f5c2:	f7ff f9cd 	bl	800e960 <move_window>
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5ca:	7dfb      	ldrb	r3, [r7, #23]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d12f      	bne.n	800f630 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	6a1b      	ldr	r3, [r3, #32]
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f5d8:	7bfb      	ldrb	r3, [r7, #15]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d102      	bne.n	800f5e4 <dir_find+0x4e>
 800f5de:	2304      	movs	r3, #4
 800f5e0:	75fb      	strb	r3, [r7, #23]
 800f5e2:	e028      	b.n	800f636 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	6a1b      	ldr	r3, [r3, #32]
 800f5e8:	330b      	adds	r3, #11
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5f0:	b2da      	uxtb	r2, r3
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	330b      	adds	r3, #11
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	f003 0308 	and.w	r3, r3, #8
 800f602:	2b00      	cmp	r3, #0
 800f604:	d10a      	bne.n	800f61c <dir_find+0x86>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a18      	ldr	r0, [r3, #32]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	3324      	adds	r3, #36	; 0x24
 800f60e:	220b      	movs	r2, #11
 800f610:	4619      	mov	r1, r3
 800f612:	f7fe ffb2 	bl	800e57a <mem_cmp>
 800f616:	4603      	mov	r3, r0
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00b      	beq.n	800f634 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f61c:	2100      	movs	r1, #0
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f7ff fe00 	bl	800f224 <dir_next>
 800f624:	4603      	mov	r3, r0
 800f626:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f628:	7dfb      	ldrb	r3, [r7, #23]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d0c5      	beq.n	800f5ba <dir_find+0x24>
 800f62e:	e002      	b.n	800f636 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f630:	bf00      	nop
 800f632:	e000      	b.n	800f636 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f634:	bf00      	nop

	return res;
 800f636:	7dfb      	ldrb	r3, [r7, #23]
}
 800f638:	4618      	mov	r0, r3
 800f63a:	3718      	adds	r7, #24
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}

0800f640 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f64e:	2101      	movs	r1, #1
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f7ff febd 	bl	800f3d0 <dir_alloc>
 800f656:	4603      	mov	r3, r0
 800f658:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f65a:	7bfb      	ldrb	r3, [r7, #15]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d11c      	bne.n	800f69a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	69db      	ldr	r3, [r3, #28]
 800f664:	4619      	mov	r1, r3
 800f666:	68b8      	ldr	r0, [r7, #8]
 800f668:	f7ff f97a 	bl	800e960 <move_window>
 800f66c:	4603      	mov	r3, r0
 800f66e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f670:	7bfb      	ldrb	r3, [r7, #15]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d111      	bne.n	800f69a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	2220      	movs	r2, #32
 800f67c:	2100      	movs	r1, #0
 800f67e:	4618      	mov	r0, r3
 800f680:	f7fe ff61 	bl	800e546 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a18      	ldr	r0, [r3, #32]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	3324      	adds	r3, #36	; 0x24
 800f68c:	220b      	movs	r2, #11
 800f68e:	4619      	mov	r1, r3
 800f690:	f7fe ff38 	bl	800e504 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f694:	68bb      	ldr	r3, [r7, #8]
 800f696:	2201      	movs	r2, #1
 800f698:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3710      	adds	r7, #16
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	69db      	ldr	r3, [r3, #28]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	68f8      	ldr	r0, [r7, #12]
 800f6ba:	f7ff f951 	bl	800e960 <move_window>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800f6c2:	7afb      	ldrb	r3, [r7, #11]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d106      	bne.n	800f6d6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6a1b      	ldr	r3, [r3, #32]
 800f6cc:	22e5      	movs	r2, #229	; 0xe5
 800f6ce:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	2201      	movs	r2, #1
 800f6d4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800f6d6:	7afb      	ldrb	r3, [r7, #11]
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bd80      	pop	{r7, pc}

0800f6e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b088      	sub	sp, #32
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	60fb      	str	r3, [r7, #12]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3324      	adds	r3, #36	; 0x24
 800f6f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f6f6:	220b      	movs	r2, #11
 800f6f8:	2120      	movs	r1, #32
 800f6fa:	68b8      	ldr	r0, [r7, #8]
 800f6fc:	f7fe ff23 	bl	800e546 <mem_set>
	si = i = 0; ni = 8;
 800f700:	2300      	movs	r3, #0
 800f702:	613b      	str	r3, [r7, #16]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	617b      	str	r3, [r7, #20]
 800f708:	2308      	movs	r3, #8
 800f70a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	697b      	ldr	r3, [r7, #20]
 800f710:	4413      	add	r3, r2
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	2b2e      	cmp	r3, #46	; 0x2e
 800f716:	d12f      	bne.n	800f778 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 800f718:	697b      	ldr	r3, [r7, #20]
 800f71a:	1c5a      	adds	r2, r3, #1
 800f71c:	617a      	str	r2, [r7, #20]
 800f71e:	68fa      	ldr	r2, [r7, #12]
 800f720:	4413      	add	r3, r2
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 800f726:	7ffb      	ldrb	r3, [r7, #31]
 800f728:	2b2e      	cmp	r3, #46	; 0x2e
 800f72a:	d10a      	bne.n	800f742 <create_name+0x62>
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	2b02      	cmp	r3, #2
 800f730:	d807      	bhi.n	800f742 <create_name+0x62>
			sfn[i++] = c;
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	1c5a      	adds	r2, r3, #1
 800f736:	613a      	str	r2, [r7, #16]
 800f738:	68ba      	ldr	r2, [r7, #8]
 800f73a:	4413      	add	r3, r2
 800f73c:	7ffa      	ldrb	r2, [r7, #31]
 800f73e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 800f740:	e7ea      	b.n	800f718 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 800f742:	7ffb      	ldrb	r3, [r7, #31]
 800f744:	2b2f      	cmp	r3, #47	; 0x2f
 800f746:	d007      	beq.n	800f758 <create_name+0x78>
 800f748:	7ffb      	ldrb	r3, [r7, #31]
 800f74a:	2b5c      	cmp	r3, #92	; 0x5c
 800f74c:	d004      	beq.n	800f758 <create_name+0x78>
 800f74e:	7ffb      	ldrb	r3, [r7, #31]
 800f750:	2b20      	cmp	r3, #32
 800f752:	d901      	bls.n	800f758 <create_name+0x78>
 800f754:	2306      	movs	r3, #6
 800f756:	e084      	b.n	800f862 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	697b      	ldr	r3, [r7, #20]
 800f75c:	441a      	add	r2, r3
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 800f762:	7ffb      	ldrb	r3, [r7, #31]
 800f764:	2b20      	cmp	r3, #32
 800f766:	d801      	bhi.n	800f76c <create_name+0x8c>
 800f768:	2224      	movs	r2, #36	; 0x24
 800f76a:	e000      	b.n	800f76e <create_name+0x8e>
 800f76c:	2220      	movs	r2, #32
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	330b      	adds	r3, #11
 800f772:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f774:	2300      	movs	r3, #0
 800f776:	e074      	b.n	800f862 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	1c5a      	adds	r2, r3, #1
 800f77c:	617a      	str	r2, [r7, #20]
 800f77e:	68fa      	ldr	r2, [r7, #12]
 800f780:	4413      	add	r3, r2
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f786:	7ffb      	ldrb	r3, [r7, #31]
 800f788:	2b20      	cmp	r3, #32
 800f78a:	d94e      	bls.n	800f82a <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f78c:	7ffb      	ldrb	r3, [r7, #31]
 800f78e:	2b2f      	cmp	r3, #47	; 0x2f
 800f790:	d006      	beq.n	800f7a0 <create_name+0xc0>
 800f792:	7ffb      	ldrb	r3, [r7, #31]
 800f794:	2b5c      	cmp	r3, #92	; 0x5c
 800f796:	d110      	bne.n	800f7ba <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f798:	e002      	b.n	800f7a0 <create_name+0xc0>
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	3301      	adds	r3, #1
 800f79e:	617b      	str	r3, [r7, #20]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	4413      	add	r3, r2
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	2b2f      	cmp	r3, #47	; 0x2f
 800f7aa:	d0f6      	beq.n	800f79a <create_name+0xba>
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	697b      	ldr	r3, [r7, #20]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	2b5c      	cmp	r3, #92	; 0x5c
 800f7b6:	d0f0      	beq.n	800f79a <create_name+0xba>
			break;
 800f7b8:	e038      	b.n	800f82c <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f7ba:	7ffb      	ldrb	r3, [r7, #31]
 800f7bc:	2b2e      	cmp	r3, #46	; 0x2e
 800f7be:	d003      	beq.n	800f7c8 <create_name+0xe8>
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d30c      	bcc.n	800f7e2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f7c8:	69bb      	ldr	r3, [r7, #24]
 800f7ca:	2b0b      	cmp	r3, #11
 800f7cc:	d002      	beq.n	800f7d4 <create_name+0xf4>
 800f7ce:	7ffb      	ldrb	r3, [r7, #31]
 800f7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800f7d2:	d001      	beq.n	800f7d8 <create_name+0xf8>
 800f7d4:	2306      	movs	r3, #6
 800f7d6:	e044      	b.n	800f862 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 800f7d8:	2308      	movs	r3, #8
 800f7da:	613b      	str	r3, [r7, #16]
 800f7dc:	230b      	movs	r3, #11
 800f7de:	61bb      	str	r3, [r7, #24]
			continue;
 800f7e0:	e022      	b.n	800f828 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f7e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	da04      	bge.n	800f7f4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f7ea:	7ffb      	ldrb	r3, [r7, #31]
 800f7ec:	3b80      	subs	r3, #128	; 0x80
 800f7ee:	4a1f      	ldr	r2, [pc, #124]	; (800f86c <create_name+0x18c>)
 800f7f0:	5cd3      	ldrb	r3, [r2, r3]
 800f7f2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f7f4:	7ffb      	ldrb	r3, [r7, #31]
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	481d      	ldr	r0, [pc, #116]	; (800f870 <create_name+0x190>)
 800f7fa:	f7fe fee5 	bl	800e5c8 <chk_chr>
 800f7fe:	4603      	mov	r3, r0
 800f800:	2b00      	cmp	r3, #0
 800f802:	d001      	beq.n	800f808 <create_name+0x128>
 800f804:	2306      	movs	r3, #6
 800f806:	e02c      	b.n	800f862 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f808:	7ffb      	ldrb	r3, [r7, #31]
 800f80a:	2b60      	cmp	r3, #96	; 0x60
 800f80c:	d905      	bls.n	800f81a <create_name+0x13a>
 800f80e:	7ffb      	ldrb	r3, [r7, #31]
 800f810:	2b7a      	cmp	r3, #122	; 0x7a
 800f812:	d802      	bhi.n	800f81a <create_name+0x13a>
 800f814:	7ffb      	ldrb	r3, [r7, #31]
 800f816:	3b20      	subs	r3, #32
 800f818:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	1c5a      	adds	r2, r3, #1
 800f81e:	613a      	str	r2, [r7, #16]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	4413      	add	r3, r2
 800f824:	7ffa      	ldrb	r2, [r7, #31]
 800f826:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f828:	e7a6      	b.n	800f778 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f82a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	441a      	add	r2, r3
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d101      	bne.n	800f840 <create_name+0x160>
 800f83c:	2306      	movs	r3, #6
 800f83e:	e010      	b.n	800f862 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f840:	68bb      	ldr	r3, [r7, #8]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	2be5      	cmp	r3, #229	; 0xe5
 800f846:	d102      	bne.n	800f84e <create_name+0x16e>
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	2205      	movs	r2, #5
 800f84c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f84e:	7ffb      	ldrb	r3, [r7, #31]
 800f850:	2b20      	cmp	r3, #32
 800f852:	d801      	bhi.n	800f858 <create_name+0x178>
 800f854:	2204      	movs	r2, #4
 800f856:	e000      	b.n	800f85a <create_name+0x17a>
 800f858:	2200      	movs	r2, #0
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	330b      	adds	r3, #11
 800f85e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f860:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f862:	4618      	mov	r0, r3
 800f864:	3720      	adds	r7, #32
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	08017918 	.word	0x08017918
 800f870:	080178c8 	.word	0x080178c8

0800f874 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b086      	sub	sp, #24
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b2f      	cmp	r3, #47	; 0x2f
 800f88e:	d00b      	beq.n	800f8a8 <follow_path+0x34>
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	2b5c      	cmp	r3, #92	; 0x5c
 800f896:	d007      	beq.n	800f8a8 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	699a      	ldr	r2, [r3, #24]
 800f89c:	693b      	ldr	r3, [r7, #16]
 800f89e:	609a      	str	r2, [r3, #8]
 800f8a0:	e00d      	b.n	800f8be <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	603b      	str	r3, [r7, #0]
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	2b2f      	cmp	r3, #47	; 0x2f
 800f8ae:	d0f8      	beq.n	800f8a2 <follow_path+0x2e>
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	2b5c      	cmp	r3, #92	; 0x5c
 800f8b6:	d0f4      	beq.n	800f8a2 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f8be:	683b      	ldr	r3, [r7, #0]
 800f8c0:	781b      	ldrb	r3, [r3, #0]
 800f8c2:	2b1f      	cmp	r3, #31
 800f8c4:	d80a      	bhi.n	800f8dc <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	2280      	movs	r2, #128	; 0x80
 800f8ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f7ff fc1e 	bl	800f112 <dir_sdi>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	75fb      	strb	r3, [r7, #23]
 800f8da:	e05b      	b.n	800f994 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f8dc:	463b      	mov	r3, r7
 800f8de:	4619      	mov	r1, r3
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7ff fefd 	bl	800f6e0 <create_name>
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d14c      	bne.n	800f98a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f7ff fe50 	bl	800f596 <dir_find>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f900:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f902:	7dfb      	ldrb	r3, [r7, #23]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01b      	beq.n	800f940 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f908:	7dfb      	ldrb	r3, [r7, #23]
 800f90a:	2b04      	cmp	r3, #4
 800f90c:	d13f      	bne.n	800f98e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800f90e:	7afb      	ldrb	r3, [r7, #11]
 800f910:	f003 0320 	and.w	r3, r3, #32
 800f914:	2b00      	cmp	r3, #0
 800f916:	d00b      	beq.n	800f930 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f918:	7afb      	ldrb	r3, [r7, #11]
 800f91a:	f003 0304 	and.w	r3, r3, #4
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d031      	beq.n	800f986 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2280      	movs	r2, #128	; 0x80
 800f926:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800f92e:	e02e      	b.n	800f98e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f930:	7afb      	ldrb	r3, [r7, #11]
 800f932:	f003 0304 	and.w	r3, r3, #4
 800f936:	2b00      	cmp	r3, #0
 800f938:	d129      	bne.n	800f98e <follow_path+0x11a>
 800f93a:	2305      	movs	r3, #5
 800f93c:	75fb      	strb	r3, [r7, #23]
				break;
 800f93e:	e026      	b.n	800f98e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f940:	7afb      	ldrb	r3, [r7, #11]
 800f942:	f003 0304 	and.w	r3, r3, #4
 800f946:	2b00      	cmp	r3, #0
 800f948:	d123      	bne.n	800f992 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	799b      	ldrb	r3, [r3, #6]
 800f94e:	f003 0310 	and.w	r3, r3, #16
 800f952:	2b00      	cmp	r3, #0
 800f954:	d102      	bne.n	800f95c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800f956:	2305      	movs	r3, #5
 800f958:	75fb      	strb	r3, [r7, #23]
 800f95a:	e01b      	b.n	800f994 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	695b      	ldr	r3, [r3, #20]
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	8992      	ldrh	r2, [r2, #12]
 800f96a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f96e:	fb02 f200 	mul.w	r2, r2, r0
 800f972:	1a9b      	subs	r3, r3, r2
 800f974:	440b      	add	r3, r1
 800f976:	4619      	mov	r1, r3
 800f978:	68f8      	ldr	r0, [r7, #12]
 800f97a:	f7ff fd70 	bl	800f45e <ld_clust>
 800f97e:	4602      	mov	r2, r0
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	609a      	str	r2, [r3, #8]
 800f984:	e7aa      	b.n	800f8dc <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800f986:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f988:	e7a8      	b.n	800f8dc <follow_path+0x68>
			if (res != FR_OK) break;
 800f98a:	bf00      	nop
 800f98c:	e002      	b.n	800f994 <follow_path+0x120>
				break;
 800f98e:	bf00      	nop
 800f990:	e000      	b.n	800f994 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f992:	bf00      	nop
			}
		}
	}

	return res;
 800f994:	7dfb      	ldrb	r3, [r7, #23]
}
 800f996:	4618      	mov	r0, r3
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b087      	sub	sp, #28
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f9a6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d031      	beq.n	800fa18 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	617b      	str	r3, [r7, #20]
 800f9ba:	e002      	b.n	800f9c2 <get_ldnumber+0x24>
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	3301      	adds	r3, #1
 800f9c0:	617b      	str	r3, [r7, #20]
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b20      	cmp	r3, #32
 800f9c8:	d903      	bls.n	800f9d2 <get_ldnumber+0x34>
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	2b3a      	cmp	r3, #58	; 0x3a
 800f9d0:	d1f4      	bne.n	800f9bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f9d2:	697b      	ldr	r3, [r7, #20]
 800f9d4:	781b      	ldrb	r3, [r3, #0]
 800f9d6:	2b3a      	cmp	r3, #58	; 0x3a
 800f9d8:	d11c      	bne.n	800fa14 <get_ldnumber+0x76>
			tp = *path;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	1c5a      	adds	r2, r3, #1
 800f9e4:	60fa      	str	r2, [r7, #12]
 800f9e6:	781b      	ldrb	r3, [r3, #0]
 800f9e8:	3b30      	subs	r3, #48	; 0x30
 800f9ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	2b09      	cmp	r3, #9
 800f9f0:	d80e      	bhi.n	800fa10 <get_ldnumber+0x72>
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	429a      	cmp	r2, r3
 800f9f8:	d10a      	bne.n	800fa10 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f9fa:	68bb      	ldr	r3, [r7, #8]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d107      	bne.n	800fa10 <get_ldnumber+0x72>
					vol = (int)i;
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa04:	697b      	ldr	r3, [r7, #20]
 800fa06:	3301      	adds	r3, #1
 800fa08:	617b      	str	r3, [r7, #20]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	697a      	ldr	r2, [r7, #20]
 800fa0e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	e002      	b.n	800fa1a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa14:	2300      	movs	r3, #0
 800fa16:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fa18:	693b      	ldr	r3, [r7, #16]
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	371c      	adds	r7, #28
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr
	...

0800fa28 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	2200      	movs	r2, #0
 800fa36:	70da      	strb	r2, [r3, #3]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fa40:	6839      	ldr	r1, [r7, #0]
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f7fe ff8c 	bl	800e960 <move_window>
 800fa48:	4603      	mov	r3, r0
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d001      	beq.n	800fa52 <check_fs+0x2a>
 800fa4e:	2304      	movs	r3, #4
 800fa50:	e038      	b.n	800fac4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	3338      	adds	r3, #56	; 0x38
 800fa56:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fe fcd0 	bl	800e400 <ld_word>
 800fa60:	4603      	mov	r3, r0
 800fa62:	461a      	mov	r2, r3
 800fa64:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d001      	beq.n	800fa70 <check_fs+0x48>
 800fa6c:	2303      	movs	r3, #3
 800fa6e:	e029      	b.n	800fac4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa76:	2be9      	cmp	r3, #233	; 0xe9
 800fa78:	d009      	beq.n	800fa8e <check_fs+0x66>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fa80:	2beb      	cmp	r3, #235	; 0xeb
 800fa82:	d11e      	bne.n	800fac2 <check_fs+0x9a>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fa8a:	2b90      	cmp	r3, #144	; 0x90
 800fa8c:	d119      	bne.n	800fac2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	3338      	adds	r3, #56	; 0x38
 800fa92:	3336      	adds	r3, #54	; 0x36
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7fe fccb 	bl	800e430 <ld_dword>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800faa0:	4a0a      	ldr	r2, [pc, #40]	; (800facc <check_fs+0xa4>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d101      	bne.n	800faaa <check_fs+0x82>
 800faa6:	2300      	movs	r3, #0
 800faa8:	e00c      	b.n	800fac4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	3338      	adds	r3, #56	; 0x38
 800faae:	3352      	adds	r3, #82	; 0x52
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fe fcbd 	bl	800e430 <ld_dword>
 800fab6:	4602      	mov	r2, r0
 800fab8:	4b05      	ldr	r3, [pc, #20]	; (800fad0 <check_fs+0xa8>)
 800faba:	429a      	cmp	r2, r3
 800fabc:	d101      	bne.n	800fac2 <check_fs+0x9a>
 800fabe:	2300      	movs	r3, #0
 800fac0:	e000      	b.n	800fac4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fac2:	2302      	movs	r3, #2
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3708      	adds	r7, #8
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	00544146 	.word	0x00544146
 800fad0:	33544146 	.word	0x33544146

0800fad4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b096      	sub	sp, #88	; 0x58
 800fad8:	af00      	add	r7, sp, #0
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	4613      	mov	r3, r2
 800fae0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	2200      	movs	r2, #0
 800fae6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff ff58 	bl	800f99e <get_ldnumber>
 800faee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800faf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	da01      	bge.n	800fafa <find_volume+0x26>
 800faf6:	230b      	movs	r3, #11
 800faf8:	e268      	b.n	800ffcc <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fafa:	4ab0      	ldr	r2, [pc, #704]	; (800fdbc <find_volume+0x2e8>)
 800fafc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fafe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb02:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d101      	bne.n	800fb0e <find_volume+0x3a>
 800fb0a:	230c      	movs	r3, #12
 800fb0c:	e25e      	b.n	800ffcc <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb12:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb14:	79fb      	ldrb	r3, [r7, #7]
 800fb16:	f023 0301 	bic.w	r3, r3, #1
 800fb1a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fb1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d01a      	beq.n	800fb5a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb26:	785b      	ldrb	r3, [r3, #1]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fe fbcb 	bl	800e2c4 <disk_status>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fb34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb38:	f003 0301 	and.w	r3, r3, #1
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10c      	bne.n	800fb5a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fb40:	79fb      	ldrb	r3, [r7, #7]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d007      	beq.n	800fb56 <find_volume+0x82>
 800fb46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb4a:	f003 0304 	and.w	r3, r3, #4
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d001      	beq.n	800fb56 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fb52:	230a      	movs	r3, #10
 800fb54:	e23a      	b.n	800ffcc <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 800fb56:	2300      	movs	r3, #0
 800fb58:	e238      	b.n	800ffcc <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fb60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb66:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6a:	785b      	ldrb	r3, [r3, #1]
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fe fbc3 	bl	800e2f8 <disk_initialize>
 800fb72:	4603      	mov	r3, r0
 800fb74:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fb78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d001      	beq.n	800fb88 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fb84:	2303      	movs	r3, #3
 800fb86:	e221      	b.n	800ffcc <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fb88:	79fb      	ldrb	r3, [r7, #7]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d007      	beq.n	800fb9e <find_volume+0xca>
 800fb8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb92:	f003 0304 	and.w	r3, r3, #4
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d001      	beq.n	800fb9e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fb9a:	230a      	movs	r3, #10
 800fb9c:	e216      	b.n	800ffcc <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba0:	7858      	ldrb	r0, [r3, #1]
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	330c      	adds	r3, #12
 800fba6:	461a      	mov	r2, r3
 800fba8:	2102      	movs	r1, #2
 800fbaa:	f7fe fc0b 	bl	800e3c4 <disk_ioctl>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d001      	beq.n	800fbb8 <find_volume+0xe4>
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e209      	b.n	800ffcc <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fbb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbba:	899b      	ldrh	r3, [r3, #12]
 800fbbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbc0:	d80d      	bhi.n	800fbde <find_volume+0x10a>
 800fbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbc4:	899b      	ldrh	r3, [r3, #12]
 800fbc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbca:	d308      	bcc.n	800fbde <find_volume+0x10a>
 800fbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbce:	899b      	ldrh	r3, [r3, #12]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd4:	899b      	ldrh	r3, [r3, #12]
 800fbd6:	3b01      	subs	r3, #1
 800fbd8:	4013      	ands	r3, r2
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <find_volume+0x10e>
 800fbde:	2301      	movs	r3, #1
 800fbe0:	e1f4      	b.n	800ffcc <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fbe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbe8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fbea:	f7ff ff1d 	bl	800fa28 <check_fs>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fbf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d14b      	bne.n	800fc94 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	643b      	str	r3, [r7, #64]	; 0x40
 800fc00:	e01f      	b.n	800fc42 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc04:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc0a:	011b      	lsls	r3, r3, #4
 800fc0c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc10:	4413      	add	r3, r2
 800fc12:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc16:	3304      	adds	r3, #4
 800fc18:	781b      	ldrb	r3, [r3, #0]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d006      	beq.n	800fc2c <find_volume+0x158>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	3308      	adds	r3, #8
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7fe fc04 	bl	800e430 <ld_dword>
 800fc28:	4602      	mov	r2, r0
 800fc2a:	e000      	b.n	800fc2e <find_volume+0x15a>
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fc36:	440b      	add	r3, r1
 800fc38:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc3e:	3301      	adds	r3, #1
 800fc40:	643b      	str	r3, [r7, #64]	; 0x40
 800fc42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc44:	2b03      	cmp	r3, #3
 800fc46:	d9dc      	bls.n	800fc02 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fc48:	2300      	movs	r3, #0
 800fc4a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fc4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d002      	beq.n	800fc58 <find_volume+0x184>
 800fc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc54:	3b01      	subs	r3, #1
 800fc56:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fc58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fc60:	4413      	add	r3, r2
 800fc62:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fc66:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fc68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d005      	beq.n	800fc7a <find_volume+0x1a6>
 800fc6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc72:	f7ff fed9 	bl	800fa28 <check_fs>
 800fc76:	4603      	mov	r3, r0
 800fc78:	e000      	b.n	800fc7c <find_volume+0x1a8>
 800fc7a:	2303      	movs	r3, #3
 800fc7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fc80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d905      	bls.n	800fc94 <find_volume+0x1c0>
 800fc88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	643b      	str	r3, [r7, #64]	; 0x40
 800fc8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc90:	2b03      	cmp	r3, #3
 800fc92:	d9e1      	bls.n	800fc58 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fc94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc98:	2b04      	cmp	r3, #4
 800fc9a:	d101      	bne.n	800fca0 <find_volume+0x1cc>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e195      	b.n	800ffcc <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fca0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fca4:	2b01      	cmp	r3, #1
 800fca6:	d901      	bls.n	800fcac <find_volume+0x1d8>
 800fca8:	230d      	movs	r3, #13
 800fcaa:	e18f      	b.n	800ffcc <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	3338      	adds	r3, #56	; 0x38
 800fcb0:	330b      	adds	r3, #11
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f7fe fba4 	bl	800e400 <ld_word>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	461a      	mov	r2, r3
 800fcbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcbe:	899b      	ldrh	r3, [r3, #12]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d001      	beq.n	800fcc8 <find_volume+0x1f4>
 800fcc4:	230d      	movs	r3, #13
 800fcc6:	e181      	b.n	800ffcc <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	3338      	adds	r3, #56	; 0x38
 800fccc:	3316      	adds	r3, #22
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fb96 	bl	800e400 <ld_word>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fcd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <find_volume+0x218>
 800fcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce0:	3338      	adds	r3, #56	; 0x38
 800fce2:	3324      	adds	r3, #36	; 0x24
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7fe fba3 	bl	800e430 <ld_dword>
 800fcea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fcec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcf0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	789b      	ldrb	r3, [r3, #2]
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d005      	beq.n	800fd10 <find_volume+0x23c>
 800fd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd06:	789b      	ldrb	r3, [r3, #2]
 800fd08:	2b02      	cmp	r3, #2
 800fd0a:	d001      	beq.n	800fd10 <find_volume+0x23c>
 800fd0c:	230d      	movs	r3, #13
 800fd0e:	e15d      	b.n	800ffcc <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	789b      	ldrb	r3, [r3, #2]
 800fd14:	461a      	mov	r2, r3
 800fd16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd18:	fb02 f303 	mul.w	r3, r2, r3
 800fd1c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd28:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	895b      	ldrh	r3, [r3, #10]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d008      	beq.n	800fd44 <find_volume+0x270>
 800fd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd34:	895b      	ldrh	r3, [r3, #10]
 800fd36:	461a      	mov	r2, r3
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	895b      	ldrh	r3, [r3, #10]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	4013      	ands	r3, r2
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <find_volume+0x274>
 800fd44:	230d      	movs	r3, #13
 800fd46:	e141      	b.n	800ffcc <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4a:	3338      	adds	r3, #56	; 0x38
 800fd4c:	3311      	adds	r3, #17
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f7fe fb56 	bl	800e400 <ld_word>
 800fd54:	4603      	mov	r3, r0
 800fd56:	461a      	mov	r2, r3
 800fd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	891b      	ldrh	r3, [r3, #8]
 800fd60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd62:	8992      	ldrh	r2, [r2, #12]
 800fd64:	0952      	lsrs	r2, r2, #5
 800fd66:	b292      	uxth	r2, r2
 800fd68:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd6c:	fb02 f201 	mul.w	r2, r2, r1
 800fd70:	1a9b      	subs	r3, r3, r2
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <find_volume+0x2a8>
 800fd78:	230d      	movs	r3, #13
 800fd7a:	e127      	b.n	800ffcc <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7e:	3338      	adds	r3, #56	; 0x38
 800fd80:	3313      	adds	r3, #19
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe fb3c 	bl	800e400 <ld_word>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fd8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d106      	bne.n	800fda0 <find_volume+0x2cc>
 800fd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd94:	3338      	adds	r3, #56	; 0x38
 800fd96:	3320      	adds	r3, #32
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7fe fb49 	bl	800e430 <ld_dword>
 800fd9e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda2:	3338      	adds	r3, #56	; 0x38
 800fda4:	330e      	adds	r3, #14
 800fda6:	4618      	mov	r0, r3
 800fda8:	f7fe fb2a 	bl	800e400 <ld_word>
 800fdac:	4603      	mov	r3, r0
 800fdae:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fdb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d104      	bne.n	800fdc0 <find_volume+0x2ec>
 800fdb6:	230d      	movs	r3, #13
 800fdb8:	e108      	b.n	800ffcc <find_volume+0x4f8>
 800fdba:	bf00      	nop
 800fdbc:	2002b0dc 	.word	0x2002b0dc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fdc0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fdc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdc4:	4413      	add	r3, r2
 800fdc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdc8:	8911      	ldrh	r1, [r2, #8]
 800fdca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdcc:	8992      	ldrh	r2, [r2, #12]
 800fdce:	0952      	lsrs	r2, r2, #5
 800fdd0:	b292      	uxth	r2, r2
 800fdd2:	fbb1 f2f2 	udiv	r2, r1, r2
 800fdd6:	b292      	uxth	r2, r2
 800fdd8:	4413      	add	r3, r2
 800fdda:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d201      	bcs.n	800fde8 <find_volume+0x314>
 800fde4:	230d      	movs	r3, #13
 800fde6:	e0f1      	b.n	800ffcc <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fde8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdec:	1ad3      	subs	r3, r2, r3
 800fdee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdf0:	8952      	ldrh	r2, [r2, #10]
 800fdf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d101      	bne.n	800fe02 <find_volume+0x32e>
 800fdfe:	230d      	movs	r3, #13
 800fe00:	e0e4      	b.n	800ffcc <find_volume+0x4f8>
		fmt = FS_FAT32;
 800fe02:	2303      	movs	r3, #3
 800fe04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d802      	bhi.n	800fe18 <find_volume+0x344>
 800fe12:	2302      	movs	r3, #2
 800fe14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d802      	bhi.n	800fe28 <find_volume+0x354>
 800fe22:	2301      	movs	r3, #1
 800fe24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800fe28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe2a:	1c9a      	adds	r2, r3, #2
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800fe30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe34:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800fe36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe3a:	441a      	add	r2, r3
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fe40:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe44:	441a      	add	r2, r3
 800fe46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe48:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fe4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe4e:	2b03      	cmp	r3, #3
 800fe50:	d11e      	bne.n	800fe90 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fe52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe54:	3338      	adds	r3, #56	; 0x38
 800fe56:	332a      	adds	r3, #42	; 0x2a
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fe fad1 	bl	800e400 <ld_word>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d001      	beq.n	800fe68 <find_volume+0x394>
 800fe64:	230d      	movs	r3, #13
 800fe66:	e0b1      	b.n	800ffcc <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	891b      	ldrh	r3, [r3, #8]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d001      	beq.n	800fe74 <find_volume+0x3a0>
 800fe70:	230d      	movs	r3, #13
 800fe72:	e0ab      	b.n	800ffcc <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	3338      	adds	r3, #56	; 0x38
 800fe78:	332c      	adds	r3, #44	; 0x2c
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7fe fad8 	bl	800e430 <ld_dword>
 800fe80:	4602      	mov	r2, r0
 800fe82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe84:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fe86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe88:	69db      	ldr	r3, [r3, #28]
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	647b      	str	r3, [r7, #68]	; 0x44
 800fe8e:	e01f      	b.n	800fed0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800fe90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe92:	891b      	ldrh	r3, [r3, #8]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d101      	bne.n	800fe9c <find_volume+0x3c8>
 800fe98:	230d      	movs	r3, #13
 800fe9a:	e097      	b.n	800ffcc <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800fe9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fea2:	441a      	add	r2, r3
 800fea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800fea8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800feac:	2b02      	cmp	r3, #2
 800feae:	d103      	bne.n	800feb8 <find_volume+0x3e4>
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	69db      	ldr	r3, [r3, #28]
 800feb4:	005b      	lsls	r3, r3, #1
 800feb6:	e00a      	b.n	800fece <find_volume+0x3fa>
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	69da      	ldr	r2, [r3, #28]
 800febc:	4613      	mov	r3, r2
 800febe:	005b      	lsls	r3, r3, #1
 800fec0:	4413      	add	r3, r2
 800fec2:	085a      	lsrs	r2, r3, #1
 800fec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec6:	69db      	ldr	r3, [r3, #28]
 800fec8:	f003 0301 	and.w	r3, r3, #1
 800fecc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800fece:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800fed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed2:	6a1a      	ldr	r2, [r3, #32]
 800fed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed6:	899b      	ldrh	r3, [r3, #12]
 800fed8:	4619      	mov	r1, r3
 800feda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fedc:	440b      	add	r3, r1
 800fede:	3b01      	subs	r3, #1
 800fee0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fee2:	8989      	ldrh	r1, [r1, #12]
 800fee4:	fbb3 f3f1 	udiv	r3, r3, r1
 800fee8:	429a      	cmp	r2, r3
 800feea:	d201      	bcs.n	800fef0 <find_volume+0x41c>
 800feec:	230d      	movs	r3, #13
 800feee:	e06d      	b.n	800ffcc <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	f04f 32ff 	mov.w	r2, #4294967295
 800fef6:	615a      	str	r2, [r3, #20]
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	695a      	ldr	r2, [r3, #20]
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	2280      	movs	r2, #128	; 0x80
 800ff04:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff0a:	2b03      	cmp	r3, #3
 800ff0c:	d149      	bne.n	800ffa2 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff10:	3338      	adds	r3, #56	; 0x38
 800ff12:	3330      	adds	r3, #48	; 0x30
 800ff14:	4618      	mov	r0, r3
 800ff16:	f7fe fa73 	bl	800e400 <ld_word>
 800ff1a:	4603      	mov	r3, r0
 800ff1c:	2b01      	cmp	r3, #1
 800ff1e:	d140      	bne.n	800ffa2 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ff20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff22:	3301      	adds	r3, #1
 800ff24:	4619      	mov	r1, r3
 800ff26:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff28:	f7fe fd1a 	bl	800e960 <move_window>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d137      	bne.n	800ffa2 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	2200      	movs	r2, #0
 800ff36:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ff38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3a:	3338      	adds	r3, #56	; 0x38
 800ff3c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff40:	4618      	mov	r0, r3
 800ff42:	f7fe fa5d 	bl	800e400 <ld_word>
 800ff46:	4603      	mov	r3, r0
 800ff48:	461a      	mov	r2, r3
 800ff4a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d127      	bne.n	800ffa2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	3338      	adds	r3, #56	; 0x38
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7fe fa6a 	bl	800e430 <ld_dword>
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	4b1d      	ldr	r3, [pc, #116]	; (800ffd4 <find_volume+0x500>)
 800ff60:	429a      	cmp	r2, r3
 800ff62:	d11e      	bne.n	800ffa2 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	3338      	adds	r3, #56	; 0x38
 800ff68:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7fe fa5f 	bl	800e430 <ld_dword>
 800ff72:	4602      	mov	r2, r0
 800ff74:	4b18      	ldr	r3, [pc, #96]	; (800ffd8 <find_volume+0x504>)
 800ff76:	429a      	cmp	r2, r3
 800ff78:	d113      	bne.n	800ffa2 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	3338      	adds	r3, #56	; 0x38
 800ff7e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe fa54 	bl	800e430 <ld_dword>
 800ff88:	4602      	mov	r2, r0
 800ff8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	3338      	adds	r3, #56	; 0x38
 800ff92:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fa4a 	bl	800e430 <ld_dword>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ffa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ffa8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ffaa:	4b0c      	ldr	r3, [pc, #48]	; (800ffdc <find_volume+0x508>)
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	b29a      	uxth	r2, r3
 800ffb2:	4b0a      	ldr	r3, [pc, #40]	; (800ffdc <find_volume+0x508>)
 800ffb4:	801a      	strh	r2, [r3, #0]
 800ffb6:	4b09      	ldr	r3, [pc, #36]	; (800ffdc <find_volume+0x508>)
 800ffb8:	881a      	ldrh	r2, [r3, #0]
 800ffba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbc:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800ffbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc0:	2200      	movs	r2, #0
 800ffc2:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ffc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffc6:	f7fe fc63 	bl	800e890 <clear_lock>
#endif
	return FR_OK;
 800ffca:	2300      	movs	r3, #0
}
 800ffcc:	4618      	mov	r0, r3
 800ffce:	3758      	adds	r7, #88	; 0x58
 800ffd0:	46bd      	mov	sp, r7
 800ffd2:	bd80      	pop	{r7, pc}
 800ffd4:	41615252 	.word	0x41615252
 800ffd8:	61417272 	.word	0x61417272
 800ffdc:	2002b0e0 	.word	0x2002b0e0

0800ffe0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b084      	sub	sp, #16
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ffea:	2309      	movs	r3, #9
 800ffec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d01c      	beq.n	801002e <validate+0x4e>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d018      	beq.n	801002e <validate+0x4e>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d013      	beq.n	801002e <validate+0x4e>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	889a      	ldrh	r2, [r3, #4]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	88db      	ldrh	r3, [r3, #6]
 8010010:	429a      	cmp	r2, r3
 8010012:	d10c      	bne.n	801002e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	785b      	ldrb	r3, [r3, #1]
 801001a:	4618      	mov	r0, r3
 801001c:	f7fe f952 	bl	800e2c4 <disk_status>
 8010020:	4603      	mov	r3, r0
 8010022:	f003 0301 	and.w	r3, r3, #1
 8010026:	2b00      	cmp	r3, #0
 8010028:	d101      	bne.n	801002e <validate+0x4e>
			res = FR_OK;
 801002a:	2300      	movs	r3, #0
 801002c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801002e:	7bfb      	ldrb	r3, [r7, #15]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <validate+0x5a>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	e000      	b.n	801003c <validate+0x5c>
 801003a:	2300      	movs	r3, #0
 801003c:	683a      	ldr	r2, [r7, #0]
 801003e:	6013      	str	r3, [r2, #0]
	return res;
 8010040:	7bfb      	ldrb	r3, [r7, #15]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
	...

0801004c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b088      	sub	sp, #32
 8010050:	af00      	add	r7, sp, #0
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	4613      	mov	r3, r2
 8010058:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801005e:	f107 0310 	add.w	r3, r7, #16
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fc9b 	bl	800f99e <get_ldnumber>
 8010068:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	2b00      	cmp	r3, #0
 801006e:	da01      	bge.n	8010074 <f_mount+0x28>
 8010070:	230b      	movs	r3, #11
 8010072:	e02b      	b.n	80100cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010074:	4a17      	ldr	r2, [pc, #92]	; (80100d4 <f_mount+0x88>)
 8010076:	69fb      	ldr	r3, [r7, #28]
 8010078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801007c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d005      	beq.n	8010090 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010084:	69b8      	ldr	r0, [r7, #24]
 8010086:	f7fe fc03 	bl	800e890 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	2200      	movs	r2, #0
 801008e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2b00      	cmp	r3, #0
 8010094:	d002      	beq.n	801009c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2200      	movs	r2, #0
 801009a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	490d      	ldr	r1, [pc, #52]	; (80100d4 <f_mount+0x88>)
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d002      	beq.n	80100b2 <f_mount+0x66>
 80100ac:	79fb      	ldrb	r3, [r7, #7]
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d001      	beq.n	80100b6 <f_mount+0x6a>
 80100b2:	2300      	movs	r3, #0
 80100b4:	e00a      	b.n	80100cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80100b6:	f107 010c 	add.w	r1, r7, #12
 80100ba:	f107 0308 	add.w	r3, r7, #8
 80100be:	2200      	movs	r2, #0
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7ff fd07 	bl	800fad4 <find_volume>
 80100c6:	4603      	mov	r3, r0
 80100c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3720      	adds	r7, #32
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}
 80100d4:	2002b0dc 	.word	0x2002b0dc

080100d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b098      	sub	sp, #96	; 0x60
 80100dc:	af00      	add	r7, sp, #0
 80100de:	60f8      	str	r0, [r7, #12]
 80100e0:	60b9      	str	r1, [r7, #8]
 80100e2:	4613      	mov	r3, r2
 80100e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <f_open+0x18>
 80100ec:	2309      	movs	r3, #9
 80100ee:	e1ba      	b.n	8010466 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80100f0:	79fb      	ldrb	r3, [r7, #7]
 80100f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80100f8:	79fa      	ldrb	r2, [r7, #7]
 80100fa:	f107 0110 	add.w	r1, r7, #16
 80100fe:	f107 0308 	add.w	r3, r7, #8
 8010102:	4618      	mov	r0, r3
 8010104:	f7ff fce6 	bl	800fad4 <find_volume>
 8010108:	4603      	mov	r3, r0
 801010a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801010e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010112:	2b00      	cmp	r3, #0
 8010114:	f040 819e 	bne.w	8010454 <f_open+0x37c>
		dj.obj.fs = fs;
 8010118:	693b      	ldr	r3, [r7, #16]
 801011a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801011c:	68ba      	ldr	r2, [r7, #8]
 801011e:	f107 0314 	add.w	r3, r7, #20
 8010122:	4611      	mov	r1, r2
 8010124:	4618      	mov	r0, r3
 8010126:	f7ff fba5 	bl	800f874 <follow_path>
 801012a:	4603      	mov	r3, r0
 801012c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010130:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010134:	2b00      	cmp	r3, #0
 8010136:	d11a      	bne.n	801016e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010138:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801013c:	b25b      	sxtb	r3, r3
 801013e:	2b00      	cmp	r3, #0
 8010140:	da03      	bge.n	801014a <f_open+0x72>
				res = FR_INVALID_NAME;
 8010142:	2306      	movs	r3, #6
 8010144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010148:	e011      	b.n	801016e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801014a:	79fb      	ldrb	r3, [r7, #7]
 801014c:	f023 0301 	bic.w	r3, r3, #1
 8010150:	2b00      	cmp	r3, #0
 8010152:	bf14      	ite	ne
 8010154:	2301      	movne	r3, #1
 8010156:	2300      	moveq	r3, #0
 8010158:	b2db      	uxtb	r3, r3
 801015a:	461a      	mov	r2, r3
 801015c:	f107 0314 	add.w	r3, r7, #20
 8010160:	4611      	mov	r1, r2
 8010162:	4618      	mov	r0, r3
 8010164:	f7fe fa4c 	bl	800e600 <chk_lock>
 8010168:	4603      	mov	r3, r0
 801016a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801016e:	79fb      	ldrb	r3, [r7, #7]
 8010170:	f003 031c 	and.w	r3, r3, #28
 8010174:	2b00      	cmp	r3, #0
 8010176:	d07e      	beq.n	8010276 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8010178:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801017c:	2b00      	cmp	r3, #0
 801017e:	d017      	beq.n	80101b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010180:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010184:	2b04      	cmp	r3, #4
 8010186:	d10e      	bne.n	80101a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010188:	f7fe fa96 	bl	800e6b8 <enq_lock>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d006      	beq.n	80101a0 <f_open+0xc8>
 8010192:	f107 0314 	add.w	r3, r7, #20
 8010196:	4618      	mov	r0, r3
 8010198:	f7ff fa52 	bl	800f640 <dir_register>
 801019c:	4603      	mov	r3, r0
 801019e:	e000      	b.n	80101a2 <f_open+0xca>
 80101a0:	2312      	movs	r3, #18
 80101a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80101a6:	79fb      	ldrb	r3, [r7, #7]
 80101a8:	f043 0308 	orr.w	r3, r3, #8
 80101ac:	71fb      	strb	r3, [r7, #7]
 80101ae:	e010      	b.n	80101d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80101b0:	7ebb      	ldrb	r3, [r7, #26]
 80101b2:	f003 0311 	and.w	r3, r3, #17
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d003      	beq.n	80101c2 <f_open+0xea>
					res = FR_DENIED;
 80101ba:	2307      	movs	r3, #7
 80101bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80101c0:	e007      	b.n	80101d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80101c2:	79fb      	ldrb	r3, [r7, #7]
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d002      	beq.n	80101d2 <f_open+0xfa>
 80101cc:	2308      	movs	r3, #8
 80101ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80101d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d167      	bne.n	80102aa <f_open+0x1d2>
 80101da:	79fb      	ldrb	r3, [r7, #7]
 80101dc:	f003 0308 	and.w	r3, r3, #8
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d062      	beq.n	80102aa <f_open+0x1d2>
				dw = GET_FATTIME();
 80101e4:	4ba2      	ldr	r3, [pc, #648]	; (8010470 <f_open+0x398>)
 80101e6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80101e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101ea:	330e      	adds	r3, #14
 80101ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fe f95c 	bl	800e4ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80101f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f6:	3316      	adds	r3, #22
 80101f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fe f956 	bl	800e4ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010202:	330b      	adds	r3, #11
 8010204:	2220      	movs	r2, #32
 8010206:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7ff f925 	bl	800f45e <ld_clust>
 8010214:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801021a:	2200      	movs	r2, #0
 801021c:	4618      	mov	r0, r3
 801021e:	f7ff f93d 	bl	800f49c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010224:	331c      	adds	r3, #28
 8010226:	2100      	movs	r1, #0
 8010228:	4618      	mov	r0, r3
 801022a:	f7fe f93f 	bl	800e4ac <st_dword>
					fs->wflag = 1;
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	2201      	movs	r2, #1
 8010232:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010236:	2b00      	cmp	r3, #0
 8010238:	d037      	beq.n	80102aa <f_open+0x1d2>
						dw = fs->winsect;
 801023a:	693b      	ldr	r3, [r7, #16]
 801023c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801023e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8010240:	f107 0314 	add.w	r3, r7, #20
 8010244:	2200      	movs	r2, #0
 8010246:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010248:	4618      	mov	r0, r3
 801024a:	f7fe fe2d 	bl	800eea8 <remove_chain>
 801024e:	4603      	mov	r3, r0
 8010250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010258:	2b00      	cmp	r3, #0
 801025a:	d126      	bne.n	80102aa <f_open+0x1d2>
							res = move_window(fs, dw);
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010260:	4618      	mov	r0, r3
 8010262:	f7fe fb7d 	bl	800e960 <move_window>
 8010266:	4603      	mov	r3, r0
 8010268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010270:	3a01      	subs	r2, #1
 8010272:	611a      	str	r2, [r3, #16]
 8010274:	e019      	b.n	80102aa <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801027a:	2b00      	cmp	r3, #0
 801027c:	d115      	bne.n	80102aa <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801027e:	7ebb      	ldrb	r3, [r7, #26]
 8010280:	f003 0310 	and.w	r3, r3, #16
 8010284:	2b00      	cmp	r3, #0
 8010286:	d003      	beq.n	8010290 <f_open+0x1b8>
					res = FR_NO_FILE;
 8010288:	2304      	movs	r3, #4
 801028a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801028e:	e00c      	b.n	80102aa <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010290:	79fb      	ldrb	r3, [r7, #7]
 8010292:	f003 0302 	and.w	r3, r3, #2
 8010296:	2b00      	cmp	r3, #0
 8010298:	d007      	beq.n	80102aa <f_open+0x1d2>
 801029a:	7ebb      	ldrb	r3, [r7, #26]
 801029c:	f003 0301 	and.w	r3, r3, #1
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d002      	beq.n	80102aa <f_open+0x1d2>
						res = FR_DENIED;
 80102a4:	2307      	movs	r3, #7
 80102a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80102aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d128      	bne.n	8010304 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	f003 0308 	and.w	r3, r3, #8
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d003      	beq.n	80102c4 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80102bc:	79fb      	ldrb	r3, [r7, #7]
 80102be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102c2:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80102cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	f023 0301 	bic.w	r3, r3, #1
 80102d8:	2b00      	cmp	r3, #0
 80102da:	bf14      	ite	ne
 80102dc:	2301      	movne	r3, #1
 80102de:	2300      	moveq	r3, #0
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	461a      	mov	r2, r3
 80102e4:	f107 0314 	add.w	r3, r7, #20
 80102e8:	4611      	mov	r1, r2
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe fa06 	bl	800e6fc <inc_lock>
 80102f0:	4602      	mov	r2, r0
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d102      	bne.n	8010304 <f_open+0x22c>
 80102fe:	2302      	movs	r3, #2
 8010300:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010308:	2b00      	cmp	r3, #0
 801030a:	f040 80a3 	bne.w	8010454 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010312:	4611      	mov	r1, r2
 8010314:	4618      	mov	r0, r3
 8010316:	f7ff f8a2 	bl	800f45e <ld_clust>
 801031a:	4602      	mov	r2, r0
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010322:	331c      	adds	r3, #28
 8010324:	4618      	mov	r0, r3
 8010326:	f7fe f883 	bl	800e430 <ld_dword>
 801032a:	4602      	mov	r2, r0
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801033c:	693b      	ldr	r3, [r7, #16]
 801033e:	88da      	ldrh	r2, [r3, #6]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	79fa      	ldrb	r2, [r7, #7]
 8010348:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2200      	movs	r2, #0
 801034e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	2200      	movs	r2, #0
 8010354:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	2200      	movs	r2, #0
 801035a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	3330      	adds	r3, #48	; 0x30
 8010360:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010364:	2100      	movs	r1, #0
 8010366:	4618      	mov	r0, r3
 8010368:	f7fe f8ed 	bl	800e546 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801036c:	79fb      	ldrb	r3, [r7, #7]
 801036e:	f003 0320 	and.w	r3, r3, #32
 8010372:	2b00      	cmp	r3, #0
 8010374:	d06e      	beq.n	8010454 <f_open+0x37c>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	68db      	ldr	r3, [r3, #12]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d06a      	beq.n	8010454 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	68da      	ldr	r2, [r3, #12]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	895b      	ldrh	r3, [r3, #10]
 801038a:	461a      	mov	r2, r3
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	899b      	ldrh	r3, [r3, #12]
 8010390:	fb03 f302 	mul.w	r3, r3, r2
 8010394:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	689b      	ldr	r3, [r3, #8]
 801039a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	657b      	str	r3, [r7, #84]	; 0x54
 80103a2:	e016      	b.n	80103d2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7fe fb96 	bl	800eada <get_fat>
 80103ae:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80103b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d802      	bhi.n	80103bc <f_open+0x2e4>
 80103b6:	2302      	movs	r3, #2
 80103b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80103bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80103be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103c2:	d102      	bne.n	80103ca <f_open+0x2f2>
 80103c4:	2301      	movs	r3, #1
 80103c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80103ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	657b      	str	r3, [r7, #84]	; 0x54
 80103d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d103      	bne.n	80103e2 <f_open+0x30a>
 80103da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80103de:	429a      	cmp	r2, r3
 80103e0:	d8e0      	bhi.n	80103a4 <f_open+0x2cc>
				}
				fp->clust = clst;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80103e6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80103e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d131      	bne.n	8010454 <f_open+0x37c>
 80103f0:	693b      	ldr	r3, [r7, #16]
 80103f2:	899b      	ldrh	r3, [r3, #12]
 80103f4:	461a      	mov	r2, r3
 80103f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80103fc:	fb02 f201 	mul.w	r2, r2, r1
 8010400:	1a9b      	subs	r3, r3, r2
 8010402:	2b00      	cmp	r3, #0
 8010404:	d026      	beq.n	8010454 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe fb46 	bl	800ea9c <clust2sect>
 8010410:	6478      	str	r0, [r7, #68]	; 0x44
 8010412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010414:	2b00      	cmp	r3, #0
 8010416:	d103      	bne.n	8010420 <f_open+0x348>
						res = FR_INT_ERR;
 8010418:	2302      	movs	r3, #2
 801041a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801041e:	e019      	b.n	8010454 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	899b      	ldrh	r3, [r3, #12]
 8010424:	461a      	mov	r2, r3
 8010426:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010428:	fbb3 f2f2 	udiv	r2, r3, r2
 801042c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801042e:	441a      	add	r2, r3
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	7858      	ldrb	r0, [r3, #1]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	6a1a      	ldr	r2, [r3, #32]
 8010442:	2301      	movs	r3, #1
 8010444:	f7fd ff7e 	bl	800e344 <disk_read>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d002      	beq.n	8010454 <f_open+0x37c>
 801044e:	2301      	movs	r3, #1
 8010450:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010454:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010458:	2b00      	cmp	r3, #0
 801045a:	d002      	beq.n	8010462 <f_open+0x38a>
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	2200      	movs	r2, #0
 8010460:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010466:	4618      	mov	r0, r3
 8010468:	3760      	adds	r7, #96	; 0x60
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	274a0000 	.word	0x274a0000

08010474 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b08e      	sub	sp, #56	; 0x38
 8010478:	af00      	add	r7, sp, #0
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	2200      	movs	r2, #0
 801048a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f107 0214 	add.w	r2, r7, #20
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff fda3 	bl	800ffe0 <validate>
 801049a:	4603      	mov	r3, r0
 801049c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80104a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d107      	bne.n	80104b8 <f_read+0x44>
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	7d5b      	ldrb	r3, [r3, #21]
 80104ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d002      	beq.n	80104be <f_read+0x4a>
 80104b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104bc:	e135      	b.n	801072a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	7d1b      	ldrb	r3, [r3, #20]
 80104c2:	f003 0301 	and.w	r3, r3, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d101      	bne.n	80104ce <f_read+0x5a>
 80104ca:	2307      	movs	r3, #7
 80104cc:	e12d      	b.n	801072a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	68da      	ldr	r2, [r3, #12]
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	699b      	ldr	r3, [r3, #24]
 80104d6:	1ad3      	subs	r3, r2, r3
 80104d8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80104da:	687a      	ldr	r2, [r7, #4]
 80104dc:	6a3b      	ldr	r3, [r7, #32]
 80104de:	429a      	cmp	r2, r3
 80104e0:	f240 811e 	bls.w	8010720 <f_read+0x2ac>
 80104e4:	6a3b      	ldr	r3, [r7, #32]
 80104e6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80104e8:	e11a      	b.n	8010720 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	699b      	ldr	r3, [r3, #24]
 80104ee:	697a      	ldr	r2, [r7, #20]
 80104f0:	8992      	ldrh	r2, [r2, #12]
 80104f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80104f6:	fb02 f201 	mul.w	r2, r2, r1
 80104fa:	1a9b      	subs	r3, r3, r2
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	f040 80d5 	bne.w	80106ac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	699b      	ldr	r3, [r3, #24]
 8010506:	697a      	ldr	r2, [r7, #20]
 8010508:	8992      	ldrh	r2, [r2, #12]
 801050a:	fbb3 f3f2 	udiv	r3, r3, r2
 801050e:	697a      	ldr	r2, [r7, #20]
 8010510:	8952      	ldrh	r2, [r2, #10]
 8010512:	3a01      	subs	r2, #1
 8010514:	4013      	ands	r3, r2
 8010516:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d12f      	bne.n	801057e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	699b      	ldr	r3, [r3, #24]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d103      	bne.n	801052e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	689b      	ldr	r3, [r3, #8]
 801052a:	633b      	str	r3, [r7, #48]	; 0x30
 801052c:	e013      	b.n	8010556 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010532:	2b00      	cmp	r3, #0
 8010534:	d007      	beq.n	8010546 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	4619      	mov	r1, r3
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f7fe fdb0 	bl	800f0a2 <clmt_clust>
 8010542:	6338      	str	r0, [r7, #48]	; 0x30
 8010544:	e007      	b.n	8010556 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	69db      	ldr	r3, [r3, #28]
 801054c:	4619      	mov	r1, r3
 801054e:	4610      	mov	r0, r2
 8010550:	f7fe fac3 	bl	800eada <get_fat>
 8010554:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010558:	2b01      	cmp	r3, #1
 801055a:	d804      	bhi.n	8010566 <f_read+0xf2>
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2202      	movs	r2, #2
 8010560:	755a      	strb	r2, [r3, #21]
 8010562:	2302      	movs	r3, #2
 8010564:	e0e1      	b.n	801072a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056c:	d104      	bne.n	8010578 <f_read+0x104>
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2201      	movs	r2, #1
 8010572:	755a      	strb	r2, [r3, #21]
 8010574:	2301      	movs	r3, #1
 8010576:	e0d8      	b.n	801072a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801057c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801057e:	697a      	ldr	r2, [r7, #20]
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	69db      	ldr	r3, [r3, #28]
 8010584:	4619      	mov	r1, r3
 8010586:	4610      	mov	r0, r2
 8010588:	f7fe fa88 	bl	800ea9c <clust2sect>
 801058c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801058e:	69bb      	ldr	r3, [r7, #24]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d104      	bne.n	801059e <f_read+0x12a>
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2202      	movs	r2, #2
 8010598:	755a      	strb	r2, [r3, #21]
 801059a:	2302      	movs	r3, #2
 801059c:	e0c5      	b.n	801072a <f_read+0x2b6>
			sect += csect;
 801059e:	69ba      	ldr	r2, [r7, #24]
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	4413      	add	r3, r2
 80105a4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	899b      	ldrh	r3, [r3, #12]
 80105aa:	461a      	mov	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80105b2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80105b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d041      	beq.n	801063e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80105ba:	69fa      	ldr	r2, [r7, #28]
 80105bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105be:	4413      	add	r3, r2
 80105c0:	697a      	ldr	r2, [r7, #20]
 80105c2:	8952      	ldrh	r2, [r2, #10]
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d905      	bls.n	80105d4 <f_read+0x160>
					cc = fs->csize - csect;
 80105c8:	697b      	ldr	r3, [r7, #20]
 80105ca:	895b      	ldrh	r3, [r3, #10]
 80105cc:	461a      	mov	r2, r3
 80105ce:	69fb      	ldr	r3, [r7, #28]
 80105d0:	1ad3      	subs	r3, r2, r3
 80105d2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	7858      	ldrb	r0, [r3, #1]
 80105d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105da:	69ba      	ldr	r2, [r7, #24]
 80105dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80105de:	f7fd feb1 	bl	800e344 <disk_read>
 80105e2:	4603      	mov	r3, r0
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d004      	beq.n	80105f2 <f_read+0x17e>
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2201      	movs	r2, #1
 80105ec:	755a      	strb	r2, [r3, #21]
 80105ee:	2301      	movs	r3, #1
 80105f0:	e09b      	b.n	801072a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	7d1b      	ldrb	r3, [r3, #20]
 80105f6:	b25b      	sxtb	r3, r3
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	da18      	bge.n	801062e <f_read+0x1ba>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	6a1a      	ldr	r2, [r3, #32]
 8010600:	69bb      	ldr	r3, [r7, #24]
 8010602:	1ad3      	subs	r3, r2, r3
 8010604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010606:	429a      	cmp	r2, r3
 8010608:	d911      	bls.n	801062e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6a1a      	ldr	r2, [r3, #32]
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	1ad3      	subs	r3, r2, r3
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	8992      	ldrh	r2, [r2, #12]
 8010616:	fb02 f303 	mul.w	r3, r2, r3
 801061a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801061c:	18d0      	adds	r0, r2, r3
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010624:	697b      	ldr	r3, [r7, #20]
 8010626:	899b      	ldrh	r3, [r3, #12]
 8010628:	461a      	mov	r2, r3
 801062a:	f7fd ff6b 	bl	800e504 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	899b      	ldrh	r3, [r3, #12]
 8010632:	461a      	mov	r2, r3
 8010634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010636:	fb02 f303 	mul.w	r3, r2, r3
 801063a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801063c:	e05c      	b.n	80106f8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6a1b      	ldr	r3, [r3, #32]
 8010642:	69ba      	ldr	r2, [r7, #24]
 8010644:	429a      	cmp	r2, r3
 8010646:	d02e      	beq.n	80106a6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	7d1b      	ldrb	r3, [r3, #20]
 801064c:	b25b      	sxtb	r3, r3
 801064e:	2b00      	cmp	r3, #0
 8010650:	da18      	bge.n	8010684 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	7858      	ldrb	r0, [r3, #1]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	6a1a      	ldr	r2, [r3, #32]
 8010660:	2301      	movs	r3, #1
 8010662:	f7fd fe8f 	bl	800e384 <disk_write>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d004      	beq.n	8010676 <f_read+0x202>
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2201      	movs	r2, #1
 8010670:	755a      	strb	r2, [r3, #21]
 8010672:	2301      	movs	r3, #1
 8010674:	e059      	b.n	801072a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	7d1b      	ldrb	r3, [r3, #20]
 801067a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801067e:	b2da      	uxtb	r2, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	7858      	ldrb	r0, [r3, #1]
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801068e:	2301      	movs	r3, #1
 8010690:	69ba      	ldr	r2, [r7, #24]
 8010692:	f7fd fe57 	bl	800e344 <disk_read>
 8010696:	4603      	mov	r3, r0
 8010698:	2b00      	cmp	r3, #0
 801069a:	d004      	beq.n	80106a6 <f_read+0x232>
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	2201      	movs	r2, #1
 80106a0:	755a      	strb	r2, [r3, #21]
 80106a2:	2301      	movs	r3, #1
 80106a4:	e041      	b.n	801072a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	69ba      	ldr	r2, [r7, #24]
 80106aa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80106ac:	697b      	ldr	r3, [r7, #20]
 80106ae:	899b      	ldrh	r3, [r3, #12]
 80106b0:	4618      	mov	r0, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	699b      	ldr	r3, [r3, #24]
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	8992      	ldrh	r2, [r2, #12]
 80106ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80106be:	fb02 f201 	mul.w	r2, r2, r1
 80106c2:	1a9b      	subs	r3, r3, r2
 80106c4:	1ac3      	subs	r3, r0, r3
 80106c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80106c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	429a      	cmp	r2, r3
 80106ce:	d901      	bls.n	80106d4 <f_read+0x260>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	699b      	ldr	r3, [r3, #24]
 80106de:	697a      	ldr	r2, [r7, #20]
 80106e0:	8992      	ldrh	r2, [r2, #12]
 80106e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80106e6:	fb02 f200 	mul.w	r2, r2, r0
 80106ea:	1a9b      	subs	r3, r3, r2
 80106ec:	440b      	add	r3, r1
 80106ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106f0:	4619      	mov	r1, r3
 80106f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106f4:	f7fd ff06 	bl	800e504 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80106f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106fc:	4413      	add	r3, r2
 80106fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	699a      	ldr	r2, [r3, #24]
 8010704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010706:	441a      	add	r2, r3
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	619a      	str	r2, [r3, #24]
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	681a      	ldr	r2, [r3, #0]
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	441a      	add	r2, r3
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	601a      	str	r2, [r3, #0]
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2b00      	cmp	r3, #0
 8010724:	f47f aee1 	bne.w	80104ea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3738      	adds	r7, #56	; 0x38
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b08c      	sub	sp, #48	; 0x30
 8010736:	af00      	add	r7, sp, #0
 8010738:	60f8      	str	r0, [r7, #12]
 801073a:	60b9      	str	r1, [r7, #8]
 801073c:	607a      	str	r2, [r7, #4]
 801073e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010744:	683b      	ldr	r3, [r7, #0]
 8010746:	2200      	movs	r2, #0
 8010748:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f107 0210 	add.w	r2, r7, #16
 8010750:	4611      	mov	r1, r2
 8010752:	4618      	mov	r0, r3
 8010754:	f7ff fc44 	bl	800ffe0 <validate>
 8010758:	4603      	mov	r3, r0
 801075a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801075e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010762:	2b00      	cmp	r3, #0
 8010764:	d107      	bne.n	8010776 <f_write+0x44>
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	7d5b      	ldrb	r3, [r3, #21]
 801076a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801076e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010772:	2b00      	cmp	r3, #0
 8010774:	d002      	beq.n	801077c <f_write+0x4a>
 8010776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801077a:	e16a      	b.n	8010a52 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	7d1b      	ldrb	r3, [r3, #20]
 8010780:	f003 0302 	and.w	r3, r3, #2
 8010784:	2b00      	cmp	r3, #0
 8010786:	d101      	bne.n	801078c <f_write+0x5a>
 8010788:	2307      	movs	r3, #7
 801078a:	e162      	b.n	8010a52 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	699a      	ldr	r2, [r3, #24]
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	441a      	add	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	699b      	ldr	r3, [r3, #24]
 8010798:	429a      	cmp	r2, r3
 801079a:	f080 814c 	bcs.w	8010a36 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	43db      	mvns	r3, r3
 80107a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80107a6:	e146      	b.n	8010a36 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	699b      	ldr	r3, [r3, #24]
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	8992      	ldrh	r2, [r2, #12]
 80107b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80107b4:	fb02 f201 	mul.w	r2, r2, r1
 80107b8:	1a9b      	subs	r3, r3, r2
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f040 80f1 	bne.w	80109a2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	699b      	ldr	r3, [r3, #24]
 80107c4:	693a      	ldr	r2, [r7, #16]
 80107c6:	8992      	ldrh	r2, [r2, #12]
 80107c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80107cc:	693a      	ldr	r2, [r7, #16]
 80107ce:	8952      	ldrh	r2, [r2, #10]
 80107d0:	3a01      	subs	r2, #1
 80107d2:	4013      	ands	r3, r2
 80107d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d143      	bne.n	8010864 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	699b      	ldr	r3, [r3, #24]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d10c      	bne.n	80107fe <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	689b      	ldr	r3, [r3, #8]
 80107e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80107ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d11a      	bne.n	8010826 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	2100      	movs	r1, #0
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7fe fbbc 	bl	800ef72 <create_chain>
 80107fa:	62b8      	str	r0, [r7, #40]	; 0x28
 80107fc:	e013      	b.n	8010826 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010802:	2b00      	cmp	r3, #0
 8010804:	d007      	beq.n	8010816 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	699b      	ldr	r3, [r3, #24]
 801080a:	4619      	mov	r1, r3
 801080c:	68f8      	ldr	r0, [r7, #12]
 801080e:	f7fe fc48 	bl	800f0a2 <clmt_clust>
 8010812:	62b8      	str	r0, [r7, #40]	; 0x28
 8010814:	e007      	b.n	8010826 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010816:	68fa      	ldr	r2, [r7, #12]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	69db      	ldr	r3, [r3, #28]
 801081c:	4619      	mov	r1, r3
 801081e:	4610      	mov	r0, r2
 8010820:	f7fe fba7 	bl	800ef72 <create_chain>
 8010824:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010828:	2b00      	cmp	r3, #0
 801082a:	f000 8109 	beq.w	8010a40 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801082e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010830:	2b01      	cmp	r3, #1
 8010832:	d104      	bne.n	801083e <f_write+0x10c>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2202      	movs	r2, #2
 8010838:	755a      	strb	r2, [r3, #21]
 801083a:	2302      	movs	r3, #2
 801083c:	e109      	b.n	8010a52 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010844:	d104      	bne.n	8010850 <f_write+0x11e>
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	2201      	movs	r2, #1
 801084a:	755a      	strb	r2, [r3, #21]
 801084c:	2301      	movs	r3, #1
 801084e:	e100      	b.n	8010a52 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010854:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	689b      	ldr	r3, [r3, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d102      	bne.n	8010864 <f_write+0x132>
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010862:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	7d1b      	ldrb	r3, [r3, #20]
 8010868:	b25b      	sxtb	r3, r3
 801086a:	2b00      	cmp	r3, #0
 801086c:	da18      	bge.n	80108a0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801086e:	693b      	ldr	r3, [r7, #16]
 8010870:	7858      	ldrb	r0, [r3, #1]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	6a1a      	ldr	r2, [r3, #32]
 801087c:	2301      	movs	r3, #1
 801087e:	f7fd fd81 	bl	800e384 <disk_write>
 8010882:	4603      	mov	r3, r0
 8010884:	2b00      	cmp	r3, #0
 8010886:	d004      	beq.n	8010892 <f_write+0x160>
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2201      	movs	r2, #1
 801088c:	755a      	strb	r2, [r3, #21]
 801088e:	2301      	movs	r3, #1
 8010890:	e0df      	b.n	8010a52 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	7d1b      	ldrb	r3, [r3, #20]
 8010896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801089a:	b2da      	uxtb	r2, r3
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80108a0:	693a      	ldr	r2, [r7, #16]
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	69db      	ldr	r3, [r3, #28]
 80108a6:	4619      	mov	r1, r3
 80108a8:	4610      	mov	r0, r2
 80108aa:	f7fe f8f7 	bl	800ea9c <clust2sect>
 80108ae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d104      	bne.n	80108c0 <f_write+0x18e>
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2202      	movs	r2, #2
 80108ba:	755a      	strb	r2, [r3, #21]
 80108bc:	2302      	movs	r3, #2
 80108be:	e0c8      	b.n	8010a52 <f_write+0x320>
			sect += csect;
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	69bb      	ldr	r3, [r7, #24]
 80108c4:	4413      	add	r3, r2
 80108c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	899b      	ldrh	r3, [r3, #12]
 80108cc:	461a      	mov	r2, r3
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80108d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80108d6:	6a3b      	ldr	r3, [r7, #32]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d043      	beq.n	8010964 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80108dc:	69ba      	ldr	r2, [r7, #24]
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	4413      	add	r3, r2
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	8952      	ldrh	r2, [r2, #10]
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d905      	bls.n	80108f6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80108ea:	693b      	ldr	r3, [r7, #16]
 80108ec:	895b      	ldrh	r3, [r3, #10]
 80108ee:	461a      	mov	r2, r3
 80108f0:	69bb      	ldr	r3, [r7, #24]
 80108f2:	1ad3      	subs	r3, r2, r3
 80108f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	7858      	ldrb	r0, [r3, #1]
 80108fa:	6a3b      	ldr	r3, [r7, #32]
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	69f9      	ldr	r1, [r7, #28]
 8010900:	f7fd fd40 	bl	800e384 <disk_write>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d004      	beq.n	8010914 <f_write+0x1e2>
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	2201      	movs	r2, #1
 801090e:	755a      	strb	r2, [r3, #21]
 8010910:	2301      	movs	r3, #1
 8010912:	e09e      	b.n	8010a52 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	6a1a      	ldr	r2, [r3, #32]
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	1ad3      	subs	r3, r2, r3
 801091c:	6a3a      	ldr	r2, [r7, #32]
 801091e:	429a      	cmp	r2, r3
 8010920:	d918      	bls.n	8010954 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	6a1a      	ldr	r2, [r3, #32]
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	693a      	ldr	r2, [r7, #16]
 8010932:	8992      	ldrh	r2, [r2, #12]
 8010934:	fb02 f303 	mul.w	r3, r2, r3
 8010938:	69fa      	ldr	r2, [r7, #28]
 801093a:	18d1      	adds	r1, r2, r3
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	899b      	ldrh	r3, [r3, #12]
 8010940:	461a      	mov	r2, r3
 8010942:	f7fd fddf 	bl	800e504 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	7d1b      	ldrb	r3, [r3, #20]
 801094a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801094e:	b2da      	uxtb	r2, r3
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	899b      	ldrh	r3, [r3, #12]
 8010958:	461a      	mov	r2, r3
 801095a:	6a3b      	ldr	r3, [r7, #32]
 801095c:	fb02 f303 	mul.w	r3, r2, r3
 8010960:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010962:	e04b      	b.n	80109fc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	6a1b      	ldr	r3, [r3, #32]
 8010968:	697a      	ldr	r2, [r7, #20]
 801096a:	429a      	cmp	r2, r3
 801096c:	d016      	beq.n	801099c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	699a      	ldr	r2, [r3, #24]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010976:	429a      	cmp	r2, r3
 8010978:	d210      	bcs.n	801099c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801097a:	693b      	ldr	r3, [r7, #16]
 801097c:	7858      	ldrb	r0, [r3, #1]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010984:	2301      	movs	r3, #1
 8010986:	697a      	ldr	r2, [r7, #20]
 8010988:	f7fd fcdc 	bl	800e344 <disk_read>
 801098c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801098e:	2b00      	cmp	r3, #0
 8010990:	d004      	beq.n	801099c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2201      	movs	r2, #1
 8010996:	755a      	strb	r2, [r3, #21]
 8010998:	2301      	movs	r3, #1
 801099a:	e05a      	b.n	8010a52 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	697a      	ldr	r2, [r7, #20]
 80109a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	899b      	ldrh	r3, [r3, #12]
 80109a6:	4618      	mov	r0, r3
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	699b      	ldr	r3, [r3, #24]
 80109ac:	693a      	ldr	r2, [r7, #16]
 80109ae:	8992      	ldrh	r2, [r2, #12]
 80109b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80109b4:	fb02 f201 	mul.w	r2, r2, r1
 80109b8:	1a9b      	subs	r3, r3, r2
 80109ba:	1ac3      	subs	r3, r0, r3
 80109bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80109be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	429a      	cmp	r2, r3
 80109c4:	d901      	bls.n	80109ca <f_write+0x298>
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	699b      	ldr	r3, [r3, #24]
 80109d4:	693a      	ldr	r2, [r7, #16]
 80109d6:	8992      	ldrh	r2, [r2, #12]
 80109d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80109dc:	fb02 f200 	mul.w	r2, r2, r0
 80109e0:	1a9b      	subs	r3, r3, r2
 80109e2:	440b      	add	r3, r1
 80109e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e6:	69f9      	ldr	r1, [r7, #28]
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fd fd8b 	bl	800e504 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	7d1b      	ldrb	r3, [r3, #20]
 80109f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80109fc:	69fa      	ldr	r2, [r7, #28]
 80109fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a00:	4413      	add	r3, r2
 8010a02:	61fb      	str	r3, [r7, #28]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	699a      	ldr	r2, [r3, #24]
 8010a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a0a:	441a      	add	r2, r3
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	619a      	str	r2, [r3, #24]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	68da      	ldr	r2, [r3, #12]
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	699b      	ldr	r3, [r3, #24]
 8010a18:	429a      	cmp	r2, r3
 8010a1a:	bf38      	it	cc
 8010a1c:	461a      	movcc	r2, r3
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	60da      	str	r2, [r3, #12]
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	441a      	add	r2, r3
 8010a2a:	683b      	ldr	r3, [r7, #0]
 8010a2c:	601a      	str	r2, [r3, #0]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a32:	1ad3      	subs	r3, r2, r3
 8010a34:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f47f aeb5 	bne.w	80107a8 <f_write+0x76>
 8010a3e:	e000      	b.n	8010a42 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010a40:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	7d1b      	ldrb	r3, [r3, #20]
 8010a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010a50:	2300      	movs	r3, #0
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	3730      	adds	r7, #48	; 0x30
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd80      	pop	{r7, pc}
	...

08010a5c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f107 0208 	add.w	r2, r7, #8
 8010a6a:	4611      	mov	r1, r2
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f7ff fab7 	bl	800ffe0 <validate>
 8010a72:	4603      	mov	r3, r0
 8010a74:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d167      	bne.n	8010b4c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	7d1b      	ldrb	r3, [r3, #20]
 8010a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d061      	beq.n	8010b4c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	7d1b      	ldrb	r3, [r3, #20]
 8010a8c:	b25b      	sxtb	r3, r3
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	da15      	bge.n	8010abe <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	7858      	ldrb	r0, [r3, #1]
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6a1a      	ldr	r2, [r3, #32]
 8010aa0:	2301      	movs	r3, #1
 8010aa2:	f7fd fc6f 	bl	800e384 <disk_write>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <f_sync+0x54>
 8010aac:	2301      	movs	r3, #1
 8010aae:	e04e      	b.n	8010b4e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	7d1b      	ldrb	r3, [r3, #20]
 8010ab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010abe:	4b26      	ldr	r3, [pc, #152]	; (8010b58 <f_sync+0xfc>)
 8010ac0:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010ac2:	68ba      	ldr	r2, [r7, #8]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ac8:	4619      	mov	r1, r3
 8010aca:	4610      	mov	r0, r2
 8010acc:	f7fd ff48 	bl	800e960 <move_window>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010ad4:	7dfb      	ldrb	r3, [r7, #23]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d138      	bne.n	8010b4c <f_sync+0xf0>
					dir = fp->dir_ptr;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ade:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	330b      	adds	r3, #11
 8010ae4:	781a      	ldrb	r2, [r3, #0]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	330b      	adds	r3, #11
 8010aea:	f042 0220 	orr.w	r2, r2, #32
 8010aee:	b2d2      	uxtb	r2, r2
 8010af0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6818      	ldr	r0, [r3, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	461a      	mov	r2, r3
 8010afc:	68f9      	ldr	r1, [r7, #12]
 8010afe:	f7fe fccd 	bl	800f49c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	f103 021c 	add.w	r2, r3, #28
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	68db      	ldr	r3, [r3, #12]
 8010b0c:	4619      	mov	r1, r3
 8010b0e:	4610      	mov	r0, r2
 8010b10:	f7fd fccc 	bl	800e4ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3316      	adds	r3, #22
 8010b18:	6939      	ldr	r1, [r7, #16]
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fd fcc6 	bl	800e4ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	3312      	adds	r3, #18
 8010b24:	2100      	movs	r1, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fd fca5 	bl	800e476 <st_word>
					fs->wflag = 1;
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f7fd ff41 	bl	800e9bc <sync_fs>
 8010b3a:	4603      	mov	r3, r0
 8010b3c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	7d1b      	ldrb	r3, [r3, #20]
 8010b42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3718      	adds	r7, #24
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	274a0000 	.word	0x274a0000

08010b5c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f7ff ff79 	bl	8010a5c <f_sync>
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010b6e:	7bfb      	ldrb	r3, [r7, #15]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d118      	bne.n	8010ba6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	f107 0208 	add.w	r2, r7, #8
 8010b7a:	4611      	mov	r1, r2
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7ff fa2f 	bl	800ffe0 <validate>
 8010b82:	4603      	mov	r3, r0
 8010b84:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b86:	7bfb      	ldrb	r3, [r7, #15]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10c      	bne.n	8010ba6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	691b      	ldr	r3, [r3, #16]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fd fe41 	bl	800e818 <dec_lock>
 8010b96:	4603      	mov	r3, r0
 8010b98:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b9a:	7bfb      	ldrb	r3, [r7, #15]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d102      	bne.n	8010ba6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3710      	adds	r7, #16
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010bb0:	b590      	push	{r4, r7, lr}
 8010bb2:	b091      	sub	sp, #68	; 0x44
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010bb8:	f107 0108 	add.w	r1, r7, #8
 8010bbc:	1d3b      	adds	r3, r7, #4
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fe ff87 	bl	800fad4 <find_volume>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010bcc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d131      	bne.n	8010c38 <f_chdir+0x88>
		dj.obj.fs = fs;
 8010bd4:	68bb      	ldr	r3, [r7, #8]
 8010bd6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010bd8:	687a      	ldr	r2, [r7, #4]
 8010bda:	f107 030c 	add.w	r3, r7, #12
 8010bde:	4611      	mov	r1, r2
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fe fe47 	bl	800f874 <follow_path>
 8010be6:	4603      	mov	r3, r0
 8010be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8010bec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d11a      	bne.n	8010c2a <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010bf8:	b25b      	sxtb	r3, r3
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	da03      	bge.n	8010c06 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	697a      	ldr	r2, [r7, #20]
 8010c02:	619a      	str	r2, [r3, #24]
 8010c04:	e011      	b.n	8010c2a <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010c06:	7cbb      	ldrb	r3, [r7, #18]
 8010c08:	f003 0310 	and.w	r3, r3, #16
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d009      	beq.n	8010c24 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010c14:	68bc      	ldr	r4, [r7, #8]
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fe fc20 	bl	800f45e <ld_clust>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	61a3      	str	r3, [r4, #24]
 8010c22:	e002      	b.n	8010c2a <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010c24:	2305      	movs	r3, #5
 8010c26:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010c2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c2e:	2b04      	cmp	r3, #4
 8010c30:	d102      	bne.n	8010c38 <f_chdir+0x88>
 8010c32:	2305      	movs	r3, #5
 8010c34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8010c38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3744      	adds	r7, #68	; 0x44
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd90      	pop	{r4, r7, pc}

08010c44 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b090      	sub	sp, #64	; 0x40
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f107 0208 	add.w	r2, r7, #8
 8010c54:	4611      	mov	r1, r2
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7ff f9c2 	bl	800ffe0 <validate>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010c62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d103      	bne.n	8010c72 <f_lseek+0x2e>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	7d5b      	ldrb	r3, [r3, #21]
 8010c6e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010c72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d002      	beq.n	8010c80 <f_lseek+0x3c>
 8010c7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c7e:	e201      	b.n	8011084 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	f000 80d9 	beq.w	8010e3c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c90:	d15a      	bne.n	8010d48 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c96:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9a:	1d1a      	adds	r2, r3, #4
 8010c9c:	627a      	str	r2, [r7, #36]	; 0x24
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	617b      	str	r3, [r7, #20]
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d03a      	beq.n	8010d28 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	613b      	str	r3, [r7, #16]
 8010cb6:	2300      	movs	r3, #0
 8010cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc2:	60fb      	str	r3, [r7, #12]
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010cce:	4618      	mov	r0, r3
 8010cd0:	f7fd ff03 	bl	800eada <get_fat>
 8010cd4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d804      	bhi.n	8010ce6 <f_lseek+0xa2>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2202      	movs	r2, #2
 8010ce0:	755a      	strb	r2, [r3, #21]
 8010ce2:	2302      	movs	r3, #2
 8010ce4:	e1ce      	b.n	8011084 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cec:	d104      	bne.n	8010cf8 <f_lseek+0xb4>
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	2201      	movs	r2, #1
 8010cf2:	755a      	strb	r2, [r3, #21]
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e1c5      	b.n	8011084 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cfe:	429a      	cmp	r2, r3
 8010d00:	d0de      	beq.n	8010cc0 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d809      	bhi.n	8010d1e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d0c:	1d1a      	adds	r2, r3, #4
 8010d0e:	627a      	str	r2, [r7, #36]	; 0x24
 8010d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d12:	601a      	str	r2, [r3, #0]
 8010d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d16:	1d1a      	adds	r2, r3, #4
 8010d18:	627a      	str	r2, [r7, #36]	; 0x24
 8010d1a:	693a      	ldr	r2, [r7, #16]
 8010d1c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	69db      	ldr	r3, [r3, #28]
 8010d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d3c4      	bcc.n	8010cb2 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d2e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d32:	697b      	ldr	r3, [r7, #20]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d803      	bhi.n	8010d40 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	e19f      	b.n	8011080 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010d40:	2311      	movs	r3, #17
 8010d42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d46:	e19b      	b.n	8011080 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	68db      	ldr	r3, [r3, #12]
 8010d4c:	683a      	ldr	r2, [r7, #0]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d902      	bls.n	8010d58 <f_lseek+0x114>
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	683a      	ldr	r2, [r7, #0]
 8010d5c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	f000 818d 	beq.w	8011080 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	3b01      	subs	r3, #1
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	6878      	ldr	r0, [r7, #4]
 8010d6e:	f7fe f998 	bl	800f0a2 <clmt_clust>
 8010d72:	4602      	mov	r2, r0
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010d78:	68ba      	ldr	r2, [r7, #8]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	69db      	ldr	r3, [r3, #28]
 8010d7e:	4619      	mov	r1, r3
 8010d80:	4610      	mov	r0, r2
 8010d82:	f7fd fe8b 	bl	800ea9c <clust2sect>
 8010d86:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d104      	bne.n	8010d98 <f_lseek+0x154>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	2202      	movs	r2, #2
 8010d92:	755a      	strb	r2, [r3, #21]
 8010d94:	2302      	movs	r3, #2
 8010d96:	e175      	b.n	8011084 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	3b01      	subs	r3, #1
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	8992      	ldrh	r2, [r2, #12]
 8010da0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010da4:	68ba      	ldr	r2, [r7, #8]
 8010da6:	8952      	ldrh	r2, [r2, #10]
 8010da8:	3a01      	subs	r2, #1
 8010daa:	4013      	ands	r3, r2
 8010dac:	69ba      	ldr	r2, [r7, #24]
 8010dae:	4413      	add	r3, r2
 8010db0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	699b      	ldr	r3, [r3, #24]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	8992      	ldrh	r2, [r2, #12]
 8010dba:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dbe:	fb02 f201 	mul.w	r2, r2, r1
 8010dc2:	1a9b      	subs	r3, r3, r2
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 815b 	beq.w	8011080 <f_lseek+0x43c>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6a1b      	ldr	r3, [r3, #32]
 8010dce:	69ba      	ldr	r2, [r7, #24]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	f000 8155 	beq.w	8011080 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	7d1b      	ldrb	r3, [r3, #20]
 8010dda:	b25b      	sxtb	r3, r3
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	da18      	bge.n	8010e12 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	7858      	ldrb	r0, [r3, #1]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a1a      	ldr	r2, [r3, #32]
 8010dee:	2301      	movs	r3, #1
 8010df0:	f7fd fac8 	bl	800e384 <disk_write>
 8010df4:	4603      	mov	r3, r0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d004      	beq.n	8010e04 <f_lseek+0x1c0>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	755a      	strb	r2, [r3, #21]
 8010e00:	2301      	movs	r3, #1
 8010e02:	e13f      	b.n	8011084 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	7d1b      	ldrb	r3, [r3, #20]
 8010e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e0c:	b2da      	uxtb	r2, r3
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	7858      	ldrb	r0, [r3, #1]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	69ba      	ldr	r2, [r7, #24]
 8010e20:	f7fd fa90 	bl	800e344 <disk_read>
 8010e24:	4603      	mov	r3, r0
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d004      	beq.n	8010e34 <f_lseek+0x1f0>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	755a      	strb	r2, [r3, #21]
 8010e30:	2301      	movs	r3, #1
 8010e32:	e127      	b.n	8011084 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	69ba      	ldr	r2, [r7, #24]
 8010e38:	621a      	str	r2, [r3, #32]
 8010e3a:	e121      	b.n	8011080 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	68db      	ldr	r3, [r3, #12]
 8010e40:	683a      	ldr	r2, [r7, #0]
 8010e42:	429a      	cmp	r2, r3
 8010e44:	d908      	bls.n	8010e58 <f_lseek+0x214>
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7d1b      	ldrb	r3, [r3, #20]
 8010e4a:	f003 0302 	and.w	r3, r3, #2
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d102      	bne.n	8010e58 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	68db      	ldr	r3, [r3, #12]
 8010e56:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	699b      	ldr	r3, [r3, #24]
 8010e5c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	637b      	str	r3, [r7, #52]	; 0x34
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e66:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010e68:	683b      	ldr	r3, [r7, #0]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f000 80b5 	beq.w	8010fda <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	895b      	ldrh	r3, [r3, #10]
 8010e74:	461a      	mov	r2, r3
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	899b      	ldrh	r3, [r3, #12]
 8010e7a:	fb03 f302 	mul.w	r3, r3, r2
 8010e7e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010e80:	6a3b      	ldr	r3, [r7, #32]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d01b      	beq.n	8010ebe <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	1e5a      	subs	r2, r3, #1
 8010e8a:	69fb      	ldr	r3, [r7, #28]
 8010e8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	1e59      	subs	r1, r3, #1
 8010e94:	69fb      	ldr	r3, [r7, #28]
 8010e96:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	d30f      	bcc.n	8010ebe <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	1e5a      	subs	r2, r3, #1
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	425b      	negs	r3, r3
 8010ea6:	401a      	ands	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	699b      	ldr	r3, [r3, #24]
 8010eb0:	683a      	ldr	r2, [r7, #0]
 8010eb2:	1ad3      	subs	r3, r2, r3
 8010eb4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ebc:	e022      	b.n	8010f04 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	689b      	ldr	r3, [r3, #8]
 8010ec2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8010ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d119      	bne.n	8010efe <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	2100      	movs	r1, #0
 8010ece:	4618      	mov	r0, r3
 8010ed0:	f7fe f84f 	bl	800ef72 <create_chain>
 8010ed4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d104      	bne.n	8010ee6 <f_lseek+0x2a2>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	2202      	movs	r2, #2
 8010ee0:	755a      	strb	r2, [r3, #21]
 8010ee2:	2302      	movs	r3, #2
 8010ee4:	e0ce      	b.n	8011084 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eec:	d104      	bne.n	8010ef8 <f_lseek+0x2b4>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	2201      	movs	r2, #1
 8010ef2:	755a      	strb	r2, [r3, #21]
 8010ef4:	2301      	movs	r3, #1
 8010ef6:	e0c5      	b.n	8011084 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010efc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f02:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8010f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d067      	beq.n	8010fda <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010f0a:	e03a      	b.n	8010f82 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010f0c:	683a      	ldr	r2, [r7, #0]
 8010f0e:	69fb      	ldr	r3, [r7, #28]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	603b      	str	r3, [r7, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	699a      	ldr	r2, [r3, #24]
 8010f18:	69fb      	ldr	r3, [r7, #28]
 8010f1a:	441a      	add	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7d1b      	ldrb	r3, [r3, #20]
 8010f24:	f003 0302 	and.w	r3, r3, #2
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00b      	beq.n	8010f44 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fe f81e 	bl	800ef72 <create_chain>
 8010f36:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8010f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d108      	bne.n	8010f50 <f_lseek+0x30c>
							ofs = 0; break;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	603b      	str	r3, [r7, #0]
 8010f42:	e022      	b.n	8010f8a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fd fdc6 	bl	800eada <get_fat>
 8010f4e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f56:	d104      	bne.n	8010f62 <f_lseek+0x31e>
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	755a      	strb	r2, [r3, #21]
 8010f5e:	2301      	movs	r3, #1
 8010f60:	e090      	b.n	8011084 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f64:	2b01      	cmp	r3, #1
 8010f66:	d904      	bls.n	8010f72 <f_lseek+0x32e>
 8010f68:	68bb      	ldr	r3, [r7, #8]
 8010f6a:	69db      	ldr	r3, [r3, #28]
 8010f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d304      	bcc.n	8010f7c <f_lseek+0x338>
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2202      	movs	r2, #2
 8010f76:	755a      	strb	r2, [r3, #21]
 8010f78:	2302      	movs	r3, #2
 8010f7a:	e083      	b.n	8011084 <f_lseek+0x440>
					fp->clust = clst;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f80:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010f82:	683a      	ldr	r2, [r7, #0]
 8010f84:	69fb      	ldr	r3, [r7, #28]
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d8c0      	bhi.n	8010f0c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	699a      	ldr	r2, [r3, #24]
 8010f8e:	683b      	ldr	r3, [r7, #0]
 8010f90:	441a      	add	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	899b      	ldrh	r3, [r3, #12]
 8010f9a:	461a      	mov	r2, r3
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010fa2:	fb02 f201 	mul.w	r2, r2, r1
 8010fa6:	1a9b      	subs	r3, r3, r2
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d016      	beq.n	8010fda <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fd fd73 	bl	800ea9c <clust2sect>
 8010fb6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d104      	bne.n	8010fc8 <f_lseek+0x384>
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	2202      	movs	r2, #2
 8010fc2:	755a      	strb	r2, [r3, #21]
 8010fc4:	2302      	movs	r3, #2
 8010fc6:	e05d      	b.n	8011084 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	899b      	ldrh	r3, [r3, #12]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fd6:	4413      	add	r3, r2
 8010fd8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	699a      	ldr	r2, [r3, #24]
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d90a      	bls.n	8010ffc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	699a      	ldr	r2, [r3, #24]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	7d1b      	ldrb	r3, [r3, #20]
 8010ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	699b      	ldr	r3, [r3, #24]
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	8992      	ldrh	r2, [r2, #12]
 8011004:	fbb3 f1f2 	udiv	r1, r3, r2
 8011008:	fb02 f201 	mul.w	r2, r2, r1
 801100c:	1a9b      	subs	r3, r3, r2
 801100e:	2b00      	cmp	r3, #0
 8011010:	d036      	beq.n	8011080 <f_lseek+0x43c>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	6a1b      	ldr	r3, [r3, #32]
 8011016:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011018:	429a      	cmp	r2, r3
 801101a:	d031      	beq.n	8011080 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	7d1b      	ldrb	r3, [r3, #20]
 8011020:	b25b      	sxtb	r3, r3
 8011022:	2b00      	cmp	r3, #0
 8011024:	da18      	bge.n	8011058 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	7858      	ldrb	r0, [r3, #1]
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	6a1a      	ldr	r2, [r3, #32]
 8011034:	2301      	movs	r3, #1
 8011036:	f7fd f9a5 	bl	800e384 <disk_write>
 801103a:	4603      	mov	r3, r0
 801103c:	2b00      	cmp	r3, #0
 801103e:	d004      	beq.n	801104a <f_lseek+0x406>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2201      	movs	r2, #1
 8011044:	755a      	strb	r2, [r3, #21]
 8011046:	2301      	movs	r3, #1
 8011048:	e01c      	b.n	8011084 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	7d1b      	ldrb	r3, [r3, #20]
 801104e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011052:	b2da      	uxtb	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	7858      	ldrb	r0, [r3, #1]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011062:	2301      	movs	r3, #1
 8011064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011066:	f7fd f96d 	bl	800e344 <disk_read>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d004      	beq.n	801107a <f_lseek+0x436>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2201      	movs	r2, #1
 8011074:	755a      	strb	r2, [r3, #21]
 8011076:	2301      	movs	r3, #1
 8011078:	e004      	b.n	8011084 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801107e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8011080:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011084:	4618      	mov	r0, r3
 8011086:	3740      	adds	r7, #64	; 0x40
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b09e      	sub	sp, #120	; 0x78
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011094:	2300      	movs	r3, #0
 8011096:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011098:	f107 010c 	add.w	r1, r7, #12
 801109c:	1d3b      	adds	r3, r7, #4
 801109e:	2202      	movs	r2, #2
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7fe fd17 	bl	800fad4 <find_volume>
 80110a6:	4603      	mov	r3, r0
 80110a8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80110b0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	f040 80a4 	bne.w	8011202 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80110ba:	687a      	ldr	r2, [r7, #4]
 80110bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110c0:	4611      	mov	r1, r2
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe fbd6 	bl	800f874 <follow_path>
 80110c8:	4603      	mov	r3, r0
 80110ca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80110ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d108      	bne.n	80110e8 <f_unlink+0x5c>
 80110d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80110da:	f003 0320 	and.w	r3, r3, #32
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d002      	beq.n	80110e8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80110e2:	2306      	movs	r3, #6
 80110e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80110e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d108      	bne.n	8011102 <f_unlink+0x76>
 80110f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80110f4:	2102      	movs	r1, #2
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7fd fa82 	bl	800e600 <chk_lock>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011102:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011106:	2b00      	cmp	r3, #0
 8011108:	d17b      	bne.n	8011202 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801110a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801110e:	b25b      	sxtb	r3, r3
 8011110:	2b00      	cmp	r3, #0
 8011112:	da03      	bge.n	801111c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011114:	2306      	movs	r3, #6
 8011116:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801111a:	e008      	b.n	801112e <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801111c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011120:	f003 0301 	and.w	r3, r3, #1
 8011124:	2b00      	cmp	r3, #0
 8011126:	d002      	beq.n	801112e <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8011128:	2307      	movs	r3, #7
 801112a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 801112e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011132:	2b00      	cmp	r3, #0
 8011134:	d13d      	bne.n	80111b2 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801113a:	4611      	mov	r1, r2
 801113c:	4618      	mov	r0, r3
 801113e:	f7fe f98e 	bl	800f45e <ld_clust>
 8011142:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8011144:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8011148:	f003 0310 	and.w	r3, r3, #16
 801114c:	2b00      	cmp	r3, #0
 801114e:	d030      	beq.n	80111b2 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	699b      	ldr	r3, [r3, #24]
 8011154:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011156:	429a      	cmp	r2, r3
 8011158:	d103      	bne.n	8011162 <f_unlink+0xd6>
						res = FR_DENIED;
 801115a:	2307      	movs	r3, #7
 801115c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8011160:	e027      	b.n	80111b2 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011166:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011168:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801116a:	f107 0310 	add.w	r3, r7, #16
 801116e:	2100      	movs	r1, #0
 8011170:	4618      	mov	r0, r3
 8011172:	f7fd ffce 	bl	800f112 <dir_sdi>
 8011176:	4603      	mov	r3, r0
 8011178:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801117c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8011180:	2b00      	cmp	r3, #0
 8011182:	d116      	bne.n	80111b2 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011184:	f107 0310 	add.w	r3, r7, #16
 8011188:	2100      	movs	r1, #0
 801118a:	4618      	mov	r0, r3
 801118c:	f7fe f9a6 	bl	800f4dc <dir_read>
 8011190:	4603      	mov	r3, r0
 8011192:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011196:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801119a:	2b00      	cmp	r3, #0
 801119c:	d102      	bne.n	80111a4 <f_unlink+0x118>
 801119e:	2307      	movs	r3, #7
 80111a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80111a4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111a8:	2b04      	cmp	r3, #4
 80111aa:	d102      	bne.n	80111b2 <f_unlink+0x126>
 80111ac:	2300      	movs	r3, #0
 80111ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80111b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d123      	bne.n	8011202 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80111ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111be:	4618      	mov	r0, r3
 80111c0:	f7fe fa70 	bl	800f6a4 <dir_remove>
 80111c4:	4603      	mov	r3, r0
 80111c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80111ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d10c      	bne.n	80111ec <f_unlink+0x160>
 80111d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d009      	beq.n	80111ec <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80111d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80111dc:	2200      	movs	r2, #0
 80111de:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80111e0:	4618      	mov	r0, r3
 80111e2:	f7fd fe61 	bl	800eea8 <remove_chain>
 80111e6:	4603      	mov	r3, r0
 80111e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80111ec:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d106      	bne.n	8011202 <f_unlink+0x176>
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7fd fbe0 	bl	800e9bc <sync_fs>
 80111fc:	4603      	mov	r3, r0
 80111fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011202:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8011206:	4618      	mov	r0, r3
 8011208:	3778      	adds	r7, #120	; 0x78
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
	...

08011210 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b096      	sub	sp, #88	; 0x58
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011218:	f107 0108 	add.w	r1, r7, #8
 801121c:	1d3b      	adds	r3, r7, #4
 801121e:	2202      	movs	r2, #2
 8011220:	4618      	mov	r0, r3
 8011222:	f7fe fc57 	bl	800fad4 <find_volume>
 8011226:	4603      	mov	r3, r0
 8011228:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8011230:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011234:	2b00      	cmp	r3, #0
 8011236:	f040 80fe 	bne.w	8011436 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	f107 030c 	add.w	r3, r7, #12
 8011240:	4611      	mov	r1, r2
 8011242:	4618      	mov	r0, r3
 8011244:	f7fe fb16 	bl	800f874 <follow_path>
 8011248:	4603      	mov	r3, r0
 801124a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801124e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011252:	2b00      	cmp	r3, #0
 8011254:	d102      	bne.n	801125c <f_mkdir+0x4c>
 8011256:	2308      	movs	r3, #8
 8011258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 801125c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011260:	2b04      	cmp	r3, #4
 8011262:	d108      	bne.n	8011276 <f_mkdir+0x66>
 8011264:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011268:	f003 0320 	and.w	r3, r3, #32
 801126c:	2b00      	cmp	r3, #0
 801126e:	d002      	beq.n	8011276 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8011270:	2306      	movs	r3, #6
 8011272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011276:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801127a:	2b04      	cmp	r3, #4
 801127c:	f040 80db 	bne.w	8011436 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011280:	f107 030c 	add.w	r3, r7, #12
 8011284:	2100      	movs	r1, #0
 8011286:	4618      	mov	r0, r3
 8011288:	f7fd fe73 	bl	800ef72 <create_chain>
 801128c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	895b      	ldrh	r3, [r3, #10]
 8011292:	461a      	mov	r2, r3
 8011294:	68bb      	ldr	r3, [r7, #8]
 8011296:	899b      	ldrh	r3, [r3, #12]
 8011298:	fb03 f302 	mul.w	r3, r3, r2
 801129c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801129e:	2300      	movs	r3, #0
 80112a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80112a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d102      	bne.n	80112b0 <f_mkdir+0xa0>
 80112aa:	2307      	movs	r3, #7
 80112ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80112b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112b2:	2b01      	cmp	r3, #1
 80112b4:	d102      	bne.n	80112bc <f_mkdir+0xac>
 80112b6:	2302      	movs	r3, #2
 80112b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80112bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112c2:	d102      	bne.n	80112ca <f_mkdir+0xba>
 80112c4:	2301      	movs	r3, #1
 80112c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80112ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d106      	bne.n	80112e0 <f_mkdir+0xd0>
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	4618      	mov	r0, r3
 80112d6:	f7fd faff 	bl	800e8d8 <sync_window>
 80112da:	4603      	mov	r3, r0
 80112dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80112e0:	4b58      	ldr	r3, [pc, #352]	; (8011444 <f_mkdir+0x234>)
 80112e2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80112e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d16c      	bne.n	80113c6 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80112f0:	4618      	mov	r0, r3
 80112f2:	f7fd fbd3 	bl	800ea9c <clust2sect>
 80112f6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	3338      	adds	r3, #56	; 0x38
 80112fc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	899b      	ldrh	r3, [r3, #12]
 8011302:	461a      	mov	r2, r3
 8011304:	2100      	movs	r1, #0
 8011306:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011308:	f7fd f91d 	bl	800e546 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801130c:	220b      	movs	r2, #11
 801130e:	2120      	movs	r1, #32
 8011310:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011312:	f7fd f918 	bl	800e546 <mem_set>
					dir[DIR_Name] = '.';
 8011316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011318:	222e      	movs	r2, #46	; 0x2e
 801131a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801131c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801131e:	330b      	adds	r3, #11
 8011320:	2210      	movs	r2, #16
 8011322:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011326:	3316      	adds	r3, #22
 8011328:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801132a:	4618      	mov	r0, r3
 801132c:	f7fd f8be 	bl	800e4ac <st_dword>
					st_clust(fs, dir, dcl);
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011336:	4618      	mov	r0, r3
 8011338:	f7fe f8b0 	bl	800f49c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801133c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133e:	3320      	adds	r3, #32
 8011340:	2220      	movs	r2, #32
 8011342:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011344:	4618      	mov	r0, r3
 8011346:	f7fd f8dd 	bl	800e504 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801134a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801134c:	3321      	adds	r3, #33	; 0x21
 801134e:	222e      	movs	r2, #46	; 0x2e
 8011350:	701a      	strb	r2, [r3, #0]
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	2b03      	cmp	r3, #3
 801135c:	d106      	bne.n	801136c <f_mkdir+0x15c>
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011364:	429a      	cmp	r2, r3
 8011366:	d101      	bne.n	801136c <f_mkdir+0x15c>
 8011368:	2300      	movs	r3, #0
 801136a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801136c:	68b8      	ldr	r0, [r7, #8]
 801136e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011370:	3320      	adds	r3, #32
 8011372:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011374:	4619      	mov	r1, r3
 8011376:	f7fe f891 	bl	800f49c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	653b      	str	r3, [r7, #80]	; 0x50
 8011380:	e01c      	b.n	80113bc <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8011382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	64fa      	str	r2, [r7, #76]	; 0x4c
 8011388:	68ba      	ldr	r2, [r7, #8]
 801138a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	2201      	movs	r2, #1
 8011390:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	4618      	mov	r0, r3
 8011396:	f7fd fa9f 	bl	800e8d8 <sync_window>
 801139a:	4603      	mov	r3, r0
 801139c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80113a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10d      	bne.n	80113c4 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	899b      	ldrh	r3, [r3, #12]
 80113ac:	461a      	mov	r2, r3
 80113ae:	2100      	movs	r1, #0
 80113b0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80113b2:	f7fd f8c8 	bl	800e546 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80113b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113b8:	3b01      	subs	r3, #1
 80113ba:	653b      	str	r3, [r7, #80]	; 0x50
 80113bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1df      	bne.n	8011382 <f_mkdir+0x172>
 80113c2:	e000      	b.n	80113c6 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80113c4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80113c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d107      	bne.n	80113de <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80113ce:	f107 030c 	add.w	r3, r7, #12
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fe f934 	bl	800f640 <dir_register>
 80113d8:	4603      	mov	r3, r0
 80113da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80113de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d120      	bne.n	8011428 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80113e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80113ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ec:	3316      	adds	r3, #22
 80113ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80113f0:	4618      	mov	r0, r3
 80113f2:	f7fd f85b 	bl	800e4ac <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7fe f84d 	bl	800f49c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011404:	330b      	adds	r3, #11
 8011406:	2210      	movs	r2, #16
 8011408:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	2201      	movs	r2, #1
 801140e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011410:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011414:	2b00      	cmp	r3, #0
 8011416:	d10e      	bne.n	8011436 <f_mkdir+0x226>
					res = sync_fs(fs);
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	4618      	mov	r0, r3
 801141c:	f7fd face 	bl	800e9bc <sync_fs>
 8011420:	4603      	mov	r3, r0
 8011422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8011426:	e006      	b.n	8011436 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8011428:	f107 030c 	add.w	r3, r7, #12
 801142c:	2200      	movs	r2, #0
 801142e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011430:	4618      	mov	r0, r3
 8011432:	f7fd fd39 	bl	800eea8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011436:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801143a:	4618      	mov	r0, r3
 801143c:	3758      	adds	r7, #88	; 0x58
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}
 8011442:	bf00      	nop
 8011444:	274a0000 	.word	0x274a0000

08011448 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b088      	sub	sp, #32
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	60b9      	str	r1, [r7, #8]
 8011452:	607a      	str	r2, [r7, #4]
	int n = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801145c:	e017      	b.n	801148e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801145e:	f107 0310 	add.w	r3, r7, #16
 8011462:	f107 0114 	add.w	r1, r7, #20
 8011466:	2201      	movs	r2, #1
 8011468:	6878      	ldr	r0, [r7, #4]
 801146a:	f7ff f803 	bl	8010474 <f_read>
		if (rc != 1) break;
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	2b01      	cmp	r3, #1
 8011472:	d112      	bne.n	801149a <f_gets+0x52>
		c = s[0];
 8011474:	7d3b      	ldrb	r3, [r7, #20]
 8011476:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	1c5a      	adds	r2, r3, #1
 801147c:	61ba      	str	r2, [r7, #24]
 801147e:	7dfa      	ldrb	r2, [r7, #23]
 8011480:	701a      	strb	r2, [r3, #0]
		n++;
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	3301      	adds	r3, #1
 8011486:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011488:	7dfb      	ldrb	r3, [r7, #23]
 801148a:	2b0a      	cmp	r3, #10
 801148c:	d007      	beq.n	801149e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	3b01      	subs	r3, #1
 8011492:	69fa      	ldr	r2, [r7, #28]
 8011494:	429a      	cmp	r2, r3
 8011496:	dbe2      	blt.n	801145e <f_gets+0x16>
 8011498:	e002      	b.n	80114a0 <f_gets+0x58>
		if (rc != 1) break;
 801149a:	bf00      	nop
 801149c:	e000      	b.n	80114a0 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801149e:	bf00      	nop
	}
	*p = 0;
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	2200      	movs	r2, #0
 80114a4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d001      	beq.n	80114b0 <f_gets+0x68>
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	e000      	b.n	80114b2 <f_gets+0x6a>
 80114b0:	2300      	movs	r3, #0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3720      	adds	r7, #32
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80114bc:	b480      	push	{r7}
 80114be:	b087      	sub	sp, #28
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	60f8      	str	r0, [r7, #12]
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	4613      	mov	r3, r2
 80114c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80114ca:	2301      	movs	r3, #1
 80114cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80114ce:	2300      	movs	r3, #0
 80114d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80114d2:	4b1f      	ldr	r3, [pc, #124]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114d4:	7a5b      	ldrb	r3, [r3, #9]
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d131      	bne.n	8011540 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80114dc:	4b1c      	ldr	r3, [pc, #112]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114de:	7a5b      	ldrb	r3, [r3, #9]
 80114e0:	b2db      	uxtb	r3, r3
 80114e2:	461a      	mov	r2, r3
 80114e4:	4b1a      	ldr	r3, [pc, #104]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114e6:	2100      	movs	r1, #0
 80114e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80114ea:	4b19      	ldr	r3, [pc, #100]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114ec:	7a5b      	ldrb	r3, [r3, #9]
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	4a17      	ldr	r2, [pc, #92]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	4413      	add	r3, r2
 80114f6:	68fa      	ldr	r2, [r7, #12]
 80114f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80114fa:	4b15      	ldr	r3, [pc, #84]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 80114fc:	7a5b      	ldrb	r3, [r3, #9]
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	461a      	mov	r2, r3
 8011502:	4b13      	ldr	r3, [pc, #76]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 8011504:	4413      	add	r3, r2
 8011506:	79fa      	ldrb	r2, [r7, #7]
 8011508:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801150a:	4b11      	ldr	r3, [pc, #68]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 801150c:	7a5b      	ldrb	r3, [r3, #9]
 801150e:	b2db      	uxtb	r3, r3
 8011510:	1c5a      	adds	r2, r3, #1
 8011512:	b2d1      	uxtb	r1, r2
 8011514:	4a0e      	ldr	r2, [pc, #56]	; (8011550 <FATFS_LinkDriverEx+0x94>)
 8011516:	7251      	strb	r1, [r2, #9]
 8011518:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801151a:	7dbb      	ldrb	r3, [r7, #22]
 801151c:	3330      	adds	r3, #48	; 0x30
 801151e:	b2da      	uxtb	r2, r3
 8011520:	68bb      	ldr	r3, [r7, #8]
 8011522:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011524:	68bb      	ldr	r3, [r7, #8]
 8011526:	3301      	adds	r3, #1
 8011528:	223a      	movs	r2, #58	; 0x3a
 801152a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	3302      	adds	r3, #2
 8011530:	222f      	movs	r2, #47	; 0x2f
 8011532:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	3303      	adds	r3, #3
 8011538:	2200      	movs	r2, #0
 801153a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801153c:	2300      	movs	r3, #0
 801153e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011540:	7dfb      	ldrb	r3, [r7, #23]
}
 8011542:	4618      	mov	r0, r3
 8011544:	371c      	adds	r7, #28
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	2002b104 	.word	0x2002b104

08011554 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801155e:	2200      	movs	r2, #0
 8011560:	6839      	ldr	r1, [r7, #0]
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7ff ffaa 	bl	80114bc <FATFS_LinkDriverEx>
 8011568:	4603      	mov	r3, r0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <__cxa_guard_acquire>:
 8011572:	6803      	ldr	r3, [r0, #0]
 8011574:	07db      	lsls	r3, r3, #31
 8011576:	d406      	bmi.n	8011586 <__cxa_guard_acquire+0x14>
 8011578:	7843      	ldrb	r3, [r0, #1]
 801157a:	b103      	cbz	r3, 801157e <__cxa_guard_acquire+0xc>
 801157c:	deff      	udf	#255	; 0xff
 801157e:	2301      	movs	r3, #1
 8011580:	7043      	strb	r3, [r0, #1]
 8011582:	4618      	mov	r0, r3
 8011584:	4770      	bx	lr
 8011586:	2000      	movs	r0, #0
 8011588:	4770      	bx	lr

0801158a <__cxa_guard_release>:
 801158a:	2301      	movs	r3, #1
 801158c:	6003      	str	r3, [r0, #0]
 801158e:	4770      	bx	lr

08011590 <cos>:
 8011590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011592:	ec51 0b10 	vmov	r0, r1, d0
 8011596:	4a1e      	ldr	r2, [pc, #120]	; (8011610 <cos+0x80>)
 8011598:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801159c:	4293      	cmp	r3, r2
 801159e:	dc06      	bgt.n	80115ae <cos+0x1e>
 80115a0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011608 <cos+0x78>
 80115a4:	f000 fa74 	bl	8011a90 <__kernel_cos>
 80115a8:	ec51 0b10 	vmov	r0, r1, d0
 80115ac:	e007      	b.n	80115be <cos+0x2e>
 80115ae:	4a19      	ldr	r2, [pc, #100]	; (8011614 <cos+0x84>)
 80115b0:	4293      	cmp	r3, r2
 80115b2:	dd09      	ble.n	80115c8 <cos+0x38>
 80115b4:	ee10 2a10 	vmov	r2, s0
 80115b8:	460b      	mov	r3, r1
 80115ba:	f7ee fe7d 	bl	80002b8 <__aeabi_dsub>
 80115be:	ec41 0b10 	vmov	d0, r0, r1
 80115c2:	b005      	add	sp, #20
 80115c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80115c8:	4668      	mov	r0, sp
 80115ca:	f000 f86d 	bl	80116a8 <__ieee754_rem_pio2>
 80115ce:	f000 0003 	and.w	r0, r0, #3
 80115d2:	2801      	cmp	r0, #1
 80115d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80115d8:	ed9d 0b00 	vldr	d0, [sp]
 80115dc:	d007      	beq.n	80115ee <cos+0x5e>
 80115de:	2802      	cmp	r0, #2
 80115e0:	d00e      	beq.n	8011600 <cos+0x70>
 80115e2:	2800      	cmp	r0, #0
 80115e4:	d0de      	beq.n	80115a4 <cos+0x14>
 80115e6:	2001      	movs	r0, #1
 80115e8:	f000 fe5a 	bl	80122a0 <__kernel_sin>
 80115ec:	e7dc      	b.n	80115a8 <cos+0x18>
 80115ee:	f000 fe57 	bl	80122a0 <__kernel_sin>
 80115f2:	ec53 2b10 	vmov	r2, r3, d0
 80115f6:	ee10 0a10 	vmov	r0, s0
 80115fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115fe:	e7de      	b.n	80115be <cos+0x2e>
 8011600:	f000 fa46 	bl	8011a90 <__kernel_cos>
 8011604:	e7f5      	b.n	80115f2 <cos+0x62>
 8011606:	bf00      	nop
	...
 8011610:	3fe921fb 	.word	0x3fe921fb
 8011614:	7fefffff 	.word	0x7fefffff

08011618 <sin>:
 8011618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801161a:	ec51 0b10 	vmov	r0, r1, d0
 801161e:	4a20      	ldr	r2, [pc, #128]	; (80116a0 <sin+0x88>)
 8011620:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011624:	4293      	cmp	r3, r2
 8011626:	dc07      	bgt.n	8011638 <sin+0x20>
 8011628:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011698 <sin+0x80>
 801162c:	2000      	movs	r0, #0
 801162e:	f000 fe37 	bl	80122a0 <__kernel_sin>
 8011632:	ec51 0b10 	vmov	r0, r1, d0
 8011636:	e007      	b.n	8011648 <sin+0x30>
 8011638:	4a1a      	ldr	r2, [pc, #104]	; (80116a4 <sin+0x8c>)
 801163a:	4293      	cmp	r3, r2
 801163c:	dd09      	ble.n	8011652 <sin+0x3a>
 801163e:	ee10 2a10 	vmov	r2, s0
 8011642:	460b      	mov	r3, r1
 8011644:	f7ee fe38 	bl	80002b8 <__aeabi_dsub>
 8011648:	ec41 0b10 	vmov	d0, r0, r1
 801164c:	b005      	add	sp, #20
 801164e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011652:	4668      	mov	r0, sp
 8011654:	f000 f828 	bl	80116a8 <__ieee754_rem_pio2>
 8011658:	f000 0003 	and.w	r0, r0, #3
 801165c:	2801      	cmp	r0, #1
 801165e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011662:	ed9d 0b00 	vldr	d0, [sp]
 8011666:	d004      	beq.n	8011672 <sin+0x5a>
 8011668:	2802      	cmp	r0, #2
 801166a:	d005      	beq.n	8011678 <sin+0x60>
 801166c:	b970      	cbnz	r0, 801168c <sin+0x74>
 801166e:	2001      	movs	r0, #1
 8011670:	e7dd      	b.n	801162e <sin+0x16>
 8011672:	f000 fa0d 	bl	8011a90 <__kernel_cos>
 8011676:	e7dc      	b.n	8011632 <sin+0x1a>
 8011678:	2001      	movs	r0, #1
 801167a:	f000 fe11 	bl	80122a0 <__kernel_sin>
 801167e:	ec53 2b10 	vmov	r2, r3, d0
 8011682:	ee10 0a10 	vmov	r0, s0
 8011686:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801168a:	e7dd      	b.n	8011648 <sin+0x30>
 801168c:	f000 fa00 	bl	8011a90 <__kernel_cos>
 8011690:	e7f5      	b.n	801167e <sin+0x66>
 8011692:	bf00      	nop
 8011694:	f3af 8000 	nop.w
	...
 80116a0:	3fe921fb 	.word	0x3fe921fb
 80116a4:	7fefffff 	.word	0x7fefffff

080116a8 <__ieee754_rem_pio2>:
 80116a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116ac:	ec57 6b10 	vmov	r6, r7, d0
 80116b0:	4bc3      	ldr	r3, [pc, #780]	; (80119c0 <__ieee754_rem_pio2+0x318>)
 80116b2:	b08d      	sub	sp, #52	; 0x34
 80116b4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80116b8:	4598      	cmp	r8, r3
 80116ba:	4604      	mov	r4, r0
 80116bc:	9704      	str	r7, [sp, #16]
 80116be:	dc07      	bgt.n	80116d0 <__ieee754_rem_pio2+0x28>
 80116c0:	2200      	movs	r2, #0
 80116c2:	2300      	movs	r3, #0
 80116c4:	ed84 0b00 	vstr	d0, [r4]
 80116c8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80116cc:	2500      	movs	r5, #0
 80116ce:	e027      	b.n	8011720 <__ieee754_rem_pio2+0x78>
 80116d0:	4bbc      	ldr	r3, [pc, #752]	; (80119c4 <__ieee754_rem_pio2+0x31c>)
 80116d2:	4598      	cmp	r8, r3
 80116d4:	dc75      	bgt.n	80117c2 <__ieee754_rem_pio2+0x11a>
 80116d6:	9b04      	ldr	r3, [sp, #16]
 80116d8:	4dbb      	ldr	r5, [pc, #748]	; (80119c8 <__ieee754_rem_pio2+0x320>)
 80116da:	2b00      	cmp	r3, #0
 80116dc:	ee10 0a10 	vmov	r0, s0
 80116e0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011988 <__ieee754_rem_pio2+0x2e0>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	4639      	mov	r1, r7
 80116e8:	dd36      	ble.n	8011758 <__ieee754_rem_pio2+0xb0>
 80116ea:	f7ee fde5 	bl	80002b8 <__aeabi_dsub>
 80116ee:	45a8      	cmp	r8, r5
 80116f0:	4606      	mov	r6, r0
 80116f2:	460f      	mov	r7, r1
 80116f4:	d018      	beq.n	8011728 <__ieee754_rem_pio2+0x80>
 80116f6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011990 <__ieee754_rem_pio2+0x2e8>)
 80116f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116fc:	f7ee fddc 	bl	80002b8 <__aeabi_dsub>
 8011700:	4602      	mov	r2, r0
 8011702:	460b      	mov	r3, r1
 8011704:	e9c4 2300 	strd	r2, r3, [r4]
 8011708:	4630      	mov	r0, r6
 801170a:	4639      	mov	r1, r7
 801170c:	f7ee fdd4 	bl	80002b8 <__aeabi_dsub>
 8011710:	a39f      	add	r3, pc, #636	; (adr r3, 8011990 <__ieee754_rem_pio2+0x2e8>)
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	f7ee fdcf 	bl	80002b8 <__aeabi_dsub>
 801171a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801171e:	2501      	movs	r5, #1
 8011720:	4628      	mov	r0, r5
 8011722:	b00d      	add	sp, #52	; 0x34
 8011724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011728:	a39b      	add	r3, pc, #620	; (adr r3, 8011998 <__ieee754_rem_pio2+0x2f0>)
 801172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172e:	f7ee fdc3 	bl	80002b8 <__aeabi_dsub>
 8011732:	a39b      	add	r3, pc, #620	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x2f8>)
 8011734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011738:	4606      	mov	r6, r0
 801173a:	460f      	mov	r7, r1
 801173c:	f7ee fdbc 	bl	80002b8 <__aeabi_dsub>
 8011740:	4602      	mov	r2, r0
 8011742:	460b      	mov	r3, r1
 8011744:	e9c4 2300 	strd	r2, r3, [r4]
 8011748:	4630      	mov	r0, r6
 801174a:	4639      	mov	r1, r7
 801174c:	f7ee fdb4 	bl	80002b8 <__aeabi_dsub>
 8011750:	a393      	add	r3, pc, #588	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x2f8>)
 8011752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011756:	e7de      	b.n	8011716 <__ieee754_rem_pio2+0x6e>
 8011758:	f7ee fdb0 	bl	80002bc <__adddf3>
 801175c:	45a8      	cmp	r8, r5
 801175e:	4606      	mov	r6, r0
 8011760:	460f      	mov	r7, r1
 8011762:	d016      	beq.n	8011792 <__ieee754_rem_pio2+0xea>
 8011764:	a38a      	add	r3, pc, #552	; (adr r3, 8011990 <__ieee754_rem_pio2+0x2e8>)
 8011766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176a:	f7ee fda7 	bl	80002bc <__adddf3>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	e9c4 2300 	strd	r2, r3, [r4]
 8011776:	4630      	mov	r0, r6
 8011778:	4639      	mov	r1, r7
 801177a:	f7ee fd9d 	bl	80002b8 <__aeabi_dsub>
 801177e:	a384      	add	r3, pc, #528	; (adr r3, 8011990 <__ieee754_rem_pio2+0x2e8>)
 8011780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011784:	f7ee fd9a 	bl	80002bc <__adddf3>
 8011788:	f04f 35ff 	mov.w	r5, #4294967295
 801178c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011790:	e7c6      	b.n	8011720 <__ieee754_rem_pio2+0x78>
 8011792:	a381      	add	r3, pc, #516	; (adr r3, 8011998 <__ieee754_rem_pio2+0x2f0>)
 8011794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011798:	f7ee fd90 	bl	80002bc <__adddf3>
 801179c:	a380      	add	r3, pc, #512	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x2f8>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	4606      	mov	r6, r0
 80117a4:	460f      	mov	r7, r1
 80117a6:	f7ee fd89 	bl	80002bc <__adddf3>
 80117aa:	4602      	mov	r2, r0
 80117ac:	460b      	mov	r3, r1
 80117ae:	e9c4 2300 	strd	r2, r3, [r4]
 80117b2:	4630      	mov	r0, r6
 80117b4:	4639      	mov	r1, r7
 80117b6:	f7ee fd7f 	bl	80002b8 <__aeabi_dsub>
 80117ba:	a379      	add	r3, pc, #484	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x2f8>)
 80117bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c0:	e7e0      	b.n	8011784 <__ieee754_rem_pio2+0xdc>
 80117c2:	4b82      	ldr	r3, [pc, #520]	; (80119cc <__ieee754_rem_pio2+0x324>)
 80117c4:	4598      	cmp	r8, r3
 80117c6:	f300 80d0 	bgt.w	801196a <__ieee754_rem_pio2+0x2c2>
 80117ca:	f000 fe23 	bl	8012414 <fabs>
 80117ce:	ec57 6b10 	vmov	r6, r7, d0
 80117d2:	ee10 0a10 	vmov	r0, s0
 80117d6:	a374      	add	r3, pc, #464	; (adr r3, 80119a8 <__ieee754_rem_pio2+0x300>)
 80117d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117dc:	4639      	mov	r1, r7
 80117de:	f7ee ff23 	bl	8000628 <__aeabi_dmul>
 80117e2:	2200      	movs	r2, #0
 80117e4:	4b7a      	ldr	r3, [pc, #488]	; (80119d0 <__ieee754_rem_pio2+0x328>)
 80117e6:	f7ee fd69 	bl	80002bc <__adddf3>
 80117ea:	f7ef f9cd 	bl	8000b88 <__aeabi_d2iz>
 80117ee:	4605      	mov	r5, r0
 80117f0:	f7ee feb0 	bl	8000554 <__aeabi_i2d>
 80117f4:	a364      	add	r3, pc, #400	; (adr r3, 8011988 <__ieee754_rem_pio2+0x2e0>)
 80117f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80117fe:	f7ee ff13 	bl	8000628 <__aeabi_dmul>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4630      	mov	r0, r6
 8011808:	4639      	mov	r1, r7
 801180a:	f7ee fd55 	bl	80002b8 <__aeabi_dsub>
 801180e:	a360      	add	r3, pc, #384	; (adr r3, 8011990 <__ieee754_rem_pio2+0x2e8>)
 8011810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011814:	4682      	mov	sl, r0
 8011816:	468b      	mov	fp, r1
 8011818:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801181c:	f7ee ff04 	bl	8000628 <__aeabi_dmul>
 8011820:	2d1f      	cmp	r5, #31
 8011822:	4606      	mov	r6, r0
 8011824:	460f      	mov	r7, r1
 8011826:	dc0c      	bgt.n	8011842 <__ieee754_rem_pio2+0x19a>
 8011828:	1e6a      	subs	r2, r5, #1
 801182a:	4b6a      	ldr	r3, [pc, #424]	; (80119d4 <__ieee754_rem_pio2+0x32c>)
 801182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011830:	4543      	cmp	r3, r8
 8011832:	d006      	beq.n	8011842 <__ieee754_rem_pio2+0x19a>
 8011834:	4632      	mov	r2, r6
 8011836:	463b      	mov	r3, r7
 8011838:	4650      	mov	r0, sl
 801183a:	4659      	mov	r1, fp
 801183c:	f7ee fd3c 	bl	80002b8 <__aeabi_dsub>
 8011840:	e00e      	b.n	8011860 <__ieee754_rem_pio2+0x1b8>
 8011842:	4632      	mov	r2, r6
 8011844:	463b      	mov	r3, r7
 8011846:	4650      	mov	r0, sl
 8011848:	4659      	mov	r1, fp
 801184a:	f7ee fd35 	bl	80002b8 <__aeabi_dsub>
 801184e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011852:	9305      	str	r3, [sp, #20]
 8011854:	9a05      	ldr	r2, [sp, #20]
 8011856:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801185a:	1ad3      	subs	r3, r2, r3
 801185c:	2b10      	cmp	r3, #16
 801185e:	dc02      	bgt.n	8011866 <__ieee754_rem_pio2+0x1be>
 8011860:	e9c4 0100 	strd	r0, r1, [r4]
 8011864:	e039      	b.n	80118da <__ieee754_rem_pio2+0x232>
 8011866:	a34c      	add	r3, pc, #304	; (adr r3, 8011998 <__ieee754_rem_pio2+0x2f0>)
 8011868:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011870:	f7ee feda 	bl	8000628 <__aeabi_dmul>
 8011874:	4606      	mov	r6, r0
 8011876:	460f      	mov	r7, r1
 8011878:	4602      	mov	r2, r0
 801187a:	460b      	mov	r3, r1
 801187c:	4650      	mov	r0, sl
 801187e:	4659      	mov	r1, fp
 8011880:	f7ee fd1a 	bl	80002b8 <__aeabi_dsub>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	4680      	mov	r8, r0
 801188a:	4689      	mov	r9, r1
 801188c:	4650      	mov	r0, sl
 801188e:	4659      	mov	r1, fp
 8011890:	f7ee fd12 	bl	80002b8 <__aeabi_dsub>
 8011894:	4632      	mov	r2, r6
 8011896:	463b      	mov	r3, r7
 8011898:	f7ee fd0e 	bl	80002b8 <__aeabi_dsub>
 801189c:	a340      	add	r3, pc, #256	; (adr r3, 80119a0 <__ieee754_rem_pio2+0x2f8>)
 801189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a2:	4606      	mov	r6, r0
 80118a4:	460f      	mov	r7, r1
 80118a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80118aa:	f7ee febd 	bl	8000628 <__aeabi_dmul>
 80118ae:	4632      	mov	r2, r6
 80118b0:	463b      	mov	r3, r7
 80118b2:	f7ee fd01 	bl	80002b8 <__aeabi_dsub>
 80118b6:	4602      	mov	r2, r0
 80118b8:	460b      	mov	r3, r1
 80118ba:	4606      	mov	r6, r0
 80118bc:	460f      	mov	r7, r1
 80118be:	4640      	mov	r0, r8
 80118c0:	4649      	mov	r1, r9
 80118c2:	f7ee fcf9 	bl	80002b8 <__aeabi_dsub>
 80118c6:	9a05      	ldr	r2, [sp, #20]
 80118c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80118cc:	1ad3      	subs	r3, r2, r3
 80118ce:	2b31      	cmp	r3, #49	; 0x31
 80118d0:	dc20      	bgt.n	8011914 <__ieee754_rem_pio2+0x26c>
 80118d2:	e9c4 0100 	strd	r0, r1, [r4]
 80118d6:	46c2      	mov	sl, r8
 80118d8:	46cb      	mov	fp, r9
 80118da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80118de:	4650      	mov	r0, sl
 80118e0:	4642      	mov	r2, r8
 80118e2:	464b      	mov	r3, r9
 80118e4:	4659      	mov	r1, fp
 80118e6:	f7ee fce7 	bl	80002b8 <__aeabi_dsub>
 80118ea:	463b      	mov	r3, r7
 80118ec:	4632      	mov	r2, r6
 80118ee:	f7ee fce3 	bl	80002b8 <__aeabi_dsub>
 80118f2:	9b04      	ldr	r3, [sp, #16]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80118fa:	f6bf af11 	bge.w	8011720 <__ieee754_rem_pio2+0x78>
 80118fe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011902:	6063      	str	r3, [r4, #4]
 8011904:	f8c4 8000 	str.w	r8, [r4]
 8011908:	60a0      	str	r0, [r4, #8]
 801190a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801190e:	60e3      	str	r3, [r4, #12]
 8011910:	426d      	negs	r5, r5
 8011912:	e705      	b.n	8011720 <__ieee754_rem_pio2+0x78>
 8011914:	a326      	add	r3, pc, #152	; (adr r3, 80119b0 <__ieee754_rem_pio2+0x308>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801191e:	f7ee fe83 	bl	8000628 <__aeabi_dmul>
 8011922:	4606      	mov	r6, r0
 8011924:	460f      	mov	r7, r1
 8011926:	4602      	mov	r2, r0
 8011928:	460b      	mov	r3, r1
 801192a:	4640      	mov	r0, r8
 801192c:	4649      	mov	r1, r9
 801192e:	f7ee fcc3 	bl	80002b8 <__aeabi_dsub>
 8011932:	4602      	mov	r2, r0
 8011934:	460b      	mov	r3, r1
 8011936:	4682      	mov	sl, r0
 8011938:	468b      	mov	fp, r1
 801193a:	4640      	mov	r0, r8
 801193c:	4649      	mov	r1, r9
 801193e:	f7ee fcbb 	bl	80002b8 <__aeabi_dsub>
 8011942:	4632      	mov	r2, r6
 8011944:	463b      	mov	r3, r7
 8011946:	f7ee fcb7 	bl	80002b8 <__aeabi_dsub>
 801194a:	a31b      	add	r3, pc, #108	; (adr r3, 80119b8 <__ieee754_rem_pio2+0x310>)
 801194c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011950:	4606      	mov	r6, r0
 8011952:	460f      	mov	r7, r1
 8011954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011958:	f7ee fe66 	bl	8000628 <__aeabi_dmul>
 801195c:	4632      	mov	r2, r6
 801195e:	463b      	mov	r3, r7
 8011960:	f7ee fcaa 	bl	80002b8 <__aeabi_dsub>
 8011964:	4606      	mov	r6, r0
 8011966:	460f      	mov	r7, r1
 8011968:	e764      	b.n	8011834 <__ieee754_rem_pio2+0x18c>
 801196a:	4b1b      	ldr	r3, [pc, #108]	; (80119d8 <__ieee754_rem_pio2+0x330>)
 801196c:	4598      	cmp	r8, r3
 801196e:	dd35      	ble.n	80119dc <__ieee754_rem_pio2+0x334>
 8011970:	ee10 2a10 	vmov	r2, s0
 8011974:	463b      	mov	r3, r7
 8011976:	4630      	mov	r0, r6
 8011978:	4639      	mov	r1, r7
 801197a:	f7ee fc9d 	bl	80002b8 <__aeabi_dsub>
 801197e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011982:	e9c4 0100 	strd	r0, r1, [r4]
 8011986:	e6a1      	b.n	80116cc <__ieee754_rem_pio2+0x24>
 8011988:	54400000 	.word	0x54400000
 801198c:	3ff921fb 	.word	0x3ff921fb
 8011990:	1a626331 	.word	0x1a626331
 8011994:	3dd0b461 	.word	0x3dd0b461
 8011998:	1a600000 	.word	0x1a600000
 801199c:	3dd0b461 	.word	0x3dd0b461
 80119a0:	2e037073 	.word	0x2e037073
 80119a4:	3ba3198a 	.word	0x3ba3198a
 80119a8:	6dc9c883 	.word	0x6dc9c883
 80119ac:	3fe45f30 	.word	0x3fe45f30
 80119b0:	2e000000 	.word	0x2e000000
 80119b4:	3ba3198a 	.word	0x3ba3198a
 80119b8:	252049c1 	.word	0x252049c1
 80119bc:	397b839a 	.word	0x397b839a
 80119c0:	3fe921fb 	.word	0x3fe921fb
 80119c4:	4002d97b 	.word	0x4002d97b
 80119c8:	3ff921fb 	.word	0x3ff921fb
 80119cc:	413921fb 	.word	0x413921fb
 80119d0:	3fe00000 	.word	0x3fe00000
 80119d4:	08017998 	.word	0x08017998
 80119d8:	7fefffff 	.word	0x7fefffff
 80119dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80119e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80119e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80119e8:	4630      	mov	r0, r6
 80119ea:	460f      	mov	r7, r1
 80119ec:	f7ef f8cc 	bl	8000b88 <__aeabi_d2iz>
 80119f0:	f7ee fdb0 	bl	8000554 <__aeabi_i2d>
 80119f4:	4602      	mov	r2, r0
 80119f6:	460b      	mov	r3, r1
 80119f8:	4630      	mov	r0, r6
 80119fa:	4639      	mov	r1, r7
 80119fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011a00:	f7ee fc5a 	bl	80002b8 <__aeabi_dsub>
 8011a04:	2200      	movs	r2, #0
 8011a06:	4b1f      	ldr	r3, [pc, #124]	; (8011a84 <__ieee754_rem_pio2+0x3dc>)
 8011a08:	f7ee fe0e 	bl	8000628 <__aeabi_dmul>
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	4606      	mov	r6, r0
 8011a10:	f7ef f8ba 	bl	8000b88 <__aeabi_d2iz>
 8011a14:	f7ee fd9e 	bl	8000554 <__aeabi_i2d>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	4639      	mov	r1, r7
 8011a20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011a24:	f7ee fc48 	bl	80002b8 <__aeabi_dsub>
 8011a28:	2200      	movs	r2, #0
 8011a2a:	4b16      	ldr	r3, [pc, #88]	; (8011a84 <__ieee754_rem_pio2+0x3dc>)
 8011a2c:	f7ee fdfc 	bl	8000628 <__aeabi_dmul>
 8011a30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011a34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011a38:	f04f 0803 	mov.w	r8, #3
 8011a3c:	2600      	movs	r6, #0
 8011a3e:	2700      	movs	r7, #0
 8011a40:	4632      	mov	r2, r6
 8011a42:	463b      	mov	r3, r7
 8011a44:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011a48:	f108 3aff 	add.w	sl, r8, #4294967295
 8011a4c:	f7ef f854 	bl	8000af8 <__aeabi_dcmpeq>
 8011a50:	b9b0      	cbnz	r0, 8011a80 <__ieee754_rem_pio2+0x3d8>
 8011a52:	4b0d      	ldr	r3, [pc, #52]	; (8011a88 <__ieee754_rem_pio2+0x3e0>)
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	2302      	movs	r3, #2
 8011a58:	9300      	str	r3, [sp, #0]
 8011a5a:	462a      	mov	r2, r5
 8011a5c:	4643      	mov	r3, r8
 8011a5e:	4621      	mov	r1, r4
 8011a60:	a806      	add	r0, sp, #24
 8011a62:	f000 f8dd 	bl	8011c20 <__kernel_rem_pio2>
 8011a66:	9b04      	ldr	r3, [sp, #16]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	f6bf ae58 	bge.w	8011720 <__ieee754_rem_pio2+0x78>
 8011a70:	6863      	ldr	r3, [r4, #4]
 8011a72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a76:	6063      	str	r3, [r4, #4]
 8011a78:	68e3      	ldr	r3, [r4, #12]
 8011a7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011a7e:	e746      	b.n	801190e <__ieee754_rem_pio2+0x266>
 8011a80:	46d0      	mov	r8, sl
 8011a82:	e7dd      	b.n	8011a40 <__ieee754_rem_pio2+0x398>
 8011a84:	41700000 	.word	0x41700000
 8011a88:	08017a18 	.word	0x08017a18
 8011a8c:	00000000 	.word	0x00000000

08011a90 <__kernel_cos>:
 8011a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a94:	ec59 8b10 	vmov	r8, r9, d0
 8011a98:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011a9c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011aa0:	ed2d 8b02 	vpush	{d8}
 8011aa4:	eeb0 8a41 	vmov.f32	s16, s2
 8011aa8:	eef0 8a61 	vmov.f32	s17, s3
 8011aac:	da07      	bge.n	8011abe <__kernel_cos+0x2e>
 8011aae:	ee10 0a10 	vmov	r0, s0
 8011ab2:	4649      	mov	r1, r9
 8011ab4:	f7ef f868 	bl	8000b88 <__aeabi_d2iz>
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	f000 8089 	beq.w	8011bd0 <__kernel_cos+0x140>
 8011abe:	4642      	mov	r2, r8
 8011ac0:	464b      	mov	r3, r9
 8011ac2:	4640      	mov	r0, r8
 8011ac4:	4649      	mov	r1, r9
 8011ac6:	f7ee fdaf 	bl	8000628 <__aeabi_dmul>
 8011aca:	2200      	movs	r2, #0
 8011acc:	4b4e      	ldr	r3, [pc, #312]	; (8011c08 <__kernel_cos+0x178>)
 8011ace:	4604      	mov	r4, r0
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	f7ee fda9 	bl	8000628 <__aeabi_dmul>
 8011ad6:	a340      	add	r3, pc, #256	; (adr r3, 8011bd8 <__kernel_cos+0x148>)
 8011ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011adc:	4682      	mov	sl, r0
 8011ade:	468b      	mov	fp, r1
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	f7ee fda0 	bl	8000628 <__aeabi_dmul>
 8011ae8:	a33d      	add	r3, pc, #244	; (adr r3, 8011be0 <__kernel_cos+0x150>)
 8011aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aee:	f7ee fbe5 	bl	80002bc <__adddf3>
 8011af2:	4622      	mov	r2, r4
 8011af4:	462b      	mov	r3, r5
 8011af6:	f7ee fd97 	bl	8000628 <__aeabi_dmul>
 8011afa:	a33b      	add	r3, pc, #236	; (adr r3, 8011be8 <__kernel_cos+0x158>)
 8011afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b00:	f7ee fbda 	bl	80002b8 <__aeabi_dsub>
 8011b04:	4622      	mov	r2, r4
 8011b06:	462b      	mov	r3, r5
 8011b08:	f7ee fd8e 	bl	8000628 <__aeabi_dmul>
 8011b0c:	a338      	add	r3, pc, #224	; (adr r3, 8011bf0 <__kernel_cos+0x160>)
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f7ee fbd3 	bl	80002bc <__adddf3>
 8011b16:	4622      	mov	r2, r4
 8011b18:	462b      	mov	r3, r5
 8011b1a:	f7ee fd85 	bl	8000628 <__aeabi_dmul>
 8011b1e:	a336      	add	r3, pc, #216	; (adr r3, 8011bf8 <__kernel_cos+0x168>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	f7ee fbc8 	bl	80002b8 <__aeabi_dsub>
 8011b28:	4622      	mov	r2, r4
 8011b2a:	462b      	mov	r3, r5
 8011b2c:	f7ee fd7c 	bl	8000628 <__aeabi_dmul>
 8011b30:	a333      	add	r3, pc, #204	; (adr r3, 8011c00 <__kernel_cos+0x170>)
 8011b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b36:	f7ee fbc1 	bl	80002bc <__adddf3>
 8011b3a:	4622      	mov	r2, r4
 8011b3c:	462b      	mov	r3, r5
 8011b3e:	f7ee fd73 	bl	8000628 <__aeabi_dmul>
 8011b42:	4622      	mov	r2, r4
 8011b44:	462b      	mov	r3, r5
 8011b46:	f7ee fd6f 	bl	8000628 <__aeabi_dmul>
 8011b4a:	ec53 2b18 	vmov	r2, r3, d8
 8011b4e:	4604      	mov	r4, r0
 8011b50:	460d      	mov	r5, r1
 8011b52:	4640      	mov	r0, r8
 8011b54:	4649      	mov	r1, r9
 8011b56:	f7ee fd67 	bl	8000628 <__aeabi_dmul>
 8011b5a:	460b      	mov	r3, r1
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	4629      	mov	r1, r5
 8011b60:	4620      	mov	r0, r4
 8011b62:	f7ee fba9 	bl	80002b8 <__aeabi_dsub>
 8011b66:	4b29      	ldr	r3, [pc, #164]	; (8011c0c <__kernel_cos+0x17c>)
 8011b68:	429e      	cmp	r6, r3
 8011b6a:	4680      	mov	r8, r0
 8011b6c:	4689      	mov	r9, r1
 8011b6e:	dc11      	bgt.n	8011b94 <__kernel_cos+0x104>
 8011b70:	4602      	mov	r2, r0
 8011b72:	460b      	mov	r3, r1
 8011b74:	4650      	mov	r0, sl
 8011b76:	4659      	mov	r1, fp
 8011b78:	f7ee fb9e 	bl	80002b8 <__aeabi_dsub>
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	4924      	ldr	r1, [pc, #144]	; (8011c10 <__kernel_cos+0x180>)
 8011b80:	4602      	mov	r2, r0
 8011b82:	2000      	movs	r0, #0
 8011b84:	f7ee fb98 	bl	80002b8 <__aeabi_dsub>
 8011b88:	ecbd 8b02 	vpop	{d8}
 8011b8c:	ec41 0b10 	vmov	d0, r0, r1
 8011b90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b94:	4b1f      	ldr	r3, [pc, #124]	; (8011c14 <__kernel_cos+0x184>)
 8011b96:	491e      	ldr	r1, [pc, #120]	; (8011c10 <__kernel_cos+0x180>)
 8011b98:	429e      	cmp	r6, r3
 8011b9a:	bfcc      	ite	gt
 8011b9c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011c18 <__kernel_cos+0x188>)
 8011b9e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011ba2:	2400      	movs	r4, #0
 8011ba4:	4622      	mov	r2, r4
 8011ba6:	462b      	mov	r3, r5
 8011ba8:	2000      	movs	r0, #0
 8011baa:	f7ee fb85 	bl	80002b8 <__aeabi_dsub>
 8011bae:	4622      	mov	r2, r4
 8011bb0:	4606      	mov	r6, r0
 8011bb2:	460f      	mov	r7, r1
 8011bb4:	462b      	mov	r3, r5
 8011bb6:	4650      	mov	r0, sl
 8011bb8:	4659      	mov	r1, fp
 8011bba:	f7ee fb7d 	bl	80002b8 <__aeabi_dsub>
 8011bbe:	4642      	mov	r2, r8
 8011bc0:	464b      	mov	r3, r9
 8011bc2:	f7ee fb79 	bl	80002b8 <__aeabi_dsub>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	460b      	mov	r3, r1
 8011bca:	4630      	mov	r0, r6
 8011bcc:	4639      	mov	r1, r7
 8011bce:	e7d9      	b.n	8011b84 <__kernel_cos+0xf4>
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	490f      	ldr	r1, [pc, #60]	; (8011c10 <__kernel_cos+0x180>)
 8011bd4:	e7d8      	b.n	8011b88 <__kernel_cos+0xf8>
 8011bd6:	bf00      	nop
 8011bd8:	be8838d4 	.word	0xbe8838d4
 8011bdc:	bda8fae9 	.word	0xbda8fae9
 8011be0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011be4:	3e21ee9e 	.word	0x3e21ee9e
 8011be8:	809c52ad 	.word	0x809c52ad
 8011bec:	3e927e4f 	.word	0x3e927e4f
 8011bf0:	19cb1590 	.word	0x19cb1590
 8011bf4:	3efa01a0 	.word	0x3efa01a0
 8011bf8:	16c15177 	.word	0x16c15177
 8011bfc:	3f56c16c 	.word	0x3f56c16c
 8011c00:	5555554c 	.word	0x5555554c
 8011c04:	3fa55555 	.word	0x3fa55555
 8011c08:	3fe00000 	.word	0x3fe00000
 8011c0c:	3fd33332 	.word	0x3fd33332
 8011c10:	3ff00000 	.word	0x3ff00000
 8011c14:	3fe90000 	.word	0x3fe90000
 8011c18:	3fd20000 	.word	0x3fd20000
 8011c1c:	00000000 	.word	0x00000000

08011c20 <__kernel_rem_pio2>:
 8011c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c24:	ed2d 8b02 	vpush	{d8}
 8011c28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011c2c:	1ed4      	subs	r4, r2, #3
 8011c2e:	9308      	str	r3, [sp, #32]
 8011c30:	9101      	str	r1, [sp, #4]
 8011c32:	4bc5      	ldr	r3, [pc, #788]	; (8011f48 <__kernel_rem_pio2+0x328>)
 8011c34:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011c36:	9009      	str	r0, [sp, #36]	; 0x24
 8011c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011c3c:	9304      	str	r3, [sp, #16]
 8011c3e:	9b08      	ldr	r3, [sp, #32]
 8011c40:	3b01      	subs	r3, #1
 8011c42:	9307      	str	r3, [sp, #28]
 8011c44:	2318      	movs	r3, #24
 8011c46:	fb94 f4f3 	sdiv	r4, r4, r3
 8011c4a:	f06f 0317 	mvn.w	r3, #23
 8011c4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011c52:	fb04 3303 	mla	r3, r4, r3, r3
 8011c56:	eb03 0a02 	add.w	sl, r3, r2
 8011c5a:	9b04      	ldr	r3, [sp, #16]
 8011c5c:	9a07      	ldr	r2, [sp, #28]
 8011c5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011f38 <__kernel_rem_pio2+0x318>
 8011c62:	eb03 0802 	add.w	r8, r3, r2
 8011c66:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011c68:	1aa7      	subs	r7, r4, r2
 8011c6a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011c6e:	ae22      	add	r6, sp, #136	; 0x88
 8011c70:	2500      	movs	r5, #0
 8011c72:	4545      	cmp	r5, r8
 8011c74:	dd13      	ble.n	8011c9e <__kernel_rem_pio2+0x7e>
 8011c76:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011f38 <__kernel_rem_pio2+0x318>
 8011c7a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011c7e:	2600      	movs	r6, #0
 8011c80:	9b04      	ldr	r3, [sp, #16]
 8011c82:	429e      	cmp	r6, r3
 8011c84:	dc32      	bgt.n	8011cec <__kernel_rem_pio2+0xcc>
 8011c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c88:	9302      	str	r3, [sp, #8]
 8011c8a:	9b08      	ldr	r3, [sp, #32]
 8011c8c:	199d      	adds	r5, r3, r6
 8011c8e:	ab22      	add	r3, sp, #136	; 0x88
 8011c90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011c94:	9306      	str	r3, [sp, #24]
 8011c96:	ec59 8b18 	vmov	r8, r9, d8
 8011c9a:	2700      	movs	r7, #0
 8011c9c:	e01f      	b.n	8011cde <__kernel_rem_pio2+0xbe>
 8011c9e:	42ef      	cmn	r7, r5
 8011ca0:	d407      	bmi.n	8011cb2 <__kernel_rem_pio2+0x92>
 8011ca2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011ca6:	f7ee fc55 	bl	8000554 <__aeabi_i2d>
 8011caa:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011cae:	3501      	adds	r5, #1
 8011cb0:	e7df      	b.n	8011c72 <__kernel_rem_pio2+0x52>
 8011cb2:	ec51 0b18 	vmov	r0, r1, d8
 8011cb6:	e7f8      	b.n	8011caa <__kernel_rem_pio2+0x8a>
 8011cb8:	9906      	ldr	r1, [sp, #24]
 8011cba:	9d02      	ldr	r5, [sp, #8]
 8011cbc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011cc0:	9106      	str	r1, [sp, #24]
 8011cc2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011cc6:	9502      	str	r5, [sp, #8]
 8011cc8:	f7ee fcae 	bl	8000628 <__aeabi_dmul>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	4649      	mov	r1, r9
 8011cd4:	f7ee faf2 	bl	80002bc <__adddf3>
 8011cd8:	3701      	adds	r7, #1
 8011cda:	4680      	mov	r8, r0
 8011cdc:	4689      	mov	r9, r1
 8011cde:	9b07      	ldr	r3, [sp, #28]
 8011ce0:	429f      	cmp	r7, r3
 8011ce2:	dde9      	ble.n	8011cb8 <__kernel_rem_pio2+0x98>
 8011ce4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011ce8:	3601      	adds	r6, #1
 8011cea:	e7c9      	b.n	8011c80 <__kernel_rem_pio2+0x60>
 8011cec:	9b04      	ldr	r3, [sp, #16]
 8011cee:	aa0e      	add	r2, sp, #56	; 0x38
 8011cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8011cf6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011cf8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011cfc:	9c04      	ldr	r4, [sp, #16]
 8011cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d00:	ab9a      	add	r3, sp, #616	; 0x268
 8011d02:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011d06:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011d0e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011d12:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011d16:	ab9a      	add	r3, sp, #616	; 0x268
 8011d18:	445b      	add	r3, fp
 8011d1a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011d1e:	2500      	movs	r5, #0
 8011d20:	1b63      	subs	r3, r4, r5
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	dc78      	bgt.n	8011e18 <__kernel_rem_pio2+0x1f8>
 8011d26:	4650      	mov	r0, sl
 8011d28:	ec49 8b10 	vmov	d0, r8, r9
 8011d2c:	f000 fc00 	bl	8012530 <scalbn>
 8011d30:	ec57 6b10 	vmov	r6, r7, d0
 8011d34:	2200      	movs	r2, #0
 8011d36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011d3a:	ee10 0a10 	vmov	r0, s0
 8011d3e:	4639      	mov	r1, r7
 8011d40:	f7ee fc72 	bl	8000628 <__aeabi_dmul>
 8011d44:	ec41 0b10 	vmov	d0, r0, r1
 8011d48:	f000 fb6e 	bl	8012428 <floor>
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	ec51 0b10 	vmov	r0, r1, d0
 8011d52:	4b7e      	ldr	r3, [pc, #504]	; (8011f4c <__kernel_rem_pio2+0x32c>)
 8011d54:	f7ee fc68 	bl	8000628 <__aeabi_dmul>
 8011d58:	4602      	mov	r2, r0
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	4630      	mov	r0, r6
 8011d5e:	4639      	mov	r1, r7
 8011d60:	f7ee faaa 	bl	80002b8 <__aeabi_dsub>
 8011d64:	460f      	mov	r7, r1
 8011d66:	4606      	mov	r6, r0
 8011d68:	f7ee ff0e 	bl	8000b88 <__aeabi_d2iz>
 8011d6c:	9006      	str	r0, [sp, #24]
 8011d6e:	f7ee fbf1 	bl	8000554 <__aeabi_i2d>
 8011d72:	4602      	mov	r2, r0
 8011d74:	460b      	mov	r3, r1
 8011d76:	4630      	mov	r0, r6
 8011d78:	4639      	mov	r1, r7
 8011d7a:	f7ee fa9d 	bl	80002b8 <__aeabi_dsub>
 8011d7e:	f1ba 0f00 	cmp.w	sl, #0
 8011d82:	4606      	mov	r6, r0
 8011d84:	460f      	mov	r7, r1
 8011d86:	dd6c      	ble.n	8011e62 <__kernel_rem_pio2+0x242>
 8011d88:	1e62      	subs	r2, r4, #1
 8011d8a:	ab0e      	add	r3, sp, #56	; 0x38
 8011d8c:	f1ca 0118 	rsb	r1, sl, #24
 8011d90:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011d94:	9d06      	ldr	r5, [sp, #24]
 8011d96:	fa40 f301 	asr.w	r3, r0, r1
 8011d9a:	441d      	add	r5, r3
 8011d9c:	408b      	lsls	r3, r1
 8011d9e:	1ac0      	subs	r0, r0, r3
 8011da0:	ab0e      	add	r3, sp, #56	; 0x38
 8011da2:	9506      	str	r5, [sp, #24]
 8011da4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011da8:	f1ca 0317 	rsb	r3, sl, #23
 8011dac:	fa40 f303 	asr.w	r3, r0, r3
 8011db0:	9302      	str	r3, [sp, #8]
 8011db2:	9b02      	ldr	r3, [sp, #8]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	dd62      	ble.n	8011e7e <__kernel_rem_pio2+0x25e>
 8011db8:	9b06      	ldr	r3, [sp, #24]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	9306      	str	r3, [sp, #24]
 8011dc0:	4615      	mov	r5, r2
 8011dc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011dc6:	4294      	cmp	r4, r2
 8011dc8:	f300 8095 	bgt.w	8011ef6 <__kernel_rem_pio2+0x2d6>
 8011dcc:	f1ba 0f00 	cmp.w	sl, #0
 8011dd0:	dd07      	ble.n	8011de2 <__kernel_rem_pio2+0x1c2>
 8011dd2:	f1ba 0f01 	cmp.w	sl, #1
 8011dd6:	f000 80a2 	beq.w	8011f1e <__kernel_rem_pio2+0x2fe>
 8011dda:	f1ba 0f02 	cmp.w	sl, #2
 8011dde:	f000 80c1 	beq.w	8011f64 <__kernel_rem_pio2+0x344>
 8011de2:	9b02      	ldr	r3, [sp, #8]
 8011de4:	2b02      	cmp	r3, #2
 8011de6:	d14a      	bne.n	8011e7e <__kernel_rem_pio2+0x25e>
 8011de8:	4632      	mov	r2, r6
 8011dea:	463b      	mov	r3, r7
 8011dec:	2000      	movs	r0, #0
 8011dee:	4958      	ldr	r1, [pc, #352]	; (8011f50 <__kernel_rem_pio2+0x330>)
 8011df0:	f7ee fa62 	bl	80002b8 <__aeabi_dsub>
 8011df4:	4606      	mov	r6, r0
 8011df6:	460f      	mov	r7, r1
 8011df8:	2d00      	cmp	r5, #0
 8011dfa:	d040      	beq.n	8011e7e <__kernel_rem_pio2+0x25e>
 8011dfc:	4650      	mov	r0, sl
 8011dfe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011f40 <__kernel_rem_pio2+0x320>
 8011e02:	f000 fb95 	bl	8012530 <scalbn>
 8011e06:	4630      	mov	r0, r6
 8011e08:	4639      	mov	r1, r7
 8011e0a:	ec53 2b10 	vmov	r2, r3, d0
 8011e0e:	f7ee fa53 	bl	80002b8 <__aeabi_dsub>
 8011e12:	4606      	mov	r6, r0
 8011e14:	460f      	mov	r7, r1
 8011e16:	e032      	b.n	8011e7e <__kernel_rem_pio2+0x25e>
 8011e18:	2200      	movs	r2, #0
 8011e1a:	4b4e      	ldr	r3, [pc, #312]	; (8011f54 <__kernel_rem_pio2+0x334>)
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	4649      	mov	r1, r9
 8011e20:	f7ee fc02 	bl	8000628 <__aeabi_dmul>
 8011e24:	f7ee feb0 	bl	8000b88 <__aeabi_d2iz>
 8011e28:	f7ee fb94 	bl	8000554 <__aeabi_i2d>
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	4b4a      	ldr	r3, [pc, #296]	; (8011f58 <__kernel_rem_pio2+0x338>)
 8011e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e34:	f7ee fbf8 	bl	8000628 <__aeabi_dmul>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4640      	mov	r0, r8
 8011e3e:	4649      	mov	r1, r9
 8011e40:	f7ee fa3a 	bl	80002b8 <__aeabi_dsub>
 8011e44:	f7ee fea0 	bl	8000b88 <__aeabi_d2iz>
 8011e48:	ab0e      	add	r3, sp, #56	; 0x38
 8011e4a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011e4e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011e52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e56:	f7ee fa31 	bl	80002bc <__adddf3>
 8011e5a:	3501      	adds	r5, #1
 8011e5c:	4680      	mov	r8, r0
 8011e5e:	4689      	mov	r9, r1
 8011e60:	e75e      	b.n	8011d20 <__kernel_rem_pio2+0x100>
 8011e62:	d105      	bne.n	8011e70 <__kernel_rem_pio2+0x250>
 8011e64:	1e63      	subs	r3, r4, #1
 8011e66:	aa0e      	add	r2, sp, #56	; 0x38
 8011e68:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011e6c:	15c3      	asrs	r3, r0, #23
 8011e6e:	e79f      	b.n	8011db0 <__kernel_rem_pio2+0x190>
 8011e70:	2200      	movs	r2, #0
 8011e72:	4b3a      	ldr	r3, [pc, #232]	; (8011f5c <__kernel_rem_pio2+0x33c>)
 8011e74:	f7ee fe5e 	bl	8000b34 <__aeabi_dcmpge>
 8011e78:	2800      	cmp	r0, #0
 8011e7a:	d139      	bne.n	8011ef0 <__kernel_rem_pio2+0x2d0>
 8011e7c:	9002      	str	r0, [sp, #8]
 8011e7e:	2200      	movs	r2, #0
 8011e80:	2300      	movs	r3, #0
 8011e82:	4630      	mov	r0, r6
 8011e84:	4639      	mov	r1, r7
 8011e86:	f7ee fe37 	bl	8000af8 <__aeabi_dcmpeq>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	f000 80c7 	beq.w	801201e <__kernel_rem_pio2+0x3fe>
 8011e90:	1e65      	subs	r5, r4, #1
 8011e92:	462b      	mov	r3, r5
 8011e94:	2200      	movs	r2, #0
 8011e96:	9904      	ldr	r1, [sp, #16]
 8011e98:	428b      	cmp	r3, r1
 8011e9a:	da6a      	bge.n	8011f72 <__kernel_rem_pio2+0x352>
 8011e9c:	2a00      	cmp	r2, #0
 8011e9e:	f000 8088 	beq.w	8011fb2 <__kernel_rem_pio2+0x392>
 8011ea2:	ab0e      	add	r3, sp, #56	; 0x38
 8011ea4:	f1aa 0a18 	sub.w	sl, sl, #24
 8011ea8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f000 80b4 	beq.w	801201a <__kernel_rem_pio2+0x3fa>
 8011eb2:	4650      	mov	r0, sl
 8011eb4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011f40 <__kernel_rem_pio2+0x320>
 8011eb8:	f000 fb3a 	bl	8012530 <scalbn>
 8011ebc:	00ec      	lsls	r4, r5, #3
 8011ebe:	ab72      	add	r3, sp, #456	; 0x1c8
 8011ec0:	191e      	adds	r6, r3, r4
 8011ec2:	ec59 8b10 	vmov	r8, r9, d0
 8011ec6:	f106 0a08 	add.w	sl, r6, #8
 8011eca:	462f      	mov	r7, r5
 8011ecc:	2f00      	cmp	r7, #0
 8011ece:	f280 80df 	bge.w	8012090 <__kernel_rem_pio2+0x470>
 8011ed2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011f38 <__kernel_rem_pio2+0x318>
 8011ed6:	f04f 0a00 	mov.w	sl, #0
 8011eda:	eba5 030a 	sub.w	r3, r5, sl
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f2c0 810a 	blt.w	80120f8 <__kernel_rem_pio2+0x4d8>
 8011ee4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011f60 <__kernel_rem_pio2+0x340>
 8011ee8:	ec59 8b18 	vmov	r8, r9, d8
 8011eec:	2700      	movs	r7, #0
 8011eee:	e0f5      	b.n	80120dc <__kernel_rem_pio2+0x4bc>
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	9302      	str	r3, [sp, #8]
 8011ef4:	e760      	b.n	8011db8 <__kernel_rem_pio2+0x198>
 8011ef6:	ab0e      	add	r3, sp, #56	; 0x38
 8011ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011efc:	b94d      	cbnz	r5, 8011f12 <__kernel_rem_pio2+0x2f2>
 8011efe:	b12b      	cbz	r3, 8011f0c <__kernel_rem_pio2+0x2ec>
 8011f00:	a80e      	add	r0, sp, #56	; 0x38
 8011f02:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011f06:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	3201      	adds	r2, #1
 8011f0e:	461d      	mov	r5, r3
 8011f10:	e759      	b.n	8011dc6 <__kernel_rem_pio2+0x1a6>
 8011f12:	a80e      	add	r0, sp, #56	; 0x38
 8011f14:	1acb      	subs	r3, r1, r3
 8011f16:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011f1a:	462b      	mov	r3, r5
 8011f1c:	e7f6      	b.n	8011f0c <__kernel_rem_pio2+0x2ec>
 8011f1e:	1e62      	subs	r2, r4, #1
 8011f20:	ab0e      	add	r3, sp, #56	; 0x38
 8011f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011f2a:	a90e      	add	r1, sp, #56	; 0x38
 8011f2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011f30:	e757      	b.n	8011de2 <__kernel_rem_pio2+0x1c2>
 8011f32:	bf00      	nop
 8011f34:	f3af 8000 	nop.w
	...
 8011f44:	3ff00000 	.word	0x3ff00000
 8011f48:	08017b60 	.word	0x08017b60
 8011f4c:	40200000 	.word	0x40200000
 8011f50:	3ff00000 	.word	0x3ff00000
 8011f54:	3e700000 	.word	0x3e700000
 8011f58:	41700000 	.word	0x41700000
 8011f5c:	3fe00000 	.word	0x3fe00000
 8011f60:	08017b20 	.word	0x08017b20
 8011f64:	1e62      	subs	r2, r4, #1
 8011f66:	ab0e      	add	r3, sp, #56	; 0x38
 8011f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011f70:	e7db      	b.n	8011f2a <__kernel_rem_pio2+0x30a>
 8011f72:	a90e      	add	r1, sp, #56	; 0x38
 8011f74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011f78:	3b01      	subs	r3, #1
 8011f7a:	430a      	orrs	r2, r1
 8011f7c:	e78b      	b.n	8011e96 <__kernel_rem_pio2+0x276>
 8011f7e:	3301      	adds	r3, #1
 8011f80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011f84:	2900      	cmp	r1, #0
 8011f86:	d0fa      	beq.n	8011f7e <__kernel_rem_pio2+0x35e>
 8011f88:	9a08      	ldr	r2, [sp, #32]
 8011f8a:	4422      	add	r2, r4
 8011f8c:	00d2      	lsls	r2, r2, #3
 8011f8e:	a922      	add	r1, sp, #136	; 0x88
 8011f90:	18e3      	adds	r3, r4, r3
 8011f92:	9206      	str	r2, [sp, #24]
 8011f94:	440a      	add	r2, r1
 8011f96:	9302      	str	r3, [sp, #8]
 8011f98:	f10b 0108 	add.w	r1, fp, #8
 8011f9c:	f102 0308 	add.w	r3, r2, #8
 8011fa0:	1c66      	adds	r6, r4, #1
 8011fa2:	910a      	str	r1, [sp, #40]	; 0x28
 8011fa4:	2500      	movs	r5, #0
 8011fa6:	930d      	str	r3, [sp, #52]	; 0x34
 8011fa8:	9b02      	ldr	r3, [sp, #8]
 8011faa:	42b3      	cmp	r3, r6
 8011fac:	da04      	bge.n	8011fb8 <__kernel_rem_pio2+0x398>
 8011fae:	461c      	mov	r4, r3
 8011fb0:	e6a6      	b.n	8011d00 <__kernel_rem_pio2+0xe0>
 8011fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011fb4:	2301      	movs	r3, #1
 8011fb6:	e7e3      	b.n	8011f80 <__kernel_rem_pio2+0x360>
 8011fb8:	9b06      	ldr	r3, [sp, #24]
 8011fba:	18ef      	adds	r7, r5, r3
 8011fbc:	ab22      	add	r3, sp, #136	; 0x88
 8011fbe:	441f      	add	r7, r3
 8011fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fc2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011fc6:	f7ee fac5 	bl	8000554 <__aeabi_i2d>
 8011fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fcc:	461c      	mov	r4, r3
 8011fce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011fd0:	e9c7 0100 	strd	r0, r1, [r7]
 8011fd4:	eb03 0b05 	add.w	fp, r3, r5
 8011fd8:	2700      	movs	r7, #0
 8011fda:	f04f 0800 	mov.w	r8, #0
 8011fde:	f04f 0900 	mov.w	r9, #0
 8011fe2:	9b07      	ldr	r3, [sp, #28]
 8011fe4:	429f      	cmp	r7, r3
 8011fe6:	dd08      	ble.n	8011ffa <__kernel_rem_pio2+0x3da>
 8011fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fea:	aa72      	add	r2, sp, #456	; 0x1c8
 8011fec:	18eb      	adds	r3, r5, r3
 8011fee:	4413      	add	r3, r2
 8011ff0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011ff4:	3601      	adds	r6, #1
 8011ff6:	3508      	adds	r5, #8
 8011ff8:	e7d6      	b.n	8011fa8 <__kernel_rem_pio2+0x388>
 8011ffa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011ffe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012002:	f7ee fb11 	bl	8000628 <__aeabi_dmul>
 8012006:	4602      	mov	r2, r0
 8012008:	460b      	mov	r3, r1
 801200a:	4640      	mov	r0, r8
 801200c:	4649      	mov	r1, r9
 801200e:	f7ee f955 	bl	80002bc <__adddf3>
 8012012:	3701      	adds	r7, #1
 8012014:	4680      	mov	r8, r0
 8012016:	4689      	mov	r9, r1
 8012018:	e7e3      	b.n	8011fe2 <__kernel_rem_pio2+0x3c2>
 801201a:	3d01      	subs	r5, #1
 801201c:	e741      	b.n	8011ea2 <__kernel_rem_pio2+0x282>
 801201e:	f1ca 0000 	rsb	r0, sl, #0
 8012022:	ec47 6b10 	vmov	d0, r6, r7
 8012026:	f000 fa83 	bl	8012530 <scalbn>
 801202a:	ec57 6b10 	vmov	r6, r7, d0
 801202e:	2200      	movs	r2, #0
 8012030:	4b99      	ldr	r3, [pc, #612]	; (8012298 <__kernel_rem_pio2+0x678>)
 8012032:	ee10 0a10 	vmov	r0, s0
 8012036:	4639      	mov	r1, r7
 8012038:	f7ee fd7c 	bl	8000b34 <__aeabi_dcmpge>
 801203c:	b1f8      	cbz	r0, 801207e <__kernel_rem_pio2+0x45e>
 801203e:	2200      	movs	r2, #0
 8012040:	4b96      	ldr	r3, [pc, #600]	; (801229c <__kernel_rem_pio2+0x67c>)
 8012042:	4630      	mov	r0, r6
 8012044:	4639      	mov	r1, r7
 8012046:	f7ee faef 	bl	8000628 <__aeabi_dmul>
 801204a:	f7ee fd9d 	bl	8000b88 <__aeabi_d2iz>
 801204e:	4680      	mov	r8, r0
 8012050:	f7ee fa80 	bl	8000554 <__aeabi_i2d>
 8012054:	2200      	movs	r2, #0
 8012056:	4b90      	ldr	r3, [pc, #576]	; (8012298 <__kernel_rem_pio2+0x678>)
 8012058:	f7ee fae6 	bl	8000628 <__aeabi_dmul>
 801205c:	460b      	mov	r3, r1
 801205e:	4602      	mov	r2, r0
 8012060:	4639      	mov	r1, r7
 8012062:	4630      	mov	r0, r6
 8012064:	f7ee f928 	bl	80002b8 <__aeabi_dsub>
 8012068:	f7ee fd8e 	bl	8000b88 <__aeabi_d2iz>
 801206c:	1c65      	adds	r5, r4, #1
 801206e:	ab0e      	add	r3, sp, #56	; 0x38
 8012070:	f10a 0a18 	add.w	sl, sl, #24
 8012074:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012078:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801207c:	e719      	b.n	8011eb2 <__kernel_rem_pio2+0x292>
 801207e:	4630      	mov	r0, r6
 8012080:	4639      	mov	r1, r7
 8012082:	f7ee fd81 	bl	8000b88 <__aeabi_d2iz>
 8012086:	ab0e      	add	r3, sp, #56	; 0x38
 8012088:	4625      	mov	r5, r4
 801208a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801208e:	e710      	b.n	8011eb2 <__kernel_rem_pio2+0x292>
 8012090:	ab0e      	add	r3, sp, #56	; 0x38
 8012092:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012096:	f7ee fa5d 	bl	8000554 <__aeabi_i2d>
 801209a:	4642      	mov	r2, r8
 801209c:	464b      	mov	r3, r9
 801209e:	f7ee fac3 	bl	8000628 <__aeabi_dmul>
 80120a2:	2200      	movs	r2, #0
 80120a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80120a8:	4b7c      	ldr	r3, [pc, #496]	; (801229c <__kernel_rem_pio2+0x67c>)
 80120aa:	4640      	mov	r0, r8
 80120ac:	4649      	mov	r1, r9
 80120ae:	f7ee fabb 	bl	8000628 <__aeabi_dmul>
 80120b2:	3f01      	subs	r7, #1
 80120b4:	4680      	mov	r8, r0
 80120b6:	4689      	mov	r9, r1
 80120b8:	e708      	b.n	8011ecc <__kernel_rem_pio2+0x2ac>
 80120ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80120be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80120c6:	f7ee faaf 	bl	8000628 <__aeabi_dmul>
 80120ca:	4602      	mov	r2, r0
 80120cc:	460b      	mov	r3, r1
 80120ce:	4640      	mov	r0, r8
 80120d0:	4649      	mov	r1, r9
 80120d2:	f7ee f8f3 	bl	80002bc <__adddf3>
 80120d6:	3701      	adds	r7, #1
 80120d8:	4680      	mov	r8, r0
 80120da:	4689      	mov	r9, r1
 80120dc:	9b04      	ldr	r3, [sp, #16]
 80120de:	429f      	cmp	r7, r3
 80120e0:	dc01      	bgt.n	80120e6 <__kernel_rem_pio2+0x4c6>
 80120e2:	45ba      	cmp	sl, r7
 80120e4:	dae9      	bge.n	80120ba <__kernel_rem_pio2+0x49a>
 80120e6:	ab4a      	add	r3, sp, #296	; 0x128
 80120e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80120ec:	e9c3 8900 	strd	r8, r9, [r3]
 80120f0:	f10a 0a01 	add.w	sl, sl, #1
 80120f4:	3e08      	subs	r6, #8
 80120f6:	e6f0      	b.n	8011eda <__kernel_rem_pio2+0x2ba>
 80120f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80120fa:	2b03      	cmp	r3, #3
 80120fc:	d85b      	bhi.n	80121b6 <__kernel_rem_pio2+0x596>
 80120fe:	e8df f003 	tbb	[pc, r3]
 8012102:	264a      	.short	0x264a
 8012104:	0226      	.short	0x0226
 8012106:	ab9a      	add	r3, sp, #616	; 0x268
 8012108:	441c      	add	r4, r3
 801210a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801210e:	46a2      	mov	sl, r4
 8012110:	46ab      	mov	fp, r5
 8012112:	f1bb 0f00 	cmp.w	fp, #0
 8012116:	dc6c      	bgt.n	80121f2 <__kernel_rem_pio2+0x5d2>
 8012118:	46a2      	mov	sl, r4
 801211a:	46ab      	mov	fp, r5
 801211c:	f1bb 0f01 	cmp.w	fp, #1
 8012120:	f300 8086 	bgt.w	8012230 <__kernel_rem_pio2+0x610>
 8012124:	2000      	movs	r0, #0
 8012126:	2100      	movs	r1, #0
 8012128:	2d01      	cmp	r5, #1
 801212a:	f300 80a0 	bgt.w	801226e <__kernel_rem_pio2+0x64e>
 801212e:	9b02      	ldr	r3, [sp, #8]
 8012130:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012134:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012138:	2b00      	cmp	r3, #0
 801213a:	f040 809e 	bne.w	801227a <__kernel_rem_pio2+0x65a>
 801213e:	9b01      	ldr	r3, [sp, #4]
 8012140:	e9c3 7800 	strd	r7, r8, [r3]
 8012144:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012148:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801214c:	e033      	b.n	80121b6 <__kernel_rem_pio2+0x596>
 801214e:	3408      	adds	r4, #8
 8012150:	ab4a      	add	r3, sp, #296	; 0x128
 8012152:	441c      	add	r4, r3
 8012154:	462e      	mov	r6, r5
 8012156:	2000      	movs	r0, #0
 8012158:	2100      	movs	r1, #0
 801215a:	2e00      	cmp	r6, #0
 801215c:	da3a      	bge.n	80121d4 <__kernel_rem_pio2+0x5b4>
 801215e:	9b02      	ldr	r3, [sp, #8]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d03d      	beq.n	80121e0 <__kernel_rem_pio2+0x5c0>
 8012164:	4602      	mov	r2, r0
 8012166:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801216a:	9c01      	ldr	r4, [sp, #4]
 801216c:	e9c4 2300 	strd	r2, r3, [r4]
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012178:	f7ee f89e 	bl	80002b8 <__aeabi_dsub>
 801217c:	ae4c      	add	r6, sp, #304	; 0x130
 801217e:	2401      	movs	r4, #1
 8012180:	42a5      	cmp	r5, r4
 8012182:	da30      	bge.n	80121e6 <__kernel_rem_pio2+0x5c6>
 8012184:	9b02      	ldr	r3, [sp, #8]
 8012186:	b113      	cbz	r3, 801218e <__kernel_rem_pio2+0x56e>
 8012188:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801218c:	4619      	mov	r1, r3
 801218e:	9b01      	ldr	r3, [sp, #4]
 8012190:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012194:	e00f      	b.n	80121b6 <__kernel_rem_pio2+0x596>
 8012196:	ab9a      	add	r3, sp, #616	; 0x268
 8012198:	441c      	add	r4, r3
 801219a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801219e:	2000      	movs	r0, #0
 80121a0:	2100      	movs	r1, #0
 80121a2:	2d00      	cmp	r5, #0
 80121a4:	da10      	bge.n	80121c8 <__kernel_rem_pio2+0x5a8>
 80121a6:	9b02      	ldr	r3, [sp, #8]
 80121a8:	b113      	cbz	r3, 80121b0 <__kernel_rem_pio2+0x590>
 80121aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121ae:	4619      	mov	r1, r3
 80121b0:	9b01      	ldr	r3, [sp, #4]
 80121b2:	e9c3 0100 	strd	r0, r1, [r3]
 80121b6:	9b06      	ldr	r3, [sp, #24]
 80121b8:	f003 0007 	and.w	r0, r3, #7
 80121bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80121c0:	ecbd 8b02 	vpop	{d8}
 80121c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80121cc:	f7ee f876 	bl	80002bc <__adddf3>
 80121d0:	3d01      	subs	r5, #1
 80121d2:	e7e6      	b.n	80121a2 <__kernel_rem_pio2+0x582>
 80121d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80121d8:	f7ee f870 	bl	80002bc <__adddf3>
 80121dc:	3e01      	subs	r6, #1
 80121de:	e7bc      	b.n	801215a <__kernel_rem_pio2+0x53a>
 80121e0:	4602      	mov	r2, r0
 80121e2:	460b      	mov	r3, r1
 80121e4:	e7c1      	b.n	801216a <__kernel_rem_pio2+0x54a>
 80121e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80121ea:	f7ee f867 	bl	80002bc <__adddf3>
 80121ee:	3401      	adds	r4, #1
 80121f0:	e7c6      	b.n	8012180 <__kernel_rem_pio2+0x560>
 80121f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80121f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80121fa:	4640      	mov	r0, r8
 80121fc:	ec53 2b17 	vmov	r2, r3, d7
 8012200:	4649      	mov	r1, r9
 8012202:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012206:	f7ee f859 	bl	80002bc <__adddf3>
 801220a:	4602      	mov	r2, r0
 801220c:	460b      	mov	r3, r1
 801220e:	4606      	mov	r6, r0
 8012210:	460f      	mov	r7, r1
 8012212:	4640      	mov	r0, r8
 8012214:	4649      	mov	r1, r9
 8012216:	f7ee f84f 	bl	80002b8 <__aeabi_dsub>
 801221a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801221e:	f7ee f84d 	bl	80002bc <__adddf3>
 8012222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012226:	e9ca 0100 	strd	r0, r1, [sl]
 801222a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801222e:	e770      	b.n	8012112 <__kernel_rem_pio2+0x4f2>
 8012230:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012234:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012238:	4630      	mov	r0, r6
 801223a:	ec53 2b17 	vmov	r2, r3, d7
 801223e:	4639      	mov	r1, r7
 8012240:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012244:	f7ee f83a 	bl	80002bc <__adddf3>
 8012248:	4602      	mov	r2, r0
 801224a:	460b      	mov	r3, r1
 801224c:	4680      	mov	r8, r0
 801224e:	4689      	mov	r9, r1
 8012250:	4630      	mov	r0, r6
 8012252:	4639      	mov	r1, r7
 8012254:	f7ee f830 	bl	80002b8 <__aeabi_dsub>
 8012258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801225c:	f7ee f82e 	bl	80002bc <__adddf3>
 8012260:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012264:	e9ca 0100 	strd	r0, r1, [sl]
 8012268:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801226c:	e756      	b.n	801211c <__kernel_rem_pio2+0x4fc>
 801226e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012272:	f7ee f823 	bl	80002bc <__adddf3>
 8012276:	3d01      	subs	r5, #1
 8012278:	e756      	b.n	8012128 <__kernel_rem_pio2+0x508>
 801227a:	9b01      	ldr	r3, [sp, #4]
 801227c:	9a01      	ldr	r2, [sp, #4]
 801227e:	601f      	str	r7, [r3, #0]
 8012280:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012284:	605c      	str	r4, [r3, #4]
 8012286:	609d      	str	r5, [r3, #8]
 8012288:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801228c:	60d3      	str	r3, [r2, #12]
 801228e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012292:	6110      	str	r0, [r2, #16]
 8012294:	6153      	str	r3, [r2, #20]
 8012296:	e78e      	b.n	80121b6 <__kernel_rem_pio2+0x596>
 8012298:	41700000 	.word	0x41700000
 801229c:	3e700000 	.word	0x3e700000

080122a0 <__kernel_sin>:
 80122a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a4:	ec55 4b10 	vmov	r4, r5, d0
 80122a8:	b085      	sub	sp, #20
 80122aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80122ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80122b2:	ed8d 1b00 	vstr	d1, [sp]
 80122b6:	9002      	str	r0, [sp, #8]
 80122b8:	da06      	bge.n	80122c8 <__kernel_sin+0x28>
 80122ba:	ee10 0a10 	vmov	r0, s0
 80122be:	4629      	mov	r1, r5
 80122c0:	f7ee fc62 	bl	8000b88 <__aeabi_d2iz>
 80122c4:	2800      	cmp	r0, #0
 80122c6:	d051      	beq.n	801236c <__kernel_sin+0xcc>
 80122c8:	4622      	mov	r2, r4
 80122ca:	462b      	mov	r3, r5
 80122cc:	4620      	mov	r0, r4
 80122ce:	4629      	mov	r1, r5
 80122d0:	f7ee f9aa 	bl	8000628 <__aeabi_dmul>
 80122d4:	4682      	mov	sl, r0
 80122d6:	468b      	mov	fp, r1
 80122d8:	4602      	mov	r2, r0
 80122da:	460b      	mov	r3, r1
 80122dc:	4620      	mov	r0, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ee f9a2 	bl	8000628 <__aeabi_dmul>
 80122e4:	a341      	add	r3, pc, #260	; (adr r3, 80123ec <__kernel_sin+0x14c>)
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	4680      	mov	r8, r0
 80122ec:	4689      	mov	r9, r1
 80122ee:	4650      	mov	r0, sl
 80122f0:	4659      	mov	r1, fp
 80122f2:	f7ee f999 	bl	8000628 <__aeabi_dmul>
 80122f6:	a33f      	add	r3, pc, #252	; (adr r3, 80123f4 <__kernel_sin+0x154>)
 80122f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fc:	f7ed ffdc 	bl	80002b8 <__aeabi_dsub>
 8012300:	4652      	mov	r2, sl
 8012302:	465b      	mov	r3, fp
 8012304:	f7ee f990 	bl	8000628 <__aeabi_dmul>
 8012308:	a33c      	add	r3, pc, #240	; (adr r3, 80123fc <__kernel_sin+0x15c>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ed ffd5 	bl	80002bc <__adddf3>
 8012312:	4652      	mov	r2, sl
 8012314:	465b      	mov	r3, fp
 8012316:	f7ee f987 	bl	8000628 <__aeabi_dmul>
 801231a:	a33a      	add	r3, pc, #232	; (adr r3, 8012404 <__kernel_sin+0x164>)
 801231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012320:	f7ed ffca 	bl	80002b8 <__aeabi_dsub>
 8012324:	4652      	mov	r2, sl
 8012326:	465b      	mov	r3, fp
 8012328:	f7ee f97e 	bl	8000628 <__aeabi_dmul>
 801232c:	a337      	add	r3, pc, #220	; (adr r3, 801240c <__kernel_sin+0x16c>)
 801232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012332:	f7ed ffc3 	bl	80002bc <__adddf3>
 8012336:	9b02      	ldr	r3, [sp, #8]
 8012338:	4606      	mov	r6, r0
 801233a:	460f      	mov	r7, r1
 801233c:	b9db      	cbnz	r3, 8012376 <__kernel_sin+0xd6>
 801233e:	4602      	mov	r2, r0
 8012340:	460b      	mov	r3, r1
 8012342:	4650      	mov	r0, sl
 8012344:	4659      	mov	r1, fp
 8012346:	f7ee f96f 	bl	8000628 <__aeabi_dmul>
 801234a:	a325      	add	r3, pc, #148	; (adr r3, 80123e0 <__kernel_sin+0x140>)
 801234c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012350:	f7ed ffb2 	bl	80002b8 <__aeabi_dsub>
 8012354:	4642      	mov	r2, r8
 8012356:	464b      	mov	r3, r9
 8012358:	f7ee f966 	bl	8000628 <__aeabi_dmul>
 801235c:	4602      	mov	r2, r0
 801235e:	460b      	mov	r3, r1
 8012360:	4620      	mov	r0, r4
 8012362:	4629      	mov	r1, r5
 8012364:	f7ed ffaa 	bl	80002bc <__adddf3>
 8012368:	4604      	mov	r4, r0
 801236a:	460d      	mov	r5, r1
 801236c:	ec45 4b10 	vmov	d0, r4, r5
 8012370:	b005      	add	sp, #20
 8012372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012376:	2200      	movs	r2, #0
 8012378:	4b1b      	ldr	r3, [pc, #108]	; (80123e8 <__kernel_sin+0x148>)
 801237a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801237e:	f7ee f953 	bl	8000628 <__aeabi_dmul>
 8012382:	4632      	mov	r2, r6
 8012384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012388:	463b      	mov	r3, r7
 801238a:	4640      	mov	r0, r8
 801238c:	4649      	mov	r1, r9
 801238e:	f7ee f94b 	bl	8000628 <__aeabi_dmul>
 8012392:	4602      	mov	r2, r0
 8012394:	460b      	mov	r3, r1
 8012396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801239a:	f7ed ff8d 	bl	80002b8 <__aeabi_dsub>
 801239e:	4652      	mov	r2, sl
 80123a0:	465b      	mov	r3, fp
 80123a2:	f7ee f941 	bl	8000628 <__aeabi_dmul>
 80123a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123aa:	f7ed ff85 	bl	80002b8 <__aeabi_dsub>
 80123ae:	a30c      	add	r3, pc, #48	; (adr r3, 80123e0 <__kernel_sin+0x140>)
 80123b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b4:	4606      	mov	r6, r0
 80123b6:	460f      	mov	r7, r1
 80123b8:	4640      	mov	r0, r8
 80123ba:	4649      	mov	r1, r9
 80123bc:	f7ee f934 	bl	8000628 <__aeabi_dmul>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4630      	mov	r0, r6
 80123c6:	4639      	mov	r1, r7
 80123c8:	f7ed ff78 	bl	80002bc <__adddf3>
 80123cc:	4602      	mov	r2, r0
 80123ce:	460b      	mov	r3, r1
 80123d0:	4620      	mov	r0, r4
 80123d2:	4629      	mov	r1, r5
 80123d4:	f7ed ff70 	bl	80002b8 <__aeabi_dsub>
 80123d8:	e7c6      	b.n	8012368 <__kernel_sin+0xc8>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	55555549 	.word	0x55555549
 80123e4:	3fc55555 	.word	0x3fc55555
 80123e8:	3fe00000 	.word	0x3fe00000
 80123ec:	5acfd57c 	.word	0x5acfd57c
 80123f0:	3de5d93a 	.word	0x3de5d93a
 80123f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80123f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80123fc:	57b1fe7d 	.word	0x57b1fe7d
 8012400:	3ec71de3 	.word	0x3ec71de3
 8012404:	19c161d5 	.word	0x19c161d5
 8012408:	3f2a01a0 	.word	0x3f2a01a0
 801240c:	1110f8a6 	.word	0x1110f8a6
 8012410:	3f811111 	.word	0x3f811111

08012414 <fabs>:
 8012414:	ec51 0b10 	vmov	r0, r1, d0
 8012418:	ee10 2a10 	vmov	r2, s0
 801241c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012420:	ec43 2b10 	vmov	d0, r2, r3
 8012424:	4770      	bx	lr
	...

08012428 <floor>:
 8012428:	ec51 0b10 	vmov	r0, r1, d0
 801242c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012430:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012434:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012438:	2e13      	cmp	r6, #19
 801243a:	460c      	mov	r4, r1
 801243c:	ee10 5a10 	vmov	r5, s0
 8012440:	4680      	mov	r8, r0
 8012442:	dc34      	bgt.n	80124ae <floor+0x86>
 8012444:	2e00      	cmp	r6, #0
 8012446:	da16      	bge.n	8012476 <floor+0x4e>
 8012448:	a335      	add	r3, pc, #212	; (adr r3, 8012520 <floor+0xf8>)
 801244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801244e:	f7ed ff35 	bl	80002bc <__adddf3>
 8012452:	2200      	movs	r2, #0
 8012454:	2300      	movs	r3, #0
 8012456:	f7ee fb77 	bl	8000b48 <__aeabi_dcmpgt>
 801245a:	b148      	cbz	r0, 8012470 <floor+0x48>
 801245c:	2c00      	cmp	r4, #0
 801245e:	da59      	bge.n	8012514 <floor+0xec>
 8012460:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012464:	4a30      	ldr	r2, [pc, #192]	; (8012528 <floor+0x100>)
 8012466:	432b      	orrs	r3, r5
 8012468:	2500      	movs	r5, #0
 801246a:	42ab      	cmp	r3, r5
 801246c:	bf18      	it	ne
 801246e:	4614      	movne	r4, r2
 8012470:	4621      	mov	r1, r4
 8012472:	4628      	mov	r0, r5
 8012474:	e025      	b.n	80124c2 <floor+0x9a>
 8012476:	4f2d      	ldr	r7, [pc, #180]	; (801252c <floor+0x104>)
 8012478:	4137      	asrs	r7, r6
 801247a:	ea01 0307 	and.w	r3, r1, r7
 801247e:	4303      	orrs	r3, r0
 8012480:	d01f      	beq.n	80124c2 <floor+0x9a>
 8012482:	a327      	add	r3, pc, #156	; (adr r3, 8012520 <floor+0xf8>)
 8012484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012488:	f7ed ff18 	bl	80002bc <__adddf3>
 801248c:	2200      	movs	r2, #0
 801248e:	2300      	movs	r3, #0
 8012490:	f7ee fb5a 	bl	8000b48 <__aeabi_dcmpgt>
 8012494:	2800      	cmp	r0, #0
 8012496:	d0eb      	beq.n	8012470 <floor+0x48>
 8012498:	2c00      	cmp	r4, #0
 801249a:	bfbe      	ittt	lt
 801249c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80124a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80124a4:	19a4      	addlt	r4, r4, r6
 80124a6:	ea24 0407 	bic.w	r4, r4, r7
 80124aa:	2500      	movs	r5, #0
 80124ac:	e7e0      	b.n	8012470 <floor+0x48>
 80124ae:	2e33      	cmp	r6, #51	; 0x33
 80124b0:	dd0b      	ble.n	80124ca <floor+0xa2>
 80124b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80124b6:	d104      	bne.n	80124c2 <floor+0x9a>
 80124b8:	ee10 2a10 	vmov	r2, s0
 80124bc:	460b      	mov	r3, r1
 80124be:	f7ed fefd 	bl	80002bc <__adddf3>
 80124c2:	ec41 0b10 	vmov	d0, r0, r1
 80124c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80124ce:	f04f 33ff 	mov.w	r3, #4294967295
 80124d2:	fa23 f707 	lsr.w	r7, r3, r7
 80124d6:	4207      	tst	r7, r0
 80124d8:	d0f3      	beq.n	80124c2 <floor+0x9a>
 80124da:	a311      	add	r3, pc, #68	; (adr r3, 8012520 <floor+0xf8>)
 80124dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e0:	f7ed feec 	bl	80002bc <__adddf3>
 80124e4:	2200      	movs	r2, #0
 80124e6:	2300      	movs	r3, #0
 80124e8:	f7ee fb2e 	bl	8000b48 <__aeabi_dcmpgt>
 80124ec:	2800      	cmp	r0, #0
 80124ee:	d0bf      	beq.n	8012470 <floor+0x48>
 80124f0:	2c00      	cmp	r4, #0
 80124f2:	da02      	bge.n	80124fa <floor+0xd2>
 80124f4:	2e14      	cmp	r6, #20
 80124f6:	d103      	bne.n	8012500 <floor+0xd8>
 80124f8:	3401      	adds	r4, #1
 80124fa:	ea25 0507 	bic.w	r5, r5, r7
 80124fe:	e7b7      	b.n	8012470 <floor+0x48>
 8012500:	2301      	movs	r3, #1
 8012502:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012506:	fa03 f606 	lsl.w	r6, r3, r6
 801250a:	4435      	add	r5, r6
 801250c:	4545      	cmp	r5, r8
 801250e:	bf38      	it	cc
 8012510:	18e4      	addcc	r4, r4, r3
 8012512:	e7f2      	b.n	80124fa <floor+0xd2>
 8012514:	2500      	movs	r5, #0
 8012516:	462c      	mov	r4, r5
 8012518:	e7aa      	b.n	8012470 <floor+0x48>
 801251a:	bf00      	nop
 801251c:	f3af 8000 	nop.w
 8012520:	8800759c 	.word	0x8800759c
 8012524:	7e37e43c 	.word	0x7e37e43c
 8012528:	bff00000 	.word	0xbff00000
 801252c:	000fffff 	.word	0x000fffff

08012530 <scalbn>:
 8012530:	b570      	push	{r4, r5, r6, lr}
 8012532:	ec55 4b10 	vmov	r4, r5, d0
 8012536:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801253a:	4606      	mov	r6, r0
 801253c:	462b      	mov	r3, r5
 801253e:	b9aa      	cbnz	r2, 801256c <scalbn+0x3c>
 8012540:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012544:	4323      	orrs	r3, r4
 8012546:	d03b      	beq.n	80125c0 <scalbn+0x90>
 8012548:	4b31      	ldr	r3, [pc, #196]	; (8012610 <scalbn+0xe0>)
 801254a:	4629      	mov	r1, r5
 801254c:	2200      	movs	r2, #0
 801254e:	ee10 0a10 	vmov	r0, s0
 8012552:	f7ee f869 	bl	8000628 <__aeabi_dmul>
 8012556:	4b2f      	ldr	r3, [pc, #188]	; (8012614 <scalbn+0xe4>)
 8012558:	429e      	cmp	r6, r3
 801255a:	4604      	mov	r4, r0
 801255c:	460d      	mov	r5, r1
 801255e:	da12      	bge.n	8012586 <scalbn+0x56>
 8012560:	a327      	add	r3, pc, #156	; (adr r3, 8012600 <scalbn+0xd0>)
 8012562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012566:	f7ee f85f 	bl	8000628 <__aeabi_dmul>
 801256a:	e009      	b.n	8012580 <scalbn+0x50>
 801256c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012570:	428a      	cmp	r2, r1
 8012572:	d10c      	bne.n	801258e <scalbn+0x5e>
 8012574:	ee10 2a10 	vmov	r2, s0
 8012578:	4620      	mov	r0, r4
 801257a:	4629      	mov	r1, r5
 801257c:	f7ed fe9e 	bl	80002bc <__adddf3>
 8012580:	4604      	mov	r4, r0
 8012582:	460d      	mov	r5, r1
 8012584:	e01c      	b.n	80125c0 <scalbn+0x90>
 8012586:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801258a:	460b      	mov	r3, r1
 801258c:	3a36      	subs	r2, #54	; 0x36
 801258e:	4432      	add	r2, r6
 8012590:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012594:	428a      	cmp	r2, r1
 8012596:	dd0b      	ble.n	80125b0 <scalbn+0x80>
 8012598:	ec45 4b11 	vmov	d1, r4, r5
 801259c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012608 <scalbn+0xd8>
 80125a0:	f000 f83c 	bl	801261c <copysign>
 80125a4:	a318      	add	r3, pc, #96	; (adr r3, 8012608 <scalbn+0xd8>)
 80125a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125aa:	ec51 0b10 	vmov	r0, r1, d0
 80125ae:	e7da      	b.n	8012566 <scalbn+0x36>
 80125b0:	2a00      	cmp	r2, #0
 80125b2:	dd08      	ble.n	80125c6 <scalbn+0x96>
 80125b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80125b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80125bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80125c0:	ec45 4b10 	vmov	d0, r4, r5
 80125c4:	bd70      	pop	{r4, r5, r6, pc}
 80125c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80125ca:	da0d      	bge.n	80125e8 <scalbn+0xb8>
 80125cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80125d0:	429e      	cmp	r6, r3
 80125d2:	ec45 4b11 	vmov	d1, r4, r5
 80125d6:	dce1      	bgt.n	801259c <scalbn+0x6c>
 80125d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012600 <scalbn+0xd0>
 80125dc:	f000 f81e 	bl	801261c <copysign>
 80125e0:	a307      	add	r3, pc, #28	; (adr r3, 8012600 <scalbn+0xd0>)
 80125e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125e6:	e7e0      	b.n	80125aa <scalbn+0x7a>
 80125e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80125ec:	3236      	adds	r2, #54	; 0x36
 80125ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80125f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80125f6:	4620      	mov	r0, r4
 80125f8:	4629      	mov	r1, r5
 80125fa:	2200      	movs	r2, #0
 80125fc:	4b06      	ldr	r3, [pc, #24]	; (8012618 <scalbn+0xe8>)
 80125fe:	e7b2      	b.n	8012566 <scalbn+0x36>
 8012600:	c2f8f359 	.word	0xc2f8f359
 8012604:	01a56e1f 	.word	0x01a56e1f
 8012608:	8800759c 	.word	0x8800759c
 801260c:	7e37e43c 	.word	0x7e37e43c
 8012610:	43500000 	.word	0x43500000
 8012614:	ffff3cb0 	.word	0xffff3cb0
 8012618:	3c900000 	.word	0x3c900000

0801261c <copysign>:
 801261c:	ec51 0b10 	vmov	r0, r1, d0
 8012620:	ee11 0a90 	vmov	r0, s3
 8012624:	ee10 2a10 	vmov	r2, s0
 8012628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801262c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012630:	ea41 0300 	orr.w	r3, r1, r0
 8012634:	ec43 2b10 	vmov	d0, r2, r3
 8012638:	4770      	bx	lr
	...

0801263c <__errno>:
 801263c:	4b01      	ldr	r3, [pc, #4]	; (8012644 <__errno+0x8>)
 801263e:	6818      	ldr	r0, [r3, #0]
 8012640:	4770      	bx	lr
 8012642:	bf00      	nop
 8012644:	2000000c 	.word	0x2000000c

08012648 <__libc_init_array>:
 8012648:	b570      	push	{r4, r5, r6, lr}
 801264a:	4e0d      	ldr	r6, [pc, #52]	; (8012680 <__libc_init_array+0x38>)
 801264c:	4c0d      	ldr	r4, [pc, #52]	; (8012684 <__libc_init_array+0x3c>)
 801264e:	1ba4      	subs	r4, r4, r6
 8012650:	10a4      	asrs	r4, r4, #2
 8012652:	2500      	movs	r5, #0
 8012654:	42a5      	cmp	r5, r4
 8012656:	d109      	bne.n	801266c <__libc_init_array+0x24>
 8012658:	4e0b      	ldr	r6, [pc, #44]	; (8012688 <__libc_init_array+0x40>)
 801265a:	4c0c      	ldr	r4, [pc, #48]	; (801268c <__libc_init_array+0x44>)
 801265c:	f004 feee 	bl	801743c <_init>
 8012660:	1ba4      	subs	r4, r4, r6
 8012662:	10a4      	asrs	r4, r4, #2
 8012664:	2500      	movs	r5, #0
 8012666:	42a5      	cmp	r5, r4
 8012668:	d105      	bne.n	8012676 <__libc_init_array+0x2e>
 801266a:	bd70      	pop	{r4, r5, r6, pc}
 801266c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012670:	4798      	blx	r3
 8012672:	3501      	adds	r5, #1
 8012674:	e7ee      	b.n	8012654 <__libc_init_array+0xc>
 8012676:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801267a:	4798      	blx	r3
 801267c:	3501      	adds	r5, #1
 801267e:	e7f2      	b.n	8012666 <__libc_init_array+0x1e>
 8012680:	08017eb4 	.word	0x08017eb4
 8012684:	08017eb4 	.word	0x08017eb4
 8012688:	08017eb4 	.word	0x08017eb4
 801268c:	08017ebc 	.word	0x08017ebc

08012690 <memcpy>:
 8012690:	b510      	push	{r4, lr}
 8012692:	1e43      	subs	r3, r0, #1
 8012694:	440a      	add	r2, r1
 8012696:	4291      	cmp	r1, r2
 8012698:	d100      	bne.n	801269c <memcpy+0xc>
 801269a:	bd10      	pop	{r4, pc}
 801269c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80126a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80126a4:	e7f7      	b.n	8012696 <memcpy+0x6>

080126a6 <memset>:
 80126a6:	4402      	add	r2, r0
 80126a8:	4603      	mov	r3, r0
 80126aa:	4293      	cmp	r3, r2
 80126ac:	d100      	bne.n	80126b0 <memset+0xa>
 80126ae:	4770      	bx	lr
 80126b0:	f803 1b01 	strb.w	r1, [r3], #1
 80126b4:	e7f9      	b.n	80126aa <memset+0x4>

080126b6 <__cvt>:
 80126b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126ba:	ec55 4b10 	vmov	r4, r5, d0
 80126be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80126c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80126c4:	2d00      	cmp	r5, #0
 80126c6:	460e      	mov	r6, r1
 80126c8:	4691      	mov	r9, r2
 80126ca:	4619      	mov	r1, r3
 80126cc:	bfb8      	it	lt
 80126ce:	4622      	movlt	r2, r4
 80126d0:	462b      	mov	r3, r5
 80126d2:	f027 0720 	bic.w	r7, r7, #32
 80126d6:	bfbb      	ittet	lt
 80126d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80126dc:	461d      	movlt	r5, r3
 80126de:	2300      	movge	r3, #0
 80126e0:	232d      	movlt	r3, #45	; 0x2d
 80126e2:	bfb8      	it	lt
 80126e4:	4614      	movlt	r4, r2
 80126e6:	2f46      	cmp	r7, #70	; 0x46
 80126e8:	700b      	strb	r3, [r1, #0]
 80126ea:	d004      	beq.n	80126f6 <__cvt+0x40>
 80126ec:	2f45      	cmp	r7, #69	; 0x45
 80126ee:	d100      	bne.n	80126f2 <__cvt+0x3c>
 80126f0:	3601      	adds	r6, #1
 80126f2:	2102      	movs	r1, #2
 80126f4:	e000      	b.n	80126f8 <__cvt+0x42>
 80126f6:	2103      	movs	r1, #3
 80126f8:	ab03      	add	r3, sp, #12
 80126fa:	9301      	str	r3, [sp, #4]
 80126fc:	ab02      	add	r3, sp, #8
 80126fe:	9300      	str	r3, [sp, #0]
 8012700:	4632      	mov	r2, r6
 8012702:	4653      	mov	r3, sl
 8012704:	ec45 4b10 	vmov	d0, r4, r5
 8012708:	f001 ff9e 	bl	8014648 <_dtoa_r>
 801270c:	2f47      	cmp	r7, #71	; 0x47
 801270e:	4680      	mov	r8, r0
 8012710:	d102      	bne.n	8012718 <__cvt+0x62>
 8012712:	f019 0f01 	tst.w	r9, #1
 8012716:	d026      	beq.n	8012766 <__cvt+0xb0>
 8012718:	2f46      	cmp	r7, #70	; 0x46
 801271a:	eb08 0906 	add.w	r9, r8, r6
 801271e:	d111      	bne.n	8012744 <__cvt+0x8e>
 8012720:	f898 3000 	ldrb.w	r3, [r8]
 8012724:	2b30      	cmp	r3, #48	; 0x30
 8012726:	d10a      	bne.n	801273e <__cvt+0x88>
 8012728:	2200      	movs	r2, #0
 801272a:	2300      	movs	r3, #0
 801272c:	4620      	mov	r0, r4
 801272e:	4629      	mov	r1, r5
 8012730:	f7ee f9e2 	bl	8000af8 <__aeabi_dcmpeq>
 8012734:	b918      	cbnz	r0, 801273e <__cvt+0x88>
 8012736:	f1c6 0601 	rsb	r6, r6, #1
 801273a:	f8ca 6000 	str.w	r6, [sl]
 801273e:	f8da 3000 	ldr.w	r3, [sl]
 8012742:	4499      	add	r9, r3
 8012744:	2200      	movs	r2, #0
 8012746:	2300      	movs	r3, #0
 8012748:	4620      	mov	r0, r4
 801274a:	4629      	mov	r1, r5
 801274c:	f7ee f9d4 	bl	8000af8 <__aeabi_dcmpeq>
 8012750:	b938      	cbnz	r0, 8012762 <__cvt+0xac>
 8012752:	2230      	movs	r2, #48	; 0x30
 8012754:	9b03      	ldr	r3, [sp, #12]
 8012756:	454b      	cmp	r3, r9
 8012758:	d205      	bcs.n	8012766 <__cvt+0xb0>
 801275a:	1c59      	adds	r1, r3, #1
 801275c:	9103      	str	r1, [sp, #12]
 801275e:	701a      	strb	r2, [r3, #0]
 8012760:	e7f8      	b.n	8012754 <__cvt+0x9e>
 8012762:	f8cd 900c 	str.w	r9, [sp, #12]
 8012766:	9b03      	ldr	r3, [sp, #12]
 8012768:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801276a:	eba3 0308 	sub.w	r3, r3, r8
 801276e:	4640      	mov	r0, r8
 8012770:	6013      	str	r3, [r2, #0]
 8012772:	b004      	add	sp, #16
 8012774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012778 <__exponent>:
 8012778:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801277a:	2900      	cmp	r1, #0
 801277c:	4604      	mov	r4, r0
 801277e:	bfba      	itte	lt
 8012780:	4249      	neglt	r1, r1
 8012782:	232d      	movlt	r3, #45	; 0x2d
 8012784:	232b      	movge	r3, #43	; 0x2b
 8012786:	2909      	cmp	r1, #9
 8012788:	f804 2b02 	strb.w	r2, [r4], #2
 801278c:	7043      	strb	r3, [r0, #1]
 801278e:	dd20      	ble.n	80127d2 <__exponent+0x5a>
 8012790:	f10d 0307 	add.w	r3, sp, #7
 8012794:	461f      	mov	r7, r3
 8012796:	260a      	movs	r6, #10
 8012798:	fb91 f5f6 	sdiv	r5, r1, r6
 801279c:	fb06 1115 	mls	r1, r6, r5, r1
 80127a0:	3130      	adds	r1, #48	; 0x30
 80127a2:	2d09      	cmp	r5, #9
 80127a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80127a8:	f103 32ff 	add.w	r2, r3, #4294967295
 80127ac:	4629      	mov	r1, r5
 80127ae:	dc09      	bgt.n	80127c4 <__exponent+0x4c>
 80127b0:	3130      	adds	r1, #48	; 0x30
 80127b2:	3b02      	subs	r3, #2
 80127b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80127b8:	42bb      	cmp	r3, r7
 80127ba:	4622      	mov	r2, r4
 80127bc:	d304      	bcc.n	80127c8 <__exponent+0x50>
 80127be:	1a10      	subs	r0, r2, r0
 80127c0:	b003      	add	sp, #12
 80127c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127c4:	4613      	mov	r3, r2
 80127c6:	e7e7      	b.n	8012798 <__exponent+0x20>
 80127c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80127cc:	f804 2b01 	strb.w	r2, [r4], #1
 80127d0:	e7f2      	b.n	80127b8 <__exponent+0x40>
 80127d2:	2330      	movs	r3, #48	; 0x30
 80127d4:	4419      	add	r1, r3
 80127d6:	7083      	strb	r3, [r0, #2]
 80127d8:	1d02      	adds	r2, r0, #4
 80127da:	70c1      	strb	r1, [r0, #3]
 80127dc:	e7ef      	b.n	80127be <__exponent+0x46>
	...

080127e0 <_printf_float>:
 80127e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	b08d      	sub	sp, #52	; 0x34
 80127e6:	460c      	mov	r4, r1
 80127e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80127ec:	4616      	mov	r6, r2
 80127ee:	461f      	mov	r7, r3
 80127f0:	4605      	mov	r5, r0
 80127f2:	f003 f995 	bl	8015b20 <_localeconv_r>
 80127f6:	6803      	ldr	r3, [r0, #0]
 80127f8:	9304      	str	r3, [sp, #16]
 80127fa:	4618      	mov	r0, r3
 80127fc:	f7ed fd00 	bl	8000200 <strlen>
 8012800:	2300      	movs	r3, #0
 8012802:	930a      	str	r3, [sp, #40]	; 0x28
 8012804:	f8d8 3000 	ldr.w	r3, [r8]
 8012808:	9005      	str	r0, [sp, #20]
 801280a:	3307      	adds	r3, #7
 801280c:	f023 0307 	bic.w	r3, r3, #7
 8012810:	f103 0208 	add.w	r2, r3, #8
 8012814:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012818:	f8d4 b000 	ldr.w	fp, [r4]
 801281c:	f8c8 2000 	str.w	r2, [r8]
 8012820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012824:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012828:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801282c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012830:	9307      	str	r3, [sp, #28]
 8012832:	f8cd 8018 	str.w	r8, [sp, #24]
 8012836:	f04f 32ff 	mov.w	r2, #4294967295
 801283a:	4ba7      	ldr	r3, [pc, #668]	; (8012ad8 <_printf_float+0x2f8>)
 801283c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012840:	f7ee f98c 	bl	8000b5c <__aeabi_dcmpun>
 8012844:	bb70      	cbnz	r0, 80128a4 <_printf_float+0xc4>
 8012846:	f04f 32ff 	mov.w	r2, #4294967295
 801284a:	4ba3      	ldr	r3, [pc, #652]	; (8012ad8 <_printf_float+0x2f8>)
 801284c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012850:	f7ee f966 	bl	8000b20 <__aeabi_dcmple>
 8012854:	bb30      	cbnz	r0, 80128a4 <_printf_float+0xc4>
 8012856:	2200      	movs	r2, #0
 8012858:	2300      	movs	r3, #0
 801285a:	4640      	mov	r0, r8
 801285c:	4649      	mov	r1, r9
 801285e:	f7ee f955 	bl	8000b0c <__aeabi_dcmplt>
 8012862:	b110      	cbz	r0, 801286a <_printf_float+0x8a>
 8012864:	232d      	movs	r3, #45	; 0x2d
 8012866:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801286a:	4a9c      	ldr	r2, [pc, #624]	; (8012adc <_printf_float+0x2fc>)
 801286c:	4b9c      	ldr	r3, [pc, #624]	; (8012ae0 <_printf_float+0x300>)
 801286e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012872:	bf8c      	ite	hi
 8012874:	4690      	movhi	r8, r2
 8012876:	4698      	movls	r8, r3
 8012878:	2303      	movs	r3, #3
 801287a:	f02b 0204 	bic.w	r2, fp, #4
 801287e:	6123      	str	r3, [r4, #16]
 8012880:	6022      	str	r2, [r4, #0]
 8012882:	f04f 0900 	mov.w	r9, #0
 8012886:	9700      	str	r7, [sp, #0]
 8012888:	4633      	mov	r3, r6
 801288a:	aa0b      	add	r2, sp, #44	; 0x2c
 801288c:	4621      	mov	r1, r4
 801288e:	4628      	mov	r0, r5
 8012890:	f000 f9e6 	bl	8012c60 <_printf_common>
 8012894:	3001      	adds	r0, #1
 8012896:	f040 808d 	bne.w	80129b4 <_printf_float+0x1d4>
 801289a:	f04f 30ff 	mov.w	r0, #4294967295
 801289e:	b00d      	add	sp, #52	; 0x34
 80128a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128a4:	4642      	mov	r2, r8
 80128a6:	464b      	mov	r3, r9
 80128a8:	4640      	mov	r0, r8
 80128aa:	4649      	mov	r1, r9
 80128ac:	f7ee f956 	bl	8000b5c <__aeabi_dcmpun>
 80128b0:	b110      	cbz	r0, 80128b8 <_printf_float+0xd8>
 80128b2:	4a8c      	ldr	r2, [pc, #560]	; (8012ae4 <_printf_float+0x304>)
 80128b4:	4b8c      	ldr	r3, [pc, #560]	; (8012ae8 <_printf_float+0x308>)
 80128b6:	e7da      	b.n	801286e <_printf_float+0x8e>
 80128b8:	6861      	ldr	r1, [r4, #4]
 80128ba:	1c4b      	adds	r3, r1, #1
 80128bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80128c0:	a80a      	add	r0, sp, #40	; 0x28
 80128c2:	d13e      	bne.n	8012942 <_printf_float+0x162>
 80128c4:	2306      	movs	r3, #6
 80128c6:	6063      	str	r3, [r4, #4]
 80128c8:	2300      	movs	r3, #0
 80128ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80128ce:	ab09      	add	r3, sp, #36	; 0x24
 80128d0:	9300      	str	r3, [sp, #0]
 80128d2:	ec49 8b10 	vmov	d0, r8, r9
 80128d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80128da:	6022      	str	r2, [r4, #0]
 80128dc:	f8cd a004 	str.w	sl, [sp, #4]
 80128e0:	6861      	ldr	r1, [r4, #4]
 80128e2:	4628      	mov	r0, r5
 80128e4:	f7ff fee7 	bl	80126b6 <__cvt>
 80128e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80128ec:	2b47      	cmp	r3, #71	; 0x47
 80128ee:	4680      	mov	r8, r0
 80128f0:	d109      	bne.n	8012906 <_printf_float+0x126>
 80128f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128f4:	1cd8      	adds	r0, r3, #3
 80128f6:	db02      	blt.n	80128fe <_printf_float+0x11e>
 80128f8:	6862      	ldr	r2, [r4, #4]
 80128fa:	4293      	cmp	r3, r2
 80128fc:	dd47      	ble.n	801298e <_printf_float+0x1ae>
 80128fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8012902:	fa5f fa8a 	uxtb.w	sl, sl
 8012906:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801290a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801290c:	d824      	bhi.n	8012958 <_printf_float+0x178>
 801290e:	3901      	subs	r1, #1
 8012910:	4652      	mov	r2, sl
 8012912:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012916:	9109      	str	r1, [sp, #36]	; 0x24
 8012918:	f7ff ff2e 	bl	8012778 <__exponent>
 801291c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801291e:	1813      	adds	r3, r2, r0
 8012920:	2a01      	cmp	r2, #1
 8012922:	4681      	mov	r9, r0
 8012924:	6123      	str	r3, [r4, #16]
 8012926:	dc02      	bgt.n	801292e <_printf_float+0x14e>
 8012928:	6822      	ldr	r2, [r4, #0]
 801292a:	07d1      	lsls	r1, r2, #31
 801292c:	d501      	bpl.n	8012932 <_printf_float+0x152>
 801292e:	3301      	adds	r3, #1
 8012930:	6123      	str	r3, [r4, #16]
 8012932:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012936:	2b00      	cmp	r3, #0
 8012938:	d0a5      	beq.n	8012886 <_printf_float+0xa6>
 801293a:	232d      	movs	r3, #45	; 0x2d
 801293c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012940:	e7a1      	b.n	8012886 <_printf_float+0xa6>
 8012942:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012946:	f000 8177 	beq.w	8012c38 <_printf_float+0x458>
 801294a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801294e:	d1bb      	bne.n	80128c8 <_printf_float+0xe8>
 8012950:	2900      	cmp	r1, #0
 8012952:	d1b9      	bne.n	80128c8 <_printf_float+0xe8>
 8012954:	2301      	movs	r3, #1
 8012956:	e7b6      	b.n	80128c6 <_printf_float+0xe6>
 8012958:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801295c:	d119      	bne.n	8012992 <_printf_float+0x1b2>
 801295e:	2900      	cmp	r1, #0
 8012960:	6863      	ldr	r3, [r4, #4]
 8012962:	dd0c      	ble.n	801297e <_printf_float+0x19e>
 8012964:	6121      	str	r1, [r4, #16]
 8012966:	b913      	cbnz	r3, 801296e <_printf_float+0x18e>
 8012968:	6822      	ldr	r2, [r4, #0]
 801296a:	07d2      	lsls	r2, r2, #31
 801296c:	d502      	bpl.n	8012974 <_printf_float+0x194>
 801296e:	3301      	adds	r3, #1
 8012970:	440b      	add	r3, r1
 8012972:	6123      	str	r3, [r4, #16]
 8012974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012976:	65a3      	str	r3, [r4, #88]	; 0x58
 8012978:	f04f 0900 	mov.w	r9, #0
 801297c:	e7d9      	b.n	8012932 <_printf_float+0x152>
 801297e:	b913      	cbnz	r3, 8012986 <_printf_float+0x1a6>
 8012980:	6822      	ldr	r2, [r4, #0]
 8012982:	07d0      	lsls	r0, r2, #31
 8012984:	d501      	bpl.n	801298a <_printf_float+0x1aa>
 8012986:	3302      	adds	r3, #2
 8012988:	e7f3      	b.n	8012972 <_printf_float+0x192>
 801298a:	2301      	movs	r3, #1
 801298c:	e7f1      	b.n	8012972 <_printf_float+0x192>
 801298e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012992:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012996:	4293      	cmp	r3, r2
 8012998:	db05      	blt.n	80129a6 <_printf_float+0x1c6>
 801299a:	6822      	ldr	r2, [r4, #0]
 801299c:	6123      	str	r3, [r4, #16]
 801299e:	07d1      	lsls	r1, r2, #31
 80129a0:	d5e8      	bpl.n	8012974 <_printf_float+0x194>
 80129a2:	3301      	adds	r3, #1
 80129a4:	e7e5      	b.n	8012972 <_printf_float+0x192>
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	bfd4      	ite	le
 80129aa:	f1c3 0302 	rsble	r3, r3, #2
 80129ae:	2301      	movgt	r3, #1
 80129b0:	4413      	add	r3, r2
 80129b2:	e7de      	b.n	8012972 <_printf_float+0x192>
 80129b4:	6823      	ldr	r3, [r4, #0]
 80129b6:	055a      	lsls	r2, r3, #21
 80129b8:	d407      	bmi.n	80129ca <_printf_float+0x1ea>
 80129ba:	6923      	ldr	r3, [r4, #16]
 80129bc:	4642      	mov	r2, r8
 80129be:	4631      	mov	r1, r6
 80129c0:	4628      	mov	r0, r5
 80129c2:	47b8      	blx	r7
 80129c4:	3001      	adds	r0, #1
 80129c6:	d12b      	bne.n	8012a20 <_printf_float+0x240>
 80129c8:	e767      	b.n	801289a <_printf_float+0xba>
 80129ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80129ce:	f240 80dc 	bls.w	8012b8a <_printf_float+0x3aa>
 80129d2:	2200      	movs	r2, #0
 80129d4:	2300      	movs	r3, #0
 80129d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80129da:	f7ee f88d 	bl	8000af8 <__aeabi_dcmpeq>
 80129de:	2800      	cmp	r0, #0
 80129e0:	d033      	beq.n	8012a4a <_printf_float+0x26a>
 80129e2:	2301      	movs	r3, #1
 80129e4:	4a41      	ldr	r2, [pc, #260]	; (8012aec <_printf_float+0x30c>)
 80129e6:	4631      	mov	r1, r6
 80129e8:	4628      	mov	r0, r5
 80129ea:	47b8      	blx	r7
 80129ec:	3001      	adds	r0, #1
 80129ee:	f43f af54 	beq.w	801289a <_printf_float+0xba>
 80129f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129f6:	429a      	cmp	r2, r3
 80129f8:	db02      	blt.n	8012a00 <_printf_float+0x220>
 80129fa:	6823      	ldr	r3, [r4, #0]
 80129fc:	07d8      	lsls	r0, r3, #31
 80129fe:	d50f      	bpl.n	8012a20 <_printf_float+0x240>
 8012a00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a04:	4631      	mov	r1, r6
 8012a06:	4628      	mov	r0, r5
 8012a08:	47b8      	blx	r7
 8012a0a:	3001      	adds	r0, #1
 8012a0c:	f43f af45 	beq.w	801289a <_printf_float+0xba>
 8012a10:	f04f 0800 	mov.w	r8, #0
 8012a14:	f104 091a 	add.w	r9, r4, #26
 8012a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	4543      	cmp	r3, r8
 8012a1e:	dc09      	bgt.n	8012a34 <_printf_float+0x254>
 8012a20:	6823      	ldr	r3, [r4, #0]
 8012a22:	079b      	lsls	r3, r3, #30
 8012a24:	f100 8103 	bmi.w	8012c2e <_printf_float+0x44e>
 8012a28:	68e0      	ldr	r0, [r4, #12]
 8012a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a2c:	4298      	cmp	r0, r3
 8012a2e:	bfb8      	it	lt
 8012a30:	4618      	movlt	r0, r3
 8012a32:	e734      	b.n	801289e <_printf_float+0xbe>
 8012a34:	2301      	movs	r3, #1
 8012a36:	464a      	mov	r2, r9
 8012a38:	4631      	mov	r1, r6
 8012a3a:	4628      	mov	r0, r5
 8012a3c:	47b8      	blx	r7
 8012a3e:	3001      	adds	r0, #1
 8012a40:	f43f af2b 	beq.w	801289a <_printf_float+0xba>
 8012a44:	f108 0801 	add.w	r8, r8, #1
 8012a48:	e7e6      	b.n	8012a18 <_printf_float+0x238>
 8012a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	dc2b      	bgt.n	8012aa8 <_printf_float+0x2c8>
 8012a50:	2301      	movs	r3, #1
 8012a52:	4a26      	ldr	r2, [pc, #152]	; (8012aec <_printf_float+0x30c>)
 8012a54:	4631      	mov	r1, r6
 8012a56:	4628      	mov	r0, r5
 8012a58:	47b8      	blx	r7
 8012a5a:	3001      	adds	r0, #1
 8012a5c:	f43f af1d 	beq.w	801289a <_printf_float+0xba>
 8012a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a62:	b923      	cbnz	r3, 8012a6e <_printf_float+0x28e>
 8012a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a66:	b913      	cbnz	r3, 8012a6e <_printf_float+0x28e>
 8012a68:	6823      	ldr	r3, [r4, #0]
 8012a6a:	07d9      	lsls	r1, r3, #31
 8012a6c:	d5d8      	bpl.n	8012a20 <_printf_float+0x240>
 8012a6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a72:	4631      	mov	r1, r6
 8012a74:	4628      	mov	r0, r5
 8012a76:	47b8      	blx	r7
 8012a78:	3001      	adds	r0, #1
 8012a7a:	f43f af0e 	beq.w	801289a <_printf_float+0xba>
 8012a7e:	f04f 0900 	mov.w	r9, #0
 8012a82:	f104 0a1a 	add.w	sl, r4, #26
 8012a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a88:	425b      	negs	r3, r3
 8012a8a:	454b      	cmp	r3, r9
 8012a8c:	dc01      	bgt.n	8012a92 <_printf_float+0x2b2>
 8012a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a90:	e794      	b.n	80129bc <_printf_float+0x1dc>
 8012a92:	2301      	movs	r3, #1
 8012a94:	4652      	mov	r2, sl
 8012a96:	4631      	mov	r1, r6
 8012a98:	4628      	mov	r0, r5
 8012a9a:	47b8      	blx	r7
 8012a9c:	3001      	adds	r0, #1
 8012a9e:	f43f aefc 	beq.w	801289a <_printf_float+0xba>
 8012aa2:	f109 0901 	add.w	r9, r9, #1
 8012aa6:	e7ee      	b.n	8012a86 <_printf_float+0x2a6>
 8012aa8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012aaa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012aac:	429a      	cmp	r2, r3
 8012aae:	bfa8      	it	ge
 8012ab0:	461a      	movge	r2, r3
 8012ab2:	2a00      	cmp	r2, #0
 8012ab4:	4691      	mov	r9, r2
 8012ab6:	dd07      	ble.n	8012ac8 <_printf_float+0x2e8>
 8012ab8:	4613      	mov	r3, r2
 8012aba:	4631      	mov	r1, r6
 8012abc:	4642      	mov	r2, r8
 8012abe:	4628      	mov	r0, r5
 8012ac0:	47b8      	blx	r7
 8012ac2:	3001      	adds	r0, #1
 8012ac4:	f43f aee9 	beq.w	801289a <_printf_float+0xba>
 8012ac8:	f104 031a 	add.w	r3, r4, #26
 8012acc:	f04f 0b00 	mov.w	fp, #0
 8012ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ad4:	9306      	str	r3, [sp, #24]
 8012ad6:	e015      	b.n	8012b04 <_printf_float+0x324>
 8012ad8:	7fefffff 	.word	0x7fefffff
 8012adc:	08017b78 	.word	0x08017b78
 8012ae0:	08017b74 	.word	0x08017b74
 8012ae4:	08017b80 	.word	0x08017b80
 8012ae8:	08017b7c 	.word	0x08017b7c
 8012aec:	08017da3 	.word	0x08017da3
 8012af0:	2301      	movs	r3, #1
 8012af2:	9a06      	ldr	r2, [sp, #24]
 8012af4:	4631      	mov	r1, r6
 8012af6:	4628      	mov	r0, r5
 8012af8:	47b8      	blx	r7
 8012afa:	3001      	adds	r0, #1
 8012afc:	f43f aecd 	beq.w	801289a <_printf_float+0xba>
 8012b00:	f10b 0b01 	add.w	fp, fp, #1
 8012b04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012b08:	ebaa 0309 	sub.w	r3, sl, r9
 8012b0c:	455b      	cmp	r3, fp
 8012b0e:	dcef      	bgt.n	8012af0 <_printf_float+0x310>
 8012b10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b14:	429a      	cmp	r2, r3
 8012b16:	44d0      	add	r8, sl
 8012b18:	db15      	blt.n	8012b46 <_printf_float+0x366>
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	07da      	lsls	r2, r3, #31
 8012b1e:	d412      	bmi.n	8012b46 <_printf_float+0x366>
 8012b20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b24:	eba3 020a 	sub.w	r2, r3, sl
 8012b28:	eba3 0a01 	sub.w	sl, r3, r1
 8012b2c:	4592      	cmp	sl, r2
 8012b2e:	bfa8      	it	ge
 8012b30:	4692      	movge	sl, r2
 8012b32:	f1ba 0f00 	cmp.w	sl, #0
 8012b36:	dc0e      	bgt.n	8012b56 <_printf_float+0x376>
 8012b38:	f04f 0800 	mov.w	r8, #0
 8012b3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b40:	f104 091a 	add.w	r9, r4, #26
 8012b44:	e019      	b.n	8012b7a <_printf_float+0x39a>
 8012b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	d1e5      	bne.n	8012b20 <_printf_float+0x340>
 8012b54:	e6a1      	b.n	801289a <_printf_float+0xba>
 8012b56:	4653      	mov	r3, sl
 8012b58:	4642      	mov	r2, r8
 8012b5a:	4631      	mov	r1, r6
 8012b5c:	4628      	mov	r0, r5
 8012b5e:	47b8      	blx	r7
 8012b60:	3001      	adds	r0, #1
 8012b62:	d1e9      	bne.n	8012b38 <_printf_float+0x358>
 8012b64:	e699      	b.n	801289a <_printf_float+0xba>
 8012b66:	2301      	movs	r3, #1
 8012b68:	464a      	mov	r2, r9
 8012b6a:	4631      	mov	r1, r6
 8012b6c:	4628      	mov	r0, r5
 8012b6e:	47b8      	blx	r7
 8012b70:	3001      	adds	r0, #1
 8012b72:	f43f ae92 	beq.w	801289a <_printf_float+0xba>
 8012b76:	f108 0801 	add.w	r8, r8, #1
 8012b7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b7e:	1a9b      	subs	r3, r3, r2
 8012b80:	eba3 030a 	sub.w	r3, r3, sl
 8012b84:	4543      	cmp	r3, r8
 8012b86:	dcee      	bgt.n	8012b66 <_printf_float+0x386>
 8012b88:	e74a      	b.n	8012a20 <_printf_float+0x240>
 8012b8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b8c:	2a01      	cmp	r2, #1
 8012b8e:	dc01      	bgt.n	8012b94 <_printf_float+0x3b4>
 8012b90:	07db      	lsls	r3, r3, #31
 8012b92:	d53a      	bpl.n	8012c0a <_printf_float+0x42a>
 8012b94:	2301      	movs	r3, #1
 8012b96:	4642      	mov	r2, r8
 8012b98:	4631      	mov	r1, r6
 8012b9a:	4628      	mov	r0, r5
 8012b9c:	47b8      	blx	r7
 8012b9e:	3001      	adds	r0, #1
 8012ba0:	f43f ae7b 	beq.w	801289a <_printf_float+0xba>
 8012ba4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ba8:	4631      	mov	r1, r6
 8012baa:	4628      	mov	r0, r5
 8012bac:	47b8      	blx	r7
 8012bae:	3001      	adds	r0, #1
 8012bb0:	f108 0801 	add.w	r8, r8, #1
 8012bb4:	f43f ae71 	beq.w	801289a <_printf_float+0xba>
 8012bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bba:	2200      	movs	r2, #0
 8012bbc:	f103 3aff 	add.w	sl, r3, #4294967295
 8012bc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f7ed ff97 	bl	8000af8 <__aeabi_dcmpeq>
 8012bca:	b9c8      	cbnz	r0, 8012c00 <_printf_float+0x420>
 8012bcc:	4653      	mov	r3, sl
 8012bce:	4642      	mov	r2, r8
 8012bd0:	4631      	mov	r1, r6
 8012bd2:	4628      	mov	r0, r5
 8012bd4:	47b8      	blx	r7
 8012bd6:	3001      	adds	r0, #1
 8012bd8:	d10e      	bne.n	8012bf8 <_printf_float+0x418>
 8012bda:	e65e      	b.n	801289a <_printf_float+0xba>
 8012bdc:	2301      	movs	r3, #1
 8012bde:	4652      	mov	r2, sl
 8012be0:	4631      	mov	r1, r6
 8012be2:	4628      	mov	r0, r5
 8012be4:	47b8      	blx	r7
 8012be6:	3001      	adds	r0, #1
 8012be8:	f43f ae57 	beq.w	801289a <_printf_float+0xba>
 8012bec:	f108 0801 	add.w	r8, r8, #1
 8012bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	4543      	cmp	r3, r8
 8012bf6:	dcf1      	bgt.n	8012bdc <_printf_float+0x3fc>
 8012bf8:	464b      	mov	r3, r9
 8012bfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012bfe:	e6de      	b.n	80129be <_printf_float+0x1de>
 8012c00:	f04f 0800 	mov.w	r8, #0
 8012c04:	f104 0a1a 	add.w	sl, r4, #26
 8012c08:	e7f2      	b.n	8012bf0 <_printf_float+0x410>
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	e7df      	b.n	8012bce <_printf_float+0x3ee>
 8012c0e:	2301      	movs	r3, #1
 8012c10:	464a      	mov	r2, r9
 8012c12:	4631      	mov	r1, r6
 8012c14:	4628      	mov	r0, r5
 8012c16:	47b8      	blx	r7
 8012c18:	3001      	adds	r0, #1
 8012c1a:	f43f ae3e 	beq.w	801289a <_printf_float+0xba>
 8012c1e:	f108 0801 	add.w	r8, r8, #1
 8012c22:	68e3      	ldr	r3, [r4, #12]
 8012c24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c26:	1a9b      	subs	r3, r3, r2
 8012c28:	4543      	cmp	r3, r8
 8012c2a:	dcf0      	bgt.n	8012c0e <_printf_float+0x42e>
 8012c2c:	e6fc      	b.n	8012a28 <_printf_float+0x248>
 8012c2e:	f04f 0800 	mov.w	r8, #0
 8012c32:	f104 0919 	add.w	r9, r4, #25
 8012c36:	e7f4      	b.n	8012c22 <_printf_float+0x442>
 8012c38:	2900      	cmp	r1, #0
 8012c3a:	f43f ae8b 	beq.w	8012954 <_printf_float+0x174>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012c44:	ab09      	add	r3, sp, #36	; 0x24
 8012c46:	9300      	str	r3, [sp, #0]
 8012c48:	ec49 8b10 	vmov	d0, r8, r9
 8012c4c:	6022      	str	r2, [r4, #0]
 8012c4e:	f8cd a004 	str.w	sl, [sp, #4]
 8012c52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012c56:	4628      	mov	r0, r5
 8012c58:	f7ff fd2d 	bl	80126b6 <__cvt>
 8012c5c:	4680      	mov	r8, r0
 8012c5e:	e648      	b.n	80128f2 <_printf_float+0x112>

08012c60 <_printf_common>:
 8012c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c64:	4691      	mov	r9, r2
 8012c66:	461f      	mov	r7, r3
 8012c68:	688a      	ldr	r2, [r1, #8]
 8012c6a:	690b      	ldr	r3, [r1, #16]
 8012c6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c70:	4293      	cmp	r3, r2
 8012c72:	bfb8      	it	lt
 8012c74:	4613      	movlt	r3, r2
 8012c76:	f8c9 3000 	str.w	r3, [r9]
 8012c7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c7e:	4606      	mov	r6, r0
 8012c80:	460c      	mov	r4, r1
 8012c82:	b112      	cbz	r2, 8012c8a <_printf_common+0x2a>
 8012c84:	3301      	adds	r3, #1
 8012c86:	f8c9 3000 	str.w	r3, [r9]
 8012c8a:	6823      	ldr	r3, [r4, #0]
 8012c8c:	0699      	lsls	r1, r3, #26
 8012c8e:	bf42      	ittt	mi
 8012c90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012c94:	3302      	addmi	r3, #2
 8012c96:	f8c9 3000 	strmi.w	r3, [r9]
 8012c9a:	6825      	ldr	r5, [r4, #0]
 8012c9c:	f015 0506 	ands.w	r5, r5, #6
 8012ca0:	d107      	bne.n	8012cb2 <_printf_common+0x52>
 8012ca2:	f104 0a19 	add.w	sl, r4, #25
 8012ca6:	68e3      	ldr	r3, [r4, #12]
 8012ca8:	f8d9 2000 	ldr.w	r2, [r9]
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	42ab      	cmp	r3, r5
 8012cb0:	dc28      	bgt.n	8012d04 <_printf_common+0xa4>
 8012cb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012cb6:	6822      	ldr	r2, [r4, #0]
 8012cb8:	3300      	adds	r3, #0
 8012cba:	bf18      	it	ne
 8012cbc:	2301      	movne	r3, #1
 8012cbe:	0692      	lsls	r2, r2, #26
 8012cc0:	d42d      	bmi.n	8012d1e <_printf_common+0xbe>
 8012cc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cc6:	4639      	mov	r1, r7
 8012cc8:	4630      	mov	r0, r6
 8012cca:	47c0      	blx	r8
 8012ccc:	3001      	adds	r0, #1
 8012cce:	d020      	beq.n	8012d12 <_printf_common+0xb2>
 8012cd0:	6823      	ldr	r3, [r4, #0]
 8012cd2:	68e5      	ldr	r5, [r4, #12]
 8012cd4:	f8d9 2000 	ldr.w	r2, [r9]
 8012cd8:	f003 0306 	and.w	r3, r3, #6
 8012cdc:	2b04      	cmp	r3, #4
 8012cde:	bf08      	it	eq
 8012ce0:	1aad      	subeq	r5, r5, r2
 8012ce2:	68a3      	ldr	r3, [r4, #8]
 8012ce4:	6922      	ldr	r2, [r4, #16]
 8012ce6:	bf0c      	ite	eq
 8012ce8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cec:	2500      	movne	r5, #0
 8012cee:	4293      	cmp	r3, r2
 8012cf0:	bfc4      	itt	gt
 8012cf2:	1a9b      	subgt	r3, r3, r2
 8012cf4:	18ed      	addgt	r5, r5, r3
 8012cf6:	f04f 0900 	mov.w	r9, #0
 8012cfa:	341a      	adds	r4, #26
 8012cfc:	454d      	cmp	r5, r9
 8012cfe:	d11a      	bne.n	8012d36 <_printf_common+0xd6>
 8012d00:	2000      	movs	r0, #0
 8012d02:	e008      	b.n	8012d16 <_printf_common+0xb6>
 8012d04:	2301      	movs	r3, #1
 8012d06:	4652      	mov	r2, sl
 8012d08:	4639      	mov	r1, r7
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	47c0      	blx	r8
 8012d0e:	3001      	adds	r0, #1
 8012d10:	d103      	bne.n	8012d1a <_printf_common+0xba>
 8012d12:	f04f 30ff 	mov.w	r0, #4294967295
 8012d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d1a:	3501      	adds	r5, #1
 8012d1c:	e7c3      	b.n	8012ca6 <_printf_common+0x46>
 8012d1e:	18e1      	adds	r1, r4, r3
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	2030      	movs	r0, #48	; 0x30
 8012d24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d28:	4422      	add	r2, r4
 8012d2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d32:	3302      	adds	r3, #2
 8012d34:	e7c5      	b.n	8012cc2 <_printf_common+0x62>
 8012d36:	2301      	movs	r3, #1
 8012d38:	4622      	mov	r2, r4
 8012d3a:	4639      	mov	r1, r7
 8012d3c:	4630      	mov	r0, r6
 8012d3e:	47c0      	blx	r8
 8012d40:	3001      	adds	r0, #1
 8012d42:	d0e6      	beq.n	8012d12 <_printf_common+0xb2>
 8012d44:	f109 0901 	add.w	r9, r9, #1
 8012d48:	e7d8      	b.n	8012cfc <_printf_common+0x9c>
	...

08012d4c <_printf_i>:
 8012d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012d54:	460c      	mov	r4, r1
 8012d56:	7e09      	ldrb	r1, [r1, #24]
 8012d58:	b085      	sub	sp, #20
 8012d5a:	296e      	cmp	r1, #110	; 0x6e
 8012d5c:	4617      	mov	r7, r2
 8012d5e:	4606      	mov	r6, r0
 8012d60:	4698      	mov	r8, r3
 8012d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d64:	f000 80b3 	beq.w	8012ece <_printf_i+0x182>
 8012d68:	d822      	bhi.n	8012db0 <_printf_i+0x64>
 8012d6a:	2963      	cmp	r1, #99	; 0x63
 8012d6c:	d036      	beq.n	8012ddc <_printf_i+0x90>
 8012d6e:	d80a      	bhi.n	8012d86 <_printf_i+0x3a>
 8012d70:	2900      	cmp	r1, #0
 8012d72:	f000 80b9 	beq.w	8012ee8 <_printf_i+0x19c>
 8012d76:	2958      	cmp	r1, #88	; 0x58
 8012d78:	f000 8083 	beq.w	8012e82 <_printf_i+0x136>
 8012d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012d84:	e032      	b.n	8012dec <_printf_i+0xa0>
 8012d86:	2964      	cmp	r1, #100	; 0x64
 8012d88:	d001      	beq.n	8012d8e <_printf_i+0x42>
 8012d8a:	2969      	cmp	r1, #105	; 0x69
 8012d8c:	d1f6      	bne.n	8012d7c <_printf_i+0x30>
 8012d8e:	6820      	ldr	r0, [r4, #0]
 8012d90:	6813      	ldr	r3, [r2, #0]
 8012d92:	0605      	lsls	r5, r0, #24
 8012d94:	f103 0104 	add.w	r1, r3, #4
 8012d98:	d52a      	bpl.n	8012df0 <_printf_i+0xa4>
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	6011      	str	r1, [r2, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	da03      	bge.n	8012daa <_printf_i+0x5e>
 8012da2:	222d      	movs	r2, #45	; 0x2d
 8012da4:	425b      	negs	r3, r3
 8012da6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012daa:	486f      	ldr	r0, [pc, #444]	; (8012f68 <_printf_i+0x21c>)
 8012dac:	220a      	movs	r2, #10
 8012dae:	e039      	b.n	8012e24 <_printf_i+0xd8>
 8012db0:	2973      	cmp	r1, #115	; 0x73
 8012db2:	f000 809d 	beq.w	8012ef0 <_printf_i+0x1a4>
 8012db6:	d808      	bhi.n	8012dca <_printf_i+0x7e>
 8012db8:	296f      	cmp	r1, #111	; 0x6f
 8012dba:	d020      	beq.n	8012dfe <_printf_i+0xb2>
 8012dbc:	2970      	cmp	r1, #112	; 0x70
 8012dbe:	d1dd      	bne.n	8012d7c <_printf_i+0x30>
 8012dc0:	6823      	ldr	r3, [r4, #0]
 8012dc2:	f043 0320 	orr.w	r3, r3, #32
 8012dc6:	6023      	str	r3, [r4, #0]
 8012dc8:	e003      	b.n	8012dd2 <_printf_i+0x86>
 8012dca:	2975      	cmp	r1, #117	; 0x75
 8012dcc:	d017      	beq.n	8012dfe <_printf_i+0xb2>
 8012dce:	2978      	cmp	r1, #120	; 0x78
 8012dd0:	d1d4      	bne.n	8012d7c <_printf_i+0x30>
 8012dd2:	2378      	movs	r3, #120	; 0x78
 8012dd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012dd8:	4864      	ldr	r0, [pc, #400]	; (8012f6c <_printf_i+0x220>)
 8012dda:	e055      	b.n	8012e88 <_printf_i+0x13c>
 8012ddc:	6813      	ldr	r3, [r2, #0]
 8012dde:	1d19      	adds	r1, r3, #4
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	6011      	str	r1, [r2, #0]
 8012de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dec:	2301      	movs	r3, #1
 8012dee:	e08c      	b.n	8012f0a <_printf_i+0x1be>
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	6011      	str	r1, [r2, #0]
 8012df4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012df8:	bf18      	it	ne
 8012dfa:	b21b      	sxthne	r3, r3
 8012dfc:	e7cf      	b.n	8012d9e <_printf_i+0x52>
 8012dfe:	6813      	ldr	r3, [r2, #0]
 8012e00:	6825      	ldr	r5, [r4, #0]
 8012e02:	1d18      	adds	r0, r3, #4
 8012e04:	6010      	str	r0, [r2, #0]
 8012e06:	0628      	lsls	r0, r5, #24
 8012e08:	d501      	bpl.n	8012e0e <_printf_i+0xc2>
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	e002      	b.n	8012e14 <_printf_i+0xc8>
 8012e0e:	0668      	lsls	r0, r5, #25
 8012e10:	d5fb      	bpl.n	8012e0a <_printf_i+0xbe>
 8012e12:	881b      	ldrh	r3, [r3, #0]
 8012e14:	4854      	ldr	r0, [pc, #336]	; (8012f68 <_printf_i+0x21c>)
 8012e16:	296f      	cmp	r1, #111	; 0x6f
 8012e18:	bf14      	ite	ne
 8012e1a:	220a      	movne	r2, #10
 8012e1c:	2208      	moveq	r2, #8
 8012e1e:	2100      	movs	r1, #0
 8012e20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e24:	6865      	ldr	r5, [r4, #4]
 8012e26:	60a5      	str	r5, [r4, #8]
 8012e28:	2d00      	cmp	r5, #0
 8012e2a:	f2c0 8095 	blt.w	8012f58 <_printf_i+0x20c>
 8012e2e:	6821      	ldr	r1, [r4, #0]
 8012e30:	f021 0104 	bic.w	r1, r1, #4
 8012e34:	6021      	str	r1, [r4, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d13d      	bne.n	8012eb6 <_printf_i+0x16a>
 8012e3a:	2d00      	cmp	r5, #0
 8012e3c:	f040 808e 	bne.w	8012f5c <_printf_i+0x210>
 8012e40:	4665      	mov	r5, ip
 8012e42:	2a08      	cmp	r2, #8
 8012e44:	d10b      	bne.n	8012e5e <_printf_i+0x112>
 8012e46:	6823      	ldr	r3, [r4, #0]
 8012e48:	07db      	lsls	r3, r3, #31
 8012e4a:	d508      	bpl.n	8012e5e <_printf_i+0x112>
 8012e4c:	6923      	ldr	r3, [r4, #16]
 8012e4e:	6862      	ldr	r2, [r4, #4]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	bfde      	ittt	le
 8012e54:	2330      	movle	r3, #48	; 0x30
 8012e56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e5e:	ebac 0305 	sub.w	r3, ip, r5
 8012e62:	6123      	str	r3, [r4, #16]
 8012e64:	f8cd 8000 	str.w	r8, [sp]
 8012e68:	463b      	mov	r3, r7
 8012e6a:	aa03      	add	r2, sp, #12
 8012e6c:	4621      	mov	r1, r4
 8012e6e:	4630      	mov	r0, r6
 8012e70:	f7ff fef6 	bl	8012c60 <_printf_common>
 8012e74:	3001      	adds	r0, #1
 8012e76:	d14d      	bne.n	8012f14 <_printf_i+0x1c8>
 8012e78:	f04f 30ff 	mov.w	r0, #4294967295
 8012e7c:	b005      	add	sp, #20
 8012e7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012e82:	4839      	ldr	r0, [pc, #228]	; (8012f68 <_printf_i+0x21c>)
 8012e84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012e88:	6813      	ldr	r3, [r2, #0]
 8012e8a:	6821      	ldr	r1, [r4, #0]
 8012e8c:	1d1d      	adds	r5, r3, #4
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	6015      	str	r5, [r2, #0]
 8012e92:	060a      	lsls	r2, r1, #24
 8012e94:	d50b      	bpl.n	8012eae <_printf_i+0x162>
 8012e96:	07ca      	lsls	r2, r1, #31
 8012e98:	bf44      	itt	mi
 8012e9a:	f041 0120 	orrmi.w	r1, r1, #32
 8012e9e:	6021      	strmi	r1, [r4, #0]
 8012ea0:	b91b      	cbnz	r3, 8012eaa <_printf_i+0x15e>
 8012ea2:	6822      	ldr	r2, [r4, #0]
 8012ea4:	f022 0220 	bic.w	r2, r2, #32
 8012ea8:	6022      	str	r2, [r4, #0]
 8012eaa:	2210      	movs	r2, #16
 8012eac:	e7b7      	b.n	8012e1e <_printf_i+0xd2>
 8012eae:	064d      	lsls	r5, r1, #25
 8012eb0:	bf48      	it	mi
 8012eb2:	b29b      	uxthmi	r3, r3
 8012eb4:	e7ef      	b.n	8012e96 <_printf_i+0x14a>
 8012eb6:	4665      	mov	r5, ip
 8012eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ebc:	fb02 3311 	mls	r3, r2, r1, r3
 8012ec0:	5cc3      	ldrb	r3, [r0, r3]
 8012ec2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	2900      	cmp	r1, #0
 8012eca:	d1f5      	bne.n	8012eb8 <_printf_i+0x16c>
 8012ecc:	e7b9      	b.n	8012e42 <_printf_i+0xf6>
 8012ece:	6813      	ldr	r3, [r2, #0]
 8012ed0:	6825      	ldr	r5, [r4, #0]
 8012ed2:	6961      	ldr	r1, [r4, #20]
 8012ed4:	1d18      	adds	r0, r3, #4
 8012ed6:	6010      	str	r0, [r2, #0]
 8012ed8:	0628      	lsls	r0, r5, #24
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	d501      	bpl.n	8012ee2 <_printf_i+0x196>
 8012ede:	6019      	str	r1, [r3, #0]
 8012ee0:	e002      	b.n	8012ee8 <_printf_i+0x19c>
 8012ee2:	066a      	lsls	r2, r5, #25
 8012ee4:	d5fb      	bpl.n	8012ede <_printf_i+0x192>
 8012ee6:	8019      	strh	r1, [r3, #0]
 8012ee8:	2300      	movs	r3, #0
 8012eea:	6123      	str	r3, [r4, #16]
 8012eec:	4665      	mov	r5, ip
 8012eee:	e7b9      	b.n	8012e64 <_printf_i+0x118>
 8012ef0:	6813      	ldr	r3, [r2, #0]
 8012ef2:	1d19      	adds	r1, r3, #4
 8012ef4:	6011      	str	r1, [r2, #0]
 8012ef6:	681d      	ldr	r5, [r3, #0]
 8012ef8:	6862      	ldr	r2, [r4, #4]
 8012efa:	2100      	movs	r1, #0
 8012efc:	4628      	mov	r0, r5
 8012efe:	f7ed f987 	bl	8000210 <memchr>
 8012f02:	b108      	cbz	r0, 8012f08 <_printf_i+0x1bc>
 8012f04:	1b40      	subs	r0, r0, r5
 8012f06:	6060      	str	r0, [r4, #4]
 8012f08:	6863      	ldr	r3, [r4, #4]
 8012f0a:	6123      	str	r3, [r4, #16]
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f12:	e7a7      	b.n	8012e64 <_printf_i+0x118>
 8012f14:	6923      	ldr	r3, [r4, #16]
 8012f16:	462a      	mov	r2, r5
 8012f18:	4639      	mov	r1, r7
 8012f1a:	4630      	mov	r0, r6
 8012f1c:	47c0      	blx	r8
 8012f1e:	3001      	adds	r0, #1
 8012f20:	d0aa      	beq.n	8012e78 <_printf_i+0x12c>
 8012f22:	6823      	ldr	r3, [r4, #0]
 8012f24:	079b      	lsls	r3, r3, #30
 8012f26:	d413      	bmi.n	8012f50 <_printf_i+0x204>
 8012f28:	68e0      	ldr	r0, [r4, #12]
 8012f2a:	9b03      	ldr	r3, [sp, #12]
 8012f2c:	4298      	cmp	r0, r3
 8012f2e:	bfb8      	it	lt
 8012f30:	4618      	movlt	r0, r3
 8012f32:	e7a3      	b.n	8012e7c <_printf_i+0x130>
 8012f34:	2301      	movs	r3, #1
 8012f36:	464a      	mov	r2, r9
 8012f38:	4639      	mov	r1, r7
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	47c0      	blx	r8
 8012f3e:	3001      	adds	r0, #1
 8012f40:	d09a      	beq.n	8012e78 <_printf_i+0x12c>
 8012f42:	3501      	adds	r5, #1
 8012f44:	68e3      	ldr	r3, [r4, #12]
 8012f46:	9a03      	ldr	r2, [sp, #12]
 8012f48:	1a9b      	subs	r3, r3, r2
 8012f4a:	42ab      	cmp	r3, r5
 8012f4c:	dcf2      	bgt.n	8012f34 <_printf_i+0x1e8>
 8012f4e:	e7eb      	b.n	8012f28 <_printf_i+0x1dc>
 8012f50:	2500      	movs	r5, #0
 8012f52:	f104 0919 	add.w	r9, r4, #25
 8012f56:	e7f5      	b.n	8012f44 <_printf_i+0x1f8>
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d1ac      	bne.n	8012eb6 <_printf_i+0x16a>
 8012f5c:	7803      	ldrb	r3, [r0, #0]
 8012f5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f66:	e76c      	b.n	8012e42 <_printf_i+0xf6>
 8012f68:	08017b84 	.word	0x08017b84
 8012f6c:	08017b95 	.word	0x08017b95

08012f70 <_scanf_float>:
 8012f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f74:	469a      	mov	sl, r3
 8012f76:	688b      	ldr	r3, [r1, #8]
 8012f78:	4616      	mov	r6, r2
 8012f7a:	1e5a      	subs	r2, r3, #1
 8012f7c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012f80:	b087      	sub	sp, #28
 8012f82:	bf83      	ittte	hi
 8012f84:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012f88:	189b      	addhi	r3, r3, r2
 8012f8a:	9301      	strhi	r3, [sp, #4]
 8012f8c:	2300      	movls	r3, #0
 8012f8e:	bf86      	itte	hi
 8012f90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012f94:	608b      	strhi	r3, [r1, #8]
 8012f96:	9301      	strls	r3, [sp, #4]
 8012f98:	680b      	ldr	r3, [r1, #0]
 8012f9a:	4688      	mov	r8, r1
 8012f9c:	f04f 0b00 	mov.w	fp, #0
 8012fa0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012fa4:	f848 3b1c 	str.w	r3, [r8], #28
 8012fa8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8012fac:	4607      	mov	r7, r0
 8012fae:	460c      	mov	r4, r1
 8012fb0:	4645      	mov	r5, r8
 8012fb2:	465a      	mov	r2, fp
 8012fb4:	46d9      	mov	r9, fp
 8012fb6:	f8cd b008 	str.w	fp, [sp, #8]
 8012fba:	68a1      	ldr	r1, [r4, #8]
 8012fbc:	b181      	cbz	r1, 8012fe0 <_scanf_float+0x70>
 8012fbe:	6833      	ldr	r3, [r6, #0]
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	2b49      	cmp	r3, #73	; 0x49
 8012fc4:	d071      	beq.n	80130aa <_scanf_float+0x13a>
 8012fc6:	d84d      	bhi.n	8013064 <_scanf_float+0xf4>
 8012fc8:	2b39      	cmp	r3, #57	; 0x39
 8012fca:	d840      	bhi.n	801304e <_scanf_float+0xde>
 8012fcc:	2b31      	cmp	r3, #49	; 0x31
 8012fce:	f080 8088 	bcs.w	80130e2 <_scanf_float+0x172>
 8012fd2:	2b2d      	cmp	r3, #45	; 0x2d
 8012fd4:	f000 8090 	beq.w	80130f8 <_scanf_float+0x188>
 8012fd8:	d815      	bhi.n	8013006 <_scanf_float+0x96>
 8012fda:	2b2b      	cmp	r3, #43	; 0x2b
 8012fdc:	f000 808c 	beq.w	80130f8 <_scanf_float+0x188>
 8012fe0:	f1b9 0f00 	cmp.w	r9, #0
 8012fe4:	d003      	beq.n	8012fee <_scanf_float+0x7e>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fec:	6023      	str	r3, [r4, #0]
 8012fee:	3a01      	subs	r2, #1
 8012ff0:	2a01      	cmp	r2, #1
 8012ff2:	f200 80ea 	bhi.w	80131ca <_scanf_float+0x25a>
 8012ff6:	4545      	cmp	r5, r8
 8012ff8:	f200 80dc 	bhi.w	80131b4 <_scanf_float+0x244>
 8012ffc:	2601      	movs	r6, #1
 8012ffe:	4630      	mov	r0, r6
 8013000:	b007      	add	sp, #28
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013006:	2b2e      	cmp	r3, #46	; 0x2e
 8013008:	f000 809f 	beq.w	801314a <_scanf_float+0x1da>
 801300c:	2b30      	cmp	r3, #48	; 0x30
 801300e:	d1e7      	bne.n	8012fe0 <_scanf_float+0x70>
 8013010:	6820      	ldr	r0, [r4, #0]
 8013012:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013016:	d064      	beq.n	80130e2 <_scanf_float+0x172>
 8013018:	9b01      	ldr	r3, [sp, #4]
 801301a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801301e:	6020      	str	r0, [r4, #0]
 8013020:	f109 0901 	add.w	r9, r9, #1
 8013024:	b11b      	cbz	r3, 801302e <_scanf_float+0xbe>
 8013026:	3b01      	subs	r3, #1
 8013028:	3101      	adds	r1, #1
 801302a:	9301      	str	r3, [sp, #4]
 801302c:	60a1      	str	r1, [r4, #8]
 801302e:	68a3      	ldr	r3, [r4, #8]
 8013030:	3b01      	subs	r3, #1
 8013032:	60a3      	str	r3, [r4, #8]
 8013034:	6923      	ldr	r3, [r4, #16]
 8013036:	3301      	adds	r3, #1
 8013038:	6123      	str	r3, [r4, #16]
 801303a:	6873      	ldr	r3, [r6, #4]
 801303c:	3b01      	subs	r3, #1
 801303e:	2b00      	cmp	r3, #0
 8013040:	6073      	str	r3, [r6, #4]
 8013042:	f340 80ac 	ble.w	801319e <_scanf_float+0x22e>
 8013046:	6833      	ldr	r3, [r6, #0]
 8013048:	3301      	adds	r3, #1
 801304a:	6033      	str	r3, [r6, #0]
 801304c:	e7b5      	b.n	8012fba <_scanf_float+0x4a>
 801304e:	2b45      	cmp	r3, #69	; 0x45
 8013050:	f000 8085 	beq.w	801315e <_scanf_float+0x1ee>
 8013054:	2b46      	cmp	r3, #70	; 0x46
 8013056:	d06a      	beq.n	801312e <_scanf_float+0x1be>
 8013058:	2b41      	cmp	r3, #65	; 0x41
 801305a:	d1c1      	bne.n	8012fe0 <_scanf_float+0x70>
 801305c:	2a01      	cmp	r2, #1
 801305e:	d1bf      	bne.n	8012fe0 <_scanf_float+0x70>
 8013060:	2202      	movs	r2, #2
 8013062:	e046      	b.n	80130f2 <_scanf_float+0x182>
 8013064:	2b65      	cmp	r3, #101	; 0x65
 8013066:	d07a      	beq.n	801315e <_scanf_float+0x1ee>
 8013068:	d818      	bhi.n	801309c <_scanf_float+0x12c>
 801306a:	2b54      	cmp	r3, #84	; 0x54
 801306c:	d066      	beq.n	801313c <_scanf_float+0x1cc>
 801306e:	d811      	bhi.n	8013094 <_scanf_float+0x124>
 8013070:	2b4e      	cmp	r3, #78	; 0x4e
 8013072:	d1b5      	bne.n	8012fe0 <_scanf_float+0x70>
 8013074:	2a00      	cmp	r2, #0
 8013076:	d146      	bne.n	8013106 <_scanf_float+0x196>
 8013078:	f1b9 0f00 	cmp.w	r9, #0
 801307c:	d145      	bne.n	801310a <_scanf_float+0x19a>
 801307e:	6821      	ldr	r1, [r4, #0]
 8013080:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013084:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013088:	d13f      	bne.n	801310a <_scanf_float+0x19a>
 801308a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801308e:	6021      	str	r1, [r4, #0]
 8013090:	2201      	movs	r2, #1
 8013092:	e02e      	b.n	80130f2 <_scanf_float+0x182>
 8013094:	2b59      	cmp	r3, #89	; 0x59
 8013096:	d01e      	beq.n	80130d6 <_scanf_float+0x166>
 8013098:	2b61      	cmp	r3, #97	; 0x61
 801309a:	e7de      	b.n	801305a <_scanf_float+0xea>
 801309c:	2b6e      	cmp	r3, #110	; 0x6e
 801309e:	d0e9      	beq.n	8013074 <_scanf_float+0x104>
 80130a0:	d815      	bhi.n	80130ce <_scanf_float+0x15e>
 80130a2:	2b66      	cmp	r3, #102	; 0x66
 80130a4:	d043      	beq.n	801312e <_scanf_float+0x1be>
 80130a6:	2b69      	cmp	r3, #105	; 0x69
 80130a8:	d19a      	bne.n	8012fe0 <_scanf_float+0x70>
 80130aa:	f1bb 0f00 	cmp.w	fp, #0
 80130ae:	d138      	bne.n	8013122 <_scanf_float+0x1b2>
 80130b0:	f1b9 0f00 	cmp.w	r9, #0
 80130b4:	d197      	bne.n	8012fe6 <_scanf_float+0x76>
 80130b6:	6821      	ldr	r1, [r4, #0]
 80130b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80130bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80130c0:	d195      	bne.n	8012fee <_scanf_float+0x7e>
 80130c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80130c6:	6021      	str	r1, [r4, #0]
 80130c8:	f04f 0b01 	mov.w	fp, #1
 80130cc:	e011      	b.n	80130f2 <_scanf_float+0x182>
 80130ce:	2b74      	cmp	r3, #116	; 0x74
 80130d0:	d034      	beq.n	801313c <_scanf_float+0x1cc>
 80130d2:	2b79      	cmp	r3, #121	; 0x79
 80130d4:	d184      	bne.n	8012fe0 <_scanf_float+0x70>
 80130d6:	f1bb 0f07 	cmp.w	fp, #7
 80130da:	d181      	bne.n	8012fe0 <_scanf_float+0x70>
 80130dc:	f04f 0b08 	mov.w	fp, #8
 80130e0:	e007      	b.n	80130f2 <_scanf_float+0x182>
 80130e2:	eb12 0f0b 	cmn.w	r2, fp
 80130e6:	f47f af7b 	bne.w	8012fe0 <_scanf_float+0x70>
 80130ea:	6821      	ldr	r1, [r4, #0]
 80130ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80130f0:	6021      	str	r1, [r4, #0]
 80130f2:	702b      	strb	r3, [r5, #0]
 80130f4:	3501      	adds	r5, #1
 80130f6:	e79a      	b.n	801302e <_scanf_float+0xbe>
 80130f8:	6821      	ldr	r1, [r4, #0]
 80130fa:	0608      	lsls	r0, r1, #24
 80130fc:	f57f af70 	bpl.w	8012fe0 <_scanf_float+0x70>
 8013100:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013104:	e7f4      	b.n	80130f0 <_scanf_float+0x180>
 8013106:	2a02      	cmp	r2, #2
 8013108:	d047      	beq.n	801319a <_scanf_float+0x22a>
 801310a:	f1bb 0f01 	cmp.w	fp, #1
 801310e:	d003      	beq.n	8013118 <_scanf_float+0x1a8>
 8013110:	f1bb 0f04 	cmp.w	fp, #4
 8013114:	f47f af64 	bne.w	8012fe0 <_scanf_float+0x70>
 8013118:	f10b 0b01 	add.w	fp, fp, #1
 801311c:	fa5f fb8b 	uxtb.w	fp, fp
 8013120:	e7e7      	b.n	80130f2 <_scanf_float+0x182>
 8013122:	f1bb 0f03 	cmp.w	fp, #3
 8013126:	d0f7      	beq.n	8013118 <_scanf_float+0x1a8>
 8013128:	f1bb 0f05 	cmp.w	fp, #5
 801312c:	e7f2      	b.n	8013114 <_scanf_float+0x1a4>
 801312e:	f1bb 0f02 	cmp.w	fp, #2
 8013132:	f47f af55 	bne.w	8012fe0 <_scanf_float+0x70>
 8013136:	f04f 0b03 	mov.w	fp, #3
 801313a:	e7da      	b.n	80130f2 <_scanf_float+0x182>
 801313c:	f1bb 0f06 	cmp.w	fp, #6
 8013140:	f47f af4e 	bne.w	8012fe0 <_scanf_float+0x70>
 8013144:	f04f 0b07 	mov.w	fp, #7
 8013148:	e7d3      	b.n	80130f2 <_scanf_float+0x182>
 801314a:	6821      	ldr	r1, [r4, #0]
 801314c:	0588      	lsls	r0, r1, #22
 801314e:	f57f af47 	bpl.w	8012fe0 <_scanf_float+0x70>
 8013152:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013156:	6021      	str	r1, [r4, #0]
 8013158:	f8cd 9008 	str.w	r9, [sp, #8]
 801315c:	e7c9      	b.n	80130f2 <_scanf_float+0x182>
 801315e:	6821      	ldr	r1, [r4, #0]
 8013160:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013164:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013168:	d006      	beq.n	8013178 <_scanf_float+0x208>
 801316a:	0548      	lsls	r0, r1, #21
 801316c:	f57f af38 	bpl.w	8012fe0 <_scanf_float+0x70>
 8013170:	f1b9 0f00 	cmp.w	r9, #0
 8013174:	f43f af3b 	beq.w	8012fee <_scanf_float+0x7e>
 8013178:	0588      	lsls	r0, r1, #22
 801317a:	bf58      	it	pl
 801317c:	9802      	ldrpl	r0, [sp, #8]
 801317e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013182:	bf58      	it	pl
 8013184:	eba9 0000 	subpl.w	r0, r9, r0
 8013188:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801318c:	bf58      	it	pl
 801318e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013192:	6021      	str	r1, [r4, #0]
 8013194:	f04f 0900 	mov.w	r9, #0
 8013198:	e7ab      	b.n	80130f2 <_scanf_float+0x182>
 801319a:	2203      	movs	r2, #3
 801319c:	e7a9      	b.n	80130f2 <_scanf_float+0x182>
 801319e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80131a2:	9205      	str	r2, [sp, #20]
 80131a4:	4631      	mov	r1, r6
 80131a6:	4638      	mov	r0, r7
 80131a8:	4798      	blx	r3
 80131aa:	9a05      	ldr	r2, [sp, #20]
 80131ac:	2800      	cmp	r0, #0
 80131ae:	f43f af04 	beq.w	8012fba <_scanf_float+0x4a>
 80131b2:	e715      	b.n	8012fe0 <_scanf_float+0x70>
 80131b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80131b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80131bc:	4632      	mov	r2, r6
 80131be:	4638      	mov	r0, r7
 80131c0:	4798      	blx	r3
 80131c2:	6923      	ldr	r3, [r4, #16]
 80131c4:	3b01      	subs	r3, #1
 80131c6:	6123      	str	r3, [r4, #16]
 80131c8:	e715      	b.n	8012ff6 <_scanf_float+0x86>
 80131ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80131ce:	2b06      	cmp	r3, #6
 80131d0:	d80a      	bhi.n	80131e8 <_scanf_float+0x278>
 80131d2:	f1bb 0f02 	cmp.w	fp, #2
 80131d6:	d968      	bls.n	80132aa <_scanf_float+0x33a>
 80131d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80131dc:	fa5f fb8b 	uxtb.w	fp, fp
 80131e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80131e4:	455d      	cmp	r5, fp
 80131e6:	d14b      	bne.n	8013280 <_scanf_float+0x310>
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	05da      	lsls	r2, r3, #23
 80131ec:	d51f      	bpl.n	801322e <_scanf_float+0x2be>
 80131ee:	055b      	lsls	r3, r3, #21
 80131f0:	d468      	bmi.n	80132c4 <_scanf_float+0x354>
 80131f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80131f6:	6923      	ldr	r3, [r4, #16]
 80131f8:	2965      	cmp	r1, #101	; 0x65
 80131fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80131fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8013202:	6123      	str	r3, [r4, #16]
 8013204:	d00d      	beq.n	8013222 <_scanf_float+0x2b2>
 8013206:	2945      	cmp	r1, #69	; 0x45
 8013208:	d00b      	beq.n	8013222 <_scanf_float+0x2b2>
 801320a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801320e:	4632      	mov	r2, r6
 8013210:	4638      	mov	r0, r7
 8013212:	4798      	blx	r3
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801321a:	3b01      	subs	r3, #1
 801321c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013220:	6123      	str	r3, [r4, #16]
 8013222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013226:	4632      	mov	r2, r6
 8013228:	4638      	mov	r0, r7
 801322a:	4798      	blx	r3
 801322c:	465d      	mov	r5, fp
 801322e:	6826      	ldr	r6, [r4, #0]
 8013230:	f016 0610 	ands.w	r6, r6, #16
 8013234:	d17a      	bne.n	801332c <_scanf_float+0x3bc>
 8013236:	702e      	strb	r6, [r5, #0]
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801323e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013242:	d142      	bne.n	80132ca <_scanf_float+0x35a>
 8013244:	9b02      	ldr	r3, [sp, #8]
 8013246:	eba9 0303 	sub.w	r3, r9, r3
 801324a:	425a      	negs	r2, r3
 801324c:	2b00      	cmp	r3, #0
 801324e:	d149      	bne.n	80132e4 <_scanf_float+0x374>
 8013250:	2200      	movs	r2, #0
 8013252:	4641      	mov	r1, r8
 8013254:	4638      	mov	r0, r7
 8013256:	f000 ffcb 	bl	80141f0 <_strtod_r>
 801325a:	6825      	ldr	r5, [r4, #0]
 801325c:	f8da 3000 	ldr.w	r3, [sl]
 8013260:	f015 0f02 	tst.w	r5, #2
 8013264:	f103 0204 	add.w	r2, r3, #4
 8013268:	ec59 8b10 	vmov	r8, r9, d0
 801326c:	f8ca 2000 	str.w	r2, [sl]
 8013270:	d043      	beq.n	80132fa <_scanf_float+0x38a>
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	e9c3 8900 	strd	r8, r9, [r3]
 8013278:	68e3      	ldr	r3, [r4, #12]
 801327a:	3301      	adds	r3, #1
 801327c:	60e3      	str	r3, [r4, #12]
 801327e:	e6be      	b.n	8012ffe <_scanf_float+0x8e>
 8013280:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013284:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013288:	4632      	mov	r2, r6
 801328a:	4638      	mov	r0, r7
 801328c:	4798      	blx	r3
 801328e:	6923      	ldr	r3, [r4, #16]
 8013290:	3b01      	subs	r3, #1
 8013292:	6123      	str	r3, [r4, #16]
 8013294:	e7a6      	b.n	80131e4 <_scanf_float+0x274>
 8013296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801329a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801329e:	4632      	mov	r2, r6
 80132a0:	4638      	mov	r0, r7
 80132a2:	4798      	blx	r3
 80132a4:	6923      	ldr	r3, [r4, #16]
 80132a6:	3b01      	subs	r3, #1
 80132a8:	6123      	str	r3, [r4, #16]
 80132aa:	4545      	cmp	r5, r8
 80132ac:	d8f3      	bhi.n	8013296 <_scanf_float+0x326>
 80132ae:	e6a5      	b.n	8012ffc <_scanf_float+0x8c>
 80132b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80132b8:	4632      	mov	r2, r6
 80132ba:	4638      	mov	r0, r7
 80132bc:	4798      	blx	r3
 80132be:	6923      	ldr	r3, [r4, #16]
 80132c0:	3b01      	subs	r3, #1
 80132c2:	6123      	str	r3, [r4, #16]
 80132c4:	4545      	cmp	r5, r8
 80132c6:	d8f3      	bhi.n	80132b0 <_scanf_float+0x340>
 80132c8:	e698      	b.n	8012ffc <_scanf_float+0x8c>
 80132ca:	9b03      	ldr	r3, [sp, #12]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d0bf      	beq.n	8013250 <_scanf_float+0x2e0>
 80132d0:	9904      	ldr	r1, [sp, #16]
 80132d2:	230a      	movs	r3, #10
 80132d4:	4632      	mov	r2, r6
 80132d6:	3101      	adds	r1, #1
 80132d8:	4638      	mov	r0, r7
 80132da:	f001 f815 	bl	8014308 <_strtol_r>
 80132de:	9b03      	ldr	r3, [sp, #12]
 80132e0:	9d04      	ldr	r5, [sp, #16]
 80132e2:	1ac2      	subs	r2, r0, r3
 80132e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80132e8:	429d      	cmp	r5, r3
 80132ea:	bf28      	it	cs
 80132ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80132f0:	490f      	ldr	r1, [pc, #60]	; (8013330 <_scanf_float+0x3c0>)
 80132f2:	4628      	mov	r0, r5
 80132f4:	f000 f8d4 	bl	80134a0 <siprintf>
 80132f8:	e7aa      	b.n	8013250 <_scanf_float+0x2e0>
 80132fa:	f015 0504 	ands.w	r5, r5, #4
 80132fe:	d1b8      	bne.n	8013272 <_scanf_float+0x302>
 8013300:	681f      	ldr	r7, [r3, #0]
 8013302:	ee10 2a10 	vmov	r2, s0
 8013306:	464b      	mov	r3, r9
 8013308:	ee10 0a10 	vmov	r0, s0
 801330c:	4649      	mov	r1, r9
 801330e:	f7ed fc25 	bl	8000b5c <__aeabi_dcmpun>
 8013312:	b128      	cbz	r0, 8013320 <_scanf_float+0x3b0>
 8013314:	4628      	mov	r0, r5
 8013316:	f000 f889 	bl	801342c <nanf>
 801331a:	ed87 0a00 	vstr	s0, [r7]
 801331e:	e7ab      	b.n	8013278 <_scanf_float+0x308>
 8013320:	4640      	mov	r0, r8
 8013322:	4649      	mov	r1, r9
 8013324:	f7ed fc78 	bl	8000c18 <__aeabi_d2f>
 8013328:	6038      	str	r0, [r7, #0]
 801332a:	e7a5      	b.n	8013278 <_scanf_float+0x308>
 801332c:	2600      	movs	r6, #0
 801332e:	e666      	b.n	8012ffe <_scanf_float+0x8e>
 8013330:	08017ba6 	.word	0x08017ba6

08013334 <iprintf>:
 8013334:	b40f      	push	{r0, r1, r2, r3}
 8013336:	4b0a      	ldr	r3, [pc, #40]	; (8013360 <iprintf+0x2c>)
 8013338:	b513      	push	{r0, r1, r4, lr}
 801333a:	681c      	ldr	r4, [r3, #0]
 801333c:	b124      	cbz	r4, 8013348 <iprintf+0x14>
 801333e:	69a3      	ldr	r3, [r4, #24]
 8013340:	b913      	cbnz	r3, 8013348 <iprintf+0x14>
 8013342:	4620      	mov	r0, r4
 8013344:	f002 f828 	bl	8015398 <__sinit>
 8013348:	ab05      	add	r3, sp, #20
 801334a:	9a04      	ldr	r2, [sp, #16]
 801334c:	68a1      	ldr	r1, [r4, #8]
 801334e:	9301      	str	r3, [sp, #4]
 8013350:	4620      	mov	r0, r4
 8013352:	f003 fc5f 	bl	8016c14 <_vfiprintf_r>
 8013356:	b002      	add	sp, #8
 8013358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801335c:	b004      	add	sp, #16
 801335e:	4770      	bx	lr
 8013360:	2000000c 	.word	0x2000000c

08013364 <_puts_r>:
 8013364:	b570      	push	{r4, r5, r6, lr}
 8013366:	460e      	mov	r6, r1
 8013368:	4605      	mov	r5, r0
 801336a:	b118      	cbz	r0, 8013374 <_puts_r+0x10>
 801336c:	6983      	ldr	r3, [r0, #24]
 801336e:	b90b      	cbnz	r3, 8013374 <_puts_r+0x10>
 8013370:	f002 f812 	bl	8015398 <__sinit>
 8013374:	69ab      	ldr	r3, [r5, #24]
 8013376:	68ac      	ldr	r4, [r5, #8]
 8013378:	b913      	cbnz	r3, 8013380 <_puts_r+0x1c>
 801337a:	4628      	mov	r0, r5
 801337c:	f002 f80c 	bl	8015398 <__sinit>
 8013380:	4b23      	ldr	r3, [pc, #140]	; (8013410 <_puts_r+0xac>)
 8013382:	429c      	cmp	r4, r3
 8013384:	d117      	bne.n	80133b6 <_puts_r+0x52>
 8013386:	686c      	ldr	r4, [r5, #4]
 8013388:	89a3      	ldrh	r3, [r4, #12]
 801338a:	071b      	lsls	r3, r3, #28
 801338c:	d51d      	bpl.n	80133ca <_puts_r+0x66>
 801338e:	6923      	ldr	r3, [r4, #16]
 8013390:	b1db      	cbz	r3, 80133ca <_puts_r+0x66>
 8013392:	3e01      	subs	r6, #1
 8013394:	68a3      	ldr	r3, [r4, #8]
 8013396:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801339a:	3b01      	subs	r3, #1
 801339c:	60a3      	str	r3, [r4, #8]
 801339e:	b9e9      	cbnz	r1, 80133dc <_puts_r+0x78>
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	da2e      	bge.n	8013402 <_puts_r+0x9e>
 80133a4:	4622      	mov	r2, r4
 80133a6:	210a      	movs	r1, #10
 80133a8:	4628      	mov	r0, r5
 80133aa:	f000 ffdf 	bl	801436c <__swbuf_r>
 80133ae:	3001      	adds	r0, #1
 80133b0:	d011      	beq.n	80133d6 <_puts_r+0x72>
 80133b2:	200a      	movs	r0, #10
 80133b4:	e011      	b.n	80133da <_puts_r+0x76>
 80133b6:	4b17      	ldr	r3, [pc, #92]	; (8013414 <_puts_r+0xb0>)
 80133b8:	429c      	cmp	r4, r3
 80133ba:	d101      	bne.n	80133c0 <_puts_r+0x5c>
 80133bc:	68ac      	ldr	r4, [r5, #8]
 80133be:	e7e3      	b.n	8013388 <_puts_r+0x24>
 80133c0:	4b15      	ldr	r3, [pc, #84]	; (8013418 <_puts_r+0xb4>)
 80133c2:	429c      	cmp	r4, r3
 80133c4:	bf08      	it	eq
 80133c6:	68ec      	ldreq	r4, [r5, #12]
 80133c8:	e7de      	b.n	8013388 <_puts_r+0x24>
 80133ca:	4621      	mov	r1, r4
 80133cc:	4628      	mov	r0, r5
 80133ce:	f001 f831 	bl	8014434 <__swsetup_r>
 80133d2:	2800      	cmp	r0, #0
 80133d4:	d0dd      	beq.n	8013392 <_puts_r+0x2e>
 80133d6:	f04f 30ff 	mov.w	r0, #4294967295
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	2b00      	cmp	r3, #0
 80133de:	da04      	bge.n	80133ea <_puts_r+0x86>
 80133e0:	69a2      	ldr	r2, [r4, #24]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	dc06      	bgt.n	80133f4 <_puts_r+0x90>
 80133e6:	290a      	cmp	r1, #10
 80133e8:	d004      	beq.n	80133f4 <_puts_r+0x90>
 80133ea:	6823      	ldr	r3, [r4, #0]
 80133ec:	1c5a      	adds	r2, r3, #1
 80133ee:	6022      	str	r2, [r4, #0]
 80133f0:	7019      	strb	r1, [r3, #0]
 80133f2:	e7cf      	b.n	8013394 <_puts_r+0x30>
 80133f4:	4622      	mov	r2, r4
 80133f6:	4628      	mov	r0, r5
 80133f8:	f000 ffb8 	bl	801436c <__swbuf_r>
 80133fc:	3001      	adds	r0, #1
 80133fe:	d1c9      	bne.n	8013394 <_puts_r+0x30>
 8013400:	e7e9      	b.n	80133d6 <_puts_r+0x72>
 8013402:	6823      	ldr	r3, [r4, #0]
 8013404:	200a      	movs	r0, #10
 8013406:	1c5a      	adds	r2, r3, #1
 8013408:	6022      	str	r2, [r4, #0]
 801340a:	7018      	strb	r0, [r3, #0]
 801340c:	e7e5      	b.n	80133da <_puts_r+0x76>
 801340e:	bf00      	nop
 8013410:	08017c30 	.word	0x08017c30
 8013414:	08017c50 	.word	0x08017c50
 8013418:	08017c10 	.word	0x08017c10

0801341c <puts>:
 801341c:	4b02      	ldr	r3, [pc, #8]	; (8013428 <puts+0xc>)
 801341e:	4601      	mov	r1, r0
 8013420:	6818      	ldr	r0, [r3, #0]
 8013422:	f7ff bf9f 	b.w	8013364 <_puts_r>
 8013426:	bf00      	nop
 8013428:	2000000c 	.word	0x2000000c

0801342c <nanf>:
 801342c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013434 <nanf+0x8>
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	7fc00000 	.word	0x7fc00000

08013438 <sniprintf>:
 8013438:	b40c      	push	{r2, r3}
 801343a:	b530      	push	{r4, r5, lr}
 801343c:	4b17      	ldr	r3, [pc, #92]	; (801349c <sniprintf+0x64>)
 801343e:	1e0c      	subs	r4, r1, #0
 8013440:	b09d      	sub	sp, #116	; 0x74
 8013442:	681d      	ldr	r5, [r3, #0]
 8013444:	da08      	bge.n	8013458 <sniprintf+0x20>
 8013446:	238b      	movs	r3, #139	; 0x8b
 8013448:	602b      	str	r3, [r5, #0]
 801344a:	f04f 30ff 	mov.w	r0, #4294967295
 801344e:	b01d      	add	sp, #116	; 0x74
 8013450:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013454:	b002      	add	sp, #8
 8013456:	4770      	bx	lr
 8013458:	f44f 7302 	mov.w	r3, #520	; 0x208
 801345c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013460:	bf14      	ite	ne
 8013462:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013466:	4623      	moveq	r3, r4
 8013468:	9304      	str	r3, [sp, #16]
 801346a:	9307      	str	r3, [sp, #28]
 801346c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013470:	9002      	str	r0, [sp, #8]
 8013472:	9006      	str	r0, [sp, #24]
 8013474:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013478:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801347a:	ab21      	add	r3, sp, #132	; 0x84
 801347c:	a902      	add	r1, sp, #8
 801347e:	4628      	mov	r0, r5
 8013480:	9301      	str	r3, [sp, #4]
 8013482:	f003 f8fb 	bl	801667c <_svfiprintf_r>
 8013486:	1c43      	adds	r3, r0, #1
 8013488:	bfbc      	itt	lt
 801348a:	238b      	movlt	r3, #139	; 0x8b
 801348c:	602b      	strlt	r3, [r5, #0]
 801348e:	2c00      	cmp	r4, #0
 8013490:	d0dd      	beq.n	801344e <sniprintf+0x16>
 8013492:	9b02      	ldr	r3, [sp, #8]
 8013494:	2200      	movs	r2, #0
 8013496:	701a      	strb	r2, [r3, #0]
 8013498:	e7d9      	b.n	801344e <sniprintf+0x16>
 801349a:	bf00      	nop
 801349c:	2000000c 	.word	0x2000000c

080134a0 <siprintf>:
 80134a0:	b40e      	push	{r1, r2, r3}
 80134a2:	b500      	push	{lr}
 80134a4:	b09c      	sub	sp, #112	; 0x70
 80134a6:	ab1d      	add	r3, sp, #116	; 0x74
 80134a8:	9002      	str	r0, [sp, #8]
 80134aa:	9006      	str	r0, [sp, #24]
 80134ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80134b0:	4809      	ldr	r0, [pc, #36]	; (80134d8 <siprintf+0x38>)
 80134b2:	9107      	str	r1, [sp, #28]
 80134b4:	9104      	str	r1, [sp, #16]
 80134b6:	4909      	ldr	r1, [pc, #36]	; (80134dc <siprintf+0x3c>)
 80134b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80134bc:	9105      	str	r1, [sp, #20]
 80134be:	6800      	ldr	r0, [r0, #0]
 80134c0:	9301      	str	r3, [sp, #4]
 80134c2:	a902      	add	r1, sp, #8
 80134c4:	f003 f8da 	bl	801667c <_svfiprintf_r>
 80134c8:	9b02      	ldr	r3, [sp, #8]
 80134ca:	2200      	movs	r2, #0
 80134cc:	701a      	strb	r2, [r3, #0]
 80134ce:	b01c      	add	sp, #112	; 0x70
 80134d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80134d4:	b003      	add	sp, #12
 80134d6:	4770      	bx	lr
 80134d8:	2000000c 	.word	0x2000000c
 80134dc:	ffff0208 	.word	0xffff0208

080134e0 <siscanf>:
 80134e0:	b40e      	push	{r1, r2, r3}
 80134e2:	b530      	push	{r4, r5, lr}
 80134e4:	b09c      	sub	sp, #112	; 0x70
 80134e6:	ac1f      	add	r4, sp, #124	; 0x7c
 80134e8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80134ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80134f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80134f4:	9002      	str	r0, [sp, #8]
 80134f6:	9006      	str	r0, [sp, #24]
 80134f8:	f7ec fe82 	bl	8000200 <strlen>
 80134fc:	4b0b      	ldr	r3, [pc, #44]	; (801352c <siscanf+0x4c>)
 80134fe:	9003      	str	r0, [sp, #12]
 8013500:	9007      	str	r0, [sp, #28]
 8013502:	930b      	str	r3, [sp, #44]	; 0x2c
 8013504:	480a      	ldr	r0, [pc, #40]	; (8013530 <siscanf+0x50>)
 8013506:	9401      	str	r4, [sp, #4]
 8013508:	2300      	movs	r3, #0
 801350a:	930f      	str	r3, [sp, #60]	; 0x3c
 801350c:	9314      	str	r3, [sp, #80]	; 0x50
 801350e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013512:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013516:	462a      	mov	r2, r5
 8013518:	4623      	mov	r3, r4
 801351a:	a902      	add	r1, sp, #8
 801351c:	6800      	ldr	r0, [r0, #0]
 801351e:	f003 f9ff 	bl	8016920 <__ssvfiscanf_r>
 8013522:	b01c      	add	sp, #112	; 0x70
 8013524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013528:	b003      	add	sp, #12
 801352a:	4770      	bx	lr
 801352c:	08013557 	.word	0x08013557
 8013530:	2000000c 	.word	0x2000000c

08013534 <__sread>:
 8013534:	b510      	push	{r4, lr}
 8013536:	460c      	mov	r4, r1
 8013538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801353c:	f003 fdd8 	bl	80170f0 <_read_r>
 8013540:	2800      	cmp	r0, #0
 8013542:	bfab      	itete	ge
 8013544:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013546:	89a3      	ldrhlt	r3, [r4, #12]
 8013548:	181b      	addge	r3, r3, r0
 801354a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801354e:	bfac      	ite	ge
 8013550:	6563      	strge	r3, [r4, #84]	; 0x54
 8013552:	81a3      	strhlt	r3, [r4, #12]
 8013554:	bd10      	pop	{r4, pc}

08013556 <__seofread>:
 8013556:	2000      	movs	r0, #0
 8013558:	4770      	bx	lr

0801355a <__swrite>:
 801355a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801355e:	461f      	mov	r7, r3
 8013560:	898b      	ldrh	r3, [r1, #12]
 8013562:	05db      	lsls	r3, r3, #23
 8013564:	4605      	mov	r5, r0
 8013566:	460c      	mov	r4, r1
 8013568:	4616      	mov	r6, r2
 801356a:	d505      	bpl.n	8013578 <__swrite+0x1e>
 801356c:	2302      	movs	r3, #2
 801356e:	2200      	movs	r2, #0
 8013570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013574:	f002 fae2 	bl	8015b3c <_lseek_r>
 8013578:	89a3      	ldrh	r3, [r4, #12]
 801357a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801357e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013582:	81a3      	strh	r3, [r4, #12]
 8013584:	4632      	mov	r2, r6
 8013586:	463b      	mov	r3, r7
 8013588:	4628      	mov	r0, r5
 801358a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801358e:	f000 bf3f 	b.w	8014410 <_write_r>

08013592 <__sseek>:
 8013592:	b510      	push	{r4, lr}
 8013594:	460c      	mov	r4, r1
 8013596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801359a:	f002 facf 	bl	8015b3c <_lseek_r>
 801359e:	1c43      	adds	r3, r0, #1
 80135a0:	89a3      	ldrh	r3, [r4, #12]
 80135a2:	bf15      	itete	ne
 80135a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80135a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135ae:	81a3      	strheq	r3, [r4, #12]
 80135b0:	bf18      	it	ne
 80135b2:	81a3      	strhne	r3, [r4, #12]
 80135b4:	bd10      	pop	{r4, pc}

080135b6 <__sclose>:
 80135b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135ba:	f000 bfa9 	b.w	8014510 <_close_r>

080135be <strcpy>:
 80135be:	4603      	mov	r3, r0
 80135c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135c4:	f803 2b01 	strb.w	r2, [r3], #1
 80135c8:	2a00      	cmp	r2, #0
 80135ca:	d1f9      	bne.n	80135c0 <strcpy+0x2>
 80135cc:	4770      	bx	lr

080135ce <sulp>:
 80135ce:	b570      	push	{r4, r5, r6, lr}
 80135d0:	4604      	mov	r4, r0
 80135d2:	460d      	mov	r5, r1
 80135d4:	ec45 4b10 	vmov	d0, r4, r5
 80135d8:	4616      	mov	r6, r2
 80135da:	f002 fe0b 	bl	80161f4 <__ulp>
 80135de:	ec51 0b10 	vmov	r0, r1, d0
 80135e2:	b17e      	cbz	r6, 8013604 <sulp+0x36>
 80135e4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80135e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	dd09      	ble.n	8013604 <sulp+0x36>
 80135f0:	051b      	lsls	r3, r3, #20
 80135f2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80135f6:	2400      	movs	r4, #0
 80135f8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80135fc:	4622      	mov	r2, r4
 80135fe:	462b      	mov	r3, r5
 8013600:	f7ed f812 	bl	8000628 <__aeabi_dmul>
 8013604:	bd70      	pop	{r4, r5, r6, pc}
	...

08013608 <_strtod_l>:
 8013608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801360c:	461f      	mov	r7, r3
 801360e:	b0a1      	sub	sp, #132	; 0x84
 8013610:	2300      	movs	r3, #0
 8013612:	4681      	mov	r9, r0
 8013614:	4638      	mov	r0, r7
 8013616:	460e      	mov	r6, r1
 8013618:	9217      	str	r2, [sp, #92]	; 0x5c
 801361a:	931c      	str	r3, [sp, #112]	; 0x70
 801361c:	f002 fa7e 	bl	8015b1c <__localeconv_l>
 8013620:	4680      	mov	r8, r0
 8013622:	6800      	ldr	r0, [r0, #0]
 8013624:	f7ec fdec 	bl	8000200 <strlen>
 8013628:	f04f 0a00 	mov.w	sl, #0
 801362c:	4604      	mov	r4, r0
 801362e:	f04f 0b00 	mov.w	fp, #0
 8013632:	961b      	str	r6, [sp, #108]	; 0x6c
 8013634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013636:	781a      	ldrb	r2, [r3, #0]
 8013638:	2a0d      	cmp	r2, #13
 801363a:	d832      	bhi.n	80136a2 <_strtod_l+0x9a>
 801363c:	2a09      	cmp	r2, #9
 801363e:	d236      	bcs.n	80136ae <_strtod_l+0xa6>
 8013640:	2a00      	cmp	r2, #0
 8013642:	d03e      	beq.n	80136c2 <_strtod_l+0xba>
 8013644:	2300      	movs	r3, #0
 8013646:	930d      	str	r3, [sp, #52]	; 0x34
 8013648:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801364a:	782b      	ldrb	r3, [r5, #0]
 801364c:	2b30      	cmp	r3, #48	; 0x30
 801364e:	f040 80ac 	bne.w	80137aa <_strtod_l+0x1a2>
 8013652:	786b      	ldrb	r3, [r5, #1]
 8013654:	2b58      	cmp	r3, #88	; 0x58
 8013656:	d001      	beq.n	801365c <_strtod_l+0x54>
 8013658:	2b78      	cmp	r3, #120	; 0x78
 801365a:	d167      	bne.n	801372c <_strtod_l+0x124>
 801365c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801365e:	9301      	str	r3, [sp, #4]
 8013660:	ab1c      	add	r3, sp, #112	; 0x70
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	9702      	str	r7, [sp, #8]
 8013666:	ab1d      	add	r3, sp, #116	; 0x74
 8013668:	4a88      	ldr	r2, [pc, #544]	; (801388c <_strtod_l+0x284>)
 801366a:	a91b      	add	r1, sp, #108	; 0x6c
 801366c:	4648      	mov	r0, r9
 801366e:	f001 ff6c 	bl	801554a <__gethex>
 8013672:	f010 0407 	ands.w	r4, r0, #7
 8013676:	4606      	mov	r6, r0
 8013678:	d005      	beq.n	8013686 <_strtod_l+0x7e>
 801367a:	2c06      	cmp	r4, #6
 801367c:	d12b      	bne.n	80136d6 <_strtod_l+0xce>
 801367e:	3501      	adds	r5, #1
 8013680:	2300      	movs	r3, #0
 8013682:	951b      	str	r5, [sp, #108]	; 0x6c
 8013684:	930d      	str	r3, [sp, #52]	; 0x34
 8013686:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013688:	2b00      	cmp	r3, #0
 801368a:	f040 859a 	bne.w	80141c2 <_strtod_l+0xbba>
 801368e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013690:	b1e3      	cbz	r3, 80136cc <_strtod_l+0xc4>
 8013692:	4652      	mov	r2, sl
 8013694:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013698:	ec43 2b10 	vmov	d0, r2, r3
 801369c:	b021      	add	sp, #132	; 0x84
 801369e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136a2:	2a2b      	cmp	r2, #43	; 0x2b
 80136a4:	d015      	beq.n	80136d2 <_strtod_l+0xca>
 80136a6:	2a2d      	cmp	r2, #45	; 0x2d
 80136a8:	d004      	beq.n	80136b4 <_strtod_l+0xac>
 80136aa:	2a20      	cmp	r2, #32
 80136ac:	d1ca      	bne.n	8013644 <_strtod_l+0x3c>
 80136ae:	3301      	adds	r3, #1
 80136b0:	931b      	str	r3, [sp, #108]	; 0x6c
 80136b2:	e7bf      	b.n	8013634 <_strtod_l+0x2c>
 80136b4:	2201      	movs	r2, #1
 80136b6:	920d      	str	r2, [sp, #52]	; 0x34
 80136b8:	1c5a      	adds	r2, r3, #1
 80136ba:	921b      	str	r2, [sp, #108]	; 0x6c
 80136bc:	785b      	ldrb	r3, [r3, #1]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1c2      	bne.n	8013648 <_strtod_l+0x40>
 80136c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136c4:	961b      	str	r6, [sp, #108]	; 0x6c
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f040 8579 	bne.w	80141be <_strtod_l+0xbb6>
 80136cc:	4652      	mov	r2, sl
 80136ce:	465b      	mov	r3, fp
 80136d0:	e7e2      	b.n	8013698 <_strtod_l+0x90>
 80136d2:	2200      	movs	r2, #0
 80136d4:	e7ef      	b.n	80136b6 <_strtod_l+0xae>
 80136d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80136d8:	b13a      	cbz	r2, 80136ea <_strtod_l+0xe2>
 80136da:	2135      	movs	r1, #53	; 0x35
 80136dc:	a81e      	add	r0, sp, #120	; 0x78
 80136de:	f002 fe81 	bl	80163e4 <__copybits>
 80136e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80136e4:	4648      	mov	r0, r9
 80136e6:	f002 faed 	bl	8015cc4 <_Bfree>
 80136ea:	3c01      	subs	r4, #1
 80136ec:	2c04      	cmp	r4, #4
 80136ee:	d806      	bhi.n	80136fe <_strtod_l+0xf6>
 80136f0:	e8df f004 	tbb	[pc, r4]
 80136f4:	1714030a 	.word	0x1714030a
 80136f8:	0a          	.byte	0x0a
 80136f9:	00          	.byte	0x00
 80136fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80136fe:	0730      	lsls	r0, r6, #28
 8013700:	d5c1      	bpl.n	8013686 <_strtod_l+0x7e>
 8013702:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013706:	e7be      	b.n	8013686 <_strtod_l+0x7e>
 8013708:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801370c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801370e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013712:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013716:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801371a:	e7f0      	b.n	80136fe <_strtod_l+0xf6>
 801371c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013890 <_strtod_l+0x288>
 8013720:	e7ed      	b.n	80136fe <_strtod_l+0xf6>
 8013722:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013726:	f04f 3aff 	mov.w	sl, #4294967295
 801372a:	e7e8      	b.n	80136fe <_strtod_l+0xf6>
 801372c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801372e:	1c5a      	adds	r2, r3, #1
 8013730:	921b      	str	r2, [sp, #108]	; 0x6c
 8013732:	785b      	ldrb	r3, [r3, #1]
 8013734:	2b30      	cmp	r3, #48	; 0x30
 8013736:	d0f9      	beq.n	801372c <_strtod_l+0x124>
 8013738:	2b00      	cmp	r3, #0
 801373a:	d0a4      	beq.n	8013686 <_strtod_l+0x7e>
 801373c:	2301      	movs	r3, #1
 801373e:	2500      	movs	r5, #0
 8013740:	9306      	str	r3, [sp, #24]
 8013742:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013744:	9308      	str	r3, [sp, #32]
 8013746:	9507      	str	r5, [sp, #28]
 8013748:	9505      	str	r5, [sp, #20]
 801374a:	220a      	movs	r2, #10
 801374c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801374e:	7807      	ldrb	r7, [r0, #0]
 8013750:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013754:	b2d9      	uxtb	r1, r3
 8013756:	2909      	cmp	r1, #9
 8013758:	d929      	bls.n	80137ae <_strtod_l+0x1a6>
 801375a:	4622      	mov	r2, r4
 801375c:	f8d8 1000 	ldr.w	r1, [r8]
 8013760:	f003 fd1a 	bl	8017198 <strncmp>
 8013764:	2800      	cmp	r0, #0
 8013766:	d031      	beq.n	80137cc <_strtod_l+0x1c4>
 8013768:	2000      	movs	r0, #0
 801376a:	9c05      	ldr	r4, [sp, #20]
 801376c:	9004      	str	r0, [sp, #16]
 801376e:	463b      	mov	r3, r7
 8013770:	4602      	mov	r2, r0
 8013772:	2b65      	cmp	r3, #101	; 0x65
 8013774:	d001      	beq.n	801377a <_strtod_l+0x172>
 8013776:	2b45      	cmp	r3, #69	; 0x45
 8013778:	d114      	bne.n	80137a4 <_strtod_l+0x19c>
 801377a:	b924      	cbnz	r4, 8013786 <_strtod_l+0x17e>
 801377c:	b910      	cbnz	r0, 8013784 <_strtod_l+0x17c>
 801377e:	9b06      	ldr	r3, [sp, #24]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d09e      	beq.n	80136c2 <_strtod_l+0xba>
 8013784:	2400      	movs	r4, #0
 8013786:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013788:	1c73      	adds	r3, r6, #1
 801378a:	931b      	str	r3, [sp, #108]	; 0x6c
 801378c:	7873      	ldrb	r3, [r6, #1]
 801378e:	2b2b      	cmp	r3, #43	; 0x2b
 8013790:	d078      	beq.n	8013884 <_strtod_l+0x27c>
 8013792:	2b2d      	cmp	r3, #45	; 0x2d
 8013794:	d070      	beq.n	8013878 <_strtod_l+0x270>
 8013796:	f04f 0c00 	mov.w	ip, #0
 801379a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801379e:	2f09      	cmp	r7, #9
 80137a0:	d97c      	bls.n	801389c <_strtod_l+0x294>
 80137a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80137a4:	f04f 0e00 	mov.w	lr, #0
 80137a8:	e09a      	b.n	80138e0 <_strtod_l+0x2d8>
 80137aa:	2300      	movs	r3, #0
 80137ac:	e7c7      	b.n	801373e <_strtod_l+0x136>
 80137ae:	9905      	ldr	r1, [sp, #20]
 80137b0:	2908      	cmp	r1, #8
 80137b2:	bfdd      	ittte	le
 80137b4:	9907      	ldrle	r1, [sp, #28]
 80137b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80137ba:	9307      	strle	r3, [sp, #28]
 80137bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80137c0:	9b05      	ldr	r3, [sp, #20]
 80137c2:	3001      	adds	r0, #1
 80137c4:	3301      	adds	r3, #1
 80137c6:	9305      	str	r3, [sp, #20]
 80137c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80137ca:	e7bf      	b.n	801374c <_strtod_l+0x144>
 80137cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137ce:	191a      	adds	r2, r3, r4
 80137d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80137d2:	9a05      	ldr	r2, [sp, #20]
 80137d4:	5d1b      	ldrb	r3, [r3, r4]
 80137d6:	2a00      	cmp	r2, #0
 80137d8:	d037      	beq.n	801384a <_strtod_l+0x242>
 80137da:	9c05      	ldr	r4, [sp, #20]
 80137dc:	4602      	mov	r2, r0
 80137de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80137e2:	2909      	cmp	r1, #9
 80137e4:	d913      	bls.n	801380e <_strtod_l+0x206>
 80137e6:	2101      	movs	r1, #1
 80137e8:	9104      	str	r1, [sp, #16]
 80137ea:	e7c2      	b.n	8013772 <_strtod_l+0x16a>
 80137ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137ee:	1c5a      	adds	r2, r3, #1
 80137f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80137f2:	785b      	ldrb	r3, [r3, #1]
 80137f4:	3001      	adds	r0, #1
 80137f6:	2b30      	cmp	r3, #48	; 0x30
 80137f8:	d0f8      	beq.n	80137ec <_strtod_l+0x1e4>
 80137fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80137fe:	2a08      	cmp	r2, #8
 8013800:	f200 84e4 	bhi.w	80141cc <_strtod_l+0xbc4>
 8013804:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013806:	9208      	str	r2, [sp, #32]
 8013808:	4602      	mov	r2, r0
 801380a:	2000      	movs	r0, #0
 801380c:	4604      	mov	r4, r0
 801380e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013812:	f100 0101 	add.w	r1, r0, #1
 8013816:	d012      	beq.n	801383e <_strtod_l+0x236>
 8013818:	440a      	add	r2, r1
 801381a:	eb00 0c04 	add.w	ip, r0, r4
 801381e:	4621      	mov	r1, r4
 8013820:	270a      	movs	r7, #10
 8013822:	458c      	cmp	ip, r1
 8013824:	d113      	bne.n	801384e <_strtod_l+0x246>
 8013826:	1821      	adds	r1, r4, r0
 8013828:	2908      	cmp	r1, #8
 801382a:	f104 0401 	add.w	r4, r4, #1
 801382e:	4404      	add	r4, r0
 8013830:	dc19      	bgt.n	8013866 <_strtod_l+0x25e>
 8013832:	9b07      	ldr	r3, [sp, #28]
 8013834:	210a      	movs	r1, #10
 8013836:	fb01 e303 	mla	r3, r1, r3, lr
 801383a:	9307      	str	r3, [sp, #28]
 801383c:	2100      	movs	r1, #0
 801383e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013840:	1c58      	adds	r0, r3, #1
 8013842:	901b      	str	r0, [sp, #108]	; 0x6c
 8013844:	785b      	ldrb	r3, [r3, #1]
 8013846:	4608      	mov	r0, r1
 8013848:	e7c9      	b.n	80137de <_strtod_l+0x1d6>
 801384a:	9805      	ldr	r0, [sp, #20]
 801384c:	e7d3      	b.n	80137f6 <_strtod_l+0x1ee>
 801384e:	2908      	cmp	r1, #8
 8013850:	f101 0101 	add.w	r1, r1, #1
 8013854:	dc03      	bgt.n	801385e <_strtod_l+0x256>
 8013856:	9b07      	ldr	r3, [sp, #28]
 8013858:	437b      	muls	r3, r7
 801385a:	9307      	str	r3, [sp, #28]
 801385c:	e7e1      	b.n	8013822 <_strtod_l+0x21a>
 801385e:	2910      	cmp	r1, #16
 8013860:	bfd8      	it	le
 8013862:	437d      	mulle	r5, r7
 8013864:	e7dd      	b.n	8013822 <_strtod_l+0x21a>
 8013866:	2c10      	cmp	r4, #16
 8013868:	bfdc      	itt	le
 801386a:	210a      	movle	r1, #10
 801386c:	fb01 e505 	mlale	r5, r1, r5, lr
 8013870:	e7e4      	b.n	801383c <_strtod_l+0x234>
 8013872:	2301      	movs	r3, #1
 8013874:	9304      	str	r3, [sp, #16]
 8013876:	e781      	b.n	801377c <_strtod_l+0x174>
 8013878:	f04f 0c01 	mov.w	ip, #1
 801387c:	1cb3      	adds	r3, r6, #2
 801387e:	931b      	str	r3, [sp, #108]	; 0x6c
 8013880:	78b3      	ldrb	r3, [r6, #2]
 8013882:	e78a      	b.n	801379a <_strtod_l+0x192>
 8013884:	f04f 0c00 	mov.w	ip, #0
 8013888:	e7f8      	b.n	801387c <_strtod_l+0x274>
 801388a:	bf00      	nop
 801388c:	08017bac 	.word	0x08017bac
 8013890:	7ff00000 	.word	0x7ff00000
 8013894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013896:	1c5f      	adds	r7, r3, #1
 8013898:	971b      	str	r7, [sp, #108]	; 0x6c
 801389a:	785b      	ldrb	r3, [r3, #1]
 801389c:	2b30      	cmp	r3, #48	; 0x30
 801389e:	d0f9      	beq.n	8013894 <_strtod_l+0x28c>
 80138a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80138a4:	2f08      	cmp	r7, #8
 80138a6:	f63f af7d 	bhi.w	80137a4 <_strtod_l+0x19c>
 80138aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80138ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138b0:	930a      	str	r3, [sp, #40]	; 0x28
 80138b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80138b4:	1c5f      	adds	r7, r3, #1
 80138b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80138b8:	785b      	ldrb	r3, [r3, #1]
 80138ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80138be:	f1b8 0f09 	cmp.w	r8, #9
 80138c2:	d937      	bls.n	8013934 <_strtod_l+0x32c>
 80138c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80138c6:	1a7f      	subs	r7, r7, r1
 80138c8:	2f08      	cmp	r7, #8
 80138ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80138ce:	dc37      	bgt.n	8013940 <_strtod_l+0x338>
 80138d0:	45be      	cmp	lr, r7
 80138d2:	bfa8      	it	ge
 80138d4:	46be      	movge	lr, r7
 80138d6:	f1bc 0f00 	cmp.w	ip, #0
 80138da:	d001      	beq.n	80138e0 <_strtod_l+0x2d8>
 80138dc:	f1ce 0e00 	rsb	lr, lr, #0
 80138e0:	2c00      	cmp	r4, #0
 80138e2:	d151      	bne.n	8013988 <_strtod_l+0x380>
 80138e4:	2800      	cmp	r0, #0
 80138e6:	f47f aece 	bne.w	8013686 <_strtod_l+0x7e>
 80138ea:	9a06      	ldr	r2, [sp, #24]
 80138ec:	2a00      	cmp	r2, #0
 80138ee:	f47f aeca 	bne.w	8013686 <_strtod_l+0x7e>
 80138f2:	9a04      	ldr	r2, [sp, #16]
 80138f4:	2a00      	cmp	r2, #0
 80138f6:	f47f aee4 	bne.w	80136c2 <_strtod_l+0xba>
 80138fa:	2b4e      	cmp	r3, #78	; 0x4e
 80138fc:	d027      	beq.n	801394e <_strtod_l+0x346>
 80138fe:	dc21      	bgt.n	8013944 <_strtod_l+0x33c>
 8013900:	2b49      	cmp	r3, #73	; 0x49
 8013902:	f47f aede 	bne.w	80136c2 <_strtod_l+0xba>
 8013906:	49a0      	ldr	r1, [pc, #640]	; (8013b88 <_strtod_l+0x580>)
 8013908:	a81b      	add	r0, sp, #108	; 0x6c
 801390a:	f002 f851 	bl	80159b0 <__match>
 801390e:	2800      	cmp	r0, #0
 8013910:	f43f aed7 	beq.w	80136c2 <_strtod_l+0xba>
 8013914:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013916:	499d      	ldr	r1, [pc, #628]	; (8013b8c <_strtod_l+0x584>)
 8013918:	3b01      	subs	r3, #1
 801391a:	a81b      	add	r0, sp, #108	; 0x6c
 801391c:	931b      	str	r3, [sp, #108]	; 0x6c
 801391e:	f002 f847 	bl	80159b0 <__match>
 8013922:	b910      	cbnz	r0, 801392a <_strtod_l+0x322>
 8013924:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013926:	3301      	adds	r3, #1
 8013928:	931b      	str	r3, [sp, #108]	; 0x6c
 801392a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013ba0 <_strtod_l+0x598>
 801392e:	f04f 0a00 	mov.w	sl, #0
 8013932:	e6a8      	b.n	8013686 <_strtod_l+0x7e>
 8013934:	210a      	movs	r1, #10
 8013936:	fb01 3e0e 	mla	lr, r1, lr, r3
 801393a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801393e:	e7b8      	b.n	80138b2 <_strtod_l+0x2aa>
 8013940:	46be      	mov	lr, r7
 8013942:	e7c8      	b.n	80138d6 <_strtod_l+0x2ce>
 8013944:	2b69      	cmp	r3, #105	; 0x69
 8013946:	d0de      	beq.n	8013906 <_strtod_l+0x2fe>
 8013948:	2b6e      	cmp	r3, #110	; 0x6e
 801394a:	f47f aeba 	bne.w	80136c2 <_strtod_l+0xba>
 801394e:	4990      	ldr	r1, [pc, #576]	; (8013b90 <_strtod_l+0x588>)
 8013950:	a81b      	add	r0, sp, #108	; 0x6c
 8013952:	f002 f82d 	bl	80159b0 <__match>
 8013956:	2800      	cmp	r0, #0
 8013958:	f43f aeb3 	beq.w	80136c2 <_strtod_l+0xba>
 801395c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801395e:	781b      	ldrb	r3, [r3, #0]
 8013960:	2b28      	cmp	r3, #40	; 0x28
 8013962:	d10e      	bne.n	8013982 <_strtod_l+0x37a>
 8013964:	aa1e      	add	r2, sp, #120	; 0x78
 8013966:	498b      	ldr	r1, [pc, #556]	; (8013b94 <_strtod_l+0x58c>)
 8013968:	a81b      	add	r0, sp, #108	; 0x6c
 801396a:	f002 f835 	bl	80159d8 <__hexnan>
 801396e:	2805      	cmp	r0, #5
 8013970:	d107      	bne.n	8013982 <_strtod_l+0x37a>
 8013972:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013974:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013978:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801397c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013980:	e681      	b.n	8013686 <_strtod_l+0x7e>
 8013982:	f8df b224 	ldr.w	fp, [pc, #548]	; 8013ba8 <_strtod_l+0x5a0>
 8013986:	e7d2      	b.n	801392e <_strtod_l+0x326>
 8013988:	ebae 0302 	sub.w	r3, lr, r2
 801398c:	9306      	str	r3, [sp, #24]
 801398e:	9b05      	ldr	r3, [sp, #20]
 8013990:	9807      	ldr	r0, [sp, #28]
 8013992:	2b00      	cmp	r3, #0
 8013994:	bf08      	it	eq
 8013996:	4623      	moveq	r3, r4
 8013998:	2c10      	cmp	r4, #16
 801399a:	9305      	str	r3, [sp, #20]
 801399c:	46a0      	mov	r8, r4
 801399e:	bfa8      	it	ge
 80139a0:	f04f 0810 	movge.w	r8, #16
 80139a4:	f7ec fdc6 	bl	8000534 <__aeabi_ui2d>
 80139a8:	2c09      	cmp	r4, #9
 80139aa:	4682      	mov	sl, r0
 80139ac:	468b      	mov	fp, r1
 80139ae:	dc13      	bgt.n	80139d8 <_strtod_l+0x3d0>
 80139b0:	9b06      	ldr	r3, [sp, #24]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f43f ae67 	beq.w	8013686 <_strtod_l+0x7e>
 80139b8:	9b06      	ldr	r3, [sp, #24]
 80139ba:	dd7a      	ble.n	8013ab2 <_strtod_l+0x4aa>
 80139bc:	2b16      	cmp	r3, #22
 80139be:	dc61      	bgt.n	8013a84 <_strtod_l+0x47c>
 80139c0:	4a75      	ldr	r2, [pc, #468]	; (8013b98 <_strtod_l+0x590>)
 80139c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80139c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80139ca:	4652      	mov	r2, sl
 80139cc:	465b      	mov	r3, fp
 80139ce:	f7ec fe2b 	bl	8000628 <__aeabi_dmul>
 80139d2:	4682      	mov	sl, r0
 80139d4:	468b      	mov	fp, r1
 80139d6:	e656      	b.n	8013686 <_strtod_l+0x7e>
 80139d8:	4b6f      	ldr	r3, [pc, #444]	; (8013b98 <_strtod_l+0x590>)
 80139da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80139de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80139e2:	f7ec fe21 	bl	8000628 <__aeabi_dmul>
 80139e6:	4606      	mov	r6, r0
 80139e8:	4628      	mov	r0, r5
 80139ea:	460f      	mov	r7, r1
 80139ec:	f7ec fda2 	bl	8000534 <__aeabi_ui2d>
 80139f0:	4602      	mov	r2, r0
 80139f2:	460b      	mov	r3, r1
 80139f4:	4630      	mov	r0, r6
 80139f6:	4639      	mov	r1, r7
 80139f8:	f7ec fc60 	bl	80002bc <__adddf3>
 80139fc:	2c0f      	cmp	r4, #15
 80139fe:	4682      	mov	sl, r0
 8013a00:	468b      	mov	fp, r1
 8013a02:	ddd5      	ble.n	80139b0 <_strtod_l+0x3a8>
 8013a04:	9b06      	ldr	r3, [sp, #24]
 8013a06:	eba4 0808 	sub.w	r8, r4, r8
 8013a0a:	4498      	add	r8, r3
 8013a0c:	f1b8 0f00 	cmp.w	r8, #0
 8013a10:	f340 8096 	ble.w	8013b40 <_strtod_l+0x538>
 8013a14:	f018 030f 	ands.w	r3, r8, #15
 8013a18:	d00a      	beq.n	8013a30 <_strtod_l+0x428>
 8013a1a:	495f      	ldr	r1, [pc, #380]	; (8013b98 <_strtod_l+0x590>)
 8013a1c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a20:	4652      	mov	r2, sl
 8013a22:	465b      	mov	r3, fp
 8013a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a28:	f7ec fdfe 	bl	8000628 <__aeabi_dmul>
 8013a2c:	4682      	mov	sl, r0
 8013a2e:	468b      	mov	fp, r1
 8013a30:	f038 080f 	bics.w	r8, r8, #15
 8013a34:	d073      	beq.n	8013b1e <_strtod_l+0x516>
 8013a36:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013a3a:	dd47      	ble.n	8013acc <_strtod_l+0x4c4>
 8013a3c:	2400      	movs	r4, #0
 8013a3e:	46a0      	mov	r8, r4
 8013a40:	9407      	str	r4, [sp, #28]
 8013a42:	9405      	str	r4, [sp, #20]
 8013a44:	2322      	movs	r3, #34	; 0x22
 8013a46:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013ba0 <_strtod_l+0x598>
 8013a4a:	f8c9 3000 	str.w	r3, [r9]
 8013a4e:	f04f 0a00 	mov.w	sl, #0
 8013a52:	9b07      	ldr	r3, [sp, #28]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	f43f ae16 	beq.w	8013686 <_strtod_l+0x7e>
 8013a5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013a5c:	4648      	mov	r0, r9
 8013a5e:	f002 f931 	bl	8015cc4 <_Bfree>
 8013a62:	9905      	ldr	r1, [sp, #20]
 8013a64:	4648      	mov	r0, r9
 8013a66:	f002 f92d 	bl	8015cc4 <_Bfree>
 8013a6a:	4641      	mov	r1, r8
 8013a6c:	4648      	mov	r0, r9
 8013a6e:	f002 f929 	bl	8015cc4 <_Bfree>
 8013a72:	9907      	ldr	r1, [sp, #28]
 8013a74:	4648      	mov	r0, r9
 8013a76:	f002 f925 	bl	8015cc4 <_Bfree>
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	4648      	mov	r0, r9
 8013a7e:	f002 f921 	bl	8015cc4 <_Bfree>
 8013a82:	e600      	b.n	8013686 <_strtod_l+0x7e>
 8013a84:	9a06      	ldr	r2, [sp, #24]
 8013a86:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013a8a:	4293      	cmp	r3, r2
 8013a8c:	dbba      	blt.n	8013a04 <_strtod_l+0x3fc>
 8013a8e:	4d42      	ldr	r5, [pc, #264]	; (8013b98 <_strtod_l+0x590>)
 8013a90:	f1c4 040f 	rsb	r4, r4, #15
 8013a94:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013a98:	4652      	mov	r2, sl
 8013a9a:	465b      	mov	r3, fp
 8013a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013aa0:	f7ec fdc2 	bl	8000628 <__aeabi_dmul>
 8013aa4:	9b06      	ldr	r3, [sp, #24]
 8013aa6:	1b1c      	subs	r4, r3, r4
 8013aa8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013ab0:	e78d      	b.n	80139ce <_strtod_l+0x3c6>
 8013ab2:	f113 0f16 	cmn.w	r3, #22
 8013ab6:	dba5      	blt.n	8013a04 <_strtod_l+0x3fc>
 8013ab8:	4a37      	ldr	r2, [pc, #220]	; (8013b98 <_strtod_l+0x590>)
 8013aba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013abe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013ac2:	4650      	mov	r0, sl
 8013ac4:	4659      	mov	r1, fp
 8013ac6:	f7ec fed9 	bl	800087c <__aeabi_ddiv>
 8013aca:	e782      	b.n	80139d2 <_strtod_l+0x3ca>
 8013acc:	2300      	movs	r3, #0
 8013ace:	4e33      	ldr	r6, [pc, #204]	; (8013b9c <_strtod_l+0x594>)
 8013ad0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013ad4:	4650      	mov	r0, sl
 8013ad6:	4659      	mov	r1, fp
 8013ad8:	461d      	mov	r5, r3
 8013ada:	f1b8 0f01 	cmp.w	r8, #1
 8013ade:	dc21      	bgt.n	8013b24 <_strtod_l+0x51c>
 8013ae0:	b10b      	cbz	r3, 8013ae6 <_strtod_l+0x4de>
 8013ae2:	4682      	mov	sl, r0
 8013ae4:	468b      	mov	fp, r1
 8013ae6:	4b2d      	ldr	r3, [pc, #180]	; (8013b9c <_strtod_l+0x594>)
 8013ae8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013aec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8013af0:	4652      	mov	r2, sl
 8013af2:	465b      	mov	r3, fp
 8013af4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8013af8:	f7ec fd96 	bl	8000628 <__aeabi_dmul>
 8013afc:	4b28      	ldr	r3, [pc, #160]	; (8013ba0 <_strtod_l+0x598>)
 8013afe:	460a      	mov	r2, r1
 8013b00:	400b      	ands	r3, r1
 8013b02:	4928      	ldr	r1, [pc, #160]	; (8013ba4 <_strtod_l+0x59c>)
 8013b04:	428b      	cmp	r3, r1
 8013b06:	4682      	mov	sl, r0
 8013b08:	d898      	bhi.n	8013a3c <_strtod_l+0x434>
 8013b0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013b0e:	428b      	cmp	r3, r1
 8013b10:	bf86      	itte	hi
 8013b12:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8013bac <_strtod_l+0x5a4>
 8013b16:	f04f 3aff 	movhi.w	sl, #4294967295
 8013b1a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013b1e:	2300      	movs	r3, #0
 8013b20:	9304      	str	r3, [sp, #16]
 8013b22:	e077      	b.n	8013c14 <_strtod_l+0x60c>
 8013b24:	f018 0f01 	tst.w	r8, #1
 8013b28:	d006      	beq.n	8013b38 <_strtod_l+0x530>
 8013b2a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b32:	f7ec fd79 	bl	8000628 <__aeabi_dmul>
 8013b36:	2301      	movs	r3, #1
 8013b38:	3501      	adds	r5, #1
 8013b3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013b3e:	e7cc      	b.n	8013ada <_strtod_l+0x4d2>
 8013b40:	d0ed      	beq.n	8013b1e <_strtod_l+0x516>
 8013b42:	f1c8 0800 	rsb	r8, r8, #0
 8013b46:	f018 020f 	ands.w	r2, r8, #15
 8013b4a:	d00a      	beq.n	8013b62 <_strtod_l+0x55a>
 8013b4c:	4b12      	ldr	r3, [pc, #72]	; (8013b98 <_strtod_l+0x590>)
 8013b4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013b52:	4650      	mov	r0, sl
 8013b54:	4659      	mov	r1, fp
 8013b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5a:	f7ec fe8f 	bl	800087c <__aeabi_ddiv>
 8013b5e:	4682      	mov	sl, r0
 8013b60:	468b      	mov	fp, r1
 8013b62:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013b66:	d0da      	beq.n	8013b1e <_strtod_l+0x516>
 8013b68:	f1b8 0f1f 	cmp.w	r8, #31
 8013b6c:	dd20      	ble.n	8013bb0 <_strtod_l+0x5a8>
 8013b6e:	2400      	movs	r4, #0
 8013b70:	46a0      	mov	r8, r4
 8013b72:	9407      	str	r4, [sp, #28]
 8013b74:	9405      	str	r4, [sp, #20]
 8013b76:	2322      	movs	r3, #34	; 0x22
 8013b78:	f04f 0a00 	mov.w	sl, #0
 8013b7c:	f04f 0b00 	mov.w	fp, #0
 8013b80:	f8c9 3000 	str.w	r3, [r9]
 8013b84:	e765      	b.n	8013a52 <_strtod_l+0x44a>
 8013b86:	bf00      	nop
 8013b88:	08017b79 	.word	0x08017b79
 8013b8c:	08017c03 	.word	0x08017c03
 8013b90:	08017b81 	.word	0x08017b81
 8013b94:	08017bc0 	.word	0x08017bc0
 8013b98:	08017ca8 	.word	0x08017ca8
 8013b9c:	08017c80 	.word	0x08017c80
 8013ba0:	7ff00000 	.word	0x7ff00000
 8013ba4:	7ca00000 	.word	0x7ca00000
 8013ba8:	fff80000 	.word	0xfff80000
 8013bac:	7fefffff 	.word	0x7fefffff
 8013bb0:	f018 0310 	ands.w	r3, r8, #16
 8013bb4:	bf18      	it	ne
 8013bb6:	236a      	movne	r3, #106	; 0x6a
 8013bb8:	4da0      	ldr	r5, [pc, #640]	; (8013e3c <_strtod_l+0x834>)
 8013bba:	9304      	str	r3, [sp, #16]
 8013bbc:	4650      	mov	r0, sl
 8013bbe:	4659      	mov	r1, fp
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	f1b8 0f00 	cmp.w	r8, #0
 8013bc6:	f300 810a 	bgt.w	8013dde <_strtod_l+0x7d6>
 8013bca:	b10b      	cbz	r3, 8013bd0 <_strtod_l+0x5c8>
 8013bcc:	4682      	mov	sl, r0
 8013bce:	468b      	mov	fp, r1
 8013bd0:	9b04      	ldr	r3, [sp, #16]
 8013bd2:	b1bb      	cbz	r3, 8013c04 <_strtod_l+0x5fc>
 8013bd4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8013bd8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	4659      	mov	r1, fp
 8013be0:	dd10      	ble.n	8013c04 <_strtod_l+0x5fc>
 8013be2:	2b1f      	cmp	r3, #31
 8013be4:	f340 8107 	ble.w	8013df6 <_strtod_l+0x7ee>
 8013be8:	2b34      	cmp	r3, #52	; 0x34
 8013bea:	bfde      	ittt	le
 8013bec:	3b20      	suble	r3, #32
 8013bee:	f04f 32ff 	movle.w	r2, #4294967295
 8013bf2:	fa02 f303 	lslle.w	r3, r2, r3
 8013bf6:	f04f 0a00 	mov.w	sl, #0
 8013bfa:	bfcc      	ite	gt
 8013bfc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013c00:	ea03 0b01 	andle.w	fp, r3, r1
 8013c04:	2200      	movs	r2, #0
 8013c06:	2300      	movs	r3, #0
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	f7ec ff74 	bl	8000af8 <__aeabi_dcmpeq>
 8013c10:	2800      	cmp	r0, #0
 8013c12:	d1ac      	bne.n	8013b6e <_strtod_l+0x566>
 8013c14:	9b07      	ldr	r3, [sp, #28]
 8013c16:	9300      	str	r3, [sp, #0]
 8013c18:	9a05      	ldr	r2, [sp, #20]
 8013c1a:	9908      	ldr	r1, [sp, #32]
 8013c1c:	4623      	mov	r3, r4
 8013c1e:	4648      	mov	r0, r9
 8013c20:	f002 f8a2 	bl	8015d68 <__s2b>
 8013c24:	9007      	str	r0, [sp, #28]
 8013c26:	2800      	cmp	r0, #0
 8013c28:	f43f af08 	beq.w	8013a3c <_strtod_l+0x434>
 8013c2c:	9a06      	ldr	r2, [sp, #24]
 8013c2e:	9b06      	ldr	r3, [sp, #24]
 8013c30:	2a00      	cmp	r2, #0
 8013c32:	f1c3 0300 	rsb	r3, r3, #0
 8013c36:	bfa8      	it	ge
 8013c38:	2300      	movge	r3, #0
 8013c3a:	930e      	str	r3, [sp, #56]	; 0x38
 8013c3c:	2400      	movs	r4, #0
 8013c3e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c42:	9316      	str	r3, [sp, #88]	; 0x58
 8013c44:	46a0      	mov	r8, r4
 8013c46:	9b07      	ldr	r3, [sp, #28]
 8013c48:	4648      	mov	r0, r9
 8013c4a:	6859      	ldr	r1, [r3, #4]
 8013c4c:	f002 f806 	bl	8015c5c <_Balloc>
 8013c50:	9005      	str	r0, [sp, #20]
 8013c52:	2800      	cmp	r0, #0
 8013c54:	f43f aef6 	beq.w	8013a44 <_strtod_l+0x43c>
 8013c58:	9b07      	ldr	r3, [sp, #28]
 8013c5a:	691a      	ldr	r2, [r3, #16]
 8013c5c:	3202      	adds	r2, #2
 8013c5e:	f103 010c 	add.w	r1, r3, #12
 8013c62:	0092      	lsls	r2, r2, #2
 8013c64:	300c      	adds	r0, #12
 8013c66:	f7fe fd13 	bl	8012690 <memcpy>
 8013c6a:	aa1e      	add	r2, sp, #120	; 0x78
 8013c6c:	a91d      	add	r1, sp, #116	; 0x74
 8013c6e:	ec4b ab10 	vmov	d0, sl, fp
 8013c72:	4648      	mov	r0, r9
 8013c74:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013c78:	f002 fb32 	bl	80162e0 <__d2b>
 8013c7c:	901c      	str	r0, [sp, #112]	; 0x70
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	f43f aee0 	beq.w	8013a44 <_strtod_l+0x43c>
 8013c84:	2101      	movs	r1, #1
 8013c86:	4648      	mov	r0, r9
 8013c88:	f002 f8fa 	bl	8015e80 <__i2b>
 8013c8c:	4680      	mov	r8, r0
 8013c8e:	2800      	cmp	r0, #0
 8013c90:	f43f aed8 	beq.w	8013a44 <_strtod_l+0x43c>
 8013c94:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8013c96:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013c98:	2e00      	cmp	r6, #0
 8013c9a:	bfab      	itete	ge
 8013c9c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013c9e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013ca0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8013ca2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8013ca4:	bfac      	ite	ge
 8013ca6:	18f7      	addge	r7, r6, r3
 8013ca8:	1b9d      	sublt	r5, r3, r6
 8013caa:	9b04      	ldr	r3, [sp, #16]
 8013cac:	1af6      	subs	r6, r6, r3
 8013cae:	4416      	add	r6, r2
 8013cb0:	4b63      	ldr	r3, [pc, #396]	; (8013e40 <_strtod_l+0x838>)
 8013cb2:	3e01      	subs	r6, #1
 8013cb4:	429e      	cmp	r6, r3
 8013cb6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013cba:	f280 80af 	bge.w	8013e1c <_strtod_l+0x814>
 8013cbe:	1b9b      	subs	r3, r3, r6
 8013cc0:	2b1f      	cmp	r3, #31
 8013cc2:	eba2 0203 	sub.w	r2, r2, r3
 8013cc6:	f04f 0101 	mov.w	r1, #1
 8013cca:	f300 809b 	bgt.w	8013e04 <_strtod_l+0x7fc>
 8013cce:	fa01 f303 	lsl.w	r3, r1, r3
 8013cd2:	930f      	str	r3, [sp, #60]	; 0x3c
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	930a      	str	r3, [sp, #40]	; 0x28
 8013cd8:	18be      	adds	r6, r7, r2
 8013cda:	9b04      	ldr	r3, [sp, #16]
 8013cdc:	42b7      	cmp	r7, r6
 8013cde:	4415      	add	r5, r2
 8013ce0:	441d      	add	r5, r3
 8013ce2:	463b      	mov	r3, r7
 8013ce4:	bfa8      	it	ge
 8013ce6:	4633      	movge	r3, r6
 8013ce8:	42ab      	cmp	r3, r5
 8013cea:	bfa8      	it	ge
 8013cec:	462b      	movge	r3, r5
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	bfc2      	ittt	gt
 8013cf2:	1af6      	subgt	r6, r6, r3
 8013cf4:	1aed      	subgt	r5, r5, r3
 8013cf6:	1aff      	subgt	r7, r7, r3
 8013cf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013cfa:	b1bb      	cbz	r3, 8013d2c <_strtod_l+0x724>
 8013cfc:	4641      	mov	r1, r8
 8013cfe:	461a      	mov	r2, r3
 8013d00:	4648      	mov	r0, r9
 8013d02:	f002 f95d 	bl	8015fc0 <__pow5mult>
 8013d06:	4680      	mov	r8, r0
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	f43f ae9b 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d0e:	4601      	mov	r1, r0
 8013d10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d12:	4648      	mov	r0, r9
 8013d14:	f002 f8bd 	bl	8015e92 <__multiply>
 8013d18:	900c      	str	r0, [sp, #48]	; 0x30
 8013d1a:	2800      	cmp	r0, #0
 8013d1c:	f43f ae92 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d22:	4648      	mov	r0, r9
 8013d24:	f001 ffce 	bl	8015cc4 <_Bfree>
 8013d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d2a:	931c      	str	r3, [sp, #112]	; 0x70
 8013d2c:	2e00      	cmp	r6, #0
 8013d2e:	dc7a      	bgt.n	8013e26 <_strtod_l+0x81e>
 8013d30:	9b06      	ldr	r3, [sp, #24]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	dd08      	ble.n	8013d48 <_strtod_l+0x740>
 8013d36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013d38:	9905      	ldr	r1, [sp, #20]
 8013d3a:	4648      	mov	r0, r9
 8013d3c:	f002 f940 	bl	8015fc0 <__pow5mult>
 8013d40:	9005      	str	r0, [sp, #20]
 8013d42:	2800      	cmp	r0, #0
 8013d44:	f43f ae7e 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d48:	2d00      	cmp	r5, #0
 8013d4a:	dd08      	ble.n	8013d5e <_strtod_l+0x756>
 8013d4c:	462a      	mov	r2, r5
 8013d4e:	9905      	ldr	r1, [sp, #20]
 8013d50:	4648      	mov	r0, r9
 8013d52:	f002 f983 	bl	801605c <__lshift>
 8013d56:	9005      	str	r0, [sp, #20]
 8013d58:	2800      	cmp	r0, #0
 8013d5a:	f43f ae73 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d5e:	2f00      	cmp	r7, #0
 8013d60:	dd08      	ble.n	8013d74 <_strtod_l+0x76c>
 8013d62:	4641      	mov	r1, r8
 8013d64:	463a      	mov	r2, r7
 8013d66:	4648      	mov	r0, r9
 8013d68:	f002 f978 	bl	801605c <__lshift>
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	2800      	cmp	r0, #0
 8013d70:	f43f ae68 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d74:	9a05      	ldr	r2, [sp, #20]
 8013d76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d78:	4648      	mov	r0, r9
 8013d7a:	f002 f9dd 	bl	8016138 <__mdiff>
 8013d7e:	4604      	mov	r4, r0
 8013d80:	2800      	cmp	r0, #0
 8013d82:	f43f ae5f 	beq.w	8013a44 <_strtod_l+0x43c>
 8013d86:	68c3      	ldr	r3, [r0, #12]
 8013d88:	930c      	str	r3, [sp, #48]	; 0x30
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	60c3      	str	r3, [r0, #12]
 8013d8e:	4641      	mov	r1, r8
 8013d90:	f002 f9b8 	bl	8016104 <__mcmp>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	da55      	bge.n	8013e44 <_strtod_l+0x83c>
 8013d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013d9a:	b9e3      	cbnz	r3, 8013dd6 <_strtod_l+0x7ce>
 8013d9c:	f1ba 0f00 	cmp.w	sl, #0
 8013da0:	d119      	bne.n	8013dd6 <_strtod_l+0x7ce>
 8013da2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013da6:	b9b3      	cbnz	r3, 8013dd6 <_strtod_l+0x7ce>
 8013da8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013dac:	0d1b      	lsrs	r3, r3, #20
 8013dae:	051b      	lsls	r3, r3, #20
 8013db0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013db4:	d90f      	bls.n	8013dd6 <_strtod_l+0x7ce>
 8013db6:	6963      	ldr	r3, [r4, #20]
 8013db8:	b913      	cbnz	r3, 8013dc0 <_strtod_l+0x7b8>
 8013dba:	6923      	ldr	r3, [r4, #16]
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	dd0a      	ble.n	8013dd6 <_strtod_l+0x7ce>
 8013dc0:	4621      	mov	r1, r4
 8013dc2:	2201      	movs	r2, #1
 8013dc4:	4648      	mov	r0, r9
 8013dc6:	f002 f949 	bl	801605c <__lshift>
 8013dca:	4641      	mov	r1, r8
 8013dcc:	4604      	mov	r4, r0
 8013dce:	f002 f999 	bl	8016104 <__mcmp>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	dc67      	bgt.n	8013ea6 <_strtod_l+0x89e>
 8013dd6:	9b04      	ldr	r3, [sp, #16]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d171      	bne.n	8013ec0 <_strtod_l+0x8b8>
 8013ddc:	e63d      	b.n	8013a5a <_strtod_l+0x452>
 8013dde:	f018 0f01 	tst.w	r8, #1
 8013de2:	d004      	beq.n	8013dee <_strtod_l+0x7e6>
 8013de4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013de8:	f7ec fc1e 	bl	8000628 <__aeabi_dmul>
 8013dec:	2301      	movs	r3, #1
 8013dee:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013df2:	3508      	adds	r5, #8
 8013df4:	e6e5      	b.n	8013bc2 <_strtod_l+0x5ba>
 8013df6:	f04f 32ff 	mov.w	r2, #4294967295
 8013dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8013dfe:	ea03 0a0a 	and.w	sl, r3, sl
 8013e02:	e6ff      	b.n	8013c04 <_strtod_l+0x5fc>
 8013e04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013e08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013e0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013e10:	36e2      	adds	r6, #226	; 0xe2
 8013e12:	fa01 f306 	lsl.w	r3, r1, r6
 8013e16:	930a      	str	r3, [sp, #40]	; 0x28
 8013e18:	910f      	str	r1, [sp, #60]	; 0x3c
 8013e1a:	e75d      	b.n	8013cd8 <_strtod_l+0x6d0>
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8013e20:	2301      	movs	r3, #1
 8013e22:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e24:	e758      	b.n	8013cd8 <_strtod_l+0x6d0>
 8013e26:	4632      	mov	r2, r6
 8013e28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013e2a:	4648      	mov	r0, r9
 8013e2c:	f002 f916 	bl	801605c <__lshift>
 8013e30:	901c      	str	r0, [sp, #112]	; 0x70
 8013e32:	2800      	cmp	r0, #0
 8013e34:	f47f af7c 	bne.w	8013d30 <_strtod_l+0x728>
 8013e38:	e604      	b.n	8013a44 <_strtod_l+0x43c>
 8013e3a:	bf00      	nop
 8013e3c:	08017bd8 	.word	0x08017bd8
 8013e40:	fffffc02 	.word	0xfffffc02
 8013e44:	465d      	mov	r5, fp
 8013e46:	f040 8086 	bne.w	8013f56 <_strtod_l+0x94e>
 8013e4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e50:	b32a      	cbz	r2, 8013e9e <_strtod_l+0x896>
 8013e52:	4aaf      	ldr	r2, [pc, #700]	; (8014110 <_strtod_l+0xb08>)
 8013e54:	4293      	cmp	r3, r2
 8013e56:	d153      	bne.n	8013f00 <_strtod_l+0x8f8>
 8013e58:	9b04      	ldr	r3, [sp, #16]
 8013e5a:	4650      	mov	r0, sl
 8013e5c:	b1d3      	cbz	r3, 8013e94 <_strtod_l+0x88c>
 8013e5e:	4aad      	ldr	r2, [pc, #692]	; (8014114 <_strtod_l+0xb0c>)
 8013e60:	402a      	ands	r2, r5
 8013e62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8013e66:	f04f 31ff 	mov.w	r1, #4294967295
 8013e6a:	d816      	bhi.n	8013e9a <_strtod_l+0x892>
 8013e6c:	0d12      	lsrs	r2, r2, #20
 8013e6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013e72:	fa01 f303 	lsl.w	r3, r1, r3
 8013e76:	4298      	cmp	r0, r3
 8013e78:	d142      	bne.n	8013f00 <_strtod_l+0x8f8>
 8013e7a:	4ba7      	ldr	r3, [pc, #668]	; (8014118 <_strtod_l+0xb10>)
 8013e7c:	429d      	cmp	r5, r3
 8013e7e:	d102      	bne.n	8013e86 <_strtod_l+0x87e>
 8013e80:	3001      	adds	r0, #1
 8013e82:	f43f addf 	beq.w	8013a44 <_strtod_l+0x43c>
 8013e86:	4ba3      	ldr	r3, [pc, #652]	; (8014114 <_strtod_l+0xb0c>)
 8013e88:	402b      	ands	r3, r5
 8013e8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013e8e:	f04f 0a00 	mov.w	sl, #0
 8013e92:	e7a0      	b.n	8013dd6 <_strtod_l+0x7ce>
 8013e94:	f04f 33ff 	mov.w	r3, #4294967295
 8013e98:	e7ed      	b.n	8013e76 <_strtod_l+0x86e>
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	e7eb      	b.n	8013e76 <_strtod_l+0x86e>
 8013e9e:	bb7b      	cbnz	r3, 8013f00 <_strtod_l+0x8f8>
 8013ea0:	f1ba 0f00 	cmp.w	sl, #0
 8013ea4:	d12c      	bne.n	8013f00 <_strtod_l+0x8f8>
 8013ea6:	9904      	ldr	r1, [sp, #16]
 8013ea8:	4a9a      	ldr	r2, [pc, #616]	; (8014114 <_strtod_l+0xb0c>)
 8013eaa:	465b      	mov	r3, fp
 8013eac:	b1f1      	cbz	r1, 8013eec <_strtod_l+0x8e4>
 8013eae:	ea02 010b 	and.w	r1, r2, fp
 8013eb2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013eb6:	dc19      	bgt.n	8013eec <_strtod_l+0x8e4>
 8013eb8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ebc:	f77f ae5b 	ble.w	8013b76 <_strtod_l+0x56e>
 8013ec0:	4a96      	ldr	r2, [pc, #600]	; (801411c <_strtod_l+0xb14>)
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8013ec8:	4650      	mov	r0, sl
 8013eca:	4659      	mov	r1, fp
 8013ecc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ed0:	f7ec fbaa 	bl	8000628 <__aeabi_dmul>
 8013ed4:	4682      	mov	sl, r0
 8013ed6:	468b      	mov	fp, r1
 8013ed8:	2900      	cmp	r1, #0
 8013eda:	f47f adbe 	bne.w	8013a5a <_strtod_l+0x452>
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f47f adbb 	bne.w	8013a5a <_strtod_l+0x452>
 8013ee4:	2322      	movs	r3, #34	; 0x22
 8013ee6:	f8c9 3000 	str.w	r3, [r9]
 8013eea:	e5b6      	b.n	8013a5a <_strtod_l+0x452>
 8013eec:	4013      	ands	r3, r2
 8013eee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013ef2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013ef6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013efa:	f04f 3aff 	mov.w	sl, #4294967295
 8013efe:	e76a      	b.n	8013dd6 <_strtod_l+0x7ce>
 8013f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f02:	b193      	cbz	r3, 8013f2a <_strtod_l+0x922>
 8013f04:	422b      	tst	r3, r5
 8013f06:	f43f af66 	beq.w	8013dd6 <_strtod_l+0x7ce>
 8013f0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f0c:	9a04      	ldr	r2, [sp, #16]
 8013f0e:	4650      	mov	r0, sl
 8013f10:	4659      	mov	r1, fp
 8013f12:	b173      	cbz	r3, 8013f32 <_strtod_l+0x92a>
 8013f14:	f7ff fb5b 	bl	80135ce <sulp>
 8013f18:	4602      	mov	r2, r0
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f20:	f7ec f9cc 	bl	80002bc <__adddf3>
 8013f24:	4682      	mov	sl, r0
 8013f26:	468b      	mov	fp, r1
 8013f28:	e755      	b.n	8013dd6 <_strtod_l+0x7ce>
 8013f2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f2c:	ea13 0f0a 	tst.w	r3, sl
 8013f30:	e7e9      	b.n	8013f06 <_strtod_l+0x8fe>
 8013f32:	f7ff fb4c 	bl	80135ce <sulp>
 8013f36:	4602      	mov	r2, r0
 8013f38:	460b      	mov	r3, r1
 8013f3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013f3e:	f7ec f9bb 	bl	80002b8 <__aeabi_dsub>
 8013f42:	2200      	movs	r2, #0
 8013f44:	2300      	movs	r3, #0
 8013f46:	4682      	mov	sl, r0
 8013f48:	468b      	mov	fp, r1
 8013f4a:	f7ec fdd5 	bl	8000af8 <__aeabi_dcmpeq>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	f47f ae11 	bne.w	8013b76 <_strtod_l+0x56e>
 8013f54:	e73f      	b.n	8013dd6 <_strtod_l+0x7ce>
 8013f56:	4641      	mov	r1, r8
 8013f58:	4620      	mov	r0, r4
 8013f5a:	f002 fa10 	bl	801637e <__ratio>
 8013f5e:	ec57 6b10 	vmov	r6, r7, d0
 8013f62:	2200      	movs	r2, #0
 8013f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013f68:	ee10 0a10 	vmov	r0, s0
 8013f6c:	4639      	mov	r1, r7
 8013f6e:	f7ec fdd7 	bl	8000b20 <__aeabi_dcmple>
 8013f72:	2800      	cmp	r0, #0
 8013f74:	d077      	beq.n	8014066 <_strtod_l+0xa5e>
 8013f76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d04a      	beq.n	8014012 <_strtod_l+0xa0a>
 8013f7c:	4b68      	ldr	r3, [pc, #416]	; (8014120 <_strtod_l+0xb18>)
 8013f7e:	2200      	movs	r2, #0
 8013f80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013f84:	4f66      	ldr	r7, [pc, #408]	; (8014120 <_strtod_l+0xb18>)
 8013f86:	2600      	movs	r6, #0
 8013f88:	4b62      	ldr	r3, [pc, #392]	; (8014114 <_strtod_l+0xb0c>)
 8013f8a:	402b      	ands	r3, r5
 8013f8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8013f8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013f90:	4b64      	ldr	r3, [pc, #400]	; (8014124 <_strtod_l+0xb1c>)
 8013f92:	429a      	cmp	r2, r3
 8013f94:	f040 80ce 	bne.w	8014134 <_strtod_l+0xb2c>
 8013f98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013f9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fa0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8013fa4:	ec4b ab10 	vmov	d0, sl, fp
 8013fa8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8013fac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013fb0:	f002 f920 	bl	80161f4 <__ulp>
 8013fb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013fb8:	ec53 2b10 	vmov	r2, r3, d0
 8013fbc:	f7ec fb34 	bl	8000628 <__aeabi_dmul>
 8013fc0:	4652      	mov	r2, sl
 8013fc2:	465b      	mov	r3, fp
 8013fc4:	f7ec f97a 	bl	80002bc <__adddf3>
 8013fc8:	460b      	mov	r3, r1
 8013fca:	4952      	ldr	r1, [pc, #328]	; (8014114 <_strtod_l+0xb0c>)
 8013fcc:	4a56      	ldr	r2, [pc, #344]	; (8014128 <_strtod_l+0xb20>)
 8013fce:	4019      	ands	r1, r3
 8013fd0:	4291      	cmp	r1, r2
 8013fd2:	4682      	mov	sl, r0
 8013fd4:	d95b      	bls.n	801408e <_strtod_l+0xa86>
 8013fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013fdc:	4293      	cmp	r3, r2
 8013fde:	d103      	bne.n	8013fe8 <_strtod_l+0x9e0>
 8013fe0:	9b08      	ldr	r3, [sp, #32]
 8013fe2:	3301      	adds	r3, #1
 8013fe4:	f43f ad2e 	beq.w	8013a44 <_strtod_l+0x43c>
 8013fe8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014118 <_strtod_l+0xb10>
 8013fec:	f04f 3aff 	mov.w	sl, #4294967295
 8013ff0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013ff2:	4648      	mov	r0, r9
 8013ff4:	f001 fe66 	bl	8015cc4 <_Bfree>
 8013ff8:	9905      	ldr	r1, [sp, #20]
 8013ffa:	4648      	mov	r0, r9
 8013ffc:	f001 fe62 	bl	8015cc4 <_Bfree>
 8014000:	4641      	mov	r1, r8
 8014002:	4648      	mov	r0, r9
 8014004:	f001 fe5e 	bl	8015cc4 <_Bfree>
 8014008:	4621      	mov	r1, r4
 801400a:	4648      	mov	r0, r9
 801400c:	f001 fe5a 	bl	8015cc4 <_Bfree>
 8014010:	e619      	b.n	8013c46 <_strtod_l+0x63e>
 8014012:	f1ba 0f00 	cmp.w	sl, #0
 8014016:	d11a      	bne.n	801404e <_strtod_l+0xa46>
 8014018:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801401c:	b9eb      	cbnz	r3, 801405a <_strtod_l+0xa52>
 801401e:	2200      	movs	r2, #0
 8014020:	4b3f      	ldr	r3, [pc, #252]	; (8014120 <_strtod_l+0xb18>)
 8014022:	4630      	mov	r0, r6
 8014024:	4639      	mov	r1, r7
 8014026:	f7ec fd71 	bl	8000b0c <__aeabi_dcmplt>
 801402a:	b9c8      	cbnz	r0, 8014060 <_strtod_l+0xa58>
 801402c:	4630      	mov	r0, r6
 801402e:	4639      	mov	r1, r7
 8014030:	2200      	movs	r2, #0
 8014032:	4b3e      	ldr	r3, [pc, #248]	; (801412c <_strtod_l+0xb24>)
 8014034:	f7ec faf8 	bl	8000628 <__aeabi_dmul>
 8014038:	4606      	mov	r6, r0
 801403a:	460f      	mov	r7, r1
 801403c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014040:	9618      	str	r6, [sp, #96]	; 0x60
 8014042:	9319      	str	r3, [sp, #100]	; 0x64
 8014044:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014048:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801404c:	e79c      	b.n	8013f88 <_strtod_l+0x980>
 801404e:	f1ba 0f01 	cmp.w	sl, #1
 8014052:	d102      	bne.n	801405a <_strtod_l+0xa52>
 8014054:	2d00      	cmp	r5, #0
 8014056:	f43f ad8e 	beq.w	8013b76 <_strtod_l+0x56e>
 801405a:	2200      	movs	r2, #0
 801405c:	4b34      	ldr	r3, [pc, #208]	; (8014130 <_strtod_l+0xb28>)
 801405e:	e78f      	b.n	8013f80 <_strtod_l+0x978>
 8014060:	2600      	movs	r6, #0
 8014062:	4f32      	ldr	r7, [pc, #200]	; (801412c <_strtod_l+0xb24>)
 8014064:	e7ea      	b.n	801403c <_strtod_l+0xa34>
 8014066:	4b31      	ldr	r3, [pc, #196]	; (801412c <_strtod_l+0xb24>)
 8014068:	4630      	mov	r0, r6
 801406a:	4639      	mov	r1, r7
 801406c:	2200      	movs	r2, #0
 801406e:	f7ec fadb 	bl	8000628 <__aeabi_dmul>
 8014072:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014074:	4606      	mov	r6, r0
 8014076:	460f      	mov	r7, r1
 8014078:	b933      	cbnz	r3, 8014088 <_strtod_l+0xa80>
 801407a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801407e:	9010      	str	r0, [sp, #64]	; 0x40
 8014080:	9311      	str	r3, [sp, #68]	; 0x44
 8014082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014086:	e7df      	b.n	8014048 <_strtod_l+0xa40>
 8014088:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801408c:	e7f9      	b.n	8014082 <_strtod_l+0xa7a>
 801408e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8014092:	9b04      	ldr	r3, [sp, #16]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d1ab      	bne.n	8013ff0 <_strtod_l+0x9e8>
 8014098:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801409c:	0d1b      	lsrs	r3, r3, #20
 801409e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80140a0:	051b      	lsls	r3, r3, #20
 80140a2:	429a      	cmp	r2, r3
 80140a4:	465d      	mov	r5, fp
 80140a6:	d1a3      	bne.n	8013ff0 <_strtod_l+0x9e8>
 80140a8:	4639      	mov	r1, r7
 80140aa:	4630      	mov	r0, r6
 80140ac:	f7ec fd6c 	bl	8000b88 <__aeabi_d2iz>
 80140b0:	f7ec fa50 	bl	8000554 <__aeabi_i2d>
 80140b4:	460b      	mov	r3, r1
 80140b6:	4602      	mov	r2, r0
 80140b8:	4639      	mov	r1, r7
 80140ba:	4630      	mov	r0, r6
 80140bc:	f7ec f8fc 	bl	80002b8 <__aeabi_dsub>
 80140c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80140c2:	4606      	mov	r6, r0
 80140c4:	460f      	mov	r7, r1
 80140c6:	b933      	cbnz	r3, 80140d6 <_strtod_l+0xace>
 80140c8:	f1ba 0f00 	cmp.w	sl, #0
 80140cc:	d103      	bne.n	80140d6 <_strtod_l+0xace>
 80140ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80140d2:	2d00      	cmp	r5, #0
 80140d4:	d06d      	beq.n	80141b2 <_strtod_l+0xbaa>
 80140d6:	a30a      	add	r3, pc, #40	; (adr r3, 8014100 <_strtod_l+0xaf8>)
 80140d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140dc:	4630      	mov	r0, r6
 80140de:	4639      	mov	r1, r7
 80140e0:	f7ec fd14 	bl	8000b0c <__aeabi_dcmplt>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	f47f acb8 	bne.w	8013a5a <_strtod_l+0x452>
 80140ea:	a307      	add	r3, pc, #28	; (adr r3, 8014108 <_strtod_l+0xb00>)
 80140ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f0:	4630      	mov	r0, r6
 80140f2:	4639      	mov	r1, r7
 80140f4:	f7ec fd28 	bl	8000b48 <__aeabi_dcmpgt>
 80140f8:	2800      	cmp	r0, #0
 80140fa:	f43f af79 	beq.w	8013ff0 <_strtod_l+0x9e8>
 80140fe:	e4ac      	b.n	8013a5a <_strtod_l+0x452>
 8014100:	94a03595 	.word	0x94a03595
 8014104:	3fdfffff 	.word	0x3fdfffff
 8014108:	35afe535 	.word	0x35afe535
 801410c:	3fe00000 	.word	0x3fe00000
 8014110:	000fffff 	.word	0x000fffff
 8014114:	7ff00000 	.word	0x7ff00000
 8014118:	7fefffff 	.word	0x7fefffff
 801411c:	39500000 	.word	0x39500000
 8014120:	3ff00000 	.word	0x3ff00000
 8014124:	7fe00000 	.word	0x7fe00000
 8014128:	7c9fffff 	.word	0x7c9fffff
 801412c:	3fe00000 	.word	0x3fe00000
 8014130:	bff00000 	.word	0xbff00000
 8014134:	9b04      	ldr	r3, [sp, #16]
 8014136:	b333      	cbz	r3, 8014186 <_strtod_l+0xb7e>
 8014138:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801413a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801413e:	d822      	bhi.n	8014186 <_strtod_l+0xb7e>
 8014140:	a327      	add	r3, pc, #156	; (adr r3, 80141e0 <_strtod_l+0xbd8>)
 8014142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014146:	4630      	mov	r0, r6
 8014148:	4639      	mov	r1, r7
 801414a:	f7ec fce9 	bl	8000b20 <__aeabi_dcmple>
 801414e:	b1a0      	cbz	r0, 801417a <_strtod_l+0xb72>
 8014150:	4639      	mov	r1, r7
 8014152:	4630      	mov	r0, r6
 8014154:	f7ec fd40 	bl	8000bd8 <__aeabi_d2uiz>
 8014158:	2800      	cmp	r0, #0
 801415a:	bf08      	it	eq
 801415c:	2001      	moveq	r0, #1
 801415e:	f7ec f9e9 	bl	8000534 <__aeabi_ui2d>
 8014162:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014164:	4606      	mov	r6, r0
 8014166:	460f      	mov	r7, r1
 8014168:	bb03      	cbnz	r3, 80141ac <_strtod_l+0xba4>
 801416a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801416e:	9012      	str	r0, [sp, #72]	; 0x48
 8014170:	9313      	str	r3, [sp, #76]	; 0x4c
 8014172:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8014176:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801417a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801417c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801417e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014182:	1a9b      	subs	r3, r3, r2
 8014184:	930b      	str	r3, [sp, #44]	; 0x2c
 8014186:	ed9d 0b08 	vldr	d0, [sp, #32]
 801418a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801418e:	f002 f831 	bl	80161f4 <__ulp>
 8014192:	4650      	mov	r0, sl
 8014194:	ec53 2b10 	vmov	r2, r3, d0
 8014198:	4659      	mov	r1, fp
 801419a:	f7ec fa45 	bl	8000628 <__aeabi_dmul>
 801419e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80141a2:	f7ec f88b 	bl	80002bc <__adddf3>
 80141a6:	4682      	mov	sl, r0
 80141a8:	468b      	mov	fp, r1
 80141aa:	e772      	b.n	8014092 <_strtod_l+0xa8a>
 80141ac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80141b0:	e7df      	b.n	8014172 <_strtod_l+0xb6a>
 80141b2:	a30d      	add	r3, pc, #52	; (adr r3, 80141e8 <_strtod_l+0xbe0>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	f7ec fca8 	bl	8000b0c <__aeabi_dcmplt>
 80141bc:	e79c      	b.n	80140f8 <_strtod_l+0xaf0>
 80141be:	2300      	movs	r3, #0
 80141c0:	930d      	str	r3, [sp, #52]	; 0x34
 80141c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80141c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80141c6:	6013      	str	r3, [r2, #0]
 80141c8:	f7ff ba61 	b.w	801368e <_strtod_l+0x86>
 80141cc:	2b65      	cmp	r3, #101	; 0x65
 80141ce:	f04f 0200 	mov.w	r2, #0
 80141d2:	f43f ab4e 	beq.w	8013872 <_strtod_l+0x26a>
 80141d6:	2101      	movs	r1, #1
 80141d8:	4614      	mov	r4, r2
 80141da:	9104      	str	r1, [sp, #16]
 80141dc:	f7ff bacb 	b.w	8013776 <_strtod_l+0x16e>
 80141e0:	ffc00000 	.word	0xffc00000
 80141e4:	41dfffff 	.word	0x41dfffff
 80141e8:	94a03595 	.word	0x94a03595
 80141ec:	3fcfffff 	.word	0x3fcfffff

080141f0 <_strtod_r>:
 80141f0:	4b05      	ldr	r3, [pc, #20]	; (8014208 <_strtod_r+0x18>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	b410      	push	{r4}
 80141f6:	6a1b      	ldr	r3, [r3, #32]
 80141f8:	4c04      	ldr	r4, [pc, #16]	; (801420c <_strtod_r+0x1c>)
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	bf08      	it	eq
 80141fe:	4623      	moveq	r3, r4
 8014200:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014204:	f7ff ba00 	b.w	8013608 <_strtod_l>
 8014208:	2000000c 	.word	0x2000000c
 801420c:	20000070 	.word	0x20000070

08014210 <_strtol_l.isra.0>:
 8014210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014214:	4680      	mov	r8, r0
 8014216:	4689      	mov	r9, r1
 8014218:	4692      	mov	sl, r2
 801421a:	461e      	mov	r6, r3
 801421c:	460f      	mov	r7, r1
 801421e:	463d      	mov	r5, r7
 8014220:	9808      	ldr	r0, [sp, #32]
 8014222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014226:	f001 fc67 	bl	8015af8 <__locale_ctype_ptr_l>
 801422a:	4420      	add	r0, r4
 801422c:	7843      	ldrb	r3, [r0, #1]
 801422e:	f013 0308 	ands.w	r3, r3, #8
 8014232:	d132      	bne.n	801429a <_strtol_l.isra.0+0x8a>
 8014234:	2c2d      	cmp	r4, #45	; 0x2d
 8014236:	d132      	bne.n	801429e <_strtol_l.isra.0+0x8e>
 8014238:	787c      	ldrb	r4, [r7, #1]
 801423a:	1cbd      	adds	r5, r7, #2
 801423c:	2201      	movs	r2, #1
 801423e:	2e00      	cmp	r6, #0
 8014240:	d05d      	beq.n	80142fe <_strtol_l.isra.0+0xee>
 8014242:	2e10      	cmp	r6, #16
 8014244:	d109      	bne.n	801425a <_strtol_l.isra.0+0x4a>
 8014246:	2c30      	cmp	r4, #48	; 0x30
 8014248:	d107      	bne.n	801425a <_strtol_l.isra.0+0x4a>
 801424a:	782b      	ldrb	r3, [r5, #0]
 801424c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014250:	2b58      	cmp	r3, #88	; 0x58
 8014252:	d14f      	bne.n	80142f4 <_strtol_l.isra.0+0xe4>
 8014254:	786c      	ldrb	r4, [r5, #1]
 8014256:	2610      	movs	r6, #16
 8014258:	3502      	adds	r5, #2
 801425a:	2a00      	cmp	r2, #0
 801425c:	bf14      	ite	ne
 801425e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8014262:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8014266:	2700      	movs	r7, #0
 8014268:	fbb1 fcf6 	udiv	ip, r1, r6
 801426c:	4638      	mov	r0, r7
 801426e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8014272:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8014276:	2b09      	cmp	r3, #9
 8014278:	d817      	bhi.n	80142aa <_strtol_l.isra.0+0x9a>
 801427a:	461c      	mov	r4, r3
 801427c:	42a6      	cmp	r6, r4
 801427e:	dd23      	ble.n	80142c8 <_strtol_l.isra.0+0xb8>
 8014280:	1c7b      	adds	r3, r7, #1
 8014282:	d007      	beq.n	8014294 <_strtol_l.isra.0+0x84>
 8014284:	4584      	cmp	ip, r0
 8014286:	d31c      	bcc.n	80142c2 <_strtol_l.isra.0+0xb2>
 8014288:	d101      	bne.n	801428e <_strtol_l.isra.0+0x7e>
 801428a:	45a6      	cmp	lr, r4
 801428c:	db19      	blt.n	80142c2 <_strtol_l.isra.0+0xb2>
 801428e:	fb00 4006 	mla	r0, r0, r6, r4
 8014292:	2701      	movs	r7, #1
 8014294:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014298:	e7eb      	b.n	8014272 <_strtol_l.isra.0+0x62>
 801429a:	462f      	mov	r7, r5
 801429c:	e7bf      	b.n	801421e <_strtol_l.isra.0+0xe>
 801429e:	2c2b      	cmp	r4, #43	; 0x2b
 80142a0:	bf04      	itt	eq
 80142a2:	1cbd      	addeq	r5, r7, #2
 80142a4:	787c      	ldrbeq	r4, [r7, #1]
 80142a6:	461a      	mov	r2, r3
 80142a8:	e7c9      	b.n	801423e <_strtol_l.isra.0+0x2e>
 80142aa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80142ae:	2b19      	cmp	r3, #25
 80142b0:	d801      	bhi.n	80142b6 <_strtol_l.isra.0+0xa6>
 80142b2:	3c37      	subs	r4, #55	; 0x37
 80142b4:	e7e2      	b.n	801427c <_strtol_l.isra.0+0x6c>
 80142b6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80142ba:	2b19      	cmp	r3, #25
 80142bc:	d804      	bhi.n	80142c8 <_strtol_l.isra.0+0xb8>
 80142be:	3c57      	subs	r4, #87	; 0x57
 80142c0:	e7dc      	b.n	801427c <_strtol_l.isra.0+0x6c>
 80142c2:	f04f 37ff 	mov.w	r7, #4294967295
 80142c6:	e7e5      	b.n	8014294 <_strtol_l.isra.0+0x84>
 80142c8:	1c7b      	adds	r3, r7, #1
 80142ca:	d108      	bne.n	80142de <_strtol_l.isra.0+0xce>
 80142cc:	2322      	movs	r3, #34	; 0x22
 80142ce:	f8c8 3000 	str.w	r3, [r8]
 80142d2:	4608      	mov	r0, r1
 80142d4:	f1ba 0f00 	cmp.w	sl, #0
 80142d8:	d107      	bne.n	80142ea <_strtol_l.isra.0+0xda>
 80142da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142de:	b102      	cbz	r2, 80142e2 <_strtol_l.isra.0+0xd2>
 80142e0:	4240      	negs	r0, r0
 80142e2:	f1ba 0f00 	cmp.w	sl, #0
 80142e6:	d0f8      	beq.n	80142da <_strtol_l.isra.0+0xca>
 80142e8:	b10f      	cbz	r7, 80142ee <_strtol_l.isra.0+0xde>
 80142ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80142ee:	f8ca 9000 	str.w	r9, [sl]
 80142f2:	e7f2      	b.n	80142da <_strtol_l.isra.0+0xca>
 80142f4:	2430      	movs	r4, #48	; 0x30
 80142f6:	2e00      	cmp	r6, #0
 80142f8:	d1af      	bne.n	801425a <_strtol_l.isra.0+0x4a>
 80142fa:	2608      	movs	r6, #8
 80142fc:	e7ad      	b.n	801425a <_strtol_l.isra.0+0x4a>
 80142fe:	2c30      	cmp	r4, #48	; 0x30
 8014300:	d0a3      	beq.n	801424a <_strtol_l.isra.0+0x3a>
 8014302:	260a      	movs	r6, #10
 8014304:	e7a9      	b.n	801425a <_strtol_l.isra.0+0x4a>
	...

08014308 <_strtol_r>:
 8014308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801430a:	4c06      	ldr	r4, [pc, #24]	; (8014324 <_strtol_r+0x1c>)
 801430c:	4d06      	ldr	r5, [pc, #24]	; (8014328 <_strtol_r+0x20>)
 801430e:	6824      	ldr	r4, [r4, #0]
 8014310:	6a24      	ldr	r4, [r4, #32]
 8014312:	2c00      	cmp	r4, #0
 8014314:	bf08      	it	eq
 8014316:	462c      	moveq	r4, r5
 8014318:	9400      	str	r4, [sp, #0]
 801431a:	f7ff ff79 	bl	8014210 <_strtol_l.isra.0>
 801431e:	b003      	add	sp, #12
 8014320:	bd30      	pop	{r4, r5, pc}
 8014322:	bf00      	nop
 8014324:	2000000c 	.word	0x2000000c
 8014328:	20000070 	.word	0x20000070

0801432c <_vsiprintf_r>:
 801432c:	b500      	push	{lr}
 801432e:	b09b      	sub	sp, #108	; 0x6c
 8014330:	9100      	str	r1, [sp, #0]
 8014332:	9104      	str	r1, [sp, #16]
 8014334:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014338:	9105      	str	r1, [sp, #20]
 801433a:	9102      	str	r1, [sp, #8]
 801433c:	4905      	ldr	r1, [pc, #20]	; (8014354 <_vsiprintf_r+0x28>)
 801433e:	9103      	str	r1, [sp, #12]
 8014340:	4669      	mov	r1, sp
 8014342:	f002 f99b 	bl	801667c <_svfiprintf_r>
 8014346:	9b00      	ldr	r3, [sp, #0]
 8014348:	2200      	movs	r2, #0
 801434a:	701a      	strb	r2, [r3, #0]
 801434c:	b01b      	add	sp, #108	; 0x6c
 801434e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014352:	bf00      	nop
 8014354:	ffff0208 	.word	0xffff0208

08014358 <vsiprintf>:
 8014358:	4613      	mov	r3, r2
 801435a:	460a      	mov	r2, r1
 801435c:	4601      	mov	r1, r0
 801435e:	4802      	ldr	r0, [pc, #8]	; (8014368 <vsiprintf+0x10>)
 8014360:	6800      	ldr	r0, [r0, #0]
 8014362:	f7ff bfe3 	b.w	801432c <_vsiprintf_r>
 8014366:	bf00      	nop
 8014368:	2000000c 	.word	0x2000000c

0801436c <__swbuf_r>:
 801436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801436e:	460e      	mov	r6, r1
 8014370:	4614      	mov	r4, r2
 8014372:	4605      	mov	r5, r0
 8014374:	b118      	cbz	r0, 801437e <__swbuf_r+0x12>
 8014376:	6983      	ldr	r3, [r0, #24]
 8014378:	b90b      	cbnz	r3, 801437e <__swbuf_r+0x12>
 801437a:	f001 f80d 	bl	8015398 <__sinit>
 801437e:	4b21      	ldr	r3, [pc, #132]	; (8014404 <__swbuf_r+0x98>)
 8014380:	429c      	cmp	r4, r3
 8014382:	d12a      	bne.n	80143da <__swbuf_r+0x6e>
 8014384:	686c      	ldr	r4, [r5, #4]
 8014386:	69a3      	ldr	r3, [r4, #24]
 8014388:	60a3      	str	r3, [r4, #8]
 801438a:	89a3      	ldrh	r3, [r4, #12]
 801438c:	071a      	lsls	r2, r3, #28
 801438e:	d52e      	bpl.n	80143ee <__swbuf_r+0x82>
 8014390:	6923      	ldr	r3, [r4, #16]
 8014392:	b363      	cbz	r3, 80143ee <__swbuf_r+0x82>
 8014394:	6923      	ldr	r3, [r4, #16]
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	1ac0      	subs	r0, r0, r3
 801439a:	6963      	ldr	r3, [r4, #20]
 801439c:	b2f6      	uxtb	r6, r6
 801439e:	4283      	cmp	r3, r0
 80143a0:	4637      	mov	r7, r6
 80143a2:	dc04      	bgt.n	80143ae <__swbuf_r+0x42>
 80143a4:	4621      	mov	r1, r4
 80143a6:	4628      	mov	r0, r5
 80143a8:	f000 ff8c 	bl	80152c4 <_fflush_r>
 80143ac:	bb28      	cbnz	r0, 80143fa <__swbuf_r+0x8e>
 80143ae:	68a3      	ldr	r3, [r4, #8]
 80143b0:	3b01      	subs	r3, #1
 80143b2:	60a3      	str	r3, [r4, #8]
 80143b4:	6823      	ldr	r3, [r4, #0]
 80143b6:	1c5a      	adds	r2, r3, #1
 80143b8:	6022      	str	r2, [r4, #0]
 80143ba:	701e      	strb	r6, [r3, #0]
 80143bc:	6963      	ldr	r3, [r4, #20]
 80143be:	3001      	adds	r0, #1
 80143c0:	4283      	cmp	r3, r0
 80143c2:	d004      	beq.n	80143ce <__swbuf_r+0x62>
 80143c4:	89a3      	ldrh	r3, [r4, #12]
 80143c6:	07db      	lsls	r3, r3, #31
 80143c8:	d519      	bpl.n	80143fe <__swbuf_r+0x92>
 80143ca:	2e0a      	cmp	r6, #10
 80143cc:	d117      	bne.n	80143fe <__swbuf_r+0x92>
 80143ce:	4621      	mov	r1, r4
 80143d0:	4628      	mov	r0, r5
 80143d2:	f000 ff77 	bl	80152c4 <_fflush_r>
 80143d6:	b190      	cbz	r0, 80143fe <__swbuf_r+0x92>
 80143d8:	e00f      	b.n	80143fa <__swbuf_r+0x8e>
 80143da:	4b0b      	ldr	r3, [pc, #44]	; (8014408 <__swbuf_r+0x9c>)
 80143dc:	429c      	cmp	r4, r3
 80143de:	d101      	bne.n	80143e4 <__swbuf_r+0x78>
 80143e0:	68ac      	ldr	r4, [r5, #8]
 80143e2:	e7d0      	b.n	8014386 <__swbuf_r+0x1a>
 80143e4:	4b09      	ldr	r3, [pc, #36]	; (801440c <__swbuf_r+0xa0>)
 80143e6:	429c      	cmp	r4, r3
 80143e8:	bf08      	it	eq
 80143ea:	68ec      	ldreq	r4, [r5, #12]
 80143ec:	e7cb      	b.n	8014386 <__swbuf_r+0x1a>
 80143ee:	4621      	mov	r1, r4
 80143f0:	4628      	mov	r0, r5
 80143f2:	f000 f81f 	bl	8014434 <__swsetup_r>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	d0cc      	beq.n	8014394 <__swbuf_r+0x28>
 80143fa:	f04f 37ff 	mov.w	r7, #4294967295
 80143fe:	4638      	mov	r0, r7
 8014400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014402:	bf00      	nop
 8014404:	08017c30 	.word	0x08017c30
 8014408:	08017c50 	.word	0x08017c50
 801440c:	08017c10 	.word	0x08017c10

08014410 <_write_r>:
 8014410:	b538      	push	{r3, r4, r5, lr}
 8014412:	4c07      	ldr	r4, [pc, #28]	; (8014430 <_write_r+0x20>)
 8014414:	4605      	mov	r5, r0
 8014416:	4608      	mov	r0, r1
 8014418:	4611      	mov	r1, r2
 801441a:	2200      	movs	r2, #0
 801441c:	6022      	str	r2, [r4, #0]
 801441e:	461a      	mov	r2, r3
 8014420:	f7ef fa81 	bl	8003926 <_write>
 8014424:	1c43      	adds	r3, r0, #1
 8014426:	d102      	bne.n	801442e <_write_r+0x1e>
 8014428:	6823      	ldr	r3, [r4, #0]
 801442a:	b103      	cbz	r3, 801442e <_write_r+0x1e>
 801442c:	602b      	str	r3, [r5, #0]
 801442e:	bd38      	pop	{r3, r4, r5, pc}
 8014430:	2002faac 	.word	0x2002faac

08014434 <__swsetup_r>:
 8014434:	4b32      	ldr	r3, [pc, #200]	; (8014500 <__swsetup_r+0xcc>)
 8014436:	b570      	push	{r4, r5, r6, lr}
 8014438:	681d      	ldr	r5, [r3, #0]
 801443a:	4606      	mov	r6, r0
 801443c:	460c      	mov	r4, r1
 801443e:	b125      	cbz	r5, 801444a <__swsetup_r+0x16>
 8014440:	69ab      	ldr	r3, [r5, #24]
 8014442:	b913      	cbnz	r3, 801444a <__swsetup_r+0x16>
 8014444:	4628      	mov	r0, r5
 8014446:	f000 ffa7 	bl	8015398 <__sinit>
 801444a:	4b2e      	ldr	r3, [pc, #184]	; (8014504 <__swsetup_r+0xd0>)
 801444c:	429c      	cmp	r4, r3
 801444e:	d10f      	bne.n	8014470 <__swsetup_r+0x3c>
 8014450:	686c      	ldr	r4, [r5, #4]
 8014452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014456:	b29a      	uxth	r2, r3
 8014458:	0715      	lsls	r5, r2, #28
 801445a:	d42c      	bmi.n	80144b6 <__swsetup_r+0x82>
 801445c:	06d0      	lsls	r0, r2, #27
 801445e:	d411      	bmi.n	8014484 <__swsetup_r+0x50>
 8014460:	2209      	movs	r2, #9
 8014462:	6032      	str	r2, [r6, #0]
 8014464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014468:	81a3      	strh	r3, [r4, #12]
 801446a:	f04f 30ff 	mov.w	r0, #4294967295
 801446e:	e03e      	b.n	80144ee <__swsetup_r+0xba>
 8014470:	4b25      	ldr	r3, [pc, #148]	; (8014508 <__swsetup_r+0xd4>)
 8014472:	429c      	cmp	r4, r3
 8014474:	d101      	bne.n	801447a <__swsetup_r+0x46>
 8014476:	68ac      	ldr	r4, [r5, #8]
 8014478:	e7eb      	b.n	8014452 <__swsetup_r+0x1e>
 801447a:	4b24      	ldr	r3, [pc, #144]	; (801450c <__swsetup_r+0xd8>)
 801447c:	429c      	cmp	r4, r3
 801447e:	bf08      	it	eq
 8014480:	68ec      	ldreq	r4, [r5, #12]
 8014482:	e7e6      	b.n	8014452 <__swsetup_r+0x1e>
 8014484:	0751      	lsls	r1, r2, #29
 8014486:	d512      	bpl.n	80144ae <__swsetup_r+0x7a>
 8014488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801448a:	b141      	cbz	r1, 801449e <__swsetup_r+0x6a>
 801448c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014490:	4299      	cmp	r1, r3
 8014492:	d002      	beq.n	801449a <__swsetup_r+0x66>
 8014494:	4630      	mov	r0, r6
 8014496:	f001 ffef 	bl	8016478 <_free_r>
 801449a:	2300      	movs	r3, #0
 801449c:	6363      	str	r3, [r4, #52]	; 0x34
 801449e:	89a3      	ldrh	r3, [r4, #12]
 80144a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144a4:	81a3      	strh	r3, [r4, #12]
 80144a6:	2300      	movs	r3, #0
 80144a8:	6063      	str	r3, [r4, #4]
 80144aa:	6923      	ldr	r3, [r4, #16]
 80144ac:	6023      	str	r3, [r4, #0]
 80144ae:	89a3      	ldrh	r3, [r4, #12]
 80144b0:	f043 0308 	orr.w	r3, r3, #8
 80144b4:	81a3      	strh	r3, [r4, #12]
 80144b6:	6923      	ldr	r3, [r4, #16]
 80144b8:	b94b      	cbnz	r3, 80144ce <__swsetup_r+0x9a>
 80144ba:	89a3      	ldrh	r3, [r4, #12]
 80144bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144c4:	d003      	beq.n	80144ce <__swsetup_r+0x9a>
 80144c6:	4621      	mov	r1, r4
 80144c8:	4630      	mov	r0, r6
 80144ca:	f001 fb6d 	bl	8015ba8 <__smakebuf_r>
 80144ce:	89a2      	ldrh	r2, [r4, #12]
 80144d0:	f012 0301 	ands.w	r3, r2, #1
 80144d4:	d00c      	beq.n	80144f0 <__swsetup_r+0xbc>
 80144d6:	2300      	movs	r3, #0
 80144d8:	60a3      	str	r3, [r4, #8]
 80144da:	6963      	ldr	r3, [r4, #20]
 80144dc:	425b      	negs	r3, r3
 80144de:	61a3      	str	r3, [r4, #24]
 80144e0:	6923      	ldr	r3, [r4, #16]
 80144e2:	b953      	cbnz	r3, 80144fa <__swsetup_r+0xc6>
 80144e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80144ec:	d1ba      	bne.n	8014464 <__swsetup_r+0x30>
 80144ee:	bd70      	pop	{r4, r5, r6, pc}
 80144f0:	0792      	lsls	r2, r2, #30
 80144f2:	bf58      	it	pl
 80144f4:	6963      	ldrpl	r3, [r4, #20]
 80144f6:	60a3      	str	r3, [r4, #8]
 80144f8:	e7f2      	b.n	80144e0 <__swsetup_r+0xac>
 80144fa:	2000      	movs	r0, #0
 80144fc:	e7f7      	b.n	80144ee <__swsetup_r+0xba>
 80144fe:	bf00      	nop
 8014500:	2000000c 	.word	0x2000000c
 8014504:	08017c30 	.word	0x08017c30
 8014508:	08017c50 	.word	0x08017c50
 801450c:	08017c10 	.word	0x08017c10

08014510 <_close_r>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4c06      	ldr	r4, [pc, #24]	; (801452c <_close_r+0x1c>)
 8014514:	2300      	movs	r3, #0
 8014516:	4605      	mov	r5, r0
 8014518:	4608      	mov	r0, r1
 801451a:	6023      	str	r3, [r4, #0]
 801451c:	f7f0 ff69 	bl	80053f2 <_close>
 8014520:	1c43      	adds	r3, r0, #1
 8014522:	d102      	bne.n	801452a <_close_r+0x1a>
 8014524:	6823      	ldr	r3, [r4, #0]
 8014526:	b103      	cbz	r3, 801452a <_close_r+0x1a>
 8014528:	602b      	str	r3, [r5, #0]
 801452a:	bd38      	pop	{r3, r4, r5, pc}
 801452c:	2002faac 	.word	0x2002faac

08014530 <quorem>:
 8014530:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014534:	6903      	ldr	r3, [r0, #16]
 8014536:	690c      	ldr	r4, [r1, #16]
 8014538:	42a3      	cmp	r3, r4
 801453a:	4680      	mov	r8, r0
 801453c:	f2c0 8082 	blt.w	8014644 <quorem+0x114>
 8014540:	3c01      	subs	r4, #1
 8014542:	f101 0714 	add.w	r7, r1, #20
 8014546:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801454a:	f100 0614 	add.w	r6, r0, #20
 801454e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014552:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014556:	eb06 030c 	add.w	r3, r6, ip
 801455a:	3501      	adds	r5, #1
 801455c:	eb07 090c 	add.w	r9, r7, ip
 8014560:	9301      	str	r3, [sp, #4]
 8014562:	fbb0 f5f5 	udiv	r5, r0, r5
 8014566:	b395      	cbz	r5, 80145ce <quorem+0x9e>
 8014568:	f04f 0a00 	mov.w	sl, #0
 801456c:	4638      	mov	r0, r7
 801456e:	46b6      	mov	lr, r6
 8014570:	46d3      	mov	fp, sl
 8014572:	f850 2b04 	ldr.w	r2, [r0], #4
 8014576:	b293      	uxth	r3, r2
 8014578:	fb05 a303 	mla	r3, r5, r3, sl
 801457c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014580:	b29b      	uxth	r3, r3
 8014582:	ebab 0303 	sub.w	r3, fp, r3
 8014586:	0c12      	lsrs	r2, r2, #16
 8014588:	f8de b000 	ldr.w	fp, [lr]
 801458c:	fb05 a202 	mla	r2, r5, r2, sl
 8014590:	fa13 f38b 	uxtah	r3, r3, fp
 8014594:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014598:	fa1f fb82 	uxth.w	fp, r2
 801459c:	f8de 2000 	ldr.w	r2, [lr]
 80145a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80145a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80145ae:	4581      	cmp	r9, r0
 80145b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80145b4:	f84e 3b04 	str.w	r3, [lr], #4
 80145b8:	d2db      	bcs.n	8014572 <quorem+0x42>
 80145ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80145be:	b933      	cbnz	r3, 80145ce <quorem+0x9e>
 80145c0:	9b01      	ldr	r3, [sp, #4]
 80145c2:	3b04      	subs	r3, #4
 80145c4:	429e      	cmp	r6, r3
 80145c6:	461a      	mov	r2, r3
 80145c8:	d330      	bcc.n	801462c <quorem+0xfc>
 80145ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80145ce:	4640      	mov	r0, r8
 80145d0:	f001 fd98 	bl	8016104 <__mcmp>
 80145d4:	2800      	cmp	r0, #0
 80145d6:	db25      	blt.n	8014624 <quorem+0xf4>
 80145d8:	3501      	adds	r5, #1
 80145da:	4630      	mov	r0, r6
 80145dc:	f04f 0c00 	mov.w	ip, #0
 80145e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80145e4:	f8d0 e000 	ldr.w	lr, [r0]
 80145e8:	b293      	uxth	r3, r2
 80145ea:	ebac 0303 	sub.w	r3, ip, r3
 80145ee:	0c12      	lsrs	r2, r2, #16
 80145f0:	fa13 f38e 	uxtah	r3, r3, lr
 80145f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80145f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80145fc:	b29b      	uxth	r3, r3
 80145fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014602:	45b9      	cmp	r9, r7
 8014604:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014608:	f840 3b04 	str.w	r3, [r0], #4
 801460c:	d2e8      	bcs.n	80145e0 <quorem+0xb0>
 801460e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014612:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014616:	b92a      	cbnz	r2, 8014624 <quorem+0xf4>
 8014618:	3b04      	subs	r3, #4
 801461a:	429e      	cmp	r6, r3
 801461c:	461a      	mov	r2, r3
 801461e:	d30b      	bcc.n	8014638 <quorem+0x108>
 8014620:	f8c8 4010 	str.w	r4, [r8, #16]
 8014624:	4628      	mov	r0, r5
 8014626:	b003      	add	sp, #12
 8014628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801462c:	6812      	ldr	r2, [r2, #0]
 801462e:	3b04      	subs	r3, #4
 8014630:	2a00      	cmp	r2, #0
 8014632:	d1ca      	bne.n	80145ca <quorem+0x9a>
 8014634:	3c01      	subs	r4, #1
 8014636:	e7c5      	b.n	80145c4 <quorem+0x94>
 8014638:	6812      	ldr	r2, [r2, #0]
 801463a:	3b04      	subs	r3, #4
 801463c:	2a00      	cmp	r2, #0
 801463e:	d1ef      	bne.n	8014620 <quorem+0xf0>
 8014640:	3c01      	subs	r4, #1
 8014642:	e7ea      	b.n	801461a <quorem+0xea>
 8014644:	2000      	movs	r0, #0
 8014646:	e7ee      	b.n	8014626 <quorem+0xf6>

08014648 <_dtoa_r>:
 8014648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801464c:	ec57 6b10 	vmov	r6, r7, d0
 8014650:	b097      	sub	sp, #92	; 0x5c
 8014652:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014654:	9106      	str	r1, [sp, #24]
 8014656:	4604      	mov	r4, r0
 8014658:	920b      	str	r2, [sp, #44]	; 0x2c
 801465a:	9312      	str	r3, [sp, #72]	; 0x48
 801465c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014660:	e9cd 6700 	strd	r6, r7, [sp]
 8014664:	b93d      	cbnz	r5, 8014676 <_dtoa_r+0x2e>
 8014666:	2010      	movs	r0, #16
 8014668:	f001 fade 	bl	8015c28 <malloc>
 801466c:	6260      	str	r0, [r4, #36]	; 0x24
 801466e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014672:	6005      	str	r5, [r0, #0]
 8014674:	60c5      	str	r5, [r0, #12]
 8014676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014678:	6819      	ldr	r1, [r3, #0]
 801467a:	b151      	cbz	r1, 8014692 <_dtoa_r+0x4a>
 801467c:	685a      	ldr	r2, [r3, #4]
 801467e:	604a      	str	r2, [r1, #4]
 8014680:	2301      	movs	r3, #1
 8014682:	4093      	lsls	r3, r2
 8014684:	608b      	str	r3, [r1, #8]
 8014686:	4620      	mov	r0, r4
 8014688:	f001 fb1c 	bl	8015cc4 <_Bfree>
 801468c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801468e:	2200      	movs	r2, #0
 8014690:	601a      	str	r2, [r3, #0]
 8014692:	1e3b      	subs	r3, r7, #0
 8014694:	bfbb      	ittet	lt
 8014696:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801469a:	9301      	strlt	r3, [sp, #4]
 801469c:	2300      	movge	r3, #0
 801469e:	2201      	movlt	r2, #1
 80146a0:	bfac      	ite	ge
 80146a2:	f8c8 3000 	strge.w	r3, [r8]
 80146a6:	f8c8 2000 	strlt.w	r2, [r8]
 80146aa:	4baf      	ldr	r3, [pc, #700]	; (8014968 <_dtoa_r+0x320>)
 80146ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80146b0:	ea33 0308 	bics.w	r3, r3, r8
 80146b4:	d114      	bne.n	80146e0 <_dtoa_r+0x98>
 80146b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80146bc:	6013      	str	r3, [r2, #0]
 80146be:	9b00      	ldr	r3, [sp, #0]
 80146c0:	b923      	cbnz	r3, 80146cc <_dtoa_r+0x84>
 80146c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80146c6:	2800      	cmp	r0, #0
 80146c8:	f000 8542 	beq.w	8015150 <_dtoa_r+0xb08>
 80146cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801497c <_dtoa_r+0x334>
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	f000 8544 	beq.w	8015160 <_dtoa_r+0xb18>
 80146d8:	f10b 0303 	add.w	r3, fp, #3
 80146dc:	f000 bd3e 	b.w	801515c <_dtoa_r+0xb14>
 80146e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80146e4:	2200      	movs	r2, #0
 80146e6:	2300      	movs	r3, #0
 80146e8:	4630      	mov	r0, r6
 80146ea:	4639      	mov	r1, r7
 80146ec:	f7ec fa04 	bl	8000af8 <__aeabi_dcmpeq>
 80146f0:	4681      	mov	r9, r0
 80146f2:	b168      	cbz	r0, 8014710 <_dtoa_r+0xc8>
 80146f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80146f6:	2301      	movs	r3, #1
 80146f8:	6013      	str	r3, [r2, #0]
 80146fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	f000 8524 	beq.w	801514a <_dtoa_r+0xb02>
 8014702:	4b9a      	ldr	r3, [pc, #616]	; (801496c <_dtoa_r+0x324>)
 8014704:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014706:	f103 3bff 	add.w	fp, r3, #4294967295
 801470a:	6013      	str	r3, [r2, #0]
 801470c:	f000 bd28 	b.w	8015160 <_dtoa_r+0xb18>
 8014710:	aa14      	add	r2, sp, #80	; 0x50
 8014712:	a915      	add	r1, sp, #84	; 0x54
 8014714:	ec47 6b10 	vmov	d0, r6, r7
 8014718:	4620      	mov	r0, r4
 801471a:	f001 fde1 	bl	80162e0 <__d2b>
 801471e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014722:	9004      	str	r0, [sp, #16]
 8014724:	2d00      	cmp	r5, #0
 8014726:	d07c      	beq.n	8014822 <_dtoa_r+0x1da>
 8014728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801472c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014730:	46b2      	mov	sl, r6
 8014732:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801473a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801473e:	2200      	movs	r2, #0
 8014740:	4b8b      	ldr	r3, [pc, #556]	; (8014970 <_dtoa_r+0x328>)
 8014742:	4650      	mov	r0, sl
 8014744:	4659      	mov	r1, fp
 8014746:	f7eb fdb7 	bl	80002b8 <__aeabi_dsub>
 801474a:	a381      	add	r3, pc, #516	; (adr r3, 8014950 <_dtoa_r+0x308>)
 801474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014750:	f7eb ff6a 	bl	8000628 <__aeabi_dmul>
 8014754:	a380      	add	r3, pc, #512	; (adr r3, 8014958 <_dtoa_r+0x310>)
 8014756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475a:	f7eb fdaf 	bl	80002bc <__adddf3>
 801475e:	4606      	mov	r6, r0
 8014760:	4628      	mov	r0, r5
 8014762:	460f      	mov	r7, r1
 8014764:	f7eb fef6 	bl	8000554 <__aeabi_i2d>
 8014768:	a37d      	add	r3, pc, #500	; (adr r3, 8014960 <_dtoa_r+0x318>)
 801476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476e:	f7eb ff5b 	bl	8000628 <__aeabi_dmul>
 8014772:	4602      	mov	r2, r0
 8014774:	460b      	mov	r3, r1
 8014776:	4630      	mov	r0, r6
 8014778:	4639      	mov	r1, r7
 801477a:	f7eb fd9f 	bl	80002bc <__adddf3>
 801477e:	4606      	mov	r6, r0
 8014780:	460f      	mov	r7, r1
 8014782:	f7ec fa01 	bl	8000b88 <__aeabi_d2iz>
 8014786:	2200      	movs	r2, #0
 8014788:	4682      	mov	sl, r0
 801478a:	2300      	movs	r3, #0
 801478c:	4630      	mov	r0, r6
 801478e:	4639      	mov	r1, r7
 8014790:	f7ec f9bc 	bl	8000b0c <__aeabi_dcmplt>
 8014794:	b148      	cbz	r0, 80147aa <_dtoa_r+0x162>
 8014796:	4650      	mov	r0, sl
 8014798:	f7eb fedc 	bl	8000554 <__aeabi_i2d>
 801479c:	4632      	mov	r2, r6
 801479e:	463b      	mov	r3, r7
 80147a0:	f7ec f9aa 	bl	8000af8 <__aeabi_dcmpeq>
 80147a4:	b908      	cbnz	r0, 80147aa <_dtoa_r+0x162>
 80147a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147aa:	f1ba 0f16 	cmp.w	sl, #22
 80147ae:	d859      	bhi.n	8014864 <_dtoa_r+0x21c>
 80147b0:	4970      	ldr	r1, [pc, #448]	; (8014974 <_dtoa_r+0x32c>)
 80147b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80147b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80147be:	f7ec f9c3 	bl	8000b48 <__aeabi_dcmpgt>
 80147c2:	2800      	cmp	r0, #0
 80147c4:	d050      	beq.n	8014868 <_dtoa_r+0x220>
 80147c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80147ca:	2300      	movs	r3, #0
 80147cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80147ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80147d0:	1b5d      	subs	r5, r3, r5
 80147d2:	f1b5 0801 	subs.w	r8, r5, #1
 80147d6:	bf49      	itett	mi
 80147d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80147dc:	2300      	movpl	r3, #0
 80147de:	9305      	strmi	r3, [sp, #20]
 80147e0:	f04f 0800 	movmi.w	r8, #0
 80147e4:	bf58      	it	pl
 80147e6:	9305      	strpl	r3, [sp, #20]
 80147e8:	f1ba 0f00 	cmp.w	sl, #0
 80147ec:	db3e      	blt.n	801486c <_dtoa_r+0x224>
 80147ee:	2300      	movs	r3, #0
 80147f0:	44d0      	add	r8, sl
 80147f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80147f6:	9307      	str	r3, [sp, #28]
 80147f8:	9b06      	ldr	r3, [sp, #24]
 80147fa:	2b09      	cmp	r3, #9
 80147fc:	f200 8090 	bhi.w	8014920 <_dtoa_r+0x2d8>
 8014800:	2b05      	cmp	r3, #5
 8014802:	bfc4      	itt	gt
 8014804:	3b04      	subgt	r3, #4
 8014806:	9306      	strgt	r3, [sp, #24]
 8014808:	9b06      	ldr	r3, [sp, #24]
 801480a:	f1a3 0302 	sub.w	r3, r3, #2
 801480e:	bfcc      	ite	gt
 8014810:	2500      	movgt	r5, #0
 8014812:	2501      	movle	r5, #1
 8014814:	2b03      	cmp	r3, #3
 8014816:	f200 808f 	bhi.w	8014938 <_dtoa_r+0x2f0>
 801481a:	e8df f003 	tbb	[pc, r3]
 801481e:	7f7d      	.short	0x7f7d
 8014820:	7131      	.short	0x7131
 8014822:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014826:	441d      	add	r5, r3
 8014828:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801482c:	2820      	cmp	r0, #32
 801482e:	dd13      	ble.n	8014858 <_dtoa_r+0x210>
 8014830:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014834:	9b00      	ldr	r3, [sp, #0]
 8014836:	fa08 f800 	lsl.w	r8, r8, r0
 801483a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801483e:	fa23 f000 	lsr.w	r0, r3, r0
 8014842:	ea48 0000 	orr.w	r0, r8, r0
 8014846:	f7eb fe75 	bl	8000534 <__aeabi_ui2d>
 801484a:	2301      	movs	r3, #1
 801484c:	4682      	mov	sl, r0
 801484e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014852:	3d01      	subs	r5, #1
 8014854:	9313      	str	r3, [sp, #76]	; 0x4c
 8014856:	e772      	b.n	801473e <_dtoa_r+0xf6>
 8014858:	9b00      	ldr	r3, [sp, #0]
 801485a:	f1c0 0020 	rsb	r0, r0, #32
 801485e:	fa03 f000 	lsl.w	r0, r3, r0
 8014862:	e7f0      	b.n	8014846 <_dtoa_r+0x1fe>
 8014864:	2301      	movs	r3, #1
 8014866:	e7b1      	b.n	80147cc <_dtoa_r+0x184>
 8014868:	900f      	str	r0, [sp, #60]	; 0x3c
 801486a:	e7b0      	b.n	80147ce <_dtoa_r+0x186>
 801486c:	9b05      	ldr	r3, [sp, #20]
 801486e:	eba3 030a 	sub.w	r3, r3, sl
 8014872:	9305      	str	r3, [sp, #20]
 8014874:	f1ca 0300 	rsb	r3, sl, #0
 8014878:	9307      	str	r3, [sp, #28]
 801487a:	2300      	movs	r3, #0
 801487c:	930e      	str	r3, [sp, #56]	; 0x38
 801487e:	e7bb      	b.n	80147f8 <_dtoa_r+0x1b0>
 8014880:	2301      	movs	r3, #1
 8014882:	930a      	str	r3, [sp, #40]	; 0x28
 8014884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014886:	2b00      	cmp	r3, #0
 8014888:	dd59      	ble.n	801493e <_dtoa_r+0x2f6>
 801488a:	9302      	str	r3, [sp, #8]
 801488c:	4699      	mov	r9, r3
 801488e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014890:	2200      	movs	r2, #0
 8014892:	6072      	str	r2, [r6, #4]
 8014894:	2204      	movs	r2, #4
 8014896:	f102 0014 	add.w	r0, r2, #20
 801489a:	4298      	cmp	r0, r3
 801489c:	6871      	ldr	r1, [r6, #4]
 801489e:	d953      	bls.n	8014948 <_dtoa_r+0x300>
 80148a0:	4620      	mov	r0, r4
 80148a2:	f001 f9db 	bl	8015c5c <_Balloc>
 80148a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148a8:	6030      	str	r0, [r6, #0]
 80148aa:	f1b9 0f0e 	cmp.w	r9, #14
 80148ae:	f8d3 b000 	ldr.w	fp, [r3]
 80148b2:	f200 80e6 	bhi.w	8014a82 <_dtoa_r+0x43a>
 80148b6:	2d00      	cmp	r5, #0
 80148b8:	f000 80e3 	beq.w	8014a82 <_dtoa_r+0x43a>
 80148bc:	ed9d 7b00 	vldr	d7, [sp]
 80148c0:	f1ba 0f00 	cmp.w	sl, #0
 80148c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80148c8:	dd74      	ble.n	80149b4 <_dtoa_r+0x36c>
 80148ca:	4a2a      	ldr	r2, [pc, #168]	; (8014974 <_dtoa_r+0x32c>)
 80148cc:	f00a 030f 	and.w	r3, sl, #15
 80148d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80148d4:	ed93 7b00 	vldr	d7, [r3]
 80148d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80148dc:	06f0      	lsls	r0, r6, #27
 80148de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80148e2:	d565      	bpl.n	80149b0 <_dtoa_r+0x368>
 80148e4:	4b24      	ldr	r3, [pc, #144]	; (8014978 <_dtoa_r+0x330>)
 80148e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80148ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80148ee:	f7eb ffc5 	bl	800087c <__aeabi_ddiv>
 80148f2:	e9cd 0100 	strd	r0, r1, [sp]
 80148f6:	f006 060f 	and.w	r6, r6, #15
 80148fa:	2503      	movs	r5, #3
 80148fc:	4f1e      	ldr	r7, [pc, #120]	; (8014978 <_dtoa_r+0x330>)
 80148fe:	e04c      	b.n	801499a <_dtoa_r+0x352>
 8014900:	2301      	movs	r3, #1
 8014902:	930a      	str	r3, [sp, #40]	; 0x28
 8014904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014906:	4453      	add	r3, sl
 8014908:	f103 0901 	add.w	r9, r3, #1
 801490c:	9302      	str	r3, [sp, #8]
 801490e:	464b      	mov	r3, r9
 8014910:	2b01      	cmp	r3, #1
 8014912:	bfb8      	it	lt
 8014914:	2301      	movlt	r3, #1
 8014916:	e7ba      	b.n	801488e <_dtoa_r+0x246>
 8014918:	2300      	movs	r3, #0
 801491a:	e7b2      	b.n	8014882 <_dtoa_r+0x23a>
 801491c:	2300      	movs	r3, #0
 801491e:	e7f0      	b.n	8014902 <_dtoa_r+0x2ba>
 8014920:	2501      	movs	r5, #1
 8014922:	2300      	movs	r3, #0
 8014924:	9306      	str	r3, [sp, #24]
 8014926:	950a      	str	r5, [sp, #40]	; 0x28
 8014928:	f04f 33ff 	mov.w	r3, #4294967295
 801492c:	9302      	str	r3, [sp, #8]
 801492e:	4699      	mov	r9, r3
 8014930:	2200      	movs	r2, #0
 8014932:	2312      	movs	r3, #18
 8014934:	920b      	str	r2, [sp, #44]	; 0x2c
 8014936:	e7aa      	b.n	801488e <_dtoa_r+0x246>
 8014938:	2301      	movs	r3, #1
 801493a:	930a      	str	r3, [sp, #40]	; 0x28
 801493c:	e7f4      	b.n	8014928 <_dtoa_r+0x2e0>
 801493e:	2301      	movs	r3, #1
 8014940:	9302      	str	r3, [sp, #8]
 8014942:	4699      	mov	r9, r3
 8014944:	461a      	mov	r2, r3
 8014946:	e7f5      	b.n	8014934 <_dtoa_r+0x2ec>
 8014948:	3101      	adds	r1, #1
 801494a:	6071      	str	r1, [r6, #4]
 801494c:	0052      	lsls	r2, r2, #1
 801494e:	e7a2      	b.n	8014896 <_dtoa_r+0x24e>
 8014950:	636f4361 	.word	0x636f4361
 8014954:	3fd287a7 	.word	0x3fd287a7
 8014958:	8b60c8b3 	.word	0x8b60c8b3
 801495c:	3fc68a28 	.word	0x3fc68a28
 8014960:	509f79fb 	.word	0x509f79fb
 8014964:	3fd34413 	.word	0x3fd34413
 8014968:	7ff00000 	.word	0x7ff00000
 801496c:	08017da4 	.word	0x08017da4
 8014970:	3ff80000 	.word	0x3ff80000
 8014974:	08017ca8 	.word	0x08017ca8
 8014978:	08017c80 	.word	0x08017c80
 801497c:	08017c09 	.word	0x08017c09
 8014980:	07f1      	lsls	r1, r6, #31
 8014982:	d508      	bpl.n	8014996 <_dtoa_r+0x34e>
 8014984:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014988:	e9d7 2300 	ldrd	r2, r3, [r7]
 801498c:	f7eb fe4c 	bl	8000628 <__aeabi_dmul>
 8014990:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014994:	3501      	adds	r5, #1
 8014996:	1076      	asrs	r6, r6, #1
 8014998:	3708      	adds	r7, #8
 801499a:	2e00      	cmp	r6, #0
 801499c:	d1f0      	bne.n	8014980 <_dtoa_r+0x338>
 801499e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80149a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80149a6:	f7eb ff69 	bl	800087c <__aeabi_ddiv>
 80149aa:	e9cd 0100 	strd	r0, r1, [sp]
 80149ae:	e01a      	b.n	80149e6 <_dtoa_r+0x39e>
 80149b0:	2502      	movs	r5, #2
 80149b2:	e7a3      	b.n	80148fc <_dtoa_r+0x2b4>
 80149b4:	f000 80a0 	beq.w	8014af8 <_dtoa_r+0x4b0>
 80149b8:	f1ca 0600 	rsb	r6, sl, #0
 80149bc:	4b9f      	ldr	r3, [pc, #636]	; (8014c3c <_dtoa_r+0x5f4>)
 80149be:	4fa0      	ldr	r7, [pc, #640]	; (8014c40 <_dtoa_r+0x5f8>)
 80149c0:	f006 020f 	and.w	r2, r6, #15
 80149c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80149d0:	f7eb fe2a 	bl	8000628 <__aeabi_dmul>
 80149d4:	e9cd 0100 	strd	r0, r1, [sp]
 80149d8:	1136      	asrs	r6, r6, #4
 80149da:	2300      	movs	r3, #0
 80149dc:	2502      	movs	r5, #2
 80149de:	2e00      	cmp	r6, #0
 80149e0:	d17f      	bne.n	8014ae2 <_dtoa_r+0x49a>
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d1e1      	bne.n	80149aa <_dtoa_r+0x362>
 80149e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	f000 8087 	beq.w	8014afc <_dtoa_r+0x4b4>
 80149ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80149f2:	2200      	movs	r2, #0
 80149f4:	4b93      	ldr	r3, [pc, #588]	; (8014c44 <_dtoa_r+0x5fc>)
 80149f6:	4630      	mov	r0, r6
 80149f8:	4639      	mov	r1, r7
 80149fa:	f7ec f887 	bl	8000b0c <__aeabi_dcmplt>
 80149fe:	2800      	cmp	r0, #0
 8014a00:	d07c      	beq.n	8014afc <_dtoa_r+0x4b4>
 8014a02:	f1b9 0f00 	cmp.w	r9, #0
 8014a06:	d079      	beq.n	8014afc <_dtoa_r+0x4b4>
 8014a08:	9b02      	ldr	r3, [sp, #8]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	dd35      	ble.n	8014a7a <_dtoa_r+0x432>
 8014a0e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014a12:	9308      	str	r3, [sp, #32]
 8014a14:	4639      	mov	r1, r7
 8014a16:	2200      	movs	r2, #0
 8014a18:	4b8b      	ldr	r3, [pc, #556]	; (8014c48 <_dtoa_r+0x600>)
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	f7eb fe04 	bl	8000628 <__aeabi_dmul>
 8014a20:	e9cd 0100 	strd	r0, r1, [sp]
 8014a24:	9f02      	ldr	r7, [sp, #8]
 8014a26:	3501      	adds	r5, #1
 8014a28:	4628      	mov	r0, r5
 8014a2a:	f7eb fd93 	bl	8000554 <__aeabi_i2d>
 8014a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a32:	f7eb fdf9 	bl	8000628 <__aeabi_dmul>
 8014a36:	2200      	movs	r2, #0
 8014a38:	4b84      	ldr	r3, [pc, #528]	; (8014c4c <_dtoa_r+0x604>)
 8014a3a:	f7eb fc3f 	bl	80002bc <__adddf3>
 8014a3e:	4605      	mov	r5, r0
 8014a40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014a44:	2f00      	cmp	r7, #0
 8014a46:	d15d      	bne.n	8014b04 <_dtoa_r+0x4bc>
 8014a48:	2200      	movs	r2, #0
 8014a4a:	4b81      	ldr	r3, [pc, #516]	; (8014c50 <_dtoa_r+0x608>)
 8014a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a50:	f7eb fc32 	bl	80002b8 <__aeabi_dsub>
 8014a54:	462a      	mov	r2, r5
 8014a56:	4633      	mov	r3, r6
 8014a58:	e9cd 0100 	strd	r0, r1, [sp]
 8014a5c:	f7ec f874 	bl	8000b48 <__aeabi_dcmpgt>
 8014a60:	2800      	cmp	r0, #0
 8014a62:	f040 8288 	bne.w	8014f76 <_dtoa_r+0x92e>
 8014a66:	462a      	mov	r2, r5
 8014a68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014a6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014a70:	f7ec f84c 	bl	8000b0c <__aeabi_dcmplt>
 8014a74:	2800      	cmp	r0, #0
 8014a76:	f040 827c 	bne.w	8014f72 <_dtoa_r+0x92a>
 8014a7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014a7e:	e9cd 2300 	strd	r2, r3, [sp]
 8014a82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	f2c0 8150 	blt.w	8014d2a <_dtoa_r+0x6e2>
 8014a8a:	f1ba 0f0e 	cmp.w	sl, #14
 8014a8e:	f300 814c 	bgt.w	8014d2a <_dtoa_r+0x6e2>
 8014a92:	4b6a      	ldr	r3, [pc, #424]	; (8014c3c <_dtoa_r+0x5f4>)
 8014a94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a98:	ed93 7b00 	vldr	d7, [r3]
 8014a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014aa4:	f280 80d8 	bge.w	8014c58 <_dtoa_r+0x610>
 8014aa8:	f1b9 0f00 	cmp.w	r9, #0
 8014aac:	f300 80d4 	bgt.w	8014c58 <_dtoa_r+0x610>
 8014ab0:	f040 825e 	bne.w	8014f70 <_dtoa_r+0x928>
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	4b66      	ldr	r3, [pc, #408]	; (8014c50 <_dtoa_r+0x608>)
 8014ab8:	ec51 0b17 	vmov	r0, r1, d7
 8014abc:	f7eb fdb4 	bl	8000628 <__aeabi_dmul>
 8014ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ac4:	f7ec f836 	bl	8000b34 <__aeabi_dcmpge>
 8014ac8:	464f      	mov	r7, r9
 8014aca:	464e      	mov	r6, r9
 8014acc:	2800      	cmp	r0, #0
 8014ace:	f040 8234 	bne.w	8014f3a <_dtoa_r+0x8f2>
 8014ad2:	2331      	movs	r3, #49	; 0x31
 8014ad4:	f10b 0501 	add.w	r5, fp, #1
 8014ad8:	f88b 3000 	strb.w	r3, [fp]
 8014adc:	f10a 0a01 	add.w	sl, sl, #1
 8014ae0:	e22f      	b.n	8014f42 <_dtoa_r+0x8fa>
 8014ae2:	07f2      	lsls	r2, r6, #31
 8014ae4:	d505      	bpl.n	8014af2 <_dtoa_r+0x4aa>
 8014ae6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014aea:	f7eb fd9d 	bl	8000628 <__aeabi_dmul>
 8014aee:	3501      	adds	r5, #1
 8014af0:	2301      	movs	r3, #1
 8014af2:	1076      	asrs	r6, r6, #1
 8014af4:	3708      	adds	r7, #8
 8014af6:	e772      	b.n	80149de <_dtoa_r+0x396>
 8014af8:	2502      	movs	r5, #2
 8014afa:	e774      	b.n	80149e6 <_dtoa_r+0x39e>
 8014afc:	f8cd a020 	str.w	sl, [sp, #32]
 8014b00:	464f      	mov	r7, r9
 8014b02:	e791      	b.n	8014a28 <_dtoa_r+0x3e0>
 8014b04:	4b4d      	ldr	r3, [pc, #308]	; (8014c3c <_dtoa_r+0x5f4>)
 8014b06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014b0a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d047      	beq.n	8014ba4 <_dtoa_r+0x55c>
 8014b14:	4602      	mov	r2, r0
 8014b16:	460b      	mov	r3, r1
 8014b18:	2000      	movs	r0, #0
 8014b1a:	494e      	ldr	r1, [pc, #312]	; (8014c54 <_dtoa_r+0x60c>)
 8014b1c:	f7eb feae 	bl	800087c <__aeabi_ddiv>
 8014b20:	462a      	mov	r2, r5
 8014b22:	4633      	mov	r3, r6
 8014b24:	f7eb fbc8 	bl	80002b8 <__aeabi_dsub>
 8014b28:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b2c:	465d      	mov	r5, fp
 8014b2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b32:	f7ec f829 	bl	8000b88 <__aeabi_d2iz>
 8014b36:	4606      	mov	r6, r0
 8014b38:	f7eb fd0c 	bl	8000554 <__aeabi_i2d>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	460b      	mov	r3, r1
 8014b40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b44:	f7eb fbb8 	bl	80002b8 <__aeabi_dsub>
 8014b48:	3630      	adds	r6, #48	; 0x30
 8014b4a:	f805 6b01 	strb.w	r6, [r5], #1
 8014b4e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b52:	e9cd 0100 	strd	r0, r1, [sp]
 8014b56:	f7eb ffd9 	bl	8000b0c <__aeabi_dcmplt>
 8014b5a:	2800      	cmp	r0, #0
 8014b5c:	d163      	bne.n	8014c26 <_dtoa_r+0x5de>
 8014b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b62:	2000      	movs	r0, #0
 8014b64:	4937      	ldr	r1, [pc, #220]	; (8014c44 <_dtoa_r+0x5fc>)
 8014b66:	f7eb fba7 	bl	80002b8 <__aeabi_dsub>
 8014b6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014b6e:	f7eb ffcd 	bl	8000b0c <__aeabi_dcmplt>
 8014b72:	2800      	cmp	r0, #0
 8014b74:	f040 80b7 	bne.w	8014ce6 <_dtoa_r+0x69e>
 8014b78:	eba5 030b 	sub.w	r3, r5, fp
 8014b7c:	429f      	cmp	r7, r3
 8014b7e:	f77f af7c 	ble.w	8014a7a <_dtoa_r+0x432>
 8014b82:	2200      	movs	r2, #0
 8014b84:	4b30      	ldr	r3, [pc, #192]	; (8014c48 <_dtoa_r+0x600>)
 8014b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014b8a:	f7eb fd4d 	bl	8000628 <__aeabi_dmul>
 8014b8e:	2200      	movs	r2, #0
 8014b90:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014b94:	4b2c      	ldr	r3, [pc, #176]	; (8014c48 <_dtoa_r+0x600>)
 8014b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b9a:	f7eb fd45 	bl	8000628 <__aeabi_dmul>
 8014b9e:	e9cd 0100 	strd	r0, r1, [sp]
 8014ba2:	e7c4      	b.n	8014b2e <_dtoa_r+0x4e6>
 8014ba4:	462a      	mov	r2, r5
 8014ba6:	4633      	mov	r3, r6
 8014ba8:	f7eb fd3e 	bl	8000628 <__aeabi_dmul>
 8014bac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014bb0:	eb0b 0507 	add.w	r5, fp, r7
 8014bb4:	465e      	mov	r6, fp
 8014bb6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bba:	f7eb ffe5 	bl	8000b88 <__aeabi_d2iz>
 8014bbe:	4607      	mov	r7, r0
 8014bc0:	f7eb fcc8 	bl	8000554 <__aeabi_i2d>
 8014bc4:	3730      	adds	r7, #48	; 0x30
 8014bc6:	4602      	mov	r2, r0
 8014bc8:	460b      	mov	r3, r1
 8014bca:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bce:	f7eb fb73 	bl	80002b8 <__aeabi_dsub>
 8014bd2:	f806 7b01 	strb.w	r7, [r6], #1
 8014bd6:	42ae      	cmp	r6, r5
 8014bd8:	e9cd 0100 	strd	r0, r1, [sp]
 8014bdc:	f04f 0200 	mov.w	r2, #0
 8014be0:	d126      	bne.n	8014c30 <_dtoa_r+0x5e8>
 8014be2:	4b1c      	ldr	r3, [pc, #112]	; (8014c54 <_dtoa_r+0x60c>)
 8014be4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014be8:	f7eb fb68 	bl	80002bc <__adddf3>
 8014bec:	4602      	mov	r2, r0
 8014bee:	460b      	mov	r3, r1
 8014bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014bf4:	f7eb ffa8 	bl	8000b48 <__aeabi_dcmpgt>
 8014bf8:	2800      	cmp	r0, #0
 8014bfa:	d174      	bne.n	8014ce6 <_dtoa_r+0x69e>
 8014bfc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014c00:	2000      	movs	r0, #0
 8014c02:	4914      	ldr	r1, [pc, #80]	; (8014c54 <_dtoa_r+0x60c>)
 8014c04:	f7eb fb58 	bl	80002b8 <__aeabi_dsub>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c10:	f7eb ff7c 	bl	8000b0c <__aeabi_dcmplt>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	f43f af30 	beq.w	8014a7a <_dtoa_r+0x432>
 8014c1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014c1e:	2b30      	cmp	r3, #48	; 0x30
 8014c20:	f105 32ff 	add.w	r2, r5, #4294967295
 8014c24:	d002      	beq.n	8014c2c <_dtoa_r+0x5e4>
 8014c26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014c2a:	e04a      	b.n	8014cc2 <_dtoa_r+0x67a>
 8014c2c:	4615      	mov	r5, r2
 8014c2e:	e7f4      	b.n	8014c1a <_dtoa_r+0x5d2>
 8014c30:	4b05      	ldr	r3, [pc, #20]	; (8014c48 <_dtoa_r+0x600>)
 8014c32:	f7eb fcf9 	bl	8000628 <__aeabi_dmul>
 8014c36:	e9cd 0100 	strd	r0, r1, [sp]
 8014c3a:	e7bc      	b.n	8014bb6 <_dtoa_r+0x56e>
 8014c3c:	08017ca8 	.word	0x08017ca8
 8014c40:	08017c80 	.word	0x08017c80
 8014c44:	3ff00000 	.word	0x3ff00000
 8014c48:	40240000 	.word	0x40240000
 8014c4c:	401c0000 	.word	0x401c0000
 8014c50:	40140000 	.word	0x40140000
 8014c54:	3fe00000 	.word	0x3fe00000
 8014c58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014c5c:	465d      	mov	r5, fp
 8014c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c62:	4630      	mov	r0, r6
 8014c64:	4639      	mov	r1, r7
 8014c66:	f7eb fe09 	bl	800087c <__aeabi_ddiv>
 8014c6a:	f7eb ff8d 	bl	8000b88 <__aeabi_d2iz>
 8014c6e:	4680      	mov	r8, r0
 8014c70:	f7eb fc70 	bl	8000554 <__aeabi_i2d>
 8014c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014c78:	f7eb fcd6 	bl	8000628 <__aeabi_dmul>
 8014c7c:	4602      	mov	r2, r0
 8014c7e:	460b      	mov	r3, r1
 8014c80:	4630      	mov	r0, r6
 8014c82:	4639      	mov	r1, r7
 8014c84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014c88:	f7eb fb16 	bl	80002b8 <__aeabi_dsub>
 8014c8c:	f805 6b01 	strb.w	r6, [r5], #1
 8014c90:	eba5 060b 	sub.w	r6, r5, fp
 8014c94:	45b1      	cmp	r9, r6
 8014c96:	4602      	mov	r2, r0
 8014c98:	460b      	mov	r3, r1
 8014c9a:	d139      	bne.n	8014d10 <_dtoa_r+0x6c8>
 8014c9c:	f7eb fb0e 	bl	80002bc <__adddf3>
 8014ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	460f      	mov	r7, r1
 8014ca8:	f7eb ff4e 	bl	8000b48 <__aeabi_dcmpgt>
 8014cac:	b9c8      	cbnz	r0, 8014ce2 <_dtoa_r+0x69a>
 8014cae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014cb2:	4630      	mov	r0, r6
 8014cb4:	4639      	mov	r1, r7
 8014cb6:	f7eb ff1f 	bl	8000af8 <__aeabi_dcmpeq>
 8014cba:	b110      	cbz	r0, 8014cc2 <_dtoa_r+0x67a>
 8014cbc:	f018 0f01 	tst.w	r8, #1
 8014cc0:	d10f      	bne.n	8014ce2 <_dtoa_r+0x69a>
 8014cc2:	9904      	ldr	r1, [sp, #16]
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	f000 fffd 	bl	8015cc4 <_Bfree>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cce:	702b      	strb	r3, [r5, #0]
 8014cd0:	f10a 0301 	add.w	r3, sl, #1
 8014cd4:	6013      	str	r3, [r2, #0]
 8014cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	f000 8241 	beq.w	8015160 <_dtoa_r+0xb18>
 8014cde:	601d      	str	r5, [r3, #0]
 8014ce0:	e23e      	b.n	8015160 <_dtoa_r+0xb18>
 8014ce2:	f8cd a020 	str.w	sl, [sp, #32]
 8014ce6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014cea:	2a39      	cmp	r2, #57	; 0x39
 8014cec:	f105 33ff 	add.w	r3, r5, #4294967295
 8014cf0:	d108      	bne.n	8014d04 <_dtoa_r+0x6bc>
 8014cf2:	459b      	cmp	fp, r3
 8014cf4:	d10a      	bne.n	8014d0c <_dtoa_r+0x6c4>
 8014cf6:	9b08      	ldr	r3, [sp, #32]
 8014cf8:	3301      	adds	r3, #1
 8014cfa:	9308      	str	r3, [sp, #32]
 8014cfc:	2330      	movs	r3, #48	; 0x30
 8014cfe:	f88b 3000 	strb.w	r3, [fp]
 8014d02:	465b      	mov	r3, fp
 8014d04:	781a      	ldrb	r2, [r3, #0]
 8014d06:	3201      	adds	r2, #1
 8014d08:	701a      	strb	r2, [r3, #0]
 8014d0a:	e78c      	b.n	8014c26 <_dtoa_r+0x5de>
 8014d0c:	461d      	mov	r5, r3
 8014d0e:	e7ea      	b.n	8014ce6 <_dtoa_r+0x69e>
 8014d10:	2200      	movs	r2, #0
 8014d12:	4b9b      	ldr	r3, [pc, #620]	; (8014f80 <_dtoa_r+0x938>)
 8014d14:	f7eb fc88 	bl	8000628 <__aeabi_dmul>
 8014d18:	2200      	movs	r2, #0
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	4606      	mov	r6, r0
 8014d1e:	460f      	mov	r7, r1
 8014d20:	f7eb feea 	bl	8000af8 <__aeabi_dcmpeq>
 8014d24:	2800      	cmp	r0, #0
 8014d26:	d09a      	beq.n	8014c5e <_dtoa_r+0x616>
 8014d28:	e7cb      	b.n	8014cc2 <_dtoa_r+0x67a>
 8014d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	f000 808b 	beq.w	8014e48 <_dtoa_r+0x800>
 8014d32:	9a06      	ldr	r2, [sp, #24]
 8014d34:	2a01      	cmp	r2, #1
 8014d36:	dc6e      	bgt.n	8014e16 <_dtoa_r+0x7ce>
 8014d38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014d3a:	2a00      	cmp	r2, #0
 8014d3c:	d067      	beq.n	8014e0e <_dtoa_r+0x7c6>
 8014d3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014d42:	9f07      	ldr	r7, [sp, #28]
 8014d44:	9d05      	ldr	r5, [sp, #20]
 8014d46:	9a05      	ldr	r2, [sp, #20]
 8014d48:	2101      	movs	r1, #1
 8014d4a:	441a      	add	r2, r3
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	9205      	str	r2, [sp, #20]
 8014d50:	4498      	add	r8, r3
 8014d52:	f001 f895 	bl	8015e80 <__i2b>
 8014d56:	4606      	mov	r6, r0
 8014d58:	2d00      	cmp	r5, #0
 8014d5a:	dd0c      	ble.n	8014d76 <_dtoa_r+0x72e>
 8014d5c:	f1b8 0f00 	cmp.w	r8, #0
 8014d60:	dd09      	ble.n	8014d76 <_dtoa_r+0x72e>
 8014d62:	4545      	cmp	r5, r8
 8014d64:	9a05      	ldr	r2, [sp, #20]
 8014d66:	462b      	mov	r3, r5
 8014d68:	bfa8      	it	ge
 8014d6a:	4643      	movge	r3, r8
 8014d6c:	1ad2      	subs	r2, r2, r3
 8014d6e:	9205      	str	r2, [sp, #20]
 8014d70:	1aed      	subs	r5, r5, r3
 8014d72:	eba8 0803 	sub.w	r8, r8, r3
 8014d76:	9b07      	ldr	r3, [sp, #28]
 8014d78:	b1eb      	cbz	r3, 8014db6 <_dtoa_r+0x76e>
 8014d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d067      	beq.n	8014e50 <_dtoa_r+0x808>
 8014d80:	b18f      	cbz	r7, 8014da6 <_dtoa_r+0x75e>
 8014d82:	4631      	mov	r1, r6
 8014d84:	463a      	mov	r2, r7
 8014d86:	4620      	mov	r0, r4
 8014d88:	f001 f91a 	bl	8015fc0 <__pow5mult>
 8014d8c:	9a04      	ldr	r2, [sp, #16]
 8014d8e:	4601      	mov	r1, r0
 8014d90:	4606      	mov	r6, r0
 8014d92:	4620      	mov	r0, r4
 8014d94:	f001 f87d 	bl	8015e92 <__multiply>
 8014d98:	9904      	ldr	r1, [sp, #16]
 8014d9a:	9008      	str	r0, [sp, #32]
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f000 ff91 	bl	8015cc4 <_Bfree>
 8014da2:	9b08      	ldr	r3, [sp, #32]
 8014da4:	9304      	str	r3, [sp, #16]
 8014da6:	9b07      	ldr	r3, [sp, #28]
 8014da8:	1bda      	subs	r2, r3, r7
 8014daa:	d004      	beq.n	8014db6 <_dtoa_r+0x76e>
 8014dac:	9904      	ldr	r1, [sp, #16]
 8014dae:	4620      	mov	r0, r4
 8014db0:	f001 f906 	bl	8015fc0 <__pow5mult>
 8014db4:	9004      	str	r0, [sp, #16]
 8014db6:	2101      	movs	r1, #1
 8014db8:	4620      	mov	r0, r4
 8014dba:	f001 f861 	bl	8015e80 <__i2b>
 8014dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014dc0:	4607      	mov	r7, r0
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	f000 81d0 	beq.w	8015168 <_dtoa_r+0xb20>
 8014dc8:	461a      	mov	r2, r3
 8014dca:	4601      	mov	r1, r0
 8014dcc:	4620      	mov	r0, r4
 8014dce:	f001 f8f7 	bl	8015fc0 <__pow5mult>
 8014dd2:	9b06      	ldr	r3, [sp, #24]
 8014dd4:	2b01      	cmp	r3, #1
 8014dd6:	4607      	mov	r7, r0
 8014dd8:	dc40      	bgt.n	8014e5c <_dtoa_r+0x814>
 8014dda:	9b00      	ldr	r3, [sp, #0]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d139      	bne.n	8014e54 <_dtoa_r+0x80c>
 8014de0:	9b01      	ldr	r3, [sp, #4]
 8014de2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d136      	bne.n	8014e58 <_dtoa_r+0x810>
 8014dea:	9b01      	ldr	r3, [sp, #4]
 8014dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014df0:	0d1b      	lsrs	r3, r3, #20
 8014df2:	051b      	lsls	r3, r3, #20
 8014df4:	b12b      	cbz	r3, 8014e02 <_dtoa_r+0x7ba>
 8014df6:	9b05      	ldr	r3, [sp, #20]
 8014df8:	3301      	adds	r3, #1
 8014dfa:	9305      	str	r3, [sp, #20]
 8014dfc:	f108 0801 	add.w	r8, r8, #1
 8014e00:	2301      	movs	r3, #1
 8014e02:	9307      	str	r3, [sp, #28]
 8014e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d12a      	bne.n	8014e60 <_dtoa_r+0x818>
 8014e0a:	2001      	movs	r0, #1
 8014e0c:	e030      	b.n	8014e70 <_dtoa_r+0x828>
 8014e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014e14:	e795      	b.n	8014d42 <_dtoa_r+0x6fa>
 8014e16:	9b07      	ldr	r3, [sp, #28]
 8014e18:	f109 37ff 	add.w	r7, r9, #4294967295
 8014e1c:	42bb      	cmp	r3, r7
 8014e1e:	bfbf      	itttt	lt
 8014e20:	9b07      	ldrlt	r3, [sp, #28]
 8014e22:	9707      	strlt	r7, [sp, #28]
 8014e24:	1afa      	sublt	r2, r7, r3
 8014e26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014e28:	bfbb      	ittet	lt
 8014e2a:	189b      	addlt	r3, r3, r2
 8014e2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014e2e:	1bdf      	subge	r7, r3, r7
 8014e30:	2700      	movlt	r7, #0
 8014e32:	f1b9 0f00 	cmp.w	r9, #0
 8014e36:	bfb5      	itete	lt
 8014e38:	9b05      	ldrlt	r3, [sp, #20]
 8014e3a:	9d05      	ldrge	r5, [sp, #20]
 8014e3c:	eba3 0509 	sublt.w	r5, r3, r9
 8014e40:	464b      	movge	r3, r9
 8014e42:	bfb8      	it	lt
 8014e44:	2300      	movlt	r3, #0
 8014e46:	e77e      	b.n	8014d46 <_dtoa_r+0x6fe>
 8014e48:	9f07      	ldr	r7, [sp, #28]
 8014e4a:	9d05      	ldr	r5, [sp, #20]
 8014e4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014e4e:	e783      	b.n	8014d58 <_dtoa_r+0x710>
 8014e50:	9a07      	ldr	r2, [sp, #28]
 8014e52:	e7ab      	b.n	8014dac <_dtoa_r+0x764>
 8014e54:	2300      	movs	r3, #0
 8014e56:	e7d4      	b.n	8014e02 <_dtoa_r+0x7ba>
 8014e58:	9b00      	ldr	r3, [sp, #0]
 8014e5a:	e7d2      	b.n	8014e02 <_dtoa_r+0x7ba>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	9307      	str	r3, [sp, #28]
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8014e66:	6918      	ldr	r0, [r3, #16]
 8014e68:	f000 ffbc 	bl	8015de4 <__hi0bits>
 8014e6c:	f1c0 0020 	rsb	r0, r0, #32
 8014e70:	4440      	add	r0, r8
 8014e72:	f010 001f 	ands.w	r0, r0, #31
 8014e76:	d047      	beq.n	8014f08 <_dtoa_r+0x8c0>
 8014e78:	f1c0 0320 	rsb	r3, r0, #32
 8014e7c:	2b04      	cmp	r3, #4
 8014e7e:	dd3b      	ble.n	8014ef8 <_dtoa_r+0x8b0>
 8014e80:	9b05      	ldr	r3, [sp, #20]
 8014e82:	f1c0 001c 	rsb	r0, r0, #28
 8014e86:	4403      	add	r3, r0
 8014e88:	9305      	str	r3, [sp, #20]
 8014e8a:	4405      	add	r5, r0
 8014e8c:	4480      	add	r8, r0
 8014e8e:	9b05      	ldr	r3, [sp, #20]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	dd05      	ble.n	8014ea0 <_dtoa_r+0x858>
 8014e94:	461a      	mov	r2, r3
 8014e96:	9904      	ldr	r1, [sp, #16]
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f001 f8df 	bl	801605c <__lshift>
 8014e9e:	9004      	str	r0, [sp, #16]
 8014ea0:	f1b8 0f00 	cmp.w	r8, #0
 8014ea4:	dd05      	ble.n	8014eb2 <_dtoa_r+0x86a>
 8014ea6:	4639      	mov	r1, r7
 8014ea8:	4642      	mov	r2, r8
 8014eaa:	4620      	mov	r0, r4
 8014eac:	f001 f8d6 	bl	801605c <__lshift>
 8014eb0:	4607      	mov	r7, r0
 8014eb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014eb4:	b353      	cbz	r3, 8014f0c <_dtoa_r+0x8c4>
 8014eb6:	4639      	mov	r1, r7
 8014eb8:	9804      	ldr	r0, [sp, #16]
 8014eba:	f001 f923 	bl	8016104 <__mcmp>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	da24      	bge.n	8014f0c <_dtoa_r+0x8c4>
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	220a      	movs	r2, #10
 8014ec6:	9904      	ldr	r1, [sp, #16]
 8014ec8:	4620      	mov	r0, r4
 8014eca:	f000 ff12 	bl	8015cf2 <__multadd>
 8014ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ed0:	9004      	str	r0, [sp, #16]
 8014ed2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	f000 814d 	beq.w	8015176 <_dtoa_r+0xb2e>
 8014edc:	2300      	movs	r3, #0
 8014ede:	4631      	mov	r1, r6
 8014ee0:	220a      	movs	r2, #10
 8014ee2:	4620      	mov	r0, r4
 8014ee4:	f000 ff05 	bl	8015cf2 <__multadd>
 8014ee8:	9b02      	ldr	r3, [sp, #8]
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	4606      	mov	r6, r0
 8014eee:	dc4f      	bgt.n	8014f90 <_dtoa_r+0x948>
 8014ef0:	9b06      	ldr	r3, [sp, #24]
 8014ef2:	2b02      	cmp	r3, #2
 8014ef4:	dd4c      	ble.n	8014f90 <_dtoa_r+0x948>
 8014ef6:	e011      	b.n	8014f1c <_dtoa_r+0x8d4>
 8014ef8:	d0c9      	beq.n	8014e8e <_dtoa_r+0x846>
 8014efa:	9a05      	ldr	r2, [sp, #20]
 8014efc:	331c      	adds	r3, #28
 8014efe:	441a      	add	r2, r3
 8014f00:	9205      	str	r2, [sp, #20]
 8014f02:	441d      	add	r5, r3
 8014f04:	4498      	add	r8, r3
 8014f06:	e7c2      	b.n	8014e8e <_dtoa_r+0x846>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	e7f6      	b.n	8014efa <_dtoa_r+0x8b2>
 8014f0c:	f1b9 0f00 	cmp.w	r9, #0
 8014f10:	dc38      	bgt.n	8014f84 <_dtoa_r+0x93c>
 8014f12:	9b06      	ldr	r3, [sp, #24]
 8014f14:	2b02      	cmp	r3, #2
 8014f16:	dd35      	ble.n	8014f84 <_dtoa_r+0x93c>
 8014f18:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f1c:	9b02      	ldr	r3, [sp, #8]
 8014f1e:	b963      	cbnz	r3, 8014f3a <_dtoa_r+0x8f2>
 8014f20:	4639      	mov	r1, r7
 8014f22:	2205      	movs	r2, #5
 8014f24:	4620      	mov	r0, r4
 8014f26:	f000 fee4 	bl	8015cf2 <__multadd>
 8014f2a:	4601      	mov	r1, r0
 8014f2c:	4607      	mov	r7, r0
 8014f2e:	9804      	ldr	r0, [sp, #16]
 8014f30:	f001 f8e8 	bl	8016104 <__mcmp>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	f73f adcc 	bgt.w	8014ad2 <_dtoa_r+0x48a>
 8014f3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f3c:	465d      	mov	r5, fp
 8014f3e:	ea6f 0a03 	mvn.w	sl, r3
 8014f42:	f04f 0900 	mov.w	r9, #0
 8014f46:	4639      	mov	r1, r7
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f000 febb 	bl	8015cc4 <_Bfree>
 8014f4e:	2e00      	cmp	r6, #0
 8014f50:	f43f aeb7 	beq.w	8014cc2 <_dtoa_r+0x67a>
 8014f54:	f1b9 0f00 	cmp.w	r9, #0
 8014f58:	d005      	beq.n	8014f66 <_dtoa_r+0x91e>
 8014f5a:	45b1      	cmp	r9, r6
 8014f5c:	d003      	beq.n	8014f66 <_dtoa_r+0x91e>
 8014f5e:	4649      	mov	r1, r9
 8014f60:	4620      	mov	r0, r4
 8014f62:	f000 feaf 	bl	8015cc4 <_Bfree>
 8014f66:	4631      	mov	r1, r6
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f000 feab 	bl	8015cc4 <_Bfree>
 8014f6e:	e6a8      	b.n	8014cc2 <_dtoa_r+0x67a>
 8014f70:	2700      	movs	r7, #0
 8014f72:	463e      	mov	r6, r7
 8014f74:	e7e1      	b.n	8014f3a <_dtoa_r+0x8f2>
 8014f76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014f7a:	463e      	mov	r6, r7
 8014f7c:	e5a9      	b.n	8014ad2 <_dtoa_r+0x48a>
 8014f7e:	bf00      	nop
 8014f80:	40240000 	.word	0x40240000
 8014f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f86:	f8cd 9008 	str.w	r9, [sp, #8]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	f000 80fa 	beq.w	8015184 <_dtoa_r+0xb3c>
 8014f90:	2d00      	cmp	r5, #0
 8014f92:	dd05      	ble.n	8014fa0 <_dtoa_r+0x958>
 8014f94:	4631      	mov	r1, r6
 8014f96:	462a      	mov	r2, r5
 8014f98:	4620      	mov	r0, r4
 8014f9a:	f001 f85f 	bl	801605c <__lshift>
 8014f9e:	4606      	mov	r6, r0
 8014fa0:	9b07      	ldr	r3, [sp, #28]
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d04c      	beq.n	8015040 <_dtoa_r+0x9f8>
 8014fa6:	6871      	ldr	r1, [r6, #4]
 8014fa8:	4620      	mov	r0, r4
 8014faa:	f000 fe57 	bl	8015c5c <_Balloc>
 8014fae:	6932      	ldr	r2, [r6, #16]
 8014fb0:	3202      	adds	r2, #2
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	0092      	lsls	r2, r2, #2
 8014fb6:	f106 010c 	add.w	r1, r6, #12
 8014fba:	300c      	adds	r0, #12
 8014fbc:	f7fd fb68 	bl	8012690 <memcpy>
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	4629      	mov	r1, r5
 8014fc4:	4620      	mov	r0, r4
 8014fc6:	f001 f849 	bl	801605c <__lshift>
 8014fca:	9b00      	ldr	r3, [sp, #0]
 8014fcc:	f8cd b014 	str.w	fp, [sp, #20]
 8014fd0:	f003 0301 	and.w	r3, r3, #1
 8014fd4:	46b1      	mov	r9, r6
 8014fd6:	9307      	str	r3, [sp, #28]
 8014fd8:	4606      	mov	r6, r0
 8014fda:	4639      	mov	r1, r7
 8014fdc:	9804      	ldr	r0, [sp, #16]
 8014fde:	f7ff faa7 	bl	8014530 <quorem>
 8014fe2:	4649      	mov	r1, r9
 8014fe4:	4605      	mov	r5, r0
 8014fe6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8014fea:	9804      	ldr	r0, [sp, #16]
 8014fec:	f001 f88a 	bl	8016104 <__mcmp>
 8014ff0:	4632      	mov	r2, r6
 8014ff2:	9000      	str	r0, [sp, #0]
 8014ff4:	4639      	mov	r1, r7
 8014ff6:	4620      	mov	r0, r4
 8014ff8:	f001 f89e 	bl	8016138 <__mdiff>
 8014ffc:	68c3      	ldr	r3, [r0, #12]
 8014ffe:	4602      	mov	r2, r0
 8015000:	bb03      	cbnz	r3, 8015044 <_dtoa_r+0x9fc>
 8015002:	4601      	mov	r1, r0
 8015004:	9008      	str	r0, [sp, #32]
 8015006:	9804      	ldr	r0, [sp, #16]
 8015008:	f001 f87c 	bl	8016104 <__mcmp>
 801500c:	9a08      	ldr	r2, [sp, #32]
 801500e:	4603      	mov	r3, r0
 8015010:	4611      	mov	r1, r2
 8015012:	4620      	mov	r0, r4
 8015014:	9308      	str	r3, [sp, #32]
 8015016:	f000 fe55 	bl	8015cc4 <_Bfree>
 801501a:	9b08      	ldr	r3, [sp, #32]
 801501c:	b9a3      	cbnz	r3, 8015048 <_dtoa_r+0xa00>
 801501e:	9a06      	ldr	r2, [sp, #24]
 8015020:	b992      	cbnz	r2, 8015048 <_dtoa_r+0xa00>
 8015022:	9a07      	ldr	r2, [sp, #28]
 8015024:	b982      	cbnz	r2, 8015048 <_dtoa_r+0xa00>
 8015026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801502a:	d029      	beq.n	8015080 <_dtoa_r+0xa38>
 801502c:	9b00      	ldr	r3, [sp, #0]
 801502e:	2b00      	cmp	r3, #0
 8015030:	dd01      	ble.n	8015036 <_dtoa_r+0x9ee>
 8015032:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015036:	9b05      	ldr	r3, [sp, #20]
 8015038:	1c5d      	adds	r5, r3, #1
 801503a:	f883 8000 	strb.w	r8, [r3]
 801503e:	e782      	b.n	8014f46 <_dtoa_r+0x8fe>
 8015040:	4630      	mov	r0, r6
 8015042:	e7c2      	b.n	8014fca <_dtoa_r+0x982>
 8015044:	2301      	movs	r3, #1
 8015046:	e7e3      	b.n	8015010 <_dtoa_r+0x9c8>
 8015048:	9a00      	ldr	r2, [sp, #0]
 801504a:	2a00      	cmp	r2, #0
 801504c:	db04      	blt.n	8015058 <_dtoa_r+0xa10>
 801504e:	d125      	bne.n	801509c <_dtoa_r+0xa54>
 8015050:	9a06      	ldr	r2, [sp, #24]
 8015052:	bb1a      	cbnz	r2, 801509c <_dtoa_r+0xa54>
 8015054:	9a07      	ldr	r2, [sp, #28]
 8015056:	bb0a      	cbnz	r2, 801509c <_dtoa_r+0xa54>
 8015058:	2b00      	cmp	r3, #0
 801505a:	ddec      	ble.n	8015036 <_dtoa_r+0x9ee>
 801505c:	2201      	movs	r2, #1
 801505e:	9904      	ldr	r1, [sp, #16]
 8015060:	4620      	mov	r0, r4
 8015062:	f000 fffb 	bl	801605c <__lshift>
 8015066:	4639      	mov	r1, r7
 8015068:	9004      	str	r0, [sp, #16]
 801506a:	f001 f84b 	bl	8016104 <__mcmp>
 801506e:	2800      	cmp	r0, #0
 8015070:	dc03      	bgt.n	801507a <_dtoa_r+0xa32>
 8015072:	d1e0      	bne.n	8015036 <_dtoa_r+0x9ee>
 8015074:	f018 0f01 	tst.w	r8, #1
 8015078:	d0dd      	beq.n	8015036 <_dtoa_r+0x9ee>
 801507a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801507e:	d1d8      	bne.n	8015032 <_dtoa_r+0x9ea>
 8015080:	9b05      	ldr	r3, [sp, #20]
 8015082:	9a05      	ldr	r2, [sp, #20]
 8015084:	1c5d      	adds	r5, r3, #1
 8015086:	2339      	movs	r3, #57	; 0x39
 8015088:	7013      	strb	r3, [r2, #0]
 801508a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801508e:	2b39      	cmp	r3, #57	; 0x39
 8015090:	f105 32ff 	add.w	r2, r5, #4294967295
 8015094:	d04f      	beq.n	8015136 <_dtoa_r+0xaee>
 8015096:	3301      	adds	r3, #1
 8015098:	7013      	strb	r3, [r2, #0]
 801509a:	e754      	b.n	8014f46 <_dtoa_r+0x8fe>
 801509c:	9a05      	ldr	r2, [sp, #20]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	f102 0501 	add.w	r5, r2, #1
 80150a4:	dd06      	ble.n	80150b4 <_dtoa_r+0xa6c>
 80150a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80150aa:	d0e9      	beq.n	8015080 <_dtoa_r+0xa38>
 80150ac:	f108 0801 	add.w	r8, r8, #1
 80150b0:	9b05      	ldr	r3, [sp, #20]
 80150b2:	e7c2      	b.n	801503a <_dtoa_r+0x9f2>
 80150b4:	9a02      	ldr	r2, [sp, #8]
 80150b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80150ba:	eba5 030b 	sub.w	r3, r5, fp
 80150be:	4293      	cmp	r3, r2
 80150c0:	d021      	beq.n	8015106 <_dtoa_r+0xabe>
 80150c2:	2300      	movs	r3, #0
 80150c4:	220a      	movs	r2, #10
 80150c6:	9904      	ldr	r1, [sp, #16]
 80150c8:	4620      	mov	r0, r4
 80150ca:	f000 fe12 	bl	8015cf2 <__multadd>
 80150ce:	45b1      	cmp	r9, r6
 80150d0:	9004      	str	r0, [sp, #16]
 80150d2:	f04f 0300 	mov.w	r3, #0
 80150d6:	f04f 020a 	mov.w	r2, #10
 80150da:	4649      	mov	r1, r9
 80150dc:	4620      	mov	r0, r4
 80150de:	d105      	bne.n	80150ec <_dtoa_r+0xaa4>
 80150e0:	f000 fe07 	bl	8015cf2 <__multadd>
 80150e4:	4681      	mov	r9, r0
 80150e6:	4606      	mov	r6, r0
 80150e8:	9505      	str	r5, [sp, #20]
 80150ea:	e776      	b.n	8014fda <_dtoa_r+0x992>
 80150ec:	f000 fe01 	bl	8015cf2 <__multadd>
 80150f0:	4631      	mov	r1, r6
 80150f2:	4681      	mov	r9, r0
 80150f4:	2300      	movs	r3, #0
 80150f6:	220a      	movs	r2, #10
 80150f8:	4620      	mov	r0, r4
 80150fa:	f000 fdfa 	bl	8015cf2 <__multadd>
 80150fe:	4606      	mov	r6, r0
 8015100:	e7f2      	b.n	80150e8 <_dtoa_r+0xaa0>
 8015102:	f04f 0900 	mov.w	r9, #0
 8015106:	2201      	movs	r2, #1
 8015108:	9904      	ldr	r1, [sp, #16]
 801510a:	4620      	mov	r0, r4
 801510c:	f000 ffa6 	bl	801605c <__lshift>
 8015110:	4639      	mov	r1, r7
 8015112:	9004      	str	r0, [sp, #16]
 8015114:	f000 fff6 	bl	8016104 <__mcmp>
 8015118:	2800      	cmp	r0, #0
 801511a:	dcb6      	bgt.n	801508a <_dtoa_r+0xa42>
 801511c:	d102      	bne.n	8015124 <_dtoa_r+0xadc>
 801511e:	f018 0f01 	tst.w	r8, #1
 8015122:	d1b2      	bne.n	801508a <_dtoa_r+0xa42>
 8015124:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015128:	2b30      	cmp	r3, #48	; 0x30
 801512a:	f105 32ff 	add.w	r2, r5, #4294967295
 801512e:	f47f af0a 	bne.w	8014f46 <_dtoa_r+0x8fe>
 8015132:	4615      	mov	r5, r2
 8015134:	e7f6      	b.n	8015124 <_dtoa_r+0xadc>
 8015136:	4593      	cmp	fp, r2
 8015138:	d105      	bne.n	8015146 <_dtoa_r+0xafe>
 801513a:	2331      	movs	r3, #49	; 0x31
 801513c:	f10a 0a01 	add.w	sl, sl, #1
 8015140:	f88b 3000 	strb.w	r3, [fp]
 8015144:	e6ff      	b.n	8014f46 <_dtoa_r+0x8fe>
 8015146:	4615      	mov	r5, r2
 8015148:	e79f      	b.n	801508a <_dtoa_r+0xa42>
 801514a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80151b0 <_dtoa_r+0xb68>
 801514e:	e007      	b.n	8015160 <_dtoa_r+0xb18>
 8015150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015152:	f8df b060 	ldr.w	fp, [pc, #96]	; 80151b4 <_dtoa_r+0xb6c>
 8015156:	b11b      	cbz	r3, 8015160 <_dtoa_r+0xb18>
 8015158:	f10b 0308 	add.w	r3, fp, #8
 801515c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801515e:	6013      	str	r3, [r2, #0]
 8015160:	4658      	mov	r0, fp
 8015162:	b017      	add	sp, #92	; 0x5c
 8015164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015168:	9b06      	ldr	r3, [sp, #24]
 801516a:	2b01      	cmp	r3, #1
 801516c:	f77f ae35 	ble.w	8014dda <_dtoa_r+0x792>
 8015170:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015172:	9307      	str	r3, [sp, #28]
 8015174:	e649      	b.n	8014e0a <_dtoa_r+0x7c2>
 8015176:	9b02      	ldr	r3, [sp, #8]
 8015178:	2b00      	cmp	r3, #0
 801517a:	dc03      	bgt.n	8015184 <_dtoa_r+0xb3c>
 801517c:	9b06      	ldr	r3, [sp, #24]
 801517e:	2b02      	cmp	r3, #2
 8015180:	f73f aecc 	bgt.w	8014f1c <_dtoa_r+0x8d4>
 8015184:	465d      	mov	r5, fp
 8015186:	4639      	mov	r1, r7
 8015188:	9804      	ldr	r0, [sp, #16]
 801518a:	f7ff f9d1 	bl	8014530 <quorem>
 801518e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015192:	f805 8b01 	strb.w	r8, [r5], #1
 8015196:	9a02      	ldr	r2, [sp, #8]
 8015198:	eba5 030b 	sub.w	r3, r5, fp
 801519c:	429a      	cmp	r2, r3
 801519e:	ddb0      	ble.n	8015102 <_dtoa_r+0xaba>
 80151a0:	2300      	movs	r3, #0
 80151a2:	220a      	movs	r2, #10
 80151a4:	9904      	ldr	r1, [sp, #16]
 80151a6:	4620      	mov	r0, r4
 80151a8:	f000 fda3 	bl	8015cf2 <__multadd>
 80151ac:	9004      	str	r0, [sp, #16]
 80151ae:	e7ea      	b.n	8015186 <_dtoa_r+0xb3e>
 80151b0:	08017da3 	.word	0x08017da3
 80151b4:	08017c00 	.word	0x08017c00

080151b8 <__sflush_r>:
 80151b8:	898a      	ldrh	r2, [r1, #12]
 80151ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151be:	4605      	mov	r5, r0
 80151c0:	0710      	lsls	r0, r2, #28
 80151c2:	460c      	mov	r4, r1
 80151c4:	d458      	bmi.n	8015278 <__sflush_r+0xc0>
 80151c6:	684b      	ldr	r3, [r1, #4]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	dc05      	bgt.n	80151d8 <__sflush_r+0x20>
 80151cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	dc02      	bgt.n	80151d8 <__sflush_r+0x20>
 80151d2:	2000      	movs	r0, #0
 80151d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80151da:	2e00      	cmp	r6, #0
 80151dc:	d0f9      	beq.n	80151d2 <__sflush_r+0x1a>
 80151de:	2300      	movs	r3, #0
 80151e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80151e4:	682f      	ldr	r7, [r5, #0]
 80151e6:	6a21      	ldr	r1, [r4, #32]
 80151e8:	602b      	str	r3, [r5, #0]
 80151ea:	d032      	beq.n	8015252 <__sflush_r+0x9a>
 80151ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80151ee:	89a3      	ldrh	r3, [r4, #12]
 80151f0:	075a      	lsls	r2, r3, #29
 80151f2:	d505      	bpl.n	8015200 <__sflush_r+0x48>
 80151f4:	6863      	ldr	r3, [r4, #4]
 80151f6:	1ac0      	subs	r0, r0, r3
 80151f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80151fa:	b10b      	cbz	r3, 8015200 <__sflush_r+0x48>
 80151fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80151fe:	1ac0      	subs	r0, r0, r3
 8015200:	2300      	movs	r3, #0
 8015202:	4602      	mov	r2, r0
 8015204:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015206:	6a21      	ldr	r1, [r4, #32]
 8015208:	4628      	mov	r0, r5
 801520a:	47b0      	blx	r6
 801520c:	1c43      	adds	r3, r0, #1
 801520e:	89a3      	ldrh	r3, [r4, #12]
 8015210:	d106      	bne.n	8015220 <__sflush_r+0x68>
 8015212:	6829      	ldr	r1, [r5, #0]
 8015214:	291d      	cmp	r1, #29
 8015216:	d848      	bhi.n	80152aa <__sflush_r+0xf2>
 8015218:	4a29      	ldr	r2, [pc, #164]	; (80152c0 <__sflush_r+0x108>)
 801521a:	40ca      	lsrs	r2, r1
 801521c:	07d6      	lsls	r6, r2, #31
 801521e:	d544      	bpl.n	80152aa <__sflush_r+0xf2>
 8015220:	2200      	movs	r2, #0
 8015222:	6062      	str	r2, [r4, #4]
 8015224:	04d9      	lsls	r1, r3, #19
 8015226:	6922      	ldr	r2, [r4, #16]
 8015228:	6022      	str	r2, [r4, #0]
 801522a:	d504      	bpl.n	8015236 <__sflush_r+0x7e>
 801522c:	1c42      	adds	r2, r0, #1
 801522e:	d101      	bne.n	8015234 <__sflush_r+0x7c>
 8015230:	682b      	ldr	r3, [r5, #0]
 8015232:	b903      	cbnz	r3, 8015236 <__sflush_r+0x7e>
 8015234:	6560      	str	r0, [r4, #84]	; 0x54
 8015236:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015238:	602f      	str	r7, [r5, #0]
 801523a:	2900      	cmp	r1, #0
 801523c:	d0c9      	beq.n	80151d2 <__sflush_r+0x1a>
 801523e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015242:	4299      	cmp	r1, r3
 8015244:	d002      	beq.n	801524c <__sflush_r+0x94>
 8015246:	4628      	mov	r0, r5
 8015248:	f001 f916 	bl	8016478 <_free_r>
 801524c:	2000      	movs	r0, #0
 801524e:	6360      	str	r0, [r4, #52]	; 0x34
 8015250:	e7c0      	b.n	80151d4 <__sflush_r+0x1c>
 8015252:	2301      	movs	r3, #1
 8015254:	4628      	mov	r0, r5
 8015256:	47b0      	blx	r6
 8015258:	1c41      	adds	r1, r0, #1
 801525a:	d1c8      	bne.n	80151ee <__sflush_r+0x36>
 801525c:	682b      	ldr	r3, [r5, #0]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d0c5      	beq.n	80151ee <__sflush_r+0x36>
 8015262:	2b1d      	cmp	r3, #29
 8015264:	d001      	beq.n	801526a <__sflush_r+0xb2>
 8015266:	2b16      	cmp	r3, #22
 8015268:	d101      	bne.n	801526e <__sflush_r+0xb6>
 801526a:	602f      	str	r7, [r5, #0]
 801526c:	e7b1      	b.n	80151d2 <__sflush_r+0x1a>
 801526e:	89a3      	ldrh	r3, [r4, #12]
 8015270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015274:	81a3      	strh	r3, [r4, #12]
 8015276:	e7ad      	b.n	80151d4 <__sflush_r+0x1c>
 8015278:	690f      	ldr	r7, [r1, #16]
 801527a:	2f00      	cmp	r7, #0
 801527c:	d0a9      	beq.n	80151d2 <__sflush_r+0x1a>
 801527e:	0793      	lsls	r3, r2, #30
 8015280:	680e      	ldr	r6, [r1, #0]
 8015282:	bf08      	it	eq
 8015284:	694b      	ldreq	r3, [r1, #20]
 8015286:	600f      	str	r7, [r1, #0]
 8015288:	bf18      	it	ne
 801528a:	2300      	movne	r3, #0
 801528c:	eba6 0807 	sub.w	r8, r6, r7
 8015290:	608b      	str	r3, [r1, #8]
 8015292:	f1b8 0f00 	cmp.w	r8, #0
 8015296:	dd9c      	ble.n	80151d2 <__sflush_r+0x1a>
 8015298:	4643      	mov	r3, r8
 801529a:	463a      	mov	r2, r7
 801529c:	6a21      	ldr	r1, [r4, #32]
 801529e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80152a0:	4628      	mov	r0, r5
 80152a2:	47b0      	blx	r6
 80152a4:	2800      	cmp	r0, #0
 80152a6:	dc06      	bgt.n	80152b6 <__sflush_r+0xfe>
 80152a8:	89a3      	ldrh	r3, [r4, #12]
 80152aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152ae:	81a3      	strh	r3, [r4, #12]
 80152b0:	f04f 30ff 	mov.w	r0, #4294967295
 80152b4:	e78e      	b.n	80151d4 <__sflush_r+0x1c>
 80152b6:	4407      	add	r7, r0
 80152b8:	eba8 0800 	sub.w	r8, r8, r0
 80152bc:	e7e9      	b.n	8015292 <__sflush_r+0xda>
 80152be:	bf00      	nop
 80152c0:	20400001 	.word	0x20400001

080152c4 <_fflush_r>:
 80152c4:	b538      	push	{r3, r4, r5, lr}
 80152c6:	690b      	ldr	r3, [r1, #16]
 80152c8:	4605      	mov	r5, r0
 80152ca:	460c      	mov	r4, r1
 80152cc:	b1db      	cbz	r3, 8015306 <_fflush_r+0x42>
 80152ce:	b118      	cbz	r0, 80152d8 <_fflush_r+0x14>
 80152d0:	6983      	ldr	r3, [r0, #24]
 80152d2:	b90b      	cbnz	r3, 80152d8 <_fflush_r+0x14>
 80152d4:	f000 f860 	bl	8015398 <__sinit>
 80152d8:	4b0c      	ldr	r3, [pc, #48]	; (801530c <_fflush_r+0x48>)
 80152da:	429c      	cmp	r4, r3
 80152dc:	d109      	bne.n	80152f2 <_fflush_r+0x2e>
 80152de:	686c      	ldr	r4, [r5, #4]
 80152e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80152e4:	b17b      	cbz	r3, 8015306 <_fflush_r+0x42>
 80152e6:	4621      	mov	r1, r4
 80152e8:	4628      	mov	r0, r5
 80152ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80152ee:	f7ff bf63 	b.w	80151b8 <__sflush_r>
 80152f2:	4b07      	ldr	r3, [pc, #28]	; (8015310 <_fflush_r+0x4c>)
 80152f4:	429c      	cmp	r4, r3
 80152f6:	d101      	bne.n	80152fc <_fflush_r+0x38>
 80152f8:	68ac      	ldr	r4, [r5, #8]
 80152fa:	e7f1      	b.n	80152e0 <_fflush_r+0x1c>
 80152fc:	4b05      	ldr	r3, [pc, #20]	; (8015314 <_fflush_r+0x50>)
 80152fe:	429c      	cmp	r4, r3
 8015300:	bf08      	it	eq
 8015302:	68ec      	ldreq	r4, [r5, #12]
 8015304:	e7ec      	b.n	80152e0 <_fflush_r+0x1c>
 8015306:	2000      	movs	r0, #0
 8015308:	bd38      	pop	{r3, r4, r5, pc}
 801530a:	bf00      	nop
 801530c:	08017c30 	.word	0x08017c30
 8015310:	08017c50 	.word	0x08017c50
 8015314:	08017c10 	.word	0x08017c10

08015318 <std>:
 8015318:	2300      	movs	r3, #0
 801531a:	b510      	push	{r4, lr}
 801531c:	4604      	mov	r4, r0
 801531e:	e9c0 3300 	strd	r3, r3, [r0]
 8015322:	6083      	str	r3, [r0, #8]
 8015324:	8181      	strh	r1, [r0, #12]
 8015326:	6643      	str	r3, [r0, #100]	; 0x64
 8015328:	81c2      	strh	r2, [r0, #14]
 801532a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801532e:	6183      	str	r3, [r0, #24]
 8015330:	4619      	mov	r1, r3
 8015332:	2208      	movs	r2, #8
 8015334:	305c      	adds	r0, #92	; 0x5c
 8015336:	f7fd f9b6 	bl	80126a6 <memset>
 801533a:	4b05      	ldr	r3, [pc, #20]	; (8015350 <std+0x38>)
 801533c:	6263      	str	r3, [r4, #36]	; 0x24
 801533e:	4b05      	ldr	r3, [pc, #20]	; (8015354 <std+0x3c>)
 8015340:	62a3      	str	r3, [r4, #40]	; 0x28
 8015342:	4b05      	ldr	r3, [pc, #20]	; (8015358 <std+0x40>)
 8015344:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015346:	4b05      	ldr	r3, [pc, #20]	; (801535c <std+0x44>)
 8015348:	6224      	str	r4, [r4, #32]
 801534a:	6323      	str	r3, [r4, #48]	; 0x30
 801534c:	bd10      	pop	{r4, pc}
 801534e:	bf00      	nop
 8015350:	08013535 	.word	0x08013535
 8015354:	0801355b 	.word	0x0801355b
 8015358:	08013593 	.word	0x08013593
 801535c:	080135b7 	.word	0x080135b7

08015360 <_cleanup_r>:
 8015360:	4901      	ldr	r1, [pc, #4]	; (8015368 <_cleanup_r+0x8>)
 8015362:	f000 b885 	b.w	8015470 <_fwalk_reent>
 8015366:	bf00      	nop
 8015368:	080152c5 	.word	0x080152c5

0801536c <__sfmoreglue>:
 801536c:	b570      	push	{r4, r5, r6, lr}
 801536e:	1e4a      	subs	r2, r1, #1
 8015370:	2568      	movs	r5, #104	; 0x68
 8015372:	4355      	muls	r5, r2
 8015374:	460e      	mov	r6, r1
 8015376:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801537a:	f001 f8cb 	bl	8016514 <_malloc_r>
 801537e:	4604      	mov	r4, r0
 8015380:	b140      	cbz	r0, 8015394 <__sfmoreglue+0x28>
 8015382:	2100      	movs	r1, #0
 8015384:	e9c0 1600 	strd	r1, r6, [r0]
 8015388:	300c      	adds	r0, #12
 801538a:	60a0      	str	r0, [r4, #8]
 801538c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015390:	f7fd f989 	bl	80126a6 <memset>
 8015394:	4620      	mov	r0, r4
 8015396:	bd70      	pop	{r4, r5, r6, pc}

08015398 <__sinit>:
 8015398:	6983      	ldr	r3, [r0, #24]
 801539a:	b510      	push	{r4, lr}
 801539c:	4604      	mov	r4, r0
 801539e:	bb33      	cbnz	r3, 80153ee <__sinit+0x56>
 80153a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80153a4:	6503      	str	r3, [r0, #80]	; 0x50
 80153a6:	4b12      	ldr	r3, [pc, #72]	; (80153f0 <__sinit+0x58>)
 80153a8:	4a12      	ldr	r2, [pc, #72]	; (80153f4 <__sinit+0x5c>)
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	6282      	str	r2, [r0, #40]	; 0x28
 80153ae:	4298      	cmp	r0, r3
 80153b0:	bf04      	itt	eq
 80153b2:	2301      	moveq	r3, #1
 80153b4:	6183      	streq	r3, [r0, #24]
 80153b6:	f000 f81f 	bl	80153f8 <__sfp>
 80153ba:	6060      	str	r0, [r4, #4]
 80153bc:	4620      	mov	r0, r4
 80153be:	f000 f81b 	bl	80153f8 <__sfp>
 80153c2:	60a0      	str	r0, [r4, #8]
 80153c4:	4620      	mov	r0, r4
 80153c6:	f000 f817 	bl	80153f8 <__sfp>
 80153ca:	2200      	movs	r2, #0
 80153cc:	60e0      	str	r0, [r4, #12]
 80153ce:	2104      	movs	r1, #4
 80153d0:	6860      	ldr	r0, [r4, #4]
 80153d2:	f7ff ffa1 	bl	8015318 <std>
 80153d6:	2201      	movs	r2, #1
 80153d8:	2109      	movs	r1, #9
 80153da:	68a0      	ldr	r0, [r4, #8]
 80153dc:	f7ff ff9c 	bl	8015318 <std>
 80153e0:	2202      	movs	r2, #2
 80153e2:	2112      	movs	r1, #18
 80153e4:	68e0      	ldr	r0, [r4, #12]
 80153e6:	f7ff ff97 	bl	8015318 <std>
 80153ea:	2301      	movs	r3, #1
 80153ec:	61a3      	str	r3, [r4, #24]
 80153ee:	bd10      	pop	{r4, pc}
 80153f0:	08017b70 	.word	0x08017b70
 80153f4:	08015361 	.word	0x08015361

080153f8 <__sfp>:
 80153f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153fa:	4b1b      	ldr	r3, [pc, #108]	; (8015468 <__sfp+0x70>)
 80153fc:	681e      	ldr	r6, [r3, #0]
 80153fe:	69b3      	ldr	r3, [r6, #24]
 8015400:	4607      	mov	r7, r0
 8015402:	b913      	cbnz	r3, 801540a <__sfp+0x12>
 8015404:	4630      	mov	r0, r6
 8015406:	f7ff ffc7 	bl	8015398 <__sinit>
 801540a:	3648      	adds	r6, #72	; 0x48
 801540c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015410:	3b01      	subs	r3, #1
 8015412:	d503      	bpl.n	801541c <__sfp+0x24>
 8015414:	6833      	ldr	r3, [r6, #0]
 8015416:	b133      	cbz	r3, 8015426 <__sfp+0x2e>
 8015418:	6836      	ldr	r6, [r6, #0]
 801541a:	e7f7      	b.n	801540c <__sfp+0x14>
 801541c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015420:	b16d      	cbz	r5, 801543e <__sfp+0x46>
 8015422:	3468      	adds	r4, #104	; 0x68
 8015424:	e7f4      	b.n	8015410 <__sfp+0x18>
 8015426:	2104      	movs	r1, #4
 8015428:	4638      	mov	r0, r7
 801542a:	f7ff ff9f 	bl	801536c <__sfmoreglue>
 801542e:	6030      	str	r0, [r6, #0]
 8015430:	2800      	cmp	r0, #0
 8015432:	d1f1      	bne.n	8015418 <__sfp+0x20>
 8015434:	230c      	movs	r3, #12
 8015436:	603b      	str	r3, [r7, #0]
 8015438:	4604      	mov	r4, r0
 801543a:	4620      	mov	r0, r4
 801543c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801543e:	4b0b      	ldr	r3, [pc, #44]	; (801546c <__sfp+0x74>)
 8015440:	6665      	str	r5, [r4, #100]	; 0x64
 8015442:	e9c4 5500 	strd	r5, r5, [r4]
 8015446:	60a5      	str	r5, [r4, #8]
 8015448:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801544c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015450:	2208      	movs	r2, #8
 8015452:	4629      	mov	r1, r5
 8015454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015458:	f7fd f925 	bl	80126a6 <memset>
 801545c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015460:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015464:	e7e9      	b.n	801543a <__sfp+0x42>
 8015466:	bf00      	nop
 8015468:	08017b70 	.word	0x08017b70
 801546c:	ffff0001 	.word	0xffff0001

08015470 <_fwalk_reent>:
 8015470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015474:	4680      	mov	r8, r0
 8015476:	4689      	mov	r9, r1
 8015478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801547c:	2600      	movs	r6, #0
 801547e:	b914      	cbnz	r4, 8015486 <_fwalk_reent+0x16>
 8015480:	4630      	mov	r0, r6
 8015482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015486:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801548a:	3f01      	subs	r7, #1
 801548c:	d501      	bpl.n	8015492 <_fwalk_reent+0x22>
 801548e:	6824      	ldr	r4, [r4, #0]
 8015490:	e7f5      	b.n	801547e <_fwalk_reent+0xe>
 8015492:	89ab      	ldrh	r3, [r5, #12]
 8015494:	2b01      	cmp	r3, #1
 8015496:	d907      	bls.n	80154a8 <_fwalk_reent+0x38>
 8015498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801549c:	3301      	adds	r3, #1
 801549e:	d003      	beq.n	80154a8 <_fwalk_reent+0x38>
 80154a0:	4629      	mov	r1, r5
 80154a2:	4640      	mov	r0, r8
 80154a4:	47c8      	blx	r9
 80154a6:	4306      	orrs	r6, r0
 80154a8:	3568      	adds	r5, #104	; 0x68
 80154aa:	e7ee      	b.n	801548a <_fwalk_reent+0x1a>

080154ac <rshift>:
 80154ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154ae:	6906      	ldr	r6, [r0, #16]
 80154b0:	114b      	asrs	r3, r1, #5
 80154b2:	429e      	cmp	r6, r3
 80154b4:	f100 0414 	add.w	r4, r0, #20
 80154b8:	dd30      	ble.n	801551c <rshift+0x70>
 80154ba:	f011 011f 	ands.w	r1, r1, #31
 80154be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80154c2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80154c6:	d108      	bne.n	80154da <rshift+0x2e>
 80154c8:	4621      	mov	r1, r4
 80154ca:	42b2      	cmp	r2, r6
 80154cc:	460b      	mov	r3, r1
 80154ce:	d211      	bcs.n	80154f4 <rshift+0x48>
 80154d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80154d4:	f841 3b04 	str.w	r3, [r1], #4
 80154d8:	e7f7      	b.n	80154ca <rshift+0x1e>
 80154da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80154de:	f1c1 0c20 	rsb	ip, r1, #32
 80154e2:	40cd      	lsrs	r5, r1
 80154e4:	3204      	adds	r2, #4
 80154e6:	4623      	mov	r3, r4
 80154e8:	42b2      	cmp	r2, r6
 80154ea:	4617      	mov	r7, r2
 80154ec:	d30c      	bcc.n	8015508 <rshift+0x5c>
 80154ee:	601d      	str	r5, [r3, #0]
 80154f0:	b105      	cbz	r5, 80154f4 <rshift+0x48>
 80154f2:	3304      	adds	r3, #4
 80154f4:	1b1a      	subs	r2, r3, r4
 80154f6:	42a3      	cmp	r3, r4
 80154f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80154fc:	bf08      	it	eq
 80154fe:	2300      	moveq	r3, #0
 8015500:	6102      	str	r2, [r0, #16]
 8015502:	bf08      	it	eq
 8015504:	6143      	streq	r3, [r0, #20]
 8015506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015508:	683f      	ldr	r7, [r7, #0]
 801550a:	fa07 f70c 	lsl.w	r7, r7, ip
 801550e:	433d      	orrs	r5, r7
 8015510:	f843 5b04 	str.w	r5, [r3], #4
 8015514:	f852 5b04 	ldr.w	r5, [r2], #4
 8015518:	40cd      	lsrs	r5, r1
 801551a:	e7e5      	b.n	80154e8 <rshift+0x3c>
 801551c:	4623      	mov	r3, r4
 801551e:	e7e9      	b.n	80154f4 <rshift+0x48>

08015520 <__hexdig_fun>:
 8015520:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015524:	2b09      	cmp	r3, #9
 8015526:	d802      	bhi.n	801552e <__hexdig_fun+0xe>
 8015528:	3820      	subs	r0, #32
 801552a:	b2c0      	uxtb	r0, r0
 801552c:	4770      	bx	lr
 801552e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015532:	2b05      	cmp	r3, #5
 8015534:	d801      	bhi.n	801553a <__hexdig_fun+0x1a>
 8015536:	3847      	subs	r0, #71	; 0x47
 8015538:	e7f7      	b.n	801552a <__hexdig_fun+0xa>
 801553a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801553e:	2b05      	cmp	r3, #5
 8015540:	d801      	bhi.n	8015546 <__hexdig_fun+0x26>
 8015542:	3827      	subs	r0, #39	; 0x27
 8015544:	e7f1      	b.n	801552a <__hexdig_fun+0xa>
 8015546:	2000      	movs	r0, #0
 8015548:	4770      	bx	lr

0801554a <__gethex>:
 801554a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801554e:	b08b      	sub	sp, #44	; 0x2c
 8015550:	468a      	mov	sl, r1
 8015552:	9002      	str	r0, [sp, #8]
 8015554:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015556:	9306      	str	r3, [sp, #24]
 8015558:	4690      	mov	r8, r2
 801555a:	f000 fadf 	bl	8015b1c <__localeconv_l>
 801555e:	6803      	ldr	r3, [r0, #0]
 8015560:	9303      	str	r3, [sp, #12]
 8015562:	4618      	mov	r0, r3
 8015564:	f7ea fe4c 	bl	8000200 <strlen>
 8015568:	9b03      	ldr	r3, [sp, #12]
 801556a:	9001      	str	r0, [sp, #4]
 801556c:	4403      	add	r3, r0
 801556e:	f04f 0b00 	mov.w	fp, #0
 8015572:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015576:	9307      	str	r3, [sp, #28]
 8015578:	f8da 3000 	ldr.w	r3, [sl]
 801557c:	3302      	adds	r3, #2
 801557e:	461f      	mov	r7, r3
 8015580:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015584:	2830      	cmp	r0, #48	; 0x30
 8015586:	d06c      	beq.n	8015662 <__gethex+0x118>
 8015588:	f7ff ffca 	bl	8015520 <__hexdig_fun>
 801558c:	4604      	mov	r4, r0
 801558e:	2800      	cmp	r0, #0
 8015590:	d16a      	bne.n	8015668 <__gethex+0x11e>
 8015592:	9a01      	ldr	r2, [sp, #4]
 8015594:	9903      	ldr	r1, [sp, #12]
 8015596:	4638      	mov	r0, r7
 8015598:	f001 fdfe 	bl	8017198 <strncmp>
 801559c:	2800      	cmp	r0, #0
 801559e:	d166      	bne.n	801566e <__gethex+0x124>
 80155a0:	9b01      	ldr	r3, [sp, #4]
 80155a2:	5cf8      	ldrb	r0, [r7, r3]
 80155a4:	18fe      	adds	r6, r7, r3
 80155a6:	f7ff ffbb 	bl	8015520 <__hexdig_fun>
 80155aa:	2800      	cmp	r0, #0
 80155ac:	d062      	beq.n	8015674 <__gethex+0x12a>
 80155ae:	4633      	mov	r3, r6
 80155b0:	7818      	ldrb	r0, [r3, #0]
 80155b2:	2830      	cmp	r0, #48	; 0x30
 80155b4:	461f      	mov	r7, r3
 80155b6:	f103 0301 	add.w	r3, r3, #1
 80155ba:	d0f9      	beq.n	80155b0 <__gethex+0x66>
 80155bc:	f7ff ffb0 	bl	8015520 <__hexdig_fun>
 80155c0:	fab0 f580 	clz	r5, r0
 80155c4:	096d      	lsrs	r5, r5, #5
 80155c6:	4634      	mov	r4, r6
 80155c8:	f04f 0b01 	mov.w	fp, #1
 80155cc:	463a      	mov	r2, r7
 80155ce:	4616      	mov	r6, r2
 80155d0:	3201      	adds	r2, #1
 80155d2:	7830      	ldrb	r0, [r6, #0]
 80155d4:	f7ff ffa4 	bl	8015520 <__hexdig_fun>
 80155d8:	2800      	cmp	r0, #0
 80155da:	d1f8      	bne.n	80155ce <__gethex+0x84>
 80155dc:	9a01      	ldr	r2, [sp, #4]
 80155de:	9903      	ldr	r1, [sp, #12]
 80155e0:	4630      	mov	r0, r6
 80155e2:	f001 fdd9 	bl	8017198 <strncmp>
 80155e6:	b950      	cbnz	r0, 80155fe <__gethex+0xb4>
 80155e8:	b954      	cbnz	r4, 8015600 <__gethex+0xb6>
 80155ea:	9b01      	ldr	r3, [sp, #4]
 80155ec:	18f4      	adds	r4, r6, r3
 80155ee:	4622      	mov	r2, r4
 80155f0:	4616      	mov	r6, r2
 80155f2:	3201      	adds	r2, #1
 80155f4:	7830      	ldrb	r0, [r6, #0]
 80155f6:	f7ff ff93 	bl	8015520 <__hexdig_fun>
 80155fa:	2800      	cmp	r0, #0
 80155fc:	d1f8      	bne.n	80155f0 <__gethex+0xa6>
 80155fe:	b10c      	cbz	r4, 8015604 <__gethex+0xba>
 8015600:	1ba4      	subs	r4, r4, r6
 8015602:	00a4      	lsls	r4, r4, #2
 8015604:	7833      	ldrb	r3, [r6, #0]
 8015606:	2b50      	cmp	r3, #80	; 0x50
 8015608:	d001      	beq.n	801560e <__gethex+0xc4>
 801560a:	2b70      	cmp	r3, #112	; 0x70
 801560c:	d140      	bne.n	8015690 <__gethex+0x146>
 801560e:	7873      	ldrb	r3, [r6, #1]
 8015610:	2b2b      	cmp	r3, #43	; 0x2b
 8015612:	d031      	beq.n	8015678 <__gethex+0x12e>
 8015614:	2b2d      	cmp	r3, #45	; 0x2d
 8015616:	d033      	beq.n	8015680 <__gethex+0x136>
 8015618:	1c71      	adds	r1, r6, #1
 801561a:	f04f 0900 	mov.w	r9, #0
 801561e:	7808      	ldrb	r0, [r1, #0]
 8015620:	f7ff ff7e 	bl	8015520 <__hexdig_fun>
 8015624:	1e43      	subs	r3, r0, #1
 8015626:	b2db      	uxtb	r3, r3
 8015628:	2b18      	cmp	r3, #24
 801562a:	d831      	bhi.n	8015690 <__gethex+0x146>
 801562c:	f1a0 0210 	sub.w	r2, r0, #16
 8015630:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015634:	f7ff ff74 	bl	8015520 <__hexdig_fun>
 8015638:	1e43      	subs	r3, r0, #1
 801563a:	b2db      	uxtb	r3, r3
 801563c:	2b18      	cmp	r3, #24
 801563e:	d922      	bls.n	8015686 <__gethex+0x13c>
 8015640:	f1b9 0f00 	cmp.w	r9, #0
 8015644:	d000      	beq.n	8015648 <__gethex+0xfe>
 8015646:	4252      	negs	r2, r2
 8015648:	4414      	add	r4, r2
 801564a:	f8ca 1000 	str.w	r1, [sl]
 801564e:	b30d      	cbz	r5, 8015694 <__gethex+0x14a>
 8015650:	f1bb 0f00 	cmp.w	fp, #0
 8015654:	bf0c      	ite	eq
 8015656:	2706      	moveq	r7, #6
 8015658:	2700      	movne	r7, #0
 801565a:	4638      	mov	r0, r7
 801565c:	b00b      	add	sp, #44	; 0x2c
 801565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015662:	f10b 0b01 	add.w	fp, fp, #1
 8015666:	e78a      	b.n	801557e <__gethex+0x34>
 8015668:	2500      	movs	r5, #0
 801566a:	462c      	mov	r4, r5
 801566c:	e7ae      	b.n	80155cc <__gethex+0x82>
 801566e:	463e      	mov	r6, r7
 8015670:	2501      	movs	r5, #1
 8015672:	e7c7      	b.n	8015604 <__gethex+0xba>
 8015674:	4604      	mov	r4, r0
 8015676:	e7fb      	b.n	8015670 <__gethex+0x126>
 8015678:	f04f 0900 	mov.w	r9, #0
 801567c:	1cb1      	adds	r1, r6, #2
 801567e:	e7ce      	b.n	801561e <__gethex+0xd4>
 8015680:	f04f 0901 	mov.w	r9, #1
 8015684:	e7fa      	b.n	801567c <__gethex+0x132>
 8015686:	230a      	movs	r3, #10
 8015688:	fb03 0202 	mla	r2, r3, r2, r0
 801568c:	3a10      	subs	r2, #16
 801568e:	e7cf      	b.n	8015630 <__gethex+0xe6>
 8015690:	4631      	mov	r1, r6
 8015692:	e7da      	b.n	801564a <__gethex+0x100>
 8015694:	1bf3      	subs	r3, r6, r7
 8015696:	3b01      	subs	r3, #1
 8015698:	4629      	mov	r1, r5
 801569a:	2b07      	cmp	r3, #7
 801569c:	dc49      	bgt.n	8015732 <__gethex+0x1e8>
 801569e:	9802      	ldr	r0, [sp, #8]
 80156a0:	f000 fadc 	bl	8015c5c <_Balloc>
 80156a4:	9b01      	ldr	r3, [sp, #4]
 80156a6:	f100 0914 	add.w	r9, r0, #20
 80156aa:	f04f 0b00 	mov.w	fp, #0
 80156ae:	f1c3 0301 	rsb	r3, r3, #1
 80156b2:	4605      	mov	r5, r0
 80156b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80156b8:	46da      	mov	sl, fp
 80156ba:	9308      	str	r3, [sp, #32]
 80156bc:	42b7      	cmp	r7, r6
 80156be:	d33b      	bcc.n	8015738 <__gethex+0x1ee>
 80156c0:	9804      	ldr	r0, [sp, #16]
 80156c2:	f840 ab04 	str.w	sl, [r0], #4
 80156c6:	eba0 0009 	sub.w	r0, r0, r9
 80156ca:	1080      	asrs	r0, r0, #2
 80156cc:	6128      	str	r0, [r5, #16]
 80156ce:	0147      	lsls	r7, r0, #5
 80156d0:	4650      	mov	r0, sl
 80156d2:	f000 fb87 	bl	8015de4 <__hi0bits>
 80156d6:	f8d8 6000 	ldr.w	r6, [r8]
 80156da:	1a3f      	subs	r7, r7, r0
 80156dc:	42b7      	cmp	r7, r6
 80156de:	dd64      	ble.n	80157aa <__gethex+0x260>
 80156e0:	1bbf      	subs	r7, r7, r6
 80156e2:	4639      	mov	r1, r7
 80156e4:	4628      	mov	r0, r5
 80156e6:	f000 fe97 	bl	8016418 <__any_on>
 80156ea:	4682      	mov	sl, r0
 80156ec:	b178      	cbz	r0, 801570e <__gethex+0x1c4>
 80156ee:	1e7b      	subs	r3, r7, #1
 80156f0:	1159      	asrs	r1, r3, #5
 80156f2:	f003 021f 	and.w	r2, r3, #31
 80156f6:	f04f 0a01 	mov.w	sl, #1
 80156fa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80156fe:	fa0a f202 	lsl.w	r2, sl, r2
 8015702:	420a      	tst	r2, r1
 8015704:	d003      	beq.n	801570e <__gethex+0x1c4>
 8015706:	4553      	cmp	r3, sl
 8015708:	dc46      	bgt.n	8015798 <__gethex+0x24e>
 801570a:	f04f 0a02 	mov.w	sl, #2
 801570e:	4639      	mov	r1, r7
 8015710:	4628      	mov	r0, r5
 8015712:	f7ff fecb 	bl	80154ac <rshift>
 8015716:	443c      	add	r4, r7
 8015718:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801571c:	42a3      	cmp	r3, r4
 801571e:	da52      	bge.n	80157c6 <__gethex+0x27c>
 8015720:	4629      	mov	r1, r5
 8015722:	9802      	ldr	r0, [sp, #8]
 8015724:	f000 face 	bl	8015cc4 <_Bfree>
 8015728:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801572a:	2300      	movs	r3, #0
 801572c:	6013      	str	r3, [r2, #0]
 801572e:	27a3      	movs	r7, #163	; 0xa3
 8015730:	e793      	b.n	801565a <__gethex+0x110>
 8015732:	3101      	adds	r1, #1
 8015734:	105b      	asrs	r3, r3, #1
 8015736:	e7b0      	b.n	801569a <__gethex+0x150>
 8015738:	1e73      	subs	r3, r6, #1
 801573a:	9305      	str	r3, [sp, #20]
 801573c:	9a07      	ldr	r2, [sp, #28]
 801573e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015742:	4293      	cmp	r3, r2
 8015744:	d018      	beq.n	8015778 <__gethex+0x22e>
 8015746:	f1bb 0f20 	cmp.w	fp, #32
 801574a:	d107      	bne.n	801575c <__gethex+0x212>
 801574c:	9b04      	ldr	r3, [sp, #16]
 801574e:	f8c3 a000 	str.w	sl, [r3]
 8015752:	3304      	adds	r3, #4
 8015754:	f04f 0a00 	mov.w	sl, #0
 8015758:	9304      	str	r3, [sp, #16]
 801575a:	46d3      	mov	fp, sl
 801575c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015760:	f7ff fede 	bl	8015520 <__hexdig_fun>
 8015764:	f000 000f 	and.w	r0, r0, #15
 8015768:	fa00 f00b 	lsl.w	r0, r0, fp
 801576c:	ea4a 0a00 	orr.w	sl, sl, r0
 8015770:	f10b 0b04 	add.w	fp, fp, #4
 8015774:	9b05      	ldr	r3, [sp, #20]
 8015776:	e00d      	b.n	8015794 <__gethex+0x24a>
 8015778:	9b05      	ldr	r3, [sp, #20]
 801577a:	9a08      	ldr	r2, [sp, #32]
 801577c:	4413      	add	r3, r2
 801577e:	42bb      	cmp	r3, r7
 8015780:	d3e1      	bcc.n	8015746 <__gethex+0x1fc>
 8015782:	4618      	mov	r0, r3
 8015784:	9a01      	ldr	r2, [sp, #4]
 8015786:	9903      	ldr	r1, [sp, #12]
 8015788:	9309      	str	r3, [sp, #36]	; 0x24
 801578a:	f001 fd05 	bl	8017198 <strncmp>
 801578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015790:	2800      	cmp	r0, #0
 8015792:	d1d8      	bne.n	8015746 <__gethex+0x1fc>
 8015794:	461e      	mov	r6, r3
 8015796:	e791      	b.n	80156bc <__gethex+0x172>
 8015798:	1eb9      	subs	r1, r7, #2
 801579a:	4628      	mov	r0, r5
 801579c:	f000 fe3c 	bl	8016418 <__any_on>
 80157a0:	2800      	cmp	r0, #0
 80157a2:	d0b2      	beq.n	801570a <__gethex+0x1c0>
 80157a4:	f04f 0a03 	mov.w	sl, #3
 80157a8:	e7b1      	b.n	801570e <__gethex+0x1c4>
 80157aa:	da09      	bge.n	80157c0 <__gethex+0x276>
 80157ac:	1bf7      	subs	r7, r6, r7
 80157ae:	4629      	mov	r1, r5
 80157b0:	463a      	mov	r2, r7
 80157b2:	9802      	ldr	r0, [sp, #8]
 80157b4:	f000 fc52 	bl	801605c <__lshift>
 80157b8:	1be4      	subs	r4, r4, r7
 80157ba:	4605      	mov	r5, r0
 80157bc:	f100 0914 	add.w	r9, r0, #20
 80157c0:	f04f 0a00 	mov.w	sl, #0
 80157c4:	e7a8      	b.n	8015718 <__gethex+0x1ce>
 80157c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80157ca:	42a0      	cmp	r0, r4
 80157cc:	dd6a      	ble.n	80158a4 <__gethex+0x35a>
 80157ce:	1b04      	subs	r4, r0, r4
 80157d0:	42a6      	cmp	r6, r4
 80157d2:	dc2e      	bgt.n	8015832 <__gethex+0x2e8>
 80157d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80157d8:	2b02      	cmp	r3, #2
 80157da:	d022      	beq.n	8015822 <__gethex+0x2d8>
 80157dc:	2b03      	cmp	r3, #3
 80157de:	d024      	beq.n	801582a <__gethex+0x2e0>
 80157e0:	2b01      	cmp	r3, #1
 80157e2:	d115      	bne.n	8015810 <__gethex+0x2c6>
 80157e4:	42a6      	cmp	r6, r4
 80157e6:	d113      	bne.n	8015810 <__gethex+0x2c6>
 80157e8:	2e01      	cmp	r6, #1
 80157ea:	dc0b      	bgt.n	8015804 <__gethex+0x2ba>
 80157ec:	9a06      	ldr	r2, [sp, #24]
 80157ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80157f2:	6013      	str	r3, [r2, #0]
 80157f4:	2301      	movs	r3, #1
 80157f6:	612b      	str	r3, [r5, #16]
 80157f8:	f8c9 3000 	str.w	r3, [r9]
 80157fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80157fe:	2762      	movs	r7, #98	; 0x62
 8015800:	601d      	str	r5, [r3, #0]
 8015802:	e72a      	b.n	801565a <__gethex+0x110>
 8015804:	1e71      	subs	r1, r6, #1
 8015806:	4628      	mov	r0, r5
 8015808:	f000 fe06 	bl	8016418 <__any_on>
 801580c:	2800      	cmp	r0, #0
 801580e:	d1ed      	bne.n	80157ec <__gethex+0x2a2>
 8015810:	4629      	mov	r1, r5
 8015812:	9802      	ldr	r0, [sp, #8]
 8015814:	f000 fa56 	bl	8015cc4 <_Bfree>
 8015818:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801581a:	2300      	movs	r3, #0
 801581c:	6013      	str	r3, [r2, #0]
 801581e:	2750      	movs	r7, #80	; 0x50
 8015820:	e71b      	b.n	801565a <__gethex+0x110>
 8015822:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015824:	2b00      	cmp	r3, #0
 8015826:	d0e1      	beq.n	80157ec <__gethex+0x2a2>
 8015828:	e7f2      	b.n	8015810 <__gethex+0x2c6>
 801582a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801582c:	2b00      	cmp	r3, #0
 801582e:	d1dd      	bne.n	80157ec <__gethex+0x2a2>
 8015830:	e7ee      	b.n	8015810 <__gethex+0x2c6>
 8015832:	1e67      	subs	r7, r4, #1
 8015834:	f1ba 0f00 	cmp.w	sl, #0
 8015838:	d131      	bne.n	801589e <__gethex+0x354>
 801583a:	b127      	cbz	r7, 8015846 <__gethex+0x2fc>
 801583c:	4639      	mov	r1, r7
 801583e:	4628      	mov	r0, r5
 8015840:	f000 fdea 	bl	8016418 <__any_on>
 8015844:	4682      	mov	sl, r0
 8015846:	117a      	asrs	r2, r7, #5
 8015848:	2301      	movs	r3, #1
 801584a:	f007 071f 	and.w	r7, r7, #31
 801584e:	fa03 f707 	lsl.w	r7, r3, r7
 8015852:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015856:	4621      	mov	r1, r4
 8015858:	421f      	tst	r7, r3
 801585a:	4628      	mov	r0, r5
 801585c:	bf18      	it	ne
 801585e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015862:	1b36      	subs	r6, r6, r4
 8015864:	f7ff fe22 	bl	80154ac <rshift>
 8015868:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801586c:	2702      	movs	r7, #2
 801586e:	f1ba 0f00 	cmp.w	sl, #0
 8015872:	d048      	beq.n	8015906 <__gethex+0x3bc>
 8015874:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015878:	2b02      	cmp	r3, #2
 801587a:	d015      	beq.n	80158a8 <__gethex+0x35e>
 801587c:	2b03      	cmp	r3, #3
 801587e:	d017      	beq.n	80158b0 <__gethex+0x366>
 8015880:	2b01      	cmp	r3, #1
 8015882:	d109      	bne.n	8015898 <__gethex+0x34e>
 8015884:	f01a 0f02 	tst.w	sl, #2
 8015888:	d006      	beq.n	8015898 <__gethex+0x34e>
 801588a:	f8d9 3000 	ldr.w	r3, [r9]
 801588e:	ea4a 0a03 	orr.w	sl, sl, r3
 8015892:	f01a 0f01 	tst.w	sl, #1
 8015896:	d10e      	bne.n	80158b6 <__gethex+0x36c>
 8015898:	f047 0710 	orr.w	r7, r7, #16
 801589c:	e033      	b.n	8015906 <__gethex+0x3bc>
 801589e:	f04f 0a01 	mov.w	sl, #1
 80158a2:	e7d0      	b.n	8015846 <__gethex+0x2fc>
 80158a4:	2701      	movs	r7, #1
 80158a6:	e7e2      	b.n	801586e <__gethex+0x324>
 80158a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158aa:	f1c3 0301 	rsb	r3, r3, #1
 80158ae:	9315      	str	r3, [sp, #84]	; 0x54
 80158b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d0f0      	beq.n	8015898 <__gethex+0x34e>
 80158b6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80158ba:	f105 0314 	add.w	r3, r5, #20
 80158be:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80158c2:	eb03 010a 	add.w	r1, r3, sl
 80158c6:	f04f 0c00 	mov.w	ip, #0
 80158ca:	4618      	mov	r0, r3
 80158cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80158d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80158d4:	d01c      	beq.n	8015910 <__gethex+0x3c6>
 80158d6:	3201      	adds	r2, #1
 80158d8:	6002      	str	r2, [r0, #0]
 80158da:	2f02      	cmp	r7, #2
 80158dc:	f105 0314 	add.w	r3, r5, #20
 80158e0:	d138      	bne.n	8015954 <__gethex+0x40a>
 80158e2:	f8d8 2000 	ldr.w	r2, [r8]
 80158e6:	3a01      	subs	r2, #1
 80158e8:	42b2      	cmp	r2, r6
 80158ea:	d10a      	bne.n	8015902 <__gethex+0x3b8>
 80158ec:	1171      	asrs	r1, r6, #5
 80158ee:	2201      	movs	r2, #1
 80158f0:	f006 061f 	and.w	r6, r6, #31
 80158f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80158f8:	fa02 f606 	lsl.w	r6, r2, r6
 80158fc:	421e      	tst	r6, r3
 80158fe:	bf18      	it	ne
 8015900:	4617      	movne	r7, r2
 8015902:	f047 0720 	orr.w	r7, r7, #32
 8015906:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015908:	601d      	str	r5, [r3, #0]
 801590a:	9b06      	ldr	r3, [sp, #24]
 801590c:	601c      	str	r4, [r3, #0]
 801590e:	e6a4      	b.n	801565a <__gethex+0x110>
 8015910:	4299      	cmp	r1, r3
 8015912:	f843 cc04 	str.w	ip, [r3, #-4]
 8015916:	d8d8      	bhi.n	80158ca <__gethex+0x380>
 8015918:	68ab      	ldr	r3, [r5, #8]
 801591a:	4599      	cmp	r9, r3
 801591c:	db12      	blt.n	8015944 <__gethex+0x3fa>
 801591e:	6869      	ldr	r1, [r5, #4]
 8015920:	9802      	ldr	r0, [sp, #8]
 8015922:	3101      	adds	r1, #1
 8015924:	f000 f99a 	bl	8015c5c <_Balloc>
 8015928:	692a      	ldr	r2, [r5, #16]
 801592a:	3202      	adds	r2, #2
 801592c:	f105 010c 	add.w	r1, r5, #12
 8015930:	4683      	mov	fp, r0
 8015932:	0092      	lsls	r2, r2, #2
 8015934:	300c      	adds	r0, #12
 8015936:	f7fc feab 	bl	8012690 <memcpy>
 801593a:	4629      	mov	r1, r5
 801593c:	9802      	ldr	r0, [sp, #8]
 801593e:	f000 f9c1 	bl	8015cc4 <_Bfree>
 8015942:	465d      	mov	r5, fp
 8015944:	692b      	ldr	r3, [r5, #16]
 8015946:	1c5a      	adds	r2, r3, #1
 8015948:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801594c:	612a      	str	r2, [r5, #16]
 801594e:	2201      	movs	r2, #1
 8015950:	615a      	str	r2, [r3, #20]
 8015952:	e7c2      	b.n	80158da <__gethex+0x390>
 8015954:	692a      	ldr	r2, [r5, #16]
 8015956:	454a      	cmp	r2, r9
 8015958:	dd0b      	ble.n	8015972 <__gethex+0x428>
 801595a:	2101      	movs	r1, #1
 801595c:	4628      	mov	r0, r5
 801595e:	f7ff fda5 	bl	80154ac <rshift>
 8015962:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015966:	3401      	adds	r4, #1
 8015968:	42a3      	cmp	r3, r4
 801596a:	f6ff aed9 	blt.w	8015720 <__gethex+0x1d6>
 801596e:	2701      	movs	r7, #1
 8015970:	e7c7      	b.n	8015902 <__gethex+0x3b8>
 8015972:	f016 061f 	ands.w	r6, r6, #31
 8015976:	d0fa      	beq.n	801596e <__gethex+0x424>
 8015978:	449a      	add	sl, r3
 801597a:	f1c6 0620 	rsb	r6, r6, #32
 801597e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015982:	f000 fa2f 	bl	8015de4 <__hi0bits>
 8015986:	42b0      	cmp	r0, r6
 8015988:	dbe7      	blt.n	801595a <__gethex+0x410>
 801598a:	e7f0      	b.n	801596e <__gethex+0x424>

0801598c <L_shift>:
 801598c:	f1c2 0208 	rsb	r2, r2, #8
 8015990:	0092      	lsls	r2, r2, #2
 8015992:	b570      	push	{r4, r5, r6, lr}
 8015994:	f1c2 0620 	rsb	r6, r2, #32
 8015998:	6843      	ldr	r3, [r0, #4]
 801599a:	6804      	ldr	r4, [r0, #0]
 801599c:	fa03 f506 	lsl.w	r5, r3, r6
 80159a0:	432c      	orrs	r4, r5
 80159a2:	40d3      	lsrs	r3, r2
 80159a4:	6004      	str	r4, [r0, #0]
 80159a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80159aa:	4288      	cmp	r0, r1
 80159ac:	d3f4      	bcc.n	8015998 <L_shift+0xc>
 80159ae:	bd70      	pop	{r4, r5, r6, pc}

080159b0 <__match>:
 80159b0:	b530      	push	{r4, r5, lr}
 80159b2:	6803      	ldr	r3, [r0, #0]
 80159b4:	3301      	adds	r3, #1
 80159b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80159ba:	b914      	cbnz	r4, 80159c2 <__match+0x12>
 80159bc:	6003      	str	r3, [r0, #0]
 80159be:	2001      	movs	r0, #1
 80159c0:	bd30      	pop	{r4, r5, pc}
 80159c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80159ca:	2d19      	cmp	r5, #25
 80159cc:	bf98      	it	ls
 80159ce:	3220      	addls	r2, #32
 80159d0:	42a2      	cmp	r2, r4
 80159d2:	d0f0      	beq.n	80159b6 <__match+0x6>
 80159d4:	2000      	movs	r0, #0
 80159d6:	e7f3      	b.n	80159c0 <__match+0x10>

080159d8 <__hexnan>:
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	680b      	ldr	r3, [r1, #0]
 80159de:	6801      	ldr	r1, [r0, #0]
 80159e0:	115f      	asrs	r7, r3, #5
 80159e2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80159e6:	f013 031f 	ands.w	r3, r3, #31
 80159ea:	b087      	sub	sp, #28
 80159ec:	bf18      	it	ne
 80159ee:	3704      	addne	r7, #4
 80159f0:	2500      	movs	r5, #0
 80159f2:	1f3e      	subs	r6, r7, #4
 80159f4:	4682      	mov	sl, r0
 80159f6:	4690      	mov	r8, r2
 80159f8:	9301      	str	r3, [sp, #4]
 80159fa:	f847 5c04 	str.w	r5, [r7, #-4]
 80159fe:	46b1      	mov	r9, r6
 8015a00:	4634      	mov	r4, r6
 8015a02:	9502      	str	r5, [sp, #8]
 8015a04:	46ab      	mov	fp, r5
 8015a06:	784a      	ldrb	r2, [r1, #1]
 8015a08:	1c4b      	adds	r3, r1, #1
 8015a0a:	9303      	str	r3, [sp, #12]
 8015a0c:	b342      	cbz	r2, 8015a60 <__hexnan+0x88>
 8015a0e:	4610      	mov	r0, r2
 8015a10:	9105      	str	r1, [sp, #20]
 8015a12:	9204      	str	r2, [sp, #16]
 8015a14:	f7ff fd84 	bl	8015520 <__hexdig_fun>
 8015a18:	2800      	cmp	r0, #0
 8015a1a:	d143      	bne.n	8015aa4 <__hexnan+0xcc>
 8015a1c:	9a04      	ldr	r2, [sp, #16]
 8015a1e:	9905      	ldr	r1, [sp, #20]
 8015a20:	2a20      	cmp	r2, #32
 8015a22:	d818      	bhi.n	8015a56 <__hexnan+0x7e>
 8015a24:	9b02      	ldr	r3, [sp, #8]
 8015a26:	459b      	cmp	fp, r3
 8015a28:	dd13      	ble.n	8015a52 <__hexnan+0x7a>
 8015a2a:	454c      	cmp	r4, r9
 8015a2c:	d206      	bcs.n	8015a3c <__hexnan+0x64>
 8015a2e:	2d07      	cmp	r5, #7
 8015a30:	dc04      	bgt.n	8015a3c <__hexnan+0x64>
 8015a32:	462a      	mov	r2, r5
 8015a34:	4649      	mov	r1, r9
 8015a36:	4620      	mov	r0, r4
 8015a38:	f7ff ffa8 	bl	801598c <L_shift>
 8015a3c:	4544      	cmp	r4, r8
 8015a3e:	d944      	bls.n	8015aca <__hexnan+0xf2>
 8015a40:	2300      	movs	r3, #0
 8015a42:	f1a4 0904 	sub.w	r9, r4, #4
 8015a46:	f844 3c04 	str.w	r3, [r4, #-4]
 8015a4a:	f8cd b008 	str.w	fp, [sp, #8]
 8015a4e:	464c      	mov	r4, r9
 8015a50:	461d      	mov	r5, r3
 8015a52:	9903      	ldr	r1, [sp, #12]
 8015a54:	e7d7      	b.n	8015a06 <__hexnan+0x2e>
 8015a56:	2a29      	cmp	r2, #41	; 0x29
 8015a58:	d14a      	bne.n	8015af0 <__hexnan+0x118>
 8015a5a:	3102      	adds	r1, #2
 8015a5c:	f8ca 1000 	str.w	r1, [sl]
 8015a60:	f1bb 0f00 	cmp.w	fp, #0
 8015a64:	d044      	beq.n	8015af0 <__hexnan+0x118>
 8015a66:	454c      	cmp	r4, r9
 8015a68:	d206      	bcs.n	8015a78 <__hexnan+0xa0>
 8015a6a:	2d07      	cmp	r5, #7
 8015a6c:	dc04      	bgt.n	8015a78 <__hexnan+0xa0>
 8015a6e:	462a      	mov	r2, r5
 8015a70:	4649      	mov	r1, r9
 8015a72:	4620      	mov	r0, r4
 8015a74:	f7ff ff8a 	bl	801598c <L_shift>
 8015a78:	4544      	cmp	r4, r8
 8015a7a:	d928      	bls.n	8015ace <__hexnan+0xf6>
 8015a7c:	4643      	mov	r3, r8
 8015a7e:	f854 2b04 	ldr.w	r2, [r4], #4
 8015a82:	f843 2b04 	str.w	r2, [r3], #4
 8015a86:	42a6      	cmp	r6, r4
 8015a88:	d2f9      	bcs.n	8015a7e <__hexnan+0xa6>
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	f843 2b04 	str.w	r2, [r3], #4
 8015a90:	429e      	cmp	r6, r3
 8015a92:	d2fb      	bcs.n	8015a8c <__hexnan+0xb4>
 8015a94:	6833      	ldr	r3, [r6, #0]
 8015a96:	b91b      	cbnz	r3, 8015aa0 <__hexnan+0xc8>
 8015a98:	4546      	cmp	r6, r8
 8015a9a:	d127      	bne.n	8015aec <__hexnan+0x114>
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	6033      	str	r3, [r6, #0]
 8015aa0:	2005      	movs	r0, #5
 8015aa2:	e026      	b.n	8015af2 <__hexnan+0x11a>
 8015aa4:	3501      	adds	r5, #1
 8015aa6:	2d08      	cmp	r5, #8
 8015aa8:	f10b 0b01 	add.w	fp, fp, #1
 8015aac:	dd06      	ble.n	8015abc <__hexnan+0xe4>
 8015aae:	4544      	cmp	r4, r8
 8015ab0:	d9cf      	bls.n	8015a52 <__hexnan+0x7a>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	f844 3c04 	str.w	r3, [r4, #-4]
 8015ab8:	2501      	movs	r5, #1
 8015aba:	3c04      	subs	r4, #4
 8015abc:	6822      	ldr	r2, [r4, #0]
 8015abe:	f000 000f 	and.w	r0, r0, #15
 8015ac2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015ac6:	6020      	str	r0, [r4, #0]
 8015ac8:	e7c3      	b.n	8015a52 <__hexnan+0x7a>
 8015aca:	2508      	movs	r5, #8
 8015acc:	e7c1      	b.n	8015a52 <__hexnan+0x7a>
 8015ace:	9b01      	ldr	r3, [sp, #4]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d0df      	beq.n	8015a94 <__hexnan+0xbc>
 8015ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ad8:	f1c3 0320 	rsb	r3, r3, #32
 8015adc:	fa22 f303 	lsr.w	r3, r2, r3
 8015ae0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015ae4:	401a      	ands	r2, r3
 8015ae6:	f847 2c04 	str.w	r2, [r7, #-4]
 8015aea:	e7d3      	b.n	8015a94 <__hexnan+0xbc>
 8015aec:	3e04      	subs	r6, #4
 8015aee:	e7d1      	b.n	8015a94 <__hexnan+0xbc>
 8015af0:	2004      	movs	r0, #4
 8015af2:	b007      	add	sp, #28
 8015af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015af8 <__locale_ctype_ptr_l>:
 8015af8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8015afc:	4770      	bx	lr
	...

08015b00 <__locale_ctype_ptr>:
 8015b00:	4b04      	ldr	r3, [pc, #16]	; (8015b14 <__locale_ctype_ptr+0x14>)
 8015b02:	4a05      	ldr	r2, [pc, #20]	; (8015b18 <__locale_ctype_ptr+0x18>)
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	6a1b      	ldr	r3, [r3, #32]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	bf08      	it	eq
 8015b0c:	4613      	moveq	r3, r2
 8015b0e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8015b12:	4770      	bx	lr
 8015b14:	2000000c 	.word	0x2000000c
 8015b18:	20000070 	.word	0x20000070

08015b1c <__localeconv_l>:
 8015b1c:	30f0      	adds	r0, #240	; 0xf0
 8015b1e:	4770      	bx	lr

08015b20 <_localeconv_r>:
 8015b20:	4b04      	ldr	r3, [pc, #16]	; (8015b34 <_localeconv_r+0x14>)
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	6a18      	ldr	r0, [r3, #32]
 8015b26:	4b04      	ldr	r3, [pc, #16]	; (8015b38 <_localeconv_r+0x18>)
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	bf08      	it	eq
 8015b2c:	4618      	moveq	r0, r3
 8015b2e:	30f0      	adds	r0, #240	; 0xf0
 8015b30:	4770      	bx	lr
 8015b32:	bf00      	nop
 8015b34:	2000000c 	.word	0x2000000c
 8015b38:	20000070 	.word	0x20000070

08015b3c <_lseek_r>:
 8015b3c:	b538      	push	{r3, r4, r5, lr}
 8015b3e:	4c07      	ldr	r4, [pc, #28]	; (8015b5c <_lseek_r+0x20>)
 8015b40:	4605      	mov	r5, r0
 8015b42:	4608      	mov	r0, r1
 8015b44:	4611      	mov	r1, r2
 8015b46:	2200      	movs	r2, #0
 8015b48:	6022      	str	r2, [r4, #0]
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	f7ef fc78 	bl	8005440 <_lseek>
 8015b50:	1c43      	adds	r3, r0, #1
 8015b52:	d102      	bne.n	8015b5a <_lseek_r+0x1e>
 8015b54:	6823      	ldr	r3, [r4, #0]
 8015b56:	b103      	cbz	r3, 8015b5a <_lseek_r+0x1e>
 8015b58:	602b      	str	r3, [r5, #0]
 8015b5a:	bd38      	pop	{r3, r4, r5, pc}
 8015b5c:	2002faac 	.word	0x2002faac

08015b60 <__swhatbuf_r>:
 8015b60:	b570      	push	{r4, r5, r6, lr}
 8015b62:	460e      	mov	r6, r1
 8015b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b68:	2900      	cmp	r1, #0
 8015b6a:	b096      	sub	sp, #88	; 0x58
 8015b6c:	4614      	mov	r4, r2
 8015b6e:	461d      	mov	r5, r3
 8015b70:	da07      	bge.n	8015b82 <__swhatbuf_r+0x22>
 8015b72:	2300      	movs	r3, #0
 8015b74:	602b      	str	r3, [r5, #0]
 8015b76:	89b3      	ldrh	r3, [r6, #12]
 8015b78:	061a      	lsls	r2, r3, #24
 8015b7a:	d410      	bmi.n	8015b9e <__swhatbuf_r+0x3e>
 8015b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015b80:	e00e      	b.n	8015ba0 <__swhatbuf_r+0x40>
 8015b82:	466a      	mov	r2, sp
 8015b84:	f001 fbee 	bl	8017364 <_fstat_r>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	dbf2      	blt.n	8015b72 <__swhatbuf_r+0x12>
 8015b8c:	9a01      	ldr	r2, [sp, #4]
 8015b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015b96:	425a      	negs	r2, r3
 8015b98:	415a      	adcs	r2, r3
 8015b9a:	602a      	str	r2, [r5, #0]
 8015b9c:	e7ee      	b.n	8015b7c <__swhatbuf_r+0x1c>
 8015b9e:	2340      	movs	r3, #64	; 0x40
 8015ba0:	2000      	movs	r0, #0
 8015ba2:	6023      	str	r3, [r4, #0]
 8015ba4:	b016      	add	sp, #88	; 0x58
 8015ba6:	bd70      	pop	{r4, r5, r6, pc}

08015ba8 <__smakebuf_r>:
 8015ba8:	898b      	ldrh	r3, [r1, #12]
 8015baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015bac:	079d      	lsls	r5, r3, #30
 8015bae:	4606      	mov	r6, r0
 8015bb0:	460c      	mov	r4, r1
 8015bb2:	d507      	bpl.n	8015bc4 <__smakebuf_r+0x1c>
 8015bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015bb8:	6023      	str	r3, [r4, #0]
 8015bba:	6123      	str	r3, [r4, #16]
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	6163      	str	r3, [r4, #20]
 8015bc0:	b002      	add	sp, #8
 8015bc2:	bd70      	pop	{r4, r5, r6, pc}
 8015bc4:	ab01      	add	r3, sp, #4
 8015bc6:	466a      	mov	r2, sp
 8015bc8:	f7ff ffca 	bl	8015b60 <__swhatbuf_r>
 8015bcc:	9900      	ldr	r1, [sp, #0]
 8015bce:	4605      	mov	r5, r0
 8015bd0:	4630      	mov	r0, r6
 8015bd2:	f000 fc9f 	bl	8016514 <_malloc_r>
 8015bd6:	b948      	cbnz	r0, 8015bec <__smakebuf_r+0x44>
 8015bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bdc:	059a      	lsls	r2, r3, #22
 8015bde:	d4ef      	bmi.n	8015bc0 <__smakebuf_r+0x18>
 8015be0:	f023 0303 	bic.w	r3, r3, #3
 8015be4:	f043 0302 	orr.w	r3, r3, #2
 8015be8:	81a3      	strh	r3, [r4, #12]
 8015bea:	e7e3      	b.n	8015bb4 <__smakebuf_r+0xc>
 8015bec:	4b0d      	ldr	r3, [pc, #52]	; (8015c24 <__smakebuf_r+0x7c>)
 8015bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8015bf0:	89a3      	ldrh	r3, [r4, #12]
 8015bf2:	6020      	str	r0, [r4, #0]
 8015bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015bf8:	81a3      	strh	r3, [r4, #12]
 8015bfa:	9b00      	ldr	r3, [sp, #0]
 8015bfc:	6163      	str	r3, [r4, #20]
 8015bfe:	9b01      	ldr	r3, [sp, #4]
 8015c00:	6120      	str	r0, [r4, #16]
 8015c02:	b15b      	cbz	r3, 8015c1c <__smakebuf_r+0x74>
 8015c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c08:	4630      	mov	r0, r6
 8015c0a:	f001 fbbd 	bl	8017388 <_isatty_r>
 8015c0e:	b128      	cbz	r0, 8015c1c <__smakebuf_r+0x74>
 8015c10:	89a3      	ldrh	r3, [r4, #12]
 8015c12:	f023 0303 	bic.w	r3, r3, #3
 8015c16:	f043 0301 	orr.w	r3, r3, #1
 8015c1a:	81a3      	strh	r3, [r4, #12]
 8015c1c:	89a3      	ldrh	r3, [r4, #12]
 8015c1e:	431d      	orrs	r5, r3
 8015c20:	81a5      	strh	r5, [r4, #12]
 8015c22:	e7cd      	b.n	8015bc0 <__smakebuf_r+0x18>
 8015c24:	08015361 	.word	0x08015361

08015c28 <malloc>:
 8015c28:	4b02      	ldr	r3, [pc, #8]	; (8015c34 <malloc+0xc>)
 8015c2a:	4601      	mov	r1, r0
 8015c2c:	6818      	ldr	r0, [r3, #0]
 8015c2e:	f000 bc71 	b.w	8016514 <_malloc_r>
 8015c32:	bf00      	nop
 8015c34:	2000000c 	.word	0x2000000c

08015c38 <__ascii_mbtowc>:
 8015c38:	b082      	sub	sp, #8
 8015c3a:	b901      	cbnz	r1, 8015c3e <__ascii_mbtowc+0x6>
 8015c3c:	a901      	add	r1, sp, #4
 8015c3e:	b142      	cbz	r2, 8015c52 <__ascii_mbtowc+0x1a>
 8015c40:	b14b      	cbz	r3, 8015c56 <__ascii_mbtowc+0x1e>
 8015c42:	7813      	ldrb	r3, [r2, #0]
 8015c44:	600b      	str	r3, [r1, #0]
 8015c46:	7812      	ldrb	r2, [r2, #0]
 8015c48:	1c10      	adds	r0, r2, #0
 8015c4a:	bf18      	it	ne
 8015c4c:	2001      	movne	r0, #1
 8015c4e:	b002      	add	sp, #8
 8015c50:	4770      	bx	lr
 8015c52:	4610      	mov	r0, r2
 8015c54:	e7fb      	b.n	8015c4e <__ascii_mbtowc+0x16>
 8015c56:	f06f 0001 	mvn.w	r0, #1
 8015c5a:	e7f8      	b.n	8015c4e <__ascii_mbtowc+0x16>

08015c5c <_Balloc>:
 8015c5c:	b570      	push	{r4, r5, r6, lr}
 8015c5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015c60:	4604      	mov	r4, r0
 8015c62:	460e      	mov	r6, r1
 8015c64:	b93d      	cbnz	r5, 8015c76 <_Balloc+0x1a>
 8015c66:	2010      	movs	r0, #16
 8015c68:	f7ff ffde 	bl	8015c28 <malloc>
 8015c6c:	6260      	str	r0, [r4, #36]	; 0x24
 8015c6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015c72:	6005      	str	r5, [r0, #0]
 8015c74:	60c5      	str	r5, [r0, #12]
 8015c76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015c78:	68eb      	ldr	r3, [r5, #12]
 8015c7a:	b183      	cbz	r3, 8015c9e <_Balloc+0x42>
 8015c7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015c7e:	68db      	ldr	r3, [r3, #12]
 8015c80:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015c84:	b9b8      	cbnz	r0, 8015cb6 <_Balloc+0x5a>
 8015c86:	2101      	movs	r1, #1
 8015c88:	fa01 f506 	lsl.w	r5, r1, r6
 8015c8c:	1d6a      	adds	r2, r5, #5
 8015c8e:	0092      	lsls	r2, r2, #2
 8015c90:	4620      	mov	r0, r4
 8015c92:	f000 fbe2 	bl	801645a <_calloc_r>
 8015c96:	b160      	cbz	r0, 8015cb2 <_Balloc+0x56>
 8015c98:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015c9c:	e00e      	b.n	8015cbc <_Balloc+0x60>
 8015c9e:	2221      	movs	r2, #33	; 0x21
 8015ca0:	2104      	movs	r1, #4
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	f000 fbd9 	bl	801645a <_calloc_r>
 8015ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015caa:	60e8      	str	r0, [r5, #12]
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d1e4      	bne.n	8015c7c <_Balloc+0x20>
 8015cb2:	2000      	movs	r0, #0
 8015cb4:	bd70      	pop	{r4, r5, r6, pc}
 8015cb6:	6802      	ldr	r2, [r0, #0]
 8015cb8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015cbc:	2300      	movs	r3, #0
 8015cbe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015cc2:	e7f7      	b.n	8015cb4 <_Balloc+0x58>

08015cc4 <_Bfree>:
 8015cc4:	b570      	push	{r4, r5, r6, lr}
 8015cc6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015cc8:	4606      	mov	r6, r0
 8015cca:	460d      	mov	r5, r1
 8015ccc:	b93c      	cbnz	r4, 8015cde <_Bfree+0x1a>
 8015cce:	2010      	movs	r0, #16
 8015cd0:	f7ff ffaa 	bl	8015c28 <malloc>
 8015cd4:	6270      	str	r0, [r6, #36]	; 0x24
 8015cd6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cda:	6004      	str	r4, [r0, #0]
 8015cdc:	60c4      	str	r4, [r0, #12]
 8015cde:	b13d      	cbz	r5, 8015cf0 <_Bfree+0x2c>
 8015ce0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015ce2:	686a      	ldr	r2, [r5, #4]
 8015ce4:	68db      	ldr	r3, [r3, #12]
 8015ce6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015cea:	6029      	str	r1, [r5, #0]
 8015cec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015cf0:	bd70      	pop	{r4, r5, r6, pc}

08015cf2 <__multadd>:
 8015cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015cf6:	690d      	ldr	r5, [r1, #16]
 8015cf8:	461f      	mov	r7, r3
 8015cfa:	4606      	mov	r6, r0
 8015cfc:	460c      	mov	r4, r1
 8015cfe:	f101 0c14 	add.w	ip, r1, #20
 8015d02:	2300      	movs	r3, #0
 8015d04:	f8dc 0000 	ldr.w	r0, [ip]
 8015d08:	b281      	uxth	r1, r0
 8015d0a:	fb02 7101 	mla	r1, r2, r1, r7
 8015d0e:	0c0f      	lsrs	r7, r1, #16
 8015d10:	0c00      	lsrs	r0, r0, #16
 8015d12:	fb02 7000 	mla	r0, r2, r0, r7
 8015d16:	b289      	uxth	r1, r1
 8015d18:	3301      	adds	r3, #1
 8015d1a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015d1e:	429d      	cmp	r5, r3
 8015d20:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015d24:	f84c 1b04 	str.w	r1, [ip], #4
 8015d28:	dcec      	bgt.n	8015d04 <__multadd+0x12>
 8015d2a:	b1d7      	cbz	r7, 8015d62 <__multadd+0x70>
 8015d2c:	68a3      	ldr	r3, [r4, #8]
 8015d2e:	42ab      	cmp	r3, r5
 8015d30:	dc12      	bgt.n	8015d58 <__multadd+0x66>
 8015d32:	6861      	ldr	r1, [r4, #4]
 8015d34:	4630      	mov	r0, r6
 8015d36:	3101      	adds	r1, #1
 8015d38:	f7ff ff90 	bl	8015c5c <_Balloc>
 8015d3c:	6922      	ldr	r2, [r4, #16]
 8015d3e:	3202      	adds	r2, #2
 8015d40:	f104 010c 	add.w	r1, r4, #12
 8015d44:	4680      	mov	r8, r0
 8015d46:	0092      	lsls	r2, r2, #2
 8015d48:	300c      	adds	r0, #12
 8015d4a:	f7fc fca1 	bl	8012690 <memcpy>
 8015d4e:	4621      	mov	r1, r4
 8015d50:	4630      	mov	r0, r6
 8015d52:	f7ff ffb7 	bl	8015cc4 <_Bfree>
 8015d56:	4644      	mov	r4, r8
 8015d58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015d5c:	3501      	adds	r5, #1
 8015d5e:	615f      	str	r7, [r3, #20]
 8015d60:	6125      	str	r5, [r4, #16]
 8015d62:	4620      	mov	r0, r4
 8015d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015d68 <__s2b>:
 8015d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d6c:	460c      	mov	r4, r1
 8015d6e:	4615      	mov	r5, r2
 8015d70:	461f      	mov	r7, r3
 8015d72:	2209      	movs	r2, #9
 8015d74:	3308      	adds	r3, #8
 8015d76:	4606      	mov	r6, r0
 8015d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	2201      	movs	r2, #1
 8015d80:	429a      	cmp	r2, r3
 8015d82:	db20      	blt.n	8015dc6 <__s2b+0x5e>
 8015d84:	4630      	mov	r0, r6
 8015d86:	f7ff ff69 	bl	8015c5c <_Balloc>
 8015d8a:	9b08      	ldr	r3, [sp, #32]
 8015d8c:	6143      	str	r3, [r0, #20]
 8015d8e:	2d09      	cmp	r5, #9
 8015d90:	f04f 0301 	mov.w	r3, #1
 8015d94:	6103      	str	r3, [r0, #16]
 8015d96:	dd19      	ble.n	8015dcc <__s2b+0x64>
 8015d98:	f104 0809 	add.w	r8, r4, #9
 8015d9c:	46c1      	mov	r9, r8
 8015d9e:	442c      	add	r4, r5
 8015da0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8015da4:	4601      	mov	r1, r0
 8015da6:	3b30      	subs	r3, #48	; 0x30
 8015da8:	220a      	movs	r2, #10
 8015daa:	4630      	mov	r0, r6
 8015dac:	f7ff ffa1 	bl	8015cf2 <__multadd>
 8015db0:	45a1      	cmp	r9, r4
 8015db2:	d1f5      	bne.n	8015da0 <__s2b+0x38>
 8015db4:	eb08 0405 	add.w	r4, r8, r5
 8015db8:	3c08      	subs	r4, #8
 8015dba:	1b2d      	subs	r5, r5, r4
 8015dbc:	1963      	adds	r3, r4, r5
 8015dbe:	42bb      	cmp	r3, r7
 8015dc0:	db07      	blt.n	8015dd2 <__s2b+0x6a>
 8015dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dc6:	0052      	lsls	r2, r2, #1
 8015dc8:	3101      	adds	r1, #1
 8015dca:	e7d9      	b.n	8015d80 <__s2b+0x18>
 8015dcc:	340a      	adds	r4, #10
 8015dce:	2509      	movs	r5, #9
 8015dd0:	e7f3      	b.n	8015dba <__s2b+0x52>
 8015dd2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015dd6:	4601      	mov	r1, r0
 8015dd8:	3b30      	subs	r3, #48	; 0x30
 8015dda:	220a      	movs	r2, #10
 8015ddc:	4630      	mov	r0, r6
 8015dde:	f7ff ff88 	bl	8015cf2 <__multadd>
 8015de2:	e7eb      	b.n	8015dbc <__s2b+0x54>

08015de4 <__hi0bits>:
 8015de4:	0c02      	lsrs	r2, r0, #16
 8015de6:	0412      	lsls	r2, r2, #16
 8015de8:	4603      	mov	r3, r0
 8015dea:	b9b2      	cbnz	r2, 8015e1a <__hi0bits+0x36>
 8015dec:	0403      	lsls	r3, r0, #16
 8015dee:	2010      	movs	r0, #16
 8015df0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015df4:	bf04      	itt	eq
 8015df6:	021b      	lsleq	r3, r3, #8
 8015df8:	3008      	addeq	r0, #8
 8015dfa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015dfe:	bf04      	itt	eq
 8015e00:	011b      	lsleq	r3, r3, #4
 8015e02:	3004      	addeq	r0, #4
 8015e04:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015e08:	bf04      	itt	eq
 8015e0a:	009b      	lsleq	r3, r3, #2
 8015e0c:	3002      	addeq	r0, #2
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	db06      	blt.n	8015e20 <__hi0bits+0x3c>
 8015e12:	005b      	lsls	r3, r3, #1
 8015e14:	d503      	bpl.n	8015e1e <__hi0bits+0x3a>
 8015e16:	3001      	adds	r0, #1
 8015e18:	4770      	bx	lr
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	e7e8      	b.n	8015df0 <__hi0bits+0xc>
 8015e1e:	2020      	movs	r0, #32
 8015e20:	4770      	bx	lr

08015e22 <__lo0bits>:
 8015e22:	6803      	ldr	r3, [r0, #0]
 8015e24:	f013 0207 	ands.w	r2, r3, #7
 8015e28:	4601      	mov	r1, r0
 8015e2a:	d00b      	beq.n	8015e44 <__lo0bits+0x22>
 8015e2c:	07da      	lsls	r2, r3, #31
 8015e2e:	d423      	bmi.n	8015e78 <__lo0bits+0x56>
 8015e30:	0798      	lsls	r0, r3, #30
 8015e32:	bf49      	itett	mi
 8015e34:	085b      	lsrmi	r3, r3, #1
 8015e36:	089b      	lsrpl	r3, r3, #2
 8015e38:	2001      	movmi	r0, #1
 8015e3a:	600b      	strmi	r3, [r1, #0]
 8015e3c:	bf5c      	itt	pl
 8015e3e:	600b      	strpl	r3, [r1, #0]
 8015e40:	2002      	movpl	r0, #2
 8015e42:	4770      	bx	lr
 8015e44:	b298      	uxth	r0, r3
 8015e46:	b9a8      	cbnz	r0, 8015e74 <__lo0bits+0x52>
 8015e48:	0c1b      	lsrs	r3, r3, #16
 8015e4a:	2010      	movs	r0, #16
 8015e4c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015e50:	bf04      	itt	eq
 8015e52:	0a1b      	lsreq	r3, r3, #8
 8015e54:	3008      	addeq	r0, #8
 8015e56:	071a      	lsls	r2, r3, #28
 8015e58:	bf04      	itt	eq
 8015e5a:	091b      	lsreq	r3, r3, #4
 8015e5c:	3004      	addeq	r0, #4
 8015e5e:	079a      	lsls	r2, r3, #30
 8015e60:	bf04      	itt	eq
 8015e62:	089b      	lsreq	r3, r3, #2
 8015e64:	3002      	addeq	r0, #2
 8015e66:	07da      	lsls	r2, r3, #31
 8015e68:	d402      	bmi.n	8015e70 <__lo0bits+0x4e>
 8015e6a:	085b      	lsrs	r3, r3, #1
 8015e6c:	d006      	beq.n	8015e7c <__lo0bits+0x5a>
 8015e6e:	3001      	adds	r0, #1
 8015e70:	600b      	str	r3, [r1, #0]
 8015e72:	4770      	bx	lr
 8015e74:	4610      	mov	r0, r2
 8015e76:	e7e9      	b.n	8015e4c <__lo0bits+0x2a>
 8015e78:	2000      	movs	r0, #0
 8015e7a:	4770      	bx	lr
 8015e7c:	2020      	movs	r0, #32
 8015e7e:	4770      	bx	lr

08015e80 <__i2b>:
 8015e80:	b510      	push	{r4, lr}
 8015e82:	460c      	mov	r4, r1
 8015e84:	2101      	movs	r1, #1
 8015e86:	f7ff fee9 	bl	8015c5c <_Balloc>
 8015e8a:	2201      	movs	r2, #1
 8015e8c:	6144      	str	r4, [r0, #20]
 8015e8e:	6102      	str	r2, [r0, #16]
 8015e90:	bd10      	pop	{r4, pc}

08015e92 <__multiply>:
 8015e92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e96:	4614      	mov	r4, r2
 8015e98:	690a      	ldr	r2, [r1, #16]
 8015e9a:	6923      	ldr	r3, [r4, #16]
 8015e9c:	429a      	cmp	r2, r3
 8015e9e:	bfb8      	it	lt
 8015ea0:	460b      	movlt	r3, r1
 8015ea2:	4688      	mov	r8, r1
 8015ea4:	bfbc      	itt	lt
 8015ea6:	46a0      	movlt	r8, r4
 8015ea8:	461c      	movlt	r4, r3
 8015eaa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015eae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015eb6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015eba:	eb07 0609 	add.w	r6, r7, r9
 8015ebe:	42b3      	cmp	r3, r6
 8015ec0:	bfb8      	it	lt
 8015ec2:	3101      	addlt	r1, #1
 8015ec4:	f7ff feca 	bl	8015c5c <_Balloc>
 8015ec8:	f100 0514 	add.w	r5, r0, #20
 8015ecc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015ed0:	462b      	mov	r3, r5
 8015ed2:	2200      	movs	r2, #0
 8015ed4:	4573      	cmp	r3, lr
 8015ed6:	d316      	bcc.n	8015f06 <__multiply+0x74>
 8015ed8:	f104 0214 	add.w	r2, r4, #20
 8015edc:	f108 0114 	add.w	r1, r8, #20
 8015ee0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015ee4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015ee8:	9300      	str	r3, [sp, #0]
 8015eea:	9b00      	ldr	r3, [sp, #0]
 8015eec:	9201      	str	r2, [sp, #4]
 8015eee:	4293      	cmp	r3, r2
 8015ef0:	d80c      	bhi.n	8015f0c <__multiply+0x7a>
 8015ef2:	2e00      	cmp	r6, #0
 8015ef4:	dd03      	ble.n	8015efe <__multiply+0x6c>
 8015ef6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d05d      	beq.n	8015fba <__multiply+0x128>
 8015efe:	6106      	str	r6, [r0, #16]
 8015f00:	b003      	add	sp, #12
 8015f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f06:	f843 2b04 	str.w	r2, [r3], #4
 8015f0a:	e7e3      	b.n	8015ed4 <__multiply+0x42>
 8015f0c:	f8b2 b000 	ldrh.w	fp, [r2]
 8015f10:	f1bb 0f00 	cmp.w	fp, #0
 8015f14:	d023      	beq.n	8015f5e <__multiply+0xcc>
 8015f16:	4689      	mov	r9, r1
 8015f18:	46ac      	mov	ip, r5
 8015f1a:	f04f 0800 	mov.w	r8, #0
 8015f1e:	f859 4b04 	ldr.w	r4, [r9], #4
 8015f22:	f8dc a000 	ldr.w	sl, [ip]
 8015f26:	b2a3      	uxth	r3, r4
 8015f28:	fa1f fa8a 	uxth.w	sl, sl
 8015f2c:	fb0b a303 	mla	r3, fp, r3, sl
 8015f30:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015f34:	f8dc 4000 	ldr.w	r4, [ip]
 8015f38:	4443      	add	r3, r8
 8015f3a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f3e:	fb0b 840a 	mla	r4, fp, sl, r8
 8015f42:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015f46:	46e2      	mov	sl, ip
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f4e:	454f      	cmp	r7, r9
 8015f50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015f54:	f84a 3b04 	str.w	r3, [sl], #4
 8015f58:	d82b      	bhi.n	8015fb2 <__multiply+0x120>
 8015f5a:	f8cc 8004 	str.w	r8, [ip, #4]
 8015f5e:	9b01      	ldr	r3, [sp, #4]
 8015f60:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015f64:	3204      	adds	r2, #4
 8015f66:	f1ba 0f00 	cmp.w	sl, #0
 8015f6a:	d020      	beq.n	8015fae <__multiply+0x11c>
 8015f6c:	682b      	ldr	r3, [r5, #0]
 8015f6e:	4689      	mov	r9, r1
 8015f70:	46a8      	mov	r8, r5
 8015f72:	f04f 0b00 	mov.w	fp, #0
 8015f76:	f8b9 c000 	ldrh.w	ip, [r9]
 8015f7a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015f7e:	fb0a 440c 	mla	r4, sl, ip, r4
 8015f82:	445c      	add	r4, fp
 8015f84:	46c4      	mov	ip, r8
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015f8c:	f84c 3b04 	str.w	r3, [ip], #4
 8015f90:	f859 3b04 	ldr.w	r3, [r9], #4
 8015f94:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015f98:	0c1b      	lsrs	r3, r3, #16
 8015f9a:	fb0a b303 	mla	r3, sl, r3, fp
 8015f9e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015fa2:	454f      	cmp	r7, r9
 8015fa4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015fa8:	d805      	bhi.n	8015fb6 <__multiply+0x124>
 8015faa:	f8c8 3004 	str.w	r3, [r8, #4]
 8015fae:	3504      	adds	r5, #4
 8015fb0:	e79b      	b.n	8015eea <__multiply+0x58>
 8015fb2:	46d4      	mov	ip, sl
 8015fb4:	e7b3      	b.n	8015f1e <__multiply+0x8c>
 8015fb6:	46e0      	mov	r8, ip
 8015fb8:	e7dd      	b.n	8015f76 <__multiply+0xe4>
 8015fba:	3e01      	subs	r6, #1
 8015fbc:	e799      	b.n	8015ef2 <__multiply+0x60>
	...

08015fc0 <__pow5mult>:
 8015fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fc4:	4615      	mov	r5, r2
 8015fc6:	f012 0203 	ands.w	r2, r2, #3
 8015fca:	4606      	mov	r6, r0
 8015fcc:	460f      	mov	r7, r1
 8015fce:	d007      	beq.n	8015fe0 <__pow5mult+0x20>
 8015fd0:	3a01      	subs	r2, #1
 8015fd2:	4c21      	ldr	r4, [pc, #132]	; (8016058 <__pow5mult+0x98>)
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015fda:	f7ff fe8a 	bl	8015cf2 <__multadd>
 8015fde:	4607      	mov	r7, r0
 8015fe0:	10ad      	asrs	r5, r5, #2
 8015fe2:	d035      	beq.n	8016050 <__pow5mult+0x90>
 8015fe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015fe6:	b93c      	cbnz	r4, 8015ff8 <__pow5mult+0x38>
 8015fe8:	2010      	movs	r0, #16
 8015fea:	f7ff fe1d 	bl	8015c28 <malloc>
 8015fee:	6270      	str	r0, [r6, #36]	; 0x24
 8015ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ff4:	6004      	str	r4, [r0, #0]
 8015ff6:	60c4      	str	r4, [r0, #12]
 8015ff8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016000:	b94c      	cbnz	r4, 8016016 <__pow5mult+0x56>
 8016002:	f240 2171 	movw	r1, #625	; 0x271
 8016006:	4630      	mov	r0, r6
 8016008:	f7ff ff3a 	bl	8015e80 <__i2b>
 801600c:	2300      	movs	r3, #0
 801600e:	f8c8 0008 	str.w	r0, [r8, #8]
 8016012:	4604      	mov	r4, r0
 8016014:	6003      	str	r3, [r0, #0]
 8016016:	f04f 0800 	mov.w	r8, #0
 801601a:	07eb      	lsls	r3, r5, #31
 801601c:	d50a      	bpl.n	8016034 <__pow5mult+0x74>
 801601e:	4639      	mov	r1, r7
 8016020:	4622      	mov	r2, r4
 8016022:	4630      	mov	r0, r6
 8016024:	f7ff ff35 	bl	8015e92 <__multiply>
 8016028:	4639      	mov	r1, r7
 801602a:	4681      	mov	r9, r0
 801602c:	4630      	mov	r0, r6
 801602e:	f7ff fe49 	bl	8015cc4 <_Bfree>
 8016032:	464f      	mov	r7, r9
 8016034:	106d      	asrs	r5, r5, #1
 8016036:	d00b      	beq.n	8016050 <__pow5mult+0x90>
 8016038:	6820      	ldr	r0, [r4, #0]
 801603a:	b938      	cbnz	r0, 801604c <__pow5mult+0x8c>
 801603c:	4622      	mov	r2, r4
 801603e:	4621      	mov	r1, r4
 8016040:	4630      	mov	r0, r6
 8016042:	f7ff ff26 	bl	8015e92 <__multiply>
 8016046:	6020      	str	r0, [r4, #0]
 8016048:	f8c0 8000 	str.w	r8, [r0]
 801604c:	4604      	mov	r4, r0
 801604e:	e7e4      	b.n	801601a <__pow5mult+0x5a>
 8016050:	4638      	mov	r0, r7
 8016052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016056:	bf00      	nop
 8016058:	08017d70 	.word	0x08017d70

0801605c <__lshift>:
 801605c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016060:	460c      	mov	r4, r1
 8016062:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016066:	6923      	ldr	r3, [r4, #16]
 8016068:	6849      	ldr	r1, [r1, #4]
 801606a:	eb0a 0903 	add.w	r9, sl, r3
 801606e:	68a3      	ldr	r3, [r4, #8]
 8016070:	4607      	mov	r7, r0
 8016072:	4616      	mov	r6, r2
 8016074:	f109 0501 	add.w	r5, r9, #1
 8016078:	42ab      	cmp	r3, r5
 801607a:	db32      	blt.n	80160e2 <__lshift+0x86>
 801607c:	4638      	mov	r0, r7
 801607e:	f7ff fded 	bl	8015c5c <_Balloc>
 8016082:	2300      	movs	r3, #0
 8016084:	4680      	mov	r8, r0
 8016086:	f100 0114 	add.w	r1, r0, #20
 801608a:	461a      	mov	r2, r3
 801608c:	4553      	cmp	r3, sl
 801608e:	db2b      	blt.n	80160e8 <__lshift+0x8c>
 8016090:	6920      	ldr	r0, [r4, #16]
 8016092:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016096:	f104 0314 	add.w	r3, r4, #20
 801609a:	f016 021f 	ands.w	r2, r6, #31
 801609e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80160a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80160a6:	d025      	beq.n	80160f4 <__lshift+0x98>
 80160a8:	f1c2 0e20 	rsb	lr, r2, #32
 80160ac:	2000      	movs	r0, #0
 80160ae:	681e      	ldr	r6, [r3, #0]
 80160b0:	468a      	mov	sl, r1
 80160b2:	4096      	lsls	r6, r2
 80160b4:	4330      	orrs	r0, r6
 80160b6:	f84a 0b04 	str.w	r0, [sl], #4
 80160ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80160be:	459c      	cmp	ip, r3
 80160c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80160c4:	d814      	bhi.n	80160f0 <__lshift+0x94>
 80160c6:	6048      	str	r0, [r1, #4]
 80160c8:	b108      	cbz	r0, 80160ce <__lshift+0x72>
 80160ca:	f109 0502 	add.w	r5, r9, #2
 80160ce:	3d01      	subs	r5, #1
 80160d0:	4638      	mov	r0, r7
 80160d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80160d6:	4621      	mov	r1, r4
 80160d8:	f7ff fdf4 	bl	8015cc4 <_Bfree>
 80160dc:	4640      	mov	r0, r8
 80160de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160e2:	3101      	adds	r1, #1
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	e7c7      	b.n	8016078 <__lshift+0x1c>
 80160e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80160ec:	3301      	adds	r3, #1
 80160ee:	e7cd      	b.n	801608c <__lshift+0x30>
 80160f0:	4651      	mov	r1, sl
 80160f2:	e7dc      	b.n	80160ae <__lshift+0x52>
 80160f4:	3904      	subs	r1, #4
 80160f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80160fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80160fe:	459c      	cmp	ip, r3
 8016100:	d8f9      	bhi.n	80160f6 <__lshift+0x9a>
 8016102:	e7e4      	b.n	80160ce <__lshift+0x72>

08016104 <__mcmp>:
 8016104:	6903      	ldr	r3, [r0, #16]
 8016106:	690a      	ldr	r2, [r1, #16]
 8016108:	1a9b      	subs	r3, r3, r2
 801610a:	b530      	push	{r4, r5, lr}
 801610c:	d10c      	bne.n	8016128 <__mcmp+0x24>
 801610e:	0092      	lsls	r2, r2, #2
 8016110:	3014      	adds	r0, #20
 8016112:	3114      	adds	r1, #20
 8016114:	1884      	adds	r4, r0, r2
 8016116:	4411      	add	r1, r2
 8016118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801611c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016120:	4295      	cmp	r5, r2
 8016122:	d003      	beq.n	801612c <__mcmp+0x28>
 8016124:	d305      	bcc.n	8016132 <__mcmp+0x2e>
 8016126:	2301      	movs	r3, #1
 8016128:	4618      	mov	r0, r3
 801612a:	bd30      	pop	{r4, r5, pc}
 801612c:	42a0      	cmp	r0, r4
 801612e:	d3f3      	bcc.n	8016118 <__mcmp+0x14>
 8016130:	e7fa      	b.n	8016128 <__mcmp+0x24>
 8016132:	f04f 33ff 	mov.w	r3, #4294967295
 8016136:	e7f7      	b.n	8016128 <__mcmp+0x24>

08016138 <__mdiff>:
 8016138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801613c:	460d      	mov	r5, r1
 801613e:	4607      	mov	r7, r0
 8016140:	4611      	mov	r1, r2
 8016142:	4628      	mov	r0, r5
 8016144:	4614      	mov	r4, r2
 8016146:	f7ff ffdd 	bl	8016104 <__mcmp>
 801614a:	1e06      	subs	r6, r0, #0
 801614c:	d108      	bne.n	8016160 <__mdiff+0x28>
 801614e:	4631      	mov	r1, r6
 8016150:	4638      	mov	r0, r7
 8016152:	f7ff fd83 	bl	8015c5c <_Balloc>
 8016156:	2301      	movs	r3, #1
 8016158:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801615c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016160:	bfa4      	itt	ge
 8016162:	4623      	movge	r3, r4
 8016164:	462c      	movge	r4, r5
 8016166:	4638      	mov	r0, r7
 8016168:	6861      	ldr	r1, [r4, #4]
 801616a:	bfa6      	itte	ge
 801616c:	461d      	movge	r5, r3
 801616e:	2600      	movge	r6, #0
 8016170:	2601      	movlt	r6, #1
 8016172:	f7ff fd73 	bl	8015c5c <_Balloc>
 8016176:	692b      	ldr	r3, [r5, #16]
 8016178:	60c6      	str	r6, [r0, #12]
 801617a:	6926      	ldr	r6, [r4, #16]
 801617c:	f105 0914 	add.w	r9, r5, #20
 8016180:	f104 0214 	add.w	r2, r4, #20
 8016184:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016188:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801618c:	f100 0514 	add.w	r5, r0, #20
 8016190:	f04f 0e00 	mov.w	lr, #0
 8016194:	f852 ab04 	ldr.w	sl, [r2], #4
 8016198:	f859 4b04 	ldr.w	r4, [r9], #4
 801619c:	fa1e f18a 	uxtah	r1, lr, sl
 80161a0:	b2a3      	uxth	r3, r4
 80161a2:	1ac9      	subs	r1, r1, r3
 80161a4:	0c23      	lsrs	r3, r4, #16
 80161a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80161aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80161ae:	b289      	uxth	r1, r1
 80161b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80161b4:	45c8      	cmp	r8, r9
 80161b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80161ba:	4694      	mov	ip, r2
 80161bc:	f845 3b04 	str.w	r3, [r5], #4
 80161c0:	d8e8      	bhi.n	8016194 <__mdiff+0x5c>
 80161c2:	45bc      	cmp	ip, r7
 80161c4:	d304      	bcc.n	80161d0 <__mdiff+0x98>
 80161c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80161ca:	b183      	cbz	r3, 80161ee <__mdiff+0xb6>
 80161cc:	6106      	str	r6, [r0, #16]
 80161ce:	e7c5      	b.n	801615c <__mdiff+0x24>
 80161d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80161d4:	fa1e f381 	uxtah	r3, lr, r1
 80161d8:	141a      	asrs	r2, r3, #16
 80161da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80161de:	b29b      	uxth	r3, r3
 80161e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80161e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80161e8:	f845 3b04 	str.w	r3, [r5], #4
 80161ec:	e7e9      	b.n	80161c2 <__mdiff+0x8a>
 80161ee:	3e01      	subs	r6, #1
 80161f0:	e7e9      	b.n	80161c6 <__mdiff+0x8e>
	...

080161f4 <__ulp>:
 80161f4:	4b12      	ldr	r3, [pc, #72]	; (8016240 <__ulp+0x4c>)
 80161f6:	ee10 2a90 	vmov	r2, s1
 80161fa:	401a      	ands	r2, r3
 80161fc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016200:	2b00      	cmp	r3, #0
 8016202:	dd04      	ble.n	801620e <__ulp+0x1a>
 8016204:	2000      	movs	r0, #0
 8016206:	4619      	mov	r1, r3
 8016208:	ec41 0b10 	vmov	d0, r0, r1
 801620c:	4770      	bx	lr
 801620e:	425b      	negs	r3, r3
 8016210:	151b      	asrs	r3, r3, #20
 8016212:	2b13      	cmp	r3, #19
 8016214:	f04f 0000 	mov.w	r0, #0
 8016218:	f04f 0100 	mov.w	r1, #0
 801621c:	dc04      	bgt.n	8016228 <__ulp+0x34>
 801621e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016222:	fa42 f103 	asr.w	r1, r2, r3
 8016226:	e7ef      	b.n	8016208 <__ulp+0x14>
 8016228:	3b14      	subs	r3, #20
 801622a:	2b1e      	cmp	r3, #30
 801622c:	f04f 0201 	mov.w	r2, #1
 8016230:	bfda      	itte	le
 8016232:	f1c3 031f 	rsble	r3, r3, #31
 8016236:	fa02 f303 	lslle.w	r3, r2, r3
 801623a:	4613      	movgt	r3, r2
 801623c:	4618      	mov	r0, r3
 801623e:	e7e3      	b.n	8016208 <__ulp+0x14>
 8016240:	7ff00000 	.word	0x7ff00000

08016244 <__b2d>:
 8016244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016246:	6905      	ldr	r5, [r0, #16]
 8016248:	f100 0714 	add.w	r7, r0, #20
 801624c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016250:	1f2e      	subs	r6, r5, #4
 8016252:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016256:	4620      	mov	r0, r4
 8016258:	f7ff fdc4 	bl	8015de4 <__hi0bits>
 801625c:	f1c0 0320 	rsb	r3, r0, #32
 8016260:	280a      	cmp	r0, #10
 8016262:	600b      	str	r3, [r1, #0]
 8016264:	f8df c074 	ldr.w	ip, [pc, #116]	; 80162dc <__b2d+0x98>
 8016268:	dc14      	bgt.n	8016294 <__b2d+0x50>
 801626a:	f1c0 0e0b 	rsb	lr, r0, #11
 801626e:	fa24 f10e 	lsr.w	r1, r4, lr
 8016272:	42b7      	cmp	r7, r6
 8016274:	ea41 030c 	orr.w	r3, r1, ip
 8016278:	bf34      	ite	cc
 801627a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801627e:	2100      	movcs	r1, #0
 8016280:	3015      	adds	r0, #21
 8016282:	fa04 f000 	lsl.w	r0, r4, r0
 8016286:	fa21 f10e 	lsr.w	r1, r1, lr
 801628a:	ea40 0201 	orr.w	r2, r0, r1
 801628e:	ec43 2b10 	vmov	d0, r2, r3
 8016292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016294:	42b7      	cmp	r7, r6
 8016296:	bf3a      	itte	cc
 8016298:	f1a5 0608 	subcc.w	r6, r5, #8
 801629c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80162a0:	2100      	movcs	r1, #0
 80162a2:	380b      	subs	r0, #11
 80162a4:	d015      	beq.n	80162d2 <__b2d+0x8e>
 80162a6:	4084      	lsls	r4, r0
 80162a8:	f1c0 0520 	rsb	r5, r0, #32
 80162ac:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80162b0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80162b4:	42be      	cmp	r6, r7
 80162b6:	fa21 fc05 	lsr.w	ip, r1, r5
 80162ba:	ea44 030c 	orr.w	r3, r4, ip
 80162be:	bf8c      	ite	hi
 80162c0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80162c4:	2400      	movls	r4, #0
 80162c6:	fa01 f000 	lsl.w	r0, r1, r0
 80162ca:	40ec      	lsrs	r4, r5
 80162cc:	ea40 0204 	orr.w	r2, r0, r4
 80162d0:	e7dd      	b.n	801628e <__b2d+0x4a>
 80162d2:	ea44 030c 	orr.w	r3, r4, ip
 80162d6:	460a      	mov	r2, r1
 80162d8:	e7d9      	b.n	801628e <__b2d+0x4a>
 80162da:	bf00      	nop
 80162dc:	3ff00000 	.word	0x3ff00000

080162e0 <__d2b>:
 80162e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80162e4:	460e      	mov	r6, r1
 80162e6:	2101      	movs	r1, #1
 80162e8:	ec59 8b10 	vmov	r8, r9, d0
 80162ec:	4615      	mov	r5, r2
 80162ee:	f7ff fcb5 	bl	8015c5c <_Balloc>
 80162f2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80162f6:	4607      	mov	r7, r0
 80162f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80162fc:	bb34      	cbnz	r4, 801634c <__d2b+0x6c>
 80162fe:	9301      	str	r3, [sp, #4]
 8016300:	f1b8 0300 	subs.w	r3, r8, #0
 8016304:	d027      	beq.n	8016356 <__d2b+0x76>
 8016306:	a802      	add	r0, sp, #8
 8016308:	f840 3d08 	str.w	r3, [r0, #-8]!
 801630c:	f7ff fd89 	bl	8015e22 <__lo0bits>
 8016310:	9900      	ldr	r1, [sp, #0]
 8016312:	b1f0      	cbz	r0, 8016352 <__d2b+0x72>
 8016314:	9a01      	ldr	r2, [sp, #4]
 8016316:	f1c0 0320 	rsb	r3, r0, #32
 801631a:	fa02 f303 	lsl.w	r3, r2, r3
 801631e:	430b      	orrs	r3, r1
 8016320:	40c2      	lsrs	r2, r0
 8016322:	617b      	str	r3, [r7, #20]
 8016324:	9201      	str	r2, [sp, #4]
 8016326:	9b01      	ldr	r3, [sp, #4]
 8016328:	61bb      	str	r3, [r7, #24]
 801632a:	2b00      	cmp	r3, #0
 801632c:	bf14      	ite	ne
 801632e:	2102      	movne	r1, #2
 8016330:	2101      	moveq	r1, #1
 8016332:	6139      	str	r1, [r7, #16]
 8016334:	b1c4      	cbz	r4, 8016368 <__d2b+0x88>
 8016336:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801633a:	4404      	add	r4, r0
 801633c:	6034      	str	r4, [r6, #0]
 801633e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016342:	6028      	str	r0, [r5, #0]
 8016344:	4638      	mov	r0, r7
 8016346:	b003      	add	sp, #12
 8016348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801634c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016350:	e7d5      	b.n	80162fe <__d2b+0x1e>
 8016352:	6179      	str	r1, [r7, #20]
 8016354:	e7e7      	b.n	8016326 <__d2b+0x46>
 8016356:	a801      	add	r0, sp, #4
 8016358:	f7ff fd63 	bl	8015e22 <__lo0bits>
 801635c:	9b01      	ldr	r3, [sp, #4]
 801635e:	617b      	str	r3, [r7, #20]
 8016360:	2101      	movs	r1, #1
 8016362:	6139      	str	r1, [r7, #16]
 8016364:	3020      	adds	r0, #32
 8016366:	e7e5      	b.n	8016334 <__d2b+0x54>
 8016368:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801636c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016370:	6030      	str	r0, [r6, #0]
 8016372:	6918      	ldr	r0, [r3, #16]
 8016374:	f7ff fd36 	bl	8015de4 <__hi0bits>
 8016378:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801637c:	e7e1      	b.n	8016342 <__d2b+0x62>

0801637e <__ratio>:
 801637e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016382:	4688      	mov	r8, r1
 8016384:	4669      	mov	r1, sp
 8016386:	4681      	mov	r9, r0
 8016388:	f7ff ff5c 	bl	8016244 <__b2d>
 801638c:	a901      	add	r1, sp, #4
 801638e:	4640      	mov	r0, r8
 8016390:	ec57 6b10 	vmov	r6, r7, d0
 8016394:	f7ff ff56 	bl	8016244 <__b2d>
 8016398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801639c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80163a0:	eba3 0c02 	sub.w	ip, r3, r2
 80163a4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80163a8:	1a9b      	subs	r3, r3, r2
 80163aa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80163ae:	ec5b ab10 	vmov	sl, fp, d0
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	bfce      	itee	gt
 80163b6:	463a      	movgt	r2, r7
 80163b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80163bc:	465a      	movle	r2, fp
 80163be:	4659      	mov	r1, fp
 80163c0:	463d      	mov	r5, r7
 80163c2:	bfd4      	ite	le
 80163c4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80163c8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80163cc:	4630      	mov	r0, r6
 80163ce:	ee10 2a10 	vmov	r2, s0
 80163d2:	460b      	mov	r3, r1
 80163d4:	4629      	mov	r1, r5
 80163d6:	f7ea fa51 	bl	800087c <__aeabi_ddiv>
 80163da:	ec41 0b10 	vmov	d0, r0, r1
 80163de:	b003      	add	sp, #12
 80163e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080163e4 <__copybits>:
 80163e4:	3901      	subs	r1, #1
 80163e6:	b510      	push	{r4, lr}
 80163e8:	1149      	asrs	r1, r1, #5
 80163ea:	6914      	ldr	r4, [r2, #16]
 80163ec:	3101      	adds	r1, #1
 80163ee:	f102 0314 	add.w	r3, r2, #20
 80163f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80163f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80163fa:	42a3      	cmp	r3, r4
 80163fc:	4602      	mov	r2, r0
 80163fe:	d303      	bcc.n	8016408 <__copybits+0x24>
 8016400:	2300      	movs	r3, #0
 8016402:	428a      	cmp	r2, r1
 8016404:	d305      	bcc.n	8016412 <__copybits+0x2e>
 8016406:	bd10      	pop	{r4, pc}
 8016408:	f853 2b04 	ldr.w	r2, [r3], #4
 801640c:	f840 2b04 	str.w	r2, [r0], #4
 8016410:	e7f3      	b.n	80163fa <__copybits+0x16>
 8016412:	f842 3b04 	str.w	r3, [r2], #4
 8016416:	e7f4      	b.n	8016402 <__copybits+0x1e>

08016418 <__any_on>:
 8016418:	f100 0214 	add.w	r2, r0, #20
 801641c:	6900      	ldr	r0, [r0, #16]
 801641e:	114b      	asrs	r3, r1, #5
 8016420:	4298      	cmp	r0, r3
 8016422:	b510      	push	{r4, lr}
 8016424:	db11      	blt.n	801644a <__any_on+0x32>
 8016426:	dd0a      	ble.n	801643e <__any_on+0x26>
 8016428:	f011 011f 	ands.w	r1, r1, #31
 801642c:	d007      	beq.n	801643e <__any_on+0x26>
 801642e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016432:	fa24 f001 	lsr.w	r0, r4, r1
 8016436:	fa00 f101 	lsl.w	r1, r0, r1
 801643a:	428c      	cmp	r4, r1
 801643c:	d10b      	bne.n	8016456 <__any_on+0x3e>
 801643e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016442:	4293      	cmp	r3, r2
 8016444:	d803      	bhi.n	801644e <__any_on+0x36>
 8016446:	2000      	movs	r0, #0
 8016448:	bd10      	pop	{r4, pc}
 801644a:	4603      	mov	r3, r0
 801644c:	e7f7      	b.n	801643e <__any_on+0x26>
 801644e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016452:	2900      	cmp	r1, #0
 8016454:	d0f5      	beq.n	8016442 <__any_on+0x2a>
 8016456:	2001      	movs	r0, #1
 8016458:	e7f6      	b.n	8016448 <__any_on+0x30>

0801645a <_calloc_r>:
 801645a:	b538      	push	{r3, r4, r5, lr}
 801645c:	fb02 f401 	mul.w	r4, r2, r1
 8016460:	4621      	mov	r1, r4
 8016462:	f000 f857 	bl	8016514 <_malloc_r>
 8016466:	4605      	mov	r5, r0
 8016468:	b118      	cbz	r0, 8016472 <_calloc_r+0x18>
 801646a:	4622      	mov	r2, r4
 801646c:	2100      	movs	r1, #0
 801646e:	f7fc f91a 	bl	80126a6 <memset>
 8016472:	4628      	mov	r0, r5
 8016474:	bd38      	pop	{r3, r4, r5, pc}
	...

08016478 <_free_r>:
 8016478:	b538      	push	{r3, r4, r5, lr}
 801647a:	4605      	mov	r5, r0
 801647c:	2900      	cmp	r1, #0
 801647e:	d045      	beq.n	801650c <_free_r+0x94>
 8016480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016484:	1f0c      	subs	r4, r1, #4
 8016486:	2b00      	cmp	r3, #0
 8016488:	bfb8      	it	lt
 801648a:	18e4      	addlt	r4, r4, r3
 801648c:	f000 ffa5 	bl	80173da <__malloc_lock>
 8016490:	4a1f      	ldr	r2, [pc, #124]	; (8016510 <_free_r+0x98>)
 8016492:	6813      	ldr	r3, [r2, #0]
 8016494:	4610      	mov	r0, r2
 8016496:	b933      	cbnz	r3, 80164a6 <_free_r+0x2e>
 8016498:	6063      	str	r3, [r4, #4]
 801649a:	6014      	str	r4, [r2, #0]
 801649c:	4628      	mov	r0, r5
 801649e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80164a2:	f000 bf9b 	b.w	80173dc <__malloc_unlock>
 80164a6:	42a3      	cmp	r3, r4
 80164a8:	d90c      	bls.n	80164c4 <_free_r+0x4c>
 80164aa:	6821      	ldr	r1, [r4, #0]
 80164ac:	1862      	adds	r2, r4, r1
 80164ae:	4293      	cmp	r3, r2
 80164b0:	bf04      	itt	eq
 80164b2:	681a      	ldreq	r2, [r3, #0]
 80164b4:	685b      	ldreq	r3, [r3, #4]
 80164b6:	6063      	str	r3, [r4, #4]
 80164b8:	bf04      	itt	eq
 80164ba:	1852      	addeq	r2, r2, r1
 80164bc:	6022      	streq	r2, [r4, #0]
 80164be:	6004      	str	r4, [r0, #0]
 80164c0:	e7ec      	b.n	801649c <_free_r+0x24>
 80164c2:	4613      	mov	r3, r2
 80164c4:	685a      	ldr	r2, [r3, #4]
 80164c6:	b10a      	cbz	r2, 80164cc <_free_r+0x54>
 80164c8:	42a2      	cmp	r2, r4
 80164ca:	d9fa      	bls.n	80164c2 <_free_r+0x4a>
 80164cc:	6819      	ldr	r1, [r3, #0]
 80164ce:	1858      	adds	r0, r3, r1
 80164d0:	42a0      	cmp	r0, r4
 80164d2:	d10b      	bne.n	80164ec <_free_r+0x74>
 80164d4:	6820      	ldr	r0, [r4, #0]
 80164d6:	4401      	add	r1, r0
 80164d8:	1858      	adds	r0, r3, r1
 80164da:	4282      	cmp	r2, r0
 80164dc:	6019      	str	r1, [r3, #0]
 80164de:	d1dd      	bne.n	801649c <_free_r+0x24>
 80164e0:	6810      	ldr	r0, [r2, #0]
 80164e2:	6852      	ldr	r2, [r2, #4]
 80164e4:	605a      	str	r2, [r3, #4]
 80164e6:	4401      	add	r1, r0
 80164e8:	6019      	str	r1, [r3, #0]
 80164ea:	e7d7      	b.n	801649c <_free_r+0x24>
 80164ec:	d902      	bls.n	80164f4 <_free_r+0x7c>
 80164ee:	230c      	movs	r3, #12
 80164f0:	602b      	str	r3, [r5, #0]
 80164f2:	e7d3      	b.n	801649c <_free_r+0x24>
 80164f4:	6820      	ldr	r0, [r4, #0]
 80164f6:	1821      	adds	r1, r4, r0
 80164f8:	428a      	cmp	r2, r1
 80164fa:	bf04      	itt	eq
 80164fc:	6811      	ldreq	r1, [r2, #0]
 80164fe:	6852      	ldreq	r2, [r2, #4]
 8016500:	6062      	str	r2, [r4, #4]
 8016502:	bf04      	itt	eq
 8016504:	1809      	addeq	r1, r1, r0
 8016506:	6021      	streq	r1, [r4, #0]
 8016508:	605c      	str	r4, [r3, #4]
 801650a:	e7c7      	b.n	801649c <_free_r+0x24>
 801650c:	bd38      	pop	{r3, r4, r5, pc}
 801650e:	bf00      	nop
 8016510:	2002b110 	.word	0x2002b110

08016514 <_malloc_r>:
 8016514:	b570      	push	{r4, r5, r6, lr}
 8016516:	1ccd      	adds	r5, r1, #3
 8016518:	f025 0503 	bic.w	r5, r5, #3
 801651c:	3508      	adds	r5, #8
 801651e:	2d0c      	cmp	r5, #12
 8016520:	bf38      	it	cc
 8016522:	250c      	movcc	r5, #12
 8016524:	2d00      	cmp	r5, #0
 8016526:	4606      	mov	r6, r0
 8016528:	db01      	blt.n	801652e <_malloc_r+0x1a>
 801652a:	42a9      	cmp	r1, r5
 801652c:	d903      	bls.n	8016536 <_malloc_r+0x22>
 801652e:	230c      	movs	r3, #12
 8016530:	6033      	str	r3, [r6, #0]
 8016532:	2000      	movs	r0, #0
 8016534:	bd70      	pop	{r4, r5, r6, pc}
 8016536:	f000 ff50 	bl	80173da <__malloc_lock>
 801653a:	4a21      	ldr	r2, [pc, #132]	; (80165c0 <_malloc_r+0xac>)
 801653c:	6814      	ldr	r4, [r2, #0]
 801653e:	4621      	mov	r1, r4
 8016540:	b991      	cbnz	r1, 8016568 <_malloc_r+0x54>
 8016542:	4c20      	ldr	r4, [pc, #128]	; (80165c4 <_malloc_r+0xb0>)
 8016544:	6823      	ldr	r3, [r4, #0]
 8016546:	b91b      	cbnz	r3, 8016550 <_malloc_r+0x3c>
 8016548:	4630      	mov	r0, r6
 801654a:	f000 fde3 	bl	8017114 <_sbrk_r>
 801654e:	6020      	str	r0, [r4, #0]
 8016550:	4629      	mov	r1, r5
 8016552:	4630      	mov	r0, r6
 8016554:	f000 fdde 	bl	8017114 <_sbrk_r>
 8016558:	1c43      	adds	r3, r0, #1
 801655a:	d124      	bne.n	80165a6 <_malloc_r+0x92>
 801655c:	230c      	movs	r3, #12
 801655e:	6033      	str	r3, [r6, #0]
 8016560:	4630      	mov	r0, r6
 8016562:	f000 ff3b 	bl	80173dc <__malloc_unlock>
 8016566:	e7e4      	b.n	8016532 <_malloc_r+0x1e>
 8016568:	680b      	ldr	r3, [r1, #0]
 801656a:	1b5b      	subs	r3, r3, r5
 801656c:	d418      	bmi.n	80165a0 <_malloc_r+0x8c>
 801656e:	2b0b      	cmp	r3, #11
 8016570:	d90f      	bls.n	8016592 <_malloc_r+0x7e>
 8016572:	600b      	str	r3, [r1, #0]
 8016574:	50cd      	str	r5, [r1, r3]
 8016576:	18cc      	adds	r4, r1, r3
 8016578:	4630      	mov	r0, r6
 801657a:	f000 ff2f 	bl	80173dc <__malloc_unlock>
 801657e:	f104 000b 	add.w	r0, r4, #11
 8016582:	1d23      	adds	r3, r4, #4
 8016584:	f020 0007 	bic.w	r0, r0, #7
 8016588:	1ac3      	subs	r3, r0, r3
 801658a:	d0d3      	beq.n	8016534 <_malloc_r+0x20>
 801658c:	425a      	negs	r2, r3
 801658e:	50e2      	str	r2, [r4, r3]
 8016590:	e7d0      	b.n	8016534 <_malloc_r+0x20>
 8016592:	428c      	cmp	r4, r1
 8016594:	684b      	ldr	r3, [r1, #4]
 8016596:	bf16      	itet	ne
 8016598:	6063      	strne	r3, [r4, #4]
 801659a:	6013      	streq	r3, [r2, #0]
 801659c:	460c      	movne	r4, r1
 801659e:	e7eb      	b.n	8016578 <_malloc_r+0x64>
 80165a0:	460c      	mov	r4, r1
 80165a2:	6849      	ldr	r1, [r1, #4]
 80165a4:	e7cc      	b.n	8016540 <_malloc_r+0x2c>
 80165a6:	1cc4      	adds	r4, r0, #3
 80165a8:	f024 0403 	bic.w	r4, r4, #3
 80165ac:	42a0      	cmp	r0, r4
 80165ae:	d005      	beq.n	80165bc <_malloc_r+0xa8>
 80165b0:	1a21      	subs	r1, r4, r0
 80165b2:	4630      	mov	r0, r6
 80165b4:	f000 fdae 	bl	8017114 <_sbrk_r>
 80165b8:	3001      	adds	r0, #1
 80165ba:	d0cf      	beq.n	801655c <_malloc_r+0x48>
 80165bc:	6025      	str	r5, [r4, #0]
 80165be:	e7db      	b.n	8016578 <_malloc_r+0x64>
 80165c0:	2002b110 	.word	0x2002b110
 80165c4:	2002b114 	.word	0x2002b114

080165c8 <__ssputs_r>:
 80165c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165cc:	688e      	ldr	r6, [r1, #8]
 80165ce:	429e      	cmp	r6, r3
 80165d0:	4682      	mov	sl, r0
 80165d2:	460c      	mov	r4, r1
 80165d4:	4690      	mov	r8, r2
 80165d6:	4699      	mov	r9, r3
 80165d8:	d837      	bhi.n	801664a <__ssputs_r+0x82>
 80165da:	898a      	ldrh	r2, [r1, #12]
 80165dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80165e0:	d031      	beq.n	8016646 <__ssputs_r+0x7e>
 80165e2:	6825      	ldr	r5, [r4, #0]
 80165e4:	6909      	ldr	r1, [r1, #16]
 80165e6:	1a6f      	subs	r7, r5, r1
 80165e8:	6965      	ldr	r5, [r4, #20]
 80165ea:	2302      	movs	r3, #2
 80165ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80165f4:	f109 0301 	add.w	r3, r9, #1
 80165f8:	443b      	add	r3, r7
 80165fa:	429d      	cmp	r5, r3
 80165fc:	bf38      	it	cc
 80165fe:	461d      	movcc	r5, r3
 8016600:	0553      	lsls	r3, r2, #21
 8016602:	d530      	bpl.n	8016666 <__ssputs_r+0x9e>
 8016604:	4629      	mov	r1, r5
 8016606:	f7ff ff85 	bl	8016514 <_malloc_r>
 801660a:	4606      	mov	r6, r0
 801660c:	b950      	cbnz	r0, 8016624 <__ssputs_r+0x5c>
 801660e:	230c      	movs	r3, #12
 8016610:	f8ca 3000 	str.w	r3, [sl]
 8016614:	89a3      	ldrh	r3, [r4, #12]
 8016616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801661a:	81a3      	strh	r3, [r4, #12]
 801661c:	f04f 30ff 	mov.w	r0, #4294967295
 8016620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016624:	463a      	mov	r2, r7
 8016626:	6921      	ldr	r1, [r4, #16]
 8016628:	f7fc f832 	bl	8012690 <memcpy>
 801662c:	89a3      	ldrh	r3, [r4, #12]
 801662e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016636:	81a3      	strh	r3, [r4, #12]
 8016638:	6126      	str	r6, [r4, #16]
 801663a:	6165      	str	r5, [r4, #20]
 801663c:	443e      	add	r6, r7
 801663e:	1bed      	subs	r5, r5, r7
 8016640:	6026      	str	r6, [r4, #0]
 8016642:	60a5      	str	r5, [r4, #8]
 8016644:	464e      	mov	r6, r9
 8016646:	454e      	cmp	r6, r9
 8016648:	d900      	bls.n	801664c <__ssputs_r+0x84>
 801664a:	464e      	mov	r6, r9
 801664c:	4632      	mov	r2, r6
 801664e:	4641      	mov	r1, r8
 8016650:	6820      	ldr	r0, [r4, #0]
 8016652:	f000 fea9 	bl	80173a8 <memmove>
 8016656:	68a3      	ldr	r3, [r4, #8]
 8016658:	1b9b      	subs	r3, r3, r6
 801665a:	60a3      	str	r3, [r4, #8]
 801665c:	6823      	ldr	r3, [r4, #0]
 801665e:	441e      	add	r6, r3
 8016660:	6026      	str	r6, [r4, #0]
 8016662:	2000      	movs	r0, #0
 8016664:	e7dc      	b.n	8016620 <__ssputs_r+0x58>
 8016666:	462a      	mov	r2, r5
 8016668:	f000 feb9 	bl	80173de <_realloc_r>
 801666c:	4606      	mov	r6, r0
 801666e:	2800      	cmp	r0, #0
 8016670:	d1e2      	bne.n	8016638 <__ssputs_r+0x70>
 8016672:	6921      	ldr	r1, [r4, #16]
 8016674:	4650      	mov	r0, sl
 8016676:	f7ff feff 	bl	8016478 <_free_r>
 801667a:	e7c8      	b.n	801660e <__ssputs_r+0x46>

0801667c <_svfiprintf_r>:
 801667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016680:	461d      	mov	r5, r3
 8016682:	898b      	ldrh	r3, [r1, #12]
 8016684:	061f      	lsls	r7, r3, #24
 8016686:	b09d      	sub	sp, #116	; 0x74
 8016688:	4680      	mov	r8, r0
 801668a:	460c      	mov	r4, r1
 801668c:	4616      	mov	r6, r2
 801668e:	d50f      	bpl.n	80166b0 <_svfiprintf_r+0x34>
 8016690:	690b      	ldr	r3, [r1, #16]
 8016692:	b96b      	cbnz	r3, 80166b0 <_svfiprintf_r+0x34>
 8016694:	2140      	movs	r1, #64	; 0x40
 8016696:	f7ff ff3d 	bl	8016514 <_malloc_r>
 801669a:	6020      	str	r0, [r4, #0]
 801669c:	6120      	str	r0, [r4, #16]
 801669e:	b928      	cbnz	r0, 80166ac <_svfiprintf_r+0x30>
 80166a0:	230c      	movs	r3, #12
 80166a2:	f8c8 3000 	str.w	r3, [r8]
 80166a6:	f04f 30ff 	mov.w	r0, #4294967295
 80166aa:	e0c8      	b.n	801683e <_svfiprintf_r+0x1c2>
 80166ac:	2340      	movs	r3, #64	; 0x40
 80166ae:	6163      	str	r3, [r4, #20]
 80166b0:	2300      	movs	r3, #0
 80166b2:	9309      	str	r3, [sp, #36]	; 0x24
 80166b4:	2320      	movs	r3, #32
 80166b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80166ba:	2330      	movs	r3, #48	; 0x30
 80166bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80166c0:	9503      	str	r5, [sp, #12]
 80166c2:	f04f 0b01 	mov.w	fp, #1
 80166c6:	4637      	mov	r7, r6
 80166c8:	463d      	mov	r5, r7
 80166ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80166ce:	b10b      	cbz	r3, 80166d4 <_svfiprintf_r+0x58>
 80166d0:	2b25      	cmp	r3, #37	; 0x25
 80166d2:	d13e      	bne.n	8016752 <_svfiprintf_r+0xd6>
 80166d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80166d8:	d00b      	beq.n	80166f2 <_svfiprintf_r+0x76>
 80166da:	4653      	mov	r3, sl
 80166dc:	4632      	mov	r2, r6
 80166de:	4621      	mov	r1, r4
 80166e0:	4640      	mov	r0, r8
 80166e2:	f7ff ff71 	bl	80165c8 <__ssputs_r>
 80166e6:	3001      	adds	r0, #1
 80166e8:	f000 80a4 	beq.w	8016834 <_svfiprintf_r+0x1b8>
 80166ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166ee:	4453      	add	r3, sl
 80166f0:	9309      	str	r3, [sp, #36]	; 0x24
 80166f2:	783b      	ldrb	r3, [r7, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	f000 809d 	beq.w	8016834 <_svfiprintf_r+0x1b8>
 80166fa:	2300      	movs	r3, #0
 80166fc:	f04f 32ff 	mov.w	r2, #4294967295
 8016700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016704:	9304      	str	r3, [sp, #16]
 8016706:	9307      	str	r3, [sp, #28]
 8016708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801670c:	931a      	str	r3, [sp, #104]	; 0x68
 801670e:	462f      	mov	r7, r5
 8016710:	2205      	movs	r2, #5
 8016712:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016716:	4850      	ldr	r0, [pc, #320]	; (8016858 <_svfiprintf_r+0x1dc>)
 8016718:	f7e9 fd7a 	bl	8000210 <memchr>
 801671c:	9b04      	ldr	r3, [sp, #16]
 801671e:	b9d0      	cbnz	r0, 8016756 <_svfiprintf_r+0xda>
 8016720:	06d9      	lsls	r1, r3, #27
 8016722:	bf44      	itt	mi
 8016724:	2220      	movmi	r2, #32
 8016726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801672a:	071a      	lsls	r2, r3, #28
 801672c:	bf44      	itt	mi
 801672e:	222b      	movmi	r2, #43	; 0x2b
 8016730:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016734:	782a      	ldrb	r2, [r5, #0]
 8016736:	2a2a      	cmp	r2, #42	; 0x2a
 8016738:	d015      	beq.n	8016766 <_svfiprintf_r+0xea>
 801673a:	9a07      	ldr	r2, [sp, #28]
 801673c:	462f      	mov	r7, r5
 801673e:	2000      	movs	r0, #0
 8016740:	250a      	movs	r5, #10
 8016742:	4639      	mov	r1, r7
 8016744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016748:	3b30      	subs	r3, #48	; 0x30
 801674a:	2b09      	cmp	r3, #9
 801674c:	d94d      	bls.n	80167ea <_svfiprintf_r+0x16e>
 801674e:	b1b8      	cbz	r0, 8016780 <_svfiprintf_r+0x104>
 8016750:	e00f      	b.n	8016772 <_svfiprintf_r+0xf6>
 8016752:	462f      	mov	r7, r5
 8016754:	e7b8      	b.n	80166c8 <_svfiprintf_r+0x4c>
 8016756:	4a40      	ldr	r2, [pc, #256]	; (8016858 <_svfiprintf_r+0x1dc>)
 8016758:	1a80      	subs	r0, r0, r2
 801675a:	fa0b f000 	lsl.w	r0, fp, r0
 801675e:	4318      	orrs	r0, r3
 8016760:	9004      	str	r0, [sp, #16]
 8016762:	463d      	mov	r5, r7
 8016764:	e7d3      	b.n	801670e <_svfiprintf_r+0x92>
 8016766:	9a03      	ldr	r2, [sp, #12]
 8016768:	1d11      	adds	r1, r2, #4
 801676a:	6812      	ldr	r2, [r2, #0]
 801676c:	9103      	str	r1, [sp, #12]
 801676e:	2a00      	cmp	r2, #0
 8016770:	db01      	blt.n	8016776 <_svfiprintf_r+0xfa>
 8016772:	9207      	str	r2, [sp, #28]
 8016774:	e004      	b.n	8016780 <_svfiprintf_r+0x104>
 8016776:	4252      	negs	r2, r2
 8016778:	f043 0302 	orr.w	r3, r3, #2
 801677c:	9207      	str	r2, [sp, #28]
 801677e:	9304      	str	r3, [sp, #16]
 8016780:	783b      	ldrb	r3, [r7, #0]
 8016782:	2b2e      	cmp	r3, #46	; 0x2e
 8016784:	d10c      	bne.n	80167a0 <_svfiprintf_r+0x124>
 8016786:	787b      	ldrb	r3, [r7, #1]
 8016788:	2b2a      	cmp	r3, #42	; 0x2a
 801678a:	d133      	bne.n	80167f4 <_svfiprintf_r+0x178>
 801678c:	9b03      	ldr	r3, [sp, #12]
 801678e:	1d1a      	adds	r2, r3, #4
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	9203      	str	r2, [sp, #12]
 8016794:	2b00      	cmp	r3, #0
 8016796:	bfb8      	it	lt
 8016798:	f04f 33ff 	movlt.w	r3, #4294967295
 801679c:	3702      	adds	r7, #2
 801679e:	9305      	str	r3, [sp, #20]
 80167a0:	4d2e      	ldr	r5, [pc, #184]	; (801685c <_svfiprintf_r+0x1e0>)
 80167a2:	7839      	ldrb	r1, [r7, #0]
 80167a4:	2203      	movs	r2, #3
 80167a6:	4628      	mov	r0, r5
 80167a8:	f7e9 fd32 	bl	8000210 <memchr>
 80167ac:	b138      	cbz	r0, 80167be <_svfiprintf_r+0x142>
 80167ae:	2340      	movs	r3, #64	; 0x40
 80167b0:	1b40      	subs	r0, r0, r5
 80167b2:	fa03 f000 	lsl.w	r0, r3, r0
 80167b6:	9b04      	ldr	r3, [sp, #16]
 80167b8:	4303      	orrs	r3, r0
 80167ba:	3701      	adds	r7, #1
 80167bc:	9304      	str	r3, [sp, #16]
 80167be:	7839      	ldrb	r1, [r7, #0]
 80167c0:	4827      	ldr	r0, [pc, #156]	; (8016860 <_svfiprintf_r+0x1e4>)
 80167c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167c6:	2206      	movs	r2, #6
 80167c8:	1c7e      	adds	r6, r7, #1
 80167ca:	f7e9 fd21 	bl	8000210 <memchr>
 80167ce:	2800      	cmp	r0, #0
 80167d0:	d038      	beq.n	8016844 <_svfiprintf_r+0x1c8>
 80167d2:	4b24      	ldr	r3, [pc, #144]	; (8016864 <_svfiprintf_r+0x1e8>)
 80167d4:	bb13      	cbnz	r3, 801681c <_svfiprintf_r+0x1a0>
 80167d6:	9b03      	ldr	r3, [sp, #12]
 80167d8:	3307      	adds	r3, #7
 80167da:	f023 0307 	bic.w	r3, r3, #7
 80167de:	3308      	adds	r3, #8
 80167e0:	9303      	str	r3, [sp, #12]
 80167e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167e4:	444b      	add	r3, r9
 80167e6:	9309      	str	r3, [sp, #36]	; 0x24
 80167e8:	e76d      	b.n	80166c6 <_svfiprintf_r+0x4a>
 80167ea:	fb05 3202 	mla	r2, r5, r2, r3
 80167ee:	2001      	movs	r0, #1
 80167f0:	460f      	mov	r7, r1
 80167f2:	e7a6      	b.n	8016742 <_svfiprintf_r+0xc6>
 80167f4:	2300      	movs	r3, #0
 80167f6:	3701      	adds	r7, #1
 80167f8:	9305      	str	r3, [sp, #20]
 80167fa:	4619      	mov	r1, r3
 80167fc:	250a      	movs	r5, #10
 80167fe:	4638      	mov	r0, r7
 8016800:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016804:	3a30      	subs	r2, #48	; 0x30
 8016806:	2a09      	cmp	r2, #9
 8016808:	d903      	bls.n	8016812 <_svfiprintf_r+0x196>
 801680a:	2b00      	cmp	r3, #0
 801680c:	d0c8      	beq.n	80167a0 <_svfiprintf_r+0x124>
 801680e:	9105      	str	r1, [sp, #20]
 8016810:	e7c6      	b.n	80167a0 <_svfiprintf_r+0x124>
 8016812:	fb05 2101 	mla	r1, r5, r1, r2
 8016816:	2301      	movs	r3, #1
 8016818:	4607      	mov	r7, r0
 801681a:	e7f0      	b.n	80167fe <_svfiprintf_r+0x182>
 801681c:	ab03      	add	r3, sp, #12
 801681e:	9300      	str	r3, [sp, #0]
 8016820:	4622      	mov	r2, r4
 8016822:	4b11      	ldr	r3, [pc, #68]	; (8016868 <_svfiprintf_r+0x1ec>)
 8016824:	a904      	add	r1, sp, #16
 8016826:	4640      	mov	r0, r8
 8016828:	f7fb ffda 	bl	80127e0 <_printf_float>
 801682c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016830:	4681      	mov	r9, r0
 8016832:	d1d6      	bne.n	80167e2 <_svfiprintf_r+0x166>
 8016834:	89a3      	ldrh	r3, [r4, #12]
 8016836:	065b      	lsls	r3, r3, #25
 8016838:	f53f af35 	bmi.w	80166a6 <_svfiprintf_r+0x2a>
 801683c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801683e:	b01d      	add	sp, #116	; 0x74
 8016840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016844:	ab03      	add	r3, sp, #12
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	4622      	mov	r2, r4
 801684a:	4b07      	ldr	r3, [pc, #28]	; (8016868 <_svfiprintf_r+0x1ec>)
 801684c:	a904      	add	r1, sp, #16
 801684e:	4640      	mov	r0, r8
 8016850:	f7fc fa7c 	bl	8012d4c <_printf_i>
 8016854:	e7ea      	b.n	801682c <_svfiprintf_r+0x1b0>
 8016856:	bf00      	nop
 8016858:	08017d7c 	.word	0x08017d7c
 801685c:	08017d82 	.word	0x08017d82
 8016860:	08017d86 	.word	0x08017d86
 8016864:	080127e1 	.word	0x080127e1
 8016868:	080165c9 	.word	0x080165c9

0801686c <_sungetc_r>:
 801686c:	b538      	push	{r3, r4, r5, lr}
 801686e:	1c4b      	adds	r3, r1, #1
 8016870:	4614      	mov	r4, r2
 8016872:	d103      	bne.n	801687c <_sungetc_r+0x10>
 8016874:	f04f 35ff 	mov.w	r5, #4294967295
 8016878:	4628      	mov	r0, r5
 801687a:	bd38      	pop	{r3, r4, r5, pc}
 801687c:	8993      	ldrh	r3, [r2, #12]
 801687e:	f023 0320 	bic.w	r3, r3, #32
 8016882:	8193      	strh	r3, [r2, #12]
 8016884:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016886:	6852      	ldr	r2, [r2, #4]
 8016888:	b2cd      	uxtb	r5, r1
 801688a:	b18b      	cbz	r3, 80168b0 <_sungetc_r+0x44>
 801688c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801688e:	4293      	cmp	r3, r2
 8016890:	dd08      	ble.n	80168a4 <_sungetc_r+0x38>
 8016892:	6823      	ldr	r3, [r4, #0]
 8016894:	1e5a      	subs	r2, r3, #1
 8016896:	6022      	str	r2, [r4, #0]
 8016898:	f803 5c01 	strb.w	r5, [r3, #-1]
 801689c:	6863      	ldr	r3, [r4, #4]
 801689e:	3301      	adds	r3, #1
 80168a0:	6063      	str	r3, [r4, #4]
 80168a2:	e7e9      	b.n	8016878 <_sungetc_r+0xc>
 80168a4:	4621      	mov	r1, r4
 80168a6:	f000 fd15 	bl	80172d4 <__submore>
 80168aa:	2800      	cmp	r0, #0
 80168ac:	d0f1      	beq.n	8016892 <_sungetc_r+0x26>
 80168ae:	e7e1      	b.n	8016874 <_sungetc_r+0x8>
 80168b0:	6921      	ldr	r1, [r4, #16]
 80168b2:	6823      	ldr	r3, [r4, #0]
 80168b4:	b151      	cbz	r1, 80168cc <_sungetc_r+0x60>
 80168b6:	4299      	cmp	r1, r3
 80168b8:	d208      	bcs.n	80168cc <_sungetc_r+0x60>
 80168ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80168be:	42a9      	cmp	r1, r5
 80168c0:	d104      	bne.n	80168cc <_sungetc_r+0x60>
 80168c2:	3b01      	subs	r3, #1
 80168c4:	3201      	adds	r2, #1
 80168c6:	6023      	str	r3, [r4, #0]
 80168c8:	6062      	str	r2, [r4, #4]
 80168ca:	e7d5      	b.n	8016878 <_sungetc_r+0xc>
 80168cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80168d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168d4:	6363      	str	r3, [r4, #52]	; 0x34
 80168d6:	2303      	movs	r3, #3
 80168d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80168da:	4623      	mov	r3, r4
 80168dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80168e0:	6023      	str	r3, [r4, #0]
 80168e2:	2301      	movs	r3, #1
 80168e4:	e7dc      	b.n	80168a0 <_sungetc_r+0x34>

080168e6 <__ssrefill_r>:
 80168e6:	b510      	push	{r4, lr}
 80168e8:	460c      	mov	r4, r1
 80168ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80168ec:	b169      	cbz	r1, 801690a <__ssrefill_r+0x24>
 80168ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168f2:	4299      	cmp	r1, r3
 80168f4:	d001      	beq.n	80168fa <__ssrefill_r+0x14>
 80168f6:	f7ff fdbf 	bl	8016478 <_free_r>
 80168fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168fc:	6063      	str	r3, [r4, #4]
 80168fe:	2000      	movs	r0, #0
 8016900:	6360      	str	r0, [r4, #52]	; 0x34
 8016902:	b113      	cbz	r3, 801690a <__ssrefill_r+0x24>
 8016904:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	bd10      	pop	{r4, pc}
 801690a:	6923      	ldr	r3, [r4, #16]
 801690c:	6023      	str	r3, [r4, #0]
 801690e:	2300      	movs	r3, #0
 8016910:	6063      	str	r3, [r4, #4]
 8016912:	89a3      	ldrh	r3, [r4, #12]
 8016914:	f043 0320 	orr.w	r3, r3, #32
 8016918:	81a3      	strh	r3, [r4, #12]
 801691a:	f04f 30ff 	mov.w	r0, #4294967295
 801691e:	e7f3      	b.n	8016908 <__ssrefill_r+0x22>

08016920 <__ssvfiscanf_r>:
 8016920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016924:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016928:	460c      	mov	r4, r1
 801692a:	2100      	movs	r1, #0
 801692c:	9144      	str	r1, [sp, #272]	; 0x110
 801692e:	9145      	str	r1, [sp, #276]	; 0x114
 8016930:	499f      	ldr	r1, [pc, #636]	; (8016bb0 <__ssvfiscanf_r+0x290>)
 8016932:	91a0      	str	r1, [sp, #640]	; 0x280
 8016934:	f10d 0804 	add.w	r8, sp, #4
 8016938:	499e      	ldr	r1, [pc, #632]	; (8016bb4 <__ssvfiscanf_r+0x294>)
 801693a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8016bb8 <__ssvfiscanf_r+0x298>
 801693e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016942:	4606      	mov	r6, r0
 8016944:	4692      	mov	sl, r2
 8016946:	91a1      	str	r1, [sp, #644]	; 0x284
 8016948:	9300      	str	r3, [sp, #0]
 801694a:	270a      	movs	r7, #10
 801694c:	f89a 3000 	ldrb.w	r3, [sl]
 8016950:	2b00      	cmp	r3, #0
 8016952:	f000 812a 	beq.w	8016baa <__ssvfiscanf_r+0x28a>
 8016956:	4655      	mov	r5, sl
 8016958:	f7ff f8d2 	bl	8015b00 <__locale_ctype_ptr>
 801695c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016960:	4458      	add	r0, fp
 8016962:	7843      	ldrb	r3, [r0, #1]
 8016964:	f013 0308 	ands.w	r3, r3, #8
 8016968:	d01c      	beq.n	80169a4 <__ssvfiscanf_r+0x84>
 801696a:	6863      	ldr	r3, [r4, #4]
 801696c:	2b00      	cmp	r3, #0
 801696e:	dd12      	ble.n	8016996 <__ssvfiscanf_r+0x76>
 8016970:	f7ff f8c6 	bl	8015b00 <__locale_ctype_ptr>
 8016974:	6823      	ldr	r3, [r4, #0]
 8016976:	781a      	ldrb	r2, [r3, #0]
 8016978:	4410      	add	r0, r2
 801697a:	7842      	ldrb	r2, [r0, #1]
 801697c:	0712      	lsls	r2, r2, #28
 801697e:	d401      	bmi.n	8016984 <__ssvfiscanf_r+0x64>
 8016980:	46aa      	mov	sl, r5
 8016982:	e7e3      	b.n	801694c <__ssvfiscanf_r+0x2c>
 8016984:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016986:	3201      	adds	r2, #1
 8016988:	9245      	str	r2, [sp, #276]	; 0x114
 801698a:	6862      	ldr	r2, [r4, #4]
 801698c:	3301      	adds	r3, #1
 801698e:	3a01      	subs	r2, #1
 8016990:	6062      	str	r2, [r4, #4]
 8016992:	6023      	str	r3, [r4, #0]
 8016994:	e7e9      	b.n	801696a <__ssvfiscanf_r+0x4a>
 8016996:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016998:	4621      	mov	r1, r4
 801699a:	4630      	mov	r0, r6
 801699c:	4798      	blx	r3
 801699e:	2800      	cmp	r0, #0
 80169a0:	d0e6      	beq.n	8016970 <__ssvfiscanf_r+0x50>
 80169a2:	e7ed      	b.n	8016980 <__ssvfiscanf_r+0x60>
 80169a4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80169a8:	f040 8082 	bne.w	8016ab0 <__ssvfiscanf_r+0x190>
 80169ac:	9343      	str	r3, [sp, #268]	; 0x10c
 80169ae:	9341      	str	r3, [sp, #260]	; 0x104
 80169b0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80169b4:	2b2a      	cmp	r3, #42	; 0x2a
 80169b6:	d103      	bne.n	80169c0 <__ssvfiscanf_r+0xa0>
 80169b8:	2310      	movs	r3, #16
 80169ba:	9341      	str	r3, [sp, #260]	; 0x104
 80169bc:	f10a 0502 	add.w	r5, sl, #2
 80169c0:	46aa      	mov	sl, r5
 80169c2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80169c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80169ca:	2a09      	cmp	r2, #9
 80169cc:	d922      	bls.n	8016a14 <__ssvfiscanf_r+0xf4>
 80169ce:	2203      	movs	r2, #3
 80169d0:	4879      	ldr	r0, [pc, #484]	; (8016bb8 <__ssvfiscanf_r+0x298>)
 80169d2:	f7e9 fc1d 	bl	8000210 <memchr>
 80169d6:	b138      	cbz	r0, 80169e8 <__ssvfiscanf_r+0xc8>
 80169d8:	eba0 0309 	sub.w	r3, r0, r9
 80169dc:	2001      	movs	r0, #1
 80169de:	4098      	lsls	r0, r3
 80169e0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80169e2:	4318      	orrs	r0, r3
 80169e4:	9041      	str	r0, [sp, #260]	; 0x104
 80169e6:	46aa      	mov	sl, r5
 80169e8:	f89a 3000 	ldrb.w	r3, [sl]
 80169ec:	2b67      	cmp	r3, #103	; 0x67
 80169ee:	f10a 0501 	add.w	r5, sl, #1
 80169f2:	d82b      	bhi.n	8016a4c <__ssvfiscanf_r+0x12c>
 80169f4:	2b65      	cmp	r3, #101	; 0x65
 80169f6:	f080 809f 	bcs.w	8016b38 <__ssvfiscanf_r+0x218>
 80169fa:	2b47      	cmp	r3, #71	; 0x47
 80169fc:	d810      	bhi.n	8016a20 <__ssvfiscanf_r+0x100>
 80169fe:	2b45      	cmp	r3, #69	; 0x45
 8016a00:	f080 809a 	bcs.w	8016b38 <__ssvfiscanf_r+0x218>
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d06c      	beq.n	8016ae2 <__ssvfiscanf_r+0x1c2>
 8016a08:	2b25      	cmp	r3, #37	; 0x25
 8016a0a:	d051      	beq.n	8016ab0 <__ssvfiscanf_r+0x190>
 8016a0c:	2303      	movs	r3, #3
 8016a0e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016a10:	9742      	str	r7, [sp, #264]	; 0x108
 8016a12:	e027      	b.n	8016a64 <__ssvfiscanf_r+0x144>
 8016a14:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016a16:	fb07 1303 	mla	r3, r7, r3, r1
 8016a1a:	3b30      	subs	r3, #48	; 0x30
 8016a1c:	9343      	str	r3, [sp, #268]	; 0x10c
 8016a1e:	e7cf      	b.n	80169c0 <__ssvfiscanf_r+0xa0>
 8016a20:	2b5b      	cmp	r3, #91	; 0x5b
 8016a22:	d06a      	beq.n	8016afa <__ssvfiscanf_r+0x1da>
 8016a24:	d80c      	bhi.n	8016a40 <__ssvfiscanf_r+0x120>
 8016a26:	2b58      	cmp	r3, #88	; 0x58
 8016a28:	d1f0      	bne.n	8016a0c <__ssvfiscanf_r+0xec>
 8016a2a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016a30:	9241      	str	r2, [sp, #260]	; 0x104
 8016a32:	2210      	movs	r2, #16
 8016a34:	9242      	str	r2, [sp, #264]	; 0x108
 8016a36:	2b6e      	cmp	r3, #110	; 0x6e
 8016a38:	bf8c      	ite	hi
 8016a3a:	2304      	movhi	r3, #4
 8016a3c:	2303      	movls	r3, #3
 8016a3e:	e010      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016a40:	2b63      	cmp	r3, #99	; 0x63
 8016a42:	d065      	beq.n	8016b10 <__ssvfiscanf_r+0x1f0>
 8016a44:	2b64      	cmp	r3, #100	; 0x64
 8016a46:	d1e1      	bne.n	8016a0c <__ssvfiscanf_r+0xec>
 8016a48:	9742      	str	r7, [sp, #264]	; 0x108
 8016a4a:	e7f4      	b.n	8016a36 <__ssvfiscanf_r+0x116>
 8016a4c:	2b70      	cmp	r3, #112	; 0x70
 8016a4e:	d04b      	beq.n	8016ae8 <__ssvfiscanf_r+0x1c8>
 8016a50:	d826      	bhi.n	8016aa0 <__ssvfiscanf_r+0x180>
 8016a52:	2b6e      	cmp	r3, #110	; 0x6e
 8016a54:	d062      	beq.n	8016b1c <__ssvfiscanf_r+0x1fc>
 8016a56:	d84c      	bhi.n	8016af2 <__ssvfiscanf_r+0x1d2>
 8016a58:	2b69      	cmp	r3, #105	; 0x69
 8016a5a:	d1d7      	bne.n	8016a0c <__ssvfiscanf_r+0xec>
 8016a5c:	2300      	movs	r3, #0
 8016a5e:	9342      	str	r3, [sp, #264]	; 0x108
 8016a60:	2303      	movs	r3, #3
 8016a62:	9347      	str	r3, [sp, #284]	; 0x11c
 8016a64:	6863      	ldr	r3, [r4, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	dd68      	ble.n	8016b3c <__ssvfiscanf_r+0x21c>
 8016a6a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016a6c:	0659      	lsls	r1, r3, #25
 8016a6e:	d407      	bmi.n	8016a80 <__ssvfiscanf_r+0x160>
 8016a70:	f7ff f846 	bl	8015b00 <__locale_ctype_ptr>
 8016a74:	6823      	ldr	r3, [r4, #0]
 8016a76:	781a      	ldrb	r2, [r3, #0]
 8016a78:	4410      	add	r0, r2
 8016a7a:	7842      	ldrb	r2, [r0, #1]
 8016a7c:	0712      	lsls	r2, r2, #28
 8016a7e:	d464      	bmi.n	8016b4a <__ssvfiscanf_r+0x22a>
 8016a80:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016a82:	2b02      	cmp	r3, #2
 8016a84:	dc73      	bgt.n	8016b6e <__ssvfiscanf_r+0x24e>
 8016a86:	466b      	mov	r3, sp
 8016a88:	4622      	mov	r2, r4
 8016a8a:	a941      	add	r1, sp, #260	; 0x104
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f000 f9d7 	bl	8016e40 <_scanf_chars>
 8016a92:	2801      	cmp	r0, #1
 8016a94:	f000 8089 	beq.w	8016baa <__ssvfiscanf_r+0x28a>
 8016a98:	2802      	cmp	r0, #2
 8016a9a:	f47f af71 	bne.w	8016980 <__ssvfiscanf_r+0x60>
 8016a9e:	e01d      	b.n	8016adc <__ssvfiscanf_r+0x1bc>
 8016aa0:	2b75      	cmp	r3, #117	; 0x75
 8016aa2:	d0d1      	beq.n	8016a48 <__ssvfiscanf_r+0x128>
 8016aa4:	2b78      	cmp	r3, #120	; 0x78
 8016aa6:	d0c0      	beq.n	8016a2a <__ssvfiscanf_r+0x10a>
 8016aa8:	2b73      	cmp	r3, #115	; 0x73
 8016aaa:	d1af      	bne.n	8016a0c <__ssvfiscanf_r+0xec>
 8016aac:	2302      	movs	r3, #2
 8016aae:	e7d8      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016ab0:	6863      	ldr	r3, [r4, #4]
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	dd0c      	ble.n	8016ad0 <__ssvfiscanf_r+0x1b0>
 8016ab6:	6823      	ldr	r3, [r4, #0]
 8016ab8:	781a      	ldrb	r2, [r3, #0]
 8016aba:	455a      	cmp	r2, fp
 8016abc:	d175      	bne.n	8016baa <__ssvfiscanf_r+0x28a>
 8016abe:	3301      	adds	r3, #1
 8016ac0:	6862      	ldr	r2, [r4, #4]
 8016ac2:	6023      	str	r3, [r4, #0]
 8016ac4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016ac6:	3a01      	subs	r2, #1
 8016ac8:	3301      	adds	r3, #1
 8016aca:	6062      	str	r2, [r4, #4]
 8016acc:	9345      	str	r3, [sp, #276]	; 0x114
 8016ace:	e757      	b.n	8016980 <__ssvfiscanf_r+0x60>
 8016ad0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ad2:	4621      	mov	r1, r4
 8016ad4:	4630      	mov	r0, r6
 8016ad6:	4798      	blx	r3
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	d0ec      	beq.n	8016ab6 <__ssvfiscanf_r+0x196>
 8016adc:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016ade:	2800      	cmp	r0, #0
 8016ae0:	d159      	bne.n	8016b96 <__ssvfiscanf_r+0x276>
 8016ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8016ae6:	e05c      	b.n	8016ba2 <__ssvfiscanf_r+0x282>
 8016ae8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016aea:	f042 0220 	orr.w	r2, r2, #32
 8016aee:	9241      	str	r2, [sp, #260]	; 0x104
 8016af0:	e79b      	b.n	8016a2a <__ssvfiscanf_r+0x10a>
 8016af2:	2308      	movs	r3, #8
 8016af4:	9342      	str	r3, [sp, #264]	; 0x108
 8016af6:	2304      	movs	r3, #4
 8016af8:	e7b3      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016afa:	4629      	mov	r1, r5
 8016afc:	4640      	mov	r0, r8
 8016afe:	f000 fb19 	bl	8017134 <__sccl>
 8016b02:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b08:	9341      	str	r3, [sp, #260]	; 0x104
 8016b0a:	4605      	mov	r5, r0
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	e7a8      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016b10:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b16:	9341      	str	r3, [sp, #260]	; 0x104
 8016b18:	2300      	movs	r3, #0
 8016b1a:	e7a2      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016b1c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8016b1e:	06c3      	lsls	r3, r0, #27
 8016b20:	f53f af2e 	bmi.w	8016980 <__ssvfiscanf_r+0x60>
 8016b24:	9b00      	ldr	r3, [sp, #0]
 8016b26:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b28:	1d19      	adds	r1, r3, #4
 8016b2a:	9100      	str	r1, [sp, #0]
 8016b2c:	681b      	ldr	r3, [r3, #0]
 8016b2e:	07c0      	lsls	r0, r0, #31
 8016b30:	bf4c      	ite	mi
 8016b32:	801a      	strhmi	r2, [r3, #0]
 8016b34:	601a      	strpl	r2, [r3, #0]
 8016b36:	e723      	b.n	8016980 <__ssvfiscanf_r+0x60>
 8016b38:	2305      	movs	r3, #5
 8016b3a:	e792      	b.n	8016a62 <__ssvfiscanf_r+0x142>
 8016b3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b3e:	4621      	mov	r1, r4
 8016b40:	4630      	mov	r0, r6
 8016b42:	4798      	blx	r3
 8016b44:	2800      	cmp	r0, #0
 8016b46:	d090      	beq.n	8016a6a <__ssvfiscanf_r+0x14a>
 8016b48:	e7c8      	b.n	8016adc <__ssvfiscanf_r+0x1bc>
 8016b4a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016b4c:	3201      	adds	r2, #1
 8016b4e:	9245      	str	r2, [sp, #276]	; 0x114
 8016b50:	6862      	ldr	r2, [r4, #4]
 8016b52:	3a01      	subs	r2, #1
 8016b54:	2a00      	cmp	r2, #0
 8016b56:	6062      	str	r2, [r4, #4]
 8016b58:	dd02      	ble.n	8016b60 <__ssvfiscanf_r+0x240>
 8016b5a:	3301      	adds	r3, #1
 8016b5c:	6023      	str	r3, [r4, #0]
 8016b5e:	e787      	b.n	8016a70 <__ssvfiscanf_r+0x150>
 8016b60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016b62:	4621      	mov	r1, r4
 8016b64:	4630      	mov	r0, r6
 8016b66:	4798      	blx	r3
 8016b68:	2800      	cmp	r0, #0
 8016b6a:	d081      	beq.n	8016a70 <__ssvfiscanf_r+0x150>
 8016b6c:	e7b6      	b.n	8016adc <__ssvfiscanf_r+0x1bc>
 8016b6e:	2b04      	cmp	r3, #4
 8016b70:	dc06      	bgt.n	8016b80 <__ssvfiscanf_r+0x260>
 8016b72:	466b      	mov	r3, sp
 8016b74:	4622      	mov	r2, r4
 8016b76:	a941      	add	r1, sp, #260	; 0x104
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f000 f9c5 	bl	8016f08 <_scanf_i>
 8016b7e:	e788      	b.n	8016a92 <__ssvfiscanf_r+0x172>
 8016b80:	4b0e      	ldr	r3, [pc, #56]	; (8016bbc <__ssvfiscanf_r+0x29c>)
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	f43f aefc 	beq.w	8016980 <__ssvfiscanf_r+0x60>
 8016b88:	466b      	mov	r3, sp
 8016b8a:	4622      	mov	r2, r4
 8016b8c:	a941      	add	r1, sp, #260	; 0x104
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f7fc f9ee 	bl	8012f70 <_scanf_float>
 8016b94:	e77d      	b.n	8016a92 <__ssvfiscanf_r+0x172>
 8016b96:	89a3      	ldrh	r3, [r4, #12]
 8016b98:	f013 0f40 	tst.w	r3, #64	; 0x40
 8016b9c:	bf18      	it	ne
 8016b9e:	f04f 30ff 	movne.w	r0, #4294967295
 8016ba2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8016ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016baa:	9844      	ldr	r0, [sp, #272]	; 0x110
 8016bac:	e7f9      	b.n	8016ba2 <__ssvfiscanf_r+0x282>
 8016bae:	bf00      	nop
 8016bb0:	0801686d 	.word	0x0801686d
 8016bb4:	080168e7 	.word	0x080168e7
 8016bb8:	08017d82 	.word	0x08017d82
 8016bbc:	08012f71 	.word	0x08012f71

08016bc0 <__sfputc_r>:
 8016bc0:	6893      	ldr	r3, [r2, #8]
 8016bc2:	3b01      	subs	r3, #1
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	b410      	push	{r4}
 8016bc8:	6093      	str	r3, [r2, #8]
 8016bca:	da08      	bge.n	8016bde <__sfputc_r+0x1e>
 8016bcc:	6994      	ldr	r4, [r2, #24]
 8016bce:	42a3      	cmp	r3, r4
 8016bd0:	db01      	blt.n	8016bd6 <__sfputc_r+0x16>
 8016bd2:	290a      	cmp	r1, #10
 8016bd4:	d103      	bne.n	8016bde <__sfputc_r+0x1e>
 8016bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bda:	f7fd bbc7 	b.w	801436c <__swbuf_r>
 8016bde:	6813      	ldr	r3, [r2, #0]
 8016be0:	1c58      	adds	r0, r3, #1
 8016be2:	6010      	str	r0, [r2, #0]
 8016be4:	7019      	strb	r1, [r3, #0]
 8016be6:	4608      	mov	r0, r1
 8016be8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bec:	4770      	bx	lr

08016bee <__sfputs_r>:
 8016bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bf0:	4606      	mov	r6, r0
 8016bf2:	460f      	mov	r7, r1
 8016bf4:	4614      	mov	r4, r2
 8016bf6:	18d5      	adds	r5, r2, r3
 8016bf8:	42ac      	cmp	r4, r5
 8016bfa:	d101      	bne.n	8016c00 <__sfputs_r+0x12>
 8016bfc:	2000      	movs	r0, #0
 8016bfe:	e007      	b.n	8016c10 <__sfputs_r+0x22>
 8016c00:	463a      	mov	r2, r7
 8016c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c06:	4630      	mov	r0, r6
 8016c08:	f7ff ffda 	bl	8016bc0 <__sfputc_r>
 8016c0c:	1c43      	adds	r3, r0, #1
 8016c0e:	d1f3      	bne.n	8016bf8 <__sfputs_r+0xa>
 8016c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c14 <_vfiprintf_r>:
 8016c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c18:	460c      	mov	r4, r1
 8016c1a:	b09d      	sub	sp, #116	; 0x74
 8016c1c:	4617      	mov	r7, r2
 8016c1e:	461d      	mov	r5, r3
 8016c20:	4606      	mov	r6, r0
 8016c22:	b118      	cbz	r0, 8016c2c <_vfiprintf_r+0x18>
 8016c24:	6983      	ldr	r3, [r0, #24]
 8016c26:	b90b      	cbnz	r3, 8016c2c <_vfiprintf_r+0x18>
 8016c28:	f7fe fbb6 	bl	8015398 <__sinit>
 8016c2c:	4b7c      	ldr	r3, [pc, #496]	; (8016e20 <_vfiprintf_r+0x20c>)
 8016c2e:	429c      	cmp	r4, r3
 8016c30:	d158      	bne.n	8016ce4 <_vfiprintf_r+0xd0>
 8016c32:	6874      	ldr	r4, [r6, #4]
 8016c34:	89a3      	ldrh	r3, [r4, #12]
 8016c36:	0718      	lsls	r0, r3, #28
 8016c38:	d55e      	bpl.n	8016cf8 <_vfiprintf_r+0xe4>
 8016c3a:	6923      	ldr	r3, [r4, #16]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d05b      	beq.n	8016cf8 <_vfiprintf_r+0xe4>
 8016c40:	2300      	movs	r3, #0
 8016c42:	9309      	str	r3, [sp, #36]	; 0x24
 8016c44:	2320      	movs	r3, #32
 8016c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016c4a:	2330      	movs	r3, #48	; 0x30
 8016c4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016c50:	9503      	str	r5, [sp, #12]
 8016c52:	f04f 0b01 	mov.w	fp, #1
 8016c56:	46b8      	mov	r8, r7
 8016c58:	4645      	mov	r5, r8
 8016c5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016c5e:	b10b      	cbz	r3, 8016c64 <_vfiprintf_r+0x50>
 8016c60:	2b25      	cmp	r3, #37	; 0x25
 8016c62:	d154      	bne.n	8016d0e <_vfiprintf_r+0xfa>
 8016c64:	ebb8 0a07 	subs.w	sl, r8, r7
 8016c68:	d00b      	beq.n	8016c82 <_vfiprintf_r+0x6e>
 8016c6a:	4653      	mov	r3, sl
 8016c6c:	463a      	mov	r2, r7
 8016c6e:	4621      	mov	r1, r4
 8016c70:	4630      	mov	r0, r6
 8016c72:	f7ff ffbc 	bl	8016bee <__sfputs_r>
 8016c76:	3001      	adds	r0, #1
 8016c78:	f000 80c2 	beq.w	8016e00 <_vfiprintf_r+0x1ec>
 8016c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c7e:	4453      	add	r3, sl
 8016c80:	9309      	str	r3, [sp, #36]	; 0x24
 8016c82:	f898 3000 	ldrb.w	r3, [r8]
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 80ba 	beq.w	8016e00 <_vfiprintf_r+0x1ec>
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c96:	9304      	str	r3, [sp, #16]
 8016c98:	9307      	str	r3, [sp, #28]
 8016c9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c9e:	931a      	str	r3, [sp, #104]	; 0x68
 8016ca0:	46a8      	mov	r8, r5
 8016ca2:	2205      	movs	r2, #5
 8016ca4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016ca8:	485e      	ldr	r0, [pc, #376]	; (8016e24 <_vfiprintf_r+0x210>)
 8016caa:	f7e9 fab1 	bl	8000210 <memchr>
 8016cae:	9b04      	ldr	r3, [sp, #16]
 8016cb0:	bb78      	cbnz	r0, 8016d12 <_vfiprintf_r+0xfe>
 8016cb2:	06d9      	lsls	r1, r3, #27
 8016cb4:	bf44      	itt	mi
 8016cb6:	2220      	movmi	r2, #32
 8016cb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cbc:	071a      	lsls	r2, r3, #28
 8016cbe:	bf44      	itt	mi
 8016cc0:	222b      	movmi	r2, #43	; 0x2b
 8016cc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016cc6:	782a      	ldrb	r2, [r5, #0]
 8016cc8:	2a2a      	cmp	r2, #42	; 0x2a
 8016cca:	d02a      	beq.n	8016d22 <_vfiprintf_r+0x10e>
 8016ccc:	9a07      	ldr	r2, [sp, #28]
 8016cce:	46a8      	mov	r8, r5
 8016cd0:	2000      	movs	r0, #0
 8016cd2:	250a      	movs	r5, #10
 8016cd4:	4641      	mov	r1, r8
 8016cd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016cda:	3b30      	subs	r3, #48	; 0x30
 8016cdc:	2b09      	cmp	r3, #9
 8016cde:	d969      	bls.n	8016db4 <_vfiprintf_r+0x1a0>
 8016ce0:	b360      	cbz	r0, 8016d3c <_vfiprintf_r+0x128>
 8016ce2:	e024      	b.n	8016d2e <_vfiprintf_r+0x11a>
 8016ce4:	4b50      	ldr	r3, [pc, #320]	; (8016e28 <_vfiprintf_r+0x214>)
 8016ce6:	429c      	cmp	r4, r3
 8016ce8:	d101      	bne.n	8016cee <_vfiprintf_r+0xda>
 8016cea:	68b4      	ldr	r4, [r6, #8]
 8016cec:	e7a2      	b.n	8016c34 <_vfiprintf_r+0x20>
 8016cee:	4b4f      	ldr	r3, [pc, #316]	; (8016e2c <_vfiprintf_r+0x218>)
 8016cf0:	429c      	cmp	r4, r3
 8016cf2:	bf08      	it	eq
 8016cf4:	68f4      	ldreq	r4, [r6, #12]
 8016cf6:	e79d      	b.n	8016c34 <_vfiprintf_r+0x20>
 8016cf8:	4621      	mov	r1, r4
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	f7fd fb9a 	bl	8014434 <__swsetup_r>
 8016d00:	2800      	cmp	r0, #0
 8016d02:	d09d      	beq.n	8016c40 <_vfiprintf_r+0x2c>
 8016d04:	f04f 30ff 	mov.w	r0, #4294967295
 8016d08:	b01d      	add	sp, #116	; 0x74
 8016d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d0e:	46a8      	mov	r8, r5
 8016d10:	e7a2      	b.n	8016c58 <_vfiprintf_r+0x44>
 8016d12:	4a44      	ldr	r2, [pc, #272]	; (8016e24 <_vfiprintf_r+0x210>)
 8016d14:	1a80      	subs	r0, r0, r2
 8016d16:	fa0b f000 	lsl.w	r0, fp, r0
 8016d1a:	4318      	orrs	r0, r3
 8016d1c:	9004      	str	r0, [sp, #16]
 8016d1e:	4645      	mov	r5, r8
 8016d20:	e7be      	b.n	8016ca0 <_vfiprintf_r+0x8c>
 8016d22:	9a03      	ldr	r2, [sp, #12]
 8016d24:	1d11      	adds	r1, r2, #4
 8016d26:	6812      	ldr	r2, [r2, #0]
 8016d28:	9103      	str	r1, [sp, #12]
 8016d2a:	2a00      	cmp	r2, #0
 8016d2c:	db01      	blt.n	8016d32 <_vfiprintf_r+0x11e>
 8016d2e:	9207      	str	r2, [sp, #28]
 8016d30:	e004      	b.n	8016d3c <_vfiprintf_r+0x128>
 8016d32:	4252      	negs	r2, r2
 8016d34:	f043 0302 	orr.w	r3, r3, #2
 8016d38:	9207      	str	r2, [sp, #28]
 8016d3a:	9304      	str	r3, [sp, #16]
 8016d3c:	f898 3000 	ldrb.w	r3, [r8]
 8016d40:	2b2e      	cmp	r3, #46	; 0x2e
 8016d42:	d10e      	bne.n	8016d62 <_vfiprintf_r+0x14e>
 8016d44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016d48:	2b2a      	cmp	r3, #42	; 0x2a
 8016d4a:	d138      	bne.n	8016dbe <_vfiprintf_r+0x1aa>
 8016d4c:	9b03      	ldr	r3, [sp, #12]
 8016d4e:	1d1a      	adds	r2, r3, #4
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	9203      	str	r2, [sp, #12]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	bfb8      	it	lt
 8016d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8016d5c:	f108 0802 	add.w	r8, r8, #2
 8016d60:	9305      	str	r3, [sp, #20]
 8016d62:	4d33      	ldr	r5, [pc, #204]	; (8016e30 <_vfiprintf_r+0x21c>)
 8016d64:	f898 1000 	ldrb.w	r1, [r8]
 8016d68:	2203      	movs	r2, #3
 8016d6a:	4628      	mov	r0, r5
 8016d6c:	f7e9 fa50 	bl	8000210 <memchr>
 8016d70:	b140      	cbz	r0, 8016d84 <_vfiprintf_r+0x170>
 8016d72:	2340      	movs	r3, #64	; 0x40
 8016d74:	1b40      	subs	r0, r0, r5
 8016d76:	fa03 f000 	lsl.w	r0, r3, r0
 8016d7a:	9b04      	ldr	r3, [sp, #16]
 8016d7c:	4303      	orrs	r3, r0
 8016d7e:	f108 0801 	add.w	r8, r8, #1
 8016d82:	9304      	str	r3, [sp, #16]
 8016d84:	f898 1000 	ldrb.w	r1, [r8]
 8016d88:	482a      	ldr	r0, [pc, #168]	; (8016e34 <_vfiprintf_r+0x220>)
 8016d8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016d8e:	2206      	movs	r2, #6
 8016d90:	f108 0701 	add.w	r7, r8, #1
 8016d94:	f7e9 fa3c 	bl	8000210 <memchr>
 8016d98:	2800      	cmp	r0, #0
 8016d9a:	d037      	beq.n	8016e0c <_vfiprintf_r+0x1f8>
 8016d9c:	4b26      	ldr	r3, [pc, #152]	; (8016e38 <_vfiprintf_r+0x224>)
 8016d9e:	bb1b      	cbnz	r3, 8016de8 <_vfiprintf_r+0x1d4>
 8016da0:	9b03      	ldr	r3, [sp, #12]
 8016da2:	3307      	adds	r3, #7
 8016da4:	f023 0307 	bic.w	r3, r3, #7
 8016da8:	3308      	adds	r3, #8
 8016daa:	9303      	str	r3, [sp, #12]
 8016dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dae:	444b      	add	r3, r9
 8016db0:	9309      	str	r3, [sp, #36]	; 0x24
 8016db2:	e750      	b.n	8016c56 <_vfiprintf_r+0x42>
 8016db4:	fb05 3202 	mla	r2, r5, r2, r3
 8016db8:	2001      	movs	r0, #1
 8016dba:	4688      	mov	r8, r1
 8016dbc:	e78a      	b.n	8016cd4 <_vfiprintf_r+0xc0>
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	f108 0801 	add.w	r8, r8, #1
 8016dc4:	9305      	str	r3, [sp, #20]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	250a      	movs	r5, #10
 8016dca:	4640      	mov	r0, r8
 8016dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016dd0:	3a30      	subs	r2, #48	; 0x30
 8016dd2:	2a09      	cmp	r2, #9
 8016dd4:	d903      	bls.n	8016dde <_vfiprintf_r+0x1ca>
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d0c3      	beq.n	8016d62 <_vfiprintf_r+0x14e>
 8016dda:	9105      	str	r1, [sp, #20]
 8016ddc:	e7c1      	b.n	8016d62 <_vfiprintf_r+0x14e>
 8016dde:	fb05 2101 	mla	r1, r5, r1, r2
 8016de2:	2301      	movs	r3, #1
 8016de4:	4680      	mov	r8, r0
 8016de6:	e7f0      	b.n	8016dca <_vfiprintf_r+0x1b6>
 8016de8:	ab03      	add	r3, sp, #12
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	4622      	mov	r2, r4
 8016dee:	4b13      	ldr	r3, [pc, #76]	; (8016e3c <_vfiprintf_r+0x228>)
 8016df0:	a904      	add	r1, sp, #16
 8016df2:	4630      	mov	r0, r6
 8016df4:	f7fb fcf4 	bl	80127e0 <_printf_float>
 8016df8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016dfc:	4681      	mov	r9, r0
 8016dfe:	d1d5      	bne.n	8016dac <_vfiprintf_r+0x198>
 8016e00:	89a3      	ldrh	r3, [r4, #12]
 8016e02:	065b      	lsls	r3, r3, #25
 8016e04:	f53f af7e 	bmi.w	8016d04 <_vfiprintf_r+0xf0>
 8016e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e0a:	e77d      	b.n	8016d08 <_vfiprintf_r+0xf4>
 8016e0c:	ab03      	add	r3, sp, #12
 8016e0e:	9300      	str	r3, [sp, #0]
 8016e10:	4622      	mov	r2, r4
 8016e12:	4b0a      	ldr	r3, [pc, #40]	; (8016e3c <_vfiprintf_r+0x228>)
 8016e14:	a904      	add	r1, sp, #16
 8016e16:	4630      	mov	r0, r6
 8016e18:	f7fb ff98 	bl	8012d4c <_printf_i>
 8016e1c:	e7ec      	b.n	8016df8 <_vfiprintf_r+0x1e4>
 8016e1e:	bf00      	nop
 8016e20:	08017c30 	.word	0x08017c30
 8016e24:	08017d7c 	.word	0x08017d7c
 8016e28:	08017c50 	.word	0x08017c50
 8016e2c:	08017c10 	.word	0x08017c10
 8016e30:	08017d82 	.word	0x08017d82
 8016e34:	08017d86 	.word	0x08017d86
 8016e38:	080127e1 	.word	0x080127e1
 8016e3c:	08016bef 	.word	0x08016bef

08016e40 <_scanf_chars>:
 8016e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e44:	4615      	mov	r5, r2
 8016e46:	688a      	ldr	r2, [r1, #8]
 8016e48:	4680      	mov	r8, r0
 8016e4a:	460c      	mov	r4, r1
 8016e4c:	b932      	cbnz	r2, 8016e5c <_scanf_chars+0x1c>
 8016e4e:	698a      	ldr	r2, [r1, #24]
 8016e50:	2a00      	cmp	r2, #0
 8016e52:	bf14      	ite	ne
 8016e54:	f04f 32ff 	movne.w	r2, #4294967295
 8016e58:	2201      	moveq	r2, #1
 8016e5a:	608a      	str	r2, [r1, #8]
 8016e5c:	6822      	ldr	r2, [r4, #0]
 8016e5e:	06d1      	lsls	r1, r2, #27
 8016e60:	bf5f      	itttt	pl
 8016e62:	681a      	ldrpl	r2, [r3, #0]
 8016e64:	1d11      	addpl	r1, r2, #4
 8016e66:	6019      	strpl	r1, [r3, #0]
 8016e68:	6817      	ldrpl	r7, [r2, #0]
 8016e6a:	2600      	movs	r6, #0
 8016e6c:	69a3      	ldr	r3, [r4, #24]
 8016e6e:	b1db      	cbz	r3, 8016ea8 <_scanf_chars+0x68>
 8016e70:	2b01      	cmp	r3, #1
 8016e72:	d107      	bne.n	8016e84 <_scanf_chars+0x44>
 8016e74:	682b      	ldr	r3, [r5, #0]
 8016e76:	6962      	ldr	r2, [r4, #20]
 8016e78:	781b      	ldrb	r3, [r3, #0]
 8016e7a:	5cd3      	ldrb	r3, [r2, r3]
 8016e7c:	b9a3      	cbnz	r3, 8016ea8 <_scanf_chars+0x68>
 8016e7e:	2e00      	cmp	r6, #0
 8016e80:	d132      	bne.n	8016ee8 <_scanf_chars+0xa8>
 8016e82:	e006      	b.n	8016e92 <_scanf_chars+0x52>
 8016e84:	2b02      	cmp	r3, #2
 8016e86:	d007      	beq.n	8016e98 <_scanf_chars+0x58>
 8016e88:	2e00      	cmp	r6, #0
 8016e8a:	d12d      	bne.n	8016ee8 <_scanf_chars+0xa8>
 8016e8c:	69a3      	ldr	r3, [r4, #24]
 8016e8e:	2b01      	cmp	r3, #1
 8016e90:	d12a      	bne.n	8016ee8 <_scanf_chars+0xa8>
 8016e92:	2001      	movs	r0, #1
 8016e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e98:	f7fe fe32 	bl	8015b00 <__locale_ctype_ptr>
 8016e9c:	682b      	ldr	r3, [r5, #0]
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	4418      	add	r0, r3
 8016ea2:	7843      	ldrb	r3, [r0, #1]
 8016ea4:	071b      	lsls	r3, r3, #28
 8016ea6:	d4ef      	bmi.n	8016e88 <_scanf_chars+0x48>
 8016ea8:	6823      	ldr	r3, [r4, #0]
 8016eaa:	06da      	lsls	r2, r3, #27
 8016eac:	bf5e      	ittt	pl
 8016eae:	682b      	ldrpl	r3, [r5, #0]
 8016eb0:	781b      	ldrbpl	r3, [r3, #0]
 8016eb2:	703b      	strbpl	r3, [r7, #0]
 8016eb4:	682a      	ldr	r2, [r5, #0]
 8016eb6:	686b      	ldr	r3, [r5, #4]
 8016eb8:	f102 0201 	add.w	r2, r2, #1
 8016ebc:	602a      	str	r2, [r5, #0]
 8016ebe:	68a2      	ldr	r2, [r4, #8]
 8016ec0:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ec4:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ec8:	606b      	str	r3, [r5, #4]
 8016eca:	f106 0601 	add.w	r6, r6, #1
 8016ece:	bf58      	it	pl
 8016ed0:	3701      	addpl	r7, #1
 8016ed2:	60a2      	str	r2, [r4, #8]
 8016ed4:	b142      	cbz	r2, 8016ee8 <_scanf_chars+0xa8>
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	dcc8      	bgt.n	8016e6c <_scanf_chars+0x2c>
 8016eda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016ede:	4629      	mov	r1, r5
 8016ee0:	4640      	mov	r0, r8
 8016ee2:	4798      	blx	r3
 8016ee4:	2800      	cmp	r0, #0
 8016ee6:	d0c1      	beq.n	8016e6c <_scanf_chars+0x2c>
 8016ee8:	6823      	ldr	r3, [r4, #0]
 8016eea:	f013 0310 	ands.w	r3, r3, #16
 8016eee:	d105      	bne.n	8016efc <_scanf_chars+0xbc>
 8016ef0:	68e2      	ldr	r2, [r4, #12]
 8016ef2:	3201      	adds	r2, #1
 8016ef4:	60e2      	str	r2, [r4, #12]
 8016ef6:	69a2      	ldr	r2, [r4, #24]
 8016ef8:	b102      	cbz	r2, 8016efc <_scanf_chars+0xbc>
 8016efa:	703b      	strb	r3, [r7, #0]
 8016efc:	6923      	ldr	r3, [r4, #16]
 8016efe:	441e      	add	r6, r3
 8016f00:	6126      	str	r6, [r4, #16]
 8016f02:	2000      	movs	r0, #0
 8016f04:	e7c6      	b.n	8016e94 <_scanf_chars+0x54>
	...

08016f08 <_scanf_i>:
 8016f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f0c:	469a      	mov	sl, r3
 8016f0e:	4b74      	ldr	r3, [pc, #464]	; (80170e0 <_scanf_i+0x1d8>)
 8016f10:	460c      	mov	r4, r1
 8016f12:	4683      	mov	fp, r0
 8016f14:	4616      	mov	r6, r2
 8016f16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016f1a:	b087      	sub	sp, #28
 8016f1c:	ab03      	add	r3, sp, #12
 8016f1e:	68a7      	ldr	r7, [r4, #8]
 8016f20:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016f24:	4b6f      	ldr	r3, [pc, #444]	; (80170e4 <_scanf_i+0x1dc>)
 8016f26:	69a1      	ldr	r1, [r4, #24]
 8016f28:	4a6f      	ldr	r2, [pc, #444]	; (80170e8 <_scanf_i+0x1e0>)
 8016f2a:	2903      	cmp	r1, #3
 8016f2c:	bf08      	it	eq
 8016f2e:	461a      	moveq	r2, r3
 8016f30:	1e7b      	subs	r3, r7, #1
 8016f32:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016f36:	bf84      	itt	hi
 8016f38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016f3c:	60a3      	strhi	r3, [r4, #8]
 8016f3e:	6823      	ldr	r3, [r4, #0]
 8016f40:	9200      	str	r2, [sp, #0]
 8016f42:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016f46:	bf88      	it	hi
 8016f48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016f4c:	f104 091c 	add.w	r9, r4, #28
 8016f50:	6023      	str	r3, [r4, #0]
 8016f52:	bf8c      	ite	hi
 8016f54:	197f      	addhi	r7, r7, r5
 8016f56:	2700      	movls	r7, #0
 8016f58:	464b      	mov	r3, r9
 8016f5a:	f04f 0800 	mov.w	r8, #0
 8016f5e:	9301      	str	r3, [sp, #4]
 8016f60:	6831      	ldr	r1, [r6, #0]
 8016f62:	ab03      	add	r3, sp, #12
 8016f64:	2202      	movs	r2, #2
 8016f66:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016f6a:	7809      	ldrb	r1, [r1, #0]
 8016f6c:	f7e9 f950 	bl	8000210 <memchr>
 8016f70:	9b01      	ldr	r3, [sp, #4]
 8016f72:	b330      	cbz	r0, 8016fc2 <_scanf_i+0xba>
 8016f74:	f1b8 0f01 	cmp.w	r8, #1
 8016f78:	d15a      	bne.n	8017030 <_scanf_i+0x128>
 8016f7a:	6862      	ldr	r2, [r4, #4]
 8016f7c:	b92a      	cbnz	r2, 8016f8a <_scanf_i+0x82>
 8016f7e:	6822      	ldr	r2, [r4, #0]
 8016f80:	2108      	movs	r1, #8
 8016f82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f86:	6061      	str	r1, [r4, #4]
 8016f88:	6022      	str	r2, [r4, #0]
 8016f8a:	6822      	ldr	r2, [r4, #0]
 8016f8c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8016f90:	6022      	str	r2, [r4, #0]
 8016f92:	68a2      	ldr	r2, [r4, #8]
 8016f94:	1e51      	subs	r1, r2, #1
 8016f96:	60a1      	str	r1, [r4, #8]
 8016f98:	b19a      	cbz	r2, 8016fc2 <_scanf_i+0xba>
 8016f9a:	6832      	ldr	r2, [r6, #0]
 8016f9c:	1c51      	adds	r1, r2, #1
 8016f9e:	6031      	str	r1, [r6, #0]
 8016fa0:	7812      	ldrb	r2, [r2, #0]
 8016fa2:	701a      	strb	r2, [r3, #0]
 8016fa4:	1c5d      	adds	r5, r3, #1
 8016fa6:	6873      	ldr	r3, [r6, #4]
 8016fa8:	3b01      	subs	r3, #1
 8016faa:	2b00      	cmp	r3, #0
 8016fac:	6073      	str	r3, [r6, #4]
 8016fae:	dc07      	bgt.n	8016fc0 <_scanf_i+0xb8>
 8016fb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016fb4:	4631      	mov	r1, r6
 8016fb6:	4658      	mov	r0, fp
 8016fb8:	4798      	blx	r3
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	f040 8086 	bne.w	80170cc <_scanf_i+0x1c4>
 8016fc0:	462b      	mov	r3, r5
 8016fc2:	f108 0801 	add.w	r8, r8, #1
 8016fc6:	f1b8 0f03 	cmp.w	r8, #3
 8016fca:	d1c8      	bne.n	8016f5e <_scanf_i+0x56>
 8016fcc:	6862      	ldr	r2, [r4, #4]
 8016fce:	b90a      	cbnz	r2, 8016fd4 <_scanf_i+0xcc>
 8016fd0:	220a      	movs	r2, #10
 8016fd2:	6062      	str	r2, [r4, #4]
 8016fd4:	6862      	ldr	r2, [r4, #4]
 8016fd6:	4945      	ldr	r1, [pc, #276]	; (80170ec <_scanf_i+0x1e4>)
 8016fd8:	6960      	ldr	r0, [r4, #20]
 8016fda:	9301      	str	r3, [sp, #4]
 8016fdc:	1a89      	subs	r1, r1, r2
 8016fde:	f000 f8a9 	bl	8017134 <__sccl>
 8016fe2:	9b01      	ldr	r3, [sp, #4]
 8016fe4:	f04f 0800 	mov.w	r8, #0
 8016fe8:	461d      	mov	r5, r3
 8016fea:	68a3      	ldr	r3, [r4, #8]
 8016fec:	6822      	ldr	r2, [r4, #0]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d03a      	beq.n	8017068 <_scanf_i+0x160>
 8016ff2:	6831      	ldr	r1, [r6, #0]
 8016ff4:	6960      	ldr	r0, [r4, #20]
 8016ff6:	f891 c000 	ldrb.w	ip, [r1]
 8016ffa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8016ffe:	2800      	cmp	r0, #0
 8017000:	d032      	beq.n	8017068 <_scanf_i+0x160>
 8017002:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017006:	d121      	bne.n	801704c <_scanf_i+0x144>
 8017008:	0510      	lsls	r0, r2, #20
 801700a:	d51f      	bpl.n	801704c <_scanf_i+0x144>
 801700c:	f108 0801 	add.w	r8, r8, #1
 8017010:	b117      	cbz	r7, 8017018 <_scanf_i+0x110>
 8017012:	3301      	adds	r3, #1
 8017014:	3f01      	subs	r7, #1
 8017016:	60a3      	str	r3, [r4, #8]
 8017018:	6873      	ldr	r3, [r6, #4]
 801701a:	3b01      	subs	r3, #1
 801701c:	2b00      	cmp	r3, #0
 801701e:	6073      	str	r3, [r6, #4]
 8017020:	dd1b      	ble.n	801705a <_scanf_i+0x152>
 8017022:	6833      	ldr	r3, [r6, #0]
 8017024:	3301      	adds	r3, #1
 8017026:	6033      	str	r3, [r6, #0]
 8017028:	68a3      	ldr	r3, [r4, #8]
 801702a:	3b01      	subs	r3, #1
 801702c:	60a3      	str	r3, [r4, #8]
 801702e:	e7dc      	b.n	8016fea <_scanf_i+0xe2>
 8017030:	f1b8 0f02 	cmp.w	r8, #2
 8017034:	d1ad      	bne.n	8016f92 <_scanf_i+0x8a>
 8017036:	6822      	ldr	r2, [r4, #0]
 8017038:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801703c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017040:	d1bf      	bne.n	8016fc2 <_scanf_i+0xba>
 8017042:	2110      	movs	r1, #16
 8017044:	6061      	str	r1, [r4, #4]
 8017046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801704a:	e7a1      	b.n	8016f90 <_scanf_i+0x88>
 801704c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017050:	6022      	str	r2, [r4, #0]
 8017052:	780b      	ldrb	r3, [r1, #0]
 8017054:	702b      	strb	r3, [r5, #0]
 8017056:	3501      	adds	r5, #1
 8017058:	e7de      	b.n	8017018 <_scanf_i+0x110>
 801705a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801705e:	4631      	mov	r1, r6
 8017060:	4658      	mov	r0, fp
 8017062:	4798      	blx	r3
 8017064:	2800      	cmp	r0, #0
 8017066:	d0df      	beq.n	8017028 <_scanf_i+0x120>
 8017068:	6823      	ldr	r3, [r4, #0]
 801706a:	05d9      	lsls	r1, r3, #23
 801706c:	d50c      	bpl.n	8017088 <_scanf_i+0x180>
 801706e:	454d      	cmp	r5, r9
 8017070:	d908      	bls.n	8017084 <_scanf_i+0x17c>
 8017072:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801707a:	4632      	mov	r2, r6
 801707c:	4658      	mov	r0, fp
 801707e:	4798      	blx	r3
 8017080:	1e6f      	subs	r7, r5, #1
 8017082:	463d      	mov	r5, r7
 8017084:	454d      	cmp	r5, r9
 8017086:	d029      	beq.n	80170dc <_scanf_i+0x1d4>
 8017088:	6822      	ldr	r2, [r4, #0]
 801708a:	f012 0210 	ands.w	r2, r2, #16
 801708e:	d113      	bne.n	80170b8 <_scanf_i+0x1b0>
 8017090:	702a      	strb	r2, [r5, #0]
 8017092:	6863      	ldr	r3, [r4, #4]
 8017094:	9e00      	ldr	r6, [sp, #0]
 8017096:	4649      	mov	r1, r9
 8017098:	4658      	mov	r0, fp
 801709a:	47b0      	blx	r6
 801709c:	f8da 3000 	ldr.w	r3, [sl]
 80170a0:	6821      	ldr	r1, [r4, #0]
 80170a2:	1d1a      	adds	r2, r3, #4
 80170a4:	f8ca 2000 	str.w	r2, [sl]
 80170a8:	f011 0f20 	tst.w	r1, #32
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	d010      	beq.n	80170d2 <_scanf_i+0x1ca>
 80170b0:	6018      	str	r0, [r3, #0]
 80170b2:	68e3      	ldr	r3, [r4, #12]
 80170b4:	3301      	adds	r3, #1
 80170b6:	60e3      	str	r3, [r4, #12]
 80170b8:	eba5 0509 	sub.w	r5, r5, r9
 80170bc:	44a8      	add	r8, r5
 80170be:	6925      	ldr	r5, [r4, #16]
 80170c0:	4445      	add	r5, r8
 80170c2:	6125      	str	r5, [r4, #16]
 80170c4:	2000      	movs	r0, #0
 80170c6:	b007      	add	sp, #28
 80170c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170cc:	f04f 0800 	mov.w	r8, #0
 80170d0:	e7ca      	b.n	8017068 <_scanf_i+0x160>
 80170d2:	07ca      	lsls	r2, r1, #31
 80170d4:	bf4c      	ite	mi
 80170d6:	8018      	strhmi	r0, [r3, #0]
 80170d8:	6018      	strpl	r0, [r3, #0]
 80170da:	e7ea      	b.n	80170b2 <_scanf_i+0x1aa>
 80170dc:	2001      	movs	r0, #1
 80170de:	e7f2      	b.n	80170c6 <_scanf_i+0x1be>
 80170e0:	080178d8 	.word	0x080178d8
 80170e4:	08014309 	.word	0x08014309
 80170e8:	080172b1 	.word	0x080172b1
 80170ec:	08017d9d 	.word	0x08017d9d

080170f0 <_read_r>:
 80170f0:	b538      	push	{r3, r4, r5, lr}
 80170f2:	4c07      	ldr	r4, [pc, #28]	; (8017110 <_read_r+0x20>)
 80170f4:	4605      	mov	r5, r0
 80170f6:	4608      	mov	r0, r1
 80170f8:	4611      	mov	r1, r2
 80170fa:	2200      	movs	r2, #0
 80170fc:	6022      	str	r2, [r4, #0]
 80170fe:	461a      	mov	r2, r3
 8017100:	f7ee f95a 	bl	80053b8 <_read>
 8017104:	1c43      	adds	r3, r0, #1
 8017106:	d102      	bne.n	801710e <_read_r+0x1e>
 8017108:	6823      	ldr	r3, [r4, #0]
 801710a:	b103      	cbz	r3, 801710e <_read_r+0x1e>
 801710c:	602b      	str	r3, [r5, #0]
 801710e:	bd38      	pop	{r3, r4, r5, pc}
 8017110:	2002faac 	.word	0x2002faac

08017114 <_sbrk_r>:
 8017114:	b538      	push	{r3, r4, r5, lr}
 8017116:	4c06      	ldr	r4, [pc, #24]	; (8017130 <_sbrk_r+0x1c>)
 8017118:	2300      	movs	r3, #0
 801711a:	4605      	mov	r5, r0
 801711c:	4608      	mov	r0, r1
 801711e:	6023      	str	r3, [r4, #0]
 8017120:	f7ee f99c 	bl	800545c <_sbrk>
 8017124:	1c43      	adds	r3, r0, #1
 8017126:	d102      	bne.n	801712e <_sbrk_r+0x1a>
 8017128:	6823      	ldr	r3, [r4, #0]
 801712a:	b103      	cbz	r3, 801712e <_sbrk_r+0x1a>
 801712c:	602b      	str	r3, [r5, #0]
 801712e:	bd38      	pop	{r3, r4, r5, pc}
 8017130:	2002faac 	.word	0x2002faac

08017134 <__sccl>:
 8017134:	b570      	push	{r4, r5, r6, lr}
 8017136:	780b      	ldrb	r3, [r1, #0]
 8017138:	2b5e      	cmp	r3, #94	; 0x5e
 801713a:	bf13      	iteet	ne
 801713c:	1c4a      	addne	r2, r1, #1
 801713e:	1c8a      	addeq	r2, r1, #2
 8017140:	784b      	ldrbeq	r3, [r1, #1]
 8017142:	2100      	movne	r1, #0
 8017144:	bf08      	it	eq
 8017146:	2101      	moveq	r1, #1
 8017148:	1e44      	subs	r4, r0, #1
 801714a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801714e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017152:	42ac      	cmp	r4, r5
 8017154:	d1fb      	bne.n	801714e <__sccl+0x1a>
 8017156:	b913      	cbnz	r3, 801715e <__sccl+0x2a>
 8017158:	3a01      	subs	r2, #1
 801715a:	4610      	mov	r0, r2
 801715c:	bd70      	pop	{r4, r5, r6, pc}
 801715e:	f081 0401 	eor.w	r4, r1, #1
 8017162:	54c4      	strb	r4, [r0, r3]
 8017164:	1c51      	adds	r1, r2, #1
 8017166:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801716a:	2d2d      	cmp	r5, #45	; 0x2d
 801716c:	f101 36ff 	add.w	r6, r1, #4294967295
 8017170:	460a      	mov	r2, r1
 8017172:	d006      	beq.n	8017182 <__sccl+0x4e>
 8017174:	2d5d      	cmp	r5, #93	; 0x5d
 8017176:	d0f0      	beq.n	801715a <__sccl+0x26>
 8017178:	b90d      	cbnz	r5, 801717e <__sccl+0x4a>
 801717a:	4632      	mov	r2, r6
 801717c:	e7ed      	b.n	801715a <__sccl+0x26>
 801717e:	462b      	mov	r3, r5
 8017180:	e7ef      	b.n	8017162 <__sccl+0x2e>
 8017182:	780e      	ldrb	r6, [r1, #0]
 8017184:	2e5d      	cmp	r6, #93	; 0x5d
 8017186:	d0fa      	beq.n	801717e <__sccl+0x4a>
 8017188:	42b3      	cmp	r3, r6
 801718a:	dcf8      	bgt.n	801717e <__sccl+0x4a>
 801718c:	3301      	adds	r3, #1
 801718e:	429e      	cmp	r6, r3
 8017190:	54c4      	strb	r4, [r0, r3]
 8017192:	dcfb      	bgt.n	801718c <__sccl+0x58>
 8017194:	3102      	adds	r1, #2
 8017196:	e7e6      	b.n	8017166 <__sccl+0x32>

08017198 <strncmp>:
 8017198:	b510      	push	{r4, lr}
 801719a:	b16a      	cbz	r2, 80171b8 <strncmp+0x20>
 801719c:	3901      	subs	r1, #1
 801719e:	1884      	adds	r4, r0, r2
 80171a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80171a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d103      	bne.n	80171b4 <strncmp+0x1c>
 80171ac:	42a0      	cmp	r0, r4
 80171ae:	d001      	beq.n	80171b4 <strncmp+0x1c>
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d1f5      	bne.n	80171a0 <strncmp+0x8>
 80171b4:	1a98      	subs	r0, r3, r2
 80171b6:	bd10      	pop	{r4, pc}
 80171b8:	4610      	mov	r0, r2
 80171ba:	e7fc      	b.n	80171b6 <strncmp+0x1e>

080171bc <_strtoul_l.isra.0>:
 80171bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80171c0:	4680      	mov	r8, r0
 80171c2:	4689      	mov	r9, r1
 80171c4:	4692      	mov	sl, r2
 80171c6:	461e      	mov	r6, r3
 80171c8:	460f      	mov	r7, r1
 80171ca:	463d      	mov	r5, r7
 80171cc:	9808      	ldr	r0, [sp, #32]
 80171ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171d2:	f7fe fc91 	bl	8015af8 <__locale_ctype_ptr_l>
 80171d6:	4420      	add	r0, r4
 80171d8:	7843      	ldrb	r3, [r0, #1]
 80171da:	f013 0308 	ands.w	r3, r3, #8
 80171de:	d130      	bne.n	8017242 <_strtoul_l.isra.0+0x86>
 80171e0:	2c2d      	cmp	r4, #45	; 0x2d
 80171e2:	d130      	bne.n	8017246 <_strtoul_l.isra.0+0x8a>
 80171e4:	787c      	ldrb	r4, [r7, #1]
 80171e6:	1cbd      	adds	r5, r7, #2
 80171e8:	2101      	movs	r1, #1
 80171ea:	2e00      	cmp	r6, #0
 80171ec:	d05c      	beq.n	80172a8 <_strtoul_l.isra.0+0xec>
 80171ee:	2e10      	cmp	r6, #16
 80171f0:	d109      	bne.n	8017206 <_strtoul_l.isra.0+0x4a>
 80171f2:	2c30      	cmp	r4, #48	; 0x30
 80171f4:	d107      	bne.n	8017206 <_strtoul_l.isra.0+0x4a>
 80171f6:	782b      	ldrb	r3, [r5, #0]
 80171f8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80171fc:	2b58      	cmp	r3, #88	; 0x58
 80171fe:	d14e      	bne.n	801729e <_strtoul_l.isra.0+0xe2>
 8017200:	786c      	ldrb	r4, [r5, #1]
 8017202:	2610      	movs	r6, #16
 8017204:	3502      	adds	r5, #2
 8017206:	f04f 32ff 	mov.w	r2, #4294967295
 801720a:	2300      	movs	r3, #0
 801720c:	fbb2 f2f6 	udiv	r2, r2, r6
 8017210:	fb06 fc02 	mul.w	ip, r6, r2
 8017214:	ea6f 0c0c 	mvn.w	ip, ip
 8017218:	4618      	mov	r0, r3
 801721a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801721e:	2f09      	cmp	r7, #9
 8017220:	d817      	bhi.n	8017252 <_strtoul_l.isra.0+0x96>
 8017222:	463c      	mov	r4, r7
 8017224:	42a6      	cmp	r6, r4
 8017226:	dd23      	ble.n	8017270 <_strtoul_l.isra.0+0xb4>
 8017228:	2b00      	cmp	r3, #0
 801722a:	db1e      	blt.n	801726a <_strtoul_l.isra.0+0xae>
 801722c:	4282      	cmp	r2, r0
 801722e:	d31c      	bcc.n	801726a <_strtoul_l.isra.0+0xae>
 8017230:	d101      	bne.n	8017236 <_strtoul_l.isra.0+0x7a>
 8017232:	45a4      	cmp	ip, r4
 8017234:	db19      	blt.n	801726a <_strtoul_l.isra.0+0xae>
 8017236:	fb00 4006 	mla	r0, r0, r6, r4
 801723a:	2301      	movs	r3, #1
 801723c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017240:	e7eb      	b.n	801721a <_strtoul_l.isra.0+0x5e>
 8017242:	462f      	mov	r7, r5
 8017244:	e7c1      	b.n	80171ca <_strtoul_l.isra.0+0xe>
 8017246:	2c2b      	cmp	r4, #43	; 0x2b
 8017248:	bf04      	itt	eq
 801724a:	1cbd      	addeq	r5, r7, #2
 801724c:	787c      	ldrbeq	r4, [r7, #1]
 801724e:	4619      	mov	r1, r3
 8017250:	e7cb      	b.n	80171ea <_strtoul_l.isra.0+0x2e>
 8017252:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017256:	2f19      	cmp	r7, #25
 8017258:	d801      	bhi.n	801725e <_strtoul_l.isra.0+0xa2>
 801725a:	3c37      	subs	r4, #55	; 0x37
 801725c:	e7e2      	b.n	8017224 <_strtoul_l.isra.0+0x68>
 801725e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017262:	2f19      	cmp	r7, #25
 8017264:	d804      	bhi.n	8017270 <_strtoul_l.isra.0+0xb4>
 8017266:	3c57      	subs	r4, #87	; 0x57
 8017268:	e7dc      	b.n	8017224 <_strtoul_l.isra.0+0x68>
 801726a:	f04f 33ff 	mov.w	r3, #4294967295
 801726e:	e7e5      	b.n	801723c <_strtoul_l.isra.0+0x80>
 8017270:	2b00      	cmp	r3, #0
 8017272:	da09      	bge.n	8017288 <_strtoul_l.isra.0+0xcc>
 8017274:	2322      	movs	r3, #34	; 0x22
 8017276:	f8c8 3000 	str.w	r3, [r8]
 801727a:	f04f 30ff 	mov.w	r0, #4294967295
 801727e:	f1ba 0f00 	cmp.w	sl, #0
 8017282:	d107      	bne.n	8017294 <_strtoul_l.isra.0+0xd8>
 8017284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017288:	b101      	cbz	r1, 801728c <_strtoul_l.isra.0+0xd0>
 801728a:	4240      	negs	r0, r0
 801728c:	f1ba 0f00 	cmp.w	sl, #0
 8017290:	d0f8      	beq.n	8017284 <_strtoul_l.isra.0+0xc8>
 8017292:	b10b      	cbz	r3, 8017298 <_strtoul_l.isra.0+0xdc>
 8017294:	f105 39ff 	add.w	r9, r5, #4294967295
 8017298:	f8ca 9000 	str.w	r9, [sl]
 801729c:	e7f2      	b.n	8017284 <_strtoul_l.isra.0+0xc8>
 801729e:	2430      	movs	r4, #48	; 0x30
 80172a0:	2e00      	cmp	r6, #0
 80172a2:	d1b0      	bne.n	8017206 <_strtoul_l.isra.0+0x4a>
 80172a4:	2608      	movs	r6, #8
 80172a6:	e7ae      	b.n	8017206 <_strtoul_l.isra.0+0x4a>
 80172a8:	2c30      	cmp	r4, #48	; 0x30
 80172aa:	d0a4      	beq.n	80171f6 <_strtoul_l.isra.0+0x3a>
 80172ac:	260a      	movs	r6, #10
 80172ae:	e7aa      	b.n	8017206 <_strtoul_l.isra.0+0x4a>

080172b0 <_strtoul_r>:
 80172b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172b2:	4c06      	ldr	r4, [pc, #24]	; (80172cc <_strtoul_r+0x1c>)
 80172b4:	4d06      	ldr	r5, [pc, #24]	; (80172d0 <_strtoul_r+0x20>)
 80172b6:	6824      	ldr	r4, [r4, #0]
 80172b8:	6a24      	ldr	r4, [r4, #32]
 80172ba:	2c00      	cmp	r4, #0
 80172bc:	bf08      	it	eq
 80172be:	462c      	moveq	r4, r5
 80172c0:	9400      	str	r4, [sp, #0]
 80172c2:	f7ff ff7b 	bl	80171bc <_strtoul_l.isra.0>
 80172c6:	b003      	add	sp, #12
 80172c8:	bd30      	pop	{r4, r5, pc}
 80172ca:	bf00      	nop
 80172cc:	2000000c 	.word	0x2000000c
 80172d0:	20000070 	.word	0x20000070

080172d4 <__submore>:
 80172d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172d8:	460c      	mov	r4, r1
 80172da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80172dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172e0:	4299      	cmp	r1, r3
 80172e2:	d11d      	bne.n	8017320 <__submore+0x4c>
 80172e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80172e8:	f7ff f914 	bl	8016514 <_malloc_r>
 80172ec:	b918      	cbnz	r0, 80172f6 <__submore+0x22>
 80172ee:	f04f 30ff 	mov.w	r0, #4294967295
 80172f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80172fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80172fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017300:	6360      	str	r0, [r4, #52]	; 0x34
 8017302:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017306:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801730a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801730e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017312:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017316:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801731a:	6020      	str	r0, [r4, #0]
 801731c:	2000      	movs	r0, #0
 801731e:	e7e8      	b.n	80172f2 <__submore+0x1e>
 8017320:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017322:	0077      	lsls	r7, r6, #1
 8017324:	463a      	mov	r2, r7
 8017326:	f000 f85a 	bl	80173de <_realloc_r>
 801732a:	4605      	mov	r5, r0
 801732c:	2800      	cmp	r0, #0
 801732e:	d0de      	beq.n	80172ee <__submore+0x1a>
 8017330:	eb00 0806 	add.w	r8, r0, r6
 8017334:	4601      	mov	r1, r0
 8017336:	4632      	mov	r2, r6
 8017338:	4640      	mov	r0, r8
 801733a:	f7fb f9a9 	bl	8012690 <memcpy>
 801733e:	f8c4 8000 	str.w	r8, [r4]
 8017342:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017346:	e7e9      	b.n	801731c <__submore+0x48>

08017348 <__ascii_wctomb>:
 8017348:	b149      	cbz	r1, 801735e <__ascii_wctomb+0x16>
 801734a:	2aff      	cmp	r2, #255	; 0xff
 801734c:	bf85      	ittet	hi
 801734e:	238a      	movhi	r3, #138	; 0x8a
 8017350:	6003      	strhi	r3, [r0, #0]
 8017352:	700a      	strbls	r2, [r1, #0]
 8017354:	f04f 30ff 	movhi.w	r0, #4294967295
 8017358:	bf98      	it	ls
 801735a:	2001      	movls	r0, #1
 801735c:	4770      	bx	lr
 801735e:	4608      	mov	r0, r1
 8017360:	4770      	bx	lr
	...

08017364 <_fstat_r>:
 8017364:	b538      	push	{r3, r4, r5, lr}
 8017366:	4c07      	ldr	r4, [pc, #28]	; (8017384 <_fstat_r+0x20>)
 8017368:	2300      	movs	r3, #0
 801736a:	4605      	mov	r5, r0
 801736c:	4608      	mov	r0, r1
 801736e:	4611      	mov	r1, r2
 8017370:	6023      	str	r3, [r4, #0]
 8017372:	f7ee f84a 	bl	800540a <_fstat>
 8017376:	1c43      	adds	r3, r0, #1
 8017378:	d102      	bne.n	8017380 <_fstat_r+0x1c>
 801737a:	6823      	ldr	r3, [r4, #0]
 801737c:	b103      	cbz	r3, 8017380 <_fstat_r+0x1c>
 801737e:	602b      	str	r3, [r5, #0]
 8017380:	bd38      	pop	{r3, r4, r5, pc}
 8017382:	bf00      	nop
 8017384:	2002faac 	.word	0x2002faac

08017388 <_isatty_r>:
 8017388:	b538      	push	{r3, r4, r5, lr}
 801738a:	4c06      	ldr	r4, [pc, #24]	; (80173a4 <_isatty_r+0x1c>)
 801738c:	2300      	movs	r3, #0
 801738e:	4605      	mov	r5, r0
 8017390:	4608      	mov	r0, r1
 8017392:	6023      	str	r3, [r4, #0]
 8017394:	f7ee f849 	bl	800542a <_isatty>
 8017398:	1c43      	adds	r3, r0, #1
 801739a:	d102      	bne.n	80173a2 <_isatty_r+0x1a>
 801739c:	6823      	ldr	r3, [r4, #0]
 801739e:	b103      	cbz	r3, 80173a2 <_isatty_r+0x1a>
 80173a0:	602b      	str	r3, [r5, #0]
 80173a2:	bd38      	pop	{r3, r4, r5, pc}
 80173a4:	2002faac 	.word	0x2002faac

080173a8 <memmove>:
 80173a8:	4288      	cmp	r0, r1
 80173aa:	b510      	push	{r4, lr}
 80173ac:	eb01 0302 	add.w	r3, r1, r2
 80173b0:	d807      	bhi.n	80173c2 <memmove+0x1a>
 80173b2:	1e42      	subs	r2, r0, #1
 80173b4:	4299      	cmp	r1, r3
 80173b6:	d00a      	beq.n	80173ce <memmove+0x26>
 80173b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80173c0:	e7f8      	b.n	80173b4 <memmove+0xc>
 80173c2:	4283      	cmp	r3, r0
 80173c4:	d9f5      	bls.n	80173b2 <memmove+0xa>
 80173c6:	1881      	adds	r1, r0, r2
 80173c8:	1ad2      	subs	r2, r2, r3
 80173ca:	42d3      	cmn	r3, r2
 80173cc:	d100      	bne.n	80173d0 <memmove+0x28>
 80173ce:	bd10      	pop	{r4, pc}
 80173d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173d4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80173d8:	e7f7      	b.n	80173ca <memmove+0x22>

080173da <__malloc_lock>:
 80173da:	4770      	bx	lr

080173dc <__malloc_unlock>:
 80173dc:	4770      	bx	lr

080173de <_realloc_r>:
 80173de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173e0:	4607      	mov	r7, r0
 80173e2:	4614      	mov	r4, r2
 80173e4:	460e      	mov	r6, r1
 80173e6:	b921      	cbnz	r1, 80173f2 <_realloc_r+0x14>
 80173e8:	4611      	mov	r1, r2
 80173ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80173ee:	f7ff b891 	b.w	8016514 <_malloc_r>
 80173f2:	b922      	cbnz	r2, 80173fe <_realloc_r+0x20>
 80173f4:	f7ff f840 	bl	8016478 <_free_r>
 80173f8:	4625      	mov	r5, r4
 80173fa:	4628      	mov	r0, r5
 80173fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173fe:	f000 f814 	bl	801742a <_malloc_usable_size_r>
 8017402:	42a0      	cmp	r0, r4
 8017404:	d20f      	bcs.n	8017426 <_realloc_r+0x48>
 8017406:	4621      	mov	r1, r4
 8017408:	4638      	mov	r0, r7
 801740a:	f7ff f883 	bl	8016514 <_malloc_r>
 801740e:	4605      	mov	r5, r0
 8017410:	2800      	cmp	r0, #0
 8017412:	d0f2      	beq.n	80173fa <_realloc_r+0x1c>
 8017414:	4631      	mov	r1, r6
 8017416:	4622      	mov	r2, r4
 8017418:	f7fb f93a 	bl	8012690 <memcpy>
 801741c:	4631      	mov	r1, r6
 801741e:	4638      	mov	r0, r7
 8017420:	f7ff f82a 	bl	8016478 <_free_r>
 8017424:	e7e9      	b.n	80173fa <_realloc_r+0x1c>
 8017426:	4635      	mov	r5, r6
 8017428:	e7e7      	b.n	80173fa <_realloc_r+0x1c>

0801742a <_malloc_usable_size_r>:
 801742a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801742e:	1f18      	subs	r0, r3, #4
 8017430:	2b00      	cmp	r3, #0
 8017432:	bfbc      	itt	lt
 8017434:	580b      	ldrlt	r3, [r1, r0]
 8017436:	18c0      	addlt	r0, r0, r3
 8017438:	4770      	bx	lr
	...

0801743c <_init>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	bf00      	nop
 8017440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017442:	bc08      	pop	{r3}
 8017444:	469e      	mov	lr, r3
 8017446:	4770      	bx	lr

08017448 <_fini>:
 8017448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801744a:	bf00      	nop
 801744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801744e:	bc08      	pop	{r3}
 8017450:	469e      	mov	lr, r3
 8017452:	4770      	bx	lr
