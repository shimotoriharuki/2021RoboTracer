
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018b5c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08018d20  08018d20  00028d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019554  08019554  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019554  08019554  00029554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801955c  0801955c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801955c  0801955c  0002955c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019564  08019564  00029564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019568  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00049ac8  200001e0  08019744  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20049ca8  08019744  00039ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b8cc  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c33  00000000  00000000  0006bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002390  00000000  00000000  00073710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000020c0  00000000  00000000  00075aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  00077b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002675e  00000000  00000000  000ad014  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011138d  00000000  00000000  000d3772  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e4aff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a6b8  00000000  00000000  001e4b7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018d04 	.word	0x08018d04

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018d04 	.word	0x08018d04

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb8e 	bl	800b6f8 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200477a0 	.word	0x200477a0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fb76 	bl	800b6f8 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200477a0 	.word	0x200477a0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f9ff 	bl	800b424 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff66 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff60 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 ff5a 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 ff54 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 ff4e 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 ff48 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 ff42 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 ff3c 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 ff36 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 ff30 	bl	8009ef8 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 ff24 	bl	8009ef8 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 ff1e 	bl	8009ef8 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 f9b5 	bl	8016498 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00e f846 	bl	800f288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00e f842 	bl	800f288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00e f83e 	bl	800f288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00e f83a 	bl	800f288 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004788c 	.word	0x2004788c
 8001248:	200477f4 	.word	0x200477f4
 800124c:	20047914 	.word	0x20047914

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004788c 	.word	0x2004788c
 800137c:	20047914 	.word	0x20047914
 8001380:	200477f4 	.word	0x200477f4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004788c 	.word	0x2004788c
 80013c4:	200477f4 	.word	0x200477f4
 80013c8:	20047914 	.word	0x20047914

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0),
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
		side_line_ignore_distance_(), cross_line_ignore_distance_(0), goal_judge_distance_(0){}
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4809      	ldr	r0, [pc, #36]	; (8001464 <_ZN7Encoder4initEv+0x30>)
 8001440:	f00d fff2 	bl	800f428 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001444:	213c      	movs	r1, #60	; 0x3c
 8001446:	4808      	ldr	r0, [pc, #32]	; (8001468 <_ZN7Encoder4initEv+0x34>)
 8001448:	f00d ffee 	bl	800f428 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <_ZN7Encoder4initEv+0x38>)
 800144e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001452:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <_ZN7Encoder4initEv+0x3c>)
 8001456:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	200479f4 	.word	0x200479f4
 8001468:	200476d8 	.word	0x200476d8
 800146c:	40010000 	.word	0x40010000
 8001470:	40010400 	.word	0x40010400
 8001474:	00000000 	.word	0x00000000

08001478 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	//static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <_ZN7Encoder6updateEv+0x120>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	ee07 3a90 	vmov	s15, r3
 8001488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800148c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800159c <_ZN7Encoder6updateEv+0x124>
 8001490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001494:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 8001498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <_ZN7Encoder6updateEv+0x12c>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800159c <_ZN7Encoder6updateEv+0x124>
 80014b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014b4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80015a0 <_ZN7Encoder6updateEv+0x128>
 80014b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014bc:	edc7 7a02 	vstr	s15, [r7, #8]
	//monitor_cnt_l = cnt_l;

	cnt_l_ = cnt_l;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	601a      	str	r2, [r3, #0]
	cnt_r_ = cnt_r;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	605a      	str	r2, [r3, #4]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	ee17 0a90 	vmov	r0, s15
 80014e0:	f7ff f84a 	bl	8000578 <__aeabi_f2d>
 80014e4:	a32a      	add	r3, pc, #168	; (adr r3, 8001590 <_ZN7Encoder6updateEv+0x118>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f89d 	bl	8000628 <__aeabi_dmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	460c      	mov	r4, r1
 80014f2:	4618      	mov	r0, r3
 80014f4:	4621      	mov	r1, r4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fe:	f7ff f9bd 	bl	800087c <__aeabi_ddiv>
 8001502:	4603      	mov	r3, r0
 8001504:	460c      	mov	r4, r1
 8001506:	4618      	mov	r0, r3
 8001508:	4621      	mov	r1, r4
 800150a:	f7ff fb85 	bl	8000c18 <__aeabi_d2f>
 800150e:	4602      	mov	r2, r0
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	ed93 7a05 	vldr	s14, [r3, #20]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a02 	vldr	s15, [r3, #8]
 8001536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edc3 7a06 	vstr	s15, [r3, #24]
	side_line_ignore_distance_ += distance_;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	ed93 7a07 	vldr	s14, [r3, #28]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	edd3 7a02 	vldr	s15, [r3, #8]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	edc3 7a07 	vstr	s15, [r3, #28]
	cross_line_ignore_distance_ += distance_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	ed93 7a08 	vldr	s14, [r3, #32]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	edc3 7a08 	vstr	s15, [r3, #32]
	goal_judge_distance_ += distance_;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a02 	vldr	s15, [r3, #8]
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	//monitor_distance = distance_10mm_;
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	bd90      	pop	{r4, r7, pc}
 800158a:	bf00      	nop
 800158c:	f3af 8000 	nop.w
 8001590:	ce73a049 	.word	0xce73a049
 8001594:	3f77a3f6 	.word	0x3f77a3f6
 8001598:	40010000 	.word	0x40010000
 800159c:	47000000 	.word	0x47000000
 80015a0:	3f912547 	.word	0x3f912547
 80015a4:	40010400 	.word	0x40010400

080015a8 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <_ZN7Encoder5clearEv+0x3c>)
 80015c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c6:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80015c8:	4b07      	ldr	r3, [pc, #28]	; (80015e8 <_ZN7Encoder5clearEv+0x40>)
 80015ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015ce:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	40010000 	.word	0x40010000
 80015e8:	40010400 	.word	0x40010400

080015ec <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	return distance_;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr

08001632 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 8001632:	b480      	push	{r7}
 8001634:	b083      	sub	sp, #12
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ee07 3a90 	vmov	s15, r3
}
 8001642:	eeb0 0a67 	vmov.f32	s0, s15
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	ee07 3a90 	vmov	s15, r3
}
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	619a      	str	r2, [r3, #24]
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f04f 0200 	mov.w	r2, #0
 800169a:	615a      	str	r2, [r3, #20]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>:

float Encoder::getSideLineIgnoreDistance()
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	return side_line_ignore_distance_;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	ee07 3a90 	vmov	s15, r3
}
 80016d4:	eeb0 0a67 	vmov.f32	s0, s15
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>:

void Encoder::clearSideLineIgnoreDistance()
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	side_line_ignore_distance_ = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:
float Encoder::getCrossLineIgnoreDistance()
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a67 	vmov.f32	s0, s15
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZN7Encoder20getGoalJudgeDistanceEv>:

float Encoder::getGoalJudgeDistance()
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
	return goal_judge_distance_;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	ee07 3a90 	vmov	s15, r3
}
 8001748:	eeb0 0a67 	vmov.f32	s0, s15
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>:

void Encoder::clearGoalJudgeDistance()
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
	goal_judge_distance_= 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001772:	b580      	push	{r7, lr}
 8001774:	b084      	sub	sp, #16
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f978 	bl	8001a78 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001788:	f000 f98c 	bl	8001aa4 <fopen_folder_and_file>

	return ret;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f012 fb9a 	bl	8013edc <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200465e4 	.word	0x200465e4

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f013 ff03 	bl	80155fc <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f012 fbde 	bl	8013fc4 <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f012 fbd9 	bl	8013fc4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f012 f947 	bl	8013ab2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f958 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	08018d20 	.word	0x08018d20
 8001850:	20046554 	.word	0x20046554
 8001854:	200465e4 	.word	0x200465e4
 8001858:	200465d4 	.word	0x200465d4

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f900 	bl	8001a78 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f012 fb55 	bl	8013f30 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f012 fdc0 	bl	801440c <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f012 fb4f 	bl	8013f30 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f907 	bl	8001aa4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f013 fe9e 	bl	80155fc <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f012 fb7c 	bl	8013fc4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f012 f8ea 	bl	8013ab2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f8fb 	bl	8001ad8 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f012 faee 	bl	8013edc <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20046454 	.word	0x20046454
 8001910:	20045314 	.word	0x20045314
 8001914:	08018d3c 	.word	0x08018d3c
 8001918:	08018d20 	.word	0x08018d20
 800191c:	20046554 	.word	0x20046554
 8001920:	200465e4 	.word	0x200465e4
 8001924:	200465d4 	.word	0x200465d4

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f898 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f8ac 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f013 fea1 	bl	80156a4 <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f012 ff1e 	bl	80147c8 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f8a1 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f012 faa0 	bl	8013edc <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08018d2c 	.word	0x08018d2c
 80019ac:	20046554 	.word	0x20046554
 80019b0:	200465e4 	.word	0x200465e4

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f852 	bl	8001a78 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f866 	bl	8001aa4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f013 fe5b 	bl	80156a4 <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f012 fed8 	bl	80147c8 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f85b 	bl	8001ad8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f012 fa5a 	bl	8013edc <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08018d38 	.word	0x08018d38
 8001a38:	20046554 	.word	0x20046554
 8001a3c:	200465e4 	.word	0x200465e4

08001a40 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4908      	ldr	r1, [pc, #32]	; (8001a70 <sd_mount+0x30>)
 8001a4e:	4809      	ldr	r0, [pc, #36]	; (8001a74 <sd_mount+0x34>)
 8001a50:	f011 fcbc 	bl	80133cc <f_mount>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d102      	bne.n	8001a60 <sd_mount+0x20>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	e001      	b.n	8001a64 <sd_mount+0x24>
	else ret = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	08018d48 	.word	0x08018d48
 8001a74:	20045414 	.word	0x20045414

08001a78 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4805      	ldr	r0, [pc, #20]	; (8001a9c <create_path+0x24>)
 8001a86:	f013 fe39 	bl	80156fc <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	4804      	ldr	r0, [pc, #16]	; (8001aa0 <create_path+0x28>)
 8001a8e:	f013 fe35 	bl	80156fc <strcpy>

}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20046454 	.word	0x20046454
 8001aa0:	20045314 	.word	0x20045314

08001aa4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001aaa:	f012 fd71 	bl	8014590 <f_mkdir>

	f_chdir(dirpath);
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <fopen_folder_and_file+0x24>)
 8001ab0:	f012 fa3e 	bl	8013f30 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ab4:	2213      	movs	r2, #19
 8001ab6:	4905      	ldr	r1, [pc, #20]	; (8001acc <fopen_folder_and_file+0x28>)
 8001ab8:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <fopen_folder_and_file+0x2c>)
 8001aba:	f011 fccd 	bl	8013458 <f_open>

	f_chdir("..");
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <fopen_folder_and_file+0x30>)
 8001ac0:	f012 fa36 	bl	8013f30 <f_chdir>


}
 8001ac4:	bf00      	nop
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20046454 	.word	0x20046454
 8001acc:	20045314 	.word	0x20045314
 8001ad0:	200465e4 	.word	0x200465e4
 8001ad4:	08018d3c 	.word	0x08018d3c

08001ad8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	e007      	b.n	8001af4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ae4:	4a08      	ldr	r2, [pc, #32]	; (8001b08 <bufclear+0x30>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b7f      	cmp	r3, #127	; 0x7f
 8001af8:	ddf4      	ble.n	8001ae4 <bufclear+0xc>
	}
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	20046554 	.word	0x20046554

08001b0c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b26:	480e      	ldr	r0, [pc, #56]	; (8001b60 <read_byte+0x54>)
 8001b28:	f009 fc7c 	bl	800b424 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b2c:	f107 010f 	add.w	r1, r7, #15
 8001b30:	2364      	movs	r3, #100	; 0x64
 8001b32:	2201      	movs	r2, #1
 8001b34:	480b      	ldr	r0, [pc, #44]	; (8001b64 <read_byte+0x58>)
 8001b36:	f00c fe3d 	bl	800e7b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b3a:	f107 010e 	add.w	r1, r7, #14
 8001b3e:	2364      	movs	r3, #100	; 0x64
 8001b40:	2201      	movs	r2, #1
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <read_byte+0x58>)
 8001b44:	f00c ff6a 	bl	800ea1c <HAL_SPI_Receive>
	CS_SET;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b4e:	4804      	ldr	r0, [pc, #16]	; (8001b60 <read_byte+0x54>)
 8001b50:	f009 fc68 	bl	800b424 <HAL_GPIO_WritePin>

	return val;
 8001b54:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20047680 	.word	0x20047680

08001b68 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460a      	mov	r2, r1
 8001b72:	71fb      	strb	r3, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b82:	2200      	movs	r2, #0
 8001b84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <write_byte+0x54>)
 8001b8a:	f009 fc4b 	bl	800b424 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b8e:	f107 010f 	add.w	r1, r7, #15
 8001b92:	2364      	movs	r3, #100	; 0x64
 8001b94:	2201      	movs	r2, #1
 8001b96:	480a      	ldr	r0, [pc, #40]	; (8001bc0 <write_byte+0x58>)
 8001b98:	f00c fe0c 	bl	800e7b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001b9c:	1db9      	adds	r1, r7, #6
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4807      	ldr	r0, [pc, #28]	; (8001bc0 <write_byte+0x58>)
 8001ba4:	f00c fe06 	bl	800e7b4 <HAL_SPI_Transmit>
	CS_SET;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bae:	4803      	ldr	r0, [pc, #12]	; (8001bbc <write_byte+0x54>)
 8001bb0:	f009 fc38 	bl	800b424 <HAL_GPIO_WritePin>
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	20047680 	.word	0x20047680

08001bc4 <IMU_init>:

uint16_t IMU_init() {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff ff9c 	bl	8001b0c <read_byte>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2be0      	cmp	r3, #224	; 0xe0
 8001bdc:	d119      	bne.n	8001c12 <IMU_init+0x4e>
		ret = 1;
 8001bde:	2301      	movs	r3, #1
 8001be0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001be2:	2101      	movs	r1, #1
 8001be4:	2006      	movs	r0, #6
 8001be6:	f7ff ffbf 	bl	8001b68 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001bea:	2110      	movs	r1, #16
 8001bec:	2003      	movs	r0, #3
 8001bee:	f7ff ffbb 	bl	8001b68 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	207f      	movs	r0, #127	; 0x7f
 8001bf6:	f7ff ffb7 	bl	8001b68 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001bfa:	2106      	movs	r1, #6
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7ff ffb3 	bl	8001b68 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c02:	2106      	movs	r1, #6
 8001c04:	2014      	movs	r0, #20
 8001c06:	f7ff ffaf 	bl	8001b68 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	207f      	movs	r0, #127	; 0x7f
 8001c0e:	f7ff ffab 	bl	8001b68 <write_byte>
	}
	return ret;
 8001c12:	88fb      	ldrh	r3, [r7, #6]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <read_gyro_data>:

void read_gyro_data() {
 8001c1c:	b598      	push	{r3, r4, r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c20:	2033      	movs	r0, #51	; 0x33
 8001c22:	f7ff ff73 	bl	8001b0c <read_byte>
 8001c26:	4603      	mov	r3, r0
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	b21c      	sxth	r4, r3
 8001c2c:	2034      	movs	r0, #52	; 0x34
 8001c2e:	f7ff ff6d 	bl	8001b0c <read_byte>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	4323      	orrs	r3, r4
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <read_gyro_data+0x64>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c3e:	2035      	movs	r0, #53	; 0x35
 8001c40:	f7ff ff64 	bl	8001b0c <read_byte>
 8001c44:	4603      	mov	r3, r0
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	b21c      	sxth	r4, r3
 8001c4a:	2036      	movs	r0, #54	; 0x36
 8001c4c:	f7ff ff5e 	bl	8001b0c <read_byte>
 8001c50:	4603      	mov	r3, r0
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4323      	orrs	r3, r4
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	4b0a      	ldr	r3, [pc, #40]	; (8001c84 <read_gyro_data+0x68>)
 8001c5a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c5c:	2037      	movs	r0, #55	; 0x37
 8001c5e:	f7ff ff55 	bl	8001b0c <read_byte>
 8001c62:	4603      	mov	r3, r0
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21c      	sxth	r4, r3
 8001c68:	2038      	movs	r0, #56	; 0x38
 8001c6a:	f7ff ff4f 	bl	8001b0c <read_byte>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	b21b      	sxth	r3, r3
 8001c72:	4323      	orrs	r3, r4
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <read_gyro_data+0x6c>)
 8001c78:	801a      	strh	r2, [r3, #0]
}
 8001c7a:	bf00      	nop
 8001c7c:	bd98      	pop	{r3, r4, r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2004761c 	.word	0x2004761c
 8001c84:	2004761a 	.word	0x2004761a
 8001c88:	20047614 	.word	0x20047614

08001c8c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	805a      	strh	r2, [r3, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	809a      	strh	r2, [r3, #4]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	80da      	strh	r2, [r3, #6]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	811a      	strh	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	815a      	strh	r2, [r3, #10]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	60da      	str	r2, [r3, #12]
{

}
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cd8:	f7ff ff74 	bl	8001bc4 <IMU_init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001ce0:	f7ff f9de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f7ff f9ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001cec:	4809      	ldr	r0, [pc, #36]	; (8001d14 <_ZN3IMU4initEv+0x44>)
 8001cee:	f7ff fa11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7ff f9e3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001cfa:	89fb      	ldrh	r3, [r7, #14]
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <_ZN3IMU4initEv+0x48>)
 8001d00:	f7ff fa08 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d08:	f008 f8f6 	bl	8009ef8 <HAL_Delay>

}
 8001d0c:	bf00      	nop
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	08018d4c 	.word	0x08018d4c
 8001d18:	08018d58 	.word	0x08018d58
 8001d1c:	00000000 	.word	0x00000000

08001d20 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d20:	b5b0      	push	{r4, r5, r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d28:	f7ff ff78 	bl	8001c1c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d40:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbff 	bl	8000554 <__aeabi_i2d>
 8001d56:	a316      	add	r3, pc, #88	; (adr r3, 8001db0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fc64 	bl	8000628 <__aeabi_dmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4625      	mov	r5, r4
 8001d66:	461c      	mov	r4, r3
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbf0 	bl	8000554 <__aeabi_i2d>
 8001d74:	a310      	add	r3, pc, #64	; (adr r3, 8001db8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc55 	bl	8000628 <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fa99 	bl	80002bc <__adddf3>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4621      	mov	r1, r4
 8001d92:	f7fe fef9 	bl	8000b88 <__aeabi_d2iz>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b21a      	sxth	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <_ZN3IMU12updateValuesEv+0xac>)
 8001da6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bdb0      	pop	{r4, r5, r7, pc}
 8001db0:	47ae147b 	.word	0x47ae147b
 8001db4:	3f847ae1 	.word	0x3f847ae1
 8001db8:	7ae147ae 	.word	0x7ae147ae
 8001dbc:	3fefae14 	.word	0x3fefae14
 8001dc0:	2004761c 	.word	0x2004761c
 8001dc4:	2004761a 	.word	0x2004761a
 8001dc8:	20047614 	.word	0x20047614
 8001dcc:	200001fc 	.word	0x200001fc

08001dd0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001dd0:	b5b0      	push	{r4, r5, r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001df0:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f7fe fbbf 	bl	8000578 <__aeabi_f2d>
 8001dfa:	a316      	add	r3, pc, #88	; (adr r3, 8001e54 <_ZN3IMU8getOmegaEv+0x84>)
 8001dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e00:	f7fe fd3c 	bl	800087c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4614      	mov	r4, r2
 8001e0a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e0e:	a313      	add	r3, pc, #76	; (adr r3, 8001e5c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e14:	4620      	mov	r0, r4
 8001e16:	4629      	mov	r1, r5
 8001e18:	f7fe fc06 	bl	8000628 <__aeabi_dmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <_ZN3IMU8getOmegaEv+0x80>)
 8001e2a:	f7fe fd27 	bl	800087c <__aeabi_ddiv>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe feef 	bl	8000c18 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	ee07 3a90 	vmov	s15, r3
}
 8001e44:	eeb0 0a67 	vmov.f32	s0, s15
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40668000 	.word	0x40668000
 8001e54:	66666666 	.word	0x66666666
 8001e58:	40306666 	.word	0x40306666
 8001e5c:	54411744 	.word	0x54411744
 8001e60:	400921fb 	.word	0x400921fb

08001e64 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b08b      	sub	sp, #44	; 0x2c
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e6c:	466b      	mov	r3, sp
 8001e6e:	461e      	mov	r6, r3
	HAL_Delay(800);
 8001e70:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e74:	f008 f840 	bl	8009ef8 <HAL_Delay>
	lcd_clear();
 8001e78:	f7ff f912 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff f91e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001e84:	4840      	ldr	r0, [pc, #256]	; (8001f88 <_ZN3IMU11calibrationEv+0x124>)
 8001e86:	f7ff f945 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff f917 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001e92:	483e      	ldr	r0, [pc, #248]	; (8001f8c <_ZN3IMU11calibrationEv+0x128>)
 8001e94:	f7ff f93e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001e98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001e9c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001e9e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ea2:	1e5d      	subs	r5, r3, #1
 8001ea4:	61bd      	str	r5, [r7, #24]
 8001ea6:	462b      	mov	r3, r5
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	f04f 0400 	mov.w	r4, #0
 8001eb8:	0154      	lsls	r4, r2, #5
 8001eba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ebe:	014b      	lsls	r3, r1, #5
 8001ec0:	462b      	mov	r3, r5
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	0154      	lsls	r4, r2, #5
 8001ed4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed8:	014b      	lsls	r3, r1, #5
 8001eda:	462b      	mov	r3, r5
 8001edc:	3301      	adds	r3, #1
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	3303      	adds	r3, #3
 8001ee2:	3307      	adds	r3, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3303      	adds	r3, #3
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	83fb      	strh	r3, [r7, #30]
 8001efa:	8bfa      	ldrh	r2, [r7, #30]
 8001efc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	da13      	bge.n	8001f2c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f0a:	8bfb      	ldrh	r3, [r7, #30]
 8001f0c:	ee07 2a90 	vmov	s15, r2
 8001f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	4413      	add	r3, r2
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f007 ffea 	bl	8009ef8 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f24:	8bfb      	ldrh	r3, [r7, #30]
 8001f26:	3301      	adds	r3, #1
 8001f28:	83fb      	strh	r3, [r7, #30]
 8001f2a:	e7e6      	b.n	8001efa <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	462b      	mov	r3, r5
 8001f34:	3301      	adds	r3, #1
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d00e      	beq.n	8001f62 <_ZN3IMU11calibrationEv+0xfe>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	edd3 7a00 	vldr	s15, [r3]
 8001f4e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f56:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	e7ec      	b.n	8001f3c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f7c:	46b5      	mov	sp, r6
}
 8001f7e:	bf00      	nop
 8001f80:	372c      	adds	r7, #44	; 0x2c
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	08018d5c 	.word	0x08018d5c
 8001f8c:	08018d68 	.word	0x08018d68

08001f90 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af02      	add	r7, sp, #8
 8001f96:	4603      	mov	r3, r0
 8001f98:	460a      	mov	r2, r1
 8001f9a:	71fb      	strb	r3, [r7, #7]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fa0:	79bb      	ldrb	r3, [r7, #6]
 8001fa2:	b299      	uxth	r1, r3
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <INA260_read+0x50>)
 8001fae:	f009 fba3 	bl	800b6f8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	2364      	movs	r3, #100	; 0x64
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	4807      	ldr	r0, [pc, #28]	; (8001fe0 <INA260_read+0x50>)
 8001fc2:	f009 fc97 	bl	800b8f4 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fc6:	7b3b      	ldrb	r3, [r7, #12]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	7b7b      	ldrb	r3, [r7, #13]
 8001fce:	b21b      	sxth	r3, r3
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20047834 	.word	0x20047834

08001fe4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af02      	add	r7, sp, #8
 8001fea:	4604      	mov	r4, r0
 8001fec:	4608      	mov	r0, r1
 8001fee:	4611      	mov	r1, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	71fb      	strb	r3, [r7, #7]
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	717b      	strb	r3, [r7, #5]
 8001ffe:	4613      	mov	r3, r2
 8002000:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	79bb      	ldrb	r3, [r7, #6]
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	797b      	ldrb	r3, [r7, #5]
 800200c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800200e:	793b      	ldrb	r3, [r7, #4]
 8002010:	b299      	uxth	r1, r3
 8002012:	f107 020c 	add.w	r2, r7, #12
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	2303      	movs	r3, #3
 800201c:	4803      	ldr	r0, [pc, #12]	; (800202c <INA260_write+0x48>)
 800201e:	f009 fb6b 	bl	800b6f8 <HAL_I2C_Master_Transmit>
}
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	bf00      	nop
 800202c:	20047834 	.word	0x20047834

08002030 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002042:	797b      	ldrb	r3, [r7, #5]
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	79f9      	ldrb	r1, [r7, #7]
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff ffcb 	bl	8001fe4 <INA260_write>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	4603      	mov	r3, r0
 800205e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	461a      	mov	r2, r3
 8002064:	21df      	movs	r1, #223	; 0xdf
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff ffe2 	bl	8002030 <setConfig>
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
{

}
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
	...

0800208c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	482a      	ldr	r0, [pc, #168]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 800209e:	f009 f9a9 	bl	800b3f4 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <_ZN8JoyStick8getValueEv+0x2e>
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020ba:	2101      	movs	r1, #1
 80020bc:	4823      	ldr	r0, [pc, #140]	; (800214c <_ZN8JoyStick8getValueEv+0xc0>)
 80020be:	f009 f999 	bl	800b3f4 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x4e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0302 	orr.w	r3, r3, #2
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020de:	481a      	ldr	r0, [pc, #104]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 80020e0:	f009 f988 	bl	800b3f4 <HAL_GPIO_ReadPin>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	bf0c      	ite	eq
 80020ea:	2301      	moveq	r3, #1
 80020ec:	2300      	movne	r3, #0
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <_ZN8JoyStick8getValueEv+0x70>
 80020f4:	89fb      	ldrh	r3, [r7, #14]
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80020fc:	2104      	movs	r1, #4
 80020fe:	4814      	ldr	r0, [pc, #80]	; (8002150 <_ZN8JoyStick8getValueEv+0xc4>)
 8002100:	f009 f978 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x90>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800211c:	2180      	movs	r1, #128	; 0x80
 800211e:	480a      	ldr	r0, [pc, #40]	; (8002148 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f009 f968 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0xb0>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0310 	orr.w	r3, r3, #16
 800213a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800213c:	89fb      	ldrh	r3, [r7, #14]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40020400 	.word	0x40020400

08002154 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002160:	78fb      	ldrb	r3, [r7, #3]
 8002162:	2b52      	cmp	r3, #82	; 0x52
 8002164:	d112      	bne.n	800218c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216c:	4856      	ldr	r0, [pc, #344]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800216e:	f009 f959 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002172:	2201      	movs	r2, #1
 8002174:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002178:	4853      	ldr	r0, [pc, #332]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800217a:	f009 f953 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4850      	ldr	r0, [pc, #320]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002186:	f009 f94d 	bl	800b424 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800218a:	e098      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	2b47      	cmp	r3, #71	; 0x47
 8002190:	d112      	bne.n	80021b8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	484b      	ldr	r0, [pc, #300]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f009 f943 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021a4:	4848      	ldr	r0, [pc, #288]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f009 f93d 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021b0:	4845      	ldr	r0, [pc, #276]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021b2:	f009 f937 	bl	800b424 <HAL_GPIO_WritePin>
}
 80021b6:	e082      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021b8:	78fb      	ldrb	r3, [r7, #3]
 80021ba:	2b42      	cmp	r3, #66	; 0x42
 80021bc:	d112      	bne.n	80021e4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4840      	ldr	r0, [pc, #256]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f009 f92d 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f009 f927 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021d6:	2200      	movs	r2, #0
 80021d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021dc:	483a      	ldr	r0, [pc, #232]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021de:	f009 f921 	bl	800b424 <HAL_GPIO_WritePin>
}
 80021e2:	e06c      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	2b43      	cmp	r3, #67	; 0x43
 80021e8:	d112      	bne.n	8002210 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4835      	ldr	r0, [pc, #212]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f009 f917 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fc:	4832      	ldr	r0, [pc, #200]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f009 f911 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002208:	482f      	ldr	r0, [pc, #188]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800220a:	f009 f90b 	bl	800b424 <HAL_GPIO_WritePin>
}
 800220e:	e056      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	2b4d      	cmp	r3, #77	; 0x4d
 8002214:	d112      	bne.n	800223c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800221c:	482a      	ldr	r0, [pc, #168]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f009 f901 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002222:	2201      	movs	r2, #1
 8002224:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f009 f8fb 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800222e:	2200      	movs	r2, #0
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	4824      	ldr	r0, [pc, #144]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002236:	f009 f8f5 	bl	800b424 <HAL_GPIO_WritePin>
}
 800223a:	e040      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	2b59      	cmp	r3, #89	; 0x59
 8002240:	d112      	bne.n	8002268 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002248:	481f      	ldr	r0, [pc, #124]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f009 f8eb 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002254:	481c      	ldr	r0, [pc, #112]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f009 f8e5 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225a:	2201      	movs	r2, #1
 800225c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002260:	4819      	ldr	r0, [pc, #100]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002262:	f009 f8df 	bl	800b424 <HAL_GPIO_WritePin>
}
 8002266:	e02a      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b57      	cmp	r3, #87	; 0x57
 800226c:	d112      	bne.n	8002294 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f009 f8d5 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227a:	2200      	movs	r2, #0
 800227c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002280:	4811      	ldr	r0, [pc, #68]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f009 f8cf 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228c:	480e      	ldr	r0, [pc, #56]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 800228e:	f009 f8c9 	bl	800b424 <HAL_GPIO_WritePin>
}
 8002292:	e014      	b.n	80022be <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002294:	78fb      	ldrb	r3, [r7, #3]
 8002296:	2b7e      	cmp	r3, #126	; 0x7e
 8002298:	d111      	bne.n	80022be <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4809      	ldr	r0, [pc, #36]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f009 f8bf 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022a6:	2201      	movs	r2, #1
 80022a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ac:	4806      	ldr	r0, [pc, #24]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f009 f8b9 	bl	800b424 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022b2:	2201      	movs	r2, #1
 80022b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <_ZN3LED9fullColorEc+0x174>)
 80022ba:	f009 f8b3 	bl	800b424 <HAL_GPIO_WritePin>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40020000 	.word	0x40020000

080022cc <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
 80022d8:	4613      	mov	r3, r2
 80022da:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d106      	bne.n	80022f2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80022e4:	2201      	movs	r2, #1
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	4813      	ldr	r0, [pc, #76]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 80022ec:	f009 f89a 	bl	800b424 <HAL_GPIO_WritePin>
 80022f0:	e009      	b.n	8002306 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80022f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002300:	480d      	ldr	r0, [pc, #52]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002302:	f009 f88f 	bl	800b424 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002306:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002314:	4808      	ldr	r0, [pc, #32]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 8002316:	f009 f885 	bl	800b424 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800231a:	e009      	b.n	8002330 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800231c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 7100 	mov.w	r1, #512	; 0x200
 800232a:	4803      	ldr	r0, [pc, #12]	; (8002338 <_ZN3LED2LREaa+0x6c>)
 800232c:	f009 f87a 	bl	800b424 <HAL_GPIO_WritePin>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40020000 	.word	0x40020000

0800233c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800233c:	b580      	push	{r7, lr}
 800233e:	b092      	sub	sp, #72	; 0x48
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fe92 	bl	8002074 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
 8002354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002356:	647b      	str	r3, [r7, #68]	; 0x44
 8002358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800235a:	331c      	adds	r3, #28
 800235c:	633b      	str	r3, [r7, #48]	; 0x30
 800235e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002362:	429a      	cmp	r2, r3
 8002364:	d008      	beq.n	8002378 <_ZN10LineSensorC1Ev+0x3c>
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	2200      	movs	r2, #0
 800236e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002372:	3302      	adds	r3, #2
 8002374:	647b      	str	r3, [r7, #68]	; 0x44
 8002376:	e7f2      	b.n	800235e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002382:	643b      	str	r3, [r7, #64]	; 0x40
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	3338      	adds	r3, #56	; 0x38
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	429a      	cmp	r2, r3
 8002390:	d009      	beq.n	80023a6 <_ZN10LineSensorC1Ev+0x6a>
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	623b      	str	r3, [r7, #32]
		s = 0;
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800239e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023a0:	3304      	adds	r3, #4
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	e7f1      	b.n	800238a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ac:	61fb      	str	r3, [r7, #28]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3338      	adds	r3, #56	; 0x38
 80023b6:	61bb      	str	r3, [r7, #24]
 80023b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d009      	beq.n	80023d4 <_ZN10LineSensorC1Ev+0x98>
 80023c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f04f 0200 	mov.w	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ce:	3304      	adds	r3, #4
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	e7f1      	b.n	80023b8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	63bb      	str	r3, [r7, #56]	; 0x38
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	3338      	adds	r3, #56	; 0x38
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d009      	beq.n	8002402 <_ZN10LineSensorC1Ev+0xc6>
 80023ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023f8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80023fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023fc:	3304      	adds	r3, #4
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	e7f1      	b.n	80023e6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4618      	mov	r0, r3
 8002406:	3748      	adds	r7, #72	; 0x48
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	220e      	movs	r2, #14
 8002418:	4619      	mov	r1, r3
 800241a:	4803      	ldr	r0, [pc, #12]	; (8002428 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800241c:	f007 fdd2 	bl	8009fc4 <HAL_ADC_Start_DMA>
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20047758 	.word	0x20047758

0800242c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002434:	2300      	movs	r3, #0
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b0d      	cmp	r3, #13
 800243c:	dc2f      	bgt.n	800249e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	3392      	adds	r3, #146	; 0x92
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	4413      	add	r3, r2
 8002448:	3304      	adds	r3, #4
 800244a:	ed93 7a00 	vldr	s14, [r3]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	33a0      	adds	r3, #160	; 0xa0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002472:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4619      	mov	r1, r3
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	1a5b      	subs	r3, r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	440b      	add	r3, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	3304      	adds	r3, #4
 8002492:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	3301      	adds	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e7cc      	b.n	8002438 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024a8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b09      	cmp	r3, #9
 80024b0:	d902      	bls.n	80024b8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024b2:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]


}
 80024b8:	bf00      	nop
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr
 80024c4:	200001fe 	.word	0x200001fe

080024c8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024c8:	b490      	push	{r4, r7}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024da:	2b0d      	cmp	r3, #13
 80024dc:	f200 8087 	bhi.w	80025ee <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80024e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	d81c      	bhi.n	8002528 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80024ee:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80024f2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80024f6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	1a9b      	subs	r3, r3, r2
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	4423      	add	r3, r4
 8002506:	3306      	adds	r3, #6
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4403      	add	r3, r0
 800250c:	3304      	adds	r3, #4
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	008b      	lsls	r3, r1, #2
 8002512:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002516:	440b      	add	r3, r1
 8002518:	3b30      	subs	r3, #48	; 0x30
 800251a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800251c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002520:	3301      	adds	r3, #1
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	e7de      	b.n	80024e6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800252e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002532:	2b09      	cmp	r3, #9
 8002534:	d84d      	bhi.n	80025d2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002536:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800253a:	3301      	adds	r3, #1
 800253c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002540:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002544:	2b09      	cmp	r3, #9
 8002546:	d83e      	bhi.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002548:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002552:	4413      	add	r3, r2
 8002554:	3b30      	subs	r3, #48	; 0x30
 8002556:	ed93 7a00 	vldr	s14, [r3]
 800255a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002564:	4413      	add	r3, r2
 8002566:	3b30      	subs	r3, #48	; 0x30
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002574:	d521      	bpl.n	80025ba <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002576:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002580:	4413      	add	r3, r2
 8002582:	3b30      	subs	r3, #48	; 0x30
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002588:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800258c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002590:	0092      	lsls	r2, r2, #2
 8002592:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002596:	440a      	add	r2, r1
 8002598:	3a30      	subs	r2, #48	; 0x30
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025a2:	440b      	add	r3, r1
 80025a4:	3b30      	subs	r3, #48	; 0x30
 80025a6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025a8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025b2:	4413      	add	r3, r2
 80025b4:	3b30      	subs	r3, #48	; 0x30
 80025b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025b8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025ba:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025be:	3301      	adds	r3, #1
 80025c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025c4:	e7bc      	b.n	8002540 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ca:	3301      	adds	r3, #1
 80025cc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025d0:	e7ad      	b.n	800252e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 80025d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	33b0      	adds	r3, #176	; 0xb0
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025e6:	3301      	adds	r3, #1
 80025e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025ec:	e773      	b.n	80024d6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	mon_sens9 = sensor[9];
	mon_sens10 = sensor[10];
	mon_sens11 = sensor[11];
	mon_sens12 = sensor[12];
	*/
}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	; 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bc90      	pop	{r4, r7}
 80025f6:	4770      	bx	lr

080025f8 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b0a0      	sub	sp, #128	; 0x80
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	f007 fc79 	bl	8009ef8 <HAL_Delay>

	lcd_clear();
 8002606:	f7fe fd4b 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800260a:	2100      	movs	r1, #0
 800260c:	2000      	movs	r0, #0
 800260e:	f7fe fd57 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002612:	4886      	ldr	r0, [pc, #536]	; (800282c <_ZN10LineSensor11calibrationEv+0x234>)
 8002614:	f7fe fd7e 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002618:	2101      	movs	r1, #1
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fd50 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002620:	4883      	ldr	r0, [pc, #524]	; (8002830 <_ZN10LineSensor11calibrationEv+0x238>)
 8002622:	f7fe fd77 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002626:	2300      	movs	r3, #0
 8002628:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800262c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002630:	2b0d      	cmp	r3, #13
 8002632:	d823      	bhi.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002634:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002638:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800263c:	6879      	ldr	r1, [r7, #4]
 800263e:	32b0      	adds	r2, #176	; 0xb0
 8002640:	0092      	lsls	r2, r2, #2
 8002642:	440a      	add	r2, r1
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800264c:	440b      	add	r3, r1
 800264e:	3b40      	subs	r3, #64	; 0x40
 8002650:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002652:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002656:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	32b0      	adds	r2, #176	; 0xb0
 800265e:	0092      	lsls	r2, r2, #2
 8002660:	440a      	add	r2, r1
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800266a:	440b      	add	r3, r1
 800266c:	3b78      	subs	r3, #120	; 0x78
 800266e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002670:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002674:	3301      	adds	r3, #1
 8002676:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800267a:	e7d7      	b.n	800262c <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd02 	bl	800208c <_ZN8JoyStick8getValueEv>
 8002688:	4603      	mov	r3, r0
 800268a:	2b02      	cmp	r3, #2
 800268c:	bf14      	ite	ne
 800268e:	2301      	movne	r3, #1
 8002690:	2300      	moveq	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d079      	beq.n	800278c <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002698:	2300      	movs	r3, #0
 800269a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800269e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026a2:	2b0d      	cmp	r3, #13
 80026a4:	d850      	bhi.n	8002748 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80026a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026b0:	4413      	add	r3, r2
 80026b2:	3b40      	subs	r3, #64	; 0x40
 80026b4:	ed93 7a00 	vldr	s14, [r3]
 80026b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	33b0      	adds	r3, #176	; 0xb0
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	edd3 7a00 	vldr	s15, [r3]
 80026c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d0:	d50f      	bpl.n	80026f2 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80026d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80026d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	32b0      	adds	r2, #176	; 0xb0
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	440a      	add	r2, r1
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80026ea:	440b      	add	r3, r1
 80026ec:	3b40      	subs	r3, #64	; 0x40
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e024      	b.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80026f2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80026fc:	4413      	add	r3, r2
 80026fe:	3b78      	subs	r3, #120	; 0x78
 8002700:	ed93 7a00 	vldr	s14, [r3]
 8002704:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	33b0      	adds	r3, #176	; 0xb0
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	edd3 7a00 	vldr	s15, [r3]
 8002714:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271c:	dd0e      	ble.n	800273c <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800271e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002722:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	32b0      	adds	r2, #176	; 0xb0
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	440a      	add	r2, r1
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002736:	440b      	add	r3, r1
 8002738:	3b78      	subs	r3, #120	; 0x78
 800273a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002740:	3301      	adds	r3, #1
 8002742:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002746:	e7aa      	b.n	800269e <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800274e:	4618      	mov	r0, r3
 8002750:	f002 fe68 	bl	8005424 <_ZN12RotarySwitch8getValueEv>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	bf0c      	ite	eq
 800275a:	2301      	moveq	r3, #1
 800275c:	2300      	movne	r3, #0
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d009      	beq.n	8002778 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800276a:	2201      	movs	r2, #1
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fdab 	bl	80022cc <_ZN3LED2LREaa>
 8002776:	e781      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800277e:	2200      	movs	r2, #0
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fda1 	bl	80022cc <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800278a:	e777      	b.n	800267c <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800278c:	2300      	movs	r3, #0
 800278e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002792:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002796:	2b0d      	cmp	r3, #13
 8002798:	d826      	bhi.n	80027e8 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800279a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027a4:	4413      	add	r3, r2
 80027a6:	3b40      	subs	r3, #64	; 0x40
 80027a8:	ed93 7a00 	vldr	s14, [r3]
 80027ac:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b6:	4413      	add	r3, r2
 80027b8:	3b78      	subs	r3, #120	; 0x78
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027c6:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002834 <_ZN10LineSensor11calibrationEv+0x23c>
 80027ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	3392      	adds	r3, #146	; 0x92
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	3304      	adds	r3, #4
 80027d8:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027dc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80027e0:	3301      	adds	r3, #1
 80027e2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80027e6:	e7d4      	b.n	8002792 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80027ee:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027f2:	2b0d      	cmp	r3, #13
 80027f4:	d815      	bhi.n	8002822 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80027f6:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80027fa:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002804:	440a      	add	r2, r1
 8002806:	3a78      	subs	r2, #120	; 0x78
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	33a0      	adds	r3, #160	; 0xa0
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	3304      	adds	r3, #4
 8002814:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002816:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800281a:	3301      	adds	r3, #1
 800281c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002820:	e7e5      	b.n	80027ee <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002822:	bf00      	nop
 8002824:	3780      	adds	r7, #128	; 0x80
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	08018d74 	.word	0x08018d74
 8002830:	08018d80 	.word	0x08018d80
 8002834:	447a0000 	.word	0x447a0000

08002838 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002844:	2303      	movs	r3, #3
 8002846:	81bb      	strh	r3, [r7, #12]
 8002848:	89bb      	ldrh	r3, [r7, #12]
 800284a:	2b0a      	cmp	r3, #10
 800284c:	d814      	bhi.n	8002878 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800284e:	89bb      	ldrh	r3, [r7, #12]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	33b0      	adds	r3, #176	; 0xb0
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	4413      	add	r3, r2
 8002858:	edd3 7a00 	vldr	s15, [r3]
 800285c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80028cc <_ZN10LineSensor13emergencyStopEv+0x94>
 8002860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002868:	db02      	blt.n	8002870 <_ZN10LineSensor13emergencyStopEv+0x38>
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	3301      	adds	r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002870:	89bb      	ldrh	r3, [r7, #12]
 8002872:	3301      	adds	r3, #1
 8002874:	81bb      	strh	r3, [r7, #12]
 8002876:	e7e7      	b.n	8002848 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	2b07      	cmp	r3, #7
 800287c:	d906      	bls.n	800288c <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 800287e:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	3301      	adds	r3, #1
 8002884:	b29a      	uxth	r2, r3
 8002886:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002888:	801a      	strh	r2, [r3, #0]
 800288a:	e002      	b.n	8002892 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 800288c:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002892:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	2b63      	cmp	r3, #99	; 0x63
 8002898:	d903      	bls.n	80028a2 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e002      	b.n	80028a8 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80028a2:	4b0c      	ldr	r3, [pc, #48]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d903      	bls.n	80028bc <_ZN10LineSensor13emergencyStopEv+0x84>
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80028b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80028ba:	801a      	strh	r2, [r3, #0]

	return flag;
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80028be:	781b      	ldrb	r3, [r3, #0]

}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr
 80028cc:	44098000 	.word	0x44098000
 80028d0:	20000200 	.word	0x20000200
 80028d4:	20000202 	.word	0x20000202

080028d8 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	ed87 0a01 	vstr	s0, [r7, #4]
 80028e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80028e6:	eef0 7ae7 	vabs.f32	s15, s15
 80028ea:	eeb0 0a67 	vmov.f32	s0, s15
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), ignore_check_cnt_(0), all_sideline_flag_(false)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	; 0x28
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	62da      	str	r2, [r3, #44]	; 0x2c
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	; 0x30
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f04f 0200 	mov.w	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f04f 0200 	mov.w	r2, #0
 8002950:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002976:	330c      	adds	r3, #12
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002984:	3350      	adds	r3, #80	; 0x50
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002990:	3352      	adds	r3, #82	; 0x52
 8002992:	2200      	movs	r2, #0
 8002994:	801a      	strh	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800299c:	3354      	adds	r3, #84	; 0x54
 800299e:	2200      	movs	r2, #0
 80029a0:	801a      	strh	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029a8:	3318      	adds	r3, #24
 80029aa:	2200      	movs	r2, #0
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029b4:	331c      	adds	r3, #28
 80029b6:	2200      	movs	r2, #0
 80029b8:	801a      	strh	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029c0:	331e      	adds	r3, #30
 80029c2:	2200      	movs	r2, #0
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029cc:	3320      	adds	r3, #32
 80029ce:	2200      	movs	r2, #0
 80029d0:	801a      	strh	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029d8:	3322      	adds	r3, #34	; 0x22
 80029da:	2200      	movs	r2, #0
 80029dc:	701a      	strb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029e4:	3323      	adds	r3, #35	; 0x23
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029f0:	3324      	adds	r3, #36	; 0x24
 80029f2:	2200      	movs	r2, #0
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80029fc:	3328      	adds	r3, #40	; 0x28
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a0a:	332c      	adds	r3, #44	; 0x2c
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a18:	3330      	adds	r3, #48	; 0x30
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a26:	3334      	adds	r3, #52	; 0x34
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a34:	3338      	adds	r3, #56	; 0x38
 8002a36:	2200      	movs	r2, #0
 8002a38:	801a      	strh	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a40:	333a      	adds	r3, #58	; 0x3a
 8002a42:	2200      	movs	r2, #0
 8002a44:	801a      	strh	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a4c:	333c      	adds	r3, #60	; 0x3c
 8002a4e:	2200      	movs	r2, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002a58:	333e      	adds	r3, #62	; 0x3e
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a74:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7a:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a80:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a86:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a8c:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002a94:	2300      	movs	r3, #0
 8002a96:	83fb      	strh	r3, [r7, #30]
 8002a98:	8bfb      	ldrh	r3, [r7, #30]
 8002a9a:	f241 726f 	movw	r2, #5999	; 0x176f
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d80d      	bhi.n	8002abe <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c6>
		velocity_table_[i] = 0;
 8002aa2:	8bfb      	ldrh	r3, [r7, #30]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002aaa:	3304      	adds	r3, #4
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002ab6:	8bfb      	ldrh	r3, [r7, #30]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	83fb      	strh	r3, [r7, #30]
 8002abc:	e7ec      	b.n	8002a98 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002abe:	2300      	movs	r3, #0
 8002ac0:	83bb      	strh	r3, [r7, #28]
 8002ac2:	8bbb      	ldrh	r3, [r7, #28]
 8002ac4:	2b63      	cmp	r3, #99	; 0x63
 8002ac6:	d80d      	bhi.n	8002ae4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ec>
		crossline_distance_[i] = 0;
 8002ac8:	8bbb      	ldrh	r3, [r7, #28]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002ad0:	3316      	adds	r3, #22
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002adc:	8bbb      	ldrh	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	83bb      	strh	r3, [r7, #28]
 8002ae2:	e7ee      	b.n	8002ac2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ca>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	837b      	strh	r3, [r7, #26]
 8002ae8:	8b7b      	ldrh	r3, [r7, #26]
 8002aea:	2b63      	cmp	r3, #99	; 0x63
 8002aec:	d80d      	bhi.n	8002b0a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x212>
		crossline_distance2_[i] = 0;
 8002aee:	8b7b      	ldrh	r3, [r7, #26]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002af6:	333a      	adds	r3, #58	; 0x3a
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b02:	8b7b      	ldrh	r3, [r7, #26]
 8002b04:	3301      	adds	r3, #1
 8002b06:	837b      	strh	r3, [r7, #26]
 8002b08:	e7ee      	b.n	8002ae8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	833b      	strh	r3, [r7, #24]
 8002b0e:	8b3b      	ldrh	r3, [r7, #24]
 8002b10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b14:	d20d      	bcs.n	8002b32 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23a>
		sideline_distance_[i] = 0;
 8002b16:	8b3b      	ldrh	r3, [r7, #24]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002b1e:	331e      	adds	r3, #30
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b2a:	8b3b      	ldrh	r3, [r7, #24]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	833b      	strh	r3, [r7, #24]
 8002b30:	e7ed      	b.n	8002b0e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x216>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b32:	2300      	movs	r3, #0
 8002b34:	82fb      	strh	r3, [r7, #22]
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b3c:	d20d      	bcs.n	8002b5a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x262>
		sideline_distance2_[i] = 0;
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002b46:	3312      	adds	r3, #18
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b52:	8afb      	ldrh	r3, [r7, #22]
 8002b54:	3301      	adds	r3, #1
 8002b56:	82fb      	strh	r3, [r7, #22]
 8002b58:	e7ed      	b.n	8002b36 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x23e>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3724      	adds	r7, #36	; 0x24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002b8c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002ba0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb4:	edc7 7a03 	vstr	s15, [r7, #12]
	//mon_diff = diff;

	return diff;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	ee07 3a90 	vmov	s15, r3

}
 8002bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	0000      	movs	r0, r0
	...

08002bd0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002bd0:	b5b0      	push	{r4, r5, r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff ffc5 	bl	8002b68 <_ZN9LineTrace9calcErrorEv>
 8002bde:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d007      	beq.n	8002bfc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002bec:	4b66      	ldr	r3, [pc, #408]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c02:	3354      	adds	r3, #84	; 0x54
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d14c      	bne.n	8002ca6 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c12:	ed97 7a03 	vldr	s14, [r7, #12]
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c36:	ee17 0a90 	vmov	r0, s15
 8002c3a:	f7fd fc9d 	bl	8000578 <__aeabi_f2d>
 8002c3e:	a350      	add	r3, pc, #320	; (adr r3, 8002d80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c44:	f7fd fe1a 	bl	800087c <__aeabi_ddiv>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	460c      	mov	r4, r1
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	4621      	mov	r1, r4
 8002c50:	f7fd ffe2 	bl	8000c18 <__aeabi_d2f>
 8002c54:	4603      	mov	r3, r0
 8002c56:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002c58:	4b4b      	ldr	r3, [pc, #300]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc8b 	bl	8000578 <__aeabi_f2d>
 8002c62:	4604      	mov	r4, r0
 8002c64:	460d      	mov	r5, r1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c74:	ee17 0a90 	vmov	r0, s15
 8002c78:	f7fd fc7e 	bl	8000578 <__aeabi_f2d>
 8002c7c:	a340      	add	r3, pc, #256	; (adr r3, 8002d80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c82:	f7fd fcd1 	bl	8000628 <__aeabi_dmul>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f7fd fb15 	bl	80002bc <__adddf3>
 8002c92:	4603      	mov	r3, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	4618      	mov	r0, r3
 8002c98:	4621      	mov	r1, r4
 8002c9a:	f7fd ffbd 	bl	8000c18 <__aeabi_d2f>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	4b39      	ldr	r3, [pc, #228]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	e04b      	b.n	8002d3e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002cac:	ed97 7a03 	vldr	s14, [r7, #12]
 8002cb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cb4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002cbe:	4b33      	ldr	r3, [pc, #204]	; (8002d8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002cc0:	edd3 7a00 	vldr	s15, [r3]
 8002cc4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002cc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd0:	ee17 0a90 	vmov	r0, s15
 8002cd4:	f7fd fc50 	bl	8000578 <__aeabi_f2d>
 8002cd8:	a329      	add	r3, pc, #164	; (adr r3, 8002d80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fdcd 	bl	800087c <__aeabi_ddiv>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4621      	mov	r1, r4
 8002cea:	f7fd ff95 	bl	8000c18 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc3e 	bl	8000578 <__aeabi_f2d>
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	460d      	mov	r5, r1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0e:	ee17 0a90 	vmov	r0, s15
 8002d12:	f7fd fc31 	bl	8000578 <__aeabi_f2d>
 8002d16:	a31a      	add	r3, pc, #104	; (adr r3, 8002d80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc84 	bl	8000628 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4620      	mov	r0, r4
 8002d26:	4629      	mov	r1, r5
 8002d28:	f7fd fac8 	bl	80002bc <__adddf3>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	460c      	mov	r4, r1
 8002d30:	4618      	mov	r0, r3
 8002d32:	4621      	mov	r1, r4
 8002d34:	f7fd ff70 	bl	8000c18 <__aeabi_d2f>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d3c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002d3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	; (8002d88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d4c:	edd3 7a00 	vldr	s15, [r3]
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002d62:	edd7 0a02 	vldr	s1, [r7, #8]
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f002 ffec 	bl	8005d48 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002d70:	4a06      	ldr	r2, [pc, #24]	; (8002d8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6013      	str	r3, [r2, #0]

}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d84:	3f50624d 	.word	0x3f50624d
 8002d88:	20000214 	.word	0x20000214
 8002d8c:	20000210 	.word	0x20000210

08002d90 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fc75 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 f9fb 	bl	80051a2 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogsDis2();
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 ff8a 	bl	8004cca <_ZN6Logger13resetLogsDis2Ev>

	logging_flag_ = true;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 f850 	bl	8004e78 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002de8:	b590      	push	{r4, r7, lr}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	881b      	ldrh	r3, [r3, #0]
 8002dfe:	461c      	mov	r4, r3
 8002e00:	4610      	mov	r0, r2
 8002e02:	f7fe fc25 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e06:	eef0 7a40 	vmov.f32	s15, s0
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002e10:	3316      	adds	r3, #22
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e20:	3318      	adds	r3, #24
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e2e:	3318      	adds	r3, #24
 8002e30:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e38:	3318      	adds	r3, #24
 8002e3a:	881b      	ldrh	r3, [r3, #0]
 8002e3c:	2b63      	cmp	r3, #99	; 0x63
 8002e3e:	d905      	bls.n	8002e4c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e46:	3318      	adds	r3, #24
 8002e48:	2263      	movs	r2, #99	; 0x63
 8002e4a:	801a      	strh	r2, [r3, #0]
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd90      	pop	{r4, r7, pc}

08002e54 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e66:	331a      	adds	r3, #26
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	461c      	mov	r4, r3
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fe fbef 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002e72:	eef0 7a40 	vmov.f32	s15, s0
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002e7c:	333a      	adds	r3, #58	; 0x3a
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e8c:	331a      	adds	r3, #26
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002e9a:	331a      	adds	r3, #26
 8002e9c:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ea4:	331a      	adds	r3, #26
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	2b63      	cmp	r3, #99	; 0x63
 8002eaa:	d905      	bls.n	8002eb8 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002eb2:	331a      	adds	r3, #26
 8002eb4:	2263      	movs	r2, #99	; 0x63
 8002eb6:	801a      	strh	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd90      	pop	{r4, r7, pc}

08002ec0 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ec0:	b590      	push	{r4, r7, lr}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ed2:	331c      	adds	r3, #28
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	461c      	mov	r4, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fe fbb9 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002ede:	eef0 7a40 	vmov.f32	s15, s0
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ee8:	331e      	adds	r3, #30
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ef8:	331c      	adds	r3, #28
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f06:	331c      	adds	r3, #28
 8002f08:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f10:	331c      	adds	r3, #28
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f18:	d306      	bcc.n	8002f28 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f20:	331c      	adds	r3, #28
 8002f22:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f26:	801a      	strh	r2, [r3, #0]
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}

08002f30 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695a      	ldr	r2, [r3, #20]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f42:	331e      	adds	r3, #30
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461c      	mov	r4, r3
 8002f48:	4610      	mov	r0, r2
 8002f4a:	f7fe fb81 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8002f4e:	eef0 7a40 	vmov.f32	s15, s0
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8002f58:	3312      	adds	r3, #18
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f68:	331e      	adds	r3, #30
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f76:	331e      	adds	r3, #30
 8002f78:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f80:	331e      	adds	r3, #30
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f88:	d306      	bcc.n	8002f98 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f90:	331e      	adds	r3, #30
 8002f92:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002f96:	801a      	strh	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd90      	pop	{r4, r7, pc}

08002fa0 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	ed2d 8b02 	vpush	{d8}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d046      	beq.n	8003044 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fbc:	3354      	adds	r3, #84	; 0x54
 8002fbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d11c      	bne.n	8003000 <_ZN9LineTrace9storeLogsEv+0x60>
			//logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69dc      	ldr	r4, [r3, #28]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fb2f 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8002fd4:	eeb0 8a40 	vmov.f32	s16, s0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 f8cf 	bl	8005180 <_ZN8Odometry13getDeltaThetaEv>
 8002fe2:	ec53 2b10 	vmov	r2, r3, d0
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fe15 	bl	8000c18 <__aeabi_d2f>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	ee00 3a90 	vmov	s1, r3
 8002ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f001 fd71 	bl	8004ae0 <_ZN6Logger21storeDistanceAndThetaEff>
 8002ffe:	e01b      	b.n	8003038 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getDeltaTheta());
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69dc      	ldr	r4, [r3, #28]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fe fb12 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 800300e:	eeb0 8a40 	vmov.f32	s16, s0
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4618      	mov	r0, r3
 8003018:	f002 f8b2 	bl	8005180 <_ZN8Odometry13getDeltaThetaEv>
 800301c:	ec53 2b10 	vmov	r2, r3, d0
 8003020:	4610      	mov	r0, r2
 8003022:	4619      	mov	r1, r3
 8003024:	f7fd fdf8 	bl	8000c18 <__aeabi_d2f>
 8003028:	4603      	mov	r3, r0
 800302a:	ee00 3a90 	vmov	s1, r3
 800302e:	eeb0 0a48 	vmov.f32	s0, s16
 8003032:	4620      	mov	r0, r4
 8003034:	f001 fd54 	bl	8004ae0 <_ZN6Logger21storeDistanceAndThetaEff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003042:	801a      	strh	r2, [r3, #0]
	}
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	ecbd 8b02 	vpop	{d8}
 800304e:	bd90      	pop	{r4, r7, pc}
 8003050:	20000204 	.word	0x20000204

08003054 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
			break;
		}
	}
	*/

	while(crossline_idx_ <= CROSSLINE_SIZE){
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003062:	3318      	adds	r3, #24
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	2b64      	cmp	r3, #100	; 0x64
 8003068:	d85a      	bhi.n	8003120 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		float temp_crossline_distance = crossline_distance_[crossline_idx_];
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003070:	3318      	adds	r3, #24
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800307a:	3316      	adds	r3, #22
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f7fe fae1 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 800308e:	eeb0 7a40 	vmov.f32	s14, s0
 8003092:	edd7 7a03 	vldr	s15, [r7, #12]
 8003096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	f7ff fc1b 	bl	80028d8 <_ZSt3absf>
 80030a2:	ed87 0a02 	vstr	s0, [r7, #8]
		if(diff <= 250){
 80030a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80030aa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003144 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xf0>
 80030ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	d826      	bhi.n	8003106 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb2>
			correction_check_cnt_ = 0;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030be:	3338      	adds	r3, #56	; 0x38
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6959      	ldr	r1, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030ce:	3318      	adds	r3, #24
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80030d8:	3316      	adds	r3, #22
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eeb0 0a67 	vmov.f32	s0, s15
 80030e6:	4608      	mov	r0, r1
 80030e8:	f7fe fac1 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			crossline_idx_++;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030f2:	3318      	adds	r3, #24
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003100:	3318      	adds	r3, #24
 8003102:	801a      	strh	r2, [r3, #0]
			break;
 8003104:	e00c      	b.n	8003120 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xcc>
		}
		crossline_idx_++;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800310c:	3318      	adds	r3, #24
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	3301      	adds	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800311a:	3318      	adds	r3, #24
 800311c:	801a      	strh	r2, [r3, #0]
	while(crossline_idx_ <= CROSSLINE_SIZE){
 800311e:	e79d      	b.n	800305c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8>
	}

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003126:	3318      	adds	r3, #24
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	2b63      	cmp	r3, #99	; 0x63
 800312c:	d905      	bls.n	800313a <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xe6>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003134:	3318      	adds	r3, #24
 8003136:	2263      	movs	r2, #99	; 0x63
 8003138:	801a      	strh	r2, [r3, #0]

}
 800313a:	bf00      	nop
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	437a0000 	.word	0x437a0000

08003148 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003150:	2300      	movs	r3, #0
 8003152:	82fb      	strh	r3, [r7, #22]
 8003154:	8afb      	ldrh	r3, [r7, #22]
 8003156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800315a:	d23d      	bcs.n	80031d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 800315c:	8afb      	ldrh	r3, [r7, #22]
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003164:	331e      	adds	r3, #30
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fa6c 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 8003178:	eeb0 7a40 	vmov.f32	s14, s0
 800317c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003180:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	f7ff fba6 	bl	80028d8 <_ZSt3absf>
 800318c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003190:	edd7 7a03 	vldr	s15, [r7, #12]
 8003194:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003200 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031a0:	d816      	bhi.n	80031d0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031a8:	3338      	adds	r3, #56	; 0x38
 80031aa:	2200      	movs	r2, #0
 80031ac:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6959      	ldr	r1, [r3, #20]
 80031b2:	8afb      	ldrh	r3, [r7, #22]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 80031ba:	331e      	adds	r3, #30
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4413      	add	r3, r2
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	eeb0 0a67 	vmov.f32	s0, s15
 80031c8:	4608      	mov	r0, r1
 80031ca:	f7fe fa50 	bl	800166e <_ZN7Encoder16setTotalDistanceEf>
			break;
 80031ce:	e003      	b.n	80031d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031d0:	8afb      	ldrh	r3, [r7, #22]
 80031d2:	3301      	adds	r3, #1
 80031d4:	82fb      	strh	r3, [r7, #22]
 80031d6:	e7bd      	b.n	8003154 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031de:	331c      	adds	r3, #28
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031e6:	d306      	bcc.n	80031f6 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031ee:	331c      	adds	r3, #28
 80031f0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031f4:	801a      	strh	r2, [r3, #0]

}
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	43660000 	.word	0x43660000

08003204 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	ed87 0a00 	vstr	s0, [r7]
		else if(radius < 800) velocity = 1.7;
		else if(radius < 1400) velocity = 2.0;
		else velocity = max_velocity_;
	}
	*/
	if(mode_selector_ == SECOND_RUNNING){
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003216:	3354      	adds	r3, #84	; 0x54
 8003218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d144      	bne.n	80032aa <_ZN9LineTrace15radius2VelocityEf+0xa6>
		if(radius < 400) velocity = min_velocity_;
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800335c <_ZN9LineTrace15radius2VelocityEf+0x158>
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d504      	bpl.n	800323c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e084      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.5;
 800323c:	edd7 7a00 	vldr	s15, [r7]
 8003240:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003360 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	d503      	bpl.n	8003256 <_ZN9LineTrace15radius2VelocityEf+0x52>
 800324e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	e077      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 8003256:	edd7 7a00 	vldr	s15, [r7]
 800325a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003364 <_ZN9LineTrace15radius2VelocityEf+0x160>
 800325e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003266:	d503      	bpl.n	8003270 <_ZN9LineTrace15radius2VelocityEf+0x6c>
 8003268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	e06a      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003270:	edd7 7a00 	vldr	s15, [r7]
 8003274:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003368 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800327c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003280:	d502      	bpl.n	8003288 <_ZN9LineTrace15radius2VelocityEf+0x84>
 8003282:	4b3a      	ldr	r3, [pc, #232]	; (800336c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e05e      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003288:	edd7 7a00 	vldr	s15, [r7]
 800328c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8003370 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003298:	d502      	bpl.n	80032a0 <_ZN9LineTrace15radius2VelocityEf+0x9c>
 800329a:	4b36      	ldr	r3, [pc, #216]	; (8003374 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e052      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity_;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	e04d      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032b0:	3354      	adds	r3, #84	; 0x54
 80032b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d143      	bne.n	8003342 <_ZN9LineTrace15radius2VelocityEf+0x13e>
		if(radius < 400) velocity = min_velocity2_;
 80032ba:	edd7 7a00 	vldr	s15, [r7]
 80032be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800335c <_ZN9LineTrace15radius2VelocityEf+0x158>
 80032c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	d504      	bpl.n	80032d6 <_ZN9LineTrace15radius2VelocityEf+0xd2>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e037      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 500) velocity = 1.7;
 80032d6:	edd7 7a00 	vldr	s15, [r7]
 80032da:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003360 <_ZN9LineTrace15radius2VelocityEf+0x15c>
 80032de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	d502      	bpl.n	80032ee <_ZN9LineTrace15radius2VelocityEf+0xea>
 80032e8:	4b23      	ldr	r3, [pc, #140]	; (8003378 <_ZN9LineTrace15radius2VelocityEf+0x174>)
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e02b      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 650) velocity = 2.0;
 80032ee:	edd7 7a00 	vldr	s15, [r7]
 80032f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003364 <_ZN9LineTrace15radius2VelocityEf+0x160>
 80032f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d503      	bpl.n	8003308 <_ZN9LineTrace15radius2VelocityEf+0x104>
 8003300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	e01e      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 1500) velocity = 2.5;
 8003308:	edd7 7a00 	vldr	s15, [r7]
 800330c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003368 <_ZN9LineTrace15radius2VelocityEf+0x164>
 8003310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003318:	d502      	bpl.n	8003320 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 800331a:	4b14      	ldr	r3, [pc, #80]	; (800336c <_ZN9LineTrace15radius2VelocityEf+0x168>)
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e012      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else if(radius < 2000) velocity = 3.0;
 8003320:	edd7 7a00 	vldr	s15, [r7]
 8003324:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003370 <_ZN9LineTrace15radius2VelocityEf+0x16c>
 8003328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d502      	bpl.n	8003338 <_ZN9LineTrace15radius2VelocityEf+0x134>
 8003332:	4b10      	ldr	r3, [pc, #64]	; (8003374 <_ZN9LineTrace15radius2VelocityEf+0x170>)
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e006      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
		else velocity = max_velocity2_;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	e001      	b.n	8003346 <_ZN9LineTrace15radius2VelocityEf+0x142>
	}
	else velocity = 1.3;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <_ZN9LineTrace15radius2VelocityEf+0x178>)
 8003344:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	ee07 3a90 	vmov	s15, r3
}
 800334c:	eeb0 0a67 	vmov.f32	s0, s15
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	43c80000 	.word	0x43c80000
 8003360:	43fa0000 	.word	0x43fa0000
 8003364:	44228000 	.word	0x44228000
 8003368:	44bb8000 	.word	0x44bb8000
 800336c:	40200000 	.word	0x40200000
 8003370:	44fa0000 	.word	0x44fa0000
 8003374:	40400000 	.word	0x40400000
 8003378:	3fd9999a 	.word	0x3fd9999a
 800337c:	3fa66666 	.word	0x3fa66666

08003380 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003380:	b5b0      	push	{r4, r5, r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	ed87 0a02 	vstr	s0, [r7, #8]
 800338c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800338e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003392:	83fb      	strh	r3, [r7, #30]
 8003394:	8bfb      	ldrh	r3, [r7, #30]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 808d 	beq.w	80034b6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800339c:	8bfb      	ldrh	r3, [r7, #30]
 800339e:	3b01      	subs	r3, #1
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033a6:	3304      	adds	r3, #4
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	ed93 7a00 	vldr	s14, [r3]
 80033b0:	8bfb      	ldrh	r3, [r7, #30]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033b8:	3304      	adds	r3, #4
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c6:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80033ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80033ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	dd6a      	ble.n	80034ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80033d8:	8bfb      	ldrh	r3, [r7, #30]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	4413      	add	r3, r2
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fd f8c8 	bl	8000578 <__aeabi_f2d>
 80033e8:	a335      	add	r3, pc, #212	; (adr r3, 80034c0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f7fd f91b 	bl	8000628 <__aeabi_dmul>
 80033f2:	4603      	mov	r3, r0
 80033f4:	460c      	mov	r4, r1
 80033f6:	4625      	mov	r5, r4
 80033f8:	461c      	mov	r4, r3
 80033fa:	69b8      	ldr	r0, [r7, #24]
 80033fc:	f7fd f8bc 	bl	8000578 <__aeabi_f2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4620      	mov	r0, r4
 8003406:	4629      	mov	r1, r5
 8003408:	f7fd fa38 	bl	800087c <__aeabi_ddiv>
 800340c:	4603      	mov	r3, r0
 800340e:	460c      	mov	r4, r1
 8003410:	4618      	mov	r0, r3
 8003412:	4621      	mov	r1, r4
 8003414:	f7fd fc00 	bl	8000c18 <__aeabi_d2f>
 8003418:	4603      	mov	r3, r0
 800341a:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800341c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003420:	ed97 7a05 	vldr	s14, [r7, #20]
 8003424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003428:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800342c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003430:	edd7 7a02 	vldr	s15, [r7, #8]
 8003434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343c:	dd37      	ble.n	80034ae <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 800343e:	8bfb      	ldrh	r3, [r7, #30]
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003446:	3304      	adds	r3, #4
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f892 	bl	8000578 <__aeabi_f2d>
 8003454:	4604      	mov	r4, r0
 8003456:	460d      	mov	r5, r1
 8003458:	8bfb      	ldrh	r3, [r7, #30]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	4413      	add	r3, r2
 8003460:	ed93 7a00 	vldr	s14, [r3]
 8003464:	edd7 7a02 	vldr	s15, [r7, #8]
 8003468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346c:	ee17 0a90 	vmov	r0, s15
 8003470:	f7fd f882 	bl	8000578 <__aeabi_f2d>
 8003474:	a312      	add	r3, pc, #72	; (adr r3, 80034c0 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f7fd f8d5 	bl	8000628 <__aeabi_dmul>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f7fc ff19 	bl	80002bc <__adddf3>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	4619      	mov	r1, r3
 8003490:	4622      	mov	r2, r4
 8003492:	8bfb      	ldrh	r3, [r7, #30]
 8003494:	1e5c      	subs	r4, r3, #1
 8003496:	4608      	mov	r0, r1
 8003498:	4611      	mov	r1, r2
 800349a:	f7fd fbbd 	bl	8000c18 <__aeabi_d2f>
 800349e:	4601      	mov	r1, r0
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80034a6:	3304      	adds	r3, #4
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80034ae:	8bfb      	ldrh	r3, [r7, #30]
 80034b0:	3b01      	subs	r3, #1
 80034b2:	83fb      	strh	r3, [r7, #30]
 80034b4:	e76e      	b.n	8003394 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80034b6:	bf00      	nop
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	bf00      	nop
 80034c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80034c4:	3f50624d 	.word	0x3f50624d

080034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80034c8:	b5b0      	push	{r4, r5, r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80034d4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80034d6:	2300      	movs	r3, #0
 80034d8:	83fb      	strh	r3, [r7, #30]
 80034da:	8bfb      	ldrh	r3, [r7, #30]
 80034dc:	f241 726f 	movw	r2, #5999	; 0x176f
 80034e0:	4293      	cmp	r3, r2
 80034e2:	f200 808d 	bhi.w	8003600 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	3301      	adds	r3, #1
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034f0:	3304      	adds	r3, #4
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	ed93 7a00 	vldr	s14, [r3]
 80034fa:	8bfb      	ldrh	r3, [r7, #30]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003502:	3304      	adds	r3, #4
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003510:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003514:	edd7 7a06 	vldr	s15, [r7, #24]
 8003518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd6a      	ble.n	80035f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f823 	bl	8000578 <__aeabi_f2d>
 8003532:	a335      	add	r3, pc, #212	; (adr r3, 8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f876 	bl	8000628 <__aeabi_dmul>
 800353c:	4603      	mov	r3, r0
 800353e:	460c      	mov	r4, r1
 8003540:	4625      	mov	r5, r4
 8003542:	461c      	mov	r4, r3
 8003544:	69b8      	ldr	r0, [r7, #24]
 8003546:	f7fd f817 	bl	8000578 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4620      	mov	r0, r4
 8003550:	4629      	mov	r1, r5
 8003552:	f7fd f993 	bl	800087c <__aeabi_ddiv>
 8003556:	4603      	mov	r3, r0
 8003558:	460c      	mov	r4, r1
 800355a:	4618      	mov	r0, r3
 800355c:	4621      	mov	r1, r4
 800355e:	f7fd fb5b 	bl	8000c18 <__aeabi_d2f>
 8003562:	4603      	mov	r3, r0
 8003564:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003566:	edd7 6a06 	vldr	s13, [r7, #24]
 800356a:	ed97 7a05 	vldr	s14, [r7, #20]
 800356e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003572:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003576:	ed97 7a04 	vldr	s14, [r7, #16]
 800357a:	edd7 7a02 	vldr	s15, [r7, #8]
 800357e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003586:	dd37      	ble.n	80035f8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003588:	8bfb      	ldrh	r3, [r7, #30]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003590:	3304      	adds	r3, #4
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7fc ffed 	bl	8000578 <__aeabi_f2d>
 800359e:	4604      	mov	r4, r0
 80035a0:	460d      	mov	r5, r1
 80035a2:	8bfb      	ldrh	r3, [r7, #30]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	4413      	add	r3, r2
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80035b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b6:	ee17 0a90 	vmov	r0, s15
 80035ba:	f7fc ffdd 	bl	8000578 <__aeabi_f2d>
 80035be:	a312      	add	r3, pc, #72	; (adr r3, 8003608 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c4:	f7fd f830 	bl	8000628 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4620      	mov	r0, r4
 80035ce:	4629      	mov	r1, r5
 80035d0:	f7fc fe74 	bl	80002bc <__adddf3>
 80035d4:	4603      	mov	r3, r0
 80035d6:	460c      	mov	r4, r1
 80035d8:	4619      	mov	r1, r3
 80035da:	4622      	mov	r2, r4
 80035dc:	8bfb      	ldrh	r3, [r7, #30]
 80035de:	1c5c      	adds	r4, r3, #1
 80035e0:	4608      	mov	r0, r1
 80035e2:	4611      	mov	r1, r2
 80035e4:	f7fd fb18 	bl	8000c18 <__aeabi_d2f>
 80035e8:	4601      	mov	r1, r0
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035f0:	3304      	adds	r3, #4
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80035f8:	8bfb      	ldrh	r3, [r7, #30]
 80035fa:	3301      	adds	r3, #1
 80035fc:	83fb      	strh	r3, [r7, #30]
 80035fe:	e76c      	b.n	80034da <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003600:	bf00      	nop
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bdb0      	pop	{r4, r5, r7, pc}
 8003608:	d2f1a9fc 	.word	0xd2f1a9fc
 800360c:	3f50624d 	.word	0x3f50624d

08003610 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	4618      	mov	r0, r3
 800361e:	f7fe f843 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003628:	3350      	adds	r3, #80	; 0x50
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003634:	3352      	adds	r3, #82	; 0x52
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003640:	330c      	adds	r3, #12
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800365e:	3350      	adds	r3, #80	; 0x50
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800366a:	3352      	adds	r3, #82	; 0x52
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003676:	330c      	adds	r3, #12
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003698:	3350      	adds	r3, #80	; 0x50
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05e      	beq.n	800375e <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd ffd3 	bl	8001650 <_ZN7Encoder16getTotalDistanceEv>
 80036aa:	eeb0 7a40 	vmov.f32	s14, s0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036b4:	330c      	adds	r3, #12
 80036b6:	edd3 7a00 	vldr	s15, [r3]
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	bfac      	ite	ge
 80036c4:	2301      	movge	r3, #1
 80036c6:	2300      	movlt	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d025      	beq.n	800371a <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036d4:	330c      	adds	r3, #12
 80036d6:	ed93 7a00 	vldr	s14, [r3]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036e0:	3352      	adds	r3, #82	; 0x52
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	3332      	adds	r3, #50	; 0x32
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4413      	add	r3, r2
 80036ec:	3304      	adds	r3, #4
 80036ee:	edd3 7a00 	vldr	s15, [r3]
 80036f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036fc:	330c      	adds	r3, #12
 80036fe:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003708:	3352      	adds	r3, #82	; 0x52
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003716:	3352      	adds	r3, #82	; 0x52
 8003718:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003720:	3352      	adds	r3, #82	; 0x52
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	f241 726f 	movw	r2, #5999	; 0x176f
 8003728:	4293      	cmp	r3, r2
 800372a:	d906      	bls.n	800373a <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003732:	3352      	adds	r3, #82	; 0x52
 8003734:	f241 726f 	movw	r2, #5999	; 0x176f
 8003738:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003740:	3352      	adds	r3, #82	; 0x52
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800374a:	3304      	adds	r3, #4
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	edd3 7a00 	vldr	s15, [r3]
 8003754:	eeb0 0a67 	vmov.f32	s0, s15
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fad0 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003772:	2300      	movs	r3, #0
 8003774:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd ff59 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 8003780:	eeb0 7a40 	vmov.f32	s14, s0
 8003784:	edd7 7a00 	vldr	s15, [r7]
 8003788:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003790:	bf94      	ite	ls
 8003792:	2301      	movls	r3, #1
 8003794:	2300      	movhi	r3, #0
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
	...

080037ac <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80037c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037d0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80037e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80037ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037f0:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80037f4:	4a3d      	ldr	r2, [pc, #244]	; (80038ec <_ZN9LineTrace11isCrossLineEv+0x140>)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80037fa:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <_ZN9LineTrace11isCrossLineEv+0x144>)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6013      	str	r3, [r2, #0]

	//if(white_flag == false){
		if(sensor_edge_val_l < 650 && sensor_edge_val_r < 650 && encoder_->getCrossLineIgnoreDistance() >= 50){
 8003800:	edd7 7a03 	vldr	s15, [r7, #12]
 8003804:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80038f4 <_ZN9LineTrace11isCrossLineEv+0x148>
 8003808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800380c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003810:	d518      	bpl.n	8003844 <_ZN9LineTrace11isCrossLineEv+0x98>
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80038f4 <_ZN9LineTrace11isCrossLineEv+0x148>
 800381a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	d50f      	bpl.n	8003844 <_ZN9LineTrace11isCrossLineEv+0x98>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	695b      	ldr	r3, [r3, #20]
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd ff68 	bl	80016fe <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800382e:	eeb0 7a40 	vmov.f32	s14, s0
 8003832:	eddf 7a31 	vldr	s15, [pc, #196]	; 80038f8 <_ZN9LineTrace11isCrossLineEv+0x14c>
 8003836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	db01      	blt.n	8003844 <_ZN9LineTrace11isCrossLineEv+0x98>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <_ZN9LineTrace11isCrossLineEv+0x9a>
 8003844:	2300      	movs	r3, #0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 800384a:	4b2c      	ldr	r3, [pc, #176]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x150>)
 800384c:	881b      	ldrh	r3, [r3, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003854:	801a      	strh	r2, [r3, #0]
 8003856:	e002      	b.n	800385e <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8003858:	4b28      	ldr	r3, [pc, #160]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x150>)
 800385a:	2200      	movs	r2, #0
 800385c:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 800385e:	4b27      	ldr	r3, [pc, #156]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d93b      	bls.n	80038de <_ZN9LineTrace11isCrossLineEv+0x132>
			flag = true;
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 800386c:	4b25      	ldr	r3, [pc, #148]	; (8003904 <_ZN9LineTrace11isCrossLineEv+0x158>)
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <_ZN9LineTrace11isCrossLineEv+0x150>)
 8003874:	2200      	movs	r2, #0
 8003876:	801a      	strh	r2, [r3, #0]

			side_sensor_->enableIgnore();
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	4618      	mov	r0, r3
 800387e:	f001 ff2b 	bl	80056d8 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearSideLineIgnoreDistance();
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd ff2b 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
			encoder_->clearCrossLineIgnoreDistance();
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd ff43 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800389c:	3324      	adds	r3, #36	; 0x24
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038a8:	3354      	adds	r3, #84	; 0x54
 80038aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <_ZN9LineTrace11isCrossLineEv+0x11a>
				store_check_cnt_ = 0;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038b8:	333a      	adds	r3, #58	; 0x3a
 80038ba:	2200      	movs	r2, #0
 80038bc:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff fa92 	bl	8002de8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80038c4:	e00b      	b.n	80038de <_ZN9LineTrace11isCrossLineEv+0x132>
			}
			else{
				store_check_cnt_ = 0;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038cc:	333a      	adds	r3, #58	; 0x3a
 80038ce:	2200      	movs	r2, #0
 80038d0:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff fbbe 	bl	8003054 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff fabb 	bl	8002e54 <_ZN9LineTrace23storeCrossLineDistance2Ev>
		}

	}
	*/

	return flag;
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000208 	.word	0x20000208
 80038f0:	2000020c 	.word	0x2000020c
 80038f4:	44228000 	.word	0x44228000
 80038f8:	42480000 	.word	0x42480000
 80038fc:	20000218 	.word	0x20000218
 8003900:	2000021a 	.word	0x2000021a
 8003904:	2000021b 	.word	0x2000021b

08003908 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003910:	2300      	movs	r3, #0
 8003912:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fe8a 	bl	8001632 <_ZN7Encoder15getDistance10mmEv>
 800391e:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fc19 	bl	800515e <_ZN8Odometry8getThetaEv>
 800392c:	ec54 3b10 	vmov	r3, r4, d0
 8003930:	4618      	mov	r0, r3
 8003932:	4621      	mov	r1, r4
 8003934:	f7fd f970 	bl	8000c18 <__aeabi_d2f>
 8003938:	4603      	mov	r3, r0
 800393a:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 800393c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003940:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003948:	d101      	bne.n	800394e <_ZN9LineTrace8isStableEv+0x46>
 800394a:	4b23      	ldr	r3, [pc, #140]	; (80039d8 <_ZN9LineTrace8isStableEv+0xd0>)
 800394c:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800394e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003952:	edd7 7a04 	vldr	s15, [r7, #16]
 8003956:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800395a:	eeb0 0a66 	vmov.f32	s0, s13
 800395e:	f7fe ffbb 	bl	80028d8 <_ZSt3absf>
 8003962:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003966:	edd7 7a03 	vldr	s15, [r7, #12]
 800396a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039dc <_ZN9LineTrace8isStableEv+0xd4>
 800396e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	db01      	blt.n	800397c <_ZN9LineTrace8isStableEv+0x74>
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <_ZN9LineTrace8isStableEv+0xd8>)
 800397a:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003982:	3324      	adds	r3, #36	; 0x24
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800398a:	4b16      	ldr	r3, [pc, #88]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 800398c:	2200      	movs	r2, #0
 800398e:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003996:	3324      	adds	r3, #36	; 0x24
 8003998:	2200      	movs	r2, #0
 800399a:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 800399c:	edd7 7a03 	vldr	s15, [r7, #12]
 80039a0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80039e8 <_ZN9LineTrace8isStableEv+0xe0>
 80039a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ac:	db06      	blt.n	80039bc <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	3301      	adds	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	e002      	b.n	80039c2 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039be:	2200      	movs	r2, #0
 80039c0:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 25){ //250mm
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <_ZN9LineTrace8isStableEv+0xdc>)
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	2b18      	cmp	r3, #24
 80039c8:	d901      	bls.n	80039ce <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80039ca:	2301      	movs	r3, #1
 80039cc:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	371c      	adds	r7, #28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd90      	pop	{r4, r7, pc}
 80039d8:	3727c5ac 	.word	0x3727c5ac
 80039dc:	459c4000 	.word	0x459c4000
 80039e0:	459c4000 	.word	0x459c4000
 80039e4:	2000021c 	.word	0x2000021c
 80039e8:	44fa0000 	.word	0x44fa0000

080039ec <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b092      	sub	sp, #72	; 0x48
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80039f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039f8:	2201      	movs	r2, #1
 80039fa:	4963      	ldr	r1, [pc, #396]	; (8003b88 <_ZN9LineTrace4initEv+0x19c>)
 80039fc:	4863      	ldr	r0, [pc, #396]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 80039fe:	f7fd ff93 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003a06:	2201      	movs	r2, #1
 8003a08:	4961      	ldr	r1, [pc, #388]	; (8003b90 <_ZN9LineTrace4initEv+0x1a4>)
 8003a0a:	4860      	ldr	r0, [pc, #384]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a0c:	f7fd ff8c 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a14:	2201      	movs	r2, #1
 8003a16:	495f      	ldr	r1, [pc, #380]	; (8003b94 <_ZN9LineTrace4initEv+0x1a8>)
 8003a18:	485c      	ldr	r0, [pc, #368]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a1a:	f7fd ff85 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003a1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003a22:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003a26:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003a2a:	eeb0 1a66 	vmov.f32	s2, s13
 8003a2e:	eef0 0a47 	vmov.f32	s1, s14
 8003a32:	eeb0 0a67 	vmov.f32	s0, s15
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f8c6 	bl	8003bc8 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003a3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003a40:	2201      	movs	r2, #1
 8003a42:	4955      	ldr	r1, [pc, #340]	; (8003b98 <_ZN9LineTrace4initEv+0x1ac>)
 8003a44:	4851      	ldr	r0, [pc, #324]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a46:	f7fd ff6f 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003a4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a4e:	2201      	movs	r2, #1
 8003a50:	4952      	ldr	r1, [pc, #328]	; (8003b9c <_ZN9LineTrace4initEv+0x1b0>)
 8003a52:	484e      	ldr	r0, [pc, #312]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a54:	f7fd ff68 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003a58:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	4950      	ldr	r1, [pc, #320]	; (8003ba0 <_ZN9LineTrace4initEv+0x1b4>)
 8003a60:	484a      	ldr	r0, [pc, #296]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a62:	f7fd ff61 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003a66:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003a6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003a6e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003a72:	eeb0 1a66 	vmov.f32	s2, s13
 8003a76:	eef0 0a47 	vmov.f32	s1, s14
 8003a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8e8 	bl	8003c54 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a88:	2201      	movs	r2, #1
 8003a8a:	4946      	ldr	r1, [pc, #280]	; (8003ba4 <_ZN9LineTrace4initEv+0x1b8>)
 8003a8c:	483f      	ldr	r0, [pc, #252]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a8e:	f7fd ff4b 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a96:	2201      	movs	r2, #1
 8003a98:	4943      	ldr	r1, [pc, #268]	; (8003ba8 <_ZN9LineTrace4initEv+0x1bc>)
 8003a9a:	483c      	ldr	r0, [pc, #240]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003a9c:	f7fd ff44 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4941      	ldr	r1, [pc, #260]	; (8003bac <_ZN9LineTrace4initEv+0x1c0>)
 8003aa8:	4838      	ldr	r0, [pc, #224]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003aaa:	f7fd ff3d 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003aae:	f107 0320 	add.w	r3, r7, #32
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	493e      	ldr	r1, [pc, #248]	; (8003bb0 <_ZN9LineTrace4initEv+0x1c4>)
 8003ab6:	4835      	ldr	r0, [pc, #212]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003ab8:	f7fd ff36 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	493c      	ldr	r1, [pc, #240]	; (8003bb4 <_ZN9LineTrace4initEv+0x1c8>)
 8003ac4:	4831      	ldr	r0, [pc, #196]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003ac6:	f7fd ff2f 	bl	8001928 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003aca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003ace:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f913 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003ad8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003adc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f91c 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ae6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003aea:	eeb0 0a67 	vmov.f32	s0, s15
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 f925 	bl	8003d3e <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003af8:	eeb0 0a67 	vmov.f32	s0, s15
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f92e 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003b02:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b06:	eeb0 0a67 	vmov.f32	s0, s15
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f937 	bl	8003d7e <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003b10:	f107 0318 	add.w	r3, r7, #24
 8003b14:	2201      	movs	r2, #1
 8003b16:	4928      	ldr	r1, [pc, #160]	; (8003bb8 <_ZN9LineTrace4initEv+0x1cc>)
 8003b18:	481c      	ldr	r0, [pc, #112]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003b1a:	f7fd ff05 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003b1e:	f107 0314 	add.w	r3, r7, #20
 8003b22:	2201      	movs	r2, #1
 8003b24:	4925      	ldr	r1, [pc, #148]	; (8003bbc <_ZN9LineTrace4initEv+0x1d0>)
 8003b26:	4819      	ldr	r0, [pc, #100]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003b28:	f7fd fefe 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003b2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b30:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b34:	eef0 0a47 	vmov.f32	s1, s14
 8003b38:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 f97e 	bl	8003e3e <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
 8003b48:	f04f 0300 	mov.w	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b4e:	f107 0310 	add.w	r3, r7, #16
 8003b52:	2201      	movs	r2, #1
 8003b54:	491a      	ldr	r1, [pc, #104]	; (8003bc0 <_ZN9LineTrace4initEv+0x1d4>)
 8003b56:	480d      	ldr	r0, [pc, #52]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003b58:	f7fd fee6 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b5c:	f107 030c 	add.w	r3, r7, #12
 8003b60:	2201      	movs	r2, #1
 8003b62:	4918      	ldr	r1, [pc, #96]	; (8003bc4 <_ZN9LineTrace4initEv+0x1d8>)
 8003b64:	4809      	ldr	r0, [pc, #36]	; (8003b8c <_ZN9LineTrace4initEv+0x1a0>)
 8003b66:	f7fd fedf 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b72:	eef0 0a47 	vmov.f32	s1, s14
 8003b76:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f979 	bl	8003e72 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b80:	bf00      	nop
 8003b82:	3748      	adds	r7, #72	; 0x48
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	08018dc0 	.word	0x08018dc0
 8003b8c:	08018dc8 	.word	0x08018dc8
 8003b90:	08018dd0 	.word	0x08018dd0
 8003b94:	08018dd8 	.word	0x08018dd8
 8003b98:	08018de0 	.word	0x08018de0
 8003b9c:	08018dec 	.word	0x08018dec
 8003ba0:	08018df8 	.word	0x08018df8
 8003ba4:	08018e04 	.word	0x08018e04
 8003ba8:	08018e10 	.word	0x08018e10
 8003bac:	08018e1c 	.word	0x08018e1c
 8003bb0:	08018e28 	.word	0x08018e28
 8003bb4:	08018e34 	.word	0x08018e34
 8003bb8:	08018e40 	.word	0x08018e40
 8003bbc:	08018e48 	.word	0x08018e48
 8003bc0:	08018e50 	.word	0x08018e50
 8003bc4:	08018e5c 	.word	0x08018e5c

08003bc8 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bd4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bd8:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bee:	bf00      	nop
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
	return kp_;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	ee07 3a90 	vmov	s15, r3
}
 8003c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
	return ki_;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	ee07 3a90 	vmov	s15, r3
}
 8003c28:	eeb0 0a67 	vmov.f32	s0, s15
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	ee07 3a90 	vmov	s15, r3
}
 8003c46:	eeb0 0a67 	vmov.f32	s0, s15
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c60:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c64:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c7a:	bf00      	nop
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c92:	ee07 3a90 	vmov	s15, r3
}
 8003c96:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb0:	ee07 3a90 	vmov	s15, r3
}
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cce:	ee07 3a90 	vmov	s15, r3
}
 8003cd2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	683a      	ldr	r2, [r7, #0]
 8003d0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
 8003d66:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
 8003d86:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dac:	ee07 3a90 	vmov	s15, r3
}
 8003db0:	eeb0 0a67 	vmov.f32	s0, s15
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dcc:	ee07 3a90 	vmov	s15, r3
}
 8003dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003dec:	ee07 3a90 	vmov	s15, r3
}
 8003df0:	eeb0 0a67 	vmov.f32	s0, s15
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003dfe:	b480      	push	{r7}
 8003e00:	b083      	sub	sp, #12
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003e0c:	ee07 3a90 	vmov	s15, r3
}
 8003e10:	eeb0 0a67 	vmov.f32	s0, s15
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr

08003e1e <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003e2c:	ee07 3a90 	vmov	s15, r3
}
 8003e30:	eeb0 0a67 	vmov.f32	s0, s15
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e4a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e54:	3328      	adds	r3, #40	; 0x28
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e60:	332c      	adds	r3, #44	; 0x2c
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
}
 8003e66:	bf00      	nop
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e7e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e88:	3330      	adds	r3, #48	; 0x30
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003e94:	3334      	adds	r3, #52	; 0x34
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	601a      	str	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003eb4:	3328      	adds	r3, #40	; 0x28
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ed8:	3334      	adds	r3, #52	; 0x34
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	ee07 3a90 	vmov	s15, r3
}
 8003ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee4:	370c      	adds	r7, #12
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr

08003eee <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003efc:	3330      	adds	r3, #48	; 0x30
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	ee07 3a90 	vmov	s15, r3
}
 8003f04:	eeb0 0a67 	vmov.f32	s0, s15
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f20:	332c      	adds	r3, #44	; 0x2c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	ee07 3a90 	vmov	s15, r3
}
 8003f28:	eeb0 0a67 	vmov.f32	s0, s15
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
	...

08003f38 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80ae 	beq.w	80040a8 <_ZN9LineTrace4flipEv+0x170>
		// ---- line following processing -----//
		pidTrace();
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fe fe3f 	bl	8002bd0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fb99 	bl	800368a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(10) == true){
 8003f58:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff fc02 	bl	8003766 <_ZN9LineTrace16isTargetDistanceEf>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d028      	beq.n	8003fba <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7ff f819 	bl	8002fa0 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fcca 	bl	8003908 <_ZN9LineTrace8isStableEv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00c      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x5c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f001 fb82 	bl	8005688 <_ZN10SideSensor10getStatusLEv>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <_ZN9LineTrace4flipEv+0x5c>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <_ZN9LineTrace4flipEv+0x5e>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d005      	beq.n	8003fa6 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa0:	3323      	adds	r3, #35	; 0x23
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd fb6e 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f8f4 	bl	80051a2 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fc0:	3323      	adds	r3, #35	; 0x23
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d009      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xa4>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 fb5b 	bl	8005688 <_ZN10SideSensor10getStatusLEv>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <_ZN9LineTrace4flipEv+0xa4>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <_ZN9LineTrace4flipEv+0xa6>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d029      	beq.n	8004036 <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003fe8:	3354      	adds	r3, #84	; 0x54
 8003fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003ff8:	333a      	adds	r3, #58	; 0x3a
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fe ff5e 	bl	8002ec0 <_ZN9LineTrace21storeSideLineDistanceEv>
 8004004:	e00b      	b.n	800401e <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800400c:	333a      	adds	r3, #58	; 0x3a
 800400e:	2200      	movs	r2, #0
 8004010:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff f898 	bl	8003148 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f7fe ff89 	bl	8002f30 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004024:	3323      	adds	r3, #35	; 0x23
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004030:	3324      	adds	r3, #36	; 0x24
 8004032:	2201      	movs	r2, #1
 8004034:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7ff fbb8 	bl	80037ac <_ZN9LineTrace11isCrossLineEv>
			//encoder_->clearCrossLineIgnoreDistance();//moved to isCrossLine function
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getSideLineIgnoreDistance() >= 100){
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	4618      	mov	r0, r3
 8004042:	f001 fb63 	bl	800570c <_ZN10SideSensor13getIgnoreFlagEv>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <_ZN9LineTrace4flipEv+0x134>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fb37 	bl	80016c4 <_ZN7Encoder25getSideLineIgnoreDistanceEv>
 8004056:	eeb0 7a40 	vmov.f32	s14, s0
 800405a:	eddf 7a15 	vldr	s15, [pc, #84]	; 80040b0 <_ZN9LineTrace4flipEv+0x178>
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	db01      	blt.n	800406c <_ZN9LineTrace4flipEv+0x134>
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <_ZN9LineTrace4flipEv+0x136>
 800406c:	2300      	movs	r3, #0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d004      	beq.n	800407c <_ZN9LineTrace4flipEv+0x144>
			side_sensor_->disableIgnore();
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fb3b 	bl	80056f2 <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4618      	mov	r0, r3
 8004082:	f7fe fbd9 	bl	8002838 <_ZN10LineSensor13emergencyStopEv>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00d      	beq.n	80040a8 <_ZN9LineTrace4flipEv+0x170>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	eddf 0a08 	vldr	s1, [pc, #32]	; 80040b4 <_ZN9LineTrace4flipEv+0x17c>
 8004094:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80040b4 <_ZN9LineTrace4flipEv+0x17c>
 8004098:	4618      	mov	r0, r3
 800409a:	f001 fe55 	bl	8005d48 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd f96e 	bl	8001384 <_ZN3ESC3offEv>
			//led_.LR(0, -1);
		}


	}
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	42c80000 	.word	0x42c80000
 80040b4:	00000000 	.word	0x00000000

080040b8 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040ca:	3354      	adds	r3, #84	; 0x54
 80040cc:	887a      	ldrh	r2, [r7, #2]
 80040ce:	801a      	strh	r2, [r3, #0]
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f001 fe7e 	bl	8005dfa <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	4618      	mov	r0, r3
 8004104:	f001 fad8 	bl	80056b8 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800410e:	3318      	adds	r3, #24
 8004110:	2200      	movs	r2, #0
 8004112:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800411a:	331c      	adds	r3, #28
 800411c:	2200      	movs	r2, #0
 800411e:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004126:	331e      	adds	r3, #30
 8004128:	2200      	movs	r2, #0
 800412a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004132:	3320      	adds	r3, #32
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 800414c:	2300      	movs	r3, #0
 800414e:	737b      	strb	r3, [r7, #13]
	bool goal_judge_flag = false;
 8004150:	2300      	movs	r3, #0
 8004152:	733b      	strb	r3, [r7, #12]
	start();
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f7ff ffc1 	bl	80040dc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800415a:	7b7b      	ldrb	r3, [r7, #13]
 800415c:	2b00      	cmp	r3, #0
 800415e:	f040 815e 	bne.w	800441e <_ZN9LineTrace7runningEv+0x2de>
		switch(stage){
 8004162:	89fb      	ldrh	r3, [r7, #14]
 8004164:	2b05      	cmp	r3, #5
 8004166:	d03a      	beq.n	80041de <_ZN9LineTrace7runningEv+0x9e>
 8004168:	2b0a      	cmp	r3, #10
 800416a:	d047      	beq.n	80041fc <_ZN9LineTrace7runningEv+0xbc>
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 80c7 	bne.w	8004300 <_ZN9LineTrace7runningEv+0x1c0>
		case 0:
			//if(side_sensor_->getWhiteLineCntR() == 1){
			if(side_sensor_->getStatusR() == true){
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4618      	mov	r0, r3
 8004178:	f001 fa92 	bl	80056a0 <_ZN10SideSensor10getStatusREv>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80b9 	beq.w	80042f6 <_ZN9LineTrace7runningEv+0x1b6>
				loggerStart();
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe fe03 	bl	8002d90 <_ZN9LineTrace11loggerStartEv>
				logger_->start();
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fe53 	bl	8004e3a <_ZN6Logger5startEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800419a:	3354      	adds	r3, #84	; 0x54
 800419c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <_ZN9LineTrace7runningEv+0x6a>
					startVelocityPlay();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fa33 	bl	8003610 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearSideLineIgnoreDistance();
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fa97 	bl	80016e2 <_ZN7Encoder27clearSideLineIgnoreDistanceEv>
				encoder_->clearCrossLineIgnoreDistance();
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd faaf 	bl	800171c <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fa70 	bl	80016a8 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	330c      	adds	r3, #12
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295
 80041d0:	2100      	movs	r1, #0
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f87a 	bl	80022cc <_ZN3LED2LREaa>
				stage = 5;
 80041d8:	2305      	movs	r3, #5
 80041da:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041dc:	e08b      	b.n	80042f6 <_ZN9LineTrace7runningEv+0x1b6>

		case 5:
			if(side_sensor_->getStatusR() == false) stage = 10;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 fa5c 	bl	80056a0 <_ZN10SideSensor10getStatusREv>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f083 0301 	eor.w	r3, r3, #1
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 8082 	beq.w	80042fa <_ZN9LineTrace7runningEv+0x1ba>
 80041f6:	230a      	movs	r3, #10
 80041f8:	81fb      	strh	r3, [r7, #14]

			break;
 80041fa:	e07e      	b.n	80042fa <_ZN9LineTrace7runningEv+0x1ba>
		case 10:
			//if(side_sensor_->getWhiteLineCntR() == 2){
			if(side_sensor_->getStatusL() == true){
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	4618      	mov	r0, r3
 8004202:	f001 fa41 	bl	8005688 <_ZN10SideSensor10getStatusLEv>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00c      	beq.n	8004226 <_ZN9LineTrace7runningEv+0xe6>
				goal_judge_flag = false;
 800420c:	2300      	movs	r3, #0
 800420e:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fa9e 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				led_.fullColor('B');
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	330c      	adds	r3, #12
 800421e:	2142      	movs	r1, #66	; 0x42
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd ff97 	bl	8002154 <_ZN3LED9fullColorEc>
			}

			if(goal_judge_flag == false && side_sensor_->getStatusR() == true && encoder_->getGoalJudgeDistance() >= 30){
 8004226:	7b3b      	ldrb	r3, [r7, #12]
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d017      	beq.n	8004262 <_ZN9LineTrace7runningEv+0x122>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	4618      	mov	r0, r3
 8004238:	f001 fa32 	bl	80056a0 <_ZN10SideSensor10getStatusREv>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00f      	beq.n	8004262 <_ZN9LineTrace7runningEv+0x122>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd fa76 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 800424c:	eeb0 7a40 	vmov.f32	s14, s0
 8004250:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8004254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425c:	db01      	blt.n	8004262 <_ZN9LineTrace7runningEv+0x122>
 800425e:	2301      	movs	r3, #1
 8004260:	e000      	b.n	8004264 <_ZN9LineTrace7runningEv+0x124>
 8004262:	2300      	movs	r3, #0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d013      	beq.n	8004290 <_ZN9LineTrace7runningEv+0x150>
				goal_judge_flag = true;
 8004268:	2301      	movs	r3, #1
 800426a:	733b      	strb	r3, [r7, #12]
				encoder_->clearGoalJudgeDistance();
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	4618      	mov	r0, r3
 8004272:	f7fd fa70 	bl	8001756 <_ZN7Encoder22clearGoalJudgeDistanceEv>
				ignore_check_cnt_ = 0;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800427c:	333c      	adds	r3, #60	; 0x3c
 800427e:	2200      	movs	r2, #0
 8004280:	801a      	strh	r2, [r3, #0]

				led_.fullColor('Y');
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	330c      	adds	r3, #12
 8004286:	2159      	movs	r1, #89	; 0x59
 8004288:	4618      	mov	r0, r3
 800428a:	f7fd ff63 	bl	8002154 <_ZN3LED9fullColorEc>
				goal_flag = true;
				goal_judge_flag = false;

			}

			break;
 800428e:	e036      	b.n	80042fe <_ZN9LineTrace7runningEv+0x1be>
			else if(goal_judge_flag == true && encoder_->getGoalJudgeDistance() >= 30){
 8004290:	7b3b      	ldrb	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00f      	beq.n	80042b6 <_ZN9LineTrace7runningEv+0x176>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fa4c 	bl	8001738 <_ZN7Encoder20getGoalJudgeDistanceEv>
 80042a0:	eeb0 7a40 	vmov.f32	s14, s0
 80042a4:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80042a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	db01      	blt.n	80042b6 <_ZN9LineTrace7runningEv+0x176>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <_ZN9LineTrace7runningEv+0x178>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <_ZN9LineTrace7runningEv+0x1be>
				led_.fullColor('M');
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	330c      	adds	r3, #12
 80042c0:	214d      	movs	r1, #77	; 0x4d
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fd ff46 	bl	8002154 <_ZN3LED9fullColorEc>
				loggerStop();
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fe fd7c 	bl	8002dc6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff f9be 	bl	8003650 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80042d4:	2064      	movs	r0, #100	; 0x64
 80042d6:	f005 fe0f 	bl	8009ef8 <HAL_Delay>
				setTargetVelocity(0);
 80042da:	ed9f 0a54 	vldr	s0, [pc, #336]	; 800442c <_ZN9LineTrace7runningEv+0x2ec>
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff fd0d 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80042e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80042e8:	f005 fe06 	bl	8009ef8 <HAL_Delay>
				goal_flag = true;
 80042ec:	2301      	movs	r3, #1
 80042ee:	737b      	strb	r3, [r7, #13]
				goal_judge_flag = false;
 80042f0:	2300      	movs	r3, #0
 80042f2:	733b      	strb	r3, [r7, #12]
			break;
 80042f4:	e003      	b.n	80042fe <_ZN9LineTrace7runningEv+0x1be>
			break;
 80042f6:	bf00      	nop
 80042f8:	e002      	b.n	8004300 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80042fa:	bf00      	nop
 80042fc:	e000      	b.n	8004300 <_ZN9LineTrace7runningEv+0x1c0>
			break;
 80042fe:	bf00      	nop
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004306:	3338      	adds	r3, #56	; 0x38
 8004308:	881b      	ldrh	r3, [r3, #0]
 800430a:	3301      	adds	r3, #1
 800430c:	b29a      	uxth	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004314:	3338      	adds	r3, #56	; 0x38
 8004316:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800431e:	3338      	adds	r3, #56	; 0x38
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	f242 720f 	movw	r2, #9999	; 0x270f
 8004326:	4293      	cmp	r3, r2
 8004328:	d906      	bls.n	8004338 <_ZN9LineTrace7runningEv+0x1f8>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004330:	3338      	adds	r3, #56	; 0x38
 8004332:	f242 7210 	movw	r2, #10000	; 0x2710
 8004336:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800433e:	3338      	adds	r3, #56	; 0x38
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8004346:	d805      	bhi.n	8004354 <_ZN9LineTrace7runningEv+0x214>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	330c      	adds	r3, #12
 800434c:	2152      	movs	r1, #82	; 0x52
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd ff00 	bl	8002154 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800435a:	333a      	adds	r3, #58	; 0x3a
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004368:	333a      	adds	r3, #58	; 0x3a
 800436a:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004372:	333a      	adds	r3, #58	; 0x3a
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	f242 720f 	movw	r2, #9999	; 0x270f
 800437a:	4293      	cmp	r3, r2
 800437c:	d906      	bls.n	800438c <_ZN9LineTrace7runningEv+0x24c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004384:	333a      	adds	r3, #58	; 0x3a
 8004386:	f242 7210 	movw	r2, #10000	; 0x2710
 800438a:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004392:	333a      	adds	r3, #58	; 0x3a
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	2bc8      	cmp	r3, #200	; 0xc8
 8004398:	d808      	bhi.n	80043ac <_ZN9LineTrace7runningEv+0x26c>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	330c      	adds	r3, #12
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7fd ff91 	bl	80022cc <_ZN3LED2LREaa>
 80043aa:	e007      	b.n	80043bc <_ZN9LineTrace7runningEv+0x27c>
		else led_.LR(0, -1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	330c      	adds	r3, #12
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fd ff88 	bl	80022cc <_ZN3LED2LREaa>

		ignore_check_cnt_++;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043c2:	333c      	adds	r3, #60	; 0x3c
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043d0:	333c      	adds	r3, #60	; 0x3c
 80043d2:	801a      	strh	r2, [r3, #0]
		if(ignore_check_cnt_>= 10000) ignore_check_cnt_= 10000;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043da:	333c      	adds	r3, #60	; 0x3c
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	f242 720f 	movw	r2, #9999	; 0x270f
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d906      	bls.n	80043f4 <_ZN9LineTrace7runningEv+0x2b4>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043ec:	333c      	adds	r3, #60	; 0x3c
 80043ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80043f2:	801a      	strh	r2, [r3, #0]

		if(ignore_check_cnt_ <= 200) led_.fullColor('Y');
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80043fa:	333c      	adds	r3, #60	; 0x3c
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	2bc8      	cmp	r3, #200	; 0xc8
 8004400:	d806      	bhi.n	8004410 <_ZN9LineTrace7runningEv+0x2d0>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	330c      	adds	r3, #12
 8004406:	2159      	movs	r1, #89	; 0x59
 8004408:	4618      	mov	r0, r3
 800440a:	f7fd fea3 	bl	8002154 <_ZN3LED9fullColorEc>
 800440e:	e6a4      	b.n	800415a <_ZN9LineTrace7runningEv+0x1a>
		else led_.fullColor('B');
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	330c      	adds	r3, #12
 8004414:	2142      	movs	r1, #66	; 0x42
 8004416:	4618      	mov	r0, r3
 8004418:	f7fd fe9c 	bl	8002154 <_ZN3LED9fullColorEc>
	while(goal_flag == false){
 800441c:	e69d      	b.n	800415a <_ZN9LineTrace7runningEv+0x1a>
	}

	stop();
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f806 	bl	8004430 <_ZN9LineTrace4stopEv>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	00000000 	.word	0x00000000

08004430 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af02      	add	r7, sp, #8
 8004436:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4618      	mov	r0, r3
 8004446:	f001 fceb 	bl	8005e20 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	330c      	adds	r3, #12
 800444e:	2201      	movs	r2, #1
 8004450:	f04f 31ff 	mov.w	r1, #4294967295
 8004454:	4618      	mov	r0, r3
 8004456:	f7fd ff39 	bl	80022cc <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004460:	3354      	adds	r3, #84	; 0x54
 8004462:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11e      	bne.n	80044a8 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69d8      	ldr	r0, [r3, #28]
 800446e:	4b26      	ldr	r3, [pc, #152]	; (8004508 <_ZN9LineTrace4stopEv+0xd8>)
 8004470:	4a26      	ldr	r2, [pc, #152]	; (800450c <_ZN9LineTrace4stopEv+0xdc>)
 8004472:	4927      	ldr	r1, [pc, #156]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 8004474:	f000 fbc3 	bl	8004bfe <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800447e:	3358      	adds	r3, #88	; 0x58
 8004480:	2200      	movs	r2, #0
 8004482:	9200      	str	r2, [sp, #0]
 8004484:	2264      	movs	r2, #100	; 0x64
 8004486:	4923      	ldr	r1, [pc, #140]	; (8004514 <_ZN9LineTrace4stopEv+0xe4>)
 8004488:	4821      	ldr	r0, [pc, #132]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 800448a:	f7fd f9e7 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004494:	3378      	adds	r3, #120	; 0x78
 8004496:	2200      	movs	r2, #0
 8004498:	9200      	str	r2, [sp, #0]
 800449a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800449e:	491e      	ldr	r1, [pc, #120]	; (8004518 <_ZN9LineTrace4stopEv+0xe8>)
 80044a0:	481b      	ldr	r0, [pc, #108]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 80044a2:	f7fd f9db 	bl	800185c <sd_write_array_float>
 80044a6:	e01d      	b.n	80044e4 <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	69d8      	ldr	r0, [r3, #28]
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <_ZN9LineTrace4stopEv+0xec>)
 80044ae:	4a1c      	ldr	r2, [pc, #112]	; (8004520 <_ZN9LineTrace4stopEv+0xf0>)
 80044b0:	4917      	ldr	r1, [pc, #92]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 80044b2:	f000 fbc7 	bl	8004c44 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044bc:	33e8      	adds	r3, #232	; 0xe8
 80044be:	2200      	movs	r2, #0
 80044c0:	9200      	str	r2, [sp, #0]
 80044c2:	2264      	movs	r2, #100	; 0x64
 80044c4:	4917      	ldr	r1, [pc, #92]	; (8004524 <_ZN9LineTrace4stopEv+0xf4>)
 80044c6:	4812      	ldr	r0, [pc, #72]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 80044c8:	f7fd f9c8 	bl	800185c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 80044d2:	3348      	adds	r3, #72	; 0x48
 80044d4:	2200      	movs	r2, #0
 80044d6:	9200      	str	r2, [sp, #0]
 80044d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044dc:	4912      	ldr	r1, [pc, #72]	; (8004528 <_ZN9LineTrace4stopEv+0xf8>)
 80044de:	480c      	ldr	r0, [pc, #48]	; (8004510 <_ZN9LineTrace4stopEv+0xe0>)
 80044e0:	f7fd f9bc 	bl	800185c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	330c      	adds	r3, #12
 80044e8:	2200      	movs	r2, #0
 80044ea:	f04f 31ff 	mov.w	r1, #4294967295
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fd feec 	bl	80022cc <_ZN3LED2LREaa>

	logger_->resetIdx();
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f000 fc7f 	bl	8004dfc <_ZN6Logger8resetIdxEv>
	//logger_->resetLogsDis2();
}
 80044fe:	bf00      	nop
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	08018e68 	.word	0x08018e68
 800450c:	08018e74 	.word	0x08018e74
 8004510:	08018e84 	.word	0x08018e84
 8004514:	08018e90 	.word	0x08018e90
 8004518:	08018ea0 	.word	0x08018ea0
 800451c:	08018eac 	.word	0x08018eac
 8004520:	08018eb8 	.word	0x08018eb8
 8004524:	08018ec8 	.word	0x08018ec8
 8004528:	08018ed8 	.word	0x08018ed8

0800452c <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 800452c:	b590      	push	{r4, r7, lr}
 800452e:	b08b      	sub	sp, #44	; 0x2c
 8004530:	af02      	add	r7, sp, #8
 8004532:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fb1a 	bl	8004b72 <_ZN6Logger23getDistanceArrayPointerEv>
 800453e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4618      	mov	r0, r3
 8004546:	f000 fb22 	bl	8004b8e <_ZN6Logger20getThetaArrayPointerEv>
 800454a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800454c:	2300      	movs	r3, #0
 800454e:	837b      	strh	r3, [r7, #26]
 8004550:	8b7b      	ldrh	r3, [r7, #26]
 8004552:	f241 726f 	movw	r2, #5999	; 0x176f
 8004556:	4293      	cmp	r3, r2
 8004558:	d84b      	bhi.n	80045f2 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 800455a:	8b7b      	ldrh	r3, [r7, #26]
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	4413      	add	r3, r2
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004566:	8b7b      	ldrh	r3, [r7, #26]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	4413      	add	r3, r2
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004572:	edd7 7a07 	vldr	s15, [r7, #28]
 8004576:	eef5 7a40 	vcmp.f32	s15, #0.0
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	d101      	bne.n	8004584 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004580:	4b4c      	ldr	r3, [pc, #304]	; (80046b4 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004582:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004584:	ed97 7a02 	vldr	s14, [r7, #8]
 8004588:	edd7 7a07 	vldr	s15, [r7, #28]
 800458c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004590:	eeb0 0a66 	vmov.f32	s0, s13
 8004594:	f7fe f9a0 	bl	80028d8 <_ZSt3absf>
 8004598:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800459c:	edd7 7a05 	vldr	s15, [r7, #20]
 80045a0:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80046b8 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80045a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ac:	db01      	blt.n	80045b2 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80045ae:	4b43      	ldr	r3, [pc, #268]	; (80046bc <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80045b0:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80045b2:	8b7c      	ldrh	r4, [r7, #26]
 80045b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fe fe23 	bl	8003204 <_ZN9LineTrace15radius2VelocityEf>
 80045be:	eef0 7a40 	vmov.f32	s15, s0
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80045c8:	3304      	adds	r3, #4
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80045d2:	8b7b      	ldrh	r3, [r7, #26]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	441a      	add	r2, r3
 80045da:	8b7b      	ldrh	r3, [r7, #26]
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	3332      	adds	r3, #50	; 0x32
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3304      	adds	r3, #4
 80045e8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	3301      	adds	r3, #1
 80045ee:	837b      	strh	r3, [r7, #26]
 80045f0:	e7ae      	b.n	8004550 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045f8:	3354      	adds	r3, #84	; 0x54
 80045fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d120      	bne.n	8004644 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800460e:	3310      	adds	r3, #16
 8004610:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004618:	332c      	adds	r3, #44	; 0x2c
 800461a:	edd3 7a00 	vldr	s15, [r3]
 800461e:	6939      	ldr	r1, [r7, #16]
 8004620:	eeb0 0a67 	vmov.f32	s0, s15
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7fe feab 	bl	8003380 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004630:	3328      	adds	r3, #40	; 0x28
 8004632:	edd3 7a00 	vldr	s15, [r3]
 8004636:	6939      	ldr	r1, [r7, #16]
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7fe ff43 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004642:	e027      	b.n	8004694 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800464a:	3354      	adds	r3, #84	; 0x54
 800464c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d11f      	bne.n	8004694 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004660:	3310      	adds	r3, #16
 8004662:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800466a:	3334      	adds	r3, #52	; 0x34
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	6939      	ldr	r1, [r7, #16]
 8004672:	eeb0 0a67 	vmov.f32	s0, s15
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fe fe82 	bl	8003380 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004682:	3330      	adds	r3, #48	; 0x30
 8004684:	edd3 7a00 	vldr	s15, [r3]
 8004688:	6939      	ldr	r1, [r7, #16]
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fe ff1a 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800469a:	3310      	adds	r3, #16
 800469c:	2200      	movs	r2, #0
 800469e:	9200      	str	r2, [sp, #0]
 80046a0:	f241 7270 	movw	r2, #6000	; 0x1770
 80046a4:	4906      	ldr	r1, [pc, #24]	; (80046c0 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80046a6:	4807      	ldr	r0, [pc, #28]	; (80046c4 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80046a8:	f7fd f8d8 	bl	800185c <sd_write_array_float>

}
 80046ac:	bf00      	nop
 80046ae:	3724      	adds	r7, #36	; 0x24
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}
 80046b4:	3727c5ac 	.word	0x3727c5ac
 80046b8:	459c4000 	.word	0x459c4000
 80046bc:	459c4000 	.word	0x459c4000
 80046c0:	08018ee8 	.word	0x08018ee8
 80046c4:	08018e84 	.word	0x08018e84

080046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80046c8:	b590      	push	{r4, r7, lr}
 80046ca:	b08b      	sub	sp, #44	; 0x2c
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	69d8      	ldr	r0, [r3, #28]
 80046d4:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80046d6:	4a6c      	ldr	r2, [pc, #432]	; (8004888 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80046d8:	496c      	ldr	r1, [pc, #432]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046da:	f000 fad7 	bl	8004c8c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80046e4:	3358      	adds	r3, #88	; 0x58
 80046e6:	2264      	movs	r2, #100	; 0x64
 80046e8:	4969      	ldr	r1, [pc, #420]	; (8004890 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80046ea:	4868      	ldr	r0, [pc, #416]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046ec:	f7fd f91c 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 80046f6:	3378      	adds	r3, #120	; 0x78
 80046f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046fc:	4965      	ldr	r1, [pc, #404]	; (8004894 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80046fe:	4863      	ldr	r0, [pc, #396]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004700:	f7fd f912 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fa32 	bl	8004b72 <_ZN6Logger23getDistanceArrayPointerEv>
 800470e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	69db      	ldr	r3, [r3, #28]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fa3a 	bl	8004b8e <_ZN6Logger20getThetaArrayPointerEv>
 800471a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800471c:	2300      	movs	r3, #0
 800471e:	837b      	strh	r3, [r7, #26]
 8004720:	8b7b      	ldrh	r3, [r7, #26]
 8004722:	f241 726f 	movw	r2, #5999	; 0x176f
 8004726:	4293      	cmp	r3, r2
 8004728:	d84b      	bhi.n	80047c2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800472a:	8b7b      	ldrh	r3, [r7, #26]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004736:	8b7b      	ldrh	r3, [r7, #26]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004742:	edd7 7a07 	vldr	s15, [r7, #28]
 8004746:	eef5 7a40 	vcmp.f32	s15, #0.0
 800474a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474e:	d101      	bne.n	8004754 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004750:	4b51      	ldr	r3, [pc, #324]	; (8004898 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004752:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004754:	ed97 7a02 	vldr	s14, [r7, #8]
 8004758:	edd7 7a07 	vldr	s15, [r7, #28]
 800475c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004760:	eeb0 0a66 	vmov.f32	s0, s13
 8004764:	f7fe f8b8 	bl	80028d8 <_ZSt3absf>
 8004768:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800476c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004770:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800489c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004774:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477c:	db01      	blt.n	8004782 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800477e:	4b48      	ldr	r3, [pc, #288]	; (80048a0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004780:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004782:	8b7c      	ldrh	r4, [r7, #26]
 8004784:	ed97 0a05 	vldr	s0, [r7, #20]
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7fe fd3b 	bl	8003204 <_ZN9LineTrace15radius2VelocityEf>
 800478e:	eef0 7a40 	vmov.f32	s15, s0
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004798:	3304      	adds	r3, #4
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80047a2:	8b7b      	ldrh	r3, [r7, #26]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	441a      	add	r2, r3
 80047aa:	8b7b      	ldrh	r3, [r7, #26]
 80047ac:	6812      	ldr	r2, [r2, #0]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	3332      	adds	r3, #50	; 0x32
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	440b      	add	r3, r1
 80047b6:	3304      	adds	r3, #4
 80047b8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80047ba:	8b7b      	ldrh	r3, [r7, #26]
 80047bc:	3301      	adds	r3, #1
 80047be:	837b      	strh	r3, [r7, #26]
 80047c0:	e7ae      	b.n	8004720 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047c8:	3354      	adds	r3, #84	; 0x54
 80047ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d120      	bne.n	8004814 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047de:	3310      	adds	r3, #16
 80047e0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047e8:	332c      	adds	r3, #44	; 0x2c
 80047ea:	edd3 7a00 	vldr	s15, [r3]
 80047ee:	6939      	ldr	r1, [r7, #16]
 80047f0:	eeb0 0a67 	vmov.f32	s0, s15
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fe fdc3 	bl	8003380 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004800:	3328      	adds	r3, #40	; 0x28
 8004802:	edd3 7a00 	vldr	s15, [r3]
 8004806:	6939      	ldr	r1, [r7, #16]
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7fe fe5b 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004812:	e027      	b.n	8004864 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800481a:	3354      	adds	r3, #84	; 0x54
 800481c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d11f      	bne.n	8004864 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004830:	3310      	adds	r3, #16
 8004832:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800483a:	3334      	adds	r3, #52	; 0x34
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	6939      	ldr	r1, [r7, #16]
 8004842:	eeb0 0a67 	vmov.f32	s0, s15
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fe fd9a 	bl	8003380 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004852:	3330      	adds	r3, #48	; 0x30
 8004854:	edd3 7a00 	vldr	s15, [r3]
 8004858:	6939      	ldr	r1, [r7, #16]
 800485a:	eeb0 0a67 	vmov.f32	s0, s15
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe fe32 	bl	80034c8 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800486a:	3310      	adds	r3, #16
 800486c:	2200      	movs	r2, #0
 800486e:	9200      	str	r2, [sp, #0]
 8004870:	f241 7270 	movw	r2, #6000	; 0x1770
 8004874:	490b      	ldr	r1, [pc, #44]	; (80048a4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004876:	4805      	ldr	r0, [pc, #20]	; (800488c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004878:	f7fc fff0 	bl	800185c <sd_write_array_float>

}
 800487c:	bf00      	nop
 800487e:	3724      	adds	r7, #36	; 0x24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd90      	pop	{r4, r7, pc}
 8004884:	08018e68 	.word	0x08018e68
 8004888:	08018e74 	.word	0x08018e74
 800488c:	08018e84 	.word	0x08018e84
 8004890:	08018e90 	.word	0x08018e90
 8004894:	08018ea0 	.word	0x08018ea0
 8004898:	3727c5ac 	.word	0x3727c5ac
 800489c:	459c4000 	.word	0x459c4000
 80048a0:	459c4000 	.word	0x459c4000
 80048a4:	08018ee8 	.word	0x08018ee8

080048a8 <_ZN6LoggerC1Ev>:
#include "AQM0802.h"

uint16_t mon_idx1, mon_idx2;
float mon_data1, mon_data2, mon_data3;

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048b6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048c4:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048d2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048e0:	f203 33a6 	addw	r3, r3, #934	; 0x3a6
 80048e4:	2200      	movs	r2, #0
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048ee:	f503 736a 	add.w	r3, r3, #936	; 0x3a8
 80048f2:	2200      	movs	r2, #0
 80048f4:	801a      	strh	r2, [r3, #0]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80048fc:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004900:	2200      	movs	r2, #0
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800491c:	2300      	movs	r3, #0
 800491e:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004920:	f7fd f88e 	bl	8001a40 <sd_mount>
 8004924:	4603      	mov	r3, r0
 8004926:	2b01      	cmp	r3, #1
 8004928:	bf0c      	ite	eq
 800492a:	2301      	moveq	r3, #1
 800492c:	2300      	movne	r3, #0
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d016      	beq.n	8004962 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004934:	f7fc fbb4 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004938:	2100      	movs	r1, #0
 800493a:	2000      	movs	r0, #0
 800493c:	f7fc fbc0 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004940:	4815      	ldr	r0, [pc, #84]	; (8004998 <_ZN6Logger10sdCardInitEv+0x84>)
 8004942:	f7fc fbe7 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004946:	2101      	movs	r1, #1
 8004948:	2000      	movs	r0, #0
 800494a:	f7fc fbb9 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800494e:	4813      	ldr	r0, [pc, #76]	; (800499c <_ZN6Logger10sdCardInitEv+0x88>)
 8004950:	f7fc fbe0 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004954:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004958:	f005 face 	bl	8009ef8 <HAL_Delay>

	  ret = true;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
 8004960:	e015      	b.n	800498e <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8004962:	f7fc fb9d 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004966:	2100      	movs	r1, #0
 8004968:	2000      	movs	r0, #0
 800496a:	f7fc fba9 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800496e:	480a      	ldr	r0, [pc, #40]	; (8004998 <_ZN6Logger10sdCardInitEv+0x84>)
 8004970:	f7fc fbd0 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004974:	2101      	movs	r1, #1
 8004976:	2000      	movs	r0, #0
 8004978:	f7fc fba2 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 800497c:	4808      	ldr	r0, [pc, #32]	; (80049a0 <_ZN6Logger10sdCardInitEv+0x8c>)
 800497e:	f7fc fbc9 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004986:	f005 fab7 	bl	8009ef8 <HAL_Delay>

	  ret = false;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	08018ef8 	.word	0x08018ef8
 800499c:	08018f04 	.word	0x08018f04
 80049a0:	08018f0c 	.word	0x08018f0c

080049a4 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049b6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d034      	beq.n	8004a2a <_ZN6Logger8storeLogEf+0x86>
		store_data_float_[log_index_tim_] = data;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049c6:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	683a      	ldr	r2, [r7, #0]
 80049d4:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049dc:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049ec:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049f0:	801a      	strh	r2, [r3, #0]
		mon_idx1 = log_index_tim_;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80049f8:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 80049fc:	881a      	ldrh	r2, [r3, #0]
 80049fe:	4b0e      	ldr	r3, [pc, #56]	; (8004a38 <_ZN6Logger8storeLogEf+0x94>)
 8004a00:	801a      	strh	r2, [r3, #0]
		mon_data1 = data;
 8004a02:	4a0e      	ldr	r2, [pc, #56]	; (8004a3c <_ZN6Logger8storeLogEf+0x98>)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6013      	str	r3, [r2, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a0e:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d906      	bls.n	8004a2a <_ZN6Logger8storeLogEf+0x86>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a22:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004a26:	2200      	movs	r2, #0
 8004a28:	801a      	strh	r2, [r3, #0]
	}
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	2000021e 	.word	0x2000021e
 8004a3c:	20000224 	.word	0x20000224

08004a40 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a52:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d036      	beq.n	8004aca <_ZN6Logger9storeLog2Ef+0x8a>
		store_data_float2_[log_index_tim2_] = data;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a62:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a66:	881b      	ldrh	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a7c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	3301      	adds	r3, #1
 8004a84:	b29a      	uxth	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a8c:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a90:	801a      	strh	r2, [r3, #0]
		mon_idx2 = log_index_tim2_;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004a98:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004a9c:	881a      	ldrh	r2, [r3, #0]
 8004a9e:	4b0e      	ldr	r3, [pc, #56]	; (8004ad8 <_ZN6Logger9storeLog2Ef+0x98>)
 8004aa0:	801a      	strh	r2, [r3, #0]
		mon_data2 = data;
 8004aa2:	4a0e      	ldr	r2, [pc, #56]	; (8004adc <_ZN6Logger9storeLog2Ef+0x9c>)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6013      	str	r3, [r2, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004aae:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d906      	bls.n	8004aca <_ZN6Logger9storeLog2Ef+0x8a>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004ac2:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	801a      	strh	r2, [r3, #0]
	}
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000220 	.word	0x20000220
 8004adc:	20000228 	.word	0x20000228

08004ae0 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aec:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004af6:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f503 530c 	add.w	r3, r3, #8960	; 0x2300
 8004b02:	3328      	adds	r3, #40	; 0x28
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b12:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8004b1e:	3318      	adds	r3, #24
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b2e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b3e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b42:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b4a:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d906      	bls.n	8004b66 <_ZN6Logger21storeDistanceAndThetaEff+0x86>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004b5e:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004b62:	2200      	movs	r2, #0
 8004b64:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_ZN6Logger23getDistanceArrayPointerEv>:

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	//}
}
const float *Logger::getDistanceArrayPointer()
{
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004b80:	33a0      	adds	r3, #160	; 0xa0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b8e:	b480      	push	{r7}
 8004b90:	b083      	sub	sp, #12
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004b9c:	3360      	adds	r3, #96	; 0x60
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af02      	add	r7, sp, #8
 8004bb0:	60f8      	str	r0, [r7, #12]
 8004bb2:	60b9      	str	r1, [r7, #8]
 8004bb4:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	2300      	movs	r3, #0
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	68b8      	ldr	r0, [r7, #8]
 8004bc6:	f7fc fe49 	bl	800185c <sd_write_array_float>
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af02      	add	r7, sp, #8
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004be4:	3320      	adds	r3, #32
 8004be6:	2200      	movs	r2, #0
 8004be8:	9200      	str	r2, [sp, #0]
 8004bea:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	68b8      	ldr	r0, [r7, #8]
 8004bf2:	f7fc fe33 	bl	800185c <sd_write_array_float>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004c12:	33a0      	adds	r3, #160	; 0xa0
 8004c14:	2200      	movs	r2, #0
 8004c16:	9200      	str	r2, [sp, #0]
 8004c18:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	68b8      	ldr	r0, [r7, #8]
 8004c20:	f7fc fe1c 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004c2a:	3360      	adds	r3, #96	; 0x60
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	9200      	str	r2, [sp, #0]
 8004c30:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	68b8      	ldr	r0, [r7, #8]
 8004c38:	f7fc fe10 	bl	800185c <sd_write_array_float>
}
 8004c3c:	bf00      	nop
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004c58:	3320      	adds	r3, #32
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	9200      	str	r2, [sp, #0]
 8004c5e:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	68b8      	ldr	r0, [r7, #8]
 8004c66:	f7fc fdf9 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004c70:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004c74:	2200      	movs	r2, #0
 8004c76:	9200      	str	r2, [sp, #0]
 8004c78:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	68b8      	ldr	r0, [r7, #8]
 8004c80:	f7fc fdec 	bl	800185c <sd_write_array_float>
}
 8004c84:	bf00      	nop
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 430c 	add.w	r3, r3, #35840	; 0x8c00
 8004ca0:	33a0      	adds	r3, #160	; 0xa0
 8004ca2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	68b8      	ldr	r0, [r7, #8]
 8004caa:	f7fc fe3d 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f503 436a 	add.w	r3, r3, #59904	; 0xea00
 8004cb4:	3360      	adds	r3, #96	; 0x60
 8004cb6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004cba:	6839      	ldr	r1, [r7, #0]
 8004cbc:	68b8      	ldr	r0, [r7, #8]
 8004cbe:	f7fc fe33 	bl	8001928 <sd_read_array_float>
}
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <_ZN6Logger13resetLogsDis2Ev>:

	log_index_tim_ = 0;
}

void Logger::resetLogsDis2()
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b08b      	sub	sp, #44	; 0x2c
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f503 33a4 	add.w	r3, r3, #83968	; 0x14800
 8004cd8:	3320      	adds	r3, #32
 8004cda:	61fb      	str	r3, [r7, #28]
 8004cdc:	69fb      	ldr	r3, [r7, #28]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ce6:	3340      	adds	r3, #64	; 0x40
 8004ce8:	61bb      	str	r3, [r7, #24]
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d009      	beq.n	8004d06 <_ZN6Logger13resetLogsDis2Ev+0x3c>
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	617b      	str	r3, [r7, #20]
		log = 0;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d00:	3304      	adds	r3, #4
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
 8004d04:	e7f1      	b.n	8004cea <_ZN6Logger13resetLogsDis2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f503 33d2 	add.w	r3, r3, #107520	; 0x1a400
 8004d0c:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	623b      	str	r3, [r7, #32]
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004d1c:	3340      	adds	r3, #64	; 0x40
 8004d1e:	60fb      	str	r3, [r7, #12]
 8004d20:	6a3a      	ldr	r2, [r7, #32]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d009      	beq.n	8004d3c <_ZN6Logger13resetLogsDis2Ev+0x72>
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	f04f 0200 	mov.w	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	3304      	adds	r3, #4
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	e7f1      	b.n	8004d20 <_ZN6Logger13resetLogsDis2Ev+0x56>
	}

	log_index_tim2_ = 0;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d42:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004d46:	2200      	movs	r2, #0
 8004d48:	801a      	strh	r2, [r3, #0]
}
 8004d4a:	bf00      	nop
 8004d4c:	372c      	adds	r7, #44	; 0x2c
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <_ZN6Logger13resetLogsTim1Ev>:

void Logger::resetLogsTim1()
{
 8004d56:	b480      	push	{r7}
 8004d58:	b087      	sub	sp, #28
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float_){
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	613b      	str	r3, [r7, #16]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004d6c:	3320      	adds	r3, #32
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d009      	beq.n	8004d8c <_ZN6Logger13resetLogsTim1Ev+0x36>
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f04f 0200 	mov.w	r2, #0
 8004d82:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float_){
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3304      	adds	r3, #4
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e7f1      	b.n	8004d70 <_ZN6Logger13resetLogsTim1Ev+0x1a>
	}

	log_index_tim_ = 0;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004d92:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004d96:	2200      	movs	r2, #0
 8004d98:	801a      	strh	r2, [r3, #0]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <_ZN6Logger13resetLogsTim2Ev>:

void Logger::resetLogsTim2()
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
	for(auto &log : store_data_float2_){
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004db4:	3320      	adds	r3, #32
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004dc2:	3320      	adds	r3, #32
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d009      	beq.n	8004de2 <_ZN6Logger13resetLogsTim2Ev+0x3c>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_data_float2_){
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e7f1      	b.n	8004dc6 <_ZN6Logger13resetLogsTim2Ev+0x20>
	}

	log_index_tim2_ = 0;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004de8:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004dec:	2200      	movs	r2, #0
 8004dee:	801a      	strh	r2, [r3, #0]
}
 8004df0:	bf00      	nop
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e0a:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e0e:	2200      	movs	r2, #0
 8004e10:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e18:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e26:	f203 33aa 	addw	r3, r3, #938	; 0x3aa
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	801a      	strh	r2, [r3, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <_ZN6Logger5startEv>:

void Logger::start()
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e48:	f203 33a2 	addw	r3, r3, #930	; 0x3a2
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e56:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e64:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8004e86:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004e9a:	b480      	push	{r7}
 8004e9c:	b083      	sub	sp, #12
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	801a      	strh	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	805a      	strh	r2, [r3, #2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <_ZN5Motor4initEv>:

void Motor::init()
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ec4:	2108      	movs	r1, #8
 8004ec6:	4805      	ldr	r0, [pc, #20]	; (8004edc <_ZN5Motor4initEv+0x20>)
 8004ec8:	f00a f9de 	bl	800f288 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ecc:	210c      	movs	r1, #12
 8004ece:	4803      	ldr	r0, [pc, #12]	; (8004edc <_ZN5Motor4initEv+0x20>)
 8004ed0:	f00a f9da 	bl	800f288 <HAL_TIM_PWM_Start>

}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20047718 	.word	0x20047718

08004ee0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	da0d      	bge.n	8004f0e <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ef8:	481f      	ldr	r0, [pc, #124]	; (8004f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8004efa:	f006 fa93 	bl	800b424 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	425b      	negs	r3, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	81fb      	strh	r3, [r7, #14]
 8004f0c:	e00a      	b.n	8004f24 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004f14:	4818      	ldr	r0, [pc, #96]	; (8004f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f16:	f006 fa85 	bl	800b424 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da0d      	bge.n	8004f4a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f34:	4810      	ldr	r0, [pc, #64]	; (8004f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f36:	f006 fa75 	bl	800b424 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	425b      	negs	r3, r3
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	81bb      	strh	r3, [r7, #12]
 8004f48:	e00a      	b.n	8004f60 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f50:	4809      	ldr	r0, [pc, #36]	; (8004f78 <_ZN5Motor9motorCtrlEv+0x98>)
 8004f52:	f006 fa67 	bl	800b424 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004f60:	89fa      	ldrh	r2, [r7, #14]
 8004f62:	4b06      	ldr	r3, [pc, #24]	; (8004f7c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004f68:	89ba      	ldrh	r2, [r7, #12]
 8004f6a:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40020c00 	.word	0x40020c00
 8004f7c:	20047718 	.word	0x20047718

08004f80 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6178      	str	r0, [r7, #20]
 8004f88:	ed87 0b02 	vstr	d0, [r7, #8]
 8004f8c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	4b30      	ldr	r3, [pc, #192]	; (8005058 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9a:	f7fb fdd5 	bl	8000b48 <__aeabi_dcmpgt>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <_ZN5Motor8setRatioEdd+0x30>
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	4c2b      	ldr	r4, [pc, #172]	; (8005058 <_ZN5Motor8setRatioEdd+0xd8>)
 8004faa:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004fae:	e00e      	b.n	8004fce <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004fb0:	f04f 0200 	mov.w	r2, #0
 8004fb4:	4b29      	ldr	r3, [pc, #164]	; (800505c <_ZN5Motor8setRatioEdd+0xdc>)
 8004fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fba:	f7fb fda7 	bl	8000b0c <__aeabi_dcmplt>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <_ZN5Motor8setRatioEdd+0x4e>
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	4c24      	ldr	r4, [pc, #144]	; (800505c <_ZN5Motor8setRatioEdd+0xdc>)
 8004fca:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd8:	f7fb fdb6 	bl	8000b48 <__aeabi_dcmpgt>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <_ZN5Motor8setRatioEdd+0x6e>
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	4c1c      	ldr	r4, [pc, #112]	; (8005058 <_ZN5Motor8setRatioEdd+0xd8>)
 8004fe8:	e9c7 3400 	strd	r3, r4, [r7]
 8004fec:	e00e      	b.n	800500c <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	4b1a      	ldr	r3, [pc, #104]	; (800505c <_ZN5Motor8setRatioEdd+0xdc>)
 8004ff4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ff8:	f7fb fd88 	bl	8000b0c <__aeabi_dcmplt>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <_ZN5Motor8setRatioEdd+0x8c>
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	4c15      	ldr	r4, [pc, #84]	; (800505c <_ZN5Motor8setRatioEdd+0xdc>)
 8005008:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	4b13      	ldr	r3, [pc, #76]	; (8005060 <_ZN5Motor8setRatioEdd+0xe0>)
 8005012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005016:	f7fb fb07 	bl	8000628 <__aeabi_dmul>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	4618      	mov	r0, r3
 8005020:	4621      	mov	r1, r4
 8005022:	f7fb fdb1 	bl	8000b88 <__aeabi_d2iz>
 8005026:	4603      	mov	r3, r0
 8005028:	b21a      	sxth	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <_ZN5Motor8setRatioEdd+0xe0>)
 8005034:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005038:	f7fb faf6 	bl	8000628 <__aeabi_dmul>
 800503c:	4603      	mov	r3, r0
 800503e:	460c      	mov	r4, r1
 8005040:	4618      	mov	r0, r3
 8005042:	4621      	mov	r1, r4
 8005044:	f7fb fda0 	bl	8000b88 <__aeabi_d2iz>
 8005048:	4603      	mov	r3, r0
 800504a:	b21a      	sxth	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	805a      	strh	r2, [r3, #2]

}
 8005050:	bf00      	nop
 8005052:	371c      	adds	r7, #28
 8005054:	46bd      	mov	sp, r7
 8005056:	bd90      	pop	{r4, r7, pc}
 8005058:	3ff00000 	.word	0x3ff00000
 800505c:	bff00000 	.word	0xbff00000
 8005060:	409c2000 	.word	0x409c2000

08005064 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8005064:	b490      	push	{r4, r7}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	f04f 0400 	mov.w	r4, #0
 800508a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	f04f 0300 	mov.w	r3, #0
 8005094:	f04f 0400 	mov.w	r4, #0
 8005098:	e9c2 3408 	strd	r3, r4, [r2, #32]
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	f04f 0400 	mov.w	r4, #0
 80050a6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	f04f 0300 	mov.w	r3, #0
 80050b0:	f04f 0400 	mov.w	r4, #0
 80050b4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	609a      	str	r2, [r3, #8]
}
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc90      	pop	{r4, r7}
 80050d4:	4770      	bx	lr
	...

080050d8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 80050d8:	b590      	push	{r4, r7, lr}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fc fe73 	bl	8001dd0 <_ZN3IMU8getOmegaEv>
 80050ea:	ee10 3a10 	vmov	r3, s0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb fa42 	bl	8000578 <__aeabi_f2d>
 80050f4:	4603      	mov	r3, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	e9c7 3402 	strd	r3, r4, [r7, #8]
	//float distance = encoder_->getDistance();

	delta_theta_ = current_omega * DELTA_T;
 80050fc:	a310      	add	r3, pc, #64	; (adr r3, 8005140 <_ZN8Odometry12calcPotitionEv+0x68>)
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005106:	f7fb fa8f 	bl	8000628 <__aeabi_dmul>
 800510a:	4603      	mov	r3, r0
 800510c:	460c      	mov	r4, r1
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	//x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
	//y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
	theta_= theta_ + delta_theta_;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8005120:	461a      	mov	r2, r3
 8005122:	4623      	mov	r3, r4
 8005124:	f7fb f8ca 	bl	80002bc <__adddf3>
 8005128:	4603      	mov	r3, r0
 800512a:	460c      	mov	r4, r1
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	//y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);

	//monitor_x = x_sens_;
	//monitor_y = y_sens_;
	//monitor_theta = theta_;
}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bd90      	pop	{r4, r7, pc}
 800513a:	bf00      	nop
 800513c:	f3af 8000 	nop.w
 8005140:	d2f1a9fc 	.word	0xd2f1a9fc
 8005144:	3f50624d 	.word	0x3f50624d

08005148 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffc1 	bl	80050d8 <_ZN8Odometry12calcPotitionEv>
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800515e:	b490      	push	{r4, r7}
 8005160:	b082      	sub	sp, #8
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	return theta_;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800516c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005170:	eeb0 0a47 	vmov.f32	s0, s14
 8005174:	eef0 0a67 	vmov.f32	s1, s15
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bc90      	pop	{r4, r7}
 800517e:	4770      	bx	lr

08005180 <_ZN8Odometry13getDeltaThetaEv>:

double Odometry::getDeltaTheta()
{
 8005180:	b490      	push	{r4, r7}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
	return delta_theta_;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800518e:	ec44 3b17 	vmov	d7, r3, r4
}
 8005192:	eeb0 0a47 	vmov.f32	s0, s14
 8005196:	eef0 0a67 	vmov.f32	s1, s15
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bc90      	pop	{r4, r7}
 80051a0:	4770      	bx	lr

080051a2 <_ZN8Odometry13clearPotitionEv>:

void Odometry::clearPotition()
{
 80051a2:	b490      	push	{r4, r7}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	f04f 0400 	mov.w	r4, #0
 80051b4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	f04f 0400 	mov.w	r4, #0
 80051d0:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80051d4:	bf00      	nop
 80051d6:	3708      	adds	r7, #8
 80051d8:	46bd      	mov	sp, r7
 80051da:	bc90      	pop	{r4, r7}
 80051dc:	4770      	bx	lr
	...

080051e0 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 80051e0:	b490      	push	{r4, r7}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	f04f 0300 	mov.w	r3, #0
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800521e:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005222:	2200      	movs	r2, #0
 8005224:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 8005226:	4a29      	ldr	r2, [pc, #164]	; (80052cc <_ZN13PathFollowingC1Ev+0xec>)
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005234:	4a25      	ldr	r2, [pc, #148]	; (80052cc <_ZN13PathFollowingC1Ev+0xec>)
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	f04f 0400 	mov.w	r4, #0
 800523e:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005242:	4a22      	ldr	r2, [pc, #136]	; (80052cc <_ZN13PathFollowingC1Ev+0xec>)
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	f04f 0400 	mov.w	r4, #0
 800524c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005252:	f04f 0300 	mov.w	r3, #0
 8005256:	f04f 0400 	mov.w	r4, #0
 800525a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800525e:	4a1c      	ldr	r2, [pc, #112]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005260:	f04f 0300 	mov.w	r3, #0
 8005264:	f04f 0400 	mov.w	r4, #0
 8005268:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800526c:	4a18      	ldr	r2, [pc, #96]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800527a:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	f04f 0400 	mov.w	r4, #0
 8005284:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005288:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 800528a:	f04f 0300 	mov.w	r3, #0
 800528e:	f04f 0400 	mov.w	r4, #0
 8005292:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005296:	4a0e      	ldr	r2, [pc, #56]	; (80052d0 <_ZN13PathFollowingC1Ev+0xf0>)
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	f04f 0400 	mov.w	r4, #0
 80052a0:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80052a4:	4a0b      	ldr	r2, [pc, #44]	; (80052d4 <_ZN13PathFollowingC1Ev+0xf4>)
 80052a6:	f04f 0300 	mov.w	r3, #0
 80052aa:	f04f 0400 	mov.w	r4, #0
 80052ae:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <_ZN13PathFollowingC1Ev+0xf4>)
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	f04f 0400 	mov.w	r4, #0
 80052bc:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bc90      	pop	{r4, r7}
 80052ca:	4770      	bx	lr
 80052cc:	20047c18 	.word	0x20047c18
 80052d0:	20047ba8 	.word	0x20047ba8
 80052d4:	20047c08 	.word	0x20047c08

080052d8 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80052e0:	f001 fd62 	bl	8006da8 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	2201      	movs	r2, #1
 80052ea:	4915      	ldr	r1, [pc, #84]	; (8005340 <_ZN13PathFollowing4initEv+0x68>)
 80052ec:	4815      	ldr	r0, [pc, #84]	; (8005344 <_ZN13PathFollowing4initEv+0x6c>)
 80052ee:	f7fc fb61 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	2201      	movs	r2, #1
 80052f8:	4913      	ldr	r1, [pc, #76]	; (8005348 <_ZN13PathFollowing4initEv+0x70>)
 80052fa:	4812      	ldr	r0, [pc, #72]	; (8005344 <_ZN13PathFollowing4initEv+0x6c>)
 80052fc:	f7fc fb5a 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	2201      	movs	r2, #1
 8005306:	4911      	ldr	r1, [pc, #68]	; (800534c <_ZN13PathFollowing4initEv+0x74>)
 8005308:	480e      	ldr	r0, [pc, #56]	; (8005344 <_ZN13PathFollowing4initEv+0x6c>)
 800530a:	f7fc fb53 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 800530e:	ed97 7b06 	vldr	d7, [r7, #24]
 8005312:	ed97 6b04 	vldr	d6, [r7, #16]
 8005316:	ed97 5b02 	vldr	d5, [r7, #8]
 800531a:	eeb0 2a45 	vmov.f32	s4, s10
 800531e:	eef0 2a65 	vmov.f32	s5, s11
 8005322:	eeb0 1a46 	vmov.f32	s2, s12
 8005326:	eef0 1a66 	vmov.f32	s3, s13
 800532a:	eeb0 0a47 	vmov.f32	s0, s14
 800532e:	eef0 0a67 	vmov.f32	s1, s15
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f80c 	bl	8005350 <_ZN13PathFollowing7setGainEddd>
}
 8005338:	bf00      	nop
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	08018f14 	.word	0x08018f14
 8005344:	08018f1c 	.word	0x08018f1c
 8005348:	08018f24 	.word	0x08018f24
 800534c:	08018f2c 	.word	0x08018f2c

08005350 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005350:	b490      	push	{r4, r7}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	61f8      	str	r0, [r7, #28]
 8005358:	ed87 0b04 	vstr	d0, [r7, #16]
 800535c:	ed87 1b02 	vstr	d1, [r7, #8]
 8005360:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005364:	4a09      	ldr	r2, [pc, #36]	; (800538c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005366:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800536a:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800536e:	4a07      	ldr	r2, [pc, #28]	; (800538c <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005370:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005374:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <_ZN13PathFollowing7setGainEddd+0x3c>)
 800537a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800537e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005382:	bf00      	nop
 8005384:	3720      	adds	r7, #32
 8005386:	46bd      	mov	sp, r7
 8005388:	bc90      	pop	{r4, r7}
 800538a:	4770      	bx	lr
 800538c:	20047c18 	.word	0x20047c18

08005390 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005398:	2088      	movs	r0, #136	; 0x88
 800539a:	f7fc fe5c 	bl	8002056 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800539e:	2080      	movs	r0, #128	; 0x80
 80053a0:	f7fc fe59 	bl	8002056 <INA260_init>
}
 80053a4:	bf00      	nop
 80053a6:	3708      	adds	r7, #8
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	0000      	movs	r0, r0
	...

080053b0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80053b0:	b590      	push	{r4, r7, lr}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80053b8:	2188      	movs	r1, #136	; 0x88
 80053ba:	2002      	movs	r0, #2
 80053bc:	f7fc fde8 	bl	8001f90 <INA260_read>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fb f8c6 	bl	8000554 <__aeabi_i2d>
 80053c8:	a30c      	add	r3, pc, #48	; (adr r3, 80053fc <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	f7fb f92b 	bl	8000628 <__aeabi_dmul>
 80053d2:	4603      	mov	r3, r0
 80053d4:	460c      	mov	r4, r1
 80053d6:	4618      	mov	r0, r3
 80053d8:	4621      	mov	r1, r4
 80053da:	f7fb fc1d 	bl	8000c18 <__aeabi_d2f>
 80053de:	4602      	mov	r2, r0
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a03      	ldr	r2, [pc, #12]	; (80053f8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 80053ea:	6013      	str	r3, [r2, #0]
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd90      	pop	{r4, r7, pc}
 80053f4:	f3af 8000 	nop.w
 80053f8:	2000022c 	.word	0x2000022c
 80053fc:	47ae147b 	.word	0x47ae147b
 8005400:	3f547ae1 	.word	0x3f547ae1

08005404 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	ee07 3a90 	vmov	s15, r3

}
 8005414:	eeb0 0a67 	vmov.f32	s0, s15
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005430:	2102      	movs	r1, #2
 8005432:	4822      	ldr	r0, [pc, #136]	; (80054bc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005434:	f005 ffde 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	bf0c      	ite	eq
 800543e:	2301      	moveq	r3, #1
 8005440:	2300      	movne	r3, #0
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005448:	89fb      	ldrh	r3, [r7, #14]
 800544a:	f043 0301 	orr.w	r3, r3, #1
 800544e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005450:	2108      	movs	r1, #8
 8005452:	481a      	ldr	r0, [pc, #104]	; (80054bc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005454:	f005 ffce 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	bf0c      	ite	eq
 800545e:	2301      	moveq	r3, #1
 8005460:	2300      	movne	r3, #0
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005468:	89fb      	ldrh	r3, [r7, #14]
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005470:	2110      	movs	r1, #16
 8005472:	4812      	ldr	r0, [pc, #72]	; (80054bc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005474:	f005 ffbe 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	bf0c      	ite	eq
 800547e:	2301      	moveq	r3, #1
 8005480:	2300      	movne	r3, #0
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005488:	89fb      	ldrh	r3, [r7, #14]
 800548a:	f043 0304 	orr.w	r3, r3, #4
 800548e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005490:	2180      	movs	r1, #128	; 0x80
 8005492:	480a      	ldr	r0, [pc, #40]	; (80054bc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005494:	f005 ffae 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	bf0c      	ite	eq
 800549e:	2301      	moveq	r3, #1
 80054a0:	2300      	movne	r3, #0
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80054a8:	89fb      	ldrh	r3, [r7, #14]
 80054aa:	f043 0308 	orr.w	r3, r3, #8
 80054ae:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80054b0:	89fb      	ldrh	r3, [r7, #14]

}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40020c00 	.word	0x40020c00

080054c0 <_ZN10SideSensorC1Ev>:
uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;
bool mon_rise_fall_flag = true;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false),
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
		timer_R_(0), timer_L_(0), rise_fall_flag_R_(true), rise_fall_flag_L_(true)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	709a      	strb	r2, [r3, #2]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	70da      	strb	r2, [r3, #3]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	809a      	strh	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	80da      	strh	r2, [r3, #6]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	721a      	strb	r2, [r3, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	815a      	strh	r2, [r3, #10]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	819a      	strh	r2, [r3, #12]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	739a      	strb	r2, [r3, #14]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	73da      	strb	r2, [r3, #15]
{

}
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
	...

08005514 <_ZN10SideSensor21updateStatusRightExtiEv>:

void SideSensor::updateStatusRightExti()
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2) == GPIO_PIN_SET){ // 立ち上がり Black
 800551c:	2104      	movs	r1, #4
 800551e:	480e      	ldr	r0, [pc, #56]	; (8005558 <_ZN10SideSensor21updateStatusRightExtiEv+0x44>)
 8005520:	f005 ff68 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	bf0c      	ite	eq
 800552a:	2301      	moveq	r3, #1
 800552c:	2300      	movne	r3, #0
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d006      	beq.n	8005542 <_ZN10SideSensor21updateStatusRightExtiEv+0x2e>
		timer_R_ = 0;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = true;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	739a      	strb	r2, [r3, #14]
	}
	else{	//White
		timer_R_ = 0;
		rise_fall_flag_R_ = false;
	}
}
 8005540:	e005      	b.n	800554e <_ZN10SideSensor21updateStatusRightExtiEv+0x3a>
		timer_R_ = 0;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	815a      	strh	r2, [r3, #10]
		rise_fall_flag_R_ = false;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	739a      	strb	r2, [r3, #14]
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000

0800555c <_ZN10SideSensor20updateStatusLeftExtiEv>:

void SideSensor::updateStatusLeftExti()
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8) == GPIO_PIN_SET){ // 立ち上がり Black
 8005564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005568:	480d      	ldr	r0, [pc, #52]	; (80055a0 <_ZN10SideSensor20updateStatusLeftExtiEv+0x44>)
 800556a:	f005 ff43 	bl	800b3f4 <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <_ZN10SideSensor20updateStatusLeftExtiEv+0x30>
		timer_L_ = 0;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = true;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	73da      	strb	r2, [r3, #15]
	}
	else{	//White
		timer_L_ = 0;
		rise_fall_flag_L_ = false;
	}
}
 800558a:	e005      	b.n	8005598 <_ZN10SideSensor20updateStatusLeftExtiEv+0x3c>
		timer_L_ = 0;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	819a      	strh	r2, [r3, #12]
		rise_fall_flag_L_ = false;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	73da      	strb	r2, [r3, #15]
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	40020c00 	.word	0x40020c00

080055a4 <_ZN10SideSensor12updateStatusEv>:

void SideSensor::updateStatus() // called timer flip
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
	timer_R_++;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	895b      	ldrh	r3, [r3, #10]
 80055b0:	3301      	adds	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	815a      	strh	r2, [r3, #10]
	timer_L_++;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	899b      	ldrh	r3, [r3, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	819a      	strh	r2, [r3, #12]
	if(timer_R_ >= 10000) timer_R_ = 10000;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	895b      	ldrh	r3, [r3, #10]
 80055c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d903      	bls.n	80055d8 <_ZN10SideSensor12updateStatusEv+0x34>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80055d6:	815a      	strh	r2, [r3, #10]
	if(timer_L_ >= 10000) timer_L_ = 10000;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	899b      	ldrh	r3, [r3, #12]
 80055dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d903      	bls.n	80055ec <_ZN10SideSensor12updateStatusEv+0x48>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80055ea:	819a      	strh	r2, [r3, #12]

	if(ignore_flag_ == false){
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	7a1b      	ldrb	r3, [r3, #8]
 80055f0:	f083 0301 	eor.w	r3, r3, #1
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d019      	beq.n	800562e <_ZN10SideSensor12updateStatusEv+0x8a>
		if(rise_fall_flag_R_ == true && timer_R_ >= 2){
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7b9b      	ldrb	r3, [r3, #14]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <_ZN10SideSensor12updateStatusEv+0x6e>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	895b      	ldrh	r3, [r3, #10]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d903      	bls.n	8005612 <_ZN10SideSensor12updateStatusEv+0x6e>
			status_R_ = false;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	70da      	strb	r2, [r3, #3]
 8005610:	e00d      	b.n	800562e <_ZN10SideSensor12updateStatusEv+0x8a>
		}
		else if(rise_fall_flag_R_ == false && timer_R_ >= 2){
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	7b9b      	ldrb	r3, [r3, #14]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d006      	beq.n	800562e <_ZN10SideSensor12updateStatusEv+0x8a>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	895b      	ldrh	r3, [r3, #10]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d902      	bls.n	800562e <_ZN10SideSensor12updateStatusEv+0x8a>
			status_R_ = true;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	70da      	strb	r2, [r3, #3]
		}
	}

	if(rise_fall_flag_L_ == true && timer_L_ >= 2){
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	7bdb      	ldrb	r3, [r3, #15]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <_ZN10SideSensor12updateStatusEv+0xa2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	899b      	ldrh	r3, [r3, #12]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d903      	bls.n	8005646 <_ZN10SideSensor12updateStatusEv+0xa2>
		status_L_ = false;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	709a      	strb	r2, [r3, #2]
 8005644:	e00d      	b.n	8005662 <_ZN10SideSensor12updateStatusEv+0xbe>
	}
	else if(rise_fall_flag_L_ == false && timer_L_ >= 2){
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	7bdb      	ldrb	r3, [r3, #15]
 800564a:	f083 0301 	eor.w	r3, r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d006      	beq.n	8005662 <_ZN10SideSensor12updateStatusEv+0xbe>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	899b      	ldrh	r3, [r3, #12]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d902      	bls.n	8005662 <_ZN10SideSensor12updateStatusEv+0xbe>
		status_L_ = true;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	709a      	strb	r2, [r3, #2]
	}

	mon_status_R = status_R_;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	78da      	ldrb	r2, [r3, #3]
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <_ZN10SideSensor12updateStatusEv+0xdc>)
 8005668:	701a      	strb	r2, [r3, #0]
	mon_status_L = status_L_;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	789a      	ldrb	r2, [r3, #2]
 800566e:	4b05      	ldr	r3, [pc, #20]	; (8005684 <_ZN10SideSensor12updateStatusEv+0xe0>)
 8005670:	701a      	strb	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000231 	.word	0x20000231
 8005684:	20000230 	.word	0x20000230

08005688 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	789b      	ldrb	r3, [r3, #2]
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <_ZN10SideSensor10getStatusREv>:

bool SideSensor::getStatusR()
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	return status_R_;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	78db      	ldrb	r3, [r3, #3]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <_ZN10SideSensor17resetWhiteLineCntEv>:
{
	return white_line_cnt_r_;
}

void SideSensor::resetWhiteLineCnt()
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	80da      	strh	r2, [r3, #6]
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	721a      	strb	r2, [r3, #8]
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	721a      	strb	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	7a1b      	ldrb	r3, [r3, #8]
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3308      	adds	r3, #8
 8005734:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005738:	2100      	movs	r1, #0
 800573a:	4618      	mov	r0, r3
 800573c:	f00f f912 	bl	8014964 <memset>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005746:	811a      	strh	r2, [r3, #8]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800574e:	815a      	strh	r2, [r3, #10]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005756:	819a      	strh	r2, [r3, #12]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800575e:	81da      	strh	r2, [r3, #14]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005766:	821a      	strh	r2, [r3, #16]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800576e:	825a      	strh	r2, [r3, #18]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2201      	movs	r2, #1
 8005774:	829a      	strh	r2, [r3, #20]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2201      	movs	r2, #1
 800577a:	82da      	strh	r2, [r3, #22]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	831a      	strh	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	835a      	strh	r2, [r3, #26]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	839a      	strh	r2, [r3, #28]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2201      	movs	r2, #1
 8005792:	83da      	strh	r2, [r3, #30]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	841a      	strh	r2, [r3, #32]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a0:	845a      	strh	r2, [r3, #34]	; 0x22
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2201      	movs	r2, #1
 80057a6:	849a      	strh	r2, [r3, #36]	; 0x24
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ae:	84da      	strh	r2, [r3, #38]	; 0x26
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ca:	85da      	strh	r2, [r3, #46]	; 0x2e
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d2:	861a      	strh	r2, [r3, #48]	; 0x30
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2201      	movs	r2, #1
 80057d8:	865a      	strh	r2, [r3, #50]	; 0x32
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	869a      	strh	r2, [r3, #52]	; 0x34
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ee:	871a      	strh	r2, [r3, #56]	; 0x38
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	875a      	strh	r2, [r3, #58]	; 0x3a
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	879a      	strh	r2, [r3, #60]	; 0x3c
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2201      	movs	r2, #1
 8005800:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005808:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800582a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005846:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005872:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005886:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ca:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2201      	movs	r2, #1
 80058da:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e4:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f6:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005910:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005934:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005946:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005950:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2201      	movs	r2, #1
 8005958:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005962:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800596c:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005998:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059ac:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b6:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059c8:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059fa:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a04:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a16:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a28:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a4a:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a54:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a6e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a80:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	605a      	str	r2, [r3, #4]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	609a      	str	r2, [r3, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f04f 0200 	mov.w	r2, #0
 8005ae0:	60da      	str	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f04f 0200 	mov.w	r2, #0
 8005ae8:	611a      	str	r2, [r3, #16]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	615a      	str	r2, [r3, #20]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f04f 0200 	mov.w	r2, #0
 8005af8:	619a      	str	r2, [r3, #24]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	61da      	str	r2, [r3, #28]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	621a      	str	r2, [r3, #32]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	0000      	movs	r0, r0
 8005b4c:	0000      	movs	r0, r0
	...

08005b50 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005b50:	b590      	push	{r4, r7, lr}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	f107 020c 	add.w	r2, r7, #12
 8005b60:	f107 0110 	add.w	r1, r7, #16
 8005b64:	4618      	mov	r0, r3
 8005b66:	f7fb fd41 	bl	80015ec <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005b6a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b7e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005b82:	6978      	ldr	r0, [r7, #20]
 8005b84:	f7fa fcf8 	bl	8000578 <__aeabi_f2d>
 8005b88:	a30e      	add	r3, pc, #56	; (adr r3, 8005bc4 <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fd4b 	bl	8000628 <__aeabi_dmul>
 8005b92:	4603      	mov	r3, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	4618      	mov	r0, r3
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f7fb f83d 	bl	8000c18 <__aeabi_d2f>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	4a05      	ldr	r2, [pc, #20]	; (8005bc0 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005baa:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	ee07 3a90 	vmov	s15, r3
}
 8005bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd90      	pop	{r4, r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000234 	.word	0x20000234
 8005bc4:	1ab1d998 	.word	0x1ab1d998
 8005bc8:	3f7830b5 	.word	0x3f7830b5
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	ed93 7a00 	vldr	s14, [r3]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	edd3 7a02 	vldr	s15, [r3, #8]
 8005be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be8:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005bf6:	4b48      	ldr	r3, [pc, #288]	; (8005d18 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c0c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c14:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005c18:	4b3f      	ldr	r3, [pc, #252]	; (8005d18 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fa fcab 	bl	8000578 <__aeabi_f2d>
 8005c22:	4604      	mov	r4, r0
 8005c24:	460d      	mov	r5, r1
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	ed93 7a06 	vldr	s14, [r3, #24]
 8005c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c34:	ee17 0a90 	vmov	r0, s15
 8005c38:	f7fa fc9e 	bl	8000578 <__aeabi_f2d>
 8005c3c:	a334      	add	r3, pc, #208	; (adr r3, 8005d10 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f7fa fcf1 	bl	8000628 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4629      	mov	r1, r5
 8005c4e:	f7fa fb35 	bl	80002bc <__adddf3>
 8005c52:	4603      	mov	r3, r0
 8005c54:	460c      	mov	r4, r1
 8005c56:	4618      	mov	r0, r3
 8005c58:	4621      	mov	r1, r4
 8005c5a:	f7fa ffdd 	bl	8000c18 <__aeabi_d2f>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	4b2d      	ldr	r3, [pc, #180]	; (8005d18 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c62:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c6c:	edd3 7a00 	vldr	s15, [r3]
 8005c70:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7c:	ee17 0a90 	vmov	r0, s15
 8005c80:	f7fa fc7a 	bl	8000578 <__aeabi_f2d>
 8005c84:	a322      	add	r3, pc, #136	; (adr r3, 8005d10 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f7fa fdf7 	bl	800087c <__aeabi_ddiv>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	4618      	mov	r0, r3
 8005c94:	4621      	mov	r1, r4
 8005c96:	f7fa ffbf 	bl	8000c18 <__aeabi_d2f>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005c9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ca6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005cac:	edd3 7a00 	vldr	s15, [r3]
 8005cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb4:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cca:	ee17 0a90 	vmov	r0, s15
 8005cce:	f7fa fc53 	bl	8000578 <__aeabi_f2d>
 8005cd2:	4605      	mov	r5, r0
 8005cd4:	460e      	mov	r6, r1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005cdc:	ed97 7a02 	vldr	s14, [r7, #8]
 8005ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ce4:	ee17 0a90 	vmov	r0, s15
 8005ce8:	f7fa fc46 	bl	8000578 <__aeabi_f2d>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	ec43 2b11 	vmov	d1, r2, r3
 8005cf4:	ec46 5b10 	vmov	d0, r5, r6
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff f941 	bl	8004f80 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005cfe:	4a07      	ldr	r2, [pc, #28]	; (8005d1c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	6013      	str	r3, [r2, #0]
}
 8005d04:	bf00      	nop
 8005d06:	371c      	adds	r7, #28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d0c:	f3af 8000 	nop.w
 8005d10:	d2f1a9fc 	.word	0xd2f1a9fc
 8005d14:	3f50624d 	.word	0x3f50624d
 8005d18:	2000023c 	.word	0x2000023c
 8005d1c:	20000238 	.word	0x20000238

08005d20 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d2c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
}
 8005d3c:	bf00      	nop
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d54:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d7c:	edc7 0a01 	vstr	s1, [r7, #4]
 8005d80:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	615a      	str	r2, [r3, #20]
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	ed87 0a02 	vstr	s0, [r7, #8]
 8005dae:	edc7 0a01 	vstr	s1, [r7, #4]
 8005db2:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff feb7 	bl	8005b50 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f7ff feef 	bl	8005bd0 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
	...

08005e20 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005e50 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e38:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005e50 <_ZN12VelocityCtrl4stopEv+0x30>
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff f89f 	bl	8004f80 <_ZN5Motor8setRatioEdd>

}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	f3af 8000 	nop.w
	...

08005e58 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	ee07 3a90 	vmov	s15, r3
}
 8005e68:	eeb0 0a67 	vmov.f32	s0, s15
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_GPIO_EXTI_Callback>:
  return len;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8005e80:	88fb      	ldrh	r3, [r7, #6]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 fe68 	bl	8007b58 <cppExit>
}
 8005e88:	bf00      	nop
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1e      	ldr	r2, [pc, #120]	; (8005f18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d10e      	bne.n	8005ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005ea2:	f001 fe31 	bl	8007b08 <cppFlip100ns>

		tim7_timer++;
 8005ea6:	4b1d      	ldr	r3, [pc, #116]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	3301      	adds	r3, #1
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eae:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005eb0:	4b1a      	ldr	r3, [pc, #104]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a1a      	ldr	r2, [pc, #104]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d902      	bls.n	8005ec0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005eba:	4b18      	ldr	r3, [pc, #96]	; (8005f1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d10e      	bne.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005eca:	f001 fded 	bl	8007aa8 <cppFlip1ms>

		tim6_timer++;
 8005ece:	4b16      	ldr	r3, [pc, #88]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	4a14      	ldr	r2, [pc, #80]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ed6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ed8:	4b13      	ldr	r3, [pc, #76]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a10      	ldr	r2, [pc, #64]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d902      	bls.n	8005ee8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005ee2:	4b11      	ldr	r3, [pc, #68]	; (8005f28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d10e      	bne.n	8005f10 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005ef2:	f001 fe13 	bl	8007b1c <cppFlip10ms>

		tim13_timer++;
 8005ef6:	4b0e      	ldr	r3, [pc, #56]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3301      	adds	r3, #1
 8005efc:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005efe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005f00:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a06      	ldr	r2, [pc, #24]	; (8005f20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d902      	bls.n	8005f10 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005f0a:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
	}

}
 8005f10:	bf00      	nop
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40001400 	.word	0x40001400
 8005f1c:	200478cc 	.word	0x200478cc
 8005f20:	0001869f 	.word	0x0001869f
 8005f24:	40001000 	.word	0x40001000
 8005f28:	20047888 	.word	0x20047888
 8005f2c:	40001c00 	.word	0x40001c00
 8005f30:	200478d0 	.word	0x200478d0

08005f34 <init>:

void init()
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005f38:	2201      	movs	r2, #1
 8005f3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f3e:	4808      	ldr	r0, [pc, #32]	; (8005f60 <init+0x2c>)
 8005f40:	f005 fa70 	bl	800b424 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005f44:	4807      	ldr	r0, [pc, #28]	; (8005f64 <init+0x30>)
 8005f46:	f009 f950 	bl	800f1ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005f4a:	4807      	ldr	r0, [pc, #28]	; (8005f68 <init+0x34>)
 8005f4c:	f009 f94d 	bl	800f1ea <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005f50:	4806      	ldr	r0, [pc, #24]	; (8005f6c <init+0x38>)
 8005f52:	f009 f94a 	bl	800f1ea <HAL_TIM_Base_Start_IT>

	cppInit();
 8005f56:	f001 fd05 	bl	8007964 <cppInit>

	//path_following_initialize();

}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40021000 	.word	0x40021000
 8005f64:	200479b4 	.word	0x200479b4
 8005f68:	20047b58 	.word	0x20047b58
 8005f6c:	200478d4 	.word	0x200478d4

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f74:	f003 ff4e 	bl	8009e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f78:	f000 f82a 	bl	8005fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f7c:	f000 fdbc 	bl	8006af8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005f80:	f000 fd8a 	bl	8006a98 <MX_DMA_Init>
  MX_I2C2_Init();
 8005f84:	f000 f9e8 	bl	8006358 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005f88:	f000 fa14 	bl	80063b4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005f8c:	f000 fa32 	bl	80063f4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005f90:	f000 fa66 	bl	8006460 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005f94:	f000 fb70 	bl	8006678 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005f98:	f000 fc3c 	bl	8006814 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005f9c:	f000 fd52 	bl	8006a44 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005fa0:	f00b f8f6 	bl	8011190 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005fa4:	f000 fbcc 	bl	8006740 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005fa8:	f000 f9a8 	bl	80062fc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005fac:	f000 fb00 	bl	80065b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005fb0:	f000 fc88 	bl	80068c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005fb4:	f000 fcd4 	bl	8006960 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005fb8:	f000 f898 	bl	80060ec <MX_ADC2_Init>
  MX_TIM7_Init();
 8005fbc:	f000 fbf6 	bl	80067ac <MX_TIM7_Init>
  MX_TIM13_Init();
 8005fc0:	f000 fd1c 	bl	80069fc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005fc4:	f7ff ffb6 	bl	8005f34 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005fc8:	f001 fde2 	bl	8007b90 <cppLoop>
 8005fcc:	e7fc      	b.n	8005fc8 <main+0x58>
	...

08005fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b0a4      	sub	sp, #144	; 0x90
 8005fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005fd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fda:	2234      	movs	r2, #52	; 0x34
 8005fdc:	2100      	movs	r1, #0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f00e fcc0 	bl	8014964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005fe4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
 8005fec:	605a      	str	r2, [r3, #4]
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	223c      	movs	r2, #60	; 0x3c
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f00e fcb1 	bl	8014964 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60bb      	str	r3, [r7, #8]
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <SystemClock_Config+0x114>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a36      	ldr	r2, [pc, #216]	; (80060e4 <SystemClock_Config+0x114>)
 800600c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b34      	ldr	r3, [pc, #208]	; (80060e4 <SystemClock_Config+0x114>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601a:	60bb      	str	r3, [r7, #8]
 800601c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800601e:	2300      	movs	r3, #0
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	4b31      	ldr	r3, [pc, #196]	; (80060e8 <SystemClock_Config+0x118>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a30      	ldr	r2, [pc, #192]	; (80060e8 <SystemClock_Config+0x118>)
 8006028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <SystemClock_Config+0x118>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006036:	607b      	str	r3, [r7, #4]
 8006038:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800603a:	2301      	movs	r3, #1
 800603c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800603e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006042:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006044:	2302      	movs	r3, #2
 8006046:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006048:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800604c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800604e:	2308      	movs	r3, #8
 8006050:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006052:	23b4      	movs	r3, #180	; 0xb4
 8006054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006058:	2302      	movs	r3, #2
 800605a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800605e:	2308      	movs	r3, #8
 8006060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006064:	2302      	movs	r3, #2
 8006066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800606a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800606e:	4618      	mov	r0, r3
 8006070:	f006 fe12 	bl	800cc98 <HAL_RCC_OscConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800607a:	f000 fe91 	bl	8006da0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800607e:	f006 f98d 	bl	800c39c <HAL_PWREx_EnableOverDrive>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006088:	f000 fe8a 	bl	8006da0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800608c:	230f      	movs	r3, #15
 800608e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006090:	2302      	movs	r3, #2
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006094:	2300      	movs	r3, #0
 8006096:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006098:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800609c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800609e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060a2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80060a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060a8:	2105      	movs	r1, #5
 80060aa:	4618      	mov	r0, r3
 80060ac:	f006 f9c6 	bl	800c43c <HAL_RCC_ClockConfig>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <SystemClock_Config+0xea>
  {
    Error_Handler();
 80060b6:	f000 fe73 	bl	8006da0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80060ba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80060be:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80060c0:	2300      	movs	r3, #0
 80060c2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80060c4:	2300      	movs	r3, #0
 80060c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	4618      	mov	r0, r3
 80060ce:	f006 fba5 	bl	800c81c <HAL_RCCEx_PeriphCLKConfig>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80060d8:	f000 fe62 	bl	8006da0 <Error_Handler>
  }
}
 80060dc:	bf00      	nop
 80060de:	3790      	adds	r7, #144	; 0x90
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	40023800 	.word	0x40023800
 80060e8:	40007000 	.word	0x40007000

080060ec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80060f2:	463b      	mov	r3, r7
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	609a      	str	r2, [r3, #8]
 80060fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80060fe:	4b7c      	ldr	r3, [pc, #496]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006100:	4a7c      	ldr	r2, [pc, #496]	; (80062f4 <MX_ADC2_Init+0x208>)
 8006102:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006104:	4b7a      	ldr	r3, [pc, #488]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006106:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800610a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800610c:	4b78      	ldr	r3, [pc, #480]	; (80062f0 <MX_ADC2_Init+0x204>)
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006112:	4b77      	ldr	r3, [pc, #476]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006114:	2201      	movs	r2, #1
 8006116:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006118:	4b75      	ldr	r3, [pc, #468]	; (80062f0 <MX_ADC2_Init+0x204>)
 800611a:	2201      	movs	r2, #1
 800611c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800611e:	4b74      	ldr	r3, [pc, #464]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006126:	4b72      	ldr	r3, [pc, #456]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006128:	2200      	movs	r2, #0
 800612a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800612c:	4b70      	ldr	r3, [pc, #448]	; (80062f0 <MX_ADC2_Init+0x204>)
 800612e:	4a72      	ldr	r2, [pc, #456]	; (80062f8 <MX_ADC2_Init+0x20c>)
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006132:	4b6f      	ldr	r3, [pc, #444]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006134:	2200      	movs	r2, #0
 8006136:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006138:	4b6d      	ldr	r3, [pc, #436]	; (80062f0 <MX_ADC2_Init+0x204>)
 800613a:	220e      	movs	r2, #14
 800613c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800613e:	4b6c      	ldr	r3, [pc, #432]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006140:	2201      	movs	r2, #1
 8006142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006146:	4b6a      	ldr	r3, [pc, #424]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006148:	2201      	movs	r2, #1
 800614a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800614c:	4868      	ldr	r0, [pc, #416]	; (80062f0 <MX_ADC2_Init+0x204>)
 800614e:	f003 fef5 	bl	8009f3c <HAL_ADC_Init>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006158:	f000 fe22 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800615c:	230a      	movs	r3, #10
 800615e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006160:	2301      	movs	r3, #1
 8006162:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006164:	2306      	movs	r3, #6
 8006166:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006168:	463b      	mov	r3, r7
 800616a:	4619      	mov	r1, r3
 800616c:	4860      	ldr	r0, [pc, #384]	; (80062f0 <MX_ADC2_Init+0x204>)
 800616e:	f004 f839 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d001      	beq.n	800617c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006178:	f000 fe12 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800617c:	230b      	movs	r3, #11
 800617e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006180:	2302      	movs	r3, #2
 8006182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006184:	463b      	mov	r3, r7
 8006186:	4619      	mov	r1, r3
 8006188:	4859      	ldr	r0, [pc, #356]	; (80062f0 <MX_ADC2_Init+0x204>)
 800618a:	f004 f82b 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006194:	f000 fe04 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006198:	230c      	movs	r3, #12
 800619a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800619c:	2303      	movs	r3, #3
 800619e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061a0:	463b      	mov	r3, r7
 80061a2:	4619      	mov	r1, r3
 80061a4:	4852      	ldr	r0, [pc, #328]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061a6:	f004 f81d 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d001      	beq.n	80061b4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80061b0:	f000 fdf6 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80061b4:	230d      	movs	r3, #13
 80061b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80061b8:	2304      	movs	r3, #4
 80061ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061bc:	463b      	mov	r3, r7
 80061be:	4619      	mov	r1, r3
 80061c0:	484b      	ldr	r0, [pc, #300]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061c2:	f004 f80f 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80061cc:	f000 fde8 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80061d0:	2300      	movs	r3, #0
 80061d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80061d4:	2305      	movs	r3, #5
 80061d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d8:	463b      	mov	r3, r7
 80061da:	4619      	mov	r1, r3
 80061dc:	4844      	ldr	r0, [pc, #272]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061de:	f004 f801 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80061e8:	f000 fdda 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80061ec:	2301      	movs	r3, #1
 80061ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80061f0:	2306      	movs	r3, #6
 80061f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061f4:	463b      	mov	r3, r7
 80061f6:	4619      	mov	r1, r3
 80061f8:	483d      	ldr	r0, [pc, #244]	; (80062f0 <MX_ADC2_Init+0x204>)
 80061fa:	f003 fff3 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006204:	f000 fdcc 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006208:	2302      	movs	r3, #2
 800620a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800620c:	2307      	movs	r3, #7
 800620e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006210:	463b      	mov	r3, r7
 8006212:	4619      	mov	r1, r3
 8006214:	4836      	ldr	r0, [pc, #216]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006216:	f003 ffe5 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006220:	f000 fdbe 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006224:	2303      	movs	r3, #3
 8006226:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006228:	2308      	movs	r3, #8
 800622a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800622c:	463b      	mov	r3, r7
 800622e:	4619      	mov	r1, r3
 8006230:	482f      	ldr	r0, [pc, #188]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006232:	f003 ffd7 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800623c:	f000 fdb0 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006240:	2304      	movs	r3, #4
 8006242:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006244:	2309      	movs	r3, #9
 8006246:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006248:	463b      	mov	r3, r7
 800624a:	4619      	mov	r1, r3
 800624c:	4828      	ldr	r0, [pc, #160]	; (80062f0 <MX_ADC2_Init+0x204>)
 800624e:	f003 ffc9 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006258:	f000 fda2 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800625c:	2305      	movs	r3, #5
 800625e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006260:	230a      	movs	r3, #10
 8006262:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006264:	463b      	mov	r3, r7
 8006266:	4619      	mov	r1, r3
 8006268:	4821      	ldr	r0, [pc, #132]	; (80062f0 <MX_ADC2_Init+0x204>)
 800626a:	f003 ffbb 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006274:	f000 fd94 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006278:	2306      	movs	r3, #6
 800627a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800627c:	230b      	movs	r3, #11
 800627e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006280:	463b      	mov	r3, r7
 8006282:	4619      	mov	r1, r3
 8006284:	481a      	ldr	r0, [pc, #104]	; (80062f0 <MX_ADC2_Init+0x204>)
 8006286:	f003 ffad 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006290:	f000 fd86 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006294:	2307      	movs	r3, #7
 8006296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006298:	230c      	movs	r3, #12
 800629a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800629c:	463b      	mov	r3, r7
 800629e:	4619      	mov	r1, r3
 80062a0:	4813      	ldr	r0, [pc, #76]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062a2:	f003 ff9f 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80062ac:	f000 fd78 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80062b0:	2308      	movs	r3, #8
 80062b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80062b4:	230d      	movs	r3, #13
 80062b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b8:	463b      	mov	r3, r7
 80062ba:	4619      	mov	r1, r3
 80062bc:	480c      	ldr	r0, [pc, #48]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062be:	f003 ff91 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d001      	beq.n	80062cc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80062c8:	f000 fd6a 	bl	8006da0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80062cc:	2309      	movs	r3, #9
 80062ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80062d0:	230e      	movs	r3, #14
 80062d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062d4:	463b      	mov	r3, r7
 80062d6:	4619      	mov	r1, r3
 80062d8:	4805      	ldr	r0, [pc, #20]	; (80062f0 <MX_ADC2_Init+0x204>)
 80062da:	f003 ff83 	bl	800a1e4 <HAL_ADC_ConfigChannel>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d001      	beq.n	80062e8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80062e4:	f000 fd5c 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80062e8:	bf00      	nop
 80062ea:	3710      	adds	r7, #16
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20047758 	.word	0x20047758
 80062f4:	40012100 	.word	0x40012100
 80062f8:	0f000001 	.word	0x0f000001

080062fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006300:	4b12      	ldr	r3, [pc, #72]	; (800634c <MX_I2C1_Init+0x50>)
 8006302:	4a13      	ldr	r2, [pc, #76]	; (8006350 <MX_I2C1_Init+0x54>)
 8006304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <MX_I2C1_Init+0x50>)
 8006308:	4a12      	ldr	r2, [pc, #72]	; (8006354 <MX_I2C1_Init+0x58>)
 800630a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800630c:	4b0f      	ldr	r3, [pc, #60]	; (800634c <MX_I2C1_Init+0x50>)
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006312:	4b0e      	ldr	r3, [pc, #56]	; (800634c <MX_I2C1_Init+0x50>)
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006318:	4b0c      	ldr	r3, [pc, #48]	; (800634c <MX_I2C1_Init+0x50>)
 800631a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800631e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006320:	4b0a      	ldr	r3, [pc, #40]	; (800634c <MX_I2C1_Init+0x50>)
 8006322:	2200      	movs	r2, #0
 8006324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <MX_I2C1_Init+0x50>)
 8006328:	2200      	movs	r2, #0
 800632a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800632c:	4b07      	ldr	r3, [pc, #28]	; (800634c <MX_I2C1_Init+0x50>)
 800632e:	2200      	movs	r2, #0
 8006330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006332:	4b06      	ldr	r3, [pc, #24]	; (800634c <MX_I2C1_Init+0x50>)
 8006334:	2280      	movs	r2, #128	; 0x80
 8006336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006338:	4804      	ldr	r0, [pc, #16]	; (800634c <MX_I2C1_Init+0x50>)
 800633a:	f005 f8a5 	bl	800b488 <HAL_I2C_Init>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d001      	beq.n	8006348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006344:	f000 fd2c 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006348:	bf00      	nop
 800634a:	bd80      	pop	{r7, pc}
 800634c:	200477a0 	.word	0x200477a0
 8006350:	40005400 	.word	0x40005400
 8006354:	000186a0 	.word	0x000186a0

08006358 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800635c:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <MX_I2C2_Init+0x50>)
 800635e:	4a13      	ldr	r2, [pc, #76]	; (80063ac <MX_I2C2_Init+0x54>)
 8006360:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006362:	4b11      	ldr	r3, [pc, #68]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006364:	4a12      	ldr	r2, [pc, #72]	; (80063b0 <MX_I2C2_Init+0x58>)
 8006366:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006368:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <MX_I2C2_Init+0x50>)
 800636a:	2200      	movs	r2, #0
 800636c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800636e:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006370:	2200      	movs	r2, #0
 8006372:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006376:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800637a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <MX_I2C2_Init+0x50>)
 800637e:	2200      	movs	r2, #0
 8006380:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006382:	4b09      	ldr	r3, [pc, #36]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006384:	2200      	movs	r2, #0
 8006386:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006388:	4b07      	ldr	r3, [pc, #28]	; (80063a8 <MX_I2C2_Init+0x50>)
 800638a:	2200      	movs	r2, #0
 800638c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800638e:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006390:	2280      	movs	r2, #128	; 0x80
 8006392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006394:	4804      	ldr	r0, [pc, #16]	; (80063a8 <MX_I2C2_Init+0x50>)
 8006396:	f005 f877 	bl	800b488 <HAL_I2C_Init>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80063a0:	f000 fcfe 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80063a4:	bf00      	nop
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	20047834 	.word	0x20047834
 80063ac:	40005800 	.word	0x40005800
 80063b0:	000186a0 	.word	0x000186a0

080063b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063ba:	4a0d      	ldr	r2, [pc, #52]	; (80063f0 <MX_SDIO_SD_Init+0x3c>)
 80063bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80063be:	4b0b      	ldr	r3, [pc, #44]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063c0:	2200      	movs	r2, #0
 80063c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80063c4:	4b09      	ldr	r3, [pc, #36]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80063ca:	4b08      	ldr	r3, [pc, #32]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80063d6:	4b05      	ldr	r3, [pc, #20]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063d8:	2200      	movs	r2, #0
 80063da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 4;
 80063dc:	4b03      	ldr	r3, [pc, #12]	; (80063ec <MX_SDIO_SD_Init+0x38>)
 80063de:	2204      	movs	r2, #4
 80063e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80063e2:	bf00      	nop
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	20047a34 	.word	0x20047a34
 80063f0:	40012c00 	.word	0x40012c00

080063f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80063f8:	4b17      	ldr	r3, [pc, #92]	; (8006458 <MX_SPI2_Init+0x64>)
 80063fa:	4a18      	ldr	r2, [pc, #96]	; (800645c <MX_SPI2_Init+0x68>)
 80063fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <MX_SPI2_Init+0x64>)
 8006400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006404:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006406:	4b14      	ldr	r3, [pc, #80]	; (8006458 <MX_SPI2_Init+0x64>)
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800640c:	4b12      	ldr	r3, [pc, #72]	; (8006458 <MX_SPI2_Init+0x64>)
 800640e:	2200      	movs	r2, #0
 8006410:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006412:	4b11      	ldr	r3, [pc, #68]	; (8006458 <MX_SPI2_Init+0x64>)
 8006414:	2202      	movs	r2, #2
 8006416:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <MX_SPI2_Init+0x64>)
 800641a:	2201      	movs	r2, #1
 800641c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <MX_SPI2_Init+0x64>)
 8006420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006424:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8006426:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <MX_SPI2_Init+0x64>)
 8006428:	2220      	movs	r2, #32
 800642a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800642c:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <MX_SPI2_Init+0x64>)
 800642e:	2200      	movs	r2, #0
 8006430:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006432:	4b09      	ldr	r3, [pc, #36]	; (8006458 <MX_SPI2_Init+0x64>)
 8006434:	2200      	movs	r2, #0
 8006436:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006438:	4b07      	ldr	r3, [pc, #28]	; (8006458 <MX_SPI2_Init+0x64>)
 800643a:	2200      	movs	r2, #0
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800643e:	4b06      	ldr	r3, [pc, #24]	; (8006458 <MX_SPI2_Init+0x64>)
 8006440:	220a      	movs	r2, #10
 8006442:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006444:	4804      	ldr	r0, [pc, #16]	; (8006458 <MX_SPI2_Init+0x64>)
 8006446:	f008 f951 	bl	800e6ec <HAL_SPI_Init>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006450:	f000 fca6 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20047680 	.word	0x20047680
 800645c:	40003800 	.word	0x40003800

08006460 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b09a      	sub	sp, #104	; 0x68
 8006464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006466:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800646a:	2224      	movs	r2, #36	; 0x24
 800646c:	2100      	movs	r1, #0
 800646e:	4618      	mov	r0, r3
 8006470:	f00e fa78 	bl	8014964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006474:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800647e:	f107 0320 	add.w	r3, r7, #32
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	605a      	str	r2, [r3, #4]
 8006488:	609a      	str	r2, [r3, #8]
 800648a:	60da      	str	r2, [r3, #12]
 800648c:	611a      	str	r2, [r3, #16]
 800648e:	615a      	str	r2, [r3, #20]
 8006490:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006492:	463b      	mov	r3, r7
 8006494:	2220      	movs	r2, #32
 8006496:	2100      	movs	r1, #0
 8006498:	4618      	mov	r0, r3
 800649a:	f00e fa63 	bl	8014964 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800649e:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064a0:	4a42      	ldr	r2, [pc, #264]	; (80065ac <MX_TIM1_Init+0x14c>)
 80064a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80064a4:	4b40      	ldr	r3, [pc, #256]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064aa:	4b3f      	ldr	r3, [pc, #252]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80064b0:	4b3d      	ldr	r3, [pc, #244]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064b8:	4b3b      	ldr	r3, [pc, #236]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80064be:	4b3a      	ldr	r3, [pc, #232]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064c4:	4b38      	ldr	r3, [pc, #224]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80064ca:	4837      	ldr	r0, [pc, #220]	; (80065a8 <MX_TIM1_Init+0x148>)
 80064cc:	f008 feb1 	bl	800f232 <HAL_TIM_PWM_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80064d6:	f000 fc63 	bl	8006da0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80064da:	2303      	movs	r3, #3
 80064dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80064de:	2300      	movs	r3, #0
 80064e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80064e2:	2301      	movs	r3, #1
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80064e6:	2300      	movs	r3, #0
 80064e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80064ea:	2300      	movs	r3, #0
 80064ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80064ee:	2300      	movs	r3, #0
 80064f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80064f2:	2301      	movs	r3, #1
 80064f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80064f6:	2300      	movs	r3, #0
 80064f8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80064fa:	2300      	movs	r3, #0
 80064fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80064fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006502:	4619      	mov	r1, r3
 8006504:	4828      	ldr	r0, [pc, #160]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006506:	f008 fefd 	bl	800f304 <HAL_TIM_Encoder_Init>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d001      	beq.n	8006514 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006510:	f000 fc46 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006518:	2300      	movs	r3, #0
 800651a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800651c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006520:	4619      	mov	r1, r3
 8006522:	4821      	ldr	r0, [pc, #132]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006524:	f009 fc24 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800652e:	f000 fc37 	bl	8006da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006532:	2360      	movs	r3, #96	; 0x60
 8006534:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800653a:	2300      	movs	r3, #0
 800653c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800653e:	2300      	movs	r3, #0
 8006540:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006542:	2300      	movs	r3, #0
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006546:	2300      	movs	r3, #0
 8006548:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800654a:	2300      	movs	r3, #0
 800654c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800654e:	f107 0320 	add.w	r3, r7, #32
 8006552:	2208      	movs	r2, #8
 8006554:	4619      	mov	r1, r3
 8006556:	4814      	ldr	r0, [pc, #80]	; (80065a8 <MX_TIM1_Init+0x148>)
 8006558:	f009 f8a6 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 800655c:	4603      	mov	r3, r0
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006562:	f000 fc1d 	bl	8006da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006566:	2300      	movs	r3, #0
 8006568:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800656a:	2300      	movs	r3, #0
 800656c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800656e:	2300      	movs	r3, #0
 8006570:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006576:	2300      	movs	r3, #0
 8006578:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800657a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800657e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006580:	2300      	movs	r3, #0
 8006582:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006584:	463b      	mov	r3, r7
 8006586:	4619      	mov	r1, r3
 8006588:	4807      	ldr	r0, [pc, #28]	; (80065a8 <MX_TIM1_Init+0x148>)
 800658a:	f009 fc6d 	bl	800fe68 <HAL_TIMEx_ConfigBreakDeadTime>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d001      	beq.n	8006598 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006594:	f000 fc04 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006598:	4803      	ldr	r0, [pc, #12]	; (80065a8 <MX_TIM1_Init+0x148>)
 800659a:	f000 fff1 	bl	8007580 <HAL_TIM_MspPostInit>

}
 800659e:	bf00      	nop
 80065a0:	3768      	adds	r7, #104	; 0x68
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	200479f4 	.word	0x200479f4
 80065ac:	40010000 	.word	0x40010000

080065b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08a      	sub	sp, #40	; 0x28
 80065b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065b6:	f107 0320 	add.w	r3, r7, #32
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065c0:	1d3b      	adds	r3, r7, #4
 80065c2:	2200      	movs	r2, #0
 80065c4:	601a      	str	r2, [r3, #0]
 80065c6:	605a      	str	r2, [r3, #4]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	60da      	str	r2, [r3, #12]
 80065cc:	611a      	str	r2, [r3, #16]
 80065ce:	615a      	str	r2, [r3, #20]
 80065d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <MX_TIM3_Init+0xc4>)
 80065d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80065d8:	4b25      	ldr	r3, [pc, #148]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065da:	2201      	movs	r2, #1
 80065dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065de:	4b24      	ldr	r3, [pc, #144]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80065e4:	4b22      	ldr	r3, [pc, #136]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065e6:	f241 1293 	movw	r2, #4499	; 0x1193
 80065ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065ec:	4b20      	ldr	r3, [pc, #128]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065f2:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80065f8:	481d      	ldr	r0, [pc, #116]	; (8006670 <MX_TIM3_Init+0xc0>)
 80065fa:	f008 fe1a 	bl	800f232 <HAL_TIM_PWM_Init>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006604:	f000 fbcc 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006608:	2300      	movs	r3, #0
 800660a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800660c:	2300      	movs	r3, #0
 800660e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006610:	f107 0320 	add.w	r3, r7, #32
 8006614:	4619      	mov	r1, r3
 8006616:	4816      	ldr	r0, [pc, #88]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006618:	f009 fbaa 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006622:	f000 fbbd 	bl	8006da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006626:	2360      	movs	r3, #96	; 0x60
 8006628:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800662e:	2300      	movs	r3, #0
 8006630:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006632:	2300      	movs	r3, #0
 8006634:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006636:	1d3b      	adds	r3, r7, #4
 8006638:	2200      	movs	r2, #0
 800663a:	4619      	mov	r1, r3
 800663c:	480c      	ldr	r0, [pc, #48]	; (8006670 <MX_TIM3_Init+0xc0>)
 800663e:	f009 f833 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006648:	f000 fbaa 	bl	8006da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800664c:	1d3b      	adds	r3, r7, #4
 800664e:	2204      	movs	r2, #4
 8006650:	4619      	mov	r1, r3
 8006652:	4807      	ldr	r0, [pc, #28]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006654:	f009 f828 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d001      	beq.n	8006662 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800665e:	f000 fb9f 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006662:	4803      	ldr	r0, [pc, #12]	; (8006670 <MX_TIM3_Init+0xc0>)
 8006664:	f000 ff8c 	bl	8007580 <HAL_TIM_MspPostInit>

}
 8006668:	bf00      	nop
 800666a:	3728      	adds	r7, #40	; 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	2004788c 	.word	0x2004788c
 8006674:	40000400 	.word	0x40000400

08006678 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800667e:	f107 0320 	add.w	r3, r7, #32
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006688:	1d3b      	adds	r3, r7, #4
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
 800668e:	605a      	str	r2, [r3, #4]
 8006690:	609a      	str	r2, [r3, #8]
 8006692:	60da      	str	r2, [r3, #12]
 8006694:	611a      	str	r2, [r3, #16]
 8006696:	615a      	str	r2, [r3, #20]
 8006698:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800669a:	4b27      	ldr	r3, [pc, #156]	; (8006738 <MX_TIM4_Init+0xc0>)
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <MX_TIM4_Init+0xc4>)
 800669e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80066a0:	4b25      	ldr	r3, [pc, #148]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066a2:	2200      	movs	r2, #0
 80066a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80066ac:	4b22      	ldr	r3, [pc, #136]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066ae:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80066b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066b4:	4b20      	ldr	r3, [pc, #128]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80066c0:	481d      	ldr	r0, [pc, #116]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066c2:	f008 fdb6 	bl	800f232 <HAL_TIM_PWM_Init>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80066cc:	f000 fb68 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066d0:	2300      	movs	r3, #0
 80066d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066d4:	2300      	movs	r3, #0
 80066d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80066d8:	f107 0320 	add.w	r3, r7, #32
 80066dc:	4619      	mov	r1, r3
 80066de:	4816      	ldr	r0, [pc, #88]	; (8006738 <MX_TIM4_Init+0xc0>)
 80066e0:	f009 fb46 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80066ea:	f000 fb59 	bl	8006da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066ee:	2360      	movs	r3, #96	; 0x60
 80066f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80066f2:	2300      	movs	r3, #0
 80066f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80066fe:	1d3b      	adds	r3, r7, #4
 8006700:	2208      	movs	r2, #8
 8006702:	4619      	mov	r1, r3
 8006704:	480c      	ldr	r0, [pc, #48]	; (8006738 <MX_TIM4_Init+0xc0>)
 8006706:	f008 ffcf 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006710:	f000 fb46 	bl	8006da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006714:	1d3b      	adds	r3, r7, #4
 8006716:	220c      	movs	r2, #12
 8006718:	4619      	mov	r1, r3
 800671a:	4807      	ldr	r0, [pc, #28]	; (8006738 <MX_TIM4_Init+0xc0>)
 800671c:	f008 ffc4 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006726:	f000 fb3b 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800672a:	4803      	ldr	r0, [pc, #12]	; (8006738 <MX_TIM4_Init+0xc0>)
 800672c:	f000 ff28 	bl	8007580 <HAL_TIM_MspPostInit>

}
 8006730:	bf00      	nop
 8006732:	3728      	adds	r7, #40	; 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	20047718 	.word	0x20047718
 800673c:	40000800 	.word	0x40000800

08006740 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006746:	463b      	mov	r3, r7
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006750:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <MX_TIM6_Init+0x68>)
 8006752:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006754:	4b13      	ldr	r3, [pc, #76]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006756:	2259      	movs	r2, #89	; 0x59
 8006758:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800675a:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <MX_TIM6_Init+0x64>)
 800675c:	2200      	movs	r2, #0
 800675e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006760:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006762:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006766:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006768:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <MX_TIM6_Init+0x64>)
 800676a:	2280      	movs	r2, #128	; 0x80
 800676c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800676e:	480d      	ldr	r0, [pc, #52]	; (80067a4 <MX_TIM6_Init+0x64>)
 8006770:	f008 fd10 	bl	800f194 <HAL_TIM_Base_Init>
 8006774:	4603      	mov	r3, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800677a:	f000 fb11 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800677e:	2300      	movs	r3, #0
 8006780:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006786:	463b      	mov	r3, r7
 8006788:	4619      	mov	r1, r3
 800678a:	4806      	ldr	r0, [pc, #24]	; (80067a4 <MX_TIM6_Init+0x64>)
 800678c:	f009 faf0 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006796:	f000 fb03 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	200479b4 	.word	0x200479b4
 80067a8:	40001000 	.word	0x40001000

080067ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067b2:	463b      	mov	r3, r7
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <MX_TIM7_Init+0x60>)
 80067bc:	4a14      	ldr	r2, [pc, #80]	; (8006810 <MX_TIM7_Init+0x64>)
 80067be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <MX_TIM7_Init+0x60>)
 80067c2:	22b3      	movs	r2, #179	; 0xb3
 80067c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067c6:	4b11      	ldr	r3, [pc, #68]	; (800680c <MX_TIM7_Init+0x60>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <MX_TIM7_Init+0x60>)
 80067ce:	2231      	movs	r2, #49	; 0x31
 80067d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80067d2:	4b0e      	ldr	r3, [pc, #56]	; (800680c <MX_TIM7_Init+0x60>)
 80067d4:	2280      	movs	r2, #128	; 0x80
 80067d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80067d8:	480c      	ldr	r0, [pc, #48]	; (800680c <MX_TIM7_Init+0x60>)
 80067da:	f008 fcdb 	bl	800f194 <HAL_TIM_Base_Init>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80067e4:	f000 fadc 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e8:	2300      	movs	r3, #0
 80067ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80067f0:	463b      	mov	r3, r7
 80067f2:	4619      	mov	r1, r3
 80067f4:	4805      	ldr	r0, [pc, #20]	; (800680c <MX_TIM7_Init+0x60>)
 80067f6:	f009 fabb 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006800:	f000 face 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006804:	bf00      	nop
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	20047b58 	.word	0x20047b58
 8006810:	40001400 	.word	0x40001400

08006814 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b08c      	sub	sp, #48	; 0x30
 8006818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800681a:	f107 030c 	add.w	r3, r7, #12
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f00e f89e 	bl	8014964 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006828:	1d3b      	adds	r3, r7, #4
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006830:	4b22      	ldr	r3, [pc, #136]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006832:	4a23      	ldr	r2, [pc, #140]	; (80068c0 <MX_TIM8_Init+0xac>)
 8006834:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006836:	4b21      	ldr	r3, [pc, #132]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006838:	2200      	movs	r2, #0
 800683a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <MX_TIM8_Init+0xa8>)
 800683e:	2210      	movs	r2, #16
 8006840:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006842:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006848:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684a:	4b1c      	ldr	r3, [pc, #112]	; (80068bc <MX_TIM8_Init+0xa8>)
 800684c:	2200      	movs	r2, #0
 800684e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006850:	4b1a      	ldr	r3, [pc, #104]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006852:	2200      	movs	r2, #0
 8006854:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006858:	2200      	movs	r2, #0
 800685a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800685c:	2303      	movs	r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006860:	2300      	movs	r3, #0
 8006862:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006868:	2300      	movs	r3, #0
 800686a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006870:	2300      	movs	r3, #0
 8006872:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006874:	2301      	movs	r3, #1
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006878:	2300      	movs	r3, #0
 800687a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006880:	f107 030c 	add.w	r3, r7, #12
 8006884:	4619      	mov	r1, r3
 8006886:	480d      	ldr	r0, [pc, #52]	; (80068bc <MX_TIM8_Init+0xa8>)
 8006888:	f008 fd3c 	bl	800f304 <HAL_TIM_Encoder_Init>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d001      	beq.n	8006896 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006892:	f000 fa85 	bl	8006da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006896:	2300      	movs	r3, #0
 8006898:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800689e:	1d3b      	adds	r3, r7, #4
 80068a0:	4619      	mov	r1, r3
 80068a2:	4806      	ldr	r0, [pc, #24]	; (80068bc <MX_TIM8_Init+0xa8>)
 80068a4:	f009 fa64 	bl	800fd70 <HAL_TIMEx_MasterConfigSynchronization>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80068ae:	f000 fa77 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80068b2:	bf00      	nop
 80068b4:	3730      	adds	r7, #48	; 0x30
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	200476d8 	.word	0x200476d8
 80068c0:	40010400 	.word	0x40010400

080068c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068ca:	1d3b      	adds	r3, r7, #4
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	611a      	str	r2, [r3, #16]
 80068d8:	615a      	str	r2, [r3, #20]
 80068da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80068dc:	4b1e      	ldr	r3, [pc, #120]	; (8006958 <MX_TIM10_Init+0x94>)
 80068de:	4a1f      	ldr	r2, [pc, #124]	; (800695c <MX_TIM10_Init+0x98>)
 80068e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <MX_TIM10_Init+0x94>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068e8:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <MX_TIM10_Init+0x94>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80068ee:	4b1a      	ldr	r3, [pc, #104]	; (8006958 <MX_TIM10_Init+0x94>)
 80068f0:	f242 3227 	movw	r2, #8999	; 0x2327
 80068f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068f6:	4b18      	ldr	r3, [pc, #96]	; (8006958 <MX_TIM10_Init+0x94>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068fc:	4b16      	ldr	r3, [pc, #88]	; (8006958 <MX_TIM10_Init+0x94>)
 80068fe:	2200      	movs	r2, #0
 8006900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006902:	4815      	ldr	r0, [pc, #84]	; (8006958 <MX_TIM10_Init+0x94>)
 8006904:	f008 fc46 	bl	800f194 <HAL_TIM_Base_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800690e:	f000 fa47 	bl	8006da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006912:	4811      	ldr	r0, [pc, #68]	; (8006958 <MX_TIM10_Init+0x94>)
 8006914:	f008 fc8d 	bl	800f232 <HAL_TIM_PWM_Init>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800691e:	f000 fa3f 	bl	8006da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006922:	2360      	movs	r3, #96	; 0x60
 8006924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800692a:	2300      	movs	r3, #0
 800692c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006932:	1d3b      	adds	r3, r7, #4
 8006934:	2200      	movs	r2, #0
 8006936:	4619      	mov	r1, r3
 8006938:	4807      	ldr	r0, [pc, #28]	; (8006958 <MX_TIM10_Init+0x94>)
 800693a:	f008 feb5 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006944:	f000 fa2c 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006948:	4803      	ldr	r0, [pc, #12]	; (8006958 <MX_TIM10_Init+0x94>)
 800694a:	f000 fe19 	bl	8007580 <HAL_TIM_MspPostInit>

}
 800694e:	bf00      	nop
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200477f4 	.word	0x200477f4
 800695c:	40014400 	.word	0x40014400

08006960 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	605a      	str	r2, [r3, #4]
 800696e:	609a      	str	r2, [r3, #8]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	611a      	str	r2, [r3, #16]
 8006974:	615a      	str	r2, [r3, #20]
 8006976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006978:	4b1e      	ldr	r3, [pc, #120]	; (80069f4 <MX_TIM11_Init+0x94>)
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <MX_TIM11_Init+0x98>)
 800697c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800697e:	4b1d      	ldr	r3, [pc, #116]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006980:	2201      	movs	r2, #1
 8006982:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006984:	4b1b      	ldr	r3, [pc, #108]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006986:	2200      	movs	r2, #0
 8006988:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <MX_TIM11_Init+0x94>)
 800698c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006990:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006992:	4b18      	ldr	r3, [pc, #96]	; (80069f4 <MX_TIM11_Init+0x94>)
 8006994:	2200      	movs	r2, #0
 8006996:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006998:	4b16      	ldr	r3, [pc, #88]	; (80069f4 <MX_TIM11_Init+0x94>)
 800699a:	2200      	movs	r2, #0
 800699c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800699e:	4815      	ldr	r0, [pc, #84]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069a0:	f008 fbf8 	bl	800f194 <HAL_TIM_Base_Init>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80069aa:	f000 f9f9 	bl	8006da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80069ae:	4811      	ldr	r0, [pc, #68]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069b0:	f008 fc3f 	bl	800f232 <HAL_TIM_PWM_Init>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80069ba:	f000 f9f1 	bl	8006da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80069be:	2360      	movs	r3, #96	; 0x60
 80069c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80069ca:	2300      	movs	r3, #0
 80069cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80069ce:	1d3b      	adds	r3, r7, #4
 80069d0:	2200      	movs	r2, #0
 80069d2:	4619      	mov	r1, r3
 80069d4:	4807      	ldr	r0, [pc, #28]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069d6:	f008 fe67 	bl	800f6a8 <HAL_TIM_PWM_ConfigChannel>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80069e0:	f000 f9de 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80069e4:	4803      	ldr	r0, [pc, #12]	; (80069f4 <MX_TIM11_Init+0x94>)
 80069e6:	f000 fdcb 	bl	8007580 <HAL_TIM_MspPostInit>

}
 80069ea:	bf00      	nop
 80069ec:	3720      	adds	r7, #32
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20047914 	.word	0x20047914
 80069f8:	40014800 	.word	0x40014800

080069fc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006a00:	4b0e      	ldr	r3, [pc, #56]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a02:	4a0f      	ldr	r2, [pc, #60]	; (8006a40 <MX_TIM13_Init+0x44>)
 8006a04:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006a06:	4b0d      	ldr	r3, [pc, #52]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a08:	2259      	movs	r2, #89	; 0x59
 8006a0a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a14:	f242 720f 	movw	r2, #9999	; 0x270f
 8006a18:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a1a:	4b08      	ldr	r3, [pc, #32]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a22:	2280      	movs	r2, #128	; 0x80
 8006a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006a26:	4805      	ldr	r0, [pc, #20]	; (8006a3c <MX_TIM13_Init+0x40>)
 8006a28:	f008 fbb4 	bl	800f194 <HAL_TIM_Base_Init>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006a32:	f000 f9b5 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006a36:	bf00      	nop
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200478d4 	.word	0x200478d4
 8006a40:	40001c00 	.word	0x40001c00

08006a44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a4a:	4a12      	ldr	r2, [pc, #72]	; (8006a94 <MX_USART2_UART_Init+0x50>)
 8006a4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006a54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006a56:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a58:	2200      	movs	r2, #0
 8006a5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006a62:	4b0b      	ldr	r3, [pc, #44]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a6a:	220c      	movs	r2, #12
 8006a6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006a6e:	4b08      	ldr	r3, [pc, #32]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006a7a:	4805      	ldr	r0, [pc, #20]	; (8006a90 <MX_USART2_UART_Init+0x4c>)
 8006a7c:	f009 fa5a 	bl	800ff34 <HAL_UART_Init>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006a86:	f000 f98b 	bl	8006da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20047ab8 	.word	0x20047ab8
 8006a94:	40004400 	.word	0x40004400

08006a98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	607b      	str	r3, [r7, #4]
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa6:	4a13      	ldr	r2, [pc, #76]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006aa8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006aac:	6313      	str	r3, [r2, #48]	; 0x30
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <MX_DMA_Init+0x5c>)
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ab6:	607b      	str	r3, [r7, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006aba:	2200      	movs	r2, #0
 8006abc:	2100      	movs	r1, #0
 8006abe:	203a      	movs	r0, #58	; 0x3a
 8006ac0:	f003 ff1b 	bl	800a8fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006ac4:	203a      	movs	r0, #58	; 0x3a
 8006ac6:	f003 ff34 	bl	800a932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	2100      	movs	r1, #0
 8006ace:	203b      	movs	r0, #59	; 0x3b
 8006ad0:	f003 ff13 	bl	800a8fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006ad4:	203b      	movs	r0, #59	; 0x3b
 8006ad6:	f003 ff2c 	bl	800a932 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	2045      	movs	r0, #69	; 0x45
 8006ae0:	f003 ff0b 	bl	800a8fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006ae4:	2045      	movs	r0, #69	; 0x45
 8006ae6:	f003 ff24 	bl	800a932 <HAL_NVIC_EnableIRQ>

}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	40023800 	.word	0x40023800

08006af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	; 0x30
 8006afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006afe:	f107 031c 	add.w	r3, r7, #28
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	605a      	str	r2, [r3, #4]
 8006b08:	609a      	str	r2, [r3, #8]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61bb      	str	r3, [r7, #24]
 8006b12:	4b9c      	ldr	r3, [pc, #624]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	4a9b      	ldr	r2, [pc, #620]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b18:	f043 0310 	orr.w	r3, r3, #16
 8006b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1e:	4b99      	ldr	r3, [pc, #612]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	4b95      	ldr	r3, [pc, #596]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	4a94      	ldr	r2, [pc, #592]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b38:	6313      	str	r3, [r2, #48]	; 0x30
 8006b3a:	4b92      	ldr	r3, [pc, #584]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b46:	2300      	movs	r3, #0
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	4b8e      	ldr	r3, [pc, #568]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	4a8d      	ldr	r2, [pc, #564]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b50:	f043 0304 	orr.w	r3, r3, #4
 8006b54:	6313      	str	r3, [r2, #48]	; 0x30
 8006b56:	4b8b      	ldr	r3, [pc, #556]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	613b      	str	r3, [r7, #16]
 8006b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b62:	2300      	movs	r3, #0
 8006b64:	60fb      	str	r3, [r7, #12]
 8006b66:	4b87      	ldr	r3, [pc, #540]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	4a86      	ldr	r2, [pc, #536]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	6313      	str	r3, [r2, #48]	; 0x30
 8006b72:	4b84      	ldr	r3, [pc, #528]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	60fb      	str	r3, [r7, #12]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	4b80      	ldr	r3, [pc, #512]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	4a7f      	ldr	r2, [pc, #508]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b8e:	4b7d      	ldr	r3, [pc, #500]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	60bb      	str	r3, [r7, #8]
 8006b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	607b      	str	r3, [r7, #4]
 8006b9e:	4b79      	ldr	r3, [pc, #484]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4a78      	ldr	r2, [pc, #480]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006ba4:	f043 0308 	orr.w	r3, r3, #8
 8006ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8006baa:	4b76      	ldr	r3, [pc, #472]	; (8006d84 <MX_GPIO_Init+0x28c>)
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f003 0308 	and.w	r3, r3, #8
 8006bb2:	607b      	str	r3, [r7, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bbc:	4872      	ldr	r0, [pc, #456]	; (8006d88 <MX_GPIO_Init+0x290>)
 8006bbe:	f004 fc31 	bl	800b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006bc8:	4870      	ldr	r0, [pc, #448]	; (8006d8c <MX_GPIO_Init+0x294>)
 8006bca:	f004 fc2b 	bl	800b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bd4:	486e      	ldr	r0, [pc, #440]	; (8006d90 <MX_GPIO_Init+0x298>)
 8006bd6:	f004 fc25 	bl	800b424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006be0:	486c      	ldr	r0, [pc, #432]	; (8006d94 <MX_GPIO_Init+0x29c>)
 8006be2:	f004 fc1f 	bl	800b424 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006be6:	2304      	movs	r3, #4
 8006be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006bea:	4b6b      	ldr	r3, [pc, #428]	; (8006d98 <MX_GPIO_Init+0x2a0>)
 8006bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bf2:	f107 031c 	add.w	r3, r7, #28
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4863      	ldr	r0, [pc, #396]	; (8006d88 <MX_GPIO_Init+0x290>)
 8006bfa:	f004 fa51 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006bfe:	230f      	movs	r3, #15
 8006c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c02:	2303      	movs	r3, #3
 8006c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c0a:	f107 031c 	add.w	r3, r7, #28
 8006c0e:	4619      	mov	r1, r3
 8006c10:	4862      	ldr	r0, [pc, #392]	; (8006d9c <MX_GPIO_Init+0x2a4>)
 8006c12:	f004 fa45 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006c16:	23e1      	movs	r3, #225	; 0xe1
 8006c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c22:	f107 031c 	add.w	r3, r7, #28
 8006c26:	4619      	mov	r1, r3
 8006c28:	485a      	ldr	r0, [pc, #360]	; (8006d94 <MX_GPIO_Init+0x29c>)
 8006c2a:	f004 fa39 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006c2e:	2303      	movs	r3, #3
 8006c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c32:	2303      	movs	r3, #3
 8006c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c36:	2300      	movs	r3, #0
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c3a:	f107 031c 	add.w	r3, r7, #28
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4852      	ldr	r0, [pc, #328]	; (8006d8c <MX_GPIO_Init+0x294>)
 8006c42:	f004 fa2d 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006c46:	2304      	movs	r3, #4
 8006c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c52:	f107 031c 	add.w	r3, r7, #28
 8006c56:	4619      	mov	r1, r3
 8006c58:	484c      	ldr	r0, [pc, #304]	; (8006d8c <MX_GPIO_Init+0x294>)
 8006c5a:	f004 fa21 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006c5e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c64:	2300      	movs	r3, #0
 8006c66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c6c:	f107 031c 	add.w	r3, r7, #28
 8006c70:	4619      	mov	r1, r3
 8006c72:	4845      	ldr	r0, [pc, #276]	; (8006d88 <MX_GPIO_Init+0x290>)
 8006c74:	f004 fa14 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006c78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c86:	2300      	movs	r3, #0
 8006c88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c8a:	f107 031c 	add.w	r3, r7, #28
 8006c8e:	4619      	mov	r1, r3
 8006c90:	483d      	ldr	r0, [pc, #244]	; (8006d88 <MX_GPIO_Init+0x290>)
 8006c92:	f004 fa05 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ca8:	f107 031c 	add.w	r3, r7, #28
 8006cac:	4619      	mov	r1, r3
 8006cae:	4837      	ldr	r0, [pc, #220]	; (8006d8c <MX_GPIO_Init+0x294>)
 8006cb0:	f004 f9f6 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006cb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006cba:	4b37      	ldr	r3, [pc, #220]	; (8006d98 <MX_GPIO_Init+0x2a0>)
 8006cbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cc2:	f107 031c 	add.w	r3, r7, #28
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4831      	ldr	r0, [pc, #196]	; (8006d90 <MX_GPIO_Init+0x298>)
 8006cca:	f004 f9e9 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006cce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ce0:	f107 031c 	add.w	r3, r7, #28
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	482a      	ldr	r0, [pc, #168]	; (8006d90 <MX_GPIO_Init+0x298>)
 8006ce8:	f004 f9da 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cfe:	f107 031c 	add.w	r3, r7, #28
 8006d02:	4619      	mov	r1, r3
 8006d04:	4822      	ldr	r0, [pc, #136]	; (8006d90 <MX_GPIO_Init+0x298>)
 8006d06:	f004 f9cb 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006d0a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006d0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d10:	2301      	movs	r3, #1
 8006d12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d1c:	f107 031c 	add.w	r3, r7, #28
 8006d20:	4619      	mov	r1, r3
 8006d22:	481c      	ldr	r0, [pc, #112]	; (8006d94 <MX_GPIO_Init+0x29c>)
 8006d24:	f004 f9bc 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d36:	f107 031c 	add.w	r3, r7, #28
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4815      	ldr	r0, [pc, #84]	; (8006d94 <MX_GPIO_Init+0x29c>)
 8006d3e:	f004 f9af 	bl	800b0a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006d42:	239b      	movs	r3, #155	; 0x9b
 8006d44:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d46:	2300      	movs	r3, #0
 8006d48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d4e:	f107 031c 	add.w	r3, r7, #28
 8006d52:	4619      	mov	r1, r3
 8006d54:	480e      	ldr	r0, [pc, #56]	; (8006d90 <MX_GPIO_Init+0x298>)
 8006d56:	f004 f9a3 	bl	800b0a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2008      	movs	r0, #8
 8006d60:	f003 fdcb 	bl	800a8fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006d64:	2008      	movs	r0, #8
 8006d66:	f003 fde4 	bl	800a932 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	2017      	movs	r0, #23
 8006d70:	f003 fdc3 	bl	800a8fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d74:	2017      	movs	r0, #23
 8006d76:	f003 fddc 	bl	800a932 <HAL_NVIC_EnableIRQ>

}
 8006d7a:	bf00      	nop
 8006d7c:	3730      	adds	r7, #48	; 0x30
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40023800 	.word	0x40023800
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	40020400 	.word	0x40020400
 8006d90:	40020c00 	.word	0x40020c00
 8006d94:	40020000 	.word	0x40020000
 8006d98:	10310000 	.word	0x10310000
 8006d9c:	40020800 	.word	0x40020800

08006da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006da4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006da6:	e7fe      	b.n	8006da6 <Error_Handler+0x6>

08006da8 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006dac:	bf00      	nop
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_MspInit+0x4c>)
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	4a0f      	ldr	r2, [pc, #60]	; (8006e04 <HAL_MspInit+0x4c>)
 8006dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8006dce:	4b0d      	ldr	r3, [pc, #52]	; (8006e04 <HAL_MspInit+0x4c>)
 8006dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dd6:	607b      	str	r3, [r7, #4]
 8006dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006dda:	2300      	movs	r3, #0
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <HAL_MspInit+0x4c>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de2:	4a08      	ldr	r2, [pc, #32]	; (8006e04 <HAL_MspInit+0x4c>)
 8006de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de8:	6413      	str	r3, [r2, #64]	; 0x40
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <HAL_MspInit+0x4c>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006df6:	bf00      	nop
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800

08006e08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08c      	sub	sp, #48	; 0x30
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e10:	f107 031c 	add.w	r3, r7, #28
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a4a      	ldr	r2, [pc, #296]	; (8006f50 <HAL_ADC_MspInit+0x148>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	f040 808e 	bne.w	8006f48 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	4b48      	ldr	r3, [pc, #288]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e34:	4a47      	ldr	r2, [pc, #284]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8006e3c:	4b45      	ldr	r3, [pc, #276]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e44:	61bb      	str	r3, [r7, #24]
 8006e46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e48:	2300      	movs	r3, #0
 8006e4a:	617b      	str	r3, [r7, #20]
 8006e4c:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	4a40      	ldr	r2, [pc, #256]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e52:	f043 0304 	orr.w	r3, r3, #4
 8006e56:	6313      	str	r3, [r2, #48]	; 0x30
 8006e58:	4b3e      	ldr	r3, [pc, #248]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e64:	2300      	movs	r3, #0
 8006e66:	613b      	str	r3, [r7, #16]
 8006e68:	4b3a      	ldr	r3, [pc, #232]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	4a39      	ldr	r2, [pc, #228]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	6313      	str	r3, [r2, #48]	; 0x30
 8006e74:	4b37      	ldr	r3, [pc, #220]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
 8006e84:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	4a32      	ldr	r2, [pc, #200]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006e90:	4b30      	ldr	r3, [pc, #192]	; (8006f54 <HAL_ADC_MspInit+0x14c>)
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006e9c:	230f      	movs	r3, #15
 8006e9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ea8:	f107 031c 	add.w	r3, r7, #28
 8006eac:	4619      	mov	r1, r3
 8006eae:	482a      	ldr	r0, [pc, #168]	; (8006f58 <HAL_ADC_MspInit+0x150>)
 8006eb0:	f004 f8f6 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006eb4:	23ff      	movs	r3, #255	; 0xff
 8006eb6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ec0:	f107 031c 	add.w	r3, r7, #28
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4825      	ldr	r0, [pc, #148]	; (8006f5c <HAL_ADC_MspInit+0x154>)
 8006ec8:	f004 f8ea 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ed8:	f107 031c 	add.w	r3, r7, #28
 8006edc:	4619      	mov	r1, r3
 8006ede:	4820      	ldr	r0, [pc, #128]	; (8006f60 <HAL_ADC_MspInit+0x158>)
 8006ee0:	f004 f8de 	bl	800b0a0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ee4:	4b1f      	ldr	r3, [pc, #124]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006ee6:	4a20      	ldr	r2, [pc, #128]	; (8006f68 <HAL_ADC_MspInit+0x160>)
 8006ee8:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006eea:	4b1e      	ldr	r3, [pc, #120]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006eec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006ef0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ef2:	4b1c      	ldr	r3, [pc, #112]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef8:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006efe:	4b19      	ldr	r3, [pc, #100]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f04:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f06:	4b17      	ldr	r3, [pc, #92]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f0c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f0e:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f14:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006f16:	4b13      	ldr	r3, [pc, #76]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f1c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f1e:	4b11      	ldr	r3, [pc, #68]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f24:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f2c:	480d      	ldr	r0, [pc, #52]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f2e:	f003 fd1b 	bl	800a968 <HAL_DMA_Init>
 8006f32:	4603      	mov	r3, r0
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d001      	beq.n	8006f3c <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006f38:	f7ff ff32 	bl	8006da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a09      	ldr	r2, [pc, #36]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38
 8006f42:	4a08      	ldr	r2, [pc, #32]	; (8006f64 <HAL_ADC_MspInit+0x15c>)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006f48:	bf00      	nop
 8006f4a:	3730      	adds	r7, #48	; 0x30
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40012100 	.word	0x40012100
 8006f54:	40023800 	.word	0x40023800
 8006f58:	40020800 	.word	0x40020800
 8006f5c:	40020000 	.word	0x40020000
 8006f60:	40020400 	.word	0x40020400
 8006f64:	20047af8 	.word	0x20047af8
 8006f68:	40026440 	.word	0x40026440

08006f6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08c      	sub	sp, #48	; 0x30
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f74:	f107 031c 	add.w	r3, r7, #28
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	609a      	str	r2, [r3, #8]
 8006f80:	60da      	str	r2, [r3, #12]
 8006f82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a32      	ldr	r2, [pc, #200]	; (8007054 <HAL_I2C_MspInit+0xe8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d12c      	bne.n	8006fe8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	4b31      	ldr	r3, [pc, #196]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	4a30      	ldr	r2, [pc, #192]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006f98:	f043 0302 	orr.w	r3, r3, #2
 8006f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	61bb      	str	r3, [r7, #24]
 8006fa8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006faa:	23c0      	movs	r3, #192	; 0xc0
 8006fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006fae:	2312      	movs	r3, #18
 8006fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006fba:	2304      	movs	r3, #4
 8006fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fbe:	f107 031c 	add.w	r3, r7, #28
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4825      	ldr	r0, [pc, #148]	; (800705c <HAL_I2C_MspInit+0xf0>)
 8006fc6:	f004 f86b 	bl	800b0a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	4b22      	ldr	r3, [pc, #136]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006fd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fda:	4b1f      	ldr	r3, [pc, #124]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006fe6:	e031      	b.n	800704c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a1c      	ldr	r2, [pc, #112]	; (8007060 <HAL_I2C_MspInit+0xf4>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d12c      	bne.n	800704c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	4a17      	ldr	r2, [pc, #92]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8006ffc:	f043 0302 	orr.w	r3, r3, #2
 8007000:	6313      	str	r3, [r2, #48]	; 0x30
 8007002:	4b15      	ldr	r3, [pc, #84]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8007004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007006:	f003 0302 	and.w	r3, r3, #2
 800700a:	613b      	str	r3, [r7, #16]
 800700c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800700e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007014:	2312      	movs	r3, #18
 8007016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007018:	2301      	movs	r3, #1
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800701c:	2303      	movs	r3, #3
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007020:	2304      	movs	r3, #4
 8007022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007024:	f107 031c 	add.w	r3, r7, #28
 8007028:	4619      	mov	r1, r3
 800702a:	480c      	ldr	r0, [pc, #48]	; (800705c <HAL_I2C_MspInit+0xf0>)
 800702c:	f004 f838 	bl	800b0a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	4b08      	ldr	r3, [pc, #32]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8007036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007038:	4a07      	ldr	r2, [pc, #28]	; (8007058 <HAL_I2C_MspInit+0xec>)
 800703a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800703e:	6413      	str	r3, [r2, #64]	; 0x40
 8007040:	4b05      	ldr	r3, [pc, #20]	; (8007058 <HAL_I2C_MspInit+0xec>)
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	bf00      	nop
 800704e:	3730      	adds	r7, #48	; 0x30
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	40005400 	.word	0x40005400
 8007058:	40023800 	.word	0x40023800
 800705c:	40020400 	.word	0x40020400
 8007060:	40005800 	.word	0x40005800

08007064 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b08a      	sub	sp, #40	; 0x28
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800706c:	f107 0314 	add.w	r3, r7, #20
 8007070:	2200      	movs	r2, #0
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	605a      	str	r2, [r3, #4]
 8007076:	609a      	str	r2, [r3, #8]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a69      	ldr	r2, [pc, #420]	; (8007228 <HAL_SD_MspInit+0x1c4>)
 8007082:	4293      	cmp	r3, r2
 8007084:	f040 80cb 	bne.w	800721e <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007088:	2300      	movs	r3, #0
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	4b67      	ldr	r3, [pc, #412]	; (800722c <HAL_SD_MspInit+0x1c8>)
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	4a66      	ldr	r2, [pc, #408]	; (800722c <HAL_SD_MspInit+0x1c8>)
 8007092:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007096:	6453      	str	r3, [r2, #68]	; 0x44
 8007098:	4b64      	ldr	r3, [pc, #400]	; (800722c <HAL_SD_MspInit+0x1c8>)
 800709a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800709c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	4b60      	ldr	r3, [pc, #384]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	4a5f      	ldr	r2, [pc, #380]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070ae:	f043 0304 	orr.w	r3, r3, #4
 80070b2:	6313      	str	r3, [r2, #48]	; 0x30
 80070b4:	4b5d      	ldr	r3, [pc, #372]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	f003 0304 	and.w	r3, r3, #4
 80070bc:	60fb      	str	r3, [r7, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80070c0:	2300      	movs	r3, #0
 80070c2:	60bb      	str	r3, [r7, #8]
 80070c4:	4b59      	ldr	r3, [pc, #356]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c8:	4a58      	ldr	r2, [pc, #352]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070ca:	f043 0308 	orr.w	r3, r3, #8
 80070ce:	6313      	str	r3, [r2, #48]	; 0x30
 80070d0:	4b56      	ldr	r3, [pc, #344]	; (800722c <HAL_SD_MspInit+0x1c8>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80070dc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80070e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e2:	2302      	movs	r3, #2
 80070e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ea:	2303      	movs	r3, #3
 80070ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80070ee:	230c      	movs	r3, #12
 80070f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070f2:	f107 0314 	add.w	r3, r7, #20
 80070f6:	4619      	mov	r1, r3
 80070f8:	484d      	ldr	r0, [pc, #308]	; (8007230 <HAL_SD_MspInit+0x1cc>)
 80070fa:	f003 ffd1 	bl	800b0a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80070fe:	2304      	movs	r3, #4
 8007100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007102:	2302      	movs	r3, #2
 8007104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007106:	2300      	movs	r3, #0
 8007108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800710a:	2303      	movs	r3, #3
 800710c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800710e:	230c      	movs	r3, #12
 8007110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007112:	f107 0314 	add.w	r3, r7, #20
 8007116:	4619      	mov	r1, r3
 8007118:	4846      	ldr	r0, [pc, #280]	; (8007234 <HAL_SD_MspInit+0x1d0>)
 800711a:	f003 ffc1 	bl	800b0a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800711e:	4b46      	ldr	r3, [pc, #280]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007120:	4a46      	ldr	r2, [pc, #280]	; (800723c <HAL_SD_MspInit+0x1d8>)
 8007122:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007124:	4b44      	ldr	r3, [pc, #272]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800712a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800712c:	4b42      	ldr	r3, [pc, #264]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800712e:	2200      	movs	r2, #0
 8007130:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007132:	4b41      	ldr	r3, [pc, #260]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007134:	2200      	movs	r2, #0
 8007136:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007138:	4b3f      	ldr	r3, [pc, #252]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800713a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800713e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007140:	4b3d      	ldr	r3, [pc, #244]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007142:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007146:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007148:	4b3b      	ldr	r3, [pc, #236]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800714a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800714e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8007150:	4b39      	ldr	r3, [pc, #228]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007152:	2220      	movs	r2, #32
 8007154:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007156:	4b38      	ldr	r3, [pc, #224]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007158:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800715c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800715e:	4b36      	ldr	r3, [pc, #216]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007160:	2204      	movs	r2, #4
 8007162:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007164:	4b34      	ldr	r3, [pc, #208]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007166:	2203      	movs	r2, #3
 8007168:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800716a:	4b33      	ldr	r3, [pc, #204]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800716c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007170:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007172:	4b31      	ldr	r3, [pc, #196]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007174:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007178:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800717a:	482f      	ldr	r0, [pc, #188]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800717c:	f003 fbf4 	bl	800a968 <HAL_DMA_Init>
 8007180:	4603      	mov	r3, r0
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007186:	f7ff fe0b 	bl	8006da0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2a      	ldr	r2, [pc, #168]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
 8007190:	4a29      	ldr	r2, [pc, #164]	; (8007238 <HAL_SD_MspInit+0x1d4>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007196:	4b2a      	ldr	r3, [pc, #168]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 8007198:	4a2a      	ldr	r2, [pc, #168]	; (8007244 <HAL_SD_MspInit+0x1e0>)
 800719a:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800719c:	4b28      	ldr	r3, [pc, #160]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 800719e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80071a2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80071a4:	4b26      	ldr	r3, [pc, #152]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071aa:	4b25      	ldr	r3, [pc, #148]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80071b0:	4b23      	ldr	r3, [pc, #140]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071b6:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80071b8:	4b21      	ldr	r3, [pc, #132]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071be:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80071c0:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80071c6:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80071c8:	4b1d      	ldr	r3, [pc, #116]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071ca:	2220      	movs	r2, #32
 80071cc:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071ce:	4b1c      	ldr	r3, [pc, #112]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80071d4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071d6:	4b1a      	ldr	r3, [pc, #104]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071d8:	2204      	movs	r2, #4
 80071da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80071dc:	4b18      	ldr	r3, [pc, #96]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071de:	2203      	movs	r2, #3
 80071e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80071e2:	4b17      	ldr	r3, [pc, #92]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80071e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80071ea:	4b15      	ldr	r3, [pc, #84]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80071f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80071f2:	4813      	ldr	r0, [pc, #76]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 80071f4:	f003 fbb8 	bl	800a968 <HAL_DMA_Init>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d001      	beq.n	8007202 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80071fe:	f7ff fdcf 	bl	8006da0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 8007206:	63da      	str	r2, [r3, #60]	; 0x3c
 8007208:	4a0d      	ldr	r2, [pc, #52]	; (8007240 <HAL_SD_MspInit+0x1dc>)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800720e:	2200      	movs	r2, #0
 8007210:	2100      	movs	r1, #0
 8007212:	2031      	movs	r0, #49	; 0x31
 8007214:	f003 fb71 	bl	800a8fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007218:	2031      	movs	r0, #49	; 0x31
 800721a:	f003 fb8a 	bl	800a932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800721e:	bf00      	nop
 8007220:	3728      	adds	r7, #40	; 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	40012c00 	.word	0x40012c00
 800722c:	40023800 	.word	0x40023800
 8007230:	40020800 	.word	0x40020800
 8007234:	40020c00 	.word	0x40020c00
 8007238:	20047620 	.word	0x20047620
 800723c:	40026458 	.word	0x40026458
 8007240:	20047954 	.word	0x20047954
 8007244:	400264a0 	.word	0x400264a0

08007248 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007250:	f107 0314 	add.w	r3, r7, #20
 8007254:	2200      	movs	r2, #0
 8007256:	601a      	str	r2, [r3, #0]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	609a      	str	r2, [r3, #8]
 800725c:	60da      	str	r2, [r3, #12]
 800725e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a19      	ldr	r2, [pc, #100]	; (80072cc <HAL_SPI_MspInit+0x84>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d12c      	bne.n	80072c4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800726a:	2300      	movs	r3, #0
 800726c:	613b      	str	r3, [r7, #16]
 800726e:	4b18      	ldr	r3, [pc, #96]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 8007274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007278:	6413      	str	r3, [r2, #64]	; 0x40
 800727a:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007282:	613b      	str	r3, [r7, #16]
 8007284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007286:	2300      	movs	r3, #0
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 8007290:	f043 0302 	orr.w	r3, r3, #2
 8007294:	6313      	str	r3, [r2, #48]	; 0x30
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <HAL_SPI_MspInit+0x88>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	60fb      	str	r3, [r7, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80072a2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80072a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072a8:	2302      	movs	r3, #2
 80072aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ac:	2300      	movs	r3, #0
 80072ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072b0:	2303      	movs	r3, #3
 80072b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072b4:	2305      	movs	r3, #5
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4619      	mov	r1, r3
 80072be:	4805      	ldr	r0, [pc, #20]	; (80072d4 <HAL_SPI_MspInit+0x8c>)
 80072c0:	f003 feee 	bl	800b0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80072c4:	bf00      	nop
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40003800 	.word	0x40003800
 80072d0:	40023800 	.word	0x40023800
 80072d4:	40020400 	.word	0x40020400

080072d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b08c      	sub	sp, #48	; 0x30
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e0:	f107 031c 	add.w	r3, r7, #28
 80072e4:	2200      	movs	r2, #0
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	605a      	str	r2, [r3, #4]
 80072ea:	609a      	str	r2, [r3, #8]
 80072ec:	60da      	str	r2, [r3, #12]
 80072ee:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2d      	ldr	r2, [pc, #180]	; (80073ac <HAL_TIM_PWM_MspInit+0xd4>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d12d      	bne.n	8007356 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	61bb      	str	r3, [r7, #24]
 80072fe:	4b2c      	ldr	r3, [pc, #176]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007302:	4a2b      	ldr	r2, [pc, #172]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007304:	f043 0301 	orr.w	r3, r3, #1
 8007308:	6453      	str	r3, [r2, #68]	; 0x44
 800730a:	4b29      	ldr	r3, [pc, #164]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 800730c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 800731c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731e:	4a24      	ldr	r2, [pc, #144]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007320:	f043 0310 	orr.w	r3, r3, #16
 8007324:	6313      	str	r3, [r2, #48]	; 0x30
 8007326:	4b22      	ldr	r3, [pc, #136]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8007332:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007338:	2302      	movs	r3, #2
 800733a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800733c:	2300      	movs	r3, #0
 800733e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007340:	2300      	movs	r3, #0
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007344:	2301      	movs	r3, #1
 8007346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007348:	f107 031c 	add.w	r3, r7, #28
 800734c:	4619      	mov	r1, r3
 800734e:	4819      	ldr	r0, [pc, #100]	; (80073b4 <HAL_TIM_PWM_MspInit+0xdc>)
 8007350:	f003 fea6 	bl	800b0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007354:	e026      	b.n	80073a4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <HAL_TIM_PWM_MspInit+0xe0>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d10e      	bne.n	800737e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	4a11      	ldr	r2, [pc, #68]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 800736a:	f043 0302 	orr.w	r3, r3, #2
 800736e:	6413      	str	r3, [r2, #64]	; 0x40
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	613b      	str	r3, [r7, #16]
 800737a:	693b      	ldr	r3, [r7, #16]
}
 800737c:	e012      	b.n	80073a4 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a0e      	ldr	r2, [pc, #56]	; (80073bc <HAL_TIM_PWM_MspInit+0xe4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d10d      	bne.n	80073a4 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007388:	2300      	movs	r3, #0
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	4a07      	ldr	r2, [pc, #28]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 8007392:	f043 0304 	orr.w	r3, r3, #4
 8007396:	6413      	str	r3, [r2, #64]	; 0x40
 8007398:	4b05      	ldr	r3, [pc, #20]	; (80073b0 <HAL_TIM_PWM_MspInit+0xd8>)
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	f003 0304 	and.w	r3, r3, #4
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
}
 80073a4:	bf00      	nop
 80073a6:	3730      	adds	r7, #48	; 0x30
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40023800 	.word	0x40023800
 80073b4:	40021000 	.word	0x40021000
 80073b8:	40000400 	.word	0x40000400
 80073bc:	40000800 	.word	0x40000800

080073c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b088      	sub	sp, #32
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a3e      	ldr	r2, [pc, #248]	; (80074c8 <HAL_TIM_Base_MspInit+0x108>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d116      	bne.n	8007400 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	4b3d      	ldr	r3, [pc, #244]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 80073d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073da:	4a3c      	ldr	r2, [pc, #240]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 80073dc:	f043 0310 	orr.w	r3, r3, #16
 80073e0:	6413      	str	r3, [r2, #64]	; 0x40
 80073e2:	4b3a      	ldr	r3, [pc, #232]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	f003 0310 	and.w	r3, r3, #16
 80073ea:	61fb      	str	r3, [r7, #28]
 80073ec:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80073ee:	2200      	movs	r2, #0
 80073f0:	2101      	movs	r1, #1
 80073f2:	2036      	movs	r0, #54	; 0x36
 80073f4:	f003 fa81 	bl	800a8fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80073f8:	2036      	movs	r0, #54	; 0x36
 80073fa:	f003 fa9a 	bl	800a932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80073fe:	e05e      	b.n	80074be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <HAL_TIM_Base_MspInit+0x110>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d116      	bne.n	8007438 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	61bb      	str	r3, [r7, #24]
 800740e:	4b2f      	ldr	r3, [pc, #188]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	4a2e      	ldr	r2, [pc, #184]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007414:	f043 0320 	orr.w	r3, r3, #32
 8007418:	6413      	str	r3, [r2, #64]	; 0x40
 800741a:	4b2c      	ldr	r3, [pc, #176]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	61bb      	str	r3, [r7, #24]
 8007424:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	2037      	movs	r0, #55	; 0x37
 800742c:	f003 fa65 	bl	800a8fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8007430:	2037      	movs	r0, #55	; 0x37
 8007432:	f003 fa7e 	bl	800a932 <HAL_NVIC_EnableIRQ>
}
 8007436:	e042      	b.n	80074be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a25      	ldr	r2, [pc, #148]	; (80074d4 <HAL_TIM_Base_MspInit+0x114>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10e      	bne.n	8007460 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8007442:	2300      	movs	r3, #0
 8007444:	617b      	str	r3, [r7, #20]
 8007446:	4b21      	ldr	r3, [pc, #132]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800744a:	4a20      	ldr	r2, [pc, #128]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 800744c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007450:	6453      	str	r3, [r2, #68]	; 0x44
 8007452:	4b1e      	ldr	r3, [pc, #120]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	697b      	ldr	r3, [r7, #20]
}
 800745e:	e02e      	b.n	80074be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <HAL_TIM_Base_MspInit+0x118>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d10e      	bne.n	8007488 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	613b      	str	r3, [r7, #16]
 800746e:	4b17      	ldr	r3, [pc, #92]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007472:	4a16      	ldr	r2, [pc, #88]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007478:	6453      	str	r3, [r2, #68]	; 0x44
 800747a:	4b14      	ldr	r3, [pc, #80]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 800747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800747e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007482:	613b      	str	r3, [r7, #16]
 8007484:	693b      	ldr	r3, [r7, #16]
}
 8007486:	e01a      	b.n	80074be <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a13      	ldr	r2, [pc, #76]	; (80074dc <HAL_TIM_Base_MspInit+0x11c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d115      	bne.n	80074be <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	4a0c      	ldr	r2, [pc, #48]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 800749c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a0:	6413      	str	r3, [r2, #64]	; 0x40
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_TIM_Base_MspInit+0x10c>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80074ae:	2200      	movs	r2, #0
 80074b0:	2100      	movs	r1, #0
 80074b2:	202c      	movs	r0, #44	; 0x2c
 80074b4:	f003 fa21 	bl	800a8fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80074b8:	202c      	movs	r0, #44	; 0x2c
 80074ba:	f003 fa3a 	bl	800a932 <HAL_NVIC_EnableIRQ>
}
 80074be:	bf00      	nop
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40001000 	.word	0x40001000
 80074cc:	40023800 	.word	0x40023800
 80074d0:	40001400 	.word	0x40001400
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	40001c00 	.word	0x40001c00

080074e0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e8:	f107 0314 	add.w	r3, r7, #20
 80074ec:	2200      	movs	r2, #0
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	609a      	str	r2, [r3, #8]
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <HAL_TIM_Encoder_MspInit+0x94>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d133      	bne.n	800756a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007502:	2300      	movs	r3, #0
 8007504:	613b      	str	r3, [r7, #16]
 8007506:	4b1c      	ldr	r3, [pc, #112]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 8007508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750a:	4a1b      	ldr	r2, [pc, #108]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 800750c:	f043 0302 	orr.w	r3, r3, #2
 8007510:	6453      	str	r3, [r2, #68]	; 0x44
 8007512:	4b19      	ldr	r3, [pc, #100]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	613b      	str	r3, [r7, #16]
 800751c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800751e:	2300      	movs	r3, #0
 8007520:	60fb      	str	r3, [r7, #12]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 8007524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007526:	4a14      	ldr	r2, [pc, #80]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 8007528:	f043 0304 	orr.w	r3, r3, #4
 800752c:	6313      	str	r3, [r2, #48]	; 0x30
 800752e:	4b12      	ldr	r3, [pc, #72]	; (8007578 <HAL_TIM_Encoder_MspInit+0x98>)
 8007530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007532:	f003 0304 	and.w	r3, r3, #4
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800753a:	23c0      	movs	r3, #192	; 0xc0
 800753c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800753e:	2302      	movs	r3, #2
 8007540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007546:	2300      	movs	r3, #0
 8007548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800754a:	2303      	movs	r3, #3
 800754c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800754e:	f107 0314 	add.w	r3, r7, #20
 8007552:	4619      	mov	r1, r3
 8007554:	4809      	ldr	r0, [pc, #36]	; (800757c <HAL_TIM_Encoder_MspInit+0x9c>)
 8007556:	f003 fda3 	bl	800b0a0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800755a:	2200      	movs	r2, #0
 800755c:	2100      	movs	r1, #0
 800755e:	202c      	movs	r0, #44	; 0x2c
 8007560:	f003 f9cb 	bl	800a8fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007564:	202c      	movs	r0, #44	; 0x2c
 8007566:	f003 f9e4 	bl	800a932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800756a:	bf00      	nop
 800756c:	3728      	adds	r7, #40	; 0x28
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40010400 	.word	0x40010400
 8007578:	40023800 	.word	0x40023800
 800757c:	40020800 	.word	0x40020800

08007580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08c      	sub	sp, #48	; 0x30
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007588:	f107 031c 	add.w	r3, r7, #28
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
 8007590:	605a      	str	r2, [r3, #4]
 8007592:	609a      	str	r2, [r3, #8]
 8007594:	60da      	str	r2, [r3, #12]
 8007596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5c      	ldr	r2, [pc, #368]	; (8007710 <HAL_TIM_MspPostInit+0x190>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d11f      	bne.n	80075e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80075a2:	2300      	movs	r3, #0
 80075a4:	61bb      	str	r3, [r7, #24]
 80075a6:	4b5b      	ldr	r3, [pc, #364]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075aa:	4a5a      	ldr	r2, [pc, #360]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075ac:	f043 0310 	orr.w	r3, r3, #16
 80075b0:	6313      	str	r3, [r2, #48]	; 0x30
 80075b2:	4b58      	ldr	r3, [pc, #352]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80075be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075c4:	2302      	movs	r3, #2
 80075c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075cc:	2300      	movs	r3, #0
 80075ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80075d0:	2301      	movs	r3, #1
 80075d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80075d4:	f107 031c 	add.w	r3, r7, #28
 80075d8:	4619      	mov	r1, r3
 80075da:	484f      	ldr	r0, [pc, #316]	; (8007718 <HAL_TIM_MspPostInit+0x198>)
 80075dc:	f003 fd60 	bl	800b0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80075e0:	e091      	b.n	8007706 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a4d      	ldr	r2, [pc, #308]	; (800771c <HAL_TIM_MspPostInit+0x19c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d11e      	bne.n	800762a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
 80075f0:	4b48      	ldr	r3, [pc, #288]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f4:	4a47      	ldr	r2, [pc, #284]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075f6:	f043 0302 	orr.w	r3, r3, #2
 80075fa:	6313      	str	r3, [r2, #48]	; 0x30
 80075fc:	4b45      	ldr	r3, [pc, #276]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	617b      	str	r3, [r7, #20]
 8007606:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007608:	2330      	movs	r3, #48	; 0x30
 800760a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800760c:	2302      	movs	r3, #2
 800760e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007610:	2300      	movs	r3, #0
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007614:	2300      	movs	r3, #0
 8007616:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007618:	2302      	movs	r3, #2
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800761c:	f107 031c 	add.w	r3, r7, #28
 8007620:	4619      	mov	r1, r3
 8007622:	483f      	ldr	r0, [pc, #252]	; (8007720 <HAL_TIM_MspPostInit+0x1a0>)
 8007624:	f003 fd3c 	bl	800b0a0 <HAL_GPIO_Init>
}
 8007628:	e06d      	b.n	8007706 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a3d      	ldr	r2, [pc, #244]	; (8007724 <HAL_TIM_MspPostInit+0x1a4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d11f      	bne.n	8007674 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	4b36      	ldr	r3, [pc, #216]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	4a35      	ldr	r2, [pc, #212]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 800763e:	f043 0308 	orr.w	r3, r3, #8
 8007642:	6313      	str	r3, [r2, #48]	; 0x30
 8007644:	4b33      	ldr	r3, [pc, #204]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	613b      	str	r3, [r7, #16]
 800764e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007650:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007656:	2302      	movs	r3, #2
 8007658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800765a:	2300      	movs	r3, #0
 800765c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800765e:	2300      	movs	r3, #0
 8007660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007662:	2302      	movs	r3, #2
 8007664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007666:	f107 031c 	add.w	r3, r7, #28
 800766a:	4619      	mov	r1, r3
 800766c:	482e      	ldr	r0, [pc, #184]	; (8007728 <HAL_TIM_MspPostInit+0x1a8>)
 800766e:	f003 fd17 	bl	800b0a0 <HAL_GPIO_Init>
}
 8007672:	e048      	b.n	8007706 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a2c      	ldr	r2, [pc, #176]	; (800772c <HAL_TIM_MspPostInit+0x1ac>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d11f      	bne.n	80076be <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800767e:	2300      	movs	r3, #0
 8007680:	60fb      	str	r3, [r7, #12]
 8007682:	4b24      	ldr	r3, [pc, #144]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 8007684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007686:	4a23      	ldr	r2, [pc, #140]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 8007688:	f043 0302 	orr.w	r3, r3, #2
 800768c:	6313      	str	r3, [r2, #48]	; 0x30
 800768e:	4b21      	ldr	r3, [pc, #132]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 8007690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800769a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800769e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a0:	2302      	movs	r3, #2
 80076a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076a8:	2300      	movs	r3, #0
 80076aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80076ac:	2303      	movs	r3, #3
 80076ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b0:	f107 031c 	add.w	r3, r7, #28
 80076b4:	4619      	mov	r1, r3
 80076b6:	481a      	ldr	r0, [pc, #104]	; (8007720 <HAL_TIM_MspPostInit+0x1a0>)
 80076b8:	f003 fcf2 	bl	800b0a0 <HAL_GPIO_Init>
}
 80076bc:	e023      	b.n	8007706 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <HAL_TIM_MspPostInit+0x1b0>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d11e      	bne.n	8007706 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076c8:	2300      	movs	r3, #0
 80076ca:	60bb      	str	r3, [r7, #8]
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	4a10      	ldr	r2, [pc, #64]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80076d2:	f043 0302 	orr.w	r3, r3, #2
 80076d6:	6313      	str	r3, [r2, #48]	; 0x30
 80076d8:	4b0e      	ldr	r3, [pc, #56]	; (8007714 <HAL_TIM_MspPostInit+0x194>)
 80076da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	60bb      	str	r3, [r7, #8]
 80076e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80076e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076ea:	2302      	movs	r3, #2
 80076ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f2:	2300      	movs	r3, #0
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80076f6:	2303      	movs	r3, #3
 80076f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076fa:	f107 031c 	add.w	r3, r7, #28
 80076fe:	4619      	mov	r1, r3
 8007700:	4807      	ldr	r0, [pc, #28]	; (8007720 <HAL_TIM_MspPostInit+0x1a0>)
 8007702:	f003 fccd 	bl	800b0a0 <HAL_GPIO_Init>
}
 8007706:	bf00      	nop
 8007708:	3730      	adds	r7, #48	; 0x30
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40010000 	.word	0x40010000
 8007714:	40023800 	.word	0x40023800
 8007718:	40021000 	.word	0x40021000
 800771c:	40000400 	.word	0x40000400
 8007720:	40020400 	.word	0x40020400
 8007724:	40000800 	.word	0x40000800
 8007728:	40020c00 	.word	0x40020c00
 800772c:	40014400 	.word	0x40014400
 8007730:	40014800 	.word	0x40014800

08007734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b08a      	sub	sp, #40	; 0x28
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800773c:	f107 0314 	add.w	r3, r7, #20
 8007740:	2200      	movs	r2, #0
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	605a      	str	r2, [r3, #4]
 8007746:	609a      	str	r2, [r3, #8]
 8007748:	60da      	str	r2, [r3, #12]
 800774a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a19      	ldr	r2, [pc, #100]	; (80077b8 <HAL_UART_MspInit+0x84>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d12b      	bne.n	80077ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007756:	2300      	movs	r3, #0
 8007758:	613b      	str	r3, [r7, #16]
 800775a:	4b18      	ldr	r3, [pc, #96]	; (80077bc <HAL_UART_MspInit+0x88>)
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	4a17      	ldr	r2, [pc, #92]	; (80077bc <HAL_UART_MspInit+0x88>)
 8007760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007764:	6413      	str	r3, [r2, #64]	; 0x40
 8007766:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_UART_MspInit+0x88>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	613b      	str	r3, [r7, #16]
 8007770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <HAL_UART_MspInit+0x88>)
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	4a10      	ldr	r2, [pc, #64]	; (80077bc <HAL_UART_MspInit+0x88>)
 800777c:	f043 0308 	orr.w	r3, r3, #8
 8007780:	6313      	str	r3, [r2, #48]	; 0x30
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <HAL_UART_MspInit+0x88>)
 8007784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007786:	f003 0308 	and.w	r3, r3, #8
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800778e:	2360      	movs	r3, #96	; 0x60
 8007790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007792:	2302      	movs	r3, #2
 8007794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779a:	2303      	movs	r3, #3
 800779c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800779e:	2307      	movs	r3, #7
 80077a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077a2:	f107 0314 	add.w	r3, r7, #20
 80077a6:	4619      	mov	r1, r3
 80077a8:	4805      	ldr	r0, [pc, #20]	; (80077c0 <HAL_UART_MspInit+0x8c>)
 80077aa:	f003 fc79 	bl	800b0a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80077ae:	bf00      	nop
 80077b0:	3728      	adds	r7, #40	; 0x28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40004400 	.word	0x40004400
 80077bc:	40023800 	.word	0x40023800
 80077c0:	40020c00 	.word	0x40020c00

080077c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80077c8:	e7fe      	b.n	80077c8 <NMI_Handler+0x4>

080077ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80077ca:	b480      	push	{r7}
 80077cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80077ce:	e7fe      	b.n	80077ce <HardFault_Handler+0x4>

080077d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80077d4:	e7fe      	b.n	80077d4 <MemManage_Handler+0x4>

080077d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80077d6:	b480      	push	{r7}
 80077d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80077da:	e7fe      	b.n	80077da <BusFault_Handler+0x4>

080077dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80077e0:	e7fe      	b.n	80077e0 <UsageFault_Handler+0x4>

080077e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80077e2:	b480      	push	{r7}
 80077e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80077e6:	bf00      	nop
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80077f4:	bf00      	nop
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80077fe:	b480      	push	{r7}
 8007800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007802:	bf00      	nop
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007810:	f002 fb52 	bl	8009eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}

08007818 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800781c:	2004      	movs	r0, #4
 800781e:	f003 fe1b 	bl	800b458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007822:	bf00      	nop
 8007824:	bd80      	pop	{r7, pc}

08007826 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800782a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800782e:	f003 fe13 	bl	800b458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007832:	bf00      	nop
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800783c:	4803      	ldr	r0, [pc, #12]	; (800784c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800783e:	f007 fe2a 	bl	800f496 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8007842:	4803      	ldr	r0, [pc, #12]	; (8007850 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007844:	f007 fe27 	bl	800f496 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007848:	bf00      	nop
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200476d8 	.word	0x200476d8
 8007850:	200478d4 	.word	0x200478d4

08007854 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007858:	4802      	ldr	r0, [pc, #8]	; (8007864 <SDIO_IRQHandler+0x10>)
 800785a:	f005 fec3 	bl	800d5e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20047a34 	.word	0x20047a34

08007868 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800786c:	4802      	ldr	r0, [pc, #8]	; (8007878 <TIM6_DAC_IRQHandler+0x10>)
 800786e:	f007 fe12 	bl	800f496 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007872:	bf00      	nop
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	200479b4 	.word	0x200479b4

0800787c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8007880:	4802      	ldr	r0, [pc, #8]	; (800788c <TIM7_IRQHandler+0x10>)
 8007882:	f007 fe08 	bl	800f496 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20047b58 	.word	0x20047b58

08007890 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007894:	4802      	ldr	r0, [pc, #8]	; (80078a0 <DMA2_Stream2_IRQHandler+0x10>)
 8007896:	f003 f98f 	bl	800abb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800789a:	bf00      	nop
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20047af8 	.word	0x20047af8

080078a4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80078a8:	4802      	ldr	r0, [pc, #8]	; (80078b4 <DMA2_Stream3_IRQHandler+0x10>)
 80078aa:	f003 f985 	bl	800abb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80078ae:	bf00      	nop
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20047620 	.word	0x20047620

080078b8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80078bc:	4802      	ldr	r0, [pc, #8]	; (80078c8 <DMA2_Stream6_IRQHandler+0x10>)
 80078be:	f003 f97b 	bl	800abb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80078c2:	bf00      	nop
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20047954 	.word	0x20047954

080078cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <_sbrk+0x5c>)
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <_sbrk+0x60>)
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80078e0:	4b13      	ldr	r3, [pc, #76]	; (8007930 <_sbrk+0x64>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80078e8:	4b11      	ldr	r3, [pc, #68]	; (8007930 <_sbrk+0x64>)
 80078ea:	4a12      	ldr	r2, [pc, #72]	; (8007934 <_sbrk+0x68>)
 80078ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <_sbrk+0x64>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4413      	add	r3, r2
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d207      	bcs.n	800790c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80078fc:	f00d f808 	bl	8014910 <__errno>
 8007900:	4602      	mov	r2, r0
 8007902:	230c      	movs	r3, #12
 8007904:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	e009      	b.n	8007920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800790c:	4b08      	ldr	r3, [pc, #32]	; (8007930 <_sbrk+0x64>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <_sbrk+0x64>)
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4413      	add	r3, r2
 800791a:	4a05      	ldr	r2, [pc, #20]	; (8007930 <_sbrk+0x64>)
 800791c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800791e:	68fb      	ldr	r3, [r7, #12]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	20050000 	.word	0x20050000
 800792c:	00000800 	.word	0x00000800
 8007930:	20000240 	.word	0x20000240
 8007934:	20049ca8 	.word	0x20049ca8

08007938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <SystemInit+0x28>)
 800793e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007942:	4a07      	ldr	r2, [pc, #28]	; (8007960 <SystemInit+0x28>)
 8007944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800794c:	4b04      	ldr	r3, [pc, #16]	; (8007960 <SystemInit+0x28>)
 800794e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007952:	609a      	str	r2, [r3, #8]
#endif
}
 8007954:	bf00      	nop
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	e000ed00 	.word	0xe000ed00

08007964 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007964:	b598      	push	{r3, r4, r7, lr}
 8007966:	af00      	add	r7, sp, #0
	lcd_init();
 8007968:	f7f9 fb56 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 800796c:	483b      	ldr	r0, [pc, #236]	; (8007a5c <cppInit+0xf8>)
 800796e:	f7fd fd0f 	bl	8005390 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007972:	2064      	movs	r0, #100	; 0x64
 8007974:	f002 fac0 	bl	8009ef8 <HAL_Delay>
	power_sensor.updateValues();
 8007978:	4838      	ldr	r0, [pc, #224]	; (8007a5c <cppInit+0xf8>)
 800797a:	f7fd fd19 	bl	80053b0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800797e:	f7f9 fb8f 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007982:	2100      	movs	r1, #0
 8007984:	2000      	movs	r0, #0
 8007986:	f7f9 fb9b 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 800798a:	4835      	ldr	r0, [pc, #212]	; (8007a60 <cppInit+0xfc>)
 800798c:	f7f9 fbc2 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007990:	2101      	movs	r1, #1
 8007992:	2000      	movs	r0, #0
 8007994:	f7f9 fb94 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007998:	4830      	ldr	r0, [pc, #192]	; (8007a5c <cppInit+0xf8>)
 800799a:	f7fd fd33 	bl	8005404 <_ZN11PowerSensor17getButteryVoltageEv>
 800799e:	ee10 3a10 	vmov	r3, s0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7f8 fde8 	bl	8000578 <__aeabi_f2d>
 80079a8:	4603      	mov	r3, r0
 80079aa:	460c      	mov	r4, r1
 80079ac:	461a      	mov	r2, r3
 80079ae:	4623      	mov	r3, r4
 80079b0:	482c      	ldr	r0, [pc, #176]	; (8007a64 <cppInit+0x100>)
 80079b2:	f7f9 fbaf 	bl	8001114 <lcd_printf>
	HAL_Delay(800);
 80079b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80079ba:	f002 fa9d 	bl	8009ef8 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80079be:	482a      	ldr	r0, [pc, #168]	; (8007a68 <cppInit+0x104>)
 80079c0:	f7fc ffa8 	bl	8004914 <_ZN6Logger10sdCardInitEv>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <cppInit+0x76>
		led.fullColor('G');
 80079ca:	2147      	movs	r1, #71	; 0x47
 80079cc:	4827      	ldr	r0, [pc, #156]	; (8007a6c <cppInit+0x108>)
 80079ce:	f7fa fbc1 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079d2:	2064      	movs	r0, #100	; 0x64
 80079d4:	f002 fa90 	bl	8009ef8 <HAL_Delay>
 80079d8:	e006      	b.n	80079e8 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80079da:	2152      	movs	r1, #82	; 0x52
 80079dc:	4823      	ldr	r0, [pc, #140]	; (8007a6c <cppInit+0x108>)
 80079de:	f7fa fbb9 	bl	8002154 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80079e2:	2064      	movs	r0, #100	; 0x64
 80079e4:	f002 fa88 	bl	8009ef8 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80079e8:	4821      	ldr	r0, [pc, #132]	; (8007a70 <cppInit+0x10c>)
 80079ea:	f7fa fd0f 	bl	800240c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80079ee:	4821      	ldr	r0, [pc, #132]	; (8007a74 <cppInit+0x110>)
 80079f0:	f7fd fa64 	bl	8004ebc <_ZN5Motor4initEv>
	encoder.init();
 80079f4:	4820      	ldr	r0, [pc, #128]	; (8007a78 <cppInit+0x114>)
 80079f6:	f7f9 fd1d 	bl	8001434 <_ZN7Encoder4initEv>
	imu.init();
 80079fa:	4820      	ldr	r0, [pc, #128]	; (8007a7c <cppInit+0x118>)
 80079fc:	f7fa f968 	bl	8001cd0 <_ZN3IMU4initEv>
	line_trace.init();
 8007a00:	481f      	ldr	r0, [pc, #124]	; (8007a80 <cppInit+0x11c>)
 8007a02:	f7fb fff3 	bl	80039ec <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007a06:	481a      	ldr	r0, [pc, #104]	; (8007a70 <cppInit+0x10c>)
 8007a08:	f7fa fdf6 	bl	80025f8 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007a0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a10:	f002 fa72 	bl	8009ef8 <HAL_Delay>

	led.fullColor('M');
 8007a14:	214d      	movs	r1, #77	; 0x4d
 8007a16:	4815      	ldr	r0, [pc, #84]	; (8007a6c <cppInit+0x108>)
 8007a18:	f7fa fb9c 	bl	8002154 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007a1c:	4817      	ldr	r0, [pc, #92]	; (8007a7c <cppInit+0x118>)
 8007a1e:	f7fa fa21 	bl	8001e64 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s hand tune
 8007a22:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007a84 <cppInit+0x120>
 8007a26:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007a88 <cppInit+0x124>
 8007a2a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007a8c <cppInit+0x128>
 8007a2e:	4818      	ldr	r0, [pc, #96]	; (8007a90 <cppInit+0x12c>)
 8007a30:	f7fe f99e 	bl	8005d70 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007a34:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007a84 <cppInit+0x120>
 8007a38:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007a94 <cppInit+0x130>
 8007a3c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007a98 <cppInit+0x134>
 8007a40:	4813      	ldr	r0, [pc, #76]	; (8007a90 <cppInit+0x12c>)
 8007a42:	f7fe f9ae 	bl	8005da2 <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007a46:	4815      	ldr	r0, [pc, #84]	; (8007a9c <cppInit+0x138>)
 8007a48:	f7fd fbab 	bl	80051a2 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007a4c:	4814      	ldr	r0, [pc, #80]	; (8007aa0 <cppInit+0x13c>)
 8007a4e:	f7fd fc43 	bl	80052d8 <_ZN13PathFollowing4initEv>

	esc.init();
 8007a52:	4814      	ldr	r0, [pc, #80]	; (8007aa4 <cppInit+0x140>)
 8007a54:	f7f9 fbca 	bl	80011ec <_ZN3ESC4initEv>

}
 8007a58:	bf00      	nop
 8007a5a:	bd98      	pop	{r3, r4, r7, pc}
 8007a5c:	2000055c 	.word	0x2000055c
 8007a60:	08018f5c 	.word	0x08018f5c
 8007a64:	08018f64 	.word	0x08018f64
 8007a68:	2000057c 	.word	0x2000057c
 8007a6c:	20000558 	.word	0x20000558
 8007a70:	20000244 	.word	0x20000244
 8007a74:	20000554 	.word	0x20000554
 8007a78:	20020928 	.word	0x20020928
 8007a7c:	20000568 	.word	0x20000568
 8007a80:	200209d4 	.word	0x200209d4
 8007a84:	00000000 	.word	0x00000000
 8007a88:	4129999a 	.word	0x4129999a
 8007a8c:	3f99999a 	.word	0x3f99999a
 8007a90:	20020950 	.word	0x20020950
 8007a94:	3f5e3fbc 	.word	0x3f5e3fbc
 8007a98:	3d75c28f 	.word	0x3d75c28f
 8007a9c:	20020990 	.word	0x20020990
 8007aa0:	2002db20 	.word	0x2002db20
 8007aa4:	200209d0 	.word	0x200209d0

08007aa8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007aac:	480e      	ldr	r0, [pc, #56]	; (8007ae8 <cppFlip1ms+0x40>)
 8007aae:	f7fa fd0b 	bl	80024c8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007ab2:	480e      	ldr	r0, [pc, #56]	; (8007aec <cppFlip1ms+0x44>)
 8007ab4:	f7fa f934 	bl	8001d20 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007ab8:	480d      	ldr	r0, [pc, #52]	; (8007af0 <cppFlip1ms+0x48>)
 8007aba:	f7f9 fcdd 	bl	8001478 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007abe:	480d      	ldr	r0, [pc, #52]	; (8007af4 <cppFlip1ms+0x4c>)
 8007ac0:	f7fc fa3a 	bl	8003f38 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007ac4:	480c      	ldr	r0, [pc, #48]	; (8007af8 <cppFlip1ms+0x50>)
 8007ac6:	f7fe f985 	bl	8005dd4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007aca:	480c      	ldr	r0, [pc, #48]	; (8007afc <cppFlip1ms+0x54>)
 8007acc:	f7fd fb3c 	bl	8005148 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007ad0:	480b      	ldr	r0, [pc, #44]	; (8007b00 <cppFlip1ms+0x58>)
 8007ad2:	f7fd fd67 	bl	80055a4 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007ad6:	480b      	ldr	r0, [pc, #44]	; (8007b04 <cppFlip1ms+0x5c>)
 8007ad8:	f7fd fa02 	bl	8004ee0 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007adc:	4804      	ldr	r0, [pc, #16]	; (8007af0 <cppFlip1ms+0x48>)
 8007ade:	f7f9 fd63 	bl	80015a8 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007ae2:	bf00      	nop
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000244 	.word	0x20000244
 8007aec:	20000568 	.word	0x20000568
 8007af0:	20020928 	.word	0x20020928
 8007af4:	200209d4 	.word	0x200209d4
 8007af8:	20020950 	.word	0x20020950
 8007afc:	20020990 	.word	0x20020990
 8007b00:	2000053c 	.word	0x2000053c
 8007b04:	20000554 	.word	0x20000554

08007b08 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007b0c:	4802      	ldr	r0, [pc, #8]	; (8007b18 <cppFlip100ns+0x10>)
 8007b0e:	f7fa fc8d 	bl	800242c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000244 	.word	0x20000244

08007b1c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007b20:	480a      	ldr	r0, [pc, #40]	; (8007b4c <cppFlip10ms+0x30>)
 8007b22:	f7fc f93c 	bl	8003d9e <_ZN9LineTrace17getTargetVelocityEv>
 8007b26:	eef0 7a40 	vmov.f32	s15, s0
 8007b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8007b2e:	4808      	ldr	r0, [pc, #32]	; (8007b50 <cppFlip10ms+0x34>)
 8007b30:	f7fc ff38 	bl	80049a4 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007b34:	4807      	ldr	r0, [pc, #28]	; (8007b54 <cppFlip10ms+0x38>)
 8007b36:	f7fe f98f 	bl	8005e58 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007b3a:	eef0 7a40 	vmov.f32	s15, s0
 8007b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8007b42:	4803      	ldr	r0, [pc, #12]	; (8007b50 <cppFlip10ms+0x34>)
 8007b44:	f7fc ff7c 	bl	8004a40 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007b48:	bf00      	nop
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	200209d4 	.word	0x200209d4
 8007b50:	2000057c 	.word	0x2000057c
 8007b54:	20020950 	.word	0x20020950

08007b58 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	80fb      	strh	r3, [r7, #6]
	if(gpio_pin == GPIO_PIN_2){ //Right
 8007b62:	88fb      	ldrh	r3, [r7, #6]
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d103      	bne.n	8007b70 <cppExit+0x18>
		side_sensor.updateStatusRightExti();
 8007b68:	4807      	ldr	r0, [pc, #28]	; (8007b88 <cppExit+0x30>)
 8007b6a:	f7fd fcd3 	bl	8005514 <_ZN10SideSensor21updateStatusRightExtiEv>
	}
	else if(gpio_pin == GPIO_PIN_8){ //Left
		side_sensor.updateStatusLeftExti();
	}
}
 8007b6e:	e006      	b.n	8007b7e <cppExit+0x26>
	else if(gpio_pin == GPIO_PIN_8){ //Left
 8007b70:	88fb      	ldrh	r3, [r7, #6]
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b76:	d102      	bne.n	8007b7e <cppExit+0x26>
		side_sensor.updateStatusLeftExti();
 8007b78:	4803      	ldr	r0, [pc, #12]	; (8007b88 <cppExit+0x30>)
 8007b7a:	f7fd fcef 	bl	800555c <_ZN10SideSensor20updateStatusLeftExtiEv>
}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	2000053c 	.word	0x2000053c
 8007b8c:	00000000 	.word	0x00000000

08007b90 <cppLoop>:

void cppLoop(void)
{
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af02      	add	r7, sp, #8
	static int16_t selector_gain;
	static int16_t selector_run;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007b96:	4baf      	ldr	r3, [pc, #700]	; (8007e54 <cppLoop+0x2c4>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f3bf 8f5b 	dmb	ish
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d015      	beq.n	8007bde <cppLoop+0x4e>
 8007bb2:	48a8      	ldr	r0, [pc, #672]	; (8007e54 <cppLoop+0x2c4>)
 8007bb4:	f00c fe9d 	bl	80148f2 <__cxa_guard_acquire>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <cppLoop+0x4e>
 8007bc8:	48a3      	ldr	r0, [pc, #652]	; (8007e58 <cppLoop+0x2c8>)
 8007bca:	f7fc f816 	bl	8003bfa <_ZN9LineTrace5getKpEv>
 8007bce:	eef0 7a40 	vmov.f32	s15, s0
 8007bd2:	4ba2      	ldr	r3, [pc, #648]	; (8007e5c <cppLoop+0x2cc>)
 8007bd4:	edc3 7a00 	vstr	s15, [r3]
 8007bd8:	489e      	ldr	r0, [pc, #632]	; (8007e54 <cppLoop+0x2c4>)
 8007bda:	f00c fe96 	bl	801490a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007bde:	4ba0      	ldr	r3, [pc, #640]	; (8007e60 <cppLoop+0x2d0>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f3bf 8f5b 	dmb	ish
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d015      	beq.n	8007c26 <cppLoop+0x96>
 8007bfa:	4899      	ldr	r0, [pc, #612]	; (8007e60 <cppLoop+0x2d0>)
 8007bfc:	f00c fe79 	bl	80148f2 <__cxa_guard_acquire>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <cppLoop+0x96>
 8007c10:	4891      	ldr	r0, [pc, #580]	; (8007e58 <cppLoop+0x2c8>)
 8007c12:	f7fc f801 	bl	8003c18 <_ZN9LineTrace5getKiEv>
 8007c16:	eef0 7a40 	vmov.f32	s15, s0
 8007c1a:	4b92      	ldr	r3, [pc, #584]	; (8007e64 <cppLoop+0x2d4>)
 8007c1c:	edc3 7a00 	vstr	s15, [r3]
 8007c20:	488f      	ldr	r0, [pc, #572]	; (8007e60 <cppLoop+0x2d0>)
 8007c22:	f00c fe72 	bl	801490a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007c26:	4b90      	ldr	r3, [pc, #576]	; (8007e68 <cppLoop+0x2d8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f3bf 8f5b 	dmb	ish
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <cppLoop+0xde>
 8007c42:	4889      	ldr	r0, [pc, #548]	; (8007e68 <cppLoop+0x2d8>)
 8007c44:	f00c fe55 	bl	80148f2 <__cxa_guard_acquire>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	2300      	moveq	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00a      	beq.n	8007c6e <cppLoop+0xde>
 8007c58:	487f      	ldr	r0, [pc, #508]	; (8007e58 <cppLoop+0x2c8>)
 8007c5a:	f7fb ffec 	bl	8003c36 <_ZN9LineTrace5getKdEv>
 8007c5e:	eef0 7a40 	vmov.f32	s15, s0
 8007c62:	4b82      	ldr	r3, [pc, #520]	; (8007e6c <cppLoop+0x2dc>)
 8007c64:	edc3 7a00 	vstr	s15, [r3]
 8007c68:	487f      	ldr	r0, [pc, #508]	; (8007e68 <cppLoop+0x2d8>)
 8007c6a:	f00c fe4e 	bl	801490a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007c6e:	4b80      	ldr	r3, [pc, #512]	; (8007e70 <cppLoop+0x2e0>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	f3bf 8f5b 	dmb	ish
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 0301 	and.w	r3, r3, #1
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d015      	beq.n	8007cb6 <cppLoop+0x126>
 8007c8a:	4879      	ldr	r0, [pc, #484]	; (8007e70 <cppLoop+0x2e0>)
 8007c8c:	f00c fe31 	bl	80148f2 <__cxa_guard_acquire>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	bf14      	ite	ne
 8007c96:	2301      	movne	r3, #1
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <cppLoop+0x126>
 8007ca0:	486d      	ldr	r0, [pc, #436]	; (8007e58 <cppLoop+0x2c8>)
 8007ca2:	f7fb fff0 	bl	8003c86 <_ZN9LineTrace9getKpSlowEv>
 8007ca6:	eef0 7a40 	vmov.f32	s15, s0
 8007caa:	4b72      	ldr	r3, [pc, #456]	; (8007e74 <cppLoop+0x2e4>)
 8007cac:	edc3 7a00 	vstr	s15, [r3]
 8007cb0:	486f      	ldr	r0, [pc, #444]	; (8007e70 <cppLoop+0x2e0>)
 8007cb2:	f00c fe2a 	bl	801490a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007cb6:	4b70      	ldr	r3, [pc, #448]	; (8007e78 <cppLoop+0x2e8>)
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	f3bf 8f5b 	dmb	ish
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2301      	moveq	r3, #1
 8007cca:	2300      	movne	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d015      	beq.n	8007cfe <cppLoop+0x16e>
 8007cd2:	4869      	ldr	r0, [pc, #420]	; (8007e78 <cppLoop+0x2e8>)
 8007cd4:	f00c fe0d 	bl	80148f2 <__cxa_guard_acquire>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	bf14      	ite	ne
 8007cde:	2301      	movne	r3, #1
 8007ce0:	2300      	moveq	r3, #0
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <cppLoop+0x16e>
 8007ce8:	485b      	ldr	r0, [pc, #364]	; (8007e58 <cppLoop+0x2c8>)
 8007cea:	f7fb ffdb 	bl	8003ca4 <_ZN9LineTrace9getKiSlowEv>
 8007cee:	eef0 7a40 	vmov.f32	s15, s0
 8007cf2:	4b62      	ldr	r3, [pc, #392]	; (8007e7c <cppLoop+0x2ec>)
 8007cf4:	edc3 7a00 	vstr	s15, [r3]
 8007cf8:	485f      	ldr	r0, [pc, #380]	; (8007e78 <cppLoop+0x2e8>)
 8007cfa:	f00c fe06 	bl	801490a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007cfe:	4b60      	ldr	r3, [pc, #384]	; (8007e80 <cppLoop+0x2f0>)
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	f3bf 8f5b 	dmb	ish
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	bf0c      	ite	eq
 8007d10:	2301      	moveq	r3, #1
 8007d12:	2300      	movne	r3, #0
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d015      	beq.n	8007d46 <cppLoop+0x1b6>
 8007d1a:	4859      	ldr	r0, [pc, #356]	; (8007e80 <cppLoop+0x2f0>)
 8007d1c:	f00c fde9 	bl	80148f2 <__cxa_guard_acquire>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	bf14      	ite	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	2300      	moveq	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00a      	beq.n	8007d46 <cppLoop+0x1b6>
 8007d30:	4849      	ldr	r0, [pc, #292]	; (8007e58 <cppLoop+0x2c8>)
 8007d32:	f7fb ffc6 	bl	8003cc2 <_ZN9LineTrace9getKdSlowEv>
 8007d36:	eef0 7a40 	vmov.f32	s15, s0
 8007d3a:	4b52      	ldr	r3, [pc, #328]	; (8007e84 <cppLoop+0x2f4>)
 8007d3c:	edc3 7a00 	vstr	s15, [r3]
 8007d40:	484f      	ldr	r0, [pc, #316]	; (8007e80 <cppLoop+0x2f0>)
 8007d42:	f00c fde2 	bl	801490a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007d46:	4b50      	ldr	r3, [pc, #320]	; (8007e88 <cppLoop+0x2f8>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	f3bf 8f5b 	dmb	ish
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 0301 	and.w	r3, r3, #1
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bf0c      	ite	eq
 8007d58:	2301      	moveq	r3, #1
 8007d5a:	2300      	movne	r3, #0
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d015      	beq.n	8007d8e <cppLoop+0x1fe>
 8007d62:	4849      	ldr	r0, [pc, #292]	; (8007e88 <cppLoop+0x2f8>)
 8007d64:	f00c fdc5 	bl	80148f2 <__cxa_guard_acquire>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	bf14      	ite	ne
 8007d6e:	2301      	movne	r3, #1
 8007d70:	2300      	moveq	r3, #0
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d00a      	beq.n	8007d8e <cppLoop+0x1fe>
 8007d78:	4837      	ldr	r0, [pc, #220]	; (8007e58 <cppLoop+0x2c8>)
 8007d7a:	f7fc f810 	bl	8003d9e <_ZN9LineTrace17getTargetVelocityEv>
 8007d7e:	eef0 7a40 	vmov.f32	s15, s0
 8007d82:	4b42      	ldr	r3, [pc, #264]	; (8007e8c <cppLoop+0x2fc>)
 8007d84:	edc3 7a00 	vstr	s15, [r3]
 8007d88:	483f      	ldr	r0, [pc, #252]	; (8007e88 <cppLoop+0x2f8>)
 8007d8a:	f00c fdbe 	bl	801490a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007d8e:	4b40      	ldr	r3, [pc, #256]	; (8007e90 <cppLoop+0x300>)
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f3bf 8f5b 	dmb	ish
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	f003 0301 	and.w	r3, r3, #1
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bf0c      	ite	eq
 8007da0:	2301      	moveq	r3, #1
 8007da2:	2300      	movne	r3, #0
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d015      	beq.n	8007dd6 <cppLoop+0x246>
 8007daa:	4839      	ldr	r0, [pc, #228]	; (8007e90 <cppLoop+0x300>)
 8007dac:	f00c fda1 	bl	80148f2 <__cxa_guard_acquire>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bf14      	ite	ne
 8007db6:	2301      	movne	r3, #1
 8007db8:	2300      	moveq	r3, #0
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <cppLoop+0x246>
 8007dc0:	4825      	ldr	r0, [pc, #148]	; (8007e58 <cppLoop+0x2c8>)
 8007dc2:	f7fb fffc 	bl	8003dbe <_ZN9LineTrace14getMaxVelocityEv>
 8007dc6:	eef0 7a40 	vmov.f32	s15, s0
 8007dca:	4b32      	ldr	r3, [pc, #200]	; (8007e94 <cppLoop+0x304>)
 8007dcc:	edc3 7a00 	vstr	s15, [r3]
 8007dd0:	482f      	ldr	r0, [pc, #188]	; (8007e90 <cppLoop+0x300>)
 8007dd2:	f00c fd9a 	bl	801490a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007dd6:	4b30      	ldr	r3, [pc, #192]	; (8007e98 <cppLoop+0x308>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f3bf 8f5b 	dmb	ish
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	bf0c      	ite	eq
 8007de8:	2301      	moveq	r3, #1
 8007dea:	2300      	movne	r3, #0
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d015      	beq.n	8007e1e <cppLoop+0x28e>
 8007df2:	4829      	ldr	r0, [pc, #164]	; (8007e98 <cppLoop+0x308>)
 8007df4:	f00c fd7d 	bl	80148f2 <__cxa_guard_acquire>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bf14      	ite	ne
 8007dfe:	2301      	movne	r3, #1
 8007e00:	2300      	moveq	r3, #0
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00a      	beq.n	8007e1e <cppLoop+0x28e>
 8007e08:	4813      	ldr	r0, [pc, #76]	; (8007e58 <cppLoop+0x2c8>)
 8007e0a:	f7fb ffe8 	bl	8003dde <_ZN9LineTrace15getMaxVelocity2Ev>
 8007e0e:	eef0 7a40 	vmov.f32	s15, s0
 8007e12:	4b22      	ldr	r3, [pc, #136]	; (8007e9c <cppLoop+0x30c>)
 8007e14:	edc3 7a00 	vstr	s15, [r3]
 8007e18:	481f      	ldr	r0, [pc, #124]	; (8007e98 <cppLoop+0x308>)
 8007e1a:	f00c fd76 	bl	801490a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007e1e:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <cppLoop+0x310>)
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	f3bf 8f5b 	dmb	ish
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	bf0c      	ite	eq
 8007e30:	2301      	moveq	r3, #1
 8007e32:	2300      	movne	r3, #0
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d03f      	beq.n	8007eba <cppLoop+0x32a>
 8007e3a:	4819      	ldr	r0, [pc, #100]	; (8007ea0 <cppLoop+0x310>)
 8007e3c:	f00c fd59 	bl	80148f2 <__cxa_guard_acquire>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	bf14      	ite	ne
 8007e46:	2301      	movne	r3, #1
 8007e48:	2300      	moveq	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d034      	beq.n	8007eba <cppLoop+0x32a>
 8007e50:	e028      	b.n	8007ea4 <cppLoop+0x314>
 8007e52:	bf00      	nop
 8007e54:	20045258 	.word	0x20045258
 8007e58:	200209d4 	.word	0x200209d4
 8007e5c:	20045254 	.word	0x20045254
 8007e60:	20045260 	.word	0x20045260
 8007e64:	2004525c 	.word	0x2004525c
 8007e68:	20045268 	.word	0x20045268
 8007e6c:	20045264 	.word	0x20045264
 8007e70:	20045270 	.word	0x20045270
 8007e74:	2004526c 	.word	0x2004526c
 8007e78:	20045278 	.word	0x20045278
 8007e7c:	20045274 	.word	0x20045274
 8007e80:	20045280 	.word	0x20045280
 8007e84:	2004527c 	.word	0x2004527c
 8007e88:	20045288 	.word	0x20045288
 8007e8c:	20045284 	.word	0x20045284
 8007e90:	20045290 	.word	0x20045290
 8007e94:	2004528c 	.word	0x2004528c
 8007e98:	20045298 	.word	0x20045298
 8007e9c:	20045294 	.word	0x20045294
 8007ea0:	200452a0 	.word	0x200452a0
 8007ea4:	48b6      	ldr	r0, [pc, #728]	; (8008180 <cppLoop+0x5f0>)
 8007ea6:	f7fb ffaa 	bl	8003dfe <_ZN9LineTrace14getMinVelocityEv>
 8007eaa:	eef0 7a40 	vmov.f32	s15, s0
 8007eae:	4bb5      	ldr	r3, [pc, #724]	; (8008184 <cppLoop+0x5f4>)
 8007eb0:	edc3 7a00 	vstr	s15, [r3]
 8007eb4:	48b4      	ldr	r0, [pc, #720]	; (8008188 <cppLoop+0x5f8>)
 8007eb6:	f00c fd28 	bl	801490a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007eba:	4bb4      	ldr	r3, [pc, #720]	; (800818c <cppLoop+0x5fc>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	f3bf 8f5b 	dmb	ish
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	bf0c      	ite	eq
 8007ecc:	2301      	moveq	r3, #1
 8007ece:	2300      	movne	r3, #0
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d015      	beq.n	8007f02 <cppLoop+0x372>
 8007ed6:	48ad      	ldr	r0, [pc, #692]	; (800818c <cppLoop+0x5fc>)
 8007ed8:	f00c fd0b 	bl	80148f2 <__cxa_guard_acquire>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	bf14      	ite	ne
 8007ee2:	2301      	movne	r3, #1
 8007ee4:	2300      	moveq	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00a      	beq.n	8007f02 <cppLoop+0x372>
 8007eec:	48a4      	ldr	r0, [pc, #656]	; (8008180 <cppLoop+0x5f0>)
 8007eee:	f7fb ff96 	bl	8003e1e <_ZN9LineTrace15getMinVelocity2Ev>
 8007ef2:	eef0 7a40 	vmov.f32	s15, s0
 8007ef6:	4ba6      	ldr	r3, [pc, #664]	; (8008190 <cppLoop+0x600>)
 8007ef8:	edc3 7a00 	vstr	s15, [r3]
 8007efc:	48a3      	ldr	r0, [pc, #652]	; (800818c <cppLoop+0x5fc>)
 8007efe:	f00c fd04 	bl	801490a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007f02:	4ba4      	ldr	r3, [pc, #656]	; (8008194 <cppLoop+0x604>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	f3bf 8f5b 	dmb	ish
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	f003 0301 	and.w	r3, r3, #1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	bf0c      	ite	eq
 8007f14:	2301      	moveq	r3, #1
 8007f16:	2300      	movne	r3, #0
 8007f18:	b2db      	uxtb	r3, r3
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d015      	beq.n	8007f4a <cppLoop+0x3ba>
 8007f1e:	489d      	ldr	r0, [pc, #628]	; (8008194 <cppLoop+0x604>)
 8007f20:	f00c fce7 	bl	80148f2 <__cxa_guard_acquire>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bf14      	ite	ne
 8007f2a:	2301      	movne	r3, #1
 8007f2c:	2300      	moveq	r3, #0
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00a      	beq.n	8007f4a <cppLoop+0x3ba>
 8007f34:	4892      	ldr	r0, [pc, #584]	; (8008180 <cppLoop+0x5f0>)
 8007f36:	f7fb ffb6 	bl	8003ea6 <_ZN9LineTrace9getMaxAccEv>
 8007f3a:	eef0 7a40 	vmov.f32	s15, s0
 8007f3e:	4b96      	ldr	r3, [pc, #600]	; (8008198 <cppLoop+0x608>)
 8007f40:	edc3 7a00 	vstr	s15, [r3]
 8007f44:	4893      	ldr	r0, [pc, #588]	; (8008194 <cppLoop+0x604>)
 8007f46:	f00c fce0 	bl	801490a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007f4a:	4b94      	ldr	r3, [pc, #592]	; (800819c <cppLoop+0x60c>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	f3bf 8f5b 	dmb	ish
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0301 	and.w	r3, r3, #1
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	bf0c      	ite	eq
 8007f5c:	2301      	moveq	r3, #1
 8007f5e:	2300      	movne	r3, #0
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d015      	beq.n	8007f92 <cppLoop+0x402>
 8007f66:	488d      	ldr	r0, [pc, #564]	; (800819c <cppLoop+0x60c>)
 8007f68:	f00c fcc3 	bl	80148f2 <__cxa_guard_acquire>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bf14      	ite	ne
 8007f72:	2301      	movne	r3, #1
 8007f74:	2300      	moveq	r3, #0
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <cppLoop+0x402>
 8007f7c:	4880      	ldr	r0, [pc, #512]	; (8008180 <cppLoop+0x5f0>)
 8007f7e:	f7fb ffc8 	bl	8003f12 <_ZN9LineTrace9getMaxDecEv>
 8007f82:	eef0 7a40 	vmov.f32	s15, s0
 8007f86:	4b86      	ldr	r3, [pc, #536]	; (80081a0 <cppLoop+0x610>)
 8007f88:	edc3 7a00 	vstr	s15, [r3]
 8007f8c:	4883      	ldr	r0, [pc, #524]	; (800819c <cppLoop+0x60c>)
 8007f8e:	f00c fcbc 	bl	801490a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007f92:	4b84      	ldr	r3, [pc, #528]	; (80081a4 <cppLoop+0x614>)
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	f3bf 8f5b 	dmb	ish
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0301 	and.w	r3, r3, #1
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	bf0c      	ite	eq
 8007fa4:	2301      	moveq	r3, #1
 8007fa6:	2300      	movne	r3, #0
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d015      	beq.n	8007fda <cppLoop+0x44a>
 8007fae:	487d      	ldr	r0, [pc, #500]	; (80081a4 <cppLoop+0x614>)
 8007fb0:	f00c fc9f 	bl	80148f2 <__cxa_guard_acquire>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <cppLoop+0x44a>
 8007fc4:	486e      	ldr	r0, [pc, #440]	; (8008180 <cppLoop+0x5f0>)
 8007fc6:	f7fb ff92 	bl	8003eee <_ZN9LineTrace10getMaxAcc2Ev>
 8007fca:	eef0 7a40 	vmov.f32	s15, s0
 8007fce:	4b76      	ldr	r3, [pc, #472]	; (80081a8 <cppLoop+0x618>)
 8007fd0:	edc3 7a00 	vstr	s15, [r3]
 8007fd4:	4873      	ldr	r0, [pc, #460]	; (80081a4 <cppLoop+0x614>)
 8007fd6:	f00c fc98 	bl	801490a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007fda:	4b74      	ldr	r3, [pc, #464]	; (80081ac <cppLoop+0x61c>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f3bf 8f5b 	dmb	ish
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	bf0c      	ite	eq
 8007fec:	2301      	moveq	r3, #1
 8007fee:	2300      	movne	r3, #0
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d015      	beq.n	8008022 <cppLoop+0x492>
 8007ff6:	486d      	ldr	r0, [pc, #436]	; (80081ac <cppLoop+0x61c>)
 8007ff8:	f00c fc7b 	bl	80148f2 <__cxa_guard_acquire>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bf14      	ite	ne
 8008002:	2301      	movne	r3, #1
 8008004:	2300      	moveq	r3, #0
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d00a      	beq.n	8008022 <cppLoop+0x492>
 800800c:	485c      	ldr	r0, [pc, #368]	; (8008180 <cppLoop+0x5f0>)
 800800e:	f7fb ff5c 	bl	8003eca <_ZN9LineTrace10getMaxDec2Ev>
 8008012:	eef0 7a40 	vmov.f32	s15, s0
 8008016:	4b66      	ldr	r3, [pc, #408]	; (80081b0 <cppLoop+0x620>)
 8008018:	edc3 7a00 	vstr	s15, [r3]
 800801c:	4863      	ldr	r0, [pc, #396]	; (80081ac <cppLoop+0x61c>)
 800801e:	f00c fc74 	bl	801490a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8008022:	4864      	ldr	r0, [pc, #400]	; (80081b4 <cppLoop+0x624>)
 8008024:	f7fd f9fe 	bl	8005424 <_ZN12RotarySwitch8getValueEv>
 8008028:	4603      	mov	r3, r0
 800802a:	2b0f      	cmp	r3, #15
 800802c:	f201 8617 	bhi.w	8009c5e <cppLoop+0x20ce>
 8008030:	a201      	add	r2, pc, #4	; (adr r2, 8008038 <cppLoop+0x4a8>)
 8008032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008036:	bf00      	nop
 8008038:	08008079 	.word	0x08008079
 800803c:	08008445 	.word	0x08008445
 8008040:	080087b9 	.word	0x080087b9
 8008044:	08008a85 	.word	0x08008a85
 8008048:	08008e6b 	.word	0x08008e6b
 800804c:	08009285 	.word	0x08009285
 8008050:	0800950b 	.word	0x0800950b
 8008054:	08009c5f 	.word	0x08009c5f
 8008058:	08009c5f 	.word	0x08009c5f
 800805c:	08009c5f 	.word	0x08009c5f
 8008060:	0800978d 	.word	0x0800978d
 8008064:	08009849 	.word	0x08009849
 8008068:	080098e9 	.word	0x080098e9
 800806c:	0800996f 	.word	0x0800996f
 8008070:	08009aad 	.word	0x08009aad
 8008074:	08009b87 	.word	0x08009b87
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 1 -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 0:
		led.fullColor('W');
 8008078:	2157      	movs	r1, #87	; 0x57
 800807a:	484f      	ldr	r0, [pc, #316]	; (80081b8 <cppLoop+0x628>)
 800807c:	f7fa f86a 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008080:	f7f9 f80e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008084:	2100      	movs	r1, #0
 8008086:	2000      	movs	r0, #0
 8008088:	f7f9 f81a 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*10000));
 800808c:	483c      	ldr	r0, [pc, #240]	; (8008180 <cppLoop+0x5f0>)
 800808e:	f7fb fdfa 	bl	8003c86 <_ZN9LineTrace9getKpSlowEv>
 8008092:	eeb0 7a40 	vmov.f32	s14, s0
 8008096:	eddf 7a49 	vldr	s15, [pc, #292]	; 80081bc <cppLoop+0x62c>
 800809a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800809e:	eeb0 0a67 	vmov.f32	s0, s15
 80080a2:	f7fa fc19 	bl	80028d8 <_ZSt3absf>
 80080a6:	ee10 3a10 	vmov	r3, s0
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7f8 fa64 	bl	8000578 <__aeabi_f2d>
 80080b0:	4603      	mov	r3, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	461a      	mov	r2, r3
 80080b6:	4623      	mov	r3, r4
 80080b8:	4841      	ldr	r0, [pc, #260]	; (80081c0 <cppLoop+0x630>)
 80080ba:	f7f9 f82b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80080be:	2101      	movs	r1, #1
 80080c0:	2000      	movs	r0, #0
 80080c2:	f7f8 fffd 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*1000), abs(line_trace.getKdSlow()*100000));
 80080c6:	482e      	ldr	r0, [pc, #184]	; (8008180 <cppLoop+0x5f0>)
 80080c8:	f7fb fdec 	bl	8003ca4 <_ZN9LineTrace9getKiSlowEv>
 80080cc:	eeb0 7a40 	vmov.f32	s14, s0
 80080d0:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80081c4 <cppLoop+0x634>
 80080d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080d8:	eeb0 0a67 	vmov.f32	s0, s15
 80080dc:	f7fa fbfc 	bl	80028d8 <_ZSt3absf>
 80080e0:	ee10 3a10 	vmov	r3, s0
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7f8 fa47 	bl	8000578 <__aeabi_f2d>
 80080ea:	4605      	mov	r5, r0
 80080ec:	460e      	mov	r6, r1
 80080ee:	4824      	ldr	r0, [pc, #144]	; (8008180 <cppLoop+0x5f0>)
 80080f0:	f7fb fde7 	bl	8003cc2 <_ZN9LineTrace9getKdSlowEv>
 80080f4:	eeb0 7a40 	vmov.f32	s14, s0
 80080f8:	eddf 7a33 	vldr	s15, [pc, #204]	; 80081c8 <cppLoop+0x638>
 80080fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008100:	eeb0 0a67 	vmov.f32	s0, s15
 8008104:	f7fa fbe8 	bl	80028d8 <_ZSt3absf>
 8008108:	ee10 3a10 	vmov	r3, s0
 800810c:	4618      	mov	r0, r3
 800810e:	f7f8 fa33 	bl	8000578 <__aeabi_f2d>
 8008112:	4603      	mov	r3, r0
 8008114:	460c      	mov	r4, r1
 8008116:	e9cd 3400 	strd	r3, r4, [sp]
 800811a:	462a      	mov	r2, r5
 800811c:	4633      	mov	r3, r6
 800811e:	482b      	ldr	r0, [pc, #172]	; (80081cc <cppLoop+0x63c>)
 8008120:	f7f8 fff8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8008124:	482a      	ldr	r0, [pc, #168]	; (80081d0 <cppLoop+0x640>)
 8008126:	f7f9 ffb1 	bl	800208c <_ZN8JoyStick8getValueEv>
 800812a:	4603      	mov	r3, r0
 800812c:	2b04      	cmp	r3, #4
 800812e:	bf0c      	ite	eq
 8008130:	2301      	moveq	r3, #1
 8008132:	2300      	movne	r3, #0
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d04e      	beq.n	80081d8 <cppLoop+0x648>
			led.LR(-1, 1);
 800813a:	2201      	movs	r2, #1
 800813c:	f04f 31ff 	mov.w	r1, #4294967295
 8008140:	481d      	ldr	r0, [pc, #116]	; (80081b8 <cppLoop+0x628>)
 8008142:	f7fa f8c3 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008146:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800814a:	f001 fed5 	bl	8009ef8 <HAL_Delay>

			selector_gain++;
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <cppLoop+0x644>)
 8008150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008154:	b29b      	uxth	r3, r3
 8008156:	3301      	adds	r3, #1
 8008158:	b29b      	uxth	r3, r3
 800815a:	b21a      	sxth	r2, r3
 800815c:	4b1d      	ldr	r3, [pc, #116]	; (80081d4 <cppLoop+0x644>)
 800815e:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 8008160:	4b1c      	ldr	r3, [pc, #112]	; (80081d4 <cppLoop+0x644>)
 8008162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008166:	2b02      	cmp	r3, #2
 8008168:	dd02      	ble.n	8008170 <cppLoop+0x5e0>
 800816a:	4b1a      	ldr	r3, [pc, #104]	; (80081d4 <cppLoop+0x644>)
 800816c:	2200      	movs	r2, #0
 800816e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008170:	2200      	movs	r2, #0
 8008172:	f04f 31ff 	mov.w	r1, #4294967295
 8008176:	4810      	ldr	r0, [pc, #64]	; (80081b8 <cppLoop+0x628>)
 8008178:	f7fa f8a8 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 800817c:	f001 bd71 	b.w	8009c62 <cppLoop+0x20d2>
 8008180:	200209d4 	.word	0x200209d4
 8008184:	2004529c 	.word	0x2004529c
 8008188:	200452a0 	.word	0x200452a0
 800818c:	200452a8 	.word	0x200452a8
 8008190:	200452a4 	.word	0x200452a4
 8008194:	200452b0 	.word	0x200452b0
 8008198:	200452ac 	.word	0x200452ac
 800819c:	200452b8 	.word	0x200452b8
 80081a0:	200452b4 	.word	0x200452b4
 80081a4:	200452c0 	.word	0x200452c0
 80081a8:	200452bc 	.word	0x200452bc
 80081ac:	200452c8 	.word	0x200452c8
 80081b0:	200452c4 	.word	0x200452c4
 80081b4:	20000550 	.word	0x20000550
 80081b8:	20000558 	.word	0x20000558
 80081bc:	461c4000 	.word	0x461c4000
 80081c0:	08018f68 	.word	0x08018f68
 80081c4:	447a0000 	.word	0x447a0000
 80081c8:	47c35000 	.word	0x47c35000
 80081cc:	08018f74 	.word	0x08018f74
 80081d0:	2000054c 	.word	0x2000054c
 80081d4:	20045248 	.word	0x20045248
		else if(joy_stick.getValue() == JOY_R){
 80081d8:	488f      	ldr	r0, [pc, #572]	; (8008418 <cppLoop+0x888>)
 80081da:	f7f9 ff57 	bl	800208c <_ZN8JoyStick8getValueEv>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b10      	cmp	r3, #16
 80081e2:	bf0c      	ite	eq
 80081e4:	2301      	moveq	r3, #1
 80081e6:	2300      	movne	r3, #0
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d059      	beq.n	80082a2 <cppLoop+0x712>
			led.LR(-1, 1);
 80081ee:	2201      	movs	r2, #1
 80081f0:	f04f 31ff 	mov.w	r1, #4294967295
 80081f4:	4889      	ldr	r0, [pc, #548]	; (800841c <cppLoop+0x88c>)
 80081f6:	f7fa f869 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081fa:	2064      	movs	r0, #100	; 0x64
 80081fc:	f001 fe7c 	bl	8009ef8 <HAL_Delay>
			if(selector_gain == 0){
 8008200:	4b87      	ldr	r3, [pc, #540]	; (8008420 <cppLoop+0x890>)
 8008202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d113      	bne.n	8008232 <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.000001;
 800820a:	4b86      	ldr	r3, [pc, #536]	; (8008424 <cppLoop+0x894>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f7f8 f9b2 	bl	8000578 <__aeabi_f2d>
 8008214:	a37a      	add	r3, pc, #488	; (adr r3, 8008400 <cppLoop+0x870>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	f7f8 f84f 	bl	80002bc <__adddf3>
 800821e:	4603      	mov	r3, r0
 8008220:	460c      	mov	r4, r1
 8008222:	4618      	mov	r0, r3
 8008224:	4621      	mov	r1, r4
 8008226:	f7f8 fcf7 	bl	8000c18 <__aeabi_d2f>
 800822a:	4602      	mov	r2, r0
 800822c:	4b7d      	ldr	r3, [pc, #500]	; (8008424 <cppLoop+0x894>)
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	e02b      	b.n	800828a <cppLoop+0x6fa>
			else if(selector_gain == 1){
 8008232:	4b7b      	ldr	r3, [pc, #492]	; (8008420 <cppLoop+0x890>)
 8008234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d113      	bne.n	8008264 <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.00001;
 800823c:	4b7a      	ldr	r3, [pc, #488]	; (8008428 <cppLoop+0x898>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4618      	mov	r0, r3
 8008242:	f7f8 f999 	bl	8000578 <__aeabi_f2d>
 8008246:	a370      	add	r3, pc, #448	; (adr r3, 8008408 <cppLoop+0x878>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f836 	bl	80002bc <__adddf3>
 8008250:	4603      	mov	r3, r0
 8008252:	460c      	mov	r4, r1
 8008254:	4618      	mov	r0, r3
 8008256:	4621      	mov	r1, r4
 8008258:	f7f8 fcde 	bl	8000c18 <__aeabi_d2f>
 800825c:	4602      	mov	r2, r0
 800825e:	4b72      	ldr	r3, [pc, #456]	; (8008428 <cppLoop+0x898>)
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e012      	b.n	800828a <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.0000001;
 8008264:	4b71      	ldr	r3, [pc, #452]	; (800842c <cppLoop+0x89c>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4618      	mov	r0, r3
 800826a:	f7f8 f985 	bl	8000578 <__aeabi_f2d>
 800826e:	a368      	add	r3, pc, #416	; (adr r3, 8008410 <cppLoop+0x880>)
 8008270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008274:	f7f8 f822 	bl	80002bc <__adddf3>
 8008278:	4603      	mov	r3, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4618      	mov	r0, r3
 800827e:	4621      	mov	r1, r4
 8008280:	f7f8 fcca 	bl	8000c18 <__aeabi_d2f>
 8008284:	4602      	mov	r2, r0
 8008286:	4b69      	ldr	r3, [pc, #420]	; (800842c <cppLoop+0x89c>)
 8008288:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800828a:	2152      	movs	r1, #82	; 0x52
 800828c:	4863      	ldr	r0, [pc, #396]	; (800841c <cppLoop+0x88c>)
 800828e:	f7f9 ff61 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008292:	2200      	movs	r2, #0
 8008294:	f04f 31ff 	mov.w	r1, #4294967295
 8008298:	4860      	ldr	r0, [pc, #384]	; (800841c <cppLoop+0x88c>)
 800829a:	f7fa f817 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800829e:	f001 bce0 	b.w	8009c62 <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_L){
 80082a2:	485d      	ldr	r0, [pc, #372]	; (8008418 <cppLoop+0x888>)
 80082a4:	f7f9 fef2 	bl	800208c <_ZN8JoyStick8getValueEv>
 80082a8:	4603      	mov	r3, r0
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	bf0c      	ite	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	2300      	movne	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d059      	beq.n	800836c <cppLoop+0x7dc>
			led.LR(-1, 1);
 80082b8:	2201      	movs	r2, #1
 80082ba:	f04f 31ff 	mov.w	r1, #4294967295
 80082be:	4857      	ldr	r0, [pc, #348]	; (800841c <cppLoop+0x88c>)
 80082c0:	f7fa f804 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082c4:	2064      	movs	r0, #100	; 0x64
 80082c6:	f001 fe17 	bl	8009ef8 <HAL_Delay>
			if(selector_gain == 0){
 80082ca:	4b55      	ldr	r3, [pc, #340]	; (8008420 <cppLoop+0x890>)
 80082cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d113      	bne.n	80082fc <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.000001;
 80082d4:	4b53      	ldr	r3, [pc, #332]	; (8008424 <cppLoop+0x894>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7f8 f94d 	bl	8000578 <__aeabi_f2d>
 80082de:	a348      	add	r3, pc, #288	; (adr r3, 8008400 <cppLoop+0x870>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f7 ffe8 	bl	80002b8 <__aeabi_dsub>
 80082e8:	4603      	mov	r3, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	4618      	mov	r0, r3
 80082ee:	4621      	mov	r1, r4
 80082f0:	f7f8 fc92 	bl	8000c18 <__aeabi_d2f>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4b4b      	ldr	r3, [pc, #300]	; (8008424 <cppLoop+0x894>)
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e02b      	b.n	8008354 <cppLoop+0x7c4>
			else if(selector_gain == 1){
 80082fc:	4b48      	ldr	r3, [pc, #288]	; (8008420 <cppLoop+0x890>)
 80082fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d113      	bne.n	800832e <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.00001;
 8008306:	4b48      	ldr	r3, [pc, #288]	; (8008428 <cppLoop+0x898>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f7f8 f934 	bl	8000578 <__aeabi_f2d>
 8008310:	a33d      	add	r3, pc, #244	; (adr r3, 8008408 <cppLoop+0x878>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f7 ffcf 	bl	80002b8 <__aeabi_dsub>
 800831a:	4603      	mov	r3, r0
 800831c:	460c      	mov	r4, r1
 800831e:	4618      	mov	r0, r3
 8008320:	4621      	mov	r1, r4
 8008322:	f7f8 fc79 	bl	8000c18 <__aeabi_d2f>
 8008326:	4602      	mov	r2, r0
 8008328:	4b3f      	ldr	r3, [pc, #252]	; (8008428 <cppLoop+0x898>)
 800832a:	601a      	str	r2, [r3, #0]
 800832c:	e012      	b.n	8008354 <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.0000001;
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <cppLoop+0x89c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 f920 	bl	8000578 <__aeabi_f2d>
 8008338:	a335      	add	r3, pc, #212	; (adr r3, 8008410 <cppLoop+0x880>)
 800833a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833e:	f7f7 ffbb 	bl	80002b8 <__aeabi_dsub>
 8008342:	4603      	mov	r3, r0
 8008344:	460c      	mov	r4, r1
 8008346:	4618      	mov	r0, r3
 8008348:	4621      	mov	r1, r4
 800834a:	f7f8 fc65 	bl	8000c18 <__aeabi_d2f>
 800834e:	4602      	mov	r2, r0
 8008350:	4b36      	ldr	r3, [pc, #216]	; (800842c <cppLoop+0x89c>)
 8008352:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008354:	2152      	movs	r1, #82	; 0x52
 8008356:	4831      	ldr	r0, [pc, #196]	; (800841c <cppLoop+0x88c>)
 8008358:	f7f9 fefc 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800835c:	2200      	movs	r2, #0
 800835e:	f04f 31ff 	mov.w	r1, #4294967295
 8008362:	482e      	ldr	r0, [pc, #184]	; (800841c <cppLoop+0x88c>)
 8008364:	f7f9 ffb2 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008368:	f001 bc7b 	b.w	8009c62 <cppLoop+0x20d2>
		else if(joy_stick.getValue() == JOY_C){
 800836c:	482a      	ldr	r0, [pc, #168]	; (8008418 <cppLoop+0x888>)
 800836e:	f7f9 fe8d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008372:	4603      	mov	r3, r0
 8008374:	2b02      	cmp	r3, #2
 8008376:	bf0c      	ite	eq
 8008378:	2301      	moveq	r3, #1
 800837a:	2300      	movne	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	f001 846f 	beq.w	8009c62 <cppLoop+0x20d2>
			led.LR(-1, 1);
 8008384:	2201      	movs	r2, #1
 8008386:	f04f 31ff 	mov.w	r1, #4294967295
 800838a:	4824      	ldr	r0, [pc, #144]	; (800841c <cppLoop+0x88c>)
 800838c:	f7f9 ff9e 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008390:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008394:	f001 fdb0 	bl	8009ef8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008398:	2300      	movs	r3, #0
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	4b21      	ldr	r3, [pc, #132]	; (8008424 <cppLoop+0x894>)
 800839e:	2201      	movs	r2, #1
 80083a0:	4923      	ldr	r1, [pc, #140]	; (8008430 <cppLoop+0x8a0>)
 80083a2:	4824      	ldr	r0, [pc, #144]	; (8008434 <cppLoop+0x8a4>)
 80083a4:	f7f9 fa5a 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80083a8:	2300      	movs	r3, #0
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4b1e      	ldr	r3, [pc, #120]	; (8008428 <cppLoop+0x898>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	4921      	ldr	r1, [pc, #132]	; (8008438 <cppLoop+0x8a8>)
 80083b2:	4820      	ldr	r0, [pc, #128]	; (8008434 <cppLoop+0x8a4>)
 80083b4:	f7f9 fa52 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80083b8:	2300      	movs	r3, #0
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4b1b      	ldr	r3, [pc, #108]	; (800842c <cppLoop+0x89c>)
 80083be:	2201      	movs	r2, #1
 80083c0:	491e      	ldr	r1, [pc, #120]	; (800843c <cppLoop+0x8ac>)
 80083c2:	481c      	ldr	r0, [pc, #112]	; (8008434 <cppLoop+0x8a4>)
 80083c4:	f7f9 fa4a 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80083c8:	4b16      	ldr	r3, [pc, #88]	; (8008424 <cppLoop+0x894>)
 80083ca:	edd3 7a00 	vldr	s15, [r3]
 80083ce:	4b16      	ldr	r3, [pc, #88]	; (8008428 <cppLoop+0x898>)
 80083d0:	ed93 7a00 	vldr	s14, [r3]
 80083d4:	4b15      	ldr	r3, [pc, #84]	; (800842c <cppLoop+0x89c>)
 80083d6:	edd3 6a00 	vldr	s13, [r3]
 80083da:	eeb0 1a66 	vmov.f32	s2, s13
 80083de:	eef0 0a47 	vmov.f32	s1, s14
 80083e2:	eeb0 0a67 	vmov.f32	s0, s15
 80083e6:	4816      	ldr	r0, [pc, #88]	; (8008440 <cppLoop+0x8b0>)
 80083e8:	f7fb fc34 	bl	8003c54 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 80083ec:	2200      	movs	r2, #0
 80083ee:	f04f 31ff 	mov.w	r1, #4294967295
 80083f2:	480a      	ldr	r0, [pc, #40]	; (800841c <cppLoop+0x88c>)
 80083f4:	f7f9 ff6a 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80083f8:	f001 bc33 	b.w	8009c62 <cppLoop+0x20d2>
 80083fc:	f3af 8000 	nop.w
 8008400:	a0b5ed8d 	.word	0xa0b5ed8d
 8008404:	3eb0c6f7 	.word	0x3eb0c6f7
 8008408:	88e368f1 	.word	0x88e368f1
 800840c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008410:	9abcaf48 	.word	0x9abcaf48
 8008414:	3e7ad7f2 	.word	0x3e7ad7f2
 8008418:	2000054c 	.word	0x2000054c
 800841c:	20000558 	.word	0x20000558
 8008420:	20045248 	.word	0x20045248
 8008424:	2004526c 	.word	0x2004526c
 8008428:	20045274 	.word	0x20045274
 800842c:	2004527c 	.word	0x2004527c
 8008430:	08018f84 	.word	0x08018f84
 8008434:	08018f90 	.word	0x08018f90
 8008438:	08018f98 	.word	0x08018f98
 800843c:	08018fa4 	.word	0x08018fa4
 8008440:	200209d4 	.word	0x200209d4
	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Gain setting 2 -----------------------*/
	/*-------------------------------------------------------------------------*/

	case 1:
		led.fullColor('W');
 8008444:	2157      	movs	r1, #87	; 0x57
 8008446:	48ac      	ldr	r0, [pc, #688]	; (80086f8 <cppLoop+0xb68>)
 8008448:	f7f9 fe84 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800844c:	f7f8 fe28 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008450:	2100      	movs	r1, #0
 8008452:	2000      	movs	r0, #0
 8008454:	f7f8 fe34 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast:%4.2lf", abs(line_trace.getKp()*10000));
 8008458:	48a8      	ldr	r0, [pc, #672]	; (80086fc <cppLoop+0xb6c>)
 800845a:	f7fb fbce 	bl	8003bfa <_ZN9LineTrace5getKpEv>
 800845e:	eeb0 7a40 	vmov.f32	s14, s0
 8008462:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8008700 <cppLoop+0xb70>
 8008466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800846a:	eeb0 0a67 	vmov.f32	s0, s15
 800846e:	f7fa fa33 	bl	80028d8 <_ZSt3absf>
 8008472:	ee10 3a10 	vmov	r3, s0
 8008476:	4618      	mov	r0, r3
 8008478:	f7f8 f87e 	bl	8000578 <__aeabi_f2d>
 800847c:	4603      	mov	r3, r0
 800847e:	460c      	mov	r4, r1
 8008480:	461a      	mov	r2, r3
 8008482:	4623      	mov	r3, r4
 8008484:	489f      	ldr	r0, [pc, #636]	; (8008704 <cppLoop+0xb74>)
 8008486:	f7f8 fe45 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800848a:	2101      	movs	r1, #1
 800848c:	2000      	movs	r0, #0
 800848e:	f7f8 fe17 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*1000), abs(line_trace.getKd()*100000));
 8008492:	489a      	ldr	r0, [pc, #616]	; (80086fc <cppLoop+0xb6c>)
 8008494:	f7fb fbc0 	bl	8003c18 <_ZN9LineTrace5getKiEv>
 8008498:	eeb0 7a40 	vmov.f32	s14, s0
 800849c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8008708 <cppLoop+0xb78>
 80084a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a4:	eeb0 0a67 	vmov.f32	s0, s15
 80084a8:	f7fa fa16 	bl	80028d8 <_ZSt3absf>
 80084ac:	ee10 3a10 	vmov	r3, s0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7f8 f861 	bl	8000578 <__aeabi_f2d>
 80084b6:	4605      	mov	r5, r0
 80084b8:	460e      	mov	r6, r1
 80084ba:	4890      	ldr	r0, [pc, #576]	; (80086fc <cppLoop+0xb6c>)
 80084bc:	f7fb fbbb 	bl	8003c36 <_ZN9LineTrace5getKdEv>
 80084c0:	eeb0 7a40 	vmov.f32	s14, s0
 80084c4:	eddf 7a91 	vldr	s15, [pc, #580]	; 800870c <cppLoop+0xb7c>
 80084c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084cc:	eeb0 0a67 	vmov.f32	s0, s15
 80084d0:	f7fa fa02 	bl	80028d8 <_ZSt3absf>
 80084d4:	ee10 3a10 	vmov	r3, s0
 80084d8:	4618      	mov	r0, r3
 80084da:	f7f8 f84d 	bl	8000578 <__aeabi_f2d>
 80084de:	4603      	mov	r3, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	e9cd 3400 	strd	r3, r4, [sp]
 80084e6:	462a      	mov	r2, r5
 80084e8:	4633      	mov	r3, r6
 80084ea:	4889      	ldr	r0, [pc, #548]	; (8008710 <cppLoop+0xb80>)
 80084ec:	f7f8 fe12 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80084f0:	4888      	ldr	r0, [pc, #544]	; (8008714 <cppLoop+0xb84>)
 80084f2:	f7f9 fdcb 	bl	800208c <_ZN8JoyStick8getValueEv>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	bf0c      	ite	eq
 80084fc:	2301      	moveq	r3, #1
 80084fe:	2300      	movne	r3, #0
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d022      	beq.n	800854c <cppLoop+0x9bc>
			led.LR(-1, 1);
 8008506:	2201      	movs	r2, #1
 8008508:	f04f 31ff 	mov.w	r1, #4294967295
 800850c:	487a      	ldr	r0, [pc, #488]	; (80086f8 <cppLoop+0xb68>)
 800850e:	f7f9 fedd 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008512:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008516:	f001 fcef 	bl	8009ef8 <HAL_Delay>

			selector_gain++;
 800851a:	4b7f      	ldr	r3, [pc, #508]	; (8008718 <cppLoop+0xb88>)
 800851c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008520:	b29b      	uxth	r3, r3
 8008522:	3301      	adds	r3, #1
 8008524:	b29b      	uxth	r3, r3
 8008526:	b21a      	sxth	r2, r3
 8008528:	4b7b      	ldr	r3, [pc, #492]	; (8008718 <cppLoop+0xb88>)
 800852a:	801a      	strh	r2, [r3, #0]
			if(selector_gain >= 3) selector_gain = 0;
 800852c:	4b7a      	ldr	r3, [pc, #488]	; (8008718 <cppLoop+0xb88>)
 800852e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008532:	2b02      	cmp	r3, #2
 8008534:	dd02      	ble.n	800853c <cppLoop+0x9ac>
 8008536:	4b78      	ldr	r3, [pc, #480]	; (8008718 <cppLoop+0xb88>)
 8008538:	2200      	movs	r2, #0
 800853a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800853c:	2200      	movs	r2, #0
 800853e:	f04f 31ff 	mov.w	r1, #4294967295
 8008542:	486d      	ldr	r0, [pc, #436]	; (80086f8 <cppLoop+0xb68>)
 8008544:	f7f9 fec2 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8008548:	f001 bb8d 	b.w	8009c66 <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_R){
 800854c:	4871      	ldr	r0, [pc, #452]	; (8008714 <cppLoop+0xb84>)
 800854e:	f7f9 fd9d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008552:	4603      	mov	r3, r0
 8008554:	2b10      	cmp	r3, #16
 8008556:	bf0c      	ite	eq
 8008558:	2301      	moveq	r3, #1
 800855a:	2300      	movne	r3, #0
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d059      	beq.n	8008616 <cppLoop+0xa86>
			led.LR(-1, 1);
 8008562:	2201      	movs	r2, #1
 8008564:	f04f 31ff 	mov.w	r1, #4294967295
 8008568:	4863      	ldr	r0, [pc, #396]	; (80086f8 <cppLoop+0xb68>)
 800856a:	f7f9 feaf 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800856e:	2064      	movs	r0, #100	; 0x64
 8008570:	f001 fcc2 	bl	8009ef8 <HAL_Delay>
			if(selector_gain == 0){
 8008574:	4b68      	ldr	r3, [pc, #416]	; (8008718 <cppLoop+0xb88>)
 8008576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d113      	bne.n	80085a6 <cppLoop+0xa16>
				adj_kp = adj_kp + 0.000001;
 800857e:	4b67      	ldr	r3, [pc, #412]	; (800871c <cppLoop+0xb8c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7f7 fff8 	bl	8000578 <__aeabi_f2d>
 8008588:	a355      	add	r3, pc, #340	; (adr r3, 80086e0 <cppLoop+0xb50>)
 800858a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800858e:	f7f7 fe95 	bl	80002bc <__adddf3>
 8008592:	4603      	mov	r3, r0
 8008594:	460c      	mov	r4, r1
 8008596:	4618      	mov	r0, r3
 8008598:	4621      	mov	r1, r4
 800859a:	f7f8 fb3d 	bl	8000c18 <__aeabi_d2f>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b5e      	ldr	r3, [pc, #376]	; (800871c <cppLoop+0xb8c>)
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e02b      	b.n	80085fe <cppLoop+0xa6e>
			else if(selector_gain == 1){
 80085a6:	4b5c      	ldr	r3, [pc, #368]	; (8008718 <cppLoop+0xb88>)
 80085a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d113      	bne.n	80085d8 <cppLoop+0xa48>
				adj_ki = adj_ki + 0.00001;
 80085b0:	4b5b      	ldr	r3, [pc, #364]	; (8008720 <cppLoop+0xb90>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ffdf 	bl	8000578 <__aeabi_f2d>
 80085ba:	a34b      	add	r3, pc, #300	; (adr r3, 80086e8 <cppLoop+0xb58>)
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f7 fe7c 	bl	80002bc <__adddf3>
 80085c4:	4603      	mov	r3, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	4618      	mov	r0, r3
 80085ca:	4621      	mov	r1, r4
 80085cc:	f7f8 fb24 	bl	8000c18 <__aeabi_d2f>
 80085d0:	4602      	mov	r2, r0
 80085d2:	4b53      	ldr	r3, [pc, #332]	; (8008720 <cppLoop+0xb90>)
 80085d4:	601a      	str	r2, [r3, #0]
 80085d6:	e012      	b.n	80085fe <cppLoop+0xa6e>
				adj_kd = adj_kd + 0.0000001;
 80085d8:	4b52      	ldr	r3, [pc, #328]	; (8008724 <cppLoop+0xb94>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4618      	mov	r0, r3
 80085de:	f7f7 ffcb 	bl	8000578 <__aeabi_f2d>
 80085e2:	a343      	add	r3, pc, #268	; (adr r3, 80086f0 <cppLoop+0xb60>)
 80085e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e8:	f7f7 fe68 	bl	80002bc <__adddf3>
 80085ec:	4603      	mov	r3, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4618      	mov	r0, r3
 80085f2:	4621      	mov	r1, r4
 80085f4:	f7f8 fb10 	bl	8000c18 <__aeabi_d2f>
 80085f8:	4602      	mov	r2, r0
 80085fa:	4b4a      	ldr	r3, [pc, #296]	; (8008724 <cppLoop+0xb94>)
 80085fc:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80085fe:	2152      	movs	r1, #82	; 0x52
 8008600:	483d      	ldr	r0, [pc, #244]	; (80086f8 <cppLoop+0xb68>)
 8008602:	f7f9 fda7 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008606:	2200      	movs	r2, #0
 8008608:	f04f 31ff 	mov.w	r1, #4294967295
 800860c:	483a      	ldr	r0, [pc, #232]	; (80086f8 <cppLoop+0xb68>)
 800860e:	f7f9 fe5d 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008612:	f001 bb28 	b.w	8009c66 <cppLoop+0x20d6>
		else if(joy_stick.getValue() == JOY_L){
 8008616:	483f      	ldr	r0, [pc, #252]	; (8008714 <cppLoop+0xb84>)
 8008618:	f7f9 fd38 	bl	800208c <_ZN8JoyStick8getValueEv>
 800861c:	4603      	mov	r3, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	bf0c      	ite	eq
 8008622:	2301      	moveq	r3, #1
 8008624:	2300      	movne	r3, #0
 8008626:	b2db      	uxtb	r3, r3
 8008628:	2b00      	cmp	r3, #0
 800862a:	d07d      	beq.n	8008728 <cppLoop+0xb98>
			led.LR(-1, 1);
 800862c:	2201      	movs	r2, #1
 800862e:	f04f 31ff 	mov.w	r1, #4294967295
 8008632:	4831      	ldr	r0, [pc, #196]	; (80086f8 <cppLoop+0xb68>)
 8008634:	f7f9 fe4a 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008638:	2064      	movs	r0, #100	; 0x64
 800863a:	f001 fc5d 	bl	8009ef8 <HAL_Delay>
			if(selector_gain == 0){
 800863e:	4b36      	ldr	r3, [pc, #216]	; (8008718 <cppLoop+0xb88>)
 8008640:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d113      	bne.n	8008670 <cppLoop+0xae0>
				adj_kp = adj_kp - 0.000001;
 8008648:	4b34      	ldr	r3, [pc, #208]	; (800871c <cppLoop+0xb8c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4618      	mov	r0, r3
 800864e:	f7f7 ff93 	bl	8000578 <__aeabi_f2d>
 8008652:	a323      	add	r3, pc, #140	; (adr r3, 80086e0 <cppLoop+0xb50>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 fe2e 	bl	80002b8 <__aeabi_dsub>
 800865c:	4603      	mov	r3, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4618      	mov	r0, r3
 8008662:	4621      	mov	r1, r4
 8008664:	f7f8 fad8 	bl	8000c18 <__aeabi_d2f>
 8008668:	4602      	mov	r2, r0
 800866a:	4b2c      	ldr	r3, [pc, #176]	; (800871c <cppLoop+0xb8c>)
 800866c:	601a      	str	r2, [r3, #0]
 800866e:	e02b      	b.n	80086c8 <cppLoop+0xb38>
			else if(selector_gain == 1){
 8008670:	4b29      	ldr	r3, [pc, #164]	; (8008718 <cppLoop+0xb88>)
 8008672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d113      	bne.n	80086a2 <cppLoop+0xb12>
				adj_ki = adj_ki - 0.00001;
 800867a:	4b29      	ldr	r3, [pc, #164]	; (8008720 <cppLoop+0xb90>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f7f7 ff7a 	bl	8000578 <__aeabi_f2d>
 8008684:	a318      	add	r3, pc, #96	; (adr r3, 80086e8 <cppLoop+0xb58>)
 8008686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800868a:	f7f7 fe15 	bl	80002b8 <__aeabi_dsub>
 800868e:	4603      	mov	r3, r0
 8008690:	460c      	mov	r4, r1
 8008692:	4618      	mov	r0, r3
 8008694:	4621      	mov	r1, r4
 8008696:	f7f8 fabf 	bl	8000c18 <__aeabi_d2f>
 800869a:	4602      	mov	r2, r0
 800869c:	4b20      	ldr	r3, [pc, #128]	; (8008720 <cppLoop+0xb90>)
 800869e:	601a      	str	r2, [r3, #0]
 80086a0:	e012      	b.n	80086c8 <cppLoop+0xb38>
				adj_kd = adj_kd - 0.0000001;
 80086a2:	4b20      	ldr	r3, [pc, #128]	; (8008724 <cppLoop+0xb94>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7f7 ff66 	bl	8000578 <__aeabi_f2d>
 80086ac:	a310      	add	r3, pc, #64	; (adr r3, 80086f0 <cppLoop+0xb60>)
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	f7f7 fe01 	bl	80002b8 <__aeabi_dsub>
 80086b6:	4603      	mov	r3, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	4618      	mov	r0, r3
 80086bc:	4621      	mov	r1, r4
 80086be:	f7f8 faab 	bl	8000c18 <__aeabi_d2f>
 80086c2:	4602      	mov	r2, r0
 80086c4:	4b17      	ldr	r3, [pc, #92]	; (8008724 <cppLoop+0xb94>)
 80086c6:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80086c8:	2152      	movs	r1, #82	; 0x52
 80086ca:	480b      	ldr	r0, [pc, #44]	; (80086f8 <cppLoop+0xb68>)
 80086cc:	f7f9 fd42 	bl	8002154 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80086d0:	2200      	movs	r2, #0
 80086d2:	f04f 31ff 	mov.w	r1, #4294967295
 80086d6:	4808      	ldr	r0, [pc, #32]	; (80086f8 <cppLoop+0xb68>)
 80086d8:	f7f9 fdf8 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80086dc:	f001 bac3 	b.w	8009c66 <cppLoop+0x20d6>
 80086e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80086e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80086e8:	88e368f1 	.word	0x88e368f1
 80086ec:	3ee4f8b5 	.word	0x3ee4f8b5
 80086f0:	9abcaf48 	.word	0x9abcaf48
 80086f4:	3e7ad7f2 	.word	0x3e7ad7f2
 80086f8:	20000558 	.word	0x20000558
 80086fc:	200209d4 	.word	0x200209d4
 8008700:	461c4000 	.word	0x461c4000
 8008704:	08018fb0 	.word	0x08018fb0
 8008708:	447a0000 	.word	0x447a0000
 800870c:	47c35000 	.word	0x47c35000
 8008710:	08018f74 	.word	0x08018f74
 8008714:	2000054c 	.word	0x2000054c
 8008718:	20045248 	.word	0x20045248
 800871c:	20045254 	.word	0x20045254
 8008720:	2004525c 	.word	0x2004525c
 8008724:	20045264 	.word	0x20045264
		else if(joy_stick.getValue() == JOY_C){
 8008728:	48c1      	ldr	r0, [pc, #772]	; (8008a30 <cppLoop+0xea0>)
 800872a:	f7f9 fcaf 	bl	800208c <_ZN8JoyStick8getValueEv>
 800872e:	4603      	mov	r3, r0
 8008730:	2b02      	cmp	r3, #2
 8008732:	bf0c      	ite	eq
 8008734:	2301      	moveq	r3, #1
 8008736:	2300      	movne	r3, #0
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b00      	cmp	r3, #0
 800873c:	f001 8293 	beq.w	8009c66 <cppLoop+0x20d6>
			led.LR(-1, 1);
 8008740:	2201      	movs	r2, #1
 8008742:	f04f 31ff 	mov.w	r1, #4294967295
 8008746:	48bb      	ldr	r0, [pc, #748]	; (8008a34 <cppLoop+0xea4>)
 8008748:	f7f9 fdc0 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800874c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008750:	f001 fbd2 	bl	8009ef8 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8008754:	2300      	movs	r3, #0
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4bb7      	ldr	r3, [pc, #732]	; (8008a38 <cppLoop+0xea8>)
 800875a:	2201      	movs	r2, #1
 800875c:	49b7      	ldr	r1, [pc, #732]	; (8008a3c <cppLoop+0xeac>)
 800875e:	48b8      	ldr	r0, [pc, #736]	; (8008a40 <cppLoop+0xeb0>)
 8008760:	f7f9 f87c 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	4bb6      	ldr	r3, [pc, #728]	; (8008a44 <cppLoop+0xeb4>)
 800876a:	2201      	movs	r2, #1
 800876c:	49b6      	ldr	r1, [pc, #728]	; (8008a48 <cppLoop+0xeb8>)
 800876e:	48b4      	ldr	r0, [pc, #720]	; (8008a40 <cppLoop+0xeb0>)
 8008770:	f7f9 f874 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8008774:	2300      	movs	r3, #0
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	4bb4      	ldr	r3, [pc, #720]	; (8008a4c <cppLoop+0xebc>)
 800877a:	2201      	movs	r2, #1
 800877c:	49b4      	ldr	r1, [pc, #720]	; (8008a50 <cppLoop+0xec0>)
 800877e:	48b0      	ldr	r0, [pc, #704]	; (8008a40 <cppLoop+0xeb0>)
 8008780:	f7f9 f86c 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008784:	4bac      	ldr	r3, [pc, #688]	; (8008a38 <cppLoop+0xea8>)
 8008786:	edd3 7a00 	vldr	s15, [r3]
 800878a:	4bae      	ldr	r3, [pc, #696]	; (8008a44 <cppLoop+0xeb4>)
 800878c:	ed93 7a00 	vldr	s14, [r3]
 8008790:	4bae      	ldr	r3, [pc, #696]	; (8008a4c <cppLoop+0xebc>)
 8008792:	edd3 6a00 	vldr	s13, [r3]
 8008796:	eeb0 1a66 	vmov.f32	s2, s13
 800879a:	eef0 0a47 	vmov.f32	s1, s14
 800879e:	eeb0 0a67 	vmov.f32	s0, s15
 80087a2:	48ac      	ldr	r0, [pc, #688]	; (8008a54 <cppLoop+0xec4>)
 80087a4:	f7fb fa10 	bl	8003bc8 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 80087a8:	2200      	movs	r2, #0
 80087aa:	f04f 31ff 	mov.w	r1, #4294967295
 80087ae:	48a1      	ldr	r0, [pc, #644]	; (8008a34 <cppLoop+0xea4>)
 80087b0:	f7f9 fd8c 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80087b4:	f001 ba57 	b.w	8009c66 <cppLoop+0x20d6>

	/*-------------------------------------------------------------------------*/
	/*----------------------------------- First running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 2:
		led.fullColor('C');
 80087b8:	2143      	movs	r1, #67	; 0x43
 80087ba:	489e      	ldr	r0, [pc, #632]	; (8008a34 <cppLoop+0xea4>)
 80087bc:	f7f9 fcca 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 80087c0:	489b      	ldr	r0, [pc, #620]	; (8008a30 <cppLoop+0xea0>)
 80087c2:	f7f9 fc63 	bl	800208c <_ZN8JoyStick8getValueEv>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	bf0c      	ite	eq
 80087cc:	2301      	moveq	r3, #1
 80087ce:	2300      	movne	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d020      	beq.n	8008818 <cppLoop+0xc88>
			led.LR(-1, 1);
 80087d6:	2201      	movs	r2, #1
 80087d8:	f04f 31ff 	mov.w	r1, #4294967295
 80087dc:	4895      	ldr	r0, [pc, #596]	; (8008a34 <cppLoop+0xea4>)
 80087de:	f7f9 fd75 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087e6:	f001 fb87 	bl	8009ef8 <HAL_Delay>

			selector_run++;
 80087ea:	4b9b      	ldr	r3, [pc, #620]	; (8008a58 <cppLoop+0xec8>)
 80087ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3301      	adds	r3, #1
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	b21a      	sxth	r2, r3
 80087f8:	4b97      	ldr	r3, [pc, #604]	; (8008a58 <cppLoop+0xec8>)
 80087fa:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 80087fc:	4b96      	ldr	r3, [pc, #600]	; (8008a58 <cppLoop+0xec8>)
 80087fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008802:	2b01      	cmp	r3, #1
 8008804:	dd02      	ble.n	800880c <cppLoop+0xc7c>
 8008806:	4b94      	ldr	r3, [pc, #592]	; (8008a58 <cppLoop+0xec8>)
 8008808:	2200      	movs	r2, #0
 800880a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800880c:	2200      	movs	r2, #0
 800880e:	f04f 31ff 	mov.w	r1, #4294967295
 8008812:	4888      	ldr	r0, [pc, #544]	; (8008a34 <cppLoop+0xea4>)
 8008814:	f7f9 fd5a 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008818:	4b8f      	ldr	r3, [pc, #572]	; (8008a58 <cppLoop+0xec8>)
 800881a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d15c      	bne.n	80088dc <cppLoop+0xd4c>
			lcd_clear();
 8008822:	f7f8 fc3d 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008826:	2100      	movs	r1, #0
 8008828:	2000      	movs	r0, #0
 800882a:	f7f8 fc49 	bl	80010c0 <lcd_locate>
			lcd_printf("1:   ");
 800882e:	488b      	ldr	r0, [pc, #556]	; (8008a5c <cppLoop+0xecc>)
 8008830:	f7f8 fc70 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008834:	2101      	movs	r1, #1
 8008836:	2000      	movs	r0, #0
 8008838:	f7f8 fc42 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_velocity);
 800883c:	4b88      	ldr	r3, [pc, #544]	; (8008a60 <cppLoop+0xed0>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 fe99 	bl	8000578 <__aeabi_f2d>
 8008846:	4603      	mov	r3, r0
 8008848:	460c      	mov	r4, r1
 800884a:	461a      	mov	r2, r3
 800884c:	4623      	mov	r3, r4
 800884e:	4885      	ldr	r0, [pc, #532]	; (8008a64 <cppLoop+0xed4>)
 8008850:	f7f8 fc60 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8008854:	4876      	ldr	r0, [pc, #472]	; (8008a30 <cppLoop+0xea0>)
 8008856:	f7f9 fc19 	bl	800208c <_ZN8JoyStick8getValueEv>
 800885a:	4603      	mov	r3, r0
 800885c:	2b02      	cmp	r3, #2
 800885e:	bf0c      	ite	eq
 8008860:	2301      	moveq	r3, #1
 8008862:	2300      	movne	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	f001 81ff 	beq.w	8009c6a <cppLoop+0x20da>
				HAL_Delay(500);
 800886c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008870:	f001 fb42 	bl	8009ef8 <HAL_Delay>

				line_trace.setTargetVelocity(adj_velocity);
 8008874:	4b7a      	ldr	r3, [pc, #488]	; (8008a60 <cppLoop+0xed0>)
 8008876:	edd3 7a00 	vldr	s15, [r3]
 800887a:	eeb0 0a67 	vmov.f32	s0, s15
 800887e:	4875      	ldr	r0, [pc, #468]	; (8008a54 <cppLoop+0xec4>)
 8008880:	f7fb fa3d 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(1, -1);
 8008884:	f04f 32ff 	mov.w	r2, #4294967295
 8008888:	2101      	movs	r1, #1
 800888a:	486a      	ldr	r0, [pc, #424]	; (8008a34 <cppLoop+0xea4>)
 800888c:	f7f9 fd1e 	bl	80022cc <_ZN3LED2LREaa>

				// Record start
				HAL_Delay(1000);
 8008890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008894:	f001 fb30 	bl	8009ef8 <HAL_Delay>

				// Run
				line_trace.setMode(FIRST_RUNNING);
 8008898:	2100      	movs	r1, #0
 800889a:	486e      	ldr	r0, [pc, #440]	; (8008a54 <cppLoop+0xec4>)
 800889c:	f7fb fc0c 	bl	80040b8 <_ZN9LineTrace7setModeEs>

				logger.resetLogsTim1();
 80088a0:	4871      	ldr	r0, [pc, #452]	; (8008a68 <cppLoop+0xed8>)
 80088a2:	f7fc fa58 	bl	8004d56 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 80088a6:	4870      	ldr	r0, [pc, #448]	; (8008a68 <cppLoop+0xed8>)
 80088a8:	f7fc fa7d 	bl	8004da6 <_ZN6Logger13resetLogsTim2Ev>

				line_trace.running();
 80088ac:	4869      	ldr	r0, [pc, #420]	; (8008a54 <cppLoop+0xec4>)
 80088ae:	f7fb fc47 	bl	8004140 <_ZN9LineTrace7runningEv>

				logger.stop();
 80088b2:	486d      	ldr	r0, [pc, #436]	; (8008a68 <cppLoop+0xed8>)
 80088b4:	f7fc fae0 	bl	8004e78 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 80088b8:	4a6c      	ldr	r2, [pc, #432]	; (8008a6c <cppLoop+0xedc>)
 80088ba:	496d      	ldr	r1, [pc, #436]	; (8008a70 <cppLoop+0xee0>)
 80088bc:	486a      	ldr	r0, [pc, #424]	; (8008a68 <cppLoop+0xed8>)
 80088be:	f7fc f974 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 80088c2:	4a6c      	ldr	r2, [pc, #432]	; (8008a74 <cppLoop+0xee4>)
 80088c4:	496a      	ldr	r1, [pc, #424]	; (8008a70 <cppLoop+0xee0>)
 80088c6:	4868      	ldr	r0, [pc, #416]	; (8008a68 <cppLoop+0xed8>)
 80088c8:	f7fc f983 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>


				led.LR(0, -1);
 80088cc:	f04f 32ff 	mov.w	r2, #4294967295
 80088d0:	2100      	movs	r1, #0
 80088d2:	4858      	ldr	r0, [pc, #352]	; (8008a34 <cppLoop+0xea4>)
 80088d4:	f7f9 fcfa 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}
		}

		break;
 80088d8:	f001 b9c7 	b.w	8009c6a <cppLoop+0x20da>
			lcd_clear();
 80088dc:	f7f8 fbe0 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 80088e0:	2100      	movs	r1, #0
 80088e2:	2000      	movs	r0, #0
 80088e4:	f7f8 fbec 	bl	80010c0 <lcd_locate>
			lcd_printf("1: ");
 80088e8:	4863      	ldr	r0, [pc, #396]	; (8008a78 <cppLoop+0xee8>)
 80088ea:	f7f8 fc13 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 80088ee:	2101      	movs	r1, #1
 80088f0:	2000      	movs	r0, #0
 80088f2:	f7f8 fbe5 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", adj_velocity);
 80088f6:	4b5a      	ldr	r3, [pc, #360]	; (8008a60 <cppLoop+0xed0>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7f7 fe3c 	bl	8000578 <__aeabi_f2d>
 8008900:	4603      	mov	r3, r0
 8008902:	460c      	mov	r4, r1
 8008904:	461a      	mov	r2, r3
 8008906:	4623      	mov	r3, r4
 8008908:	485c      	ldr	r0, [pc, #368]	; (8008a7c <cppLoop+0xeec>)
 800890a:	f7f8 fc03 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_R){
 800890e:	4848      	ldr	r0, [pc, #288]	; (8008a30 <cppLoop+0xea0>)
 8008910:	f7f9 fbbc 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008914:	4603      	mov	r3, r0
 8008916:	2b10      	cmp	r3, #16
 8008918:	bf0c      	ite	eq
 800891a:	2301      	moveq	r3, #1
 800891c:	2300      	movne	r3, #0
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b00      	cmp	r3, #0
 8008922:	d023      	beq.n	800896c <cppLoop+0xddc>
				led.LR(-1, 1);
 8008924:	2201      	movs	r2, #1
 8008926:	f04f 31ff 	mov.w	r1, #4294967295
 800892a:	4842      	ldr	r0, [pc, #264]	; (8008a34 <cppLoop+0xea4>)
 800892c:	f7f9 fcce 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008930:	2064      	movs	r0, #100	; 0x64
 8008932:	f001 fae1 	bl	8009ef8 <HAL_Delay>
				adj_velocity = adj_velocity + 0.1;
 8008936:	4b4a      	ldr	r3, [pc, #296]	; (8008a60 <cppLoop+0xed0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7f7 fe1c 	bl	8000578 <__aeabi_f2d>
 8008940:	a339      	add	r3, pc, #228	; (adr r3, 8008a28 <cppLoop+0xe98>)
 8008942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008946:	f7f7 fcb9 	bl	80002bc <__adddf3>
 800894a:	4603      	mov	r3, r0
 800894c:	460c      	mov	r4, r1
 800894e:	4618      	mov	r0, r3
 8008950:	4621      	mov	r1, r4
 8008952:	f7f8 f961 	bl	8000c18 <__aeabi_d2f>
 8008956:	4602      	mov	r2, r0
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <cppLoop+0xed0>)
 800895a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 800895c:	2200      	movs	r2, #0
 800895e:	f04f 31ff 	mov.w	r1, #4294967295
 8008962:	4834      	ldr	r0, [pc, #208]	; (8008a34 <cppLoop+0xea4>)
 8008964:	f7f9 fcb2 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008968:	f001 b97f 	b.w	8009c6a <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_L){
 800896c:	4830      	ldr	r0, [pc, #192]	; (8008a30 <cppLoop+0xea0>)
 800896e:	f7f9 fb8d 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008972:	4603      	mov	r3, r0
 8008974:	2b01      	cmp	r3, #1
 8008976:	bf0c      	ite	eq
 8008978:	2301      	moveq	r3, #1
 800897a:	2300      	movne	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d023      	beq.n	80089ca <cppLoop+0xe3a>
				led.LR(-1, 1);
 8008982:	2201      	movs	r2, #1
 8008984:	f04f 31ff 	mov.w	r1, #4294967295
 8008988:	482a      	ldr	r0, [pc, #168]	; (8008a34 <cppLoop+0xea4>)
 800898a:	f7f9 fc9f 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800898e:	2064      	movs	r0, #100	; 0x64
 8008990:	f001 fab2 	bl	8009ef8 <HAL_Delay>
				adj_velocity = adj_velocity - 0.1;
 8008994:	4b32      	ldr	r3, [pc, #200]	; (8008a60 <cppLoop+0xed0>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f7f7 fded 	bl	8000578 <__aeabi_f2d>
 800899e:	a322      	add	r3, pc, #136	; (adr r3, 8008a28 <cppLoop+0xe98>)
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	f7f7 fc88 	bl	80002b8 <__aeabi_dsub>
 80089a8:	4603      	mov	r3, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	4618      	mov	r0, r3
 80089ae:	4621      	mov	r1, r4
 80089b0:	f7f8 f932 	bl	8000c18 <__aeabi_d2f>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <cppLoop+0xed0>)
 80089b8:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80089ba:	2200      	movs	r2, #0
 80089bc:	f04f 31ff 	mov.w	r1, #4294967295
 80089c0:	481c      	ldr	r0, [pc, #112]	; (8008a34 <cppLoop+0xea4>)
 80089c2:	f7f9 fc83 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80089c6:	f001 b950 	b.w	8009c6a <cppLoop+0x20da>
			else if(joy_stick.getValue() == JOY_C){
 80089ca:	4819      	ldr	r0, [pc, #100]	; (8008a30 <cppLoop+0xea0>)
 80089cc:	f7f9 fb5e 	bl	800208c <_ZN8JoyStick8getValueEv>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b02      	cmp	r3, #2
 80089d4:	bf0c      	ite	eq
 80089d6:	2301      	moveq	r3, #1
 80089d8:	2300      	movne	r3, #0
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f001 8144 	beq.w	8009c6a <cppLoop+0x20da>
				led.LR(-1, 1);
 80089e2:	2201      	movs	r2, #1
 80089e4:	f04f 31ff 	mov.w	r1, #4294967295
 80089e8:	4812      	ldr	r0, [pc, #72]	; (8008a34 <cppLoop+0xea4>)
 80089ea:	f7f9 fc6f 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 80089ee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80089f2:	f001 fa81 	bl	8009ef8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80089f6:	2300      	movs	r3, #0
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <cppLoop+0xed0>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	4920      	ldr	r1, [pc, #128]	; (8008a80 <cppLoop+0xef0>)
 8008a00:	480f      	ldr	r0, [pc, #60]	; (8008a40 <cppLoop+0xeb0>)
 8008a02:	f7f8 ff2b 	bl	800185c <sd_write_array_float>
				line_trace.setTargetVelocity(adj_velocity);
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <cppLoop+0xed0>)
 8008a08:	edd3 7a00 	vldr	s15, [r3]
 8008a0c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a10:	4810      	ldr	r0, [pc, #64]	; (8008a54 <cppLoop+0xec4>)
 8008a12:	f7fb f974 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
				led.LR(-1, 0);
 8008a16:	2200      	movs	r2, #0
 8008a18:	f04f 31ff 	mov.w	r1, #4294967295
 8008a1c:	4805      	ldr	r0, [pc, #20]	; (8008a34 <cppLoop+0xea4>)
 8008a1e:	f7f9 fc55 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008a22:	f001 b922 	b.w	8009c6a <cppLoop+0x20da>
 8008a26:	bf00      	nop
 8008a28:	9999999a 	.word	0x9999999a
 8008a2c:	3fb99999 	.word	0x3fb99999
 8008a30:	2000054c 	.word	0x2000054c
 8008a34:	20000558 	.word	0x20000558
 8008a38:	20045254 	.word	0x20045254
 8008a3c:	08018fbc 	.word	0x08018fbc
 8008a40:	08018f90 	.word	0x08018f90
 8008a44:	2004525c 	.word	0x2004525c
 8008a48:	08018fc4 	.word	0x08018fc4
 8008a4c:	20045264 	.word	0x20045264
 8008a50:	08018fcc 	.word	0x08018fcc
 8008a54:	200209d4 	.word	0x200209d4
 8008a58:	2004524a 	.word	0x2004524a
 8008a5c:	08018fd4 	.word	0x08018fd4
 8008a60:	20045284 	.word	0x20045284
 8008a64:	08018fdc 	.word	0x08018fdc
 8008a68:	2000057c 	.word	0x2000057c
 8008a6c:	08018fe8 	.word	0x08018fe8
 8008a70:	08018ff4 	.word	0x08018ff4
 8008a74:	08019000 	.word	0x08019000
 8008a78:	0801900c 	.word	0x0801900c
 8008a7c:	08019010 	.word	0x08019010
 8008a80:	0801901c 	.word	0x0801901c

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Second running -----------------------*/
	/*-------------------------------------------------------------------------*/
	case 3:
		led.fullColor('Y');
 8008a84:	2159      	movs	r1, #89	; 0x59
 8008a86:	48be      	ldr	r0, [pc, #760]	; (8008d80 <cppLoop+0x11f0>)
 8008a88:	f7f9 fb64 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008a8c:	48bd      	ldr	r0, [pc, #756]	; (8008d84 <cppLoop+0x11f4>)
 8008a8e:	f7f9 fafd 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	bf0c      	ite	eq
 8008a98:	2301      	moveq	r3, #1
 8008a9a:	2300      	movne	r3, #0
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d020      	beq.n	8008ae4 <cppLoop+0xf54>
			led.LR(-1, 1);
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa8:	48b5      	ldr	r0, [pc, #724]	; (8008d80 <cppLoop+0x11f0>)
 8008aaa:	f7f9 fc0f 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008aae:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ab2:	f001 fa21 	bl	8009ef8 <HAL_Delay>

			selector_run++;
 8008ab6:	4bb4      	ldr	r3, [pc, #720]	; (8008d88 <cppLoop+0x11f8>)
 8008ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	3301      	adds	r3, #1
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	b21a      	sxth	r2, r3
 8008ac4:	4bb0      	ldr	r3, [pc, #704]	; (8008d88 <cppLoop+0x11f8>)
 8008ac6:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008ac8:	4baf      	ldr	r3, [pc, #700]	; (8008d88 <cppLoop+0x11f8>)
 8008aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ace:	2b01      	cmp	r3, #1
 8008ad0:	dd02      	ble.n	8008ad8 <cppLoop+0xf48>
 8008ad2:	4bad      	ldr	r3, [pc, #692]	; (8008d88 <cppLoop+0x11f8>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f04f 31ff 	mov.w	r1, #4294967295
 8008ade:	48a8      	ldr	r0, [pc, #672]	; (8008d80 <cppLoop+0x11f0>)
 8008ae0:	f7f9 fbf4 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008ae4:	4ba8      	ldr	r3, [pc, #672]	; (8008d88 <cppLoop+0x11f8>)
 8008ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d178      	bne.n	8008be0 <cppLoop+0x1050>
			lcd_clear();
 8008aee:	f7f8 fad7 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008af2:	2100      	movs	r1, #0
 8008af4:	2000      	movs	r0, #0
 8008af6:	f7f8 fae3 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", adj_max_velocity);
 8008afa:	4ba4      	ldr	r3, [pc, #656]	; (8008d8c <cppLoop+0x11fc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7f7 fd3a 	bl	8000578 <__aeabi_f2d>
 8008b04:	4603      	mov	r3, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4623      	mov	r3, r4
 8008b0c:	48a0      	ldr	r0, [pc, #640]	; (8008d90 <cppLoop+0x1200>)
 8008b0e:	f7f8 fb01 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008b12:	2101      	movs	r1, #1
 8008b14:	2000      	movs	r0, #0
 8008b16:	f7f8 fad3 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity);
 8008b1a:	4b9e      	ldr	r3, [pc, #632]	; (8008d94 <cppLoop+0x1204>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7f7 fd2a 	bl	8000578 <__aeabi_f2d>
 8008b24:	4603      	mov	r3, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4623      	mov	r3, r4
 8008b2c:	489a      	ldr	r0, [pc, #616]	; (8008d98 <cppLoop+0x1208>)
 8008b2e:	f7f8 faf1 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_C){
 8008b32:	4894      	ldr	r0, [pc, #592]	; (8008d84 <cppLoop+0x11f4>)
 8008b34:	f7f9 faaa 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f001 8092 	beq.w	8009c6e <cppLoop+0x20de>
				HAL_Delay(500);
 8008b4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b4e:	f001 f9d3 	bl	8009ef8 <HAL_Delay>

				led.LR(1, -1);
 8008b52:	f04f 32ff 	mov.w	r2, #4294967295
 8008b56:	2101      	movs	r1, #1
 8008b58:	4889      	ldr	r0, [pc, #548]	; (8008d80 <cppLoop+0x11f0>)
 8008b5a:	f7f9 fbb7 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMode(SECOND_RUNNING);
 8008b5e:	2101      	movs	r1, #1
 8008b60:	488e      	ldr	r0, [pc, #568]	; (8008d9c <cppLoop+0x120c>)
 8008b62:	f7fb faa9 	bl	80040b8 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity);
 8008b66:	4b8b      	ldr	r3, [pc, #556]	; (8008d94 <cppLoop+0x1204>)
 8008b68:	edd3 7a00 	vldr	s15, [r3]
 8008b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b70:	488a      	ldr	r0, [pc, #552]	; (8008d9c <cppLoop+0x120c>)
 8008b72:	f7fb f8c4 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008b76:	4b85      	ldr	r3, [pc, #532]	; (8008d8c <cppLoop+0x11fc>)
 8008b78:	edd3 7a00 	vldr	s15, [r3]
 8008b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b80:	4886      	ldr	r0, [pc, #536]	; (8008d9c <cppLoop+0x120c>)
 8008b82:	f7fb f8cc 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008b86:	4b83      	ldr	r3, [pc, #524]	; (8008d94 <cppLoop+0x1204>)
 8008b88:	edd3 7a00 	vldr	s15, [r3]
 8008b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8008b90:	4882      	ldr	r0, [pc, #520]	; (8008d9c <cppLoop+0x120c>)
 8008b92:	f7fb f8e4 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
				line_trace.createVelocityTabele();
 8008b96:	4881      	ldr	r0, [pc, #516]	; (8008d9c <cppLoop+0x120c>)
 8008b98:	f7fb fcc8 	bl	800452c <_ZN9LineTrace20createVelocityTabeleEv>

				HAL_Delay(1000);
 8008b9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ba0:	f001 f9aa 	bl	8009ef8 <HAL_Delay>

				logger.resetLogsTim1();
 8008ba4:	487e      	ldr	r0, [pc, #504]	; (8008da0 <cppLoop+0x1210>)
 8008ba6:	f7fc f8d6 	bl	8004d56 <_ZN6Logger13resetLogsTim1Ev>
				logger.resetLogsTim2();
 8008baa:	487d      	ldr	r0, [pc, #500]	; (8008da0 <cppLoop+0x1210>)
 8008bac:	f7fc f8fb 	bl	8004da6 <_ZN6Logger13resetLogsTim2Ev>
				//logger.start();

				line_trace.running();
 8008bb0:	487a      	ldr	r0, [pc, #488]	; (8008d9c <cppLoop+0x120c>)
 8008bb2:	f7fb fac5 	bl	8004140 <_ZN9LineTrace7runningEv>

				logger.stop();
 8008bb6:	487a      	ldr	r0, [pc, #488]	; (8008da0 <cppLoop+0x1210>)
 8008bb8:	f7fc f95e 	bl	8004e78 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008bbc:	4a79      	ldr	r2, [pc, #484]	; (8008da4 <cppLoop+0x1214>)
 8008bbe:	497a      	ldr	r1, [pc, #488]	; (8008da8 <cppLoop+0x1218>)
 8008bc0:	4877      	ldr	r0, [pc, #476]	; (8008da0 <cppLoop+0x1210>)
 8008bc2:	f7fb fff2 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008bc6:	4a79      	ldr	r2, [pc, #484]	; (8008dac <cppLoop+0x121c>)
 8008bc8:	4977      	ldr	r1, [pc, #476]	; (8008da8 <cppLoop+0x1218>)
 8008bca:	4875      	ldr	r0, [pc, #468]	; (8008da0 <cppLoop+0x1210>)
 8008bcc:	f7fc f801 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8008bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bd4:	2100      	movs	r1, #0
 8008bd6:	486a      	ldr	r0, [pc, #424]	; (8008d80 <cppLoop+0x11f0>)
 8008bd8:	f7f9 fb78 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setMinVelocity(adj_min_velocity);

				led.LR(-1, 0);
			}
		}
		break;
 8008bdc:	f001 b847 	b.w	8009c6e <cppLoop+0x20de>
			lcd_clear();
 8008be0:	f7f8 fa5e 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008be4:	2100      	movs	r1, #0
 8008be6:	2000      	movs	r0, #0
 8008be8:	f7f8 fa6a 	bl	80010c0 <lcd_locate>
			lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 8008bec:	486b      	ldr	r0, [pc, #428]	; (8008d9c <cppLoop+0x120c>)
 8008bee:	f7fb f8e6 	bl	8003dbe <_ZN9LineTrace14getMaxVelocityEv>
 8008bf2:	ee10 3a10 	vmov	r3, s0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f7 fcbe 	bl	8000578 <__aeabi_f2d>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	461a      	mov	r2, r3
 8008c02:	4623      	mov	r3, r4
 8008c04:	4862      	ldr	r0, [pc, #392]	; (8008d90 <cppLoop+0x1200>)
 8008c06:	f7f8 fa85 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008c0a:	2101      	movs	r1, #1
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	f7f8 fa57 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008c12:	4862      	ldr	r0, [pc, #392]	; (8008d9c <cppLoop+0x120c>)
 8008c14:	f7fb f8f3 	bl	8003dfe <_ZN9LineTrace14getMinVelocityEv>
 8008c18:	ee10 3a10 	vmov	r3, s0
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7f7 fcab 	bl	8000578 <__aeabi_f2d>
 8008c22:	4603      	mov	r3, r0
 8008c24:	460c      	mov	r4, r1
 8008c26:	461a      	mov	r2, r3
 8008c28:	4623      	mov	r3, r4
 8008c2a:	4861      	ldr	r0, [pc, #388]	; (8008db0 <cppLoop+0x1220>)
 8008c2c:	f7f8 fa72 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8008c30:	4854      	ldr	r0, [pc, #336]	; (8008d84 <cppLoop+0x11f4>)
 8008c32:	f7f9 fa2b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	bf0c      	ite	eq
 8008c3c:	2301      	moveq	r3, #1
 8008c3e:	2300      	movne	r3, #0
 8008c40:	b2db      	uxtb	r3, r3
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d022      	beq.n	8008c8c <cppLoop+0x10fc>
				led.LR(-1, 1);
 8008c46:	2201      	movs	r2, #1
 8008c48:	f04f 31ff 	mov.w	r1, #4294967295
 8008c4c:	484c      	ldr	r0, [pc, #304]	; (8008d80 <cppLoop+0x11f0>)
 8008c4e:	f7f9 fb3d 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008c52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c56:	f001 f94f 	bl	8009ef8 <HAL_Delay>
				selector_vel++;
 8008c5a:	4b56      	ldr	r3, [pc, #344]	; (8008db4 <cppLoop+0x1224>)
 8008c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	3301      	adds	r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	b21a      	sxth	r2, r3
 8008c68:	4b52      	ldr	r3, [pc, #328]	; (8008db4 <cppLoop+0x1224>)
 8008c6a:	801a      	strh	r2, [r3, #0]
				if(selector_vel >= 2) selector_vel = 0;
 8008c6c:	4b51      	ldr	r3, [pc, #324]	; (8008db4 <cppLoop+0x1224>)
 8008c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	dd02      	ble.n	8008c7c <cppLoop+0x10ec>
 8008c76:	4b4f      	ldr	r3, [pc, #316]	; (8008db4 <cppLoop+0x1224>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c82:	483f      	ldr	r0, [pc, #252]	; (8008d80 <cppLoop+0x11f0>)
 8008c84:	f7f9 fb22 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008c88:	f000 bff1 	b.w	8009c6e <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_R){
 8008c8c:	483d      	ldr	r0, [pc, #244]	; (8008d84 <cppLoop+0x11f4>)
 8008c8e:	f7f9 f9fd 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b10      	cmp	r3, #16
 8008c96:	bf0c      	ite	eq
 8008c98:	2301      	moveq	r3, #1
 8008c9a:	2300      	movne	r3, #0
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d03c      	beq.n	8008d1c <cppLoop+0x118c>
				led.LR(-1, 1);
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca8:	4835      	ldr	r0, [pc, #212]	; (8008d80 <cppLoop+0x11f0>)
 8008caa:	f7f9 fb0f 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008cae:	2064      	movs	r0, #100	; 0x64
 8008cb0:	f001 f922 	bl	8009ef8 <HAL_Delay>
				if(selector_vel == 0)
 8008cb4:	4b3f      	ldr	r3, [pc, #252]	; (8008db4 <cppLoop+0x1224>)
 8008cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d113      	bne.n	8008ce6 <cppLoop+0x1156>
					adj_max_velocity = adj_max_velocity + 0.1;
 8008cbe:	4b33      	ldr	r3, [pc, #204]	; (8008d8c <cppLoop+0x11fc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7f7 fc58 	bl	8000578 <__aeabi_f2d>
 8008cc8:	a32b      	add	r3, pc, #172	; (adr r3, 8008d78 <cppLoop+0x11e8>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 faf5 	bl	80002bc <__adddf3>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	4621      	mov	r1, r4
 8008cda:	f7f7 ff9d 	bl	8000c18 <__aeabi_d2f>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	4b2a      	ldr	r3, [pc, #168]	; (8008d8c <cppLoop+0x11fc>)
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e012      	b.n	8008d0c <cppLoop+0x117c>
					adj_min_velocity = adj_min_velocity + 0.1;
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <cppLoop+0x1204>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f7 fc44 	bl	8000578 <__aeabi_f2d>
 8008cf0:	a321      	add	r3, pc, #132	; (adr r3, 8008d78 <cppLoop+0x11e8>)
 8008cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf6:	f7f7 fae1 	bl	80002bc <__adddf3>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	460c      	mov	r4, r1
 8008cfe:	4618      	mov	r0, r3
 8008d00:	4621      	mov	r1, r4
 8008d02:	f7f7 ff89 	bl	8000c18 <__aeabi_d2f>
 8008d06:	4602      	mov	r2, r0
 8008d08:	4b22      	ldr	r3, [pc, #136]	; (8008d94 <cppLoop+0x1204>)
 8008d0a:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d12:	481b      	ldr	r0, [pc, #108]	; (8008d80 <cppLoop+0x11f0>)
 8008d14:	f7f9 fada 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008d18:	f000 bfa9 	b.w	8009c6e <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_L){
 8008d1c:	4819      	ldr	r0, [pc, #100]	; (8008d84 <cppLoop+0x11f4>)
 8008d1e:	f7f9 f9b5 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	bf0c      	ite	eq
 8008d28:	2301      	moveq	r3, #1
 8008d2a:	2300      	movne	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d05d      	beq.n	8008dee <cppLoop+0x125e>
				led.LR(-1, 1);
 8008d32:	2201      	movs	r2, #1
 8008d34:	f04f 31ff 	mov.w	r1, #4294967295
 8008d38:	4811      	ldr	r0, [pc, #68]	; (8008d80 <cppLoop+0x11f0>)
 8008d3a:	f7f9 fac7 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 8008d3e:	2064      	movs	r0, #100	; 0x64
 8008d40:	f001 f8da 	bl	8009ef8 <HAL_Delay>
				if(selector_vel == 0)
 8008d44:	4b1b      	ldr	r3, [pc, #108]	; (8008db4 <cppLoop+0x1224>)
 8008d46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d134      	bne.n	8008db8 <cppLoop+0x1228>
					adj_max_velocity = adj_max_velocity - 0.1;
 8008d4e:	4b0f      	ldr	r3, [pc, #60]	; (8008d8c <cppLoop+0x11fc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7f7 fc10 	bl	8000578 <__aeabi_f2d>
 8008d58:	a307      	add	r3, pc, #28	; (adr r3, 8008d78 <cppLoop+0x11e8>)
 8008d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5e:	f7f7 faab 	bl	80002b8 <__aeabi_dsub>
 8008d62:	4603      	mov	r3, r0
 8008d64:	460c      	mov	r4, r1
 8008d66:	4618      	mov	r0, r3
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f7f7 ff55 	bl	8000c18 <__aeabi_d2f>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	4b06      	ldr	r3, [pc, #24]	; (8008d8c <cppLoop+0x11fc>)
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	e033      	b.n	8008dde <cppLoop+0x124e>
 8008d76:	bf00      	nop
 8008d78:	9999999a 	.word	0x9999999a
 8008d7c:	3fb99999 	.word	0x3fb99999
 8008d80:	20000558 	.word	0x20000558
 8008d84:	2000054c 	.word	0x2000054c
 8008d88:	2004524a 	.word	0x2004524a
 8008d8c:	2004528c 	.word	0x2004528c
 8008d90:	08019028 	.word	0x08019028
 8008d94:	2004529c 	.word	0x2004529c
 8008d98:	08018fdc 	.word	0x08018fdc
 8008d9c:	200209d4 	.word	0x200209d4
 8008da0:	2000057c 	.word	0x2000057c
 8008da4:	08018fe8 	.word	0x08018fe8
 8008da8:	08018ff4 	.word	0x08018ff4
 8008dac:	08019000 	.word	0x08019000
 8008db0:	08019010 	.word	0x08019010
 8008db4:	20045250 	.word	0x20045250
					adj_min_velocity = adj_min_velocity - 0.1;
 8008db8:	4bb5      	ldr	r3, [pc, #724]	; (8009090 <cppLoop+0x1500>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7f7 fbdb 	bl	8000578 <__aeabi_f2d>
 8008dc2:	a3b1      	add	r3, pc, #708	; (adr r3, 8009088 <cppLoop+0x14f8>)
 8008dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc8:	f7f7 fa76 	bl	80002b8 <__aeabi_dsub>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	f7f7 ff20 	bl	8000c18 <__aeabi_d2f>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4bad      	ldr	r3, [pc, #692]	; (8009090 <cppLoop+0x1500>)
 8008ddc:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8008dde:	2200      	movs	r2, #0
 8008de0:	f04f 31ff 	mov.w	r1, #4294967295
 8008de4:	48ab      	ldr	r0, [pc, #684]	; (8009094 <cppLoop+0x1504>)
 8008de6:	f7f9 fa71 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008dea:	f000 bf40 	b.w	8009c6e <cppLoop+0x20de>
			else if(joy_stick.getValue() == JOY_C){
 8008dee:	48aa      	ldr	r0, [pc, #680]	; (8009098 <cppLoop+0x1508>)
 8008df0:	f7f9 f94c 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	bf0c      	ite	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	2300      	movne	r3, #0
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8734 	beq.w	8009c6e <cppLoop+0x20de>
				led.LR(-1, 1);
 8008e06:	2201      	movs	r2, #1
 8008e08:	f04f 31ff 	mov.w	r1, #4294967295
 8008e0c:	48a1      	ldr	r0, [pc, #644]	; (8009094 <cppLoop+0x1504>)
 8008e0e:	f7f9 fa5d 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 8008e12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e16:	f001 f86f 	bl	8009ef8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	4b9f      	ldr	r3, [pc, #636]	; (800909c <cppLoop+0x150c>)
 8008e20:	2201      	movs	r2, #1
 8008e22:	499f      	ldr	r1, [pc, #636]	; (80090a0 <cppLoop+0x1510>)
 8008e24:	489f      	ldr	r0, [pc, #636]	; (80090a4 <cppLoop+0x1514>)
 8008e26:	f7f8 fd19 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	9300      	str	r3, [sp, #0]
 8008e2e:	4b98      	ldr	r3, [pc, #608]	; (8009090 <cppLoop+0x1500>)
 8008e30:	2201      	movs	r2, #1
 8008e32:	499d      	ldr	r1, [pc, #628]	; (80090a8 <cppLoop+0x1518>)
 8008e34:	489b      	ldr	r0, [pc, #620]	; (80090a4 <cppLoop+0x1514>)
 8008e36:	f7f8 fd11 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity(adj_max_velocity);
 8008e3a:	4b98      	ldr	r3, [pc, #608]	; (800909c <cppLoop+0x150c>)
 8008e3c:	edd3 7a00 	vldr	s15, [r3]
 8008e40:	eeb0 0a67 	vmov.f32	s0, s15
 8008e44:	4899      	ldr	r0, [pc, #612]	; (80090ac <cppLoop+0x151c>)
 8008e46:	f7fa ff6a 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
				line_trace.setMinVelocity(adj_min_velocity);
 8008e4a:	4b91      	ldr	r3, [pc, #580]	; (8009090 <cppLoop+0x1500>)
 8008e4c:	edd3 7a00 	vldr	s15, [r3]
 8008e50:	eeb0 0a67 	vmov.f32	s0, s15
 8008e54:	4895      	ldr	r0, [pc, #596]	; (80090ac <cppLoop+0x151c>)
 8008e56:	f7fa ff82 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
				led.LR(-1, 0);
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e60:	488c      	ldr	r0, [pc, #560]	; (8009094 <cppLoop+0x1504>)
 8008e62:	f7f9 fa33 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8008e66:	f000 bf02 	b.w	8009c6e <cppLoop+0x20de>

	/*-------------------------------------------------------------------------*/
	/*-----------------------------------Third running-----------------------*/
	/*-------------------------------------------------------------------------*/
	case 4:
		led.fullColor('M');
 8008e6a:	214d      	movs	r1, #77	; 0x4d
 8008e6c:	4889      	ldr	r0, [pc, #548]	; (8009094 <cppLoop+0x1504>)
 8008e6e:	f7f9 f971 	bl	8002154 <_ZN3LED9fullColorEc>

		if(joy_stick.getValue() == JOY_D){
 8008e72:	4889      	ldr	r0, [pc, #548]	; (8009098 <cppLoop+0x1508>)
 8008e74:	f7f9 f90a 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	bf0c      	ite	eq
 8008e7e:	2301      	moveq	r3, #1
 8008e80:	2300      	movne	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d020      	beq.n	8008eca <cppLoop+0x133a>
			led.LR(-1, 1);
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e8e:	4881      	ldr	r0, [pc, #516]	; (8009094 <cppLoop+0x1504>)
 8008e90:	f7f9 fa1c 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008e98:	f001 f82e 	bl	8009ef8 <HAL_Delay>

			selector_run++;
 8008e9c:	4b84      	ldr	r3, [pc, #528]	; (80090b0 <cppLoop+0x1520>)
 8008e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	b21a      	sxth	r2, r3
 8008eaa:	4b81      	ldr	r3, [pc, #516]	; (80090b0 <cppLoop+0x1520>)
 8008eac:	801a      	strh	r2, [r3, #0]
			if(selector_run >= 2) selector_run = 0;
 8008eae:	4b80      	ldr	r3, [pc, #512]	; (80090b0 <cppLoop+0x1520>)
 8008eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	dd02      	ble.n	8008ebe <cppLoop+0x132e>
 8008eb8:	4b7d      	ldr	r3, [pc, #500]	; (80090b0 <cppLoop+0x1520>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec4:	4873      	ldr	r0, [pc, #460]	; (8009094 <cppLoop+0x1504>)
 8008ec6:	f7f9 fa01 	bl	80022cc <_ZN3LED2LREaa>
		}

		if(selector_run == 0){
 8008eca:	4b79      	ldr	r3, [pc, #484]	; (80090b0 <cppLoop+0x1520>)
 8008ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 8081 	bne.w	8008fd8 <cppLoop+0x1448>
			lcd_clear();
 8008ed6:	f7f8 f8e3 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008eda:	2100      	movs	r1, #0
 8008edc:	2000      	movs	r0, #0
 8008ede:	f7f8 f8ef 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008ee2:	4b74      	ldr	r3, [pc, #464]	; (80090b4 <cppLoop+0x1524>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7f7 fb46 	bl	8000578 <__aeabi_f2d>
 8008eec:	4603      	mov	r3, r0
 8008eee:	460c      	mov	r4, r1
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	4623      	mov	r3, r4
 8008ef4:	4870      	ldr	r0, [pc, #448]	; (80090b8 <cppLoop+0x1528>)
 8008ef6:	f7f8 f90d 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8008efa:	2101      	movs	r1, #1
 8008efc:	2000      	movs	r0, #0
 8008efe:	f7f8 f8df 	bl	80010c0 <lcd_locate>
			lcd_printf("Start%3.1f", adj_min_velocity2);
 8008f02:	4b6e      	ldr	r3, [pc, #440]	; (80090bc <cppLoop+0x152c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f7 fb36 	bl	8000578 <__aeabi_f2d>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	461a      	mov	r2, r3
 8008f12:	4623      	mov	r3, r4
 8008f14:	486a      	ldr	r0, [pc, #424]	; (80090c0 <cppLoop+0x1530>)
 8008f16:	f7f8 f8fd 	bl	8001114 <lcd_printf>

			if(joy_stick.getValue() == JOY_C){
 8008f1a:	485f      	ldr	r0, [pc, #380]	; (8009098 <cppLoop+0x1508>)
 8008f1c:	f7f9 f8b6 	bl	800208c <_ZN8JoyStick8getValueEv>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	bf0c      	ite	eq
 8008f26:	2301      	moveq	r3, #1
 8008f28:	2300      	movne	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f000 86a0 	beq.w	8009c72 <cppLoop+0x20e2>
				HAL_Delay(500);
 8008f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008f36:	f000 ffdf 	bl	8009ef8 <HAL_Delay>

				led.LR(1, -1);
 8008f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f3e:	2101      	movs	r1, #1
 8008f40:	4854      	ldr	r0, [pc, #336]	; (8009094 <cppLoop+0x1504>)
 8008f42:	f7f9 f9c3 	bl	80022cc <_ZN3LED2LREaa>
				line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008f46:	4b5f      	ldr	r3, [pc, #380]	; (80090c4 <cppLoop+0x1534>)
 8008f48:	edd3 7a00 	vldr	s15, [r3]
 8008f4c:	4b5e      	ldr	r3, [pc, #376]	; (80090c8 <cppLoop+0x1538>)
 8008f4e:	ed93 7a00 	vldr	s14, [r3]
 8008f52:	4b5e      	ldr	r3, [pc, #376]	; (80090cc <cppLoop+0x153c>)
 8008f54:	edd3 6a00 	vldr	s13, [r3]
 8008f58:	eeb0 1a66 	vmov.f32	s2, s13
 8008f5c:	eef0 0a47 	vmov.f32	s1, s14
 8008f60:	eeb0 0a67 	vmov.f32	s0, s15
 8008f64:	4851      	ldr	r0, [pc, #324]	; (80090ac <cppLoop+0x151c>)
 8008f66:	f7fa fe2f 	bl	8003bc8 <_ZN9LineTrace7setGainEfff>
				line_trace.setMode(THIRD_RUNNING);
 8008f6a:	2102      	movs	r1, #2
 8008f6c:	484f      	ldr	r0, [pc, #316]	; (80090ac <cppLoop+0x151c>)
 8008f6e:	f7fb f8a3 	bl	80040b8 <_ZN9LineTrace7setModeEs>
				line_trace.setTargetVelocity(adj_min_velocity2);
 8008f72:	4b52      	ldr	r3, [pc, #328]	; (80090bc <cppLoop+0x152c>)
 8008f74:	edd3 7a00 	vldr	s15, [r3]
 8008f78:	eeb0 0a67 	vmov.f32	s0, s15
 8008f7c:	484b      	ldr	r0, [pc, #300]	; (80090ac <cppLoop+0x151c>)
 8008f7e:	f7fa febe 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8008f82:	4b4c      	ldr	r3, [pc, #304]	; (80090b4 <cppLoop+0x1524>)
 8008f84:	edd3 7a00 	vldr	s15, [r3]
 8008f88:	eeb0 0a67 	vmov.f32	s0, s15
 8008f8c:	4847      	ldr	r0, [pc, #284]	; (80090ac <cppLoop+0x151c>)
 8008f8e:	f7fa fed6 	bl	8003d3e <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8008f92:	4b4a      	ldr	r3, [pc, #296]	; (80090bc <cppLoop+0x152c>)
 8008f94:	edd3 7a00 	vldr	s15, [r3]
 8008f98:	eeb0 0a67 	vmov.f32	s0, s15
 8008f9c:	4843      	ldr	r0, [pc, #268]	; (80090ac <cppLoop+0x151c>)
 8008f9e:	f7fa feee 	bl	8003d7e <_ZN9LineTrace15setMinVelocity2Ef>
				line_trace.createVelocityTabele();
 8008fa2:	4842      	ldr	r0, [pc, #264]	; (80090ac <cppLoop+0x151c>)
 8008fa4:	f7fb fac2 	bl	800452c <_ZN9LineTrace20createVelocityTabeleEv>

				//logger.start();

				line_trace.running();
 8008fa8:	4840      	ldr	r0, [pc, #256]	; (80090ac <cppLoop+0x151c>)
 8008faa:	f7fb f8c9 	bl	8004140 <_ZN9LineTrace7runningEv>

				logger.stop();
 8008fae:	4848      	ldr	r0, [pc, #288]	; (80090d0 <cppLoop+0x1540>)
 8008fb0:	f7fb ff62 	bl	8004e78 <_ZN6Logger4stopEv>
				logger.saveLogs("STATELOG", "TARVEL.txt");
 8008fb4:	4a47      	ldr	r2, [pc, #284]	; (80090d4 <cppLoop+0x1544>)
 8008fb6:	4948      	ldr	r1, [pc, #288]	; (80090d8 <cppLoop+0x1548>)
 8008fb8:	4845      	ldr	r0, [pc, #276]	; (80090d0 <cppLoop+0x1540>)
 8008fba:	f7fb fdf6 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
				logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008fbe:	4a47      	ldr	r2, [pc, #284]	; (80090dc <cppLoop+0x154c>)
 8008fc0:	4945      	ldr	r1, [pc, #276]	; (80090d8 <cppLoop+0x1548>)
 8008fc2:	4843      	ldr	r0, [pc, #268]	; (80090d0 <cppLoop+0x1540>)
 8008fc4:	f7fb fe05 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>

				led.LR(0, -1);
 8008fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fcc:	2100      	movs	r1, #0
 8008fce:	4831      	ldr	r0, [pc, #196]	; (8009094 <cppLoop+0x1504>)
 8008fd0:	f7f9 f97c 	bl	80022cc <_ZN3LED2LREaa>

				led.LR(-1, 0);
			}

		}
		break;
 8008fd4:	f000 be4d 	b.w	8009c72 <cppLoop+0x20e2>
			lcd_clear();
 8008fd8:	f7f8 f862 	bl	80010a0 <lcd_clear>
			lcd_locate(0,0);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	2000      	movs	r0, #0
 8008fe0:	f7f8 f86e 	bl	80010c0 <lcd_locate>
			lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008fe4:	4831      	ldr	r0, [pc, #196]	; (80090ac <cppLoop+0x151c>)
 8008fe6:	f7fa fefa 	bl	8003dde <_ZN9LineTrace15getMaxVelocity2Ev>
 8008fea:	ee10 3a10 	vmov	r3, s0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7f7 fac2 	bl	8000578 <__aeabi_f2d>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	4623      	mov	r3, r4
 8008ffc:	482e      	ldr	r0, [pc, #184]	; (80090b8 <cppLoop+0x1528>)
 8008ffe:	f7f8 f889 	bl	8001114 <lcd_printf>
			lcd_locate(0,1);
 8009002:	2101      	movs	r1, #1
 8009004:	2000      	movs	r0, #0
 8009006:	f7f8 f85b 	bl	80010c0 <lcd_locate>
			lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 800900a:	4828      	ldr	r0, [pc, #160]	; (80090ac <cppLoop+0x151c>)
 800900c:	f7fa ff07 	bl	8003e1e <_ZN9LineTrace15getMinVelocity2Ev>
 8009010:	ee10 3a10 	vmov	r3, s0
 8009014:	4618      	mov	r0, r3
 8009016:	f7f7 faaf 	bl	8000578 <__aeabi_f2d>
 800901a:	4603      	mov	r3, r0
 800901c:	460c      	mov	r4, r1
 800901e:	461a      	mov	r2, r3
 8009020:	4623      	mov	r3, r4
 8009022:	482f      	ldr	r0, [pc, #188]	; (80090e0 <cppLoop+0x1550>)
 8009024:	f7f8 f876 	bl	8001114 <lcd_printf>
			if(joy_stick.getValue() == JOY_U){
 8009028:	481b      	ldr	r0, [pc, #108]	; (8009098 <cppLoop+0x1508>)
 800902a:	f7f9 f82f 	bl	800208c <_ZN8JoyStick8getValueEv>
 800902e:	4603      	mov	r3, r0
 8009030:	2b08      	cmp	r3, #8
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	d054      	beq.n	80090e8 <cppLoop+0x1558>
				led.LR(-1, 1);
 800903e:	2201      	movs	r2, #1
 8009040:	f04f 31ff 	mov.w	r1, #4294967295
 8009044:	4813      	ldr	r0, [pc, #76]	; (8009094 <cppLoop+0x1504>)
 8009046:	f7f9 f941 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800904a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800904e:	f000 ff53 	bl	8009ef8 <HAL_Delay>
				selector_vel2++;
 8009052:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <cppLoop+0x1554>)
 8009054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009058:	b29b      	uxth	r3, r3
 800905a:	3301      	adds	r3, #1
 800905c:	b29b      	uxth	r3, r3
 800905e:	b21a      	sxth	r2, r3
 8009060:	4b20      	ldr	r3, [pc, #128]	; (80090e4 <cppLoop+0x1554>)
 8009062:	801a      	strh	r2, [r3, #0]
				if(selector_vel2 >= 2) selector_vel2 = 0;
 8009064:	4b1f      	ldr	r3, [pc, #124]	; (80090e4 <cppLoop+0x1554>)
 8009066:	f9b3 3000 	ldrsh.w	r3, [r3]
 800906a:	2b01      	cmp	r3, #1
 800906c:	dd02      	ble.n	8009074 <cppLoop+0x14e4>
 800906e:	4b1d      	ldr	r3, [pc, #116]	; (80090e4 <cppLoop+0x1554>)
 8009070:	2200      	movs	r2, #0
 8009072:	801a      	strh	r2, [r3, #0]
				led.LR(-1, 0);
 8009074:	2200      	movs	r2, #0
 8009076:	f04f 31ff 	mov.w	r1, #4294967295
 800907a:	4806      	ldr	r0, [pc, #24]	; (8009094 <cppLoop+0x1504>)
 800907c:	f7f9 f926 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009080:	f000 bdf7 	b.w	8009c72 <cppLoop+0x20e2>
 8009084:	f3af 8000 	nop.w
 8009088:	9999999a 	.word	0x9999999a
 800908c:	3fb99999 	.word	0x3fb99999
 8009090:	2004529c 	.word	0x2004529c
 8009094:	20000558 	.word	0x20000558
 8009098:	2000054c 	.word	0x2000054c
 800909c:	2004528c 	.word	0x2004528c
 80090a0:	08019034 	.word	0x08019034
 80090a4:	08018f90 	.word	0x08018f90
 80090a8:	08019040 	.word	0x08019040
 80090ac:	200209d4 	.word	0x200209d4
 80090b0:	2004524a 	.word	0x2004524a
 80090b4:	20045294 	.word	0x20045294
 80090b8:	0801904c 	.word	0x0801904c
 80090bc:	200452a4 	.word	0x200452a4
 80090c0:	08018fdc 	.word	0x08018fdc
 80090c4:	20045254 	.word	0x20045254
 80090c8:	2004525c 	.word	0x2004525c
 80090cc:	20045264 	.word	0x20045264
 80090d0:	2000057c 	.word	0x2000057c
 80090d4:	08018fe8 	.word	0x08018fe8
 80090d8:	08018ff4 	.word	0x08018ff4
 80090dc:	08019000 	.word	0x08019000
 80090e0:	08019010 	.word	0x08019010
 80090e4:	20045252 	.word	0x20045252
			else if(joy_stick.getValue() == JOY_R){
 80090e8:	48b9      	ldr	r0, [pc, #740]	; (80093d0 <cppLoop+0x1840>)
 80090ea:	f7f8 ffcf 	bl	800208c <_ZN8JoyStick8getValueEv>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b10      	cmp	r3, #16
 80090f2:	bf0c      	ite	eq
 80090f4:	2301      	moveq	r3, #1
 80090f6:	2300      	movne	r3, #0
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d03c      	beq.n	8009178 <cppLoop+0x15e8>
				led.LR(-1, 1);
 80090fe:	2201      	movs	r2, #1
 8009100:	f04f 31ff 	mov.w	r1, #4294967295
 8009104:	48b3      	ldr	r0, [pc, #716]	; (80093d4 <cppLoop+0x1844>)
 8009106:	f7f9 f8e1 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800910a:	2064      	movs	r0, #100	; 0x64
 800910c:	f000 fef4 	bl	8009ef8 <HAL_Delay>
				if(selector_vel2 == 0)
 8009110:	4bb1      	ldr	r3, [pc, #708]	; (80093d8 <cppLoop+0x1848>)
 8009112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d113      	bne.n	8009142 <cppLoop+0x15b2>
					adj_max_velocity2 = adj_max_velocity2 + 0.1;
 800911a:	4bb0      	ldr	r3, [pc, #704]	; (80093dc <cppLoop+0x184c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f7f7 fa2a 	bl	8000578 <__aeabi_f2d>
 8009124:	a3a8      	add	r3, pc, #672	; (adr r3, 80093c8 <cppLoop+0x1838>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f8c7 	bl	80002bc <__adddf3>
 800912e:	4603      	mov	r3, r0
 8009130:	460c      	mov	r4, r1
 8009132:	4618      	mov	r0, r3
 8009134:	4621      	mov	r1, r4
 8009136:	f7f7 fd6f 	bl	8000c18 <__aeabi_d2f>
 800913a:	4602      	mov	r2, r0
 800913c:	4ba7      	ldr	r3, [pc, #668]	; (80093dc <cppLoop+0x184c>)
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	e012      	b.n	8009168 <cppLoop+0x15d8>
					adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8009142:	4ba7      	ldr	r3, [pc, #668]	; (80093e0 <cppLoop+0x1850>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4618      	mov	r0, r3
 8009148:	f7f7 fa16 	bl	8000578 <__aeabi_f2d>
 800914c:	a39e      	add	r3, pc, #632	; (adr r3, 80093c8 <cppLoop+0x1838>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f8b3 	bl	80002bc <__adddf3>
 8009156:	4603      	mov	r3, r0
 8009158:	460c      	mov	r4, r1
 800915a:	4618      	mov	r0, r3
 800915c:	4621      	mov	r1, r4
 800915e:	f7f7 fd5b 	bl	8000c18 <__aeabi_d2f>
 8009162:	4602      	mov	r2, r0
 8009164:	4b9e      	ldr	r3, [pc, #632]	; (80093e0 <cppLoop+0x1850>)
 8009166:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 8009168:	2200      	movs	r2, #0
 800916a:	f04f 31ff 	mov.w	r1, #4294967295
 800916e:	4899      	ldr	r0, [pc, #612]	; (80093d4 <cppLoop+0x1844>)
 8009170:	f7f9 f8ac 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009174:	f000 bd7d 	b.w	8009c72 <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_L){
 8009178:	4895      	ldr	r0, [pc, #596]	; (80093d0 <cppLoop+0x1840>)
 800917a:	f7f8 ff87 	bl	800208c <_ZN8JoyStick8getValueEv>
 800917e:	4603      	mov	r3, r0
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf0c      	ite	eq
 8009184:	2301      	moveq	r3, #1
 8009186:	2300      	movne	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d03c      	beq.n	8009208 <cppLoop+0x1678>
				led.LR(-1, 1);
 800918e:	2201      	movs	r2, #1
 8009190:	f04f 31ff 	mov.w	r1, #4294967295
 8009194:	488f      	ldr	r0, [pc, #572]	; (80093d4 <cppLoop+0x1844>)
 8009196:	f7f9 f899 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(100);
 800919a:	2064      	movs	r0, #100	; 0x64
 800919c:	f000 feac 	bl	8009ef8 <HAL_Delay>
				if(selector_vel2 == 0)
 80091a0:	4b8d      	ldr	r3, [pc, #564]	; (80093d8 <cppLoop+0x1848>)
 80091a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d113      	bne.n	80091d2 <cppLoop+0x1642>
					adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80091aa:	4b8c      	ldr	r3, [pc, #560]	; (80093dc <cppLoop+0x184c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f7 f9e2 	bl	8000578 <__aeabi_f2d>
 80091b4:	a384      	add	r3, pc, #528	; (adr r3, 80093c8 <cppLoop+0x1838>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 f87d 	bl	80002b8 <__aeabi_dsub>
 80091be:	4603      	mov	r3, r0
 80091c0:	460c      	mov	r4, r1
 80091c2:	4618      	mov	r0, r3
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7f7 fd27 	bl	8000c18 <__aeabi_d2f>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4b83      	ldr	r3, [pc, #524]	; (80093dc <cppLoop+0x184c>)
 80091ce:	601a      	str	r2, [r3, #0]
 80091d0:	e012      	b.n	80091f8 <cppLoop+0x1668>
					adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80091d2:	4b83      	ldr	r3, [pc, #524]	; (80093e0 <cppLoop+0x1850>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7f7 f9ce 	bl	8000578 <__aeabi_f2d>
 80091dc:	a37a      	add	r3, pc, #488	; (adr r3, 80093c8 <cppLoop+0x1838>)
 80091de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e2:	f7f7 f869 	bl	80002b8 <__aeabi_dsub>
 80091e6:	4603      	mov	r3, r0
 80091e8:	460c      	mov	r4, r1
 80091ea:	4618      	mov	r0, r3
 80091ec:	4621      	mov	r1, r4
 80091ee:	f7f7 fd13 	bl	8000c18 <__aeabi_d2f>
 80091f2:	4602      	mov	r2, r0
 80091f4:	4b7a      	ldr	r3, [pc, #488]	; (80093e0 <cppLoop+0x1850>)
 80091f6:	601a      	str	r2, [r3, #0]
				led.LR(-1, 0);
 80091f8:	2200      	movs	r2, #0
 80091fa:	f04f 31ff 	mov.w	r1, #4294967295
 80091fe:	4875      	ldr	r0, [pc, #468]	; (80093d4 <cppLoop+0x1844>)
 8009200:	f7f9 f864 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009204:	f000 bd35 	b.w	8009c72 <cppLoop+0x20e2>
			else if(joy_stick.getValue() == JOY_C){
 8009208:	4871      	ldr	r0, [pc, #452]	; (80093d0 <cppLoop+0x1840>)
 800920a:	f7f8 ff3f 	bl	800208c <_ZN8JoyStick8getValueEv>
 800920e:	4603      	mov	r3, r0
 8009210:	2b02      	cmp	r3, #2
 8009212:	bf0c      	ite	eq
 8009214:	2301      	moveq	r3, #1
 8009216:	2300      	movne	r3, #0
 8009218:	b2db      	uxtb	r3, r3
 800921a:	2b00      	cmp	r3, #0
 800921c:	f000 8529 	beq.w	8009c72 <cppLoop+0x20e2>
				led.LR(-1, 1);
 8009220:	2201      	movs	r2, #1
 8009222:	f04f 31ff 	mov.w	r1, #4294967295
 8009226:	486b      	ldr	r0, [pc, #428]	; (80093d4 <cppLoop+0x1844>)
 8009228:	f7f9 f850 	bl	80022cc <_ZN3LED2LREaa>
				HAL_Delay(300);
 800922c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009230:	f000 fe62 	bl	8009ef8 <HAL_Delay>
				sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8009234:	2300      	movs	r3, #0
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	4b68      	ldr	r3, [pc, #416]	; (80093dc <cppLoop+0x184c>)
 800923a:	2201      	movs	r2, #1
 800923c:	4969      	ldr	r1, [pc, #420]	; (80093e4 <cppLoop+0x1854>)
 800923e:	486a      	ldr	r0, [pc, #424]	; (80093e8 <cppLoop+0x1858>)
 8009240:	f7f8 fb0c 	bl	800185c <sd_write_array_float>
				sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8009244:	2300      	movs	r3, #0
 8009246:	9300      	str	r3, [sp, #0]
 8009248:	4b65      	ldr	r3, [pc, #404]	; (80093e0 <cppLoop+0x1850>)
 800924a:	2201      	movs	r2, #1
 800924c:	4967      	ldr	r1, [pc, #412]	; (80093ec <cppLoop+0x185c>)
 800924e:	4866      	ldr	r0, [pc, #408]	; (80093e8 <cppLoop+0x1858>)
 8009250:	f7f8 fb04 	bl	800185c <sd_write_array_float>
				line_trace.setMaxVelocity2(adj_max_velocity2);
 8009254:	4b61      	ldr	r3, [pc, #388]	; (80093dc <cppLoop+0x184c>)
 8009256:	edd3 7a00 	vldr	s15, [r3]
 800925a:	eeb0 0a67 	vmov.f32	s0, s15
 800925e:	4864      	ldr	r0, [pc, #400]	; (80093f0 <cppLoop+0x1860>)
 8009260:	f7fa fd6d 	bl	8003d3e <_ZN9LineTrace15setMaxVelocity2Ef>
				line_trace.setMinVelocity2(adj_min_velocity2);
 8009264:	4b5e      	ldr	r3, [pc, #376]	; (80093e0 <cppLoop+0x1850>)
 8009266:	edd3 7a00 	vldr	s15, [r3]
 800926a:	eeb0 0a67 	vmov.f32	s0, s15
 800926e:	4860      	ldr	r0, [pc, #384]	; (80093f0 <cppLoop+0x1860>)
 8009270:	f7fa fd85 	bl	8003d7e <_ZN9LineTrace15setMinVelocity2Ef>
				led.LR(-1, 0);
 8009274:	2200      	movs	r2, #0
 8009276:	f04f 31ff 	mov.w	r1, #4294967295
 800927a:	4856      	ldr	r0, [pc, #344]	; (80093d4 <cppLoop+0x1844>)
 800927c:	f7f9 f826 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009280:	f000 bcf7 	b.w	8009c72 <cppLoop+0x20e2>

	case 5:
		led.fullColor('W');
 8009284:	2157      	movs	r1, #87	; 0x57
 8009286:	4853      	ldr	r0, [pc, #332]	; (80093d4 <cppLoop+0x1844>)
 8009288:	f7f8 ff64 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 800928c:	f7f7 ff08 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009290:	2100      	movs	r1, #0
 8009292:	2000      	movs	r0, #0
 8009294:	f7f7 ff14 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8009298:	4855      	ldr	r0, [pc, #340]	; (80093f0 <cppLoop+0x1860>)
 800929a:	f7fa fe04 	bl	8003ea6 <_ZN9LineTrace9getMaxAccEv>
 800929e:	ee10 3a10 	vmov	r3, s0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7f7 f968 	bl	8000578 <__aeabi_f2d>
 80092a8:	4603      	mov	r3, r0
 80092aa:	460c      	mov	r4, r1
 80092ac:	461a      	mov	r2, r3
 80092ae:	4623      	mov	r3, r4
 80092b0:	4850      	ldr	r0, [pc, #320]	; (80093f4 <cppLoop+0x1864>)
 80092b2:	f7f7 ff2f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80092b6:	2101      	movs	r1, #1
 80092b8:	2000      	movs	r0, #0
 80092ba:	f7f7 ff01 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 80092be:	484c      	ldr	r0, [pc, #304]	; (80093f0 <cppLoop+0x1860>)
 80092c0:	f7fa fe27 	bl	8003f12 <_ZN9LineTrace9getMaxDecEv>
 80092c4:	ee10 3a10 	vmov	r3, s0
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7f7 f955 	bl	8000578 <__aeabi_f2d>
 80092ce:	4603      	mov	r3, r0
 80092d0:	460c      	mov	r4, r1
 80092d2:	461a      	mov	r2, r3
 80092d4:	4623      	mov	r3, r4
 80092d6:	4848      	ldr	r0, [pc, #288]	; (80093f8 <cppLoop+0x1868>)
 80092d8:	f7f7 ff1c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 80092dc:	483c      	ldr	r0, [pc, #240]	; (80093d0 <cppLoop+0x1840>)
 80092de:	f7f8 fed5 	bl	800208c <_ZN8JoyStick8getValueEv>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b04      	cmp	r3, #4
 80092e6:	bf0c      	ite	eq
 80092e8:	2301      	moveq	r3, #1
 80092ea:	2300      	movne	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d022      	beq.n	8009338 <cppLoop+0x17a8>
			led.LR(-1, 1);
 80092f2:	2201      	movs	r2, #1
 80092f4:	f04f 31ff 	mov.w	r1, #4294967295
 80092f8:	4836      	ldr	r0, [pc, #216]	; (80093d4 <cppLoop+0x1844>)
 80092fa:	f7f8 ffe7 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009302:	f000 fdf9 	bl	8009ef8 <HAL_Delay>

			selector_acc++;
 8009306:	4b3d      	ldr	r3, [pc, #244]	; (80093fc <cppLoop+0x186c>)
 8009308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800930c:	b29b      	uxth	r3, r3
 800930e:	3301      	adds	r3, #1
 8009310:	b29b      	uxth	r3, r3
 8009312:	b21a      	sxth	r2, r3
 8009314:	4b39      	ldr	r3, [pc, #228]	; (80093fc <cppLoop+0x186c>)
 8009316:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8009318:	4b38      	ldr	r3, [pc, #224]	; (80093fc <cppLoop+0x186c>)
 800931a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800931e:	2b01      	cmp	r3, #1
 8009320:	dd02      	ble.n	8009328 <cppLoop+0x1798>
 8009322:	4b36      	ldr	r3, [pc, #216]	; (80093fc <cppLoop+0x186c>)
 8009324:	2200      	movs	r2, #0
 8009326:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009328:	2200      	movs	r2, #0
 800932a:	f04f 31ff 	mov.w	r1, #4294967295
 800932e:	4829      	ldr	r0, [pc, #164]	; (80093d4 <cppLoop+0x1844>)
 8009330:	f7f8 ffcc 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8009334:	f000 bc9f 	b.w	8009c76 <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_R){
 8009338:	4825      	ldr	r0, [pc, #148]	; (80093d0 <cppLoop+0x1840>)
 800933a:	f7f8 fea7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800933e:	4603      	mov	r3, r0
 8009340:	2b10      	cmp	r3, #16
 8009342:	bf0c      	ite	eq
 8009344:	2301      	moveq	r3, #1
 8009346:	2300      	movne	r3, #0
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	d05c      	beq.n	8009408 <cppLoop+0x1878>
			led.LR(-1, 1);
 800934e:	2201      	movs	r2, #1
 8009350:	f04f 31ff 	mov.w	r1, #4294967295
 8009354:	481f      	ldr	r0, [pc, #124]	; (80093d4 <cppLoop+0x1844>)
 8009356:	f7f8 ffb9 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800935a:	2064      	movs	r0, #100	; 0x64
 800935c:	f000 fdcc 	bl	8009ef8 <HAL_Delay>
			if(selector_acc == 0){
 8009360:	4b26      	ldr	r3, [pc, #152]	; (80093fc <cppLoop+0x186c>)
 8009362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d113      	bne.n	8009392 <cppLoop+0x1802>
				adj_acc = adj_acc + 0.1;
 800936a:	4b25      	ldr	r3, [pc, #148]	; (8009400 <cppLoop+0x1870>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f7f7 f902 	bl	8000578 <__aeabi_f2d>
 8009374:	a314      	add	r3, pc, #80	; (adr r3, 80093c8 <cppLoop+0x1838>)
 8009376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937a:	f7f6 ff9f 	bl	80002bc <__adddf3>
 800937e:	4603      	mov	r3, r0
 8009380:	460c      	mov	r4, r1
 8009382:	4618      	mov	r0, r3
 8009384:	4621      	mov	r1, r4
 8009386:	f7f7 fc47 	bl	8000c18 <__aeabi_d2f>
 800938a:	4602      	mov	r2, r0
 800938c:	4b1c      	ldr	r3, [pc, #112]	; (8009400 <cppLoop+0x1870>)
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e012      	b.n	80093b8 <cppLoop+0x1828>
				adj_dec = adj_dec + 0.1;
 8009392:	4b1c      	ldr	r3, [pc, #112]	; (8009404 <cppLoop+0x1874>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4618      	mov	r0, r3
 8009398:	f7f7 f8ee 	bl	8000578 <__aeabi_f2d>
 800939c:	a30a      	add	r3, pc, #40	; (adr r3, 80093c8 <cppLoop+0x1838>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff8b 	bl	80002bc <__adddf3>
 80093a6:	4603      	mov	r3, r0
 80093a8:	460c      	mov	r4, r1
 80093aa:	4618      	mov	r0, r3
 80093ac:	4621      	mov	r1, r4
 80093ae:	f7f7 fc33 	bl	8000c18 <__aeabi_d2f>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b13      	ldr	r3, [pc, #76]	; (8009404 <cppLoop+0x1874>)
 80093b6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80093b8:	2200      	movs	r2, #0
 80093ba:	f04f 31ff 	mov.w	r1, #4294967295
 80093be:	4805      	ldr	r0, [pc, #20]	; (80093d4 <cppLoop+0x1844>)
 80093c0:	f7f8 ff84 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80093c4:	f000 bc57 	b.w	8009c76 <cppLoop+0x20e6>
 80093c8:	9999999a 	.word	0x9999999a
 80093cc:	3fb99999 	.word	0x3fb99999
 80093d0:	2000054c 	.word	0x2000054c
 80093d4:	20000558 	.word	0x20000558
 80093d8:	20045252 	.word	0x20045252
 80093dc:	20045294 	.word	0x20045294
 80093e0:	200452a4 	.word	0x200452a4
 80093e4:	08019058 	.word	0x08019058
 80093e8:	08018f90 	.word	0x08018f90
 80093ec:	08019064 	.word	0x08019064
 80093f0:	200209d4 	.word	0x200209d4
 80093f4:	08019070 	.word	0x08019070
 80093f8:	0801907c 	.word	0x0801907c
 80093fc:	2004524c 	.word	0x2004524c
 8009400:	200452ac 	.word	0x200452ac
 8009404:	200452b4 	.word	0x200452b4
		else if(joy_stick.getValue() == JOY_L){
 8009408:	48b5      	ldr	r0, [pc, #724]	; (80096e0 <cppLoop+0x1b50>)
 800940a:	f7f8 fe3f 	bl	800208c <_ZN8JoyStick8getValueEv>
 800940e:	4603      	mov	r3, r0
 8009410:	2b01      	cmp	r3, #1
 8009412:	bf0c      	ite	eq
 8009414:	2301      	moveq	r3, #1
 8009416:	2300      	movne	r3, #0
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d03b      	beq.n	8009496 <cppLoop+0x1906>
			led.LR(-1, 1);
 800941e:	2201      	movs	r2, #1
 8009420:	f04f 31ff 	mov.w	r1, #4294967295
 8009424:	48af      	ldr	r0, [pc, #700]	; (80096e4 <cppLoop+0x1b54>)
 8009426:	f7f8 ff51 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800942a:	2064      	movs	r0, #100	; 0x64
 800942c:	f000 fd64 	bl	8009ef8 <HAL_Delay>
			if(selector_acc == 0){
 8009430:	4bad      	ldr	r3, [pc, #692]	; (80096e8 <cppLoop+0x1b58>)
 8009432:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d113      	bne.n	8009462 <cppLoop+0x18d2>
				adj_acc = adj_acc - 0.1;
 800943a:	4bac      	ldr	r3, [pc, #688]	; (80096ec <cppLoop+0x1b5c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4618      	mov	r0, r3
 8009440:	f7f7 f89a 	bl	8000578 <__aeabi_f2d>
 8009444:	a3a4      	add	r3, pc, #656	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 ff35 	bl	80002b8 <__aeabi_dsub>
 800944e:	4603      	mov	r3, r0
 8009450:	460c      	mov	r4, r1
 8009452:	4618      	mov	r0, r3
 8009454:	4621      	mov	r1, r4
 8009456:	f7f7 fbdf 	bl	8000c18 <__aeabi_d2f>
 800945a:	4602      	mov	r2, r0
 800945c:	4ba3      	ldr	r3, [pc, #652]	; (80096ec <cppLoop+0x1b5c>)
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	e012      	b.n	8009488 <cppLoop+0x18f8>
				adj_dec = adj_dec - 0.1;
 8009462:	4ba3      	ldr	r3, [pc, #652]	; (80096f0 <cppLoop+0x1b60>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4618      	mov	r0, r3
 8009468:	f7f7 f886 	bl	8000578 <__aeabi_f2d>
 800946c:	a39a      	add	r3, pc, #616	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 800946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009472:	f7f6 ff21 	bl	80002b8 <__aeabi_dsub>
 8009476:	4603      	mov	r3, r0
 8009478:	460c      	mov	r4, r1
 800947a:	4618      	mov	r0, r3
 800947c:	4621      	mov	r1, r4
 800947e:	f7f7 fbcb 	bl	8000c18 <__aeabi_d2f>
 8009482:	4602      	mov	r2, r0
 8009484:	4b9a      	ldr	r3, [pc, #616]	; (80096f0 <cppLoop+0x1b60>)
 8009486:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009488:	2200      	movs	r2, #0
 800948a:	f04f 31ff 	mov.w	r1, #4294967295
 800948e:	4895      	ldr	r0, [pc, #596]	; (80096e4 <cppLoop+0x1b54>)
 8009490:	f7f8 ff1c 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009494:	e3ef      	b.n	8009c76 <cppLoop+0x20e6>
		else if(joy_stick.getValue() == JOY_C){
 8009496:	4892      	ldr	r0, [pc, #584]	; (80096e0 <cppLoop+0x1b50>)
 8009498:	f7f8 fdf8 	bl	800208c <_ZN8JoyStick8getValueEv>
 800949c:	4603      	mov	r3, r0
 800949e:	2b02      	cmp	r3, #2
 80094a0:	bf0c      	ite	eq
 80094a2:	2301      	moveq	r3, #1
 80094a4:	2300      	movne	r3, #0
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 83e4 	beq.w	8009c76 <cppLoop+0x20e6>
			led.LR(-1, 1);
 80094ae:	2201      	movs	r2, #1
 80094b0:	f04f 31ff 	mov.w	r1, #4294967295
 80094b4:	488b      	ldr	r0, [pc, #556]	; (80096e4 <cppLoop+0x1b54>)
 80094b6:	f7f8 ff09 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 80094ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80094be:	f000 fd1b 	bl	8009ef8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	4b89      	ldr	r3, [pc, #548]	; (80096ec <cppLoop+0x1b5c>)
 80094c8:	2201      	movs	r2, #1
 80094ca:	498a      	ldr	r1, [pc, #552]	; (80096f4 <cppLoop+0x1b64>)
 80094cc:	488a      	ldr	r0, [pc, #552]	; (80096f8 <cppLoop+0x1b68>)
 80094ce:	f7f8 f9c5 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 80094d2:	2300      	movs	r3, #0
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	4b86      	ldr	r3, [pc, #536]	; (80096f0 <cppLoop+0x1b60>)
 80094d8:	2201      	movs	r2, #1
 80094da:	4988      	ldr	r1, [pc, #544]	; (80096fc <cppLoop+0x1b6c>)
 80094dc:	4886      	ldr	r0, [pc, #536]	; (80096f8 <cppLoop+0x1b68>)
 80094de:	f7f8 f9bd 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 80094e2:	4b82      	ldr	r3, [pc, #520]	; (80096ec <cppLoop+0x1b5c>)
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	4b81      	ldr	r3, [pc, #516]	; (80096f0 <cppLoop+0x1b60>)
 80094ea:	ed93 7a00 	vldr	s14, [r3]
 80094ee:	eef0 0a47 	vmov.f32	s1, s14
 80094f2:	eeb0 0a67 	vmov.f32	s0, s15
 80094f6:	4882      	ldr	r0, [pc, #520]	; (8009700 <cppLoop+0x1b70>)
 80094f8:	f7fa fca1 	bl	8003e3e <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 80094fc:	2200      	movs	r2, #0
 80094fe:	f04f 31ff 	mov.w	r1, #4294967295
 8009502:	4878      	ldr	r0, [pc, #480]	; (80096e4 <cppLoop+0x1b54>)
 8009504:	f7f8 fee2 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009508:	e3b5      	b.n	8009c76 <cppLoop+0x20e6>

	case 6:
		led.fullColor('W');
 800950a:	2157      	movs	r1, #87	; 0x57
 800950c:	4875      	ldr	r0, [pc, #468]	; (80096e4 <cppLoop+0x1b54>)
 800950e:	f7f8 fe21 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009512:	f7f7 fdc5 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009516:	2100      	movs	r1, #0
 8009518:	2000      	movs	r0, #0
 800951a:	f7f7 fdd1 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 800951e:	4878      	ldr	r0, [pc, #480]	; (8009700 <cppLoop+0x1b70>)
 8009520:	f7fa fce5 	bl	8003eee <_ZN9LineTrace10getMaxAcc2Ev>
 8009524:	ee10 3a10 	vmov	r3, s0
 8009528:	4618      	mov	r0, r3
 800952a:	f7f7 f825 	bl	8000578 <__aeabi_f2d>
 800952e:	4603      	mov	r3, r0
 8009530:	460c      	mov	r4, r1
 8009532:	461a      	mov	r2, r3
 8009534:	4623      	mov	r3, r4
 8009536:	4873      	ldr	r0, [pc, #460]	; (8009704 <cppLoop+0x1b74>)
 8009538:	f7f7 fdec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800953c:	2101      	movs	r1, #1
 800953e:	2000      	movs	r0, #0
 8009540:	f7f7 fdbe 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8009544:	486e      	ldr	r0, [pc, #440]	; (8009700 <cppLoop+0x1b70>)
 8009546:	f7fa fcc0 	bl	8003eca <_ZN9LineTrace10getMaxDec2Ev>
 800954a:	ee10 3a10 	vmov	r3, s0
 800954e:	4618      	mov	r0, r3
 8009550:	f7f7 f812 	bl	8000578 <__aeabi_f2d>
 8009554:	4603      	mov	r3, r0
 8009556:	460c      	mov	r4, r1
 8009558:	461a      	mov	r2, r3
 800955a:	4623      	mov	r3, r4
 800955c:	486a      	ldr	r0, [pc, #424]	; (8009708 <cppLoop+0x1b78>)
 800955e:	f7f7 fdd9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_D){
 8009562:	485f      	ldr	r0, [pc, #380]	; (80096e0 <cppLoop+0x1b50>)
 8009564:	f7f8 fd92 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009568:	4603      	mov	r3, r0
 800956a:	2b04      	cmp	r3, #4
 800956c:	bf0c      	ite	eq
 800956e:	2301      	moveq	r3, #1
 8009570:	2300      	movne	r3, #0
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b00      	cmp	r3, #0
 8009576:	d021      	beq.n	80095bc <cppLoop+0x1a2c>
			led.LR(-1, 1);
 8009578:	2201      	movs	r2, #1
 800957a:	f04f 31ff 	mov.w	r1, #4294967295
 800957e:	4859      	ldr	r0, [pc, #356]	; (80096e4 <cppLoop+0x1b54>)
 8009580:	f7f8 fea4 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009584:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009588:	f000 fcb6 	bl	8009ef8 <HAL_Delay>

			selector_acc2++;
 800958c:	4b5f      	ldr	r3, [pc, #380]	; (800970c <cppLoop+0x1b7c>)
 800958e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009592:	b29b      	uxth	r3, r3
 8009594:	3301      	adds	r3, #1
 8009596:	b29b      	uxth	r3, r3
 8009598:	b21a      	sxth	r2, r3
 800959a:	4b5c      	ldr	r3, [pc, #368]	; (800970c <cppLoop+0x1b7c>)
 800959c:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 800959e:	4b5b      	ldr	r3, [pc, #364]	; (800970c <cppLoop+0x1b7c>)
 80095a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	dd02      	ble.n	80095ae <cppLoop+0x1a1e>
 80095a8:	4b58      	ldr	r3, [pc, #352]	; (800970c <cppLoop+0x1b7c>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80095ae:	2200      	movs	r2, #0
 80095b0:	f04f 31ff 	mov.w	r1, #4294967295
 80095b4:	484b      	ldr	r0, [pc, #300]	; (80096e4 <cppLoop+0x1b54>)
 80095b6:	f7f8 fe89 	bl	80022cc <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 80095ba:	e35e      	b.n	8009c7a <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_R){
 80095bc:	4848      	ldr	r0, [pc, #288]	; (80096e0 <cppLoop+0x1b50>)
 80095be:	f7f8 fd65 	bl	800208c <_ZN8JoyStick8getValueEv>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d03b      	beq.n	800964a <cppLoop+0x1aba>
			led.LR(-1, 1);
 80095d2:	2201      	movs	r2, #1
 80095d4:	f04f 31ff 	mov.w	r1, #4294967295
 80095d8:	4842      	ldr	r0, [pc, #264]	; (80096e4 <cppLoop+0x1b54>)
 80095da:	f7f8 fe77 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 80095de:	2064      	movs	r0, #100	; 0x64
 80095e0:	f000 fc8a 	bl	8009ef8 <HAL_Delay>
			if(selector_acc2 == 0){
 80095e4:	4b49      	ldr	r3, [pc, #292]	; (800970c <cppLoop+0x1b7c>)
 80095e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d113      	bne.n	8009616 <cppLoop+0x1a86>
				adj_acc2 = adj_acc2 + 0.1;
 80095ee:	4b48      	ldr	r3, [pc, #288]	; (8009710 <cppLoop+0x1b80>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f6 ffc0 	bl	8000578 <__aeabi_f2d>
 80095f8:	a337      	add	r3, pc, #220	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 80095fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fe:	f7f6 fe5d 	bl	80002bc <__adddf3>
 8009602:	4603      	mov	r3, r0
 8009604:	460c      	mov	r4, r1
 8009606:	4618      	mov	r0, r3
 8009608:	4621      	mov	r1, r4
 800960a:	f7f7 fb05 	bl	8000c18 <__aeabi_d2f>
 800960e:	4602      	mov	r2, r0
 8009610:	4b3f      	ldr	r3, [pc, #252]	; (8009710 <cppLoop+0x1b80>)
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	e012      	b.n	800963c <cppLoop+0x1aac>
				adj_dec2 = adj_dec2 + 0.1;
 8009616:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <cppLoop+0x1b84>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f7f6 ffac 	bl	8000578 <__aeabi_f2d>
 8009620:	a32d      	add	r3, pc, #180	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 8009622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009626:	f7f6 fe49 	bl	80002bc <__adddf3>
 800962a:	4603      	mov	r3, r0
 800962c:	460c      	mov	r4, r1
 800962e:	4618      	mov	r0, r3
 8009630:	4621      	mov	r1, r4
 8009632:	f7f7 faf1 	bl	8000c18 <__aeabi_d2f>
 8009636:	4602      	mov	r2, r0
 8009638:	4b36      	ldr	r3, [pc, #216]	; (8009714 <cppLoop+0x1b84>)
 800963a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800963c:	2200      	movs	r2, #0
 800963e:	f04f 31ff 	mov.w	r1, #4294967295
 8009642:	4828      	ldr	r0, [pc, #160]	; (80096e4 <cppLoop+0x1b54>)
 8009644:	f7f8 fe42 	bl	80022cc <_ZN3LED2LREaa>
		break;
 8009648:	e317      	b.n	8009c7a <cppLoop+0x20ea>
		else if(joy_stick.getValue() == JOY_L){
 800964a:	4825      	ldr	r0, [pc, #148]	; (80096e0 <cppLoop+0x1b50>)
 800964c:	f7f8 fd1e 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009650:	4603      	mov	r3, r0
 8009652:	2b01      	cmp	r3, #1
 8009654:	bf0c      	ite	eq
 8009656:	2301      	moveq	r3, #1
 8009658:	2300      	movne	r3, #0
 800965a:	b2db      	uxtb	r3, r3
 800965c:	2b00      	cmp	r3, #0
 800965e:	d05b      	beq.n	8009718 <cppLoop+0x1b88>
			led.LR(-1, 1);
 8009660:	2201      	movs	r2, #1
 8009662:	f04f 31ff 	mov.w	r1, #4294967295
 8009666:	481f      	ldr	r0, [pc, #124]	; (80096e4 <cppLoop+0x1b54>)
 8009668:	f7f8 fe30 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(100);
 800966c:	2064      	movs	r0, #100	; 0x64
 800966e:	f000 fc43 	bl	8009ef8 <HAL_Delay>
			if(selector_acc2 == 0){
 8009672:	4b26      	ldr	r3, [pc, #152]	; (800970c <cppLoop+0x1b7c>)
 8009674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d113      	bne.n	80096a4 <cppLoop+0x1b14>
				adj_acc2 = adj_acc2 - 0.1;
 800967c:	4b24      	ldr	r3, [pc, #144]	; (8009710 <cppLoop+0x1b80>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4618      	mov	r0, r3
 8009682:	f7f6 ff79 	bl	8000578 <__aeabi_f2d>
 8009686:	a314      	add	r3, pc, #80	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f7f6 fe14 	bl	80002b8 <__aeabi_dsub>
 8009690:	4603      	mov	r3, r0
 8009692:	460c      	mov	r4, r1
 8009694:	4618      	mov	r0, r3
 8009696:	4621      	mov	r1, r4
 8009698:	f7f7 fabe 	bl	8000c18 <__aeabi_d2f>
 800969c:	4602      	mov	r2, r0
 800969e:	4b1c      	ldr	r3, [pc, #112]	; (8009710 <cppLoop+0x1b80>)
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	e012      	b.n	80096ca <cppLoop+0x1b3a>
				adj_dec2 = adj_dec2 - 0.1;
 80096a4:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <cppLoop+0x1b84>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7f6 ff65 	bl	8000578 <__aeabi_f2d>
 80096ae:	a30a      	add	r3, pc, #40	; (adr r3, 80096d8 <cppLoop+0x1b48>)
 80096b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b4:	f7f6 fe00 	bl	80002b8 <__aeabi_dsub>
 80096b8:	4603      	mov	r3, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	4618      	mov	r0, r3
 80096be:	4621      	mov	r1, r4
 80096c0:	f7f7 faaa 	bl	8000c18 <__aeabi_d2f>
 80096c4:	4602      	mov	r2, r0
 80096c6:	4b13      	ldr	r3, [pc, #76]	; (8009714 <cppLoop+0x1b84>)
 80096c8:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80096ca:	2200      	movs	r2, #0
 80096cc:	f04f 31ff 	mov.w	r1, #4294967295
 80096d0:	4804      	ldr	r0, [pc, #16]	; (80096e4 <cppLoop+0x1b54>)
 80096d2:	f7f8 fdfb 	bl	80022cc <_ZN3LED2LREaa>
		break;
 80096d6:	e2d0      	b.n	8009c7a <cppLoop+0x20ea>
 80096d8:	9999999a 	.word	0x9999999a
 80096dc:	3fb99999 	.word	0x3fb99999
 80096e0:	2000054c 	.word	0x2000054c
 80096e4:	20000558 	.word	0x20000558
 80096e8:	2004524c 	.word	0x2004524c
 80096ec:	200452ac 	.word	0x200452ac
 80096f0:	200452b4 	.word	0x200452b4
 80096f4:	08019088 	.word	0x08019088
 80096f8:	08018f90 	.word	0x08018f90
 80096fc:	08019090 	.word	0x08019090
 8009700:	200209d4 	.word	0x200209d4
 8009704:	08019098 	.word	0x08019098
 8009708:	080190a4 	.word	0x080190a4
 800970c:	2004524e 	.word	0x2004524e
 8009710:	200452bc 	.word	0x200452bc
 8009714:	200452c4 	.word	0x200452c4
		else if(joy_stick.getValue() == JOY_C){
 8009718:	48c6      	ldr	r0, [pc, #792]	; (8009a34 <cppLoop+0x1ea4>)
 800971a:	f7f8 fcb7 	bl	800208c <_ZN8JoyStick8getValueEv>
 800971e:	4603      	mov	r3, r0
 8009720:	2b02      	cmp	r3, #2
 8009722:	bf0c      	ite	eq
 8009724:	2301      	moveq	r3, #1
 8009726:	2300      	movne	r3, #0
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 82a5 	beq.w	8009c7a <cppLoop+0x20ea>
			led.LR(-1, 1);
 8009730:	2201      	movs	r2, #1
 8009732:	f04f 31ff 	mov.w	r1, #4294967295
 8009736:	48c0      	ldr	r0, [pc, #768]	; (8009a38 <cppLoop+0x1ea8>)
 8009738:	f7f8 fdc8 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(300);
 800973c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009740:	f000 fbda 	bl	8009ef8 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8009744:	2300      	movs	r3, #0
 8009746:	9300      	str	r3, [sp, #0]
 8009748:	4bbc      	ldr	r3, [pc, #752]	; (8009a3c <cppLoop+0x1eac>)
 800974a:	2201      	movs	r2, #1
 800974c:	49bc      	ldr	r1, [pc, #752]	; (8009a40 <cppLoop+0x1eb0>)
 800974e:	48bd      	ldr	r0, [pc, #756]	; (8009a44 <cppLoop+0x1eb4>)
 8009750:	f7f8 f884 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8009754:	2300      	movs	r3, #0
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4bbb      	ldr	r3, [pc, #748]	; (8009a48 <cppLoop+0x1eb8>)
 800975a:	2201      	movs	r2, #1
 800975c:	49bb      	ldr	r1, [pc, #748]	; (8009a4c <cppLoop+0x1ebc>)
 800975e:	48b9      	ldr	r0, [pc, #740]	; (8009a44 <cppLoop+0x1eb4>)
 8009760:	f7f8 f87c 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009764:	4bb5      	ldr	r3, [pc, #724]	; (8009a3c <cppLoop+0x1eac>)
 8009766:	edd3 7a00 	vldr	s15, [r3]
 800976a:	4bb7      	ldr	r3, [pc, #732]	; (8009a48 <cppLoop+0x1eb8>)
 800976c:	ed93 7a00 	vldr	s14, [r3]
 8009770:	eef0 0a47 	vmov.f32	s1, s14
 8009774:	eeb0 0a67 	vmov.f32	s0, s15
 8009778:	48b5      	ldr	r0, [pc, #724]	; (8009a50 <cppLoop+0x1ec0>)
 800977a:	f7fa fb7a 	bl	8003e72 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800977e:	2200      	movs	r2, #0
 8009780:	f04f 31ff 	mov.w	r1, #4294967295
 8009784:	48ac      	ldr	r0, [pc, #688]	; (8009a38 <cppLoop+0x1ea8>)
 8009786:	f7f8 fda1 	bl	80022cc <_ZN3LED2LREaa>
		break;
 800978a:	e276      	b.n	8009c7a <cppLoop+0x20ea>

	case 9:
		break;

	case 10:
		led.fullColor('~');
 800978c:	217e      	movs	r1, #126	; 0x7e
 800978e:	48aa      	ldr	r0, [pc, #680]	; (8009a38 <cppLoop+0x1ea8>)
 8009790:	f7f8 fce0 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009794:	f7f7 fc84 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009798:	2100      	movs	r1, #0
 800979a:	2000      	movs	r0, #0
 800979c:	f7f7 fc90 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80097a0:	48ac      	ldr	r0, [pc, #688]	; (8009a54 <cppLoop+0x1ec4>)
 80097a2:	f7f7 fcb7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80097a6:	2101      	movs	r1, #1
 80097a8:	2000      	movs	r0, #0
 80097aa:	f7f7 fc89 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80097ae:	48aa      	ldr	r0, [pc, #680]	; (8009a58 <cppLoop+0x1ec8>)
 80097b0:	f7f7 fcb0 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80097b4:	489f      	ldr	r0, [pc, #636]	; (8009a34 <cppLoop+0x1ea4>)
 80097b6:	f7f8 fc69 	bl	800208c <_ZN8JoyStick8getValueEv>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b02      	cmp	r3, #2
 80097be:	bf0c      	ite	eq
 80097c0:	2301      	moveq	r3, #1
 80097c2:	2300      	movne	r3, #0
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 8259 	beq.w	8009c7e <cppLoop+0x20ee>
			led.LR(-1, 1);
 80097cc:	2201      	movs	r2, #1
 80097ce:	f04f 31ff 	mov.w	r1, #4294967295
 80097d2:	4899      	ldr	r0, [pc, #612]	; (8009a38 <cppLoop+0x1ea8>)
 80097d4:	f7f8 fd7a 	bl	80022cc <_ZN3LED2LREaa>
			HAL_Delay(500);
 80097d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097dc:	f000 fb8c 	bl	8009ef8 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80097e0:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009a5c <cppLoop+0x1ecc>
 80097e4:	489a      	ldr	r0, [pc, #616]	; (8009a50 <cppLoop+0x1ec0>)
 80097e6:	f7fa fa7b 	bl	8003ce0 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80097ea:	4899      	ldr	r0, [pc, #612]	; (8009a50 <cppLoop+0x1ec0>)
 80097ec:	f7fa fc76 	bl	80040dc <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80097f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80097f4:	f000 fb80 	bl	8009ef8 <HAL_Delay>

			led.fullColor('R');
 80097f8:	2152      	movs	r1, #82	; 0x52
 80097fa:	488f      	ldr	r0, [pc, #572]	; (8009a38 <cppLoop+0x1ea8>)
 80097fc:	f7f8 fcaa 	bl	8002154 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009800:	4897      	ldr	r0, [pc, #604]	; (8009a60 <cppLoop+0x1ed0>)
 8009802:	f7f7 ff43 	bl	800168c <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009806:	f242 7010 	movw	r0, #10000	; 0x2710
 800980a:	f000 fb75 	bl	8009ef8 <HAL_Delay>

			line_trace.stop();
 800980e:	4890      	ldr	r0, [pc, #576]	; (8009a50 <cppLoop+0x1ec0>)
 8009810:	f7fa fe0e 	bl	8004430 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8009814:	4993      	ldr	r1, [pc, #588]	; (8009a64 <cppLoop+0x1ed4>)
 8009816:	4894      	ldr	r0, [pc, #592]	; (8009a68 <cppLoop+0x1ed8>)
 8009818:	f7f7 ffab 	bl	8001772 <user_fopen>
			float d = encoder.getDistance();
 800981c:	4890      	ldr	r0, [pc, #576]	; (8009a60 <cppLoop+0x1ed0>)
 800981e:	f7f7 fef9 	bl	8001614 <_ZN7Encoder11getDistanceEv>
 8009822:	eef0 7a40 	vmov.f32	s15, s0
 8009826:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800982a:	1d3b      	adds	r3, r7, #4
 800982c:	2201      	movs	r2, #1
 800982e:	4619      	mov	r1, r3
 8009830:	2001      	movs	r0, #1
 8009832:	f7f7 ffc1 	bl	80017b8 <sd_write_float>
			user_fclose();
 8009836:	f7f7 ffaf 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 800983a:	2200      	movs	r2, #0
 800983c:	f04f 31ff 	mov.w	r1, #4294967295
 8009840:	487d      	ldr	r0, [pc, #500]	; (8009a38 <cppLoop+0x1ea8>)
 8009842:	f7f8 fd43 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 8009846:	e21a      	b.n	8009c7e <cppLoop+0x20ee>

	case 11:
		led.fullColor('~');
 8009848:	217e      	movs	r1, #126	; 0x7e
 800984a:	487b      	ldr	r0, [pc, #492]	; (8009a38 <cppLoop+0x1ea8>)
 800984c:	f7f8 fc82 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009850:	f7f7 fc26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009854:	2100      	movs	r1, #0
 8009856:	2000      	movs	r0, #0
 8009858:	f7f7 fc32 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 800985c:	4883      	ldr	r0, [pc, #524]	; (8009a6c <cppLoop+0x1edc>)
 800985e:	f7f7 fc59 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009862:	2101      	movs	r1, #1
 8009864:	2000      	movs	r0, #0
 8009866:	f7f7 fc2b 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800986a:	4881      	ldr	r0, [pc, #516]	; (8009a70 <cppLoop+0x1ee0>)
 800986c:	f7f7 fc52 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009870:	4870      	ldr	r0, [pc, #448]	; (8009a34 <cppLoop+0x1ea4>)
 8009872:	f7f8 fc0b 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009876:	4603      	mov	r3, r0
 8009878:	2b02      	cmp	r3, #2
 800987a:	bf0c      	ite	eq
 800987c:	2301      	moveq	r3, #1
 800987e:	2300      	movne	r3, #0
 8009880:	b2db      	uxtb	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	f000 81fd 	beq.w	8009c82 <cppLoop+0x20f2>
			HAL_Delay(500);
 8009888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800988c:	f000 fb34 	bl	8009ef8 <HAL_Delay>
			led.LR(-1, 1);
 8009890:	2201      	movs	r2, #1
 8009892:	f04f 31ff 	mov.w	r1, #4294967295
 8009896:	4868      	ldr	r0, [pc, #416]	; (8009a38 <cppLoop+0x1ea8>)
 8009898:	f7f8 fd18 	bl	80022cc <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800989c:	2102      	movs	r1, #2
 800989e:	486c      	ldr	r0, [pc, #432]	; (8009a50 <cppLoop+0x1ec0>)
 80098a0:	f7fa fc0a 	bl	80040b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80098a4:	4b73      	ldr	r3, [pc, #460]	; (8009a74 <cppLoop+0x1ee4>)
 80098a6:	edd3 7a00 	vldr	s15, [r3]
 80098aa:	eeb0 0a67 	vmov.f32	s0, s15
 80098ae:	4868      	ldr	r0, [pc, #416]	; (8009a50 <cppLoop+0x1ec0>)
 80098b0:	f7fa fa25 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80098b4:	4b6f      	ldr	r3, [pc, #444]	; (8009a74 <cppLoop+0x1ee4>)
 80098b6:	edd3 7a00 	vldr	s15, [r3]
 80098ba:	eeb0 0a67 	vmov.f32	s0, s15
 80098be:	4864      	ldr	r0, [pc, #400]	; (8009a50 <cppLoop+0x1ec0>)
 80098c0:	f7fa fa2d 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80098c4:	4b6b      	ldr	r3, [pc, #428]	; (8009a74 <cppLoop+0x1ee4>)
 80098c6:	edd3 7a00 	vldr	s15, [r3]
 80098ca:	eeb0 0a67 	vmov.f32	s0, s15
 80098ce:	4860      	ldr	r0, [pc, #384]	; (8009a50 <cppLoop+0x1ec0>)
 80098d0:	f7fa fa45 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80098d4:	485e      	ldr	r0, [pc, #376]	; (8009a50 <cppLoop+0x1ec0>)
 80098d6:	f7fa fef7 	bl	80046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80098da:	2200      	movs	r2, #0
 80098dc:	f04f 31ff 	mov.w	r1, #4294967295
 80098e0:	4855      	ldr	r0, [pc, #340]	; (8009a38 <cppLoop+0x1ea8>)
 80098e2:	f7f8 fcf3 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 80098e6:	e1cc      	b.n	8009c82 <cppLoop+0x20f2>

	case 12:
		led.fullColor('~');
 80098e8:	217e      	movs	r1, #126	; 0x7e
 80098ea:	4853      	ldr	r0, [pc, #332]	; (8009a38 <cppLoop+0x1ea8>)
 80098ec:	f7f8 fc32 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		lcd_clear();
 80098f0:	f7f7 fbd6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80098f4:	2100      	movs	r1, #0
 80098f6:	2000      	movs	r0, #0
 80098f8:	f7f7 fbe2 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 80098fc:	485e      	ldr	r0, [pc, #376]	; (8009a78 <cppLoop+0x1ee8>)
 80098fe:	f7f7 fc09 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009902:	2101      	movs	r1, #1
 8009904:	2000      	movs	r0, #0
 8009906:	f7f7 fbdb 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800990a:	485c      	ldr	r0, [pc, #368]	; (8009a7c <cppLoop+0x1eec>)
 800990c:	f7f7 fc02 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009910:	4848      	ldr	r0, [pc, #288]	; (8009a34 <cppLoop+0x1ea4>)
 8009912:	f7f8 fbbb 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009916:	4603      	mov	r3, r0
 8009918:	2b02      	cmp	r3, #2
 800991a:	bf0c      	ite	eq
 800991c:	2301      	moveq	r3, #1
 800991e:	2300      	movne	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 81af 	beq.w	8009c86 <cppLoop+0x20f6>
			led.fullColor('R');
 8009928:	2152      	movs	r1, #82	; 0x52
 800992a:	4843      	ldr	r0, [pc, #268]	; (8009a38 <cppLoop+0x1ea8>)
 800992c:	f7f8 fc12 	bl	8002154 <_ZN3LED9fullColorEc>
			logger.resetLogsTim1();
 8009930:	4853      	ldr	r0, [pc, #332]	; (8009a80 <cppLoop+0x1ef0>)
 8009932:	f7fb fa10 	bl	8004d56 <_ZN6Logger13resetLogsTim1Ev>
			logger.resetLogsTim2();
 8009936:	4852      	ldr	r0, [pc, #328]	; (8009a80 <cppLoop+0x1ef0>)
 8009938:	f7fb fa35 	bl	8004da6 <_ZN6Logger13resetLogsTim2Ev>
			logger.start();
 800993c:	4850      	ldr	r0, [pc, #320]	; (8009a80 <cppLoop+0x1ef0>)
 800993e:	f7fb fa7c 	bl	8004e3a <_ZN6Logger5startEv>

			HAL_Delay(1000);
 8009942:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009946:	f000 fad7 	bl	8009ef8 <HAL_Delay>

			logger.stop();
 800994a:	484d      	ldr	r0, [pc, #308]	; (8009a80 <cppLoop+0x1ef0>)
 800994c:	f7fb fa94 	bl	8004e78 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009950:	4a4c      	ldr	r2, [pc, #304]	; (8009a84 <cppLoop+0x1ef4>)
 8009952:	494d      	ldr	r1, [pc, #308]	; (8009a88 <cppLoop+0x1ef8>)
 8009954:	484a      	ldr	r0, [pc, #296]	; (8009a80 <cppLoop+0x1ef0>)
 8009956:	f7fb f928 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 800995a:	4a4c      	ldr	r2, [pc, #304]	; (8009a8c <cppLoop+0x1efc>)
 800995c:	494a      	ldr	r1, [pc, #296]	; (8009a88 <cppLoop+0x1ef8>)
 800995e:	4848      	ldr	r0, [pc, #288]	; (8009a80 <cppLoop+0x1ef0>)
 8009960:	f7fb f937 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>
			led.fullColor('~');
 8009964:	217e      	movs	r1, #126	; 0x7e
 8009966:	4834      	ldr	r0, [pc, #208]	; (8009a38 <cppLoop+0x1ea8>)
 8009968:	f7f8 fbf4 	bl	8002154 <_ZN3LED9fullColorEc>

			led.LR(-1, 0);
		}
		*/

		break;
 800996c:	e18b      	b.n	8009c86 <cppLoop+0x20f6>

	case 13:
		led.fullColor('~');
 800996e:	217e      	movs	r1, #126	; 0x7e
 8009970:	4831      	ldr	r0, [pc, #196]	; (8009a38 <cppLoop+0x1ea8>)
 8009972:	f7f8 fbef 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009976:	f7f7 fb93 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800997a:	2100      	movs	r1, #0
 800997c:	2000      	movs	r0, #0
 800997e:	f7f7 fb9f 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8009982:	4843      	ldr	r0, [pc, #268]	; (8009a90 <cppLoop+0x1f00>)
 8009984:	f7f7 fbc6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009988:	2101      	movs	r1, #1
 800998a:	2000      	movs	r0, #0
 800998c:	f7f7 fb98 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009990:	4840      	ldr	r0, [pc, #256]	; (8009a94 <cppLoop+0x1f04>)
 8009992:	f7f7 fbbf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009996:	4827      	ldr	r0, [pc, #156]	; (8009a34 <cppLoop+0x1ea4>)
 8009998:	f7f8 fb78 	bl	800208c <_ZN8JoyStick8getValueEv>
 800999c:	4603      	mov	r3, r0
 800999e:	2b02      	cmp	r3, #2
 80099a0:	bf0c      	ite	eq
 80099a2:	2301      	moveq	r3, #1
 80099a4:	2300      	movne	r3, #0
 80099a6:	b2db      	uxtb	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f000 816e 	beq.w	8009c8a <cppLoop+0x20fa>
			HAL_Delay(1500);
 80099ae:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80099b2:	f000 faa1 	bl	8009ef8 <HAL_Delay>
			led.LR(-1, 1);
 80099b6:	2201      	movs	r2, #1
 80099b8:	f04f 31ff 	mov.w	r1, #4294967295
 80099bc:	481e      	ldr	r0, [pc, #120]	; (8009a38 <cppLoop+0x1ea8>)
 80099be:	f7f8 fc85 	bl	80022cc <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80099c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80099c6:	f000 fa97 	bl	8009ef8 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80099ca:	eddf 1a33 	vldr	s3, [pc, #204]	; 8009a98 <cppLoop+0x1f08>
 80099ce:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8009a98 <cppLoop+0x1f08>
 80099d2:	eddf 0a31 	vldr	s1, [pc, #196]	; 8009a98 <cppLoop+0x1f08>
 80099d6:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8009a98 <cppLoop+0x1f08>
 80099da:	4830      	ldr	r0, [pc, #192]	; (8009a9c <cppLoop+0x1f0c>)
 80099dc:	f7f7 fc38 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80099e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80099e4:	f000 fa88 	bl	8009ef8 <HAL_Delay>

			logger.start();
 80099e8:	4825      	ldr	r0, [pc, #148]	; (8009a80 <cppLoop+0x1ef0>)
 80099ea:	f7fb fa26 	bl	8004e3a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80099ee:	482c      	ldr	r0, [pc, #176]	; (8009aa0 <cppLoop+0x1f10>)
 80099f0:	f7fc fa03 	bl	8005dfa <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80099f4:	eddf 0a19 	vldr	s1, [pc, #100]	; 8009a5c <cppLoop+0x1ecc>
 80099f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80099fc:	4828      	ldr	r0, [pc, #160]	; (8009aa0 <cppLoop+0x1f10>)
 80099fe:	f7fc f98f 	bl	8005d20 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009a02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a06:	f000 fa77 	bl	8009ef8 <HAL_Delay>

			logger.stop();
 8009a0a:	481d      	ldr	r0, [pc, #116]	; (8009a80 <cppLoop+0x1ef0>)
 8009a0c:	f7fb fa34 	bl	8004e78 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009a10:	4823      	ldr	r0, [pc, #140]	; (8009aa0 <cppLoop+0x1f10>)
 8009a12:	f7fc fa05 	bl	8005e20 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009a16:	4821      	ldr	r0, [pc, #132]	; (8009a9c <cppLoop+0x1f0c>)
 8009a18:	f7f7 fcb4 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009a1c:	4a21      	ldr	r2, [pc, #132]	; (8009aa4 <cppLoop+0x1f14>)
 8009a1e:	4922      	ldr	r1, [pc, #136]	; (8009aa8 <cppLoop+0x1f18>)
 8009a20:	4817      	ldr	r0, [pc, #92]	; (8009a80 <cppLoop+0x1ef0>)
 8009a22:	f7fb f8c2 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009a26:	2200      	movs	r2, #0
 8009a28:	f04f 31ff 	mov.w	r1, #4294967295
 8009a2c:	4802      	ldr	r0, [pc, #8]	; (8009a38 <cppLoop+0x1ea8>)
 8009a2e:	f7f8 fc4d 	bl	80022cc <_ZN3LED2LREaa>
		}
		break;
 8009a32:	e12a      	b.n	8009c8a <cppLoop+0x20fa>
 8009a34:	2000054c 	.word	0x2000054c
 8009a38:	20000558 	.word	0x20000558
 8009a3c:	200452bc 	.word	0x200452bc
 8009a40:	080190b0 	.word	0x080190b0
 8009a44:	08018f90 	.word	0x08018f90
 8009a48:	200452c4 	.word	0x200452c4
 8009a4c:	080190bc 	.word	0x080190bc
 8009a50:	200209d4 	.word	0x200209d4
 8009a54:	080190c8 	.word	0x080190c8
 8009a58:	080190d0 	.word	0x080190d0
 8009a5c:	00000000 	.word	0x00000000
 8009a60:	20020928 	.word	0x20020928
 8009a64:	080190dc 	.word	0x080190dc
 8009a68:	080190e4 	.word	0x080190e4
 8009a6c:	080190f0 	.word	0x080190f0
 8009a70:	080190fc 	.word	0x080190fc
 8009a74:	20045294 	.word	0x20045294
 8009a78:	08019108 	.word	0x08019108
 8009a7c:	0801910c 	.word	0x0801910c
 8009a80:	2000057c 	.word	0x2000057c
 8009a84:	08018fe8 	.word	0x08018fe8
 8009a88:	08018ff4 	.word	0x08018ff4
 8009a8c:	08019000 	.word	0x08019000
 8009a90:	08019114 	.word	0x08019114
 8009a94:	08019118 	.word	0x08019118
 8009a98:	3ea3d70a 	.word	0x3ea3d70a
 8009a9c:	200209d0 	.word	0x200209d0
 8009aa0:	20020950 	.word	0x20020950
 8009aa4:	08019124 	.word	0x08019124
 8009aa8:	08019130 	.word	0x08019130

	case 14:

		led.fullColor('W');
 8009aac:	2157      	movs	r1, #87	; 0x57
 8009aae:	487d      	ldr	r0, [pc, #500]	; (8009ca4 <cppLoop+0x2114>)
 8009ab0:	f7f8 fb50 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009ab4:	f7f7 faf4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009ab8:	2100      	movs	r1, #0
 8009aba:	2000      	movs	r0, #0
 8009abc:	f7f7 fb00 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009ac0:	4879      	ldr	r0, [pc, #484]	; (8009ca8 <cppLoop+0x2118>)
 8009ac2:	f7f7 fb27 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	2000      	movs	r0, #0
 8009aca:	f7f7 faf9 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009ace:	4b77      	ldr	r3, [pc, #476]	; (8009cac <cppLoop+0x211c>)
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f6 fd50 	bl	8000578 <__aeabi_f2d>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	461a      	mov	r2, r3
 8009ade:	4623      	mov	r3, r4
 8009ae0:	4873      	ldr	r0, [pc, #460]	; (8009cb0 <cppLoop+0x2120>)
 8009ae2:	f7f7 fb17 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009ae6:	4873      	ldr	r0, [pc, #460]	; (8009cb4 <cppLoop+0x2124>)
 8009ae8:	f7f8 fad0 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b02      	cmp	r3, #2
 8009af0:	bf0c      	ite	eq
 8009af2:	2301      	moveq	r3, #1
 8009af4:	2300      	movne	r3, #0
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 80c8 	beq.w	8009c8e <cppLoop+0x20fe>
			HAL_Delay(500);
 8009afe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009b02:	f000 f9f9 	bl	8009ef8 <HAL_Delay>

			led.LR(1, -1);
 8009b06:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0a:	2101      	movs	r1, #1
 8009b0c:	4865      	ldr	r0, [pc, #404]	; (8009ca4 <cppLoop+0x2114>)
 8009b0e:	f7f8 fbdd 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009b12:	2102      	movs	r1, #2
 8009b14:	4868      	ldr	r0, [pc, #416]	; (8009cb8 <cppLoop+0x2128>)
 8009b16:	f7fa facf 	bl	80040b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009b1a:	4b68      	ldr	r3, [pc, #416]	; (8009cbc <cppLoop+0x212c>)
 8009b1c:	edd3 7a00 	vldr	s15, [r3]
 8009b20:	eeb0 0a67 	vmov.f32	s0, s15
 8009b24:	4864      	ldr	r0, [pc, #400]	; (8009cb8 <cppLoop+0x2128>)
 8009b26:	f7fa f8ea 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009b2a:	4b60      	ldr	r3, [pc, #384]	; (8009cac <cppLoop+0x211c>)
 8009b2c:	edd3 7a00 	vldr	s15, [r3]
 8009b30:	eeb0 0a67 	vmov.f32	s0, s15
 8009b34:	4860      	ldr	r0, [pc, #384]	; (8009cb8 <cppLoop+0x2128>)
 8009b36:	f7fa f8f2 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009b3a:	4b5c      	ldr	r3, [pc, #368]	; (8009cac <cppLoop+0x211c>)
 8009b3c:	edd3 7a00 	vldr	s15, [r3]
 8009b40:	eeb0 0a67 	vmov.f32	s0, s15
 8009b44:	485c      	ldr	r0, [pc, #368]	; (8009cb8 <cppLoop+0x2128>)
 8009b46:	f7fa f90a 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009b4a:	485b      	ldr	r0, [pc, #364]	; (8009cb8 <cppLoop+0x2128>)
 8009b4c:	f7fa fdbc 	bl	80046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009b50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009b54:	f000 f9d0 	bl	8009ef8 <HAL_Delay>

			line_trace.running();
 8009b58:	4857      	ldr	r0, [pc, #348]	; (8009cb8 <cppLoop+0x2128>)
 8009b5a:	f7fa faf1 	bl	8004140 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009b5e:	4858      	ldr	r0, [pc, #352]	; (8009cc0 <cppLoop+0x2130>)
 8009b60:	f7fb f98a 	bl	8004e78 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009b64:	4a57      	ldr	r2, [pc, #348]	; (8009cc4 <cppLoop+0x2134>)
 8009b66:	4958      	ldr	r1, [pc, #352]	; (8009cc8 <cppLoop+0x2138>)
 8009b68:	4855      	ldr	r0, [pc, #340]	; (8009cc0 <cppLoop+0x2130>)
 8009b6a:	f7fb f81e 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009b6e:	4a57      	ldr	r2, [pc, #348]	; (8009ccc <cppLoop+0x213c>)
 8009b70:	4955      	ldr	r1, [pc, #340]	; (8009cc8 <cppLoop+0x2138>)
 8009b72:	4853      	ldr	r0, [pc, #332]	; (8009cc0 <cppLoop+0x2130>)
 8009b74:	f7fb f82d 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009b78:	f04f 32ff 	mov.w	r2, #4294967295
 8009b7c:	2100      	movs	r1, #0
 8009b7e:	4849      	ldr	r0, [pc, #292]	; (8009ca4 <cppLoop+0x2114>)
 8009b80:	f7f8 fba4 	bl	80022cc <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009b84:	e083      	b.n	8009c8e <cppLoop+0x20fe>

	case 15:
		led.fullColor('W');
 8009b86:	2157      	movs	r1, #87	; 0x57
 8009b88:	4846      	ldr	r0, [pc, #280]	; (8009ca4 <cppLoop+0x2114>)
 8009b8a:	f7f8 fae3 	bl	8002154 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009b8e:	f7f7 fa87 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009b92:	2100      	movs	r1, #0
 8009b94:	2000      	movs	r0, #0
 8009b96:	f7f7 fa93 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009b9a:	484d      	ldr	r0, [pc, #308]	; (8009cd0 <cppLoop+0x2140>)
 8009b9c:	f7f7 faba 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	2000      	movs	r0, #0
 8009ba4:	f7f7 fa8c 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009ba8:	4b4a      	ldr	r3, [pc, #296]	; (8009cd4 <cppLoop+0x2144>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7f6 fce3 	bl	8000578 <__aeabi_f2d>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	4623      	mov	r3, r4
 8009bba:	483d      	ldr	r0, [pc, #244]	; (8009cb0 <cppLoop+0x2120>)
 8009bbc:	f7f7 faaa 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009bc0:	483c      	ldr	r0, [pc, #240]	; (8009cb4 <cppLoop+0x2124>)
 8009bc2:	f7f8 fa63 	bl	800208c <_ZN8JoyStick8getValueEv>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	bf0c      	ite	eq
 8009bcc:	2301      	moveq	r3, #1
 8009bce:	2300      	movne	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d05d      	beq.n	8009c92 <cppLoop+0x2102>
			HAL_Delay(500);
 8009bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009bda:	f000 f98d 	bl	8009ef8 <HAL_Delay>

			led.LR(1, -1);
 8009bde:	f04f 32ff 	mov.w	r2, #4294967295
 8009be2:	2101      	movs	r1, #1
 8009be4:	482f      	ldr	r0, [pc, #188]	; (8009ca4 <cppLoop+0x2114>)
 8009be6:	f7f8 fb71 	bl	80022cc <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009bea:	2101      	movs	r1, #1
 8009bec:	4832      	ldr	r0, [pc, #200]	; (8009cb8 <cppLoop+0x2128>)
 8009bee:	f7fa fa63 	bl	80040b8 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009bf2:	4b39      	ldr	r3, [pc, #228]	; (8009cd8 <cppLoop+0x2148>)
 8009bf4:	edd3 7a00 	vldr	s15, [r3]
 8009bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8009bfc:	482e      	ldr	r0, [pc, #184]	; (8009cb8 <cppLoop+0x2128>)
 8009bfe:	f7fa f87e 	bl	8003cfe <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009c02:	4b34      	ldr	r3, [pc, #208]	; (8009cd4 <cppLoop+0x2144>)
 8009c04:	edd3 7a00 	vldr	s15, [r3]
 8009c08:	eeb0 0a67 	vmov.f32	s0, s15
 8009c0c:	482a      	ldr	r0, [pc, #168]	; (8009cb8 <cppLoop+0x2128>)
 8009c0e:	f7fa f886 	bl	8003d1e <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009c12:	4b31      	ldr	r3, [pc, #196]	; (8009cd8 <cppLoop+0x2148>)
 8009c14:	edd3 7a00 	vldr	s15, [r3]
 8009c18:	eeb0 0a67 	vmov.f32	s0, s15
 8009c1c:	4826      	ldr	r0, [pc, #152]	; (8009cb8 <cppLoop+0x2128>)
 8009c1e:	f7fa f89e 	bl	8003d5e <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009c22:	4825      	ldr	r0, [pc, #148]	; (8009cb8 <cppLoop+0x2128>)
 8009c24:	f7fa fd50 	bl	80046c8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009c2c:	f000 f964 	bl	8009ef8 <HAL_Delay>

			line_trace.running();
 8009c30:	4821      	ldr	r0, [pc, #132]	; (8009cb8 <cppLoop+0x2128>)
 8009c32:	f7fa fa85 	bl	8004140 <_ZN9LineTrace7runningEv>

			logger.stop();
 8009c36:	4822      	ldr	r0, [pc, #136]	; (8009cc0 <cppLoop+0x2130>)
 8009c38:	f7fb f91e 	bl	8004e78 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 8009c3c:	4a21      	ldr	r2, [pc, #132]	; (8009cc4 <cppLoop+0x2134>)
 8009c3e:	4922      	ldr	r1, [pc, #136]	; (8009cc8 <cppLoop+0x2138>)
 8009c40:	481f      	ldr	r0, [pc, #124]	; (8009cc0 <cppLoop+0x2130>)
 8009c42:	f7fa ffb2 	bl	8004baa <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8009c46:	4a21      	ldr	r2, [pc, #132]	; (8009ccc <cppLoop+0x213c>)
 8009c48:	491f      	ldr	r1, [pc, #124]	; (8009cc8 <cppLoop+0x2138>)
 8009c4a:	481d      	ldr	r0, [pc, #116]	; (8009cc0 <cppLoop+0x2130>)
 8009c4c:	f7fa ffc1 	bl	8004bd2 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 8009c50:	f04f 32ff 	mov.w	r2, #4294967295
 8009c54:	2100      	movs	r1, #0
 8009c56:	4813      	ldr	r0, [pc, #76]	; (8009ca4 <cppLoop+0x2114>)
 8009c58:	f7f8 fb38 	bl	80022cc <_ZN3LED2LREaa>
		}

		break;
 8009c5c:	e019      	b.n	8009c92 <cppLoop+0x2102>


	default:
		break;
 8009c5e:	bf00      	nop
 8009c60:	e018      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c62:	bf00      	nop
 8009c64:	e016      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c66:	bf00      	nop
 8009c68:	e014      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c6a:	bf00      	nop
 8009c6c:	e012      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c6e:	bf00      	nop
 8009c70:	e010      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c72:	bf00      	nop
 8009c74:	e00e      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c76:	bf00      	nop
 8009c78:	e00c      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c7a:	bf00      	nop
 8009c7c:	e00a      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c7e:	bf00      	nop
 8009c80:	e008      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c82:	bf00      	nop
 8009c84:	e006      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c86:	bf00      	nop
 8009c88:	e004      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c8a:	bf00      	nop
 8009c8c:	e002      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c8e:	bf00      	nop
 8009c90:	e000      	b.n	8009c94 <cppLoop+0x2104>
		break;
 8009c92:	bf00      	nop

	}

	HAL_Delay(30);
 8009c94:	201e      	movs	r0, #30
 8009c96:	f000 f92f 	bl	8009ef8 <HAL_Delay>

}
 8009c9a:	bf00      	nop
 8009c9c:	370c      	adds	r7, #12
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000558 	.word	0x20000558
 8009ca8:	0801913c 	.word	0x0801913c
 8009cac:	20045294 	.word	0x20045294
 8009cb0:	08018fdc 	.word	0x08018fdc
 8009cb4:	2000054c 	.word	0x2000054c
 8009cb8:	200209d4 	.word	0x200209d4
 8009cbc:	200452a4 	.word	0x200452a4
 8009cc0:	2000057c 	.word	0x2000057c
 8009cc4:	08018fe8 	.word	0x08018fe8
 8009cc8:	08018ff4 	.word	0x08018ff4
 8009ccc:	08019000 	.word	0x08019000
 8009cd0:	08019148 	.word	0x08019148
 8009cd4:	2004528c 	.word	0x2004528c
 8009cd8:	2004529c 	.word	0x2004529c

08009cdc <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af06      	add	r7, sp, #24
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d142      	bne.n	8009d72 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d13d      	bne.n	8009d72 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009cf6:	4821      	ldr	r0, [pc, #132]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009cf8:	f7f8 fb20 	bl	800233c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009cfc:	4820      	ldr	r0, [pc, #128]	; (8009d80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009cfe:	f7fb fbdf 	bl	80054c0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009d02:	4820      	ldr	r0, [pc, #128]	; (8009d84 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009d04:	f7f8 f9b6 	bl	8002074 <_ZN8JoyStickC1Ev>
Motor motor;
 8009d08:	481f      	ldr	r0, [pc, #124]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d0a:	f7fb f8c6 	bl	8004e9a <_ZN5MotorC1Ev>
IMU imu;
 8009d0e:	481f      	ldr	r0, [pc, #124]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d10:	f7f7 ffbc 	bl	8001c8c <_ZN3IMUC1Ev>
Logger logger;
 8009d14:	481e      	ldr	r0, [pc, #120]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d16:	f7fa fdc7 	bl	80048a8 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009d1a:	481e      	ldr	r0, [pc, #120]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d1c:	f7f7 fb56 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009d20:	4b1a      	ldr	r3, [pc, #104]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d24:	4918      	ldr	r1, [pc, #96]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d26:	481c      	ldr	r0, [pc, #112]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d28:	f7fb fec4 	bl	8005ab4 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009d2c:	4b1a      	ldr	r3, [pc, #104]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d2e:	4a17      	ldr	r2, [pc, #92]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d30:	4918      	ldr	r1, [pc, #96]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d32:	481a      	ldr	r0, [pc, #104]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d34:	f7fb f996 	bl	8005064 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009d38:	4819      	ldr	r0, [pc, #100]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d3a:	f7f7 fa4b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009d3e:	4b18      	ldr	r3, [pc, #96]	; (8009da0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009d40:	9305      	str	r3, [sp, #20]
 8009d42:	4b12      	ldr	r3, [pc, #72]	; (8009d8c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	4b12      	ldr	r3, [pc, #72]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d48:	9303      	str	r3, [sp, #12]
 8009d4a:	4b14      	ldr	r3, [pc, #80]	; (8009d9c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009d4c:	9302      	str	r3, [sp, #8]
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	4b0b      	ldr	r3, [pc, #44]	; (8009d80 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	4b10      	ldr	r3, [pc, #64]	; (8009d98 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009d58:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009d5a:	490b      	ldr	r1, [pc, #44]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d5c:	4811      	ldr	r0, [pc, #68]	; (8009da4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009d5e:	f7f8 fdcb 	bl	80028f8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009d62:	4a09      	ldr	r2, [pc, #36]	; (8009d88 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009d64:	490a      	ldr	r1, [pc, #40]	; (8009d90 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009d66:	4810      	ldr	r0, [pc, #64]	; (8009da8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009d68:	f7fb fcdc 	bl	8005724 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009d6c:	480f      	ldr	r0, [pc, #60]	; (8009dac <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009d6e:	f7fb fa37 	bl	80051e0 <_ZN13PathFollowingC1Ev>
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000244 	.word	0x20000244
 8009d80:	2000053c 	.word	0x2000053c
 8009d84:	2000054c 	.word	0x2000054c
 8009d88:	20000554 	.word	0x20000554
 8009d8c:	20000568 	.word	0x20000568
 8009d90:	2000057c 	.word	0x2000057c
 8009d94:	20020928 	.word	0x20020928
 8009d98:	20020950 	.word	0x20020950
 8009d9c:	20020990 	.word	0x20020990
 8009da0:	200209d0 	.word	0x200209d0
 8009da4:	200209d4 	.word	0x200209d4
 8009da8:	2002d914 	.word	0x2002d914
 8009dac:	2002db20 	.word	0x2002db20

08009db0 <_GLOBAL__sub_I_line_sensor>:
 8009db0:	b580      	push	{r7, lr}
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009db8:	2001      	movs	r0, #1
 8009dba:	f7ff ff8f 	bl	8009cdc <_Z41__static_initialization_and_destruction_0ii>
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009df8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dc6:	e003      	b.n	8009dd0 <LoopCopyDataInit>

08009dc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	; (8009dfc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009dca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009dcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009dce:	3104      	adds	r1, #4

08009dd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009dd0:	480b      	ldr	r0, [pc, #44]	; (8009e00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dd2:	4b0c      	ldr	r3, [pc, #48]	; (8009e04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009dd8:	d3f6      	bcc.n	8009dc8 <CopyDataInit>
  ldr  r2, =_sbss
 8009dda:	4a0b      	ldr	r2, [pc, #44]	; (8009e08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009ddc:	e002      	b.n	8009de4 <LoopFillZerobss>

08009dde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009dde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009de0:	f842 3b04 	str.w	r3, [r2], #4

08009de4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009de4:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009de6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009de8:	d3f9      	bcc.n	8009dde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009dea:	f7fd fda5 	bl	8007938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009dee:	f00a fd95 	bl	801491c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009df2:	f7fc f8bd 	bl	8005f70 <main>
  bx  lr    
 8009df6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009df8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009dfc:	08019568 	.word	0x08019568
  ldr  r0, =_sdata
 8009e00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e04:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009e08:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009e0c:	20049ca8 	.word	0x20049ca8

08009e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e10:	e7fe      	b.n	8009e10 <ADC_IRQHandler>
	...

08009e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e18:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <HAL_Init+0x40>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a0d      	ldr	r2, [pc, #52]	; (8009e54 <HAL_Init+0x40>)
 8009e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e24:	4b0b      	ldr	r3, [pc, #44]	; (8009e54 <HAL_Init+0x40>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a0a      	ldr	r2, [pc, #40]	; (8009e54 <HAL_Init+0x40>)
 8009e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e30:	4b08      	ldr	r3, [pc, #32]	; (8009e54 <HAL_Init+0x40>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	4a07      	ldr	r2, [pc, #28]	; (8009e54 <HAL_Init+0x40>)
 8009e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e3c:	2003      	movs	r0, #3
 8009e3e:	f000 fd51 	bl	800a8e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e42:	2000      	movs	r0, #0
 8009e44:	f000 f808 	bl	8009e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e48:	f7fc ffb6 	bl	8006db8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop
 8009e54:	40023c00 	.word	0x40023c00

08009e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009e60:	4b12      	ldr	r3, [pc, #72]	; (8009eac <HAL_InitTick+0x54>)
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	4b12      	ldr	r3, [pc, #72]	; (8009eb0 <HAL_InitTick+0x58>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 fd69 	bl	800a94e <HAL_SYSTICK_Config>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e00e      	b.n	8009ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b0f      	cmp	r3, #15
 8009e8a:	d80a      	bhi.n	8009ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	f04f 30ff 	mov.w	r0, #4294967295
 8009e94:	f000 fd31 	bl	800a8fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009e98:	4a06      	ldr	r2, [pc, #24]	; (8009eb4 <HAL_InitTick+0x5c>)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e000      	b.n	8009ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ea2:	2301      	movs	r3, #1
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3708      	adds	r7, #8
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	20000000 	.word	0x20000000
 8009eb0:	20000008 	.word	0x20000008
 8009eb4:	20000004 	.word	0x20000004

08009eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <HAL_IncTick+0x20>)
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <HAL_IncTick+0x24>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	4a04      	ldr	r2, [pc, #16]	; (8009edc <HAL_IncTick+0x24>)
 8009eca:	6013      	str	r3, [r2, #0]
}
 8009ecc:	bf00      	nop
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	20000008 	.word	0x20000008
 8009edc:	20047c30 	.word	0x20047c30

08009ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8009ee4:	4b03      	ldr	r3, [pc, #12]	; (8009ef4 <HAL_GetTick+0x14>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20047c30 	.word	0x20047c30

08009ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009f00:	f7ff ffee 	bl	8009ee0 <HAL_GetTick>
 8009f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f10:	d005      	beq.n	8009f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009f12:	4b09      	ldr	r3, [pc, #36]	; (8009f38 <HAL_Delay+0x40>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	461a      	mov	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009f1e:	bf00      	nop
 8009f20:	f7ff ffde 	bl	8009ee0 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	68fa      	ldr	r2, [r7, #12]
 8009f2c:	429a      	cmp	r2, r3
 8009f2e:	d8f7      	bhi.n	8009f20 <HAL_Delay+0x28>
  {
  }
}
 8009f30:	bf00      	nop
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	20000008 	.word	0x20000008

08009f3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e033      	b.n	8009fba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d109      	bne.n	8009f6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7fc ff54 	bl	8006e08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2200      	movs	r2, #0
 8009f64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d118      	bne.n	8009fac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009f82:	f023 0302 	bic.w	r3, r3, #2
 8009f86:	f043 0202 	orr.w	r2, r3, #2
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fa5a 	bl	800a448 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f9e:	f023 0303 	bic.w	r3, r3, #3
 8009fa2:	f043 0201 	orr.w	r2, r3, #1
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8009faa:	e001      	b.n	8009fb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
	...

08009fc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d101      	bne.n	8009fe2 <HAL_ADC_Start_DMA+0x1e>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e0cc      	b.n	800a17c <HAL_ADC_Start_DMA+0x1b8>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689b      	ldr	r3, [r3, #8]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d018      	beq.n	800a02a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800a008:	4b5e      	ldr	r3, [pc, #376]	; (800a184 <HAL_ADC_Start_DMA+0x1c0>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a5e      	ldr	r2, [pc, #376]	; (800a188 <HAL_ADC_Start_DMA+0x1c4>)
 800a00e:	fba2 2303 	umull	r2, r3, r2, r3
 800a012:	0c9a      	lsrs	r2, r3, #18
 800a014:	4613      	mov	r3, r2
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	4413      	add	r3, r2
 800a01a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a01c:	e002      	b.n	800a024 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	3b01      	subs	r3, #1
 800a022:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1f9      	bne.n	800a01e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b01      	cmp	r3, #1
 800a036:	f040 80a0 	bne.w	800a17a <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d007      	beq.n	800a06c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800a064:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a078:	d106      	bne.n	800a088 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a07e:	f023 0206 	bic.w	r2, r3, #6
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	645a      	str	r2, [r3, #68]	; 0x44
 800a086:	e002      	b.n	800a08e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a096:	4b3d      	ldr	r3, [pc, #244]	; (800a18c <HAL_ADC_Start_DMA+0x1c8>)
 800a098:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09e:	4a3c      	ldr	r2, [pc, #240]	; (800a190 <HAL_ADC_Start_DMA+0x1cc>)
 800a0a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a6:	4a3b      	ldr	r2, [pc, #236]	; (800a194 <HAL_ADC_Start_DMA+0x1d0>)
 800a0a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ae:	4a3a      	ldr	r2, [pc, #232]	; (800a198 <HAL_ADC_Start_DMA+0x1d4>)
 800a0b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800a0ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	685a      	ldr	r2, [r3, #4]
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a0ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a0da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	334c      	adds	r3, #76	; 0x4c
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f000 fcea 	bl	800aac4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	f003 031f 	and.w	r3, r3, #31
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d12a      	bne.n	800a152 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a26      	ldr	r2, [pc, #152]	; (800a19c <HAL_ADC_Start_DMA+0x1d8>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d015      	beq.n	800a132 <HAL_ADC_Start_DMA+0x16e>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a25      	ldr	r2, [pc, #148]	; (800a1a0 <HAL_ADC_Start_DMA+0x1dc>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d105      	bne.n	800a11c <HAL_ADC_Start_DMA+0x158>
 800a110:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <HAL_ADC_Start_DMA+0x1c8>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f003 031f 	and.w	r3, r3, #31
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d00a      	beq.n	800a132 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a20      	ldr	r2, [pc, #128]	; (800a1a4 <HAL_ADC_Start_DMA+0x1e0>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d129      	bne.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
 800a126:	4b19      	ldr	r3, [pc, #100]	; (800a18c <HAL_ADC_Start_DMA+0x1c8>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f003 031f 	and.w	r3, r3, #31
 800a12e:	2b0f      	cmp	r3, #15
 800a130:	d823      	bhi.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d11c      	bne.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689a      	ldr	r2, [r3, #8]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a14e:	609a      	str	r2, [r3, #8]
 800a150:	e013      	b.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a11      	ldr	r2, [pc, #68]	; (800a19c <HAL_ADC_Start_DMA+0x1d8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d10e      	bne.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a166:	2b00      	cmp	r3, #0
 800a168:	d107      	bne.n	800a17a <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a178:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	20000000 	.word	0x20000000
 800a188:	431bde83 	.word	0x431bde83
 800a18c:	40012300 	.word	0x40012300
 800a190:	0800a641 	.word	0x0800a641
 800a194:	0800a6fb 	.word	0x0800a6fb
 800a198:	0800a717 	.word	0x0800a717
 800a19c:	40012000 	.word	0x40012000
 800a1a0:	40012100 	.word	0x40012100
 800a1a4:	40012200 	.word	0x40012200

0800a1a8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d101      	bne.n	800a200 <HAL_ADC_ConfigChannel+0x1c>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e113      	b.n	800a428 <HAL_ADC_ConfigChannel+0x244>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2201      	movs	r2, #1
 800a204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b09      	cmp	r3, #9
 800a20e:	d925      	bls.n	800a25c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68d9      	ldr	r1, [r3, #12]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	461a      	mov	r2, r3
 800a21e:	4613      	mov	r3, r2
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	4413      	add	r3, r2
 800a224:	3b1e      	subs	r3, #30
 800a226:	2207      	movs	r2, #7
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	43da      	mvns	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	400a      	ands	r2, r1
 800a234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68d9      	ldr	r1, [r3, #12]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	689a      	ldr	r2, [r3, #8]
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	b29b      	uxth	r3, r3
 800a246:	4618      	mov	r0, r3
 800a248:	4603      	mov	r3, r0
 800a24a:	005b      	lsls	r3, r3, #1
 800a24c:	4403      	add	r3, r0
 800a24e:	3b1e      	subs	r3, #30
 800a250:	409a      	lsls	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	60da      	str	r2, [r3, #12]
 800a25a:	e022      	b.n	800a2a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6919      	ldr	r1, [r3, #16]
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	b29b      	uxth	r3, r3
 800a268:	461a      	mov	r2, r3
 800a26a:	4613      	mov	r3, r2
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	4413      	add	r3, r2
 800a270:	2207      	movs	r2, #7
 800a272:	fa02 f303 	lsl.w	r3, r2, r3
 800a276:	43da      	mvns	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	400a      	ands	r2, r1
 800a27e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6919      	ldr	r1, [r3, #16]
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	689a      	ldr	r2, [r3, #8]
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	4618      	mov	r0, r3
 800a292:	4603      	mov	r3, r0
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4403      	add	r3, r0
 800a298:	409a      	lsls	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	430a      	orrs	r2, r1
 800a2a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	2b06      	cmp	r3, #6
 800a2a8:	d824      	bhi.n	800a2f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685a      	ldr	r2, [r3, #4]
 800a2b4:	4613      	mov	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4413      	add	r3, r2
 800a2ba:	3b05      	subs	r3, #5
 800a2bc:	221f      	movs	r2, #31
 800a2be:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c2:	43da      	mvns	r2, r3
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	400a      	ands	r2, r1
 800a2ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4618      	mov	r0, r3
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	4613      	mov	r3, r2
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4413      	add	r3, r2
 800a2e4:	3b05      	subs	r3, #5
 800a2e6:	fa00 f203 	lsl.w	r2, r0, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	635a      	str	r2, [r3, #52]	; 0x34
 800a2f2:	e04c      	b.n	800a38e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	2b0c      	cmp	r3, #12
 800a2fa:	d824      	bhi.n	800a346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	685a      	ldr	r2, [r3, #4]
 800a306:	4613      	mov	r3, r2
 800a308:	009b      	lsls	r3, r3, #2
 800a30a:	4413      	add	r3, r2
 800a30c:	3b23      	subs	r3, #35	; 0x23
 800a30e:	221f      	movs	r2, #31
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	43da      	mvns	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	400a      	ands	r2, r1
 800a31c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	b29b      	uxth	r3, r3
 800a32a:	4618      	mov	r0, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	3b23      	subs	r3, #35	; 0x23
 800a338:	fa00 f203 	lsl.w	r2, r0, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	631a      	str	r2, [r3, #48]	; 0x30
 800a344:	e023      	b.n	800a38e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	4613      	mov	r3, r2
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	3b41      	subs	r3, #65	; 0x41
 800a358:	221f      	movs	r2, #31
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	43da      	mvns	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	400a      	ands	r2, r1
 800a366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	b29b      	uxth	r3, r3
 800a374:	4618      	mov	r0, r3
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	009b      	lsls	r3, r3, #2
 800a37e:	4413      	add	r3, r2
 800a380:	3b41      	subs	r3, #65	; 0x41
 800a382:	fa00 f203 	lsl.w	r2, r0, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	430a      	orrs	r2, r1
 800a38c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a38e:	4b29      	ldr	r3, [pc, #164]	; (800a434 <HAL_ADC_ConfigChannel+0x250>)
 800a390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a28      	ldr	r2, [pc, #160]	; (800a438 <HAL_ADC_ConfigChannel+0x254>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d10f      	bne.n	800a3bc <HAL_ADC_ConfigChannel+0x1d8>
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b12      	cmp	r3, #18
 800a3a2:	d10b      	bne.n	800a3bc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a1d      	ldr	r2, [pc, #116]	; (800a438 <HAL_ADC_ConfigChannel+0x254>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d12b      	bne.n	800a41e <HAL_ADC_ConfigChannel+0x23a>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a1c      	ldr	r2, [pc, #112]	; (800a43c <HAL_ADC_ConfigChannel+0x258>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d003      	beq.n	800a3d8 <HAL_ADC_ConfigChannel+0x1f4>
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2b11      	cmp	r3, #17
 800a3d6:	d122      	bne.n	800a41e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a11      	ldr	r2, [pc, #68]	; (800a43c <HAL_ADC_ConfigChannel+0x258>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d111      	bne.n	800a41e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a3fa:	4b11      	ldr	r3, [pc, #68]	; (800a440 <HAL_ADC_ConfigChannel+0x25c>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a11      	ldr	r2, [pc, #68]	; (800a444 <HAL_ADC_ConfigChannel+0x260>)
 800a400:	fba2 2303 	umull	r2, r3, r2, r3
 800a404:	0c9a      	lsrs	r2, r3, #18
 800a406:	4613      	mov	r3, r2
 800a408:	009b      	lsls	r3, r3, #2
 800a40a:	4413      	add	r3, r2
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a410:	e002      	b.n	800a418 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	3b01      	subs	r3, #1
 800a416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f9      	bne.n	800a412 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3714      	adds	r7, #20
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	40012300 	.word	0x40012300
 800a438:	40012000 	.word	0x40012000
 800a43c:	10000012 	.word	0x10000012
 800a440:	20000000 	.word	0x20000000
 800a444:	431bde83 	.word	0x431bde83

0800a448 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a450:	4b79      	ldr	r3, [pc, #484]	; (800a638 <ADC_Init+0x1f0>)
 800a452:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	685a      	ldr	r2, [r3, #4]
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	431a      	orrs	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a47c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6859      	ldr	r1, [r3, #4]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	691b      	ldr	r3, [r3, #16]
 800a488:	021a      	lsls	r2, r3, #8
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	685a      	ldr	r2, [r3, #4]
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a4a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	6859      	ldr	r1, [r3, #4]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	689a      	ldr	r2, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6899      	ldr	r1, [r3, #8]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68da      	ldr	r2, [r3, #12]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4da:	4a58      	ldr	r2, [pc, #352]	; (800a63c <ADC_Init+0x1f4>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d022      	beq.n	800a526 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a4ee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	6899      	ldr	r1, [r3, #8]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	430a      	orrs	r2, r1
 800a500:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a510:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	6899      	ldr	r1, [r3, #8]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	430a      	orrs	r2, r1
 800a522:	609a      	str	r2, [r3, #8]
 800a524:	e00f      	b.n	800a546 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689a      	ldr	r2, [r3, #8]
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a544:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	f022 0202 	bic.w	r2, r2, #2
 800a554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	6899      	ldr	r1, [r3, #8]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	7e1b      	ldrb	r3, [r3, #24]
 800a560:	005a      	lsls	r2, r3, #1
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	430a      	orrs	r2, r1
 800a568:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d01b      	beq.n	800a5ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	685a      	ldr	r2, [r3, #4]
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a582:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a592:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	035a      	lsls	r2, r3, #13
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	430a      	orrs	r2, r1
 800a5a8:	605a      	str	r2, [r3, #4]
 800a5aa:	e007      	b.n	800a5bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a5ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a5ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	69db      	ldr	r3, [r3, #28]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	051a      	lsls	r2, r3, #20
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	689a      	ldr	r2, [r3, #8]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a5f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6899      	ldr	r1, [r3, #8]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a5fe:	025a      	lsls	r2, r3, #9
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	430a      	orrs	r2, r1
 800a606:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689a      	ldr	r2, [r3, #8]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	6899      	ldr	r1, [r3, #8]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	695b      	ldr	r3, [r3, #20]
 800a622:	029a      	lsls	r2, r3, #10
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	430a      	orrs	r2, r1
 800a62a:	609a      	str	r2, [r3, #8]
}
 800a62c:	bf00      	nop
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	40012300 	.word	0x40012300
 800a63c:	0f000001 	.word	0x0f000001

0800a640 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a652:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a656:	2b00      	cmp	r3, #0
 800a658:	d13c      	bne.n	800a6d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d12b      	bne.n	800a6cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d127      	bne.n	800a6cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a682:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a686:	2b00      	cmp	r3, #0
 800a688:	d006      	beq.n	800a698 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	689b      	ldr	r3, [r3, #8]
 800a690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a694:	2b00      	cmp	r3, #0
 800a696:	d119      	bne.n	800a6cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	685a      	ldr	r2, [r3, #4]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 0220 	bic.w	r2, r2, #32
 800a6a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d105      	bne.n	800a6cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	f043 0201 	orr.w	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	f7ff fd6b 	bl	800a1a8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a6d2:	e00e      	b.n	800a6f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d8:	f003 0310 	and.w	r3, r3, #16
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d003      	beq.n	800a6e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a6e0:	68f8      	ldr	r0, [r7, #12]
 800a6e2:	f7ff fd75 	bl	800a1d0 <HAL_ADC_ErrorCallback>
}
 800a6e6:	e004      	b.n	800a6f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	4798      	blx	r3
}
 800a6f2:	bf00      	nop
 800a6f4:	3710      	adds	r7, #16
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b084      	sub	sp, #16
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a706:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f7ff fd57 	bl	800a1bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a70e:	bf00      	nop
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a722:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2240      	movs	r2, #64	; 0x40
 800a728:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a72e:	f043 0204 	orr.w	r2, r3, #4
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f7ff fd4a 	bl	800a1d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a73c:	bf00      	nop
 800a73e:	3710      	adds	r7, #16
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f003 0307 	and.w	r3, r3, #7
 800a752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a754:	4b0c      	ldr	r3, [pc, #48]	; (800a788 <__NVIC_SetPriorityGrouping+0x44>)
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a75a:	68ba      	ldr	r2, [r7, #8]
 800a75c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a760:	4013      	ands	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a76c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a776:	4a04      	ldr	r2, [pc, #16]	; (800a788 <__NVIC_SetPriorityGrouping+0x44>)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	60d3      	str	r3, [r2, #12]
}
 800a77c:	bf00      	nop
 800a77e:	3714      	adds	r7, #20
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	e000ed00 	.word	0xe000ed00

0800a78c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a78c:	b480      	push	{r7}
 800a78e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a790:	4b04      	ldr	r3, [pc, #16]	; (800a7a4 <__NVIC_GetPriorityGrouping+0x18>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	0a1b      	lsrs	r3, r3, #8
 800a796:	f003 0307 	and.w	r3, r3, #7
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	e000ed00 	.word	0xe000ed00

0800a7a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b083      	sub	sp, #12
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	db0b      	blt.n	800a7d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a7ba:	79fb      	ldrb	r3, [r7, #7]
 800a7bc:	f003 021f 	and.w	r2, r3, #31
 800a7c0:	4907      	ldr	r1, [pc, #28]	; (800a7e0 <__NVIC_EnableIRQ+0x38>)
 800a7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7c6:	095b      	lsrs	r3, r3, #5
 800a7c8:	2001      	movs	r0, #1
 800a7ca:	fa00 f202 	lsl.w	r2, r0, r2
 800a7ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a7d2:	bf00      	nop
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	e000e100 	.word	0xe000e100

0800a7e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	6039      	str	r1, [r7, #0]
 800a7ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a7f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	db0a      	blt.n	800a80e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	490c      	ldr	r1, [pc, #48]	; (800a830 <__NVIC_SetPriority+0x4c>)
 800a7fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a802:	0112      	lsls	r2, r2, #4
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	440b      	add	r3, r1
 800a808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a80c:	e00a      	b.n	800a824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	b2da      	uxtb	r2, r3
 800a812:	4908      	ldr	r1, [pc, #32]	; (800a834 <__NVIC_SetPriority+0x50>)
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	f003 030f 	and.w	r3, r3, #15
 800a81a:	3b04      	subs	r3, #4
 800a81c:	0112      	lsls	r2, r2, #4
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	440b      	add	r3, r1
 800a822:	761a      	strb	r2, [r3, #24]
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr
 800a830:	e000e100 	.word	0xe000e100
 800a834:	e000ed00 	.word	0xe000ed00

0800a838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a838:	b480      	push	{r7}
 800a83a:	b089      	sub	sp, #36	; 0x24
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f003 0307 	and.w	r3, r3, #7
 800a84a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	f1c3 0307 	rsb	r3, r3, #7
 800a852:	2b04      	cmp	r3, #4
 800a854:	bf28      	it	cs
 800a856:	2304      	movcs	r3, #4
 800a858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	3304      	adds	r3, #4
 800a85e:	2b06      	cmp	r3, #6
 800a860:	d902      	bls.n	800a868 <NVIC_EncodePriority+0x30>
 800a862:	69fb      	ldr	r3, [r7, #28]
 800a864:	3b03      	subs	r3, #3
 800a866:	e000      	b.n	800a86a <NVIC_EncodePriority+0x32>
 800a868:	2300      	movs	r3, #0
 800a86a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a86c:	f04f 32ff 	mov.w	r2, #4294967295
 800a870:	69bb      	ldr	r3, [r7, #24]
 800a872:	fa02 f303 	lsl.w	r3, r2, r3
 800a876:	43da      	mvns	r2, r3
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	401a      	ands	r2, r3
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a880:	f04f 31ff 	mov.w	r1, #4294967295
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	fa01 f303 	lsl.w	r3, r1, r3
 800a88a:	43d9      	mvns	r1, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a890:	4313      	orrs	r3, r2
         );
}
 800a892:	4618      	mov	r0, r3
 800a894:	3724      	adds	r7, #36	; 0x24
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3b01      	subs	r3, #1
 800a8ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8b0:	d301      	bcc.n	800a8b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	e00f      	b.n	800a8d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a8b6:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <SysTick_Config+0x40>)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a8be:	210f      	movs	r1, #15
 800a8c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c4:	f7ff ff8e 	bl	800a7e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <SysTick_Config+0x40>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <SysTick_Config+0x40>)
 800a8d0:	2207      	movs	r2, #7
 800a8d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	e000e010 	.word	0xe000e010

0800a8e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b082      	sub	sp, #8
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff ff29 	bl	800a744 <__NVIC_SetPriorityGrouping>
}
 800a8f2:	bf00      	nop
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	4603      	mov	r3, r0
 800a902:	60b9      	str	r1, [r7, #8]
 800a904:	607a      	str	r2, [r7, #4]
 800a906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a908:	2300      	movs	r3, #0
 800a90a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a90c:	f7ff ff3e 	bl	800a78c <__NVIC_GetPriorityGrouping>
 800a910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f7ff ff8e 	bl	800a838 <NVIC_EncodePriority>
 800a91c:	4602      	mov	r2, r0
 800a91e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a922:	4611      	mov	r1, r2
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff ff5d 	bl	800a7e4 <__NVIC_SetPriority>
}
 800a92a:	bf00      	nop
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}

0800a932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	4603      	mov	r3, r0
 800a93a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a93c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a940:	4618      	mov	r0, r3
 800a942:	f7ff ff31 	bl	800a7a8 <__NVIC_EnableIRQ>
}
 800a946:	bf00      	nop
 800a948:	3708      	adds	r7, #8
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}

0800a94e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b082      	sub	sp, #8
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff ffa2 	bl	800a8a0 <SysTick_Config>
 800a95c:	4603      	mov	r3, r0
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a974:	f7ff fab4 	bl	8009ee0 <HAL_GetTick>
 800a978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d101      	bne.n	800a984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e099      	b.n	800aab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 0201 	bic.w	r2, r2, #1
 800a9a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9a4:	e00f      	b.n	800a9c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a9a6:	f7ff fa9b 	bl	8009ee0 <HAL_GetTick>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	1ad3      	subs	r3, r2, r3
 800a9b0:	2b05      	cmp	r3, #5
 800a9b2:	d908      	bls.n	800a9c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2220      	movs	r2, #32
 800a9b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2203      	movs	r2, #3
 800a9be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e078      	b.n	800aab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1e8      	bne.n	800a9a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a9dc:	697a      	ldr	r2, [r7, #20]
 800a9de:	4b38      	ldr	r3, [pc, #224]	; (800aac0 <HAL_DMA_Init+0x158>)
 800a9e0:	4013      	ands	r3, r2
 800a9e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a9f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a9fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aa0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a1b      	ldr	r3, [r3, #32]
 800aa10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa1c:	2b04      	cmp	r3, #4
 800aa1e:	d107      	bne.n	800aa30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	697a      	ldr	r2, [r7, #20]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa56:	2b04      	cmp	r3, #4
 800aa58:	d117      	bne.n	800aa8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d00e      	beq.n	800aa8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f000 fa9d 	bl	800afac <DMA_CheckFifoParam>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d008      	beq.n	800aa8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2240      	movs	r2, #64	; 0x40
 800aa7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800aa86:	2301      	movs	r3, #1
 800aa88:	e016      	b.n	800aab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fa54 	bl	800af40 <DMA_CalcBaseAndBitshift>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa0:	223f      	movs	r2, #63	; 0x3f
 800aaa2:	409a      	lsls	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800aab6:	2300      	movs	r3, #0
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	f010803f 	.word	0xf010803f

0800aac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aae2:	2b01      	cmp	r3, #1
 800aae4:	d101      	bne.n	800aaea <HAL_DMA_Start_IT+0x26>
 800aae6:	2302      	movs	r3, #2
 800aae8:	e040      	b.n	800ab6c <HAL_DMA_Start_IT+0xa8>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d12f      	bne.n	800ab5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2202      	movs	r2, #2
 800ab02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 f9e6 	bl	800aee4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1c:	223f      	movs	r2, #63	; 0x3f
 800ab1e:	409a      	lsls	r2, r3
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f042 0216 	orr.w	r2, r2, #22
 800ab32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d007      	beq.n	800ab4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f042 0208 	orr.w	r2, r2, #8
 800ab4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f042 0201 	orr.w	r2, r2, #1
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e005      	b.n	800ab6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ab66:	2302      	movs	r3, #2
 800ab68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ab6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3718      	adds	r7, #24
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d004      	beq.n	800ab92 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2280      	movs	r2, #128	; 0x80
 800ab8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e00c      	b.n	800abac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2205      	movs	r2, #5
 800ab96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0201 	bic.w	r2, r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	370c      	adds	r7, #12
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800abc0:	2300      	movs	r3, #0
 800abc2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800abc4:	4b92      	ldr	r3, [pc, #584]	; (800ae10 <HAL_DMA_IRQHandler+0x258>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a92      	ldr	r2, [pc, #584]	; (800ae14 <HAL_DMA_IRQHandler+0x25c>)
 800abca:	fba2 2303 	umull	r2, r3, r2, r3
 800abce:	0a9b      	lsrs	r3, r3, #10
 800abd0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe2:	2208      	movs	r2, #8
 800abe4:	409a      	lsls	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	4013      	ands	r3, r2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d01a      	beq.n	800ac24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f003 0304 	and.w	r3, r3, #4
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d013      	beq.n	800ac24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0204 	bic.w	r2, r2, #4
 800ac0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac10:	2208      	movs	r2, #8
 800ac12:	409a      	lsls	r2, r3
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1c:	f043 0201 	orr.w	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac28:	2201      	movs	r2, #1
 800ac2a:	409a      	lsls	r2, r3
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d012      	beq.n	800ac5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00b      	beq.n	800ac5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac46:	2201      	movs	r2, #1
 800ac48:	409a      	lsls	r2, r3
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac52:	f043 0202 	orr.w	r2, r3, #2
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac5e:	2204      	movs	r2, #4
 800ac60:	409a      	lsls	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	4013      	ands	r3, r2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d012      	beq.n	800ac90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0302 	and.w	r3, r3, #2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00b      	beq.n	800ac90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac7c:	2204      	movs	r2, #4
 800ac7e:	409a      	lsls	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac88:	f043 0204 	orr.w	r2, r3, #4
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac94:	2210      	movs	r2, #16
 800ac96:	409a      	lsls	r2, r3
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d043      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d03c      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acb2:	2210      	movs	r2, #16
 800acb4:	409a      	lsls	r2, r3
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d018      	beq.n	800acfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d108      	bne.n	800ace8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d024      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
 800ace6:	e01f      	b.n	800ad28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acec:	2b00      	cmp	r3, #0
 800acee:	d01b      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	4798      	blx	r3
 800acf8:	e016      	b.n	800ad28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d107      	bne.n	800ad18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f022 0208 	bic.w	r2, r2, #8
 800ad16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d003      	beq.n	800ad28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	409a      	lsls	r2, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4013      	ands	r3, r2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	f000 808e 	beq.w	800ae56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0310 	and.w	r3, r3, #16
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	f000 8086 	beq.w	800ae56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4e:	2220      	movs	r2, #32
 800ad50:	409a      	lsls	r2, r3
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b05      	cmp	r3, #5
 800ad60:	d136      	bne.n	800add0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f022 0216 	bic.w	r2, r2, #22
 800ad70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	695a      	ldr	r2, [r3, #20]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d103      	bne.n	800ad92 <HAL_DMA_IRQHandler+0x1da>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d007      	beq.n	800ada2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f022 0208 	bic.w	r2, r2, #8
 800ada0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ada6:	223f      	movs	r2, #63	; 0x3f
 800ada8:	409a      	lsls	r2, r3
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d07d      	beq.n	800aec2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	4798      	blx	r3
        }
        return;
 800adce:	e078      	b.n	800aec2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800adda:	2b00      	cmp	r3, #0
 800addc:	d01c      	beq.n	800ae18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d108      	bne.n	800adfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d030      	beq.n	800ae56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	4798      	blx	r3
 800adfc:	e02b      	b.n	800ae56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d027      	beq.n	800ae56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
 800ae0e:	e022      	b.n	800ae56 <HAL_DMA_IRQHandler+0x29e>
 800ae10:	20000000 	.word	0x20000000
 800ae14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d10f      	bne.n	800ae46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f022 0210 	bic.w	r2, r2, #16
 800ae34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d032      	beq.n	800aec4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d022      	beq.n	800aeb0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2205      	movs	r2, #5
 800ae6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f022 0201 	bic.w	r2, r2, #1
 800ae80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	3301      	adds	r3, #1
 800ae86:	60bb      	str	r3, [r7, #8]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d307      	bcc.n	800ae9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f2      	bne.n	800ae82 <HAL_DMA_IRQHandler+0x2ca>
 800ae9c:	e000      	b.n	800aea0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ae9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d005      	beq.n	800aec4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	4798      	blx	r3
 800aec0:	e000      	b.n	800aec4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800aec2:	bf00      	nop
    }
  }
}
 800aec4:	3718      	adds	r7, #24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop

0800aecc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	370c      	adds	r7, #12
 800aedc:	46bd      	mov	sp, r7
 800aede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee2:	4770      	bx	lr

0800aee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	681a      	ldr	r2, [r3, #0]
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	2b40      	cmp	r3, #64	; 0x40
 800af10:	d108      	bne.n	800af24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68ba      	ldr	r2, [r7, #8]
 800af20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800af22:	e007      	b.n	800af34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	68ba      	ldr	r2, [r7, #8]
 800af2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	687a      	ldr	r2, [r7, #4]
 800af32:	60da      	str	r2, [r3, #12]
}
 800af34:	bf00      	nop
 800af36:	3714      	adds	r7, #20
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800af40:	b480      	push	{r7}
 800af42:	b085      	sub	sp, #20
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	3b10      	subs	r3, #16
 800af50:	4a14      	ldr	r2, [pc, #80]	; (800afa4 <DMA_CalcBaseAndBitshift+0x64>)
 800af52:	fba2 2303 	umull	r2, r3, r2, r3
 800af56:	091b      	lsrs	r3, r3, #4
 800af58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800af5a:	4a13      	ldr	r2, [pc, #76]	; (800afa8 <DMA_CalcBaseAndBitshift+0x68>)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d909      	bls.n	800af82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af76:	f023 0303 	bic.w	r3, r3, #3
 800af7a:	1d1a      	adds	r2, r3, #4
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	659a      	str	r2, [r3, #88]	; 0x58
 800af80:	e007      	b.n	800af92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800af8a:	f023 0303 	bic.w	r3, r3, #3
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800af96:	4618      	mov	r0, r3
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	aaaaaaab 	.word	0xaaaaaaab
 800afa8:	08019188 	.word	0x08019188

0800afac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800afac:	b480      	push	{r7}
 800afae:	b085      	sub	sp, #20
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d11f      	bne.n	800b006 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	2b03      	cmp	r3, #3
 800afca:	d855      	bhi.n	800b078 <DMA_CheckFifoParam+0xcc>
 800afcc:	a201      	add	r2, pc, #4	; (adr r2, 800afd4 <DMA_CheckFifoParam+0x28>)
 800afce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd2:	bf00      	nop
 800afd4:	0800afe5 	.word	0x0800afe5
 800afd8:	0800aff7 	.word	0x0800aff7
 800afdc:	0800afe5 	.word	0x0800afe5
 800afe0:	0800b079 	.word	0x0800b079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afec:	2b00      	cmp	r3, #0
 800afee:	d045      	beq.n	800b07c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aff0:	2301      	movs	r3, #1
 800aff2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aff4:	e042      	b.n	800b07c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800affa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800affe:	d13f      	bne.n	800b080 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b004:	e03c      	b.n	800b080 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00e:	d121      	bne.n	800b054 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	2b03      	cmp	r3, #3
 800b014:	d836      	bhi.n	800b084 <DMA_CheckFifoParam+0xd8>
 800b016:	a201      	add	r2, pc, #4	; (adr r2, 800b01c <DMA_CheckFifoParam+0x70>)
 800b018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b033 	.word	0x0800b033
 800b024:	0800b02d 	.word	0x0800b02d
 800b028:	0800b045 	.word	0x0800b045
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b02c:	2301      	movs	r3, #1
 800b02e:	73fb      	strb	r3, [r7, #15]
      break;
 800b030:	e02f      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d024      	beq.n	800b088 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b042:	e021      	b.n	800b088 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b04c:	d11e      	bne.n	800b08c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b052:	e01b      	b.n	800b08c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d902      	bls.n	800b060 <DMA_CheckFifoParam+0xb4>
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d003      	beq.n	800b066 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b05e:	e018      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	73fb      	strb	r3, [r7, #15]
      break;
 800b064:	e015      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00e      	beq.n	800b090 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	73fb      	strb	r3, [r7, #15]
      break;
 800b076:	e00b      	b.n	800b090 <DMA_CheckFifoParam+0xe4>
      break;
 800b078:	bf00      	nop
 800b07a:	e00a      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;
 800b07c:	bf00      	nop
 800b07e:	e008      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;
 800b080:	bf00      	nop
 800b082:	e006      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;
 800b084:	bf00      	nop
 800b086:	e004      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;
 800b088:	bf00      	nop
 800b08a:	e002      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;   
 800b08c:	bf00      	nop
 800b08e:	e000      	b.n	800b092 <DMA_CheckFifoParam+0xe6>
      break;
 800b090:	bf00      	nop
    }
  } 
  
  return status; 
 800b092:	7bfb      	ldrb	r3, [r7, #15]
}
 800b094:	4618      	mov	r0, r3
 800b096:	3714      	adds	r7, #20
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b089      	sub	sp, #36	; 0x24
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	61fb      	str	r3, [r7, #28]
 800b0ba:	e177      	b.n	800b3ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0bc:	2201      	movs	r2, #1
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	697a      	ldr	r2, [r7, #20]
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0d0:	693a      	ldr	r2, [r7, #16]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	f040 8166 	bne.w	800b3a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	2b01      	cmp	r3, #1
 800b0e0:	d00b      	beq.n	800b0fa <HAL_GPIO_Init+0x5a>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2b02      	cmp	r3, #2
 800b0e8:	d007      	beq.n	800b0fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b0ee:	2b11      	cmp	r3, #17
 800b0f0:	d003      	beq.n	800b0fa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	2b12      	cmp	r3, #18
 800b0f8:	d130      	bne.n	800b15c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	689b      	ldr	r3, [r3, #8]
 800b0fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	005b      	lsls	r3, r3, #1
 800b104:	2203      	movs	r2, #3
 800b106:	fa02 f303 	lsl.w	r3, r2, r3
 800b10a:	43db      	mvns	r3, r3
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	4013      	ands	r3, r2
 800b110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	005b      	lsls	r3, r3, #1
 800b11a:	fa02 f303 	lsl.w	r3, r2, r3
 800b11e:	69ba      	ldr	r2, [r7, #24]
 800b120:	4313      	orrs	r3, r2
 800b122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b130:	2201      	movs	r2, #1
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	fa02 f303 	lsl.w	r3, r2, r3
 800b138:	43db      	mvns	r3, r3
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4013      	ands	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	091b      	lsrs	r3, r3, #4
 800b146:	f003 0201 	and.w	r2, r3, #1
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	fa02 f303 	lsl.w	r3, r2, r3
 800b150:	69ba      	ldr	r2, [r7, #24]
 800b152:	4313      	orrs	r3, r2
 800b154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	005b      	lsls	r3, r3, #1
 800b166:	2203      	movs	r2, #3
 800b168:	fa02 f303 	lsl.w	r3, r2, r3
 800b16c:	43db      	mvns	r3, r3
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	4013      	ands	r3, r2
 800b172:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	689a      	ldr	r2, [r3, #8]
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	4313      	orrs	r3, r2
 800b184:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	2b02      	cmp	r3, #2
 800b192:	d003      	beq.n	800b19c <HAL_GPIO_Init+0xfc>
 800b194:	683b      	ldr	r3, [r7, #0]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	2b12      	cmp	r3, #18
 800b19a:	d123      	bne.n	800b1e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	08da      	lsrs	r2, r3, #3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3208      	adds	r2, #8
 800b1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	f003 0307 	and.w	r3, r3, #7
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	220f      	movs	r2, #15
 800b1b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b8:	43db      	mvns	r3, r3
 800b1ba:	69ba      	ldr	r2, [r7, #24]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	691a      	ldr	r2, [r3, #16]
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	f003 0307 	and.w	r3, r3, #7
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d0:	69ba      	ldr	r2, [r7, #24]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b1d6:	69fb      	ldr	r3, [r7, #28]
 800b1d8:	08da      	lsrs	r2, r3, #3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	3208      	adds	r2, #8
 800b1de:	69b9      	ldr	r1, [r7, #24]
 800b1e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	005b      	lsls	r3, r3, #1
 800b1ee:	2203      	movs	r2, #3
 800b1f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f4:	43db      	mvns	r3, r3
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	f003 0203 	and.w	r2, r3, #3
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	fa02 f303 	lsl.w	r3, r2, r3
 800b20c:	69ba      	ldr	r2, [r7, #24]
 800b20e:	4313      	orrs	r3, r2
 800b210:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b220:	2b00      	cmp	r3, #0
 800b222:	f000 80c0 	beq.w	800b3a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b226:	2300      	movs	r3, #0
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	4b65      	ldr	r3, [pc, #404]	; (800b3c0 <HAL_GPIO_Init+0x320>)
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	4a64      	ldr	r2, [pc, #400]	; (800b3c0 <HAL_GPIO_Init+0x320>)
 800b230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b234:	6453      	str	r3, [r2, #68]	; 0x44
 800b236:	4b62      	ldr	r3, [pc, #392]	; (800b3c0 <HAL_GPIO_Init+0x320>)
 800b238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b23a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b23e:	60fb      	str	r3, [r7, #12]
 800b240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b242:	4a60      	ldr	r2, [pc, #384]	; (800b3c4 <HAL_GPIO_Init+0x324>)
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	089b      	lsrs	r3, r3, #2
 800b248:	3302      	adds	r3, #2
 800b24a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b24e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	f003 0303 	and.w	r3, r3, #3
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	220f      	movs	r2, #15
 800b25a:	fa02 f303 	lsl.w	r3, r2, r3
 800b25e:	43db      	mvns	r3, r3
 800b260:	69ba      	ldr	r2, [r7, #24]
 800b262:	4013      	ands	r3, r2
 800b264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a57      	ldr	r2, [pc, #348]	; (800b3c8 <HAL_GPIO_Init+0x328>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d037      	beq.n	800b2de <HAL_GPIO_Init+0x23e>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a56      	ldr	r2, [pc, #344]	; (800b3cc <HAL_GPIO_Init+0x32c>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d031      	beq.n	800b2da <HAL_GPIO_Init+0x23a>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a55      	ldr	r2, [pc, #340]	; (800b3d0 <HAL_GPIO_Init+0x330>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d02b      	beq.n	800b2d6 <HAL_GPIO_Init+0x236>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a54      	ldr	r2, [pc, #336]	; (800b3d4 <HAL_GPIO_Init+0x334>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d025      	beq.n	800b2d2 <HAL_GPIO_Init+0x232>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a53      	ldr	r2, [pc, #332]	; (800b3d8 <HAL_GPIO_Init+0x338>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d01f      	beq.n	800b2ce <HAL_GPIO_Init+0x22e>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a52      	ldr	r2, [pc, #328]	; (800b3dc <HAL_GPIO_Init+0x33c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d019      	beq.n	800b2ca <HAL_GPIO_Init+0x22a>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a51      	ldr	r2, [pc, #324]	; (800b3e0 <HAL_GPIO_Init+0x340>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d013      	beq.n	800b2c6 <HAL_GPIO_Init+0x226>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a50      	ldr	r2, [pc, #320]	; (800b3e4 <HAL_GPIO_Init+0x344>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d00d      	beq.n	800b2c2 <HAL_GPIO_Init+0x222>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a4f      	ldr	r2, [pc, #316]	; (800b3e8 <HAL_GPIO_Init+0x348>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d007      	beq.n	800b2be <HAL_GPIO_Init+0x21e>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a4e      	ldr	r2, [pc, #312]	; (800b3ec <HAL_GPIO_Init+0x34c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d101      	bne.n	800b2ba <HAL_GPIO_Init+0x21a>
 800b2b6:	2309      	movs	r3, #9
 800b2b8:	e012      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2ba:	230a      	movs	r3, #10
 800b2bc:	e010      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2be:	2308      	movs	r3, #8
 800b2c0:	e00e      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2c2:	2307      	movs	r3, #7
 800b2c4:	e00c      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2c6:	2306      	movs	r3, #6
 800b2c8:	e00a      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2ca:	2305      	movs	r3, #5
 800b2cc:	e008      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	e006      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2d2:	2303      	movs	r3, #3
 800b2d4:	e004      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2d6:	2302      	movs	r3, #2
 800b2d8:	e002      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2da:	2301      	movs	r3, #1
 800b2dc:	e000      	b.n	800b2e0 <HAL_GPIO_Init+0x240>
 800b2de:	2300      	movs	r3, #0
 800b2e0:	69fa      	ldr	r2, [r7, #28]
 800b2e2:	f002 0203 	and.w	r2, r2, #3
 800b2e6:	0092      	lsls	r2, r2, #2
 800b2e8:	4093      	lsls	r3, r2
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2f0:	4934      	ldr	r1, [pc, #208]	; (800b3c4 <HAL_GPIO_Init+0x324>)
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	089b      	lsrs	r3, r3, #2
 800b2f6:	3302      	adds	r3, #2
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b2fe:	4b3c      	ldr	r3, [pc, #240]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	43db      	mvns	r3, r3
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	4013      	ands	r3, r2
 800b30c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b316:	2b00      	cmp	r3, #0
 800b318:	d003      	beq.n	800b322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b31a:	69ba      	ldr	r2, [r7, #24]
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	4313      	orrs	r3, r2
 800b320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b322:	4a33      	ldr	r2, [pc, #204]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b328:	4b31      	ldr	r3, [pc, #196]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	43db      	mvns	r3, r3
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	4013      	ands	r3, r2
 800b336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b340:	2b00      	cmp	r3, #0
 800b342:	d003      	beq.n	800b34c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b344:	69ba      	ldr	r2, [r7, #24]
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	4313      	orrs	r3, r2
 800b34a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b34c:	4a28      	ldr	r2, [pc, #160]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b352:	4b27      	ldr	r3, [pc, #156]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	43db      	mvns	r3, r3
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	4013      	ands	r3, r2
 800b360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d003      	beq.n	800b376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b36e:	69ba      	ldr	r2, [r7, #24]
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b376:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b378:	69bb      	ldr	r3, [r7, #24]
 800b37a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b37c:	4b1c      	ldr	r3, [pc, #112]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b37e:	68db      	ldr	r3, [r3, #12]
 800b380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	43db      	mvns	r3, r3
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	4013      	ands	r3, r2
 800b38a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	4313      	orrs	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3a0:	4a13      	ldr	r2, [pc, #76]	; (800b3f0 <HAL_GPIO_Init+0x350>)
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3a6:	69fb      	ldr	r3, [r7, #28]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	61fb      	str	r3, [r7, #28]
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	2b0f      	cmp	r3, #15
 800b3b0:	f67f ae84 	bls.w	800b0bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3b4:	bf00      	nop
 800b3b6:	3724      	adds	r7, #36	; 0x24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	40023800 	.word	0x40023800
 800b3c4:	40013800 	.word	0x40013800
 800b3c8:	40020000 	.word	0x40020000
 800b3cc:	40020400 	.word	0x40020400
 800b3d0:	40020800 	.word	0x40020800
 800b3d4:	40020c00 	.word	0x40020c00
 800b3d8:	40021000 	.word	0x40021000
 800b3dc:	40021400 	.word	0x40021400
 800b3e0:	40021800 	.word	0x40021800
 800b3e4:	40021c00 	.word	0x40021c00
 800b3e8:	40022000 	.word	0x40022000
 800b3ec:	40022400 	.word	0x40022400
 800b3f0:	40013c00 	.word	0x40013c00

0800b3f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	691a      	ldr	r2, [r3, #16]
 800b404:	887b      	ldrh	r3, [r7, #2]
 800b406:	4013      	ands	r3, r2
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b40c:	2301      	movs	r3, #1
 800b40e:	73fb      	strb	r3, [r7, #15]
 800b410:	e001      	b.n	800b416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b412:	2300      	movs	r3, #0
 800b414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b416:	7bfb      	ldrb	r3, [r7, #15]
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	460b      	mov	r3, r1
 800b42e:	807b      	strh	r3, [r7, #2]
 800b430:	4613      	mov	r3, r2
 800b432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b434:	787b      	ldrb	r3, [r7, #1]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d003      	beq.n	800b442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b43a:	887a      	ldrh	r2, [r7, #2]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b440:	e003      	b.n	800b44a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b442:	887b      	ldrh	r3, [r7, #2]
 800b444:	041a      	lsls	r2, r3, #16
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	619a      	str	r2, [r3, #24]
}
 800b44a:	bf00      	nop
 800b44c:	370c      	adds	r7, #12
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
	...

0800b458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b082      	sub	sp, #8
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	4603      	mov	r3, r0
 800b460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b462:	4b08      	ldr	r3, [pc, #32]	; (800b484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b464:	695a      	ldr	r2, [r3, #20]
 800b466:	88fb      	ldrh	r3, [r7, #6]
 800b468:	4013      	ands	r3, r2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d006      	beq.n	800b47c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b46e:	4a05      	ldr	r2, [pc, #20]	; (800b484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800b470:	88fb      	ldrh	r3, [r7, #6]
 800b472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	4618      	mov	r0, r3
 800b478:	f7fa fcfd 	bl	8005e76 <HAL_GPIO_EXTI_Callback>
  }
}
 800b47c:	bf00      	nop
 800b47e:	3708      	adds	r7, #8
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	40013c00 	.word	0x40013c00

0800b488 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	e11f      	b.n	800b6da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fb fd5c 	bl	8006f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2224      	movs	r2, #36	; 0x24
 800b4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0201 	bic.w	r2, r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b4da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b4ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b4ec:	f001 f96e 	bl	800c7cc <HAL_RCC_GetPCLK1Freq>
 800b4f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	4a7b      	ldr	r2, [pc, #492]	; (800b6e4 <HAL_I2C_Init+0x25c>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d807      	bhi.n	800b50c <HAL_I2C_Init+0x84>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4a7a      	ldr	r2, [pc, #488]	; (800b6e8 <HAL_I2C_Init+0x260>)
 800b500:	4293      	cmp	r3, r2
 800b502:	bf94      	ite	ls
 800b504:	2301      	movls	r3, #1
 800b506:	2300      	movhi	r3, #0
 800b508:	b2db      	uxtb	r3, r3
 800b50a:	e006      	b.n	800b51a <HAL_I2C_Init+0x92>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4a77      	ldr	r2, [pc, #476]	; (800b6ec <HAL_I2C_Init+0x264>)
 800b510:	4293      	cmp	r3, r2
 800b512:	bf94      	ite	ls
 800b514:	2301      	movls	r3, #1
 800b516:	2300      	movhi	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e0db      	b.n	800b6da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	4a72      	ldr	r2, [pc, #456]	; (800b6f0 <HAL_I2C_Init+0x268>)
 800b526:	fba2 2303 	umull	r2, r3, r2, r3
 800b52a:	0c9b      	lsrs	r3, r3, #18
 800b52c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6a1b      	ldr	r3, [r3, #32]
 800b548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	685b      	ldr	r3, [r3, #4]
 800b550:	4a64      	ldr	r2, [pc, #400]	; (800b6e4 <HAL_I2C_Init+0x25c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d802      	bhi.n	800b55c <HAL_I2C_Init+0xd4>
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3301      	adds	r3, #1
 800b55a:	e009      	b.n	800b570 <HAL_I2C_Init+0xe8>
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b562:	fb02 f303 	mul.w	r3, r2, r3
 800b566:	4a63      	ldr	r2, [pc, #396]	; (800b6f4 <HAL_I2C_Init+0x26c>)
 800b568:	fba2 2303 	umull	r2, r3, r2, r3
 800b56c:	099b      	lsrs	r3, r3, #6
 800b56e:	3301      	adds	r3, #1
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	6812      	ldr	r2, [r2, #0]
 800b574:	430b      	orrs	r3, r1
 800b576:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	69db      	ldr	r3, [r3, #28]
 800b57e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b582:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	4956      	ldr	r1, [pc, #344]	; (800b6e4 <HAL_I2C_Init+0x25c>)
 800b58c:	428b      	cmp	r3, r1
 800b58e:	d80d      	bhi.n	800b5ac <HAL_I2C_Init+0x124>
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	1e59      	subs	r1, r3, #1
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b59e:	3301      	adds	r3, #1
 800b5a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5a4:	2b04      	cmp	r3, #4
 800b5a6:	bf38      	it	cc
 800b5a8:	2304      	movcc	r3, #4
 800b5aa:	e04f      	b.n	800b64c <HAL_I2C_Init+0x1c4>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d111      	bne.n	800b5d8 <HAL_I2C_Init+0x150>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	1e58      	subs	r0, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6859      	ldr	r1, [r3, #4]
 800b5bc:	460b      	mov	r3, r1
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	440b      	add	r3, r1
 800b5c2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	bf0c      	ite	eq
 800b5d0:	2301      	moveq	r3, #1
 800b5d2:	2300      	movne	r3, #0
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	e012      	b.n	800b5fe <HAL_I2C_Init+0x176>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	1e58      	subs	r0, r3, #1
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6859      	ldr	r1, [r3, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	0099      	lsls	r1, r3, #2
 800b5e8:	440b      	add	r3, r1
 800b5ea:	fbb0 f3f3 	udiv	r3, r0, r3
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	bf0c      	ite	eq
 800b5f8:	2301      	moveq	r3, #1
 800b5fa:	2300      	movne	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <HAL_I2C_Init+0x17e>
 800b602:	2301      	movs	r3, #1
 800b604:	e022      	b.n	800b64c <HAL_I2C_Init+0x1c4>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10e      	bne.n	800b62c <HAL_I2C_Init+0x1a4>
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	1e58      	subs	r0, r3, #1
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6859      	ldr	r1, [r3, #4]
 800b616:	460b      	mov	r3, r1
 800b618:	005b      	lsls	r3, r3, #1
 800b61a:	440b      	add	r3, r1
 800b61c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b620:	3301      	adds	r3, #1
 800b622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b62a:	e00f      	b.n	800b64c <HAL_I2C_Init+0x1c4>
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	1e58      	subs	r0, r3, #1
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6859      	ldr	r1, [r3, #4]
 800b634:	460b      	mov	r3, r1
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	440b      	add	r3, r1
 800b63a:	0099      	lsls	r1, r3, #2
 800b63c:	440b      	add	r3, r1
 800b63e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b642:	3301      	adds	r3, #1
 800b644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b648:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b64c:	6879      	ldr	r1, [r7, #4]
 800b64e:	6809      	ldr	r1, [r1, #0]
 800b650:	4313      	orrs	r3, r2
 800b652:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	69da      	ldr	r2, [r3, #28]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	431a      	orrs	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	430a      	orrs	r2, r1
 800b66e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b67a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	6911      	ldr	r1, [r2, #16]
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	68d2      	ldr	r2, [r2, #12]
 800b686:	4311      	orrs	r1, r2
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	6812      	ldr	r2, [r2, #0]
 800b68c:	430b      	orrs	r3, r1
 800b68e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	695a      	ldr	r2, [r3, #20]
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	699b      	ldr	r3, [r3, #24]
 800b6a2:	431a      	orrs	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f042 0201 	orr.w	r2, r2, #1
 800b6ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	000186a0 	.word	0x000186a0
 800b6e8:	001e847f 	.word	0x001e847f
 800b6ec:	003d08ff 	.word	0x003d08ff
 800b6f0:	431bde83 	.word	0x431bde83
 800b6f4:	10624dd3 	.word	0x10624dd3

0800b6f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b088      	sub	sp, #32
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	607a      	str	r2, [r7, #4]
 800b702:	461a      	mov	r2, r3
 800b704:	460b      	mov	r3, r1
 800b706:	817b      	strh	r3, [r7, #10]
 800b708:	4613      	mov	r3, r2
 800b70a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b70c:	f7fe fbe8 	bl	8009ee0 <HAL_GetTick>
 800b710:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b20      	cmp	r3, #32
 800b71c:	f040 80e0 	bne.w	800b8e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	9300      	str	r3, [sp, #0]
 800b724:	2319      	movs	r3, #25
 800b726:	2201      	movs	r2, #1
 800b728:	4970      	ldr	r1, [pc, #448]	; (800b8ec <HAL_I2C_Master_Transmit+0x1f4>)
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f000 fc58 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d001      	beq.n	800b73a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b736:	2302      	movs	r3, #2
 800b738:	e0d3      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b740:	2b01      	cmp	r3, #1
 800b742:	d101      	bne.n	800b748 <HAL_I2C_Master_Transmit+0x50>
 800b744:	2302      	movs	r3, #2
 800b746:	e0cc      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0301 	and.w	r3, r3, #1
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d007      	beq.n	800b76e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	f042 0201 	orr.w	r2, r2, #1
 800b76c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b77c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2221      	movs	r2, #33	; 0x21
 800b782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2210      	movs	r2, #16
 800b78a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	893a      	ldrh	r2, [r7, #8]
 800b79e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7a4:	b29a      	uxth	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4a50      	ldr	r2, [pc, #320]	; (800b8f0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b7ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b7b0:	8979      	ldrh	r1, [r7, #10]
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	6a3a      	ldr	r2, [r7, #32]
 800b7b6:	68f8      	ldr	r0, [r7, #12]
 800b7b8:	f000 fac2 	bl	800bd40 <I2C_MasterRequestWrite>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e08d      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	613b      	str	r3, [r7, #16]
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	613b      	str	r3, [r7, #16]
 800b7da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b7dc:	e066      	b.n	800b8ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	6a39      	ldr	r1, [r7, #32]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f000 fcd2 	bl	800c18c <I2C_WaitOnTXEFlagUntilTimeout>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00d      	beq.n	800b80a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d107      	bne.n	800b806 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b806:	2301      	movs	r3, #1
 800b808:	e06b      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b80e:	781a      	ldrb	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b824:	b29b      	uxth	r3, r3
 800b826:	3b01      	subs	r3, #1
 800b828:	b29a      	uxth	r2, r3
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b832:	3b01      	subs	r3, #1
 800b834:	b29a      	uxth	r2, r3
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	f003 0304 	and.w	r3, r3, #4
 800b844:	2b04      	cmp	r3, #4
 800b846:	d11b      	bne.n	800b880 <HAL_I2C_Master_Transmit+0x188>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d017      	beq.n	800b880 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	781a      	ldrb	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b860:	1c5a      	adds	r2, r3, #1
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	3b01      	subs	r3, #1
 800b86e:	b29a      	uxth	r2, r3
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b878:	3b01      	subs	r3, #1
 800b87a:	b29a      	uxth	r2, r3
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b880:	697a      	ldr	r2, [r7, #20]
 800b882:	6a39      	ldr	r1, [r7, #32]
 800b884:	68f8      	ldr	r0, [r7, #12]
 800b886:	f000 fcc2 	bl	800c20e <I2C_WaitOnBTFFlagUntilTimeout>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00d      	beq.n	800b8ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b894:	2b04      	cmp	r3, #4
 800b896:	d107      	bne.n	800b8a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e01a      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d194      	bne.n	800b7de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2220      	movs	r2, #32
 800b8c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	e000      	b.n	800b8e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b8e0:	2302      	movs	r3, #2
  }
}
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	3718      	adds	r7, #24
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}
 800b8ea:	bf00      	nop
 800b8ec:	00100002 	.word	0x00100002
 800b8f0:	ffff0000 	.word	0xffff0000

0800b8f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b08c      	sub	sp, #48	; 0x30
 800b8f8:	af02      	add	r7, sp, #8
 800b8fa:	60f8      	str	r0, [r7, #12]
 800b8fc:	607a      	str	r2, [r7, #4]
 800b8fe:	461a      	mov	r2, r3
 800b900:	460b      	mov	r3, r1
 800b902:	817b      	strh	r3, [r7, #10]
 800b904:	4613      	mov	r3, r2
 800b906:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b908:	f7fe faea 	bl	8009ee0 <HAL_GetTick>
 800b90c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b914:	b2db      	uxtb	r3, r3
 800b916:	2b20      	cmp	r3, #32
 800b918:	f040 820b 	bne.w	800bd32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	9300      	str	r3, [sp, #0]
 800b920:	2319      	movs	r3, #25
 800b922:	2201      	movs	r2, #1
 800b924:	497c      	ldr	r1, [pc, #496]	; (800bb18 <HAL_I2C_Master_Receive+0x224>)
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 fb5a 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b932:	2302      	movs	r3, #2
 800b934:	e1fe      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d101      	bne.n	800b944 <HAL_I2C_Master_Receive+0x50>
 800b940:	2302      	movs	r3, #2
 800b942:	e1f7      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	2b01      	cmp	r3, #1
 800b958:	d007      	beq.n	800b96a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f042 0201 	orr.w	r2, r2, #1
 800b968:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b978:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2222      	movs	r2, #34	; 0x22
 800b97e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2210      	movs	r2, #16
 800b986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2200      	movs	r2, #0
 800b98e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	893a      	ldrh	r2, [r7, #8]
 800b99a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	4a5c      	ldr	r2, [pc, #368]	; (800bb1c <HAL_I2C_Master_Receive+0x228>)
 800b9aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b9ac:	8979      	ldrh	r1, [r7, #10]
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f000 fa46 	bl	800be44 <I2C_MasterRequestRead>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	e1b8      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d113      	bne.n	800b9f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	695b      	ldr	r3, [r3, #20]
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	699b      	ldr	r3, [r3, #24]
 800b9dc:	623b      	str	r3, [r7, #32]
 800b9de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9ee:	601a      	str	r2, [r3, #0]
 800b9f0:	e18c      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d11b      	bne.n	800ba32 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681a      	ldr	r2, [r3, #0]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	61fb      	str	r3, [r7, #28]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	695b      	ldr	r3, [r3, #20]
 800ba14:	61fb      	str	r3, [r7, #28]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	61fb      	str	r3, [r7, #28]
 800ba1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	e16c      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d11b      	bne.n	800ba72 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	61bb      	str	r3, [r7, #24]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	695b      	ldr	r3, [r3, #20]
 800ba64:	61bb      	str	r3, [r7, #24]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	699b      	ldr	r3, [r3, #24]
 800ba6c:	61bb      	str	r3, [r7, #24]
 800ba6e:	69bb      	ldr	r3, [r7, #24]
 800ba70:	e14c      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681a      	ldr	r2, [r3, #0]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ba80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba82:	2300      	movs	r3, #0
 800ba84:	617b      	str	r3, [r7, #20]
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	617b      	str	r3, [r7, #20]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	617b      	str	r3, [r7, #20]
 800ba96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800ba98:	e138      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba9e:	2b03      	cmp	r3, #3
 800baa0:	f200 80f1 	bhi.w	800bc86 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d123      	bne.n	800baf4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800baac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bab0:	68f8      	ldr	r0, [r7, #12]
 800bab2:	f000 fbed 	bl	800c290 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d001      	beq.n	800bac0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e139      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	691a      	ldr	r2, [r3, #16]
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800baca:	b2d2      	uxtb	r2, r2
 800bacc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bad2:	1c5a      	adds	r2, r3, #1
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bae8:	b29b      	uxth	r3, r3
 800baea:	3b01      	subs	r3, #1
 800baec:	b29a      	uxth	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baf2:	e10b      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d14e      	bne.n	800bb9a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	9300      	str	r3, [sp, #0]
 800bb00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb02:	2200      	movs	r2, #0
 800bb04:	4906      	ldr	r1, [pc, #24]	; (800bb20 <HAL_I2C_Master_Receive+0x22c>)
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 fa6a 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d008      	beq.n	800bb24 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	e10e      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
 800bb16:	bf00      	nop
 800bb18:	00100002 	.word	0x00100002
 800bb1c:	ffff0000 	.word	0xffff0000
 800bb20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	691a      	ldr	r2, [r3, #16]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	b2d2      	uxtb	r2, r2
 800bb40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	3b01      	subs	r3, #1
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	691a      	ldr	r2, [r3, #16]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	b2d2      	uxtb	r2, r2
 800bb72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb78:	1c5a      	adds	r2, r3, #1
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb82:	3b01      	subs	r3, #1
 800bb84:	b29a      	uxth	r2, r3
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	3b01      	subs	r3, #1
 800bb92:	b29a      	uxth	r2, r3
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb98:	e0b8      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9c:	9300      	str	r3, [sp, #0]
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	2200      	movs	r2, #0
 800bba2:	4966      	ldr	r1, [pc, #408]	; (800bd3c <HAL_I2C_Master_Receive+0x448>)
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f000 fa1b 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d001      	beq.n	800bbb4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e0bf      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691a      	ldr	r2, [r3, #16]
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbce:	b2d2      	uxtb	r2, r2
 800bbd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbe0:	3b01      	subs	r3, #1
 800bbe2:	b29a      	uxth	r2, r3
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	494f      	ldr	r1, [pc, #316]	; (800bd3c <HAL_I2C_Master_Receive+0x448>)
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f000 f9ed 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800bc06:	4603      	mov	r3, r0
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e091      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bc1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691a      	ldr	r2, [r3, #16]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2a:	b2d2      	uxtb	r2, r2
 800bc2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc3c:	3b01      	subs	r3, #1
 800bc3e:	b29a      	uxth	r2, r3
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc48:	b29b      	uxth	r3, r3
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	691a      	ldr	r2, [r3, #16]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	b2d2      	uxtb	r2, r2
 800bc5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc64:	1c5a      	adds	r2, r3, #1
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	b29a      	uxth	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bc84:	e042      	b.n	800bd0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f000 fb00 	bl	800c290 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d001      	beq.n	800bc9a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bc96:	2301      	movs	r3, #1
 800bc98:	e04c      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca4:	b2d2      	uxtb	r2, r2
 800bca6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	b29a      	uxth	r2, r3
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcc2:	b29b      	uxth	r3, r3
 800bcc4:	3b01      	subs	r3, #1
 800bcc6:	b29a      	uxth	r2, r3
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	695b      	ldr	r3, [r3, #20]
 800bcd2:	f003 0304 	and.w	r3, r3, #4
 800bcd6:	2b04      	cmp	r3, #4
 800bcd8:	d118      	bne.n	800bd0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	691a      	ldr	r2, [r3, #16]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	b2d2      	uxtb	r2, r2
 800bce6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcec:	1c5a      	adds	r2, r3, #1
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	b29a      	uxth	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	3b01      	subs	r3, #1
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f47f aec2 	bne.w	800ba9a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2220      	movs	r2, #32
 800bd1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	2200      	movs	r2, #0
 800bd22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	e000      	b.n	800bd34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bd32:	2302      	movs	r3, #2
  }
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3728      	adds	r7, #40	; 0x28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}
 800bd3c:	00010004 	.word	0x00010004

0800bd40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b088      	sub	sp, #32
 800bd44:	af02      	add	r7, sp, #8
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	607a      	str	r2, [r7, #4]
 800bd4a:	603b      	str	r3, [r7, #0]
 800bd4c:	460b      	mov	r3, r1
 800bd4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d006      	beq.n	800bd6a <I2C_MasterRequestWrite+0x2a>
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d003      	beq.n	800bd6a <I2C_MasterRequestWrite+0x2a>
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd68:	d108      	bne.n	800bd7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	e00b      	b.n	800bd94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	2b12      	cmp	r3, #18
 800bd82:	d107      	bne.n	800bd94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	f000 f91d 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d00d      	beq.n	800bdc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdba:	d103      	bne.n	800bdc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bdc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	e035      	b.n	800be34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdd0:	d108      	bne.n	800bde4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bdd2:	897b      	ldrh	r3, [r7, #10]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bde0:	611a      	str	r2, [r3, #16]
 800bde2:	e01b      	b.n	800be1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bde4:	897b      	ldrh	r3, [r7, #10]
 800bde6:	11db      	asrs	r3, r3, #7
 800bde8:	b2db      	uxtb	r3, r3
 800bdea:	f003 0306 	and.w	r3, r3, #6
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f063 030f 	orn	r3, r3, #15
 800bdf4:	b2da      	uxtb	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	490e      	ldr	r1, [pc, #56]	; (800be3c <I2C_MasterRequestWrite+0xfc>)
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f000 f943 	bl	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d001      	beq.n	800be12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e010      	b.n	800be34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	b2da      	uxtb	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	687a      	ldr	r2, [r7, #4]
 800be20:	4907      	ldr	r1, [pc, #28]	; (800be40 <I2C_MasterRequestWrite+0x100>)
 800be22:	68f8      	ldr	r0, [r7, #12]
 800be24:	f000 f933 	bl	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e000      	b.n	800be34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800be32:	2300      	movs	r3, #0
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	00010008 	.word	0x00010008
 800be40:	00010002 	.word	0x00010002

0800be44 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b088      	sub	sp, #32
 800be48:	af02      	add	r7, sp, #8
 800be4a:	60f8      	str	r0, [r7, #12]
 800be4c:	607a      	str	r2, [r7, #4]
 800be4e:	603b      	str	r3, [r7, #0]
 800be50:	460b      	mov	r3, r1
 800be52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be58:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800be68:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b08      	cmp	r3, #8
 800be6e:	d006      	beq.n	800be7e <I2C_MasterRequestRead+0x3a>
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d003      	beq.n	800be7e <I2C_MasterRequestRead+0x3a>
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800be7c:	d108      	bne.n	800be90 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681a      	ldr	r2, [r3, #0]
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	e00b      	b.n	800bea8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be94:	2b11      	cmp	r3, #17
 800be96:	d107      	bne.n	800bea8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bea6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	f000 f893 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00d      	beq.n	800bedc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bece:	d103      	bne.n	800bed8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bed6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e079      	b.n	800bfd0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bee4:	d108      	bne.n	800bef8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bee6:	897b      	ldrh	r3, [r7, #10]
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	f043 0301 	orr.w	r3, r3, #1
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	611a      	str	r2, [r3, #16]
 800bef6:	e05f      	b.n	800bfb8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bef8:	897b      	ldrh	r3, [r7, #10]
 800befa:	11db      	asrs	r3, r3, #7
 800befc:	b2db      	uxtb	r3, r3
 800befe:	f003 0306 	and.w	r3, r3, #6
 800bf02:	b2db      	uxtb	r3, r3
 800bf04:	f063 030f 	orn	r3, r3, #15
 800bf08:	b2da      	uxtb	r2, r3
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	4930      	ldr	r1, [pc, #192]	; (800bfd8 <I2C_MasterRequestRead+0x194>)
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	f000 f8b9 	bl	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d001      	beq.n	800bf26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	e054      	b.n	800bfd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bf26:	897b      	ldrh	r3, [r7, #10]
 800bf28:	b2da      	uxtb	r2, r3
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	687a      	ldr	r2, [r7, #4]
 800bf34:	4929      	ldr	r1, [pc, #164]	; (800bfdc <I2C_MasterRequestRead+0x198>)
 800bf36:	68f8      	ldr	r0, [r7, #12]
 800bf38:	f000 f8a9 	bl	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d001      	beq.n	800bf46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e044      	b.n	800bfd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf46:	2300      	movs	r3, #0
 800bf48:	613b      	str	r3, [r7, #16]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	695b      	ldr	r3, [r3, #20]
 800bf50:	613b      	str	r3, [r7, #16]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	613b      	str	r3, [r7, #16]
 800bf5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	9300      	str	r3, [sp, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f000 f831 	bl	800bfe0 <I2C_WaitOnFlagUntilTimeout>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00d      	beq.n	800bfa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf92:	d103      	bne.n	800bf9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf9a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e017      	b.n	800bfd0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bfa0:	897b      	ldrh	r3, [r7, #10]
 800bfa2:	11db      	asrs	r3, r3, #7
 800bfa4:	b2db      	uxtb	r3, r3
 800bfa6:	f003 0306 	and.w	r3, r3, #6
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	f063 030e 	orn	r3, r3, #14
 800bfb0:	b2da      	uxtb	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4907      	ldr	r1, [pc, #28]	; (800bfdc <I2C_MasterRequestRead+0x198>)
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	f000 f865 	bl	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e000      	b.n	800bfd0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3718      	adds	r7, #24
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	00010008 	.word	0x00010008
 800bfdc:	00010002 	.word	0x00010002

0800bfe0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	603b      	str	r3, [r7, #0]
 800bfec:	4613      	mov	r3, r2
 800bfee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bff0:	e025      	b.n	800c03e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d021      	beq.n	800c03e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bffa:	f7fd ff71 	bl	8009ee0 <HAL_GetTick>
 800bffe:	4602      	mov	r2, r0
 800c000:	69bb      	ldr	r3, [r7, #24]
 800c002:	1ad3      	subs	r3, r2, r3
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	429a      	cmp	r2, r3
 800c008:	d302      	bcc.n	800c010 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d116      	bne.n	800c03e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	2200      	movs	r2, #0
 800c014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2220      	movs	r2, #32
 800c01a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02a:	f043 0220 	orr.w	r2, r3, #32
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c03a:	2301      	movs	r3, #1
 800c03c:	e023      	b.n	800c086 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	0c1b      	lsrs	r3, r3, #16
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b01      	cmp	r3, #1
 800c046:	d10d      	bne.n	800c064 <I2C_WaitOnFlagUntilTimeout+0x84>
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	695b      	ldr	r3, [r3, #20]
 800c04e:	43da      	mvns	r2, r3
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	4013      	ands	r3, r2
 800c054:	b29b      	uxth	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	bf0c      	ite	eq
 800c05a:	2301      	moveq	r3, #1
 800c05c:	2300      	movne	r3, #0
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	461a      	mov	r2, r3
 800c062:	e00c      	b.n	800c07e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	699b      	ldr	r3, [r3, #24]
 800c06a:	43da      	mvns	r2, r3
 800c06c:	68bb      	ldr	r3, [r7, #8]
 800c06e:	4013      	ands	r3, r2
 800c070:	b29b      	uxth	r3, r3
 800c072:	2b00      	cmp	r3, #0
 800c074:	bf0c      	ite	eq
 800c076:	2301      	moveq	r3, #1
 800c078:	2300      	movne	r3, #0
 800c07a:	b2db      	uxtb	r3, r3
 800c07c:	461a      	mov	r2, r3
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	429a      	cmp	r2, r3
 800c082:	d0b6      	beq.n	800bff2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	60f8      	str	r0, [r7, #12]
 800c096:	60b9      	str	r1, [r7, #8]
 800c098:	607a      	str	r2, [r7, #4]
 800c09a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c09c:	e051      	b.n	800c142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	695b      	ldr	r3, [r3, #20]
 800c0a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ac:	d123      	bne.n	800c0f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e2:	f043 0204 	orr.w	r2, r3, #4
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	e046      	b.n	800c184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fc:	d021      	beq.n	800c142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0fe:	f7fd feef 	bl	8009ee0 <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d302      	bcc.n	800c114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d116      	bne.n	800c142 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	2200      	movs	r2, #0
 800c118:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2200      	movs	r2, #0
 800c126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	f043 0220 	orr.w	r2, r3, #32
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2200      	movs	r2, #0
 800c13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c13e:	2301      	movs	r3, #1
 800c140:	e020      	b.n	800c184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	0c1b      	lsrs	r3, r3, #16
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d10c      	bne.n	800c166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	43da      	mvns	r2, r3
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	4013      	ands	r3, r2
 800c158:	b29b      	uxth	r3, r3
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bf14      	ite	ne
 800c15e:	2301      	movne	r3, #1
 800c160:	2300      	moveq	r3, #0
 800c162:	b2db      	uxtb	r3, r3
 800c164:	e00b      	b.n	800c17e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	699b      	ldr	r3, [r3, #24]
 800c16c:	43da      	mvns	r2, r3
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	4013      	ands	r3, r2
 800c172:	b29b      	uxth	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	bf14      	ite	ne
 800c178:	2301      	movne	r3, #1
 800c17a:	2300      	moveq	r3, #0
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d18d      	bne.n	800c09e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c182:	2300      	movs	r3, #0
}
 800c184:	4618      	mov	r0, r3
 800c186:	3710      	adds	r7, #16
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}

0800c18c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	60f8      	str	r0, [r7, #12]
 800c194:	60b9      	str	r1, [r7, #8]
 800c196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c198:	e02d      	b.n	800c1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c19a:	68f8      	ldr	r0, [r7, #12]
 800c19c:	f000 f8ce 	bl	800c33c <I2C_IsAcknowledgeFailed>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d001      	beq.n	800c1aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	e02d      	b.n	800c206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b0:	d021      	beq.n	800c1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1b2:	f7fd fe95 	bl	8009ee0 <HAL_GetTick>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d302      	bcc.n	800c1c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d116      	bne.n	800c1f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2220      	movs	r2, #32
 800c1d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e2:	f043 0220 	orr.w	r2, r3, #32
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e007      	b.n	800c206 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	695b      	ldr	r3, [r3, #20]
 800c1fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c200:	2b80      	cmp	r3, #128	; 0x80
 800c202:	d1ca      	bne.n	800c19a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b084      	sub	sp, #16
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	60b9      	str	r1, [r7, #8]
 800c218:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c21a:	e02d      	b.n	800c278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f000 f88d 	bl	800c33c <I2C_IsAcknowledgeFailed>
 800c222:	4603      	mov	r3, r0
 800c224:	2b00      	cmp	r3, #0
 800c226:	d001      	beq.n	800c22c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c228:	2301      	movs	r3, #1
 800c22a:	e02d      	b.n	800c288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c232:	d021      	beq.n	800c278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c234:	f7fd fe54 	bl	8009ee0 <HAL_GetTick>
 800c238:	4602      	mov	r2, r0
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	429a      	cmp	r2, r3
 800c242:	d302      	bcc.n	800c24a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d116      	bne.n	800c278 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2220      	movs	r2, #32
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c264:	f043 0220 	orr.w	r2, r3, #32
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e007      	b.n	800c288 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b04      	cmp	r3, #4
 800c284:	d1ca      	bne.n	800c21c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c29c:	e042      	b.n	800c324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	f003 0310 	and.w	r3, r3, #16
 800c2a8:	2b10      	cmp	r3, #16
 800c2aa:	d119      	bne.n	800c2e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f06f 0210 	mvn.w	r2, #16
 800c2b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2220      	movs	r2, #32
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	e029      	b.n	800c334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2e0:	f7fd fdfe 	bl	8009ee0 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d302      	bcc.n	800c2f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d116      	bne.n	800c324 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2220      	movs	r2, #32
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c310:	f043 0220 	orr.w	r2, r3, #32
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	e007      	b.n	800c334 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c32e:	2b40      	cmp	r3, #64	; 0x40
 800c330:	d1b5      	bne.n	800c29e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b083      	sub	sp, #12
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	695b      	ldr	r3, [r3, #20]
 800c34a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c34e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c352:	d11b      	bne.n	800c38c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c35c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c378:	f043 0204 	orr.w	r2, r3, #4
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	e000      	b.n	800c38e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	370c      	adds	r7, #12
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
	...

0800c39c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b082      	sub	sp, #8
 800c3a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	603b      	str	r3, [r7, #0]
 800c3aa:	4b20      	ldr	r3, [pc, #128]	; (800c42c <HAL_PWREx_EnableOverDrive+0x90>)
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ae:	4a1f      	ldr	r2, [pc, #124]	; (800c42c <HAL_PWREx_EnableOverDrive+0x90>)
 800c3b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3b4:	6413      	str	r3, [r2, #64]	; 0x40
 800c3b6:	4b1d      	ldr	r3, [pc, #116]	; (800c42c <HAL_PWREx_EnableOverDrive+0x90>)
 800c3b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3be:	603b      	str	r3, [r7, #0]
 800c3c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c3c2:	4b1b      	ldr	r3, [pc, #108]	; (800c430 <HAL_PWREx_EnableOverDrive+0x94>)
 800c3c4:	2201      	movs	r2, #1
 800c3c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3c8:	f7fd fd8a 	bl	8009ee0 <HAL_GetTick>
 800c3cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3ce:	e009      	b.n	800c3e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c3d0:	f7fd fd86 	bl	8009ee0 <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c3de:	d901      	bls.n	800c3e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e01f      	b.n	800c424 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c3e4:	4b13      	ldr	r3, [pc, #76]	; (800c434 <HAL_PWREx_EnableOverDrive+0x98>)
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3f0:	d1ee      	bne.n	800c3d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c3f2:	4b11      	ldr	r3, [pc, #68]	; (800c438 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3f8:	f7fd fd72 	bl	8009ee0 <HAL_GetTick>
 800c3fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c3fe:	e009      	b.n	800c414 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c400:	f7fd fd6e 	bl	8009ee0 <HAL_GetTick>
 800c404:	4602      	mov	r2, r0
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	1ad3      	subs	r3, r2, r3
 800c40a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c40e:	d901      	bls.n	800c414 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c410:	2303      	movs	r3, #3
 800c412:	e007      	b.n	800c424 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c414:	4b07      	ldr	r3, [pc, #28]	; (800c434 <HAL_PWREx_EnableOverDrive+0x98>)
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c41c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c420:	d1ee      	bne.n	800c400 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3708      	adds	r7, #8
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	40023800 	.word	0x40023800
 800c430:	420e0040 	.word	0x420e0040
 800c434:	40007000 	.word	0x40007000
 800c438:	420e0044 	.word	0x420e0044

0800c43c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	e0cc      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c450:	4b68      	ldr	r3, [pc, #416]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 030f 	and.w	r3, r3, #15
 800c458:	683a      	ldr	r2, [r7, #0]
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d90c      	bls.n	800c478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c45e:	4b65      	ldr	r3, [pc, #404]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c466:	4b63      	ldr	r3, [pc, #396]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	683a      	ldr	r2, [r7, #0]
 800c470:	429a      	cmp	r2, r3
 800c472:	d001      	beq.n	800c478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e0b8      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	f003 0302 	and.w	r3, r3, #2
 800c480:	2b00      	cmp	r3, #0
 800c482:	d020      	beq.n	800c4c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f003 0304 	and.w	r3, r3, #4
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d005      	beq.n	800c49c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c490:	4b59      	ldr	r3, [pc, #356]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c492:	689b      	ldr	r3, [r3, #8]
 800c494:	4a58      	ldr	r2, [pc, #352]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c496:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c49a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f003 0308 	and.w	r3, r3, #8
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d005      	beq.n	800c4b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4a8:	4b53      	ldr	r3, [pc, #332]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	4a52      	ldr	r2, [pc, #328]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c4b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4b4:	4b50      	ldr	r3, [pc, #320]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	494d      	ldr	r1, [pc, #308]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d044      	beq.n	800c55c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	685b      	ldr	r3, [r3, #4]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d107      	bne.n	800c4ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c4da:	4b47      	ldr	r3, [pc, #284]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d119      	bne.n	800c51a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e07f      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	2b02      	cmp	r3, #2
 800c4f0:	d003      	beq.n	800c4fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d107      	bne.n	800c50a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c4fa:	4b3f      	ldr	r3, [pc, #252]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c502:	2b00      	cmp	r3, #0
 800c504:	d109      	bne.n	800c51a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e06f      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c50a:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0302 	and.w	r3, r3, #2
 800c512:	2b00      	cmp	r3, #0
 800c514:	d101      	bne.n	800c51a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	e067      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c51a:	4b37      	ldr	r3, [pc, #220]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c51c:	689b      	ldr	r3, [r3, #8]
 800c51e:	f023 0203 	bic.w	r2, r3, #3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	4934      	ldr	r1, [pc, #208]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c52c:	f7fd fcd8 	bl	8009ee0 <HAL_GetTick>
 800c530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c532:	e00a      	b.n	800c54a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c534:	f7fd fcd4 	bl	8009ee0 <HAL_GetTick>
 800c538:	4602      	mov	r2, r0
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c542:	4293      	cmp	r3, r2
 800c544:	d901      	bls.n	800c54a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e04f      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c54a:	4b2b      	ldr	r3, [pc, #172]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c54c:	689b      	ldr	r3, [r3, #8]
 800c54e:	f003 020c 	and.w	r2, r3, #12
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	429a      	cmp	r2, r3
 800c55a:	d1eb      	bne.n	800c534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c55c:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 030f 	and.w	r3, r3, #15
 800c564:	683a      	ldr	r2, [r7, #0]
 800c566:	429a      	cmp	r2, r3
 800c568:	d20c      	bcs.n	800c584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c56a:	4b22      	ldr	r3, [pc, #136]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	b2d2      	uxtb	r2, r2
 800c570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c572:	4b20      	ldr	r3, [pc, #128]	; (800c5f4 <HAL_RCC_ClockConfig+0x1b8>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f003 030f 	and.w	r3, r3, #15
 800c57a:	683a      	ldr	r2, [r7, #0]
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d001      	beq.n	800c584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e032      	b.n	800c5ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f003 0304 	and.w	r3, r3, #4
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d008      	beq.n	800c5a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c590:	4b19      	ldr	r3, [pc, #100]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	4916      	ldr	r1, [pc, #88]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 0308 	and.w	r3, r3, #8
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d009      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5ae:	4b12      	ldr	r3, [pc, #72]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	00db      	lsls	r3, r3, #3
 800c5bc:	490e      	ldr	r1, [pc, #56]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c5c2:	f000 f821 	bl	800c608 <HAL_RCC_GetSysClockFreq>
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	4b0b      	ldr	r3, [pc, #44]	; (800c5f8 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ca:	689b      	ldr	r3, [r3, #8]
 800c5cc:	091b      	lsrs	r3, r3, #4
 800c5ce:	f003 030f 	and.w	r3, r3, #15
 800c5d2:	4a0a      	ldr	r2, [pc, #40]	; (800c5fc <HAL_RCC_ClockConfig+0x1c0>)
 800c5d4:	5cd3      	ldrb	r3, [r2, r3]
 800c5d6:	fa21 f303 	lsr.w	r3, r1, r3
 800c5da:	4a09      	ldr	r2, [pc, #36]	; (800c600 <HAL_RCC_ClockConfig+0x1c4>)
 800c5dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c5de:	4b09      	ldr	r3, [pc, #36]	; (800c604 <HAL_RCC_ClockConfig+0x1c8>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7fd fc38 	bl	8009e58 <HAL_InitTick>

  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	40023c00 	.word	0x40023c00
 800c5f8:	40023800 	.word	0x40023800
 800c5fc:	08019170 	.word	0x08019170
 800c600:	20000000 	.word	0x20000000
 800c604:	20000004 	.word	0x20000004

0800c608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c60e:	2300      	movs	r3, #0
 800c610:	607b      	str	r3, [r7, #4]
 800c612:	2300      	movs	r3, #0
 800c614:	60fb      	str	r3, [r7, #12]
 800c616:	2300      	movs	r3, #0
 800c618:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c61a:	2300      	movs	r3, #0
 800c61c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c61e:	4b63      	ldr	r3, [pc, #396]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c620:	689b      	ldr	r3, [r3, #8]
 800c622:	f003 030c 	and.w	r3, r3, #12
 800c626:	2b04      	cmp	r3, #4
 800c628:	d007      	beq.n	800c63a <HAL_RCC_GetSysClockFreq+0x32>
 800c62a:	2b08      	cmp	r3, #8
 800c62c:	d008      	beq.n	800c640 <HAL_RCC_GetSysClockFreq+0x38>
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f040 80b4 	bne.w	800c79c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c634:	4b5e      	ldr	r3, [pc, #376]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c636:	60bb      	str	r3, [r7, #8]
       break;
 800c638:	e0b3      	b.n	800c7a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c63a:	4b5d      	ldr	r3, [pc, #372]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c63c:	60bb      	str	r3, [r7, #8]
      break;
 800c63e:	e0b0      	b.n	800c7a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c640:	4b5a      	ldr	r3, [pc, #360]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c648:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c64a:	4b58      	ldr	r3, [pc, #352]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d04a      	beq.n	800c6ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c656:	4b55      	ldr	r3, [pc, #340]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	099b      	lsrs	r3, r3, #6
 800c65c:	f04f 0400 	mov.w	r4, #0
 800c660:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	ea03 0501 	and.w	r5, r3, r1
 800c66c:	ea04 0602 	and.w	r6, r4, r2
 800c670:	4629      	mov	r1, r5
 800c672:	4632      	mov	r2, r6
 800c674:	f04f 0300 	mov.w	r3, #0
 800c678:	f04f 0400 	mov.w	r4, #0
 800c67c:	0154      	lsls	r4, r2, #5
 800c67e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c682:	014b      	lsls	r3, r1, #5
 800c684:	4619      	mov	r1, r3
 800c686:	4622      	mov	r2, r4
 800c688:	1b49      	subs	r1, r1, r5
 800c68a:	eb62 0206 	sbc.w	r2, r2, r6
 800c68e:	f04f 0300 	mov.w	r3, #0
 800c692:	f04f 0400 	mov.w	r4, #0
 800c696:	0194      	lsls	r4, r2, #6
 800c698:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c69c:	018b      	lsls	r3, r1, #6
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	eb64 0402 	sbc.w	r4, r4, r2
 800c6a4:	f04f 0100 	mov.w	r1, #0
 800c6a8:	f04f 0200 	mov.w	r2, #0
 800c6ac:	00e2      	lsls	r2, r4, #3
 800c6ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c6b2:	00d9      	lsls	r1, r3, #3
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4614      	mov	r4, r2
 800c6b8:	195b      	adds	r3, r3, r5
 800c6ba:	eb44 0406 	adc.w	r4, r4, r6
 800c6be:	f04f 0100 	mov.w	r1, #0
 800c6c2:	f04f 0200 	mov.w	r2, #0
 800c6c6:	02a2      	lsls	r2, r4, #10
 800c6c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c6cc:	0299      	lsls	r1, r3, #10
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4614      	mov	r4, r2
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f04f 0400 	mov.w	r4, #0
 800c6dc:	461a      	mov	r2, r3
 800c6de:	4623      	mov	r3, r4
 800c6e0:	f7f4 faea 	bl	8000cb8 <__aeabi_uldivmod>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	60fb      	str	r3, [r7, #12]
 800c6ea:	e049      	b.n	800c780 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c6ec:	4b2f      	ldr	r3, [pc, #188]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	099b      	lsrs	r3, r3, #6
 800c6f2:	f04f 0400 	mov.w	r4, #0
 800c6f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c6fa:	f04f 0200 	mov.w	r2, #0
 800c6fe:	ea03 0501 	and.w	r5, r3, r1
 800c702:	ea04 0602 	and.w	r6, r4, r2
 800c706:	4629      	mov	r1, r5
 800c708:	4632      	mov	r2, r6
 800c70a:	f04f 0300 	mov.w	r3, #0
 800c70e:	f04f 0400 	mov.w	r4, #0
 800c712:	0154      	lsls	r4, r2, #5
 800c714:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c718:	014b      	lsls	r3, r1, #5
 800c71a:	4619      	mov	r1, r3
 800c71c:	4622      	mov	r2, r4
 800c71e:	1b49      	subs	r1, r1, r5
 800c720:	eb62 0206 	sbc.w	r2, r2, r6
 800c724:	f04f 0300 	mov.w	r3, #0
 800c728:	f04f 0400 	mov.w	r4, #0
 800c72c:	0194      	lsls	r4, r2, #6
 800c72e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c732:	018b      	lsls	r3, r1, #6
 800c734:	1a5b      	subs	r3, r3, r1
 800c736:	eb64 0402 	sbc.w	r4, r4, r2
 800c73a:	f04f 0100 	mov.w	r1, #0
 800c73e:	f04f 0200 	mov.w	r2, #0
 800c742:	00e2      	lsls	r2, r4, #3
 800c744:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c748:	00d9      	lsls	r1, r3, #3
 800c74a:	460b      	mov	r3, r1
 800c74c:	4614      	mov	r4, r2
 800c74e:	195b      	adds	r3, r3, r5
 800c750:	eb44 0406 	adc.w	r4, r4, r6
 800c754:	f04f 0100 	mov.w	r1, #0
 800c758:	f04f 0200 	mov.w	r2, #0
 800c75c:	02a2      	lsls	r2, r4, #10
 800c75e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c762:	0299      	lsls	r1, r3, #10
 800c764:	460b      	mov	r3, r1
 800c766:	4614      	mov	r4, r2
 800c768:	4618      	mov	r0, r3
 800c76a:	4621      	mov	r1, r4
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f04f 0400 	mov.w	r4, #0
 800c772:	461a      	mov	r2, r3
 800c774:	4623      	mov	r3, r4
 800c776:	f7f4 fa9f 	bl	8000cb8 <__aeabi_uldivmod>
 800c77a:	4603      	mov	r3, r0
 800c77c:	460c      	mov	r4, r1
 800c77e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c780:	4b0a      	ldr	r3, [pc, #40]	; (800c7ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	0c1b      	lsrs	r3, r3, #16
 800c786:	f003 0303 	and.w	r3, r3, #3
 800c78a:	3301      	adds	r3, #1
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	fbb2 f3f3 	udiv	r3, r2, r3
 800c798:	60bb      	str	r3, [r7, #8]
      break;
 800c79a:	e002      	b.n	800c7a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c79e:	60bb      	str	r3, [r7, #8]
      break;
 800c7a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c7a2:	68bb      	ldr	r3, [r7, #8]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ac:	40023800 	.word	0x40023800
 800c7b0:	00f42400 	.word	0x00f42400

0800c7b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c7b8:	4b03      	ldr	r3, [pc, #12]	; (800c7c8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	20000000 	.word	0x20000000

0800c7cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c7d0:	f7ff fff0 	bl	800c7b4 <HAL_RCC_GetHCLKFreq>
 800c7d4:	4601      	mov	r1, r0
 800c7d6:	4b05      	ldr	r3, [pc, #20]	; (800c7ec <HAL_RCC_GetPCLK1Freq+0x20>)
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	0a9b      	lsrs	r3, r3, #10
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	4a03      	ldr	r2, [pc, #12]	; (800c7f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c7e2:	5cd3      	ldrb	r3, [r2, r3]
 800c7e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	40023800 	.word	0x40023800
 800c7f0:	08019180 	.word	0x08019180

0800c7f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c7f8:	f7ff ffdc 	bl	800c7b4 <HAL_RCC_GetHCLKFreq>
 800c7fc:	4601      	mov	r1, r0
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c800:	689b      	ldr	r3, [r3, #8]
 800c802:	0b5b      	lsrs	r3, r3, #13
 800c804:	f003 0307 	and.w	r3, r3, #7
 800c808:	4a03      	ldr	r2, [pc, #12]	; (800c818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c80a:	5cd3      	ldrb	r3, [r2, r3]
 800c80c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c810:	4618      	mov	r0, r3
 800c812:	bd80      	pop	{r7, pc}
 800c814:	40023800 	.word	0x40023800
 800c818:	08019180 	.word	0x08019180

0800c81c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c824:	2300      	movs	r3, #0
 800c826:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c828:	2300      	movs	r3, #0
 800c82a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c830:	2300      	movs	r3, #0
 800c832:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c834:	2300      	movs	r3, #0
 800c836:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c840:	2b00      	cmp	r3, #0
 800c842:	d00a      	beq.n	800c85a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c844:	4b66      	ldr	r3, [pc, #408]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c84a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c852:	4963      	ldr	r1, [pc, #396]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c854:	4313      	orrs	r3, r2
 800c856:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00a      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c866:	4b5e      	ldr	r3, [pc, #376]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c86c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c874:	495a      	ldr	r1, [pc, #360]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c876:	4313      	orrs	r3, r2
 800c878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f003 0301 	and.w	r3, r3, #1
 800c884:	2b00      	cmp	r3, #0
 800c886:	d10b      	bne.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c890:	2b00      	cmp	r3, #0
 800c892:	d105      	bne.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d075      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c8a0:	4b50      	ldr	r3, [pc, #320]	; (800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8a6:	f7fd fb1b 	bl	8009ee0 <HAL_GetTick>
 800c8aa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8ac:	e008      	b.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c8ae:	f7fd fb17 	bl	8009ee0 <HAL_GetTick>
 800c8b2:	4602      	mov	r2, r0
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	1ad3      	subs	r3, r2, r3
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e1dc      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c8c0:	4b47      	ldr	r3, [pc, #284]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1f0      	bne.n	800c8ae <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d009      	beq.n	800c8ec <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	019a      	lsls	r2, r3, #6
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	071b      	lsls	r3, r3, #28
 800c8e4:	493e      	ldr	r1, [pc, #248]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0302 	and.w	r3, r3, #2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d01f      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8f8:	4b39      	ldr	r3, [pc, #228]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c8fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c8fe:	0f1b      	lsrs	r3, r3, #28
 800c900:	f003 0307 	and.w	r3, r3, #7
 800c904:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	685b      	ldr	r3, [r3, #4]
 800c90a:	019a      	lsls	r2, r3, #6
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	061b      	lsls	r3, r3, #24
 800c912:	431a      	orrs	r2, r3
 800c914:	69bb      	ldr	r3, [r7, #24]
 800c916:	071b      	lsls	r3, r3, #28
 800c918:	4931      	ldr	r1, [pc, #196]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c91a:	4313      	orrs	r3, r2
 800c91c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c920:	4b2f      	ldr	r3, [pc, #188]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c926:	f023 021f 	bic.w	r2, r3, #31
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6a1b      	ldr	r3, [r3, #32]
 800c92e:	3b01      	subs	r3, #1
 800c930:	492b      	ldr	r1, [pc, #172]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c932:	4313      	orrs	r3, r2
 800c934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c940:	2b00      	cmp	r3, #0
 800c942:	d00d      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	019a      	lsls	r2, r3, #6
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	061b      	lsls	r3, r3, #24
 800c950:	431a      	orrs	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	071b      	lsls	r3, r3, #28
 800c958:	4921      	ldr	r1, [pc, #132]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c95a:	4313      	orrs	r3, r2
 800c95c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c960:	4b20      	ldr	r3, [pc, #128]	; (800c9e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c962:	2201      	movs	r2, #1
 800c964:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c966:	f7fd fabb 	bl	8009ee0 <HAL_GetTick>
 800c96a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c96c:	e008      	b.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c96e:	f7fd fab7 	bl	8009ee0 <HAL_GetTick>
 800c972:	4602      	mov	r2, r0
 800c974:	69fb      	ldr	r3, [r7, #28]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d901      	bls.n	800c980 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c97c:	2303      	movs	r3, #3
 800c97e:	e17c      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c980:	4b17      	ldr	r3, [pc, #92]	; (800c9e0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0f0      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	f003 0304 	and.w	r3, r3, #4
 800c994:	2b00      	cmp	r3, #0
 800c996:	d112      	bne.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10c      	bne.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80ce 	beq.w	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c9b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ba:	f040 80c8 	bne.w	800cb4e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c9be:	4b0a      	ldr	r3, [pc, #40]	; (800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c9c4:	f7fd fa8c 	bl	8009ee0 <HAL_GetTick>
 800c9c8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9ca:	e00f      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c9cc:	f7fd fa88 	bl	8009ee0 <HAL_GetTick>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	1ad3      	subs	r3, r2, r3
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d908      	bls.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c9da:	2303      	movs	r3, #3
 800c9dc:	e14d      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c9de:	bf00      	nop
 800c9e0:	40023800 	.word	0x40023800
 800c9e4:	42470068 	.word	0x42470068
 800c9e8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c9ec:	4ba5      	ldr	r3, [pc, #660]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9f8:	d0e8      	beq.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0304 	and.w	r3, r3, #4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d02e      	beq.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca06:	4b9f      	ldr	r3, [pc, #636]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca0c:	0c1b      	lsrs	r3, r3, #16
 800ca0e:	f003 0303 	and.w	r3, r3, #3
 800ca12:	3301      	adds	r3, #1
 800ca14:	005b      	lsls	r3, r3, #1
 800ca16:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ca18:	4b9a      	ldr	r3, [pc, #616]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca1e:	0f1b      	lsrs	r3, r3, #28
 800ca20:	f003 0307 	and.w	r3, r3, #7
 800ca24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691b      	ldr	r3, [r3, #16]
 800ca2a:	019a      	lsls	r2, r3, #6
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	085b      	lsrs	r3, r3, #1
 800ca30:	3b01      	subs	r3, #1
 800ca32:	041b      	lsls	r3, r3, #16
 800ca34:	431a      	orrs	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	061b      	lsls	r3, r3, #24
 800ca3c:	431a      	orrs	r2, r3
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	071b      	lsls	r3, r3, #28
 800ca42:	4990      	ldr	r1, [pc, #576]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca44:	4313      	orrs	r3, r2
 800ca46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ca4a:	4b8e      	ldr	r3, [pc, #568]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca50:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	021b      	lsls	r3, r3, #8
 800ca5c:	4989      	ldr	r1, [pc, #548]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0308 	and.w	r3, r3, #8
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d02c      	beq.n	800caca <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ca70:	4b84      	ldr	r3, [pc, #528]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca76:	0c1b      	lsrs	r3, r3, #16
 800ca78:	f003 0303 	and.w	r3, r3, #3
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	005b      	lsls	r3, r3, #1
 800ca80:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ca82:	4b80      	ldr	r3, [pc, #512]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca88:	0e1b      	lsrs	r3, r3, #24
 800ca8a:	f003 030f 	and.w	r3, r3, #15
 800ca8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	691b      	ldr	r3, [r3, #16]
 800ca94:	019a      	lsls	r2, r3, #6
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	085b      	lsrs	r3, r3, #1
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	041b      	lsls	r3, r3, #16
 800ca9e:	431a      	orrs	r2, r3
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	061b      	lsls	r3, r3, #24
 800caa4:	431a      	orrs	r2, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	071b      	lsls	r3, r3, #28
 800caac:	4975      	ldr	r1, [pc, #468]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caae:	4313      	orrs	r3, r2
 800cab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800cab4:	4b73      	ldr	r3, [pc, #460]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cac2:	4970      	ldr	r1, [pc, #448]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d024      	beq.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800cada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cade:	d11f      	bne.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cae0:	4b68      	ldr	r3, [pc, #416]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cae6:	0e1b      	lsrs	r3, r3, #24
 800cae8:	f003 030f 	and.w	r3, r3, #15
 800caec:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800caee:	4b65      	ldr	r3, [pc, #404]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caf4:	0f1b      	lsrs	r3, r3, #28
 800caf6:	f003 0307 	and.w	r3, r3, #7
 800cafa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	019a      	lsls	r2, r3, #6
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	085b      	lsrs	r3, r3, #1
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	041b      	lsls	r3, r3, #16
 800cb0c:	431a      	orrs	r2, r3
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	061b      	lsls	r3, r3, #24
 800cb12:	431a      	orrs	r2, r3
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	071b      	lsls	r3, r3, #28
 800cb18:	495a      	ldr	r1, [pc, #360]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800cb20:	4b59      	ldr	r3, [pc, #356]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800cb22:	2201      	movs	r2, #1
 800cb24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb26:	f7fd f9db 	bl	8009ee0 <HAL_GetTick>
 800cb2a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb2c:	e008      	b.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800cb2e:	f7fd f9d7 	bl	8009ee0 <HAL_GetTick>
 800cb32:	4602      	mov	r2, r0
 800cb34:	69fb      	ldr	r3, [r7, #28]
 800cb36:	1ad3      	subs	r3, r2, r3
 800cb38:	2b02      	cmp	r3, #2
 800cb3a:	d901      	bls.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cb3c:	2303      	movs	r3, #3
 800cb3e:	e09c      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800cb40:	4b50      	ldr	r3, [pc, #320]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb4c:	d1ef      	bne.n	800cb2e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 0320 	and.w	r3, r3, #32
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 8083 	beq.w	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	60bb      	str	r3, [r7, #8]
 800cb60:	4b48      	ldr	r3, [pc, #288]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb64:	4a47      	ldr	r2, [pc, #284]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cb6a:	6413      	str	r3, [r2, #64]	; 0x40
 800cb6c:	4b45      	ldr	r3, [pc, #276]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb74:	60bb      	str	r3, [r7, #8]
 800cb76:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cb78:	4b44      	ldr	r3, [pc, #272]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	4a43      	ldr	r2, [pc, #268]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cb7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cb82:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb84:	f7fd f9ac 	bl	8009ee0 <HAL_GetTick>
 800cb88:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb8a:	e008      	b.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cb8c:	f7fd f9a8 	bl	8009ee0 <HAL_GetTick>
 800cb90:	4602      	mov	r2, r0
 800cb92:	69fb      	ldr	r3, [r7, #28]
 800cb94:	1ad3      	subs	r3, r2, r3
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d901      	bls.n	800cb9e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800cb9a:	2303      	movs	r3, #3
 800cb9c:	e06d      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cb9e:	4b3b      	ldr	r3, [pc, #236]	; (800cc8c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0f0      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cbaa:	4b36      	ldr	r3, [pc, #216]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbb2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cbb4:	69bb      	ldr	r3, [r7, #24]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d02f      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cbc2:	69ba      	ldr	r2, [r7, #24]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d028      	beq.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cbc8:	4b2e      	ldr	r3, [pc, #184]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbd0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cbd2:	4b2f      	ldr	r3, [pc, #188]	; (800cc90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cbd8:	4b2d      	ldr	r3, [pc, #180]	; (800cc90 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cbde:	4a29      	ldr	r2, [pc, #164]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cbe4:	4b27      	ldr	r3, [pc, #156]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cbe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	d114      	bne.n	800cc1a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cbf0:	f7fd f976 	bl	8009ee0 <HAL_GetTick>
 800cbf4:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cbf6:	e00a      	b.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cbf8:	f7fd f972 	bl	8009ee0 <HAL_GetTick>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	69fb      	ldr	r3, [r7, #28]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d901      	bls.n	800cc0e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cc0a:	2303      	movs	r3, #3
 800cc0c:	e035      	b.n	800cc7a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc0e:	4b1d      	ldr	r3, [pc, #116]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc12:	f003 0302 	and.w	r3, r3, #2
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0ee      	beq.n	800cbf8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cc26:	d10d      	bne.n	800cc44 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cc28:	4b16      	ldr	r3, [pc, #88]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cc38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc3c:	4911      	ldr	r1, [pc, #68]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	608b      	str	r3, [r1, #8]
 800cc42:	e005      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cc44:	4b0f      	ldr	r3, [pc, #60]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc46:	689b      	ldr	r3, [r3, #8]
 800cc48:	4a0e      	ldr	r2, [pc, #56]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cc4e:	6093      	str	r3, [r2, #8]
 800cc50:	4b0c      	ldr	r3, [pc, #48]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cc5c:	4909      	ldr	r1, [pc, #36]	; (800cc84 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f003 0310 	and.w	r3, r3, #16
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cc74:	4b07      	ldr	r3, [pc, #28]	; (800cc94 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cc76:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3720      	adds	r7, #32
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	40023800 	.word	0x40023800
 800cc88:	42470070 	.word	0x42470070
 800cc8c:	40007000 	.word	0x40007000
 800cc90:	42470e40 	.word	0x42470e40
 800cc94:	424711e0 	.word	0x424711e0

0800cc98 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cca0:	2300      	movs	r3, #0
 800cca2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	f003 0301 	and.w	r3, r3, #1
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d075      	beq.n	800cd9c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ccb0:	4ba2      	ldr	r3, [pc, #648]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f003 030c 	and.w	r3, r3, #12
 800ccb8:	2b04      	cmp	r3, #4
 800ccba:	d00c      	beq.n	800ccd6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccbc:	4b9f      	ldr	r3, [pc, #636]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ccc4:	2b08      	cmp	r3, #8
 800ccc6:	d112      	bne.n	800ccee <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ccc8:	4b9c      	ldr	r3, [pc, #624]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ccd4:	d10b      	bne.n	800ccee <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccd6:	4b99      	ldr	r3, [pc, #612]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d05b      	beq.n	800cd9a <HAL_RCC_OscConfig+0x102>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d157      	bne.n	800cd9a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ccea:	2301      	movs	r3, #1
 800ccec:	e20b      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccf6:	d106      	bne.n	800cd06 <HAL_RCC_OscConfig+0x6e>
 800ccf8:	4b90      	ldr	r3, [pc, #576]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	4a8f      	ldr	r2, [pc, #572]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ccfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	e01d      	b.n	800cd42 <HAL_RCC_OscConfig+0xaa>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685b      	ldr	r3, [r3, #4]
 800cd0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cd0e:	d10c      	bne.n	800cd2a <HAL_RCC_OscConfig+0x92>
 800cd10:	4b8a      	ldr	r3, [pc, #552]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	4a89      	ldr	r2, [pc, #548]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd1a:	6013      	str	r3, [r2, #0]
 800cd1c:	4b87      	ldr	r3, [pc, #540]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a86      	ldr	r2, [pc, #536]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd26:	6013      	str	r3, [r2, #0]
 800cd28:	e00b      	b.n	800cd42 <HAL_RCC_OscConfig+0xaa>
 800cd2a:	4b84      	ldr	r3, [pc, #528]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a83      	ldr	r2, [pc, #524]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	4b81      	ldr	r3, [pc, #516]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a80      	ldr	r2, [pc, #512]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cd40:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d013      	beq.n	800cd72 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd4a:	f7fd f8c9 	bl	8009ee0 <HAL_GetTick>
 800cd4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd50:	e008      	b.n	800cd64 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd52:	f7fd f8c5 	bl	8009ee0 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	2b64      	cmp	r3, #100	; 0x64
 800cd5e:	d901      	bls.n	800cd64 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cd60:	2303      	movs	r3, #3
 800cd62:	e1d0      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cd64:	4b75      	ldr	r3, [pc, #468]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d0f0      	beq.n	800cd52 <HAL_RCC_OscConfig+0xba>
 800cd70:	e014      	b.n	800cd9c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd72:	f7fd f8b5 	bl	8009ee0 <HAL_GetTick>
 800cd76:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd78:	e008      	b.n	800cd8c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cd7a:	f7fd f8b1 	bl	8009ee0 <HAL_GetTick>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	1ad3      	subs	r3, r2, r3
 800cd84:	2b64      	cmp	r3, #100	; 0x64
 800cd86:	d901      	bls.n	800cd8c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cd88:	2303      	movs	r3, #3
 800cd8a:	e1bc      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd8c:	4b6b      	ldr	r3, [pc, #428]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1f0      	bne.n	800cd7a <HAL_RCC_OscConfig+0xe2>
 800cd98:	e000      	b.n	800cd9c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f003 0302 	and.w	r3, r3, #2
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d063      	beq.n	800ce70 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cda8:	4b64      	ldr	r3, [pc, #400]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	f003 030c 	and.w	r3, r3, #12
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d00b      	beq.n	800cdcc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdb4:	4b61      	ldr	r3, [pc, #388]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cdbc:	2b08      	cmp	r3, #8
 800cdbe:	d11c      	bne.n	800cdfa <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cdc0:	4b5e      	ldr	r3, [pc, #376]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d116      	bne.n	800cdfa <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdcc:	4b5b      	ldr	r3, [pc, #364]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f003 0302 	and.w	r3, r3, #2
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d005      	beq.n	800cde4 <HAL_RCC_OscConfig+0x14c>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68db      	ldr	r3, [r3, #12]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d001      	beq.n	800cde4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e190      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cde4:	4b55      	ldr	r3, [pc, #340]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	00db      	lsls	r3, r3, #3
 800cdf2:	4952      	ldr	r1, [pc, #328]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cdf4:	4313      	orrs	r3, r2
 800cdf6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cdf8:	e03a      	b.n	800ce70 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d020      	beq.n	800ce44 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce02:	4b4f      	ldr	r3, [pc, #316]	; (800cf40 <HAL_RCC_OscConfig+0x2a8>)
 800ce04:	2201      	movs	r2, #1
 800ce06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce08:	f7fd f86a 	bl	8009ee0 <HAL_GetTick>
 800ce0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce0e:	e008      	b.n	800ce22 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce10:	f7fd f866 	bl	8009ee0 <HAL_GetTick>
 800ce14:	4602      	mov	r2, r0
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	2b02      	cmp	r3, #2
 800ce1c:	d901      	bls.n	800ce22 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	e171      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce22:	4b46      	ldr	r3, [pc, #280]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 0302 	and.w	r3, r3, #2
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d0f0      	beq.n	800ce10 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce2e:	4b43      	ldr	r3, [pc, #268]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	00db      	lsls	r3, r3, #3
 800ce3c:	493f      	ldr	r1, [pc, #252]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	600b      	str	r3, [r1, #0]
 800ce42:	e015      	b.n	800ce70 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ce44:	4b3e      	ldr	r3, [pc, #248]	; (800cf40 <HAL_RCC_OscConfig+0x2a8>)
 800ce46:	2200      	movs	r2, #0
 800ce48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce4a:	f7fd f849 	bl	8009ee0 <HAL_GetTick>
 800ce4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce50:	e008      	b.n	800ce64 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ce52:	f7fd f845 	bl	8009ee0 <HAL_GetTick>
 800ce56:	4602      	mov	r2, r0
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	1ad3      	subs	r3, r2, r3
 800ce5c:	2b02      	cmp	r3, #2
 800ce5e:	d901      	bls.n	800ce64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ce60:	2303      	movs	r3, #3
 800ce62:	e150      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce64:	4b35      	ldr	r3, [pc, #212]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0302 	and.w	r3, r3, #2
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f0      	bne.n	800ce52 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 0308 	and.w	r3, r3, #8
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d030      	beq.n	800cede <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d016      	beq.n	800ceb2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce84:	4b2f      	ldr	r3, [pc, #188]	; (800cf44 <HAL_RCC_OscConfig+0x2ac>)
 800ce86:	2201      	movs	r2, #1
 800ce88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce8a:	f7fd f829 	bl	8009ee0 <HAL_GetTick>
 800ce8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce90:	e008      	b.n	800cea4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ce92:	f7fd f825 	bl	8009ee0 <HAL_GetTick>
 800ce96:	4602      	mov	r2, r0
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	1ad3      	subs	r3, r2, r3
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d901      	bls.n	800cea4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cea0:	2303      	movs	r3, #3
 800cea2:	e130      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cea4:	4b25      	ldr	r3, [pc, #148]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cea8:	f003 0302 	and.w	r3, r3, #2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0f0      	beq.n	800ce92 <HAL_RCC_OscConfig+0x1fa>
 800ceb0:	e015      	b.n	800cede <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ceb2:	4b24      	ldr	r3, [pc, #144]	; (800cf44 <HAL_RCC_OscConfig+0x2ac>)
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ceb8:	f7fd f812 	bl	8009ee0 <HAL_GetTick>
 800cebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cebe:	e008      	b.n	800ced2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cec0:	f7fd f80e 	bl	8009ee0 <HAL_GetTick>
 800cec4:	4602      	mov	r2, r0
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d901      	bls.n	800ced2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cece:	2303      	movs	r3, #3
 800ced0:	e119      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ced2:	4b1a      	ldr	r3, [pc, #104]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800ced4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ced6:	f003 0302 	and.w	r3, r3, #2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d1f0      	bne.n	800cec0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f003 0304 	and.w	r3, r3, #4
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 809f 	beq.w	800d02a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ceec:	2300      	movs	r3, #0
 800ceee:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cef0:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10f      	bne.n	800cf1c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cefc:	2300      	movs	r3, #0
 800cefe:	60fb      	str	r3, [r7, #12]
 800cf00:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cf02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf04:	4a0d      	ldr	r2, [pc, #52]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cf06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cf0a:	6413      	str	r3, [r2, #64]	; 0x40
 800cf0c:	4b0b      	ldr	r3, [pc, #44]	; (800cf3c <HAL_RCC_OscConfig+0x2a4>)
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf14:	60fb      	str	r3, [r7, #12]
 800cf16:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	; (800cf48 <HAL_RCC_OscConfig+0x2b0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d120      	bne.n	800cf6a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cf28:	4b07      	ldr	r3, [pc, #28]	; (800cf48 <HAL_RCC_OscConfig+0x2b0>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a06      	ldr	r2, [pc, #24]	; (800cf48 <HAL_RCC_OscConfig+0x2b0>)
 800cf2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf34:	f7fc ffd4 	bl	8009ee0 <HAL_GetTick>
 800cf38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf3a:	e010      	b.n	800cf5e <HAL_RCC_OscConfig+0x2c6>
 800cf3c:	40023800 	.word	0x40023800
 800cf40:	42470000 	.word	0x42470000
 800cf44:	42470e80 	.word	0x42470e80
 800cf48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf4c:	f7fc ffc8 	bl	8009ee0 <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d901      	bls.n	800cf5e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e0d3      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf5e:	4b6c      	ldr	r3, [pc, #432]	; (800d110 <HAL_RCC_OscConfig+0x478>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d106      	bne.n	800cf80 <HAL_RCC_OscConfig+0x2e8>
 800cf72:	4b68      	ldr	r3, [pc, #416]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf76:	4a67      	ldr	r2, [pc, #412]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf78:	f043 0301 	orr.w	r3, r3, #1
 800cf7c:	6713      	str	r3, [r2, #112]	; 0x70
 800cf7e:	e01c      	b.n	800cfba <HAL_RCC_OscConfig+0x322>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	2b05      	cmp	r3, #5
 800cf86:	d10c      	bne.n	800cfa2 <HAL_RCC_OscConfig+0x30a>
 800cf88:	4b62      	ldr	r3, [pc, #392]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf8c:	4a61      	ldr	r2, [pc, #388]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf8e:	f043 0304 	orr.w	r3, r3, #4
 800cf92:	6713      	str	r3, [r2, #112]	; 0x70
 800cf94:	4b5f      	ldr	r3, [pc, #380]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf98:	4a5e      	ldr	r2, [pc, #376]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cf9a:	f043 0301 	orr.w	r3, r3, #1
 800cf9e:	6713      	str	r3, [r2, #112]	; 0x70
 800cfa0:	e00b      	b.n	800cfba <HAL_RCC_OscConfig+0x322>
 800cfa2:	4b5c      	ldr	r3, [pc, #368]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cfa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa6:	4a5b      	ldr	r2, [pc, #364]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cfa8:	f023 0301 	bic.w	r3, r3, #1
 800cfac:	6713      	str	r3, [r2, #112]	; 0x70
 800cfae:	4b59      	ldr	r3, [pc, #356]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cfb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfb2:	4a58      	ldr	r2, [pc, #352]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cfb4:	f023 0304 	bic.w	r3, r3, #4
 800cfb8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	689b      	ldr	r3, [r3, #8]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d015      	beq.n	800cfee <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfc2:	f7fc ff8d 	bl	8009ee0 <HAL_GetTick>
 800cfc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfc8:	e00a      	b.n	800cfe0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfca:	f7fc ff89 	bl	8009ee0 <HAL_GetTick>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d901      	bls.n	800cfe0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	e092      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cfe0:	4b4c      	ldr	r3, [pc, #304]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800cfe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe4:	f003 0302 	and.w	r3, r3, #2
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d0ee      	beq.n	800cfca <HAL_RCC_OscConfig+0x332>
 800cfec:	e014      	b.n	800d018 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cfee:	f7fc ff77 	bl	8009ee0 <HAL_GetTick>
 800cff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cff4:	e00a      	b.n	800d00c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cff6:	f7fc ff73 	bl	8009ee0 <HAL_GetTick>
 800cffa:	4602      	mov	r2, r0
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	1ad3      	subs	r3, r2, r3
 800d000:	f241 3288 	movw	r2, #5000	; 0x1388
 800d004:	4293      	cmp	r3, r2
 800d006:	d901      	bls.n	800d00c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800d008:	2303      	movs	r3, #3
 800d00a:	e07c      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d00c:	4b41      	ldr	r3, [pc, #260]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d00e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d010:	f003 0302 	and.w	r3, r3, #2
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1ee      	bne.n	800cff6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d018:	7dfb      	ldrb	r3, [r7, #23]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d105      	bne.n	800d02a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d01e:	4b3d      	ldr	r3, [pc, #244]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d022:	4a3c      	ldr	r2, [pc, #240]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d028:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d068      	beq.n	800d104 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d032:	4b38      	ldr	r3, [pc, #224]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f003 030c 	and.w	r3, r3, #12
 800d03a:	2b08      	cmp	r3, #8
 800d03c:	d060      	beq.n	800d100 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	2b02      	cmp	r3, #2
 800d044:	d145      	bne.n	800d0d2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d046:	4b34      	ldr	r3, [pc, #208]	; (800d118 <HAL_RCC_OscConfig+0x480>)
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d04c:	f7fc ff48 	bl	8009ee0 <HAL_GetTick>
 800d050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d052:	e008      	b.n	800d066 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d054:	f7fc ff44 	bl	8009ee0 <HAL_GetTick>
 800d058:	4602      	mov	r2, r0
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	1ad3      	subs	r3, r2, r3
 800d05e:	2b02      	cmp	r3, #2
 800d060:	d901      	bls.n	800d066 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e04f      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d066:	4b2b      	ldr	r3, [pc, #172]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d1f0      	bne.n	800d054 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	69da      	ldr	r2, [r3, #28]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6a1b      	ldr	r3, [r3, #32]
 800d07a:	431a      	orrs	r2, r3
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	019b      	lsls	r3, r3, #6
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d088:	085b      	lsrs	r3, r3, #1
 800d08a:	3b01      	subs	r3, #1
 800d08c:	041b      	lsls	r3, r3, #16
 800d08e:	431a      	orrs	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	061b      	lsls	r3, r3, #24
 800d096:	431a      	orrs	r2, r3
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09c:	071b      	lsls	r3, r3, #28
 800d09e:	491d      	ldr	r1, [pc, #116]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d0a0:	4313      	orrs	r3, r2
 800d0a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d0a4:	4b1c      	ldr	r3, [pc, #112]	; (800d118 <HAL_RCC_OscConfig+0x480>)
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0aa:	f7fc ff19 	bl	8009ee0 <HAL_GetTick>
 800d0ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0b0:	e008      	b.n	800d0c4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0b2:	f7fc ff15 	bl	8009ee0 <HAL_GetTick>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	1ad3      	subs	r3, r2, r3
 800d0bc:	2b02      	cmp	r3, #2
 800d0be:	d901      	bls.n	800d0c4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e020      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0c4:	4b13      	ldr	r3, [pc, #76]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d0f0      	beq.n	800d0b2 <HAL_RCC_OscConfig+0x41a>
 800d0d0:	e018      	b.n	800d104 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0d2:	4b11      	ldr	r3, [pc, #68]	; (800d118 <HAL_RCC_OscConfig+0x480>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0d8:	f7fc ff02 	bl	8009ee0 <HAL_GetTick>
 800d0dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0de:	e008      	b.n	800d0f2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d0e0:	f7fc fefe 	bl	8009ee0 <HAL_GetTick>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	1ad3      	subs	r3, r2, r3
 800d0ea:	2b02      	cmp	r3, #2
 800d0ec:	d901      	bls.n	800d0f2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	e009      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0f2:	4b08      	ldr	r3, [pc, #32]	; (800d114 <HAL_RCC_OscConfig+0x47c>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1f0      	bne.n	800d0e0 <HAL_RCC_OscConfig+0x448>
 800d0fe:	e001      	b.n	800d104 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	e000      	b.n	800d106 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	40007000 	.word	0x40007000
 800d114:	40023800 	.word	0x40023800
 800d118:	42470060 	.word	0x42470060

0800d11c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e022      	b.n	800d174 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f7f9 ff8f 	bl	8007064 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2203      	movs	r2, #3
 800d14a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f814 	bl	800d17c <HAL_SD_InitCard>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e00a      	b.n	800d174 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2200      	movs	r2, #0
 800d162:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2200      	movs	r2, #0
 800d168:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2201      	movs	r2, #1
 800d16e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d17c:	b5b0      	push	{r4, r5, r7, lr}
 800d17e:	b08e      	sub	sp, #56	; 0x38
 800d180:	af04      	add	r7, sp, #16
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d184:	2300      	movs	r3, #0
 800d186:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d18c:	2300      	movs	r3, #0
 800d18e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d190:	2300      	movs	r3, #0
 800d192:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d194:	2300      	movs	r3, #0
 800d196:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d198:	2376      	movs	r3, #118	; 0x76
 800d19a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681d      	ldr	r5, [r3, #0]
 800d1a0:	466c      	mov	r4, sp
 800d1a2:	f107 0314 	add.w	r3, r7, #20
 800d1a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d1ae:	f107 0308 	add.w	r3, r7, #8
 800d1b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f003 fa87 	bl	80106c8 <SDIO_Init>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d1c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d001      	beq.n	800d1cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e031      	b.n	800d230 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d1cc:	4b1a      	ldr	r3, [pc, #104]	; (800d238 <HAL_SD_InitCard+0xbc>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f003 fabf 	bl	801075a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d1dc:	4b16      	ldr	r3, [pc, #88]	; (800d238 <HAL_SD_InitCard+0xbc>)
 800d1de:	2201      	movs	r2, #1
 800d1e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f000 ffc6 	bl	800e174 <SD_PowerON>
 800d1e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d00b      	beq.n	800d208 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	431a      	orrs	r2, r3
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	e013      	b.n	800d230 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fee5 	bl	800dfd8 <SD_InitCard>
 800d20e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d210:	6a3b      	ldr	r3, [r7, #32]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00b      	beq.n	800d22e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d222:	6a3b      	ldr	r3, [r7, #32]
 800d224:	431a      	orrs	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e000      	b.n	800d230 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3728      	adds	r7, #40	; 0x28
 800d234:	46bd      	mov	sp, r7
 800d236:	bdb0      	pop	{r4, r5, r7, pc}
 800d238:	422580a0 	.word	0x422580a0

0800d23c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b08c      	sub	sp, #48	; 0x30
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
 800d248:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d107      	bne.n	800d264 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d258:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	e0c7      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	f040 80c0 	bne.w	800d3f2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	441a      	add	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d282:	429a      	cmp	r2, r3
 800d284:	d907      	bls.n	800d296 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d28a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d292:	2301      	movs	r3, #1
 800d294:	e0ae      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2203      	movs	r2, #3
 800d29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ba:	4a50      	ldr	r2, [pc, #320]	; (800d3fc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d2bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2c2:	4a4f      	ldr	r2, [pc, #316]	; (800d400 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d2c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	3380      	adds	r3, #128	; 0x80
 800d2d8:	4619      	mov	r1, r3
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	025b      	lsls	r3, r3, #9
 800d2e0:	089b      	lsrs	r3, r3, #2
 800d2e2:	f7fd fbef 	bl	800aac4 <HAL_DMA_Start_IT>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d017      	beq.n	800d31c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d2fa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a40      	ldr	r2, [pc, #256]	; (800d404 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d308:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d318:	2301      	movs	r3, #1
 800d31a:	e06b      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d31c:	4b3a      	ldr	r3, [pc, #232]	; (800d408 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d31e:	2201      	movs	r2, #1
 800d320:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d326:	2b01      	cmp	r3, #1
 800d328:	d002      	beq.n	800d330 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d32c:	025b      	lsls	r3, r3, #9
 800d32e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d338:	4618      	mov	r0, r3
 800d33a:	f003 faa1 	bl	8010880 <SDMMC_CmdBlockLength>
 800d33e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d342:	2b00      	cmp	r3, #0
 800d344:	d00f      	beq.n	800d366 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4a2e      	ldr	r2, [pc, #184]	; (800d404 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	431a      	orrs	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d362:	2301      	movs	r3, #1
 800d364:	e046      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d366:	f04f 33ff 	mov.w	r3, #4294967295
 800d36a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	025b      	lsls	r3, r3, #9
 800d370:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d372:	2390      	movs	r3, #144	; 0x90
 800d374:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d376:	2302      	movs	r3, #2
 800d378:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d37e:	2301      	movs	r3, #1
 800d380:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f107 0210 	add.w	r2, r7, #16
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f003 fa4b 	bl	8010828 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d90a      	bls.n	800d3ae <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	2282      	movs	r2, #130	; 0x82
 800d39c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f003 faaf 	bl	8010908 <SDMMC_CmdReadMultiBlock>
 800d3aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3ac:	e009      	b.n	800d3c2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2281      	movs	r2, #129	; 0x81
 800d3b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f003 fa82 	bl	80108c4 <SDMMC_CmdReadSingleBlock>
 800d3c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d012      	beq.n	800d3ee <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a0d      	ldr	r2, [pc, #52]	; (800d404 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d3ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	431a      	orrs	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e002      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e000      	b.n	800d3f4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d3f2:	2302      	movs	r3, #2
  }
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	3730      	adds	r7, #48	; 0x30
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	0800dde7 	.word	0x0800dde7
 800d400:	0800de59 	.word	0x0800de59
 800d404:	004005ff 	.word	0x004005ff
 800d408:	4225858c 	.word	0x4225858c

0800d40c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b08c      	sub	sp, #48	; 0x30
 800d410:	af00      	add	r7, sp, #0
 800d412:	60f8      	str	r0, [r7, #12]
 800d414:	60b9      	str	r1, [r7, #8]
 800d416:	607a      	str	r2, [r7, #4]
 800d418:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d107      	bne.n	800d434 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d428:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d430:	2301      	movs	r3, #1
 800d432:	e0ca      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	f040 80c3 	bne.w	800d5c8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	441a      	add	r2, r3
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d452:	429a      	cmp	r2, r3
 800d454:	d907      	bls.n	800d466 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d45a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d462:	2301      	movs	r3, #1
 800d464:	e0b1      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2203      	movs	r2, #3
 800d46a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	2200      	movs	r2, #0
 800d474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f042 021a 	orr.w	r2, r2, #26
 800d484:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d48a:	4a52      	ldr	r2, [pc, #328]	; (800d5d4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d48c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d492:	4a51      	ldr	r2, [pc, #324]	; (800d5d8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d494:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d49a:	2200      	movs	r2, #0
 800d49c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d002      	beq.n	800d4ac <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a8:	025b      	lsls	r3, r3, #9
 800d4aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f003 f9e3 	bl	8010880 <SDMMC_CmdBlockLength>
 800d4ba:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d00f      	beq.n	800d4e2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	4a45      	ldr	r2, [pc, #276]	; (800d5dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d4c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d0:	431a      	orrs	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2201      	movs	r2, #1
 800d4da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e073      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d90a      	bls.n	800d4fe <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	22a0      	movs	r2, #160	; 0xa0
 800d4ec:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f003 fa4b 	bl	8010990 <SDMMC_CmdWriteMultiBlock>
 800d4fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4fc:	e009      	b.n	800d512 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	2290      	movs	r2, #144	; 0x90
 800d502:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d50a:	4618      	mov	r0, r3
 800d50c:	f003 fa1e 	bl	801094c <SDMMC_CmdWriteSingleBlock>
 800d510:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d012      	beq.n	800d53e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	4a2f      	ldr	r2, [pc, #188]	; (800d5dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	431a      	orrs	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2201      	movs	r2, #1
 800d530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2200      	movs	r2, #0
 800d538:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d53a:	2301      	movs	r3, #1
 800d53c:	e045      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d53e:	4b28      	ldr	r3, [pc, #160]	; (800d5e0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d540:	2201      	movs	r2, #1
 800d542:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d548:	68b9      	ldr	r1, [r7, #8]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3380      	adds	r3, #128	; 0x80
 800d550:	461a      	mov	r2, r3
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	025b      	lsls	r3, r3, #9
 800d556:	089b      	lsrs	r3, r3, #2
 800d558:	f7fd fab4 	bl	800aac4 <HAL_DMA_Start_IT>
 800d55c:	4603      	mov	r3, r0
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d01a      	beq.n	800d598 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	f022 021a 	bic.w	r2, r2, #26
 800d570:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4a19      	ldr	r2, [pc, #100]	; (800d5dc <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d578:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d594:	2301      	movs	r3, #1
 800d596:	e018      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d598:	f04f 33ff 	mov.w	r3, #4294967295
 800d59c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	025b      	lsls	r3, r3, #9
 800d5a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d5a4:	2390      	movs	r3, #144	; 0x90
 800d5a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f107 0210 	add.w	r2, r7, #16
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f003 f932 	bl	8010828 <SDIO_ConfigData>

      return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	e000      	b.n	800d5ca <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d5c8:	2302      	movs	r3, #2
  }
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3730      	adds	r7, #48	; 0x30
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	0800ddbd 	.word	0x0800ddbd
 800d5d8:	0800de59 	.word	0x0800de59
 800d5dc:	004005ff 	.word	0x004005ff
 800d5e0:	4225858c 	.word	0x4225858c

0800d5e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d008      	beq.n	800d612 <HAL_SD_IRQHandler+0x2e>
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f003 0308 	and.w	r3, r3, #8
 800d606:	2b00      	cmp	r3, #0
 800d608:	d003      	beq.n	800d612 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f000 ffc8 	bl	800e5a0 <SD_Read_IT>
 800d610:	e155      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 808f 	beq.w	800d740 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	6812      	ldr	r2, [r2, #0]
 800d636:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d63a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d63e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	f022 0201 	bic.w	r2, r2, #1
 800d64e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	f003 0308 	and.w	r3, r3, #8
 800d656:	2b00      	cmp	r3, #0
 800d658:	d039      	beq.n	800d6ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f003 0302 	and.w	r3, r3, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	d104      	bne.n	800d66e <HAL_SD_IRQHandler+0x8a>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f003 0320 	and.w	r3, r3, #32
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d011      	beq.n	800d692 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4618      	mov	r0, r3
 800d674:	f003 f9ae 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800d678:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d008      	beq.n	800d692 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	431a      	orrs	r2, r3
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f91f 	bl	800d8d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f240 523a 	movw	r2, #1338	; 0x53a
 800d69a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d104      	bne.n	800d6be <HAL_SD_IRQHandler+0xda>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	f003 0302 	and.w	r3, r3, #2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d003      	beq.n	800d6c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f003 fe04 	bl	80112cc <HAL_SD_RxCpltCallback>
 800d6c4:	e0fb      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f003 fdf6 	bl	80112b8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6cc:	e0f7      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 80f2 	beq.w	800d8be <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d011      	beq.n	800d708 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f003 f973 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800d6ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d008      	beq.n	800d708 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	431a      	orrs	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f8e4 	bl	800d8d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f040 80d5 	bne.w	800d8be <HAL_SD_IRQHandler+0x2da>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f003 0302 	and.w	r3, r3, #2
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	f040 80cf 	bne.w	800d8be <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f022 0208 	bic.w	r2, r2, #8
 800d72e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f003 fdbd 	bl	80112b8 <HAL_SD_TxCpltCallback>
}
 800d73e:	e0be      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d008      	beq.n	800d760 <HAL_SD_IRQHandler+0x17c>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f003 0308 	and.w	r3, r3, #8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d003      	beq.n	800d760 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 ff72 	bl	800e642 <SD_Write_IT>
 800d75e:	e0ae      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d766:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	f000 80a7 	beq.w	800d8be <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d776:	f003 0302 	and.w	r3, r3, #2
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d782:	f043 0202 	orr.w	r2, r3, #2
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d790:	f003 0308 	and.w	r3, r3, #8
 800d794:	2b00      	cmp	r3, #0
 800d796:	d005      	beq.n	800d7a4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d79c:	f043 0208 	orr.w	r2, r3, #8
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7aa:	f003 0320 	and.w	r3, r3, #32
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d005      	beq.n	800d7be <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b6:	f043 0220 	orr.w	r2, r3, #32
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c4:	f003 0310 	and.w	r3, r3, #16
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d005      	beq.n	800d7d8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7d0:	f043 0210 	orr.w	r2, r3, #16
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d7f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f003 f8ec 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800d7fc:	4602      	mov	r2, r0
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d802:	431a      	orrs	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f003 0308 	and.w	r3, r3, #8
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d00a      	beq.n	800d828 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2201      	movs	r2, #1
 800d816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f855 	bl	800d8d0 <HAL_SD_ErrorCallback>
}
 800d826:	e04a      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d045      	beq.n	800d8be <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f003 0310 	and.w	r3, r3, #16
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d104      	bne.n	800d846 <HAL_SD_IRQHandler+0x262>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	f003 0320 	and.w	r3, r3, #32
 800d842:	2b00      	cmp	r3, #0
 800d844:	d011      	beq.n	800d86a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d84a:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <HAL_SD_IRQHandler+0x2e4>)
 800d84c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d852:	4618      	mov	r0, r3
 800d854:	f7fd f98e 	bl	800ab74 <HAL_DMA_Abort_IT>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d02f      	beq.n	800d8be <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d862:	4618      	mov	r0, r3
 800d864:	f000 fb4a 	bl	800defc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d868:	e029      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	2b00      	cmp	r3, #0
 800d872:	d104      	bne.n	800d87e <HAL_SD_IRQHandler+0x29a>
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d011      	beq.n	800d8a2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	4a12      	ldr	r2, [pc, #72]	; (800d8cc <HAL_SD_IRQHandler+0x2e8>)
 800d884:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd f972 	bl	800ab74 <HAL_DMA_Abort_IT>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d013      	beq.n	800d8be <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	4618      	mov	r0, r3
 800d89c:	f000 fb65 	bl	800df6a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d8a0:	e00d      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2201      	movs	r2, #1
 800d8ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f003 fcf4 	bl	80112a4 <HAL_SD_AbortCallback>
}
 800d8bc:	e7ff      	b.n	800d8be <HAL_SD_IRQHandler+0x2da>
 800d8be:	bf00      	nop
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	0800defd 	.word	0x0800defd
 800d8cc:	0800df6b 	.word	0x0800df6b

0800d8d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8d8:	bf00      	nop
 800d8da:	370c      	adds	r7, #12
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e2:	4770      	bx	lr

0800d8e4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8f2:	0f9b      	lsrs	r3, r3, #30
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8fe:	0e9b      	lsrs	r3, r3, #26
 800d900:	b2db      	uxtb	r3, r3
 800d902:	f003 030f 	and.w	r3, r3, #15
 800d906:	b2da      	uxtb	r2, r3
 800d908:	683b      	ldr	r3, [r7, #0]
 800d90a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d910:	0e1b      	lsrs	r3, r3, #24
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 0303 	and.w	r3, r3, #3
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d922:	0c1b      	lsrs	r3, r3, #16
 800d924:	b2da      	uxtb	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d92e:	0a1b      	lsrs	r3, r3, #8
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d93a:	b2da      	uxtb	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d944:	0d1b      	lsrs	r3, r3, #20
 800d946:	b29a      	uxth	r2, r3
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d950:	0c1b      	lsrs	r3, r3, #16
 800d952:	b2db      	uxtb	r3, r3
 800d954:	f003 030f 	and.w	r3, r3, #15
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d962:	0bdb      	lsrs	r3, r3, #15
 800d964:	b2db      	uxtb	r3, r3
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d974:	0b9b      	lsrs	r3, r3, #14
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 0301 	and.w	r3, r3, #1
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d986:	0b5b      	lsrs	r3, r3, #13
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0301 	and.w	r3, r3, #1
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	0b1b      	lsrs	r3, r3, #12
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f003 0301 	and.w	r3, r3, #1
 800d9a0:	b2da      	uxtb	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d163      	bne.n	800da7c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9b8:	009a      	lsls	r2, r3, #2
 800d9ba:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9be:	4013      	ands	r3, r2
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d9c4:	0f92      	lsrs	r2, r2, #30
 800d9c6:	431a      	orrs	r2, r3
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9d0:	0edb      	lsrs	r3, r3, #27
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0307 	and.w	r3, r3, #7
 800d9d8:	b2da      	uxtb	r2, r3
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9e2:	0e1b      	lsrs	r3, r3, #24
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	f003 0307 	and.w	r3, r3, #7
 800d9ea:	b2da      	uxtb	r2, r3
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f4:	0d5b      	lsrs	r3, r3, #21
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0307 	and.w	r3, r3, #7
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da06:	0c9b      	lsrs	r3, r3, #18
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0307 	and.w	r3, r3, #7
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da18:	0bdb      	lsrs	r3, r3, #15
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	f003 0307 	and.w	r3, r3, #7
 800da20:	b2da      	uxtb	r2, r3
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	691b      	ldr	r3, [r3, #16]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	7e1b      	ldrb	r3, [r3, #24]
 800da34:	b2db      	uxtb	r3, r3
 800da36:	f003 0307 	and.w	r3, r3, #7
 800da3a:	3302      	adds	r3, #2
 800da3c:	2201      	movs	r2, #1
 800da3e:	fa02 f303 	lsl.w	r3, r2, r3
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800da46:	fb02 f203 	mul.w	r2, r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	7a1b      	ldrb	r3, [r3, #8]
 800da52:	b2db      	uxtb	r3, r3
 800da54:	f003 030f 	and.w	r3, r3, #15
 800da58:	2201      	movs	r2, #1
 800da5a:	409a      	lsls	r2, r3
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800da68:	0a52      	lsrs	r2, r2, #9
 800da6a:	fb02 f203 	mul.w	r2, r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da78:	661a      	str	r2, [r3, #96]	; 0x60
 800da7a:	e031      	b.n	800dae0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da80:	2b01      	cmp	r3, #1
 800da82:	d11d      	bne.n	800dac0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da88:	041b      	lsls	r3, r3, #16
 800da8a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da92:	0c1b      	lsrs	r3, r3, #16
 800da94:	431a      	orrs	r2, r3
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	3301      	adds	r3, #1
 800daa0:	029a      	lsls	r2, r3, #10
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dab4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	661a      	str	r2, [r3, #96]	; 0x60
 800dabe:	e00f      	b.n	800dae0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	4a58      	ldr	r2, [pc, #352]	; (800dc28 <HAL_SD_GetCardCSD+0x344>)
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dadc:	2301      	movs	r3, #1
 800dade:	e09d      	b.n	800dc1c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dae4:	0b9b      	lsrs	r3, r3, #14
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	b2da      	uxtb	r2, r3
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf6:	09db      	lsrs	r3, r3, #7
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db08:	b2db      	uxtb	r3, r3
 800db0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db18:	0fdb      	lsrs	r3, r3, #31
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db24:	0f5b      	lsrs	r3, r3, #29
 800db26:	b2db      	uxtb	r3, r3
 800db28:	f003 0303 	and.w	r3, r3, #3
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	683b      	ldr	r3, [r7, #0]
 800db30:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db36:	0e9b      	lsrs	r3, r3, #26
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	f003 0307 	and.w	r3, r3, #7
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db48:	0d9b      	lsrs	r3, r3, #22
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f003 030f 	and.w	r3, r3, #15
 800db50:	b2da      	uxtb	r2, r3
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db5a:	0d5b      	lsrs	r3, r3, #21
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	f003 0301 	and.w	r3, r3, #1
 800db62:	b2da      	uxtb	r2, r3
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2200      	movs	r2, #0
 800db6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db76:	0c1b      	lsrs	r3, r3, #16
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db8a:	0bdb      	lsrs	r3, r3, #15
 800db8c:	b2db      	uxtb	r3, r3
 800db8e:	f003 0301 	and.w	r3, r3, #1
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db9e:	0b9b      	lsrs	r3, r3, #14
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	f003 0301 	and.w	r3, r3, #1
 800dba6:	b2da      	uxtb	r2, r3
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbb2:	0b5b      	lsrs	r3, r3, #13
 800dbb4:	b2db      	uxtb	r3, r3
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbc6:	0b1b      	lsrs	r3, r3, #12
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbda:	0a9b      	lsrs	r3, r3, #10
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbee:	0a1b      	lsrs	r3, r3, #8
 800dbf0:	b2db      	uxtb	r3, r3
 800dbf2:	f003 0303 	and.w	r3, r3, #3
 800dbf6:	b2da      	uxtb	r2, r3
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc02:	085b      	lsrs	r3, r3, #1
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc0a:	b2da      	uxtb	r2, r3
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	2201      	movs	r2, #1
 800dc16:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	370c      	adds	r7, #12
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	004005ff 	.word	0x004005ff

0800dc2c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b083      	sub	sp, #12
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr

0800dc84 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dc84:	b5b0      	push	{r4, r5, r7, lr}
 800dc86:	b08e      	sub	sp, #56	; 0x38
 800dc88:	af04      	add	r7, sp, #16
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2203      	movs	r2, #3
 800dc92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d02e      	beq.n	800dcfc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dca4:	d106      	bne.n	800dcb4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	639a      	str	r2, [r3, #56]	; 0x38
 800dcb2:	e029      	b.n	800dd08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dcba:	d10a      	bne.n	800dcd2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fb0f 	bl	800e2e0 <SD_WideBus_Enable>
 800dcc2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcca:	431a      	orrs	r2, r3
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	639a      	str	r2, [r3, #56]	; 0x38
 800dcd0:	e01a      	b.n	800dd08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10a      	bne.n	800dcee <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 fb4c 	bl	800e376 <SD_WideBus_Disable>
 800dcde:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce6:	431a      	orrs	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	639a      	str	r2, [r3, #56]	; 0x38
 800dcec:	e00c      	b.n	800dd08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	639a      	str	r2, [r3, #56]	; 0x38
 800dcfa:	e005      	b.n	800dd08 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d009      	beq.n	800dd24 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	4a18      	ldr	r2, [pc, #96]	; (800dd78 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dd16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2201      	movs	r2, #1
 800dd1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e024      	b.n	800dd6e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	699b      	ldr	r3, [r3, #24]
 800dd44:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681d      	ldr	r5, [r3, #0]
 800dd4a:	466c      	mov	r4, sp
 800dd4c:	f107 0318 	add.w	r3, r7, #24
 800dd50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dd54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd58:	f107 030c 	add.w	r3, r7, #12
 800dd5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f002 fcb2 	bl	80106c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2201      	movs	r2, #1
 800dd68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3728      	adds	r7, #40	; 0x28
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bdb0      	pop	{r4, r5, r7, pc}
 800dd76:	bf00      	nop
 800dd78:	004005ff 	.word	0x004005ff

0800dd7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dd84:	2300      	movs	r3, #0
 800dd86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dd88:	f107 030c 	add.w	r3, r7, #12
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fa7e 	bl	800e290 <SD_SendStatus>
 800dd94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d005      	beq.n	800dda8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	431a      	orrs	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	0a5b      	lsrs	r3, r3, #9
 800ddac:	f003 030f 	and.w	r3, r3, #15
 800ddb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ddb2:	693b      	ldr	r3, [r7, #16]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}

0800ddbc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b085      	sub	sp, #20
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ddd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ddda:	bf00      	nop
 800dddc:	3714      	adds	r7, #20
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b084      	sub	sp, #16
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddf2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddf8:	2b82      	cmp	r3, #130	; 0x82
 800ddfa:	d111      	bne.n	800de20 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	4618      	mov	r0, r3
 800de02:	f002 fde7 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800de06:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d008      	beq.n	800de20 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	431a      	orrs	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f7ff fd58 	bl	800d8d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f022 0208 	bic.w	r2, r2, #8
 800de2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f240 523a 	movw	r2, #1338	; 0x53a
 800de38:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2201      	movs	r2, #1
 800de3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2200      	movs	r2, #0
 800de46:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800de48:	68f8      	ldr	r0, [r7, #12]
 800de4a:	f003 fa3f 	bl	80112cc <HAL_SD_RxCpltCallback>
#endif
}
 800de4e:	bf00      	nop
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
	...

0800de58 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	b086      	sub	sp, #24
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de64:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f7fd f830 	bl	800aecc <HAL_DMA_GetError>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d03e      	beq.n	800def0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de78:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de80:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d002      	beq.n	800de8e <SD_DMAError+0x36>
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d12d      	bne.n	800deea <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a19      	ldr	r2, [pc, #100]	; (800def8 <SD_DMAError+0xa0>)
 800de94:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dea4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800deb2:	6978      	ldr	r0, [r7, #20]
 800deb4:	f7ff ff62 	bl	800dd7c <HAL_SD_GetCardState>
 800deb8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b06      	cmp	r3, #6
 800debe:	d002      	beq.n	800dec6 <SD_DMAError+0x6e>
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	2b05      	cmp	r3, #5
 800dec4:	d10a      	bne.n	800dedc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	4618      	mov	r0, r3
 800decc:	f002 fd82 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800ded0:	4602      	mov	r2, r0
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ded6:	431a      	orrs	r2, r3
 800ded8:	697b      	ldr	r3, [r7, #20]
 800deda:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2201      	movs	r2, #1
 800dee0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2200      	movs	r2, #0
 800dee8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800deea:	6978      	ldr	r0, [r7, #20]
 800deec:	f7ff fcf0 	bl	800d8d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800def0:	bf00      	nop
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	004005ff 	.word	0x004005ff

0800defc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df08:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f240 523a 	movw	r2, #1338	; 0x53a
 800df12:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df14:	68f8      	ldr	r0, [r7, #12]
 800df16:	f7ff ff31 	bl	800dd7c <HAL_SD_GetCardState>
 800df1a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	2201      	movs	r2, #1
 800df20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2200      	movs	r2, #0
 800df28:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	2b06      	cmp	r3, #6
 800df2e:	d002      	beq.n	800df36 <SD_DMATxAbort+0x3a>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b05      	cmp	r3, #5
 800df34:	d10a      	bne.n	800df4c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f002 fd4a 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800df40:	4602      	mov	r2, r0
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df46:	431a      	orrs	r2, r3
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df50:	2b00      	cmp	r3, #0
 800df52:	d103      	bne.n	800df5c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800df54:	68f8      	ldr	r0, [r7, #12]
 800df56:	f003 f9a5 	bl	80112a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800df5a:	e002      	b.n	800df62 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800df5c:	68f8      	ldr	r0, [r7, #12]
 800df5e:	f7ff fcb7 	bl	800d8d0 <HAL_SD_ErrorCallback>
}
 800df62:	bf00      	nop
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f240 523a 	movw	r2, #1338	; 0x53a
 800df80:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800df82:	68f8      	ldr	r0, [r7, #12]
 800df84:	f7ff fefa 	bl	800dd7c <HAL_SD_GetCardState>
 800df88:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	2201      	movs	r2, #1
 800df8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	2200      	movs	r2, #0
 800df96:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	2b06      	cmp	r3, #6
 800df9c:	d002      	beq.n	800dfa4 <SD_DMARxAbort+0x3a>
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	2b05      	cmp	r3, #5
 800dfa2:	d10a      	bne.n	800dfba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f002 fd13 	bl	80109d4 <SDMMC_CmdStopTransfer>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfb4:	431a      	orrs	r2, r3
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d103      	bne.n	800dfca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f003 f96e 	bl	80112a4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dfc8:	e002      	b.n	800dfd0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dfca:	68f8      	ldr	r0, [r7, #12]
 800dfcc:	f7ff fc80 	bl	800d8d0 <HAL_SD_ErrorCallback>
}
 800dfd0:	bf00      	nop
 800dfd2:	3710      	adds	r7, #16
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfd8:	b5b0      	push	{r4, r5, r7, lr}
 800dfda:	b094      	sub	sp, #80	; 0x50
 800dfdc:	af04      	add	r7, sp, #16
 800dfde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f002 fbc5 	bl	8010778 <SDIO_GetPowerState>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d102      	bne.n	800dffa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dff4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dff8:	e0b7      	b.n	800e16a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d02f      	beq.n	800e062 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4618      	mov	r0, r3
 800e008:	f002 fdee 	bl	8010be8 <SDMMC_CmdSendCID>
 800e00c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e010:	2b00      	cmp	r3, #0
 800e012:	d001      	beq.n	800e018 <SD_InitCard+0x40>
    {
      return errorstate;
 800e014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e016:	e0a8      	b.n	800e16a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2100      	movs	r1, #0
 800e01e:	4618      	mov	r0, r3
 800e020:	f002 fbef 	bl	8010802 <SDIO_GetResponse>
 800e024:	4602      	mov	r2, r0
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	2104      	movs	r1, #4
 800e030:	4618      	mov	r0, r3
 800e032:	f002 fbe6 	bl	8010802 <SDIO_GetResponse>
 800e036:	4602      	mov	r2, r0
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	2108      	movs	r1, #8
 800e042:	4618      	mov	r0, r3
 800e044:	f002 fbdd 	bl	8010802 <SDIO_GetResponse>
 800e048:	4602      	mov	r2, r0
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	210c      	movs	r1, #12
 800e054:	4618      	mov	r0, r3
 800e056:	f002 fbd4 	bl	8010802 <SDIO_GetResponse>
 800e05a:	4602      	mov	r2, r0
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e066:	2b03      	cmp	r3, #3
 800e068:	d00d      	beq.n	800e086 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f107 020e 	add.w	r2, r7, #14
 800e072:	4611      	mov	r1, r2
 800e074:	4618      	mov	r0, r3
 800e076:	f002 fdf4 	bl	8010c62 <SDMMC_CmdSetRelAdd>
 800e07a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e07c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d001      	beq.n	800e086 <SD_InitCard+0xae>
    {
      return errorstate;
 800e082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e084:	e071      	b.n	800e16a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d036      	beq.n	800e0fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	461a      	mov	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e09e:	041b      	lsls	r3, r3, #16
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f002 fdbe 	bl	8010c24 <SDMMC_CmdSendCSD>
 800e0a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d001      	beq.n	800e0b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e0b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b2:	e05a      	b.n	800e16a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f002 fba1 	bl	8010802 <SDIO_GetResponse>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2104      	movs	r1, #4
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f002 fb98 	bl	8010802 <SDIO_GetResponse>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2108      	movs	r1, #8
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f002 fb8f 	bl	8010802 <SDIO_GetResponse>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	210c      	movs	r1, #12
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f002 fb86 	bl	8010802 <SDIO_GetResponse>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2104      	movs	r1, #4
 800e102:	4618      	mov	r0, r3
 800e104:	f002 fb7d 	bl	8010802 <SDIO_GetResponse>
 800e108:	4603      	mov	r3, r0
 800e10a:	0d1a      	lsrs	r2, r3, #20
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e110:	f107 0310 	add.w	r3, r7, #16
 800e114:	4619      	mov	r1, r3
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f7ff fbe4 	bl	800d8e4 <HAL_SD_GetCardCSD>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d002      	beq.n	800e128 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e122:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e126:	e020      	b.n	800e16a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6819      	ldr	r1, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e130:	041b      	lsls	r3, r3, #16
 800e132:	f04f 0400 	mov.w	r4, #0
 800e136:	461a      	mov	r2, r3
 800e138:	4623      	mov	r3, r4
 800e13a:	4608      	mov	r0, r1
 800e13c:	f002 fc6c 	bl	8010a18 <SDMMC_CmdSelDesel>
 800e140:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e144:	2b00      	cmp	r3, #0
 800e146:	d001      	beq.n	800e14c <SD_InitCard+0x174>
  {
    return errorstate;
 800e148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e14a:	e00e      	b.n	800e16a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681d      	ldr	r5, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	466c      	mov	r4, sp
 800e154:	f103 0210 	add.w	r2, r3, #16
 800e158:	ca07      	ldmia	r2, {r0, r1, r2}
 800e15a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e15e:	3304      	adds	r3, #4
 800e160:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e162:	4628      	mov	r0, r5
 800e164:	f002 fab0 	bl	80106c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3740      	adds	r7, #64	; 0x40
 800e16e:	46bd      	mov	sp, r7
 800e170:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e174 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e17c:	2300      	movs	r3, #0
 800e17e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]
 800e184:	2300      	movs	r3, #0
 800e186:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f002 fc66 	bl	8010a5e <SDMMC_CmdGoIdleState>
 800e192:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	e072      	b.n	800e284 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f002 fc79 	bl	8010a9a <SDMMC_CmdOperCond>
 800e1a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00d      	beq.n	800e1cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f002 fc4f 	bl	8010a5e <SDMMC_CmdGoIdleState>
 800e1c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d004      	beq.n	800e1d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	e05b      	b.n	800e284 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2201      	movs	r2, #1
 800e1d0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1d6:	2b01      	cmp	r3, #1
 800e1d8:	d137      	bne.n	800e24a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	2100      	movs	r1, #0
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f002 fc79 	bl	8010ad8 <SDMMC_CmdAppCommand>
 800e1e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d02d      	beq.n	800e24a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1f2:	e047      	b.n	800e284 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f002 fc6c 	bl	8010ad8 <SDMMC_CmdAppCommand>
 800e200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d001      	beq.n	800e20c <SD_PowerON+0x98>
    {
      return errorstate;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	e03b      	b.n	800e284 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	491e      	ldr	r1, [pc, #120]	; (800e28c <SD_PowerON+0x118>)
 800e212:	4618      	mov	r0, r3
 800e214:	f002 fc82 	bl	8010b1c <SDMMC_CmdAppOperCommand>
 800e218:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d002      	beq.n	800e226 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e220:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e224:	e02e      	b.n	800e284 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2100      	movs	r1, #0
 800e22c:	4618      	mov	r0, r3
 800e22e:	f002 fae8 	bl	8010802 <SDIO_GetResponse>
 800e232:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	0fdb      	lsrs	r3, r3, #31
 800e238:	2b01      	cmp	r3, #1
 800e23a:	d101      	bne.n	800e240 <SD_PowerON+0xcc>
 800e23c:	2301      	movs	r3, #1
 800e23e:	e000      	b.n	800e242 <SD_PowerON+0xce>
 800e240:	2300      	movs	r3, #0
 800e242:	613b      	str	r3, [r7, #16]

    count++;
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	3301      	adds	r3, #1
 800e248:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e250:	4293      	cmp	r3, r2
 800e252:	d802      	bhi.n	800e25a <SD_PowerON+0xe6>
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d0cc      	beq.n	800e1f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e260:	4293      	cmp	r3, r2
 800e262:	d902      	bls.n	800e26a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e268:	e00c      	b.n	800e284 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d003      	beq.n	800e27c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2201      	movs	r2, #1
 800e278:	645a      	str	r2, [r3, #68]	; 0x44
 800e27a:	e002      	b.n	800e282 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	c1100000 	.word	0xc1100000

0800e290 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d102      	bne.n	800e2a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e2a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e2a4:	e018      	b.n	800e2d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ae:	041b      	lsls	r3, r3, #16
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f002 fcf6 	bl	8010ca4 <SDMMC_CmdSendStatus>
 800e2b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d001      	beq.n	800e2c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	e009      	b.n	800e2d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f002 fa99 	bl	8010802 <SDIO_GetResponse>
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b086      	sub	sp, #24
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	60fb      	str	r3, [r7, #12]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f002 fa83 	bl	8010802 <SDIO_GetResponse>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e306:	d102      	bne.n	800e30e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e30c:	e02f      	b.n	800e36e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e30e:	f107 030c 	add.w	r3, r7, #12
 800e312:	4619      	mov	r1, r3
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 f879 	bl	800e40c <SD_FindSCR>
 800e31a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d001      	beq.n	800e326 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	e023      	b.n	800e36e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d01c      	beq.n	800e36a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e338:	041b      	lsls	r3, r3, #16
 800e33a:	4619      	mov	r1, r3
 800e33c:	4610      	mov	r0, r2
 800e33e:	f002 fbcb 	bl	8010ad8 <SDMMC_CmdAppCommand>
 800e342:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e344:	697b      	ldr	r3, [r7, #20]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d001      	beq.n	800e34e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	e00f      	b.n	800e36e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2102      	movs	r1, #2
 800e354:	4618      	mov	r0, r3
 800e356:	f002 fc04 	bl	8010b62 <SDMMC_CmdBusWidth>
 800e35a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	e003      	b.n	800e36e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e366:	2300      	movs	r3, #0
 800e368:	e001      	b.n	800e36e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e36a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e36e:	4618      	mov	r0, r3
 800e370:	3718      	adds	r7, #24
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}

0800e376 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b086      	sub	sp, #24
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e37e:	2300      	movs	r3, #0
 800e380:	60fb      	str	r3, [r7, #12]
 800e382:	2300      	movs	r3, #0
 800e384:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	2100      	movs	r1, #0
 800e38c:	4618      	mov	r0, r3
 800e38e:	f002 fa38 	bl	8010802 <SDIO_GetResponse>
 800e392:	4603      	mov	r3, r0
 800e394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e39c:	d102      	bne.n	800e3a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e39e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3a2:	e02f      	b.n	800e404 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3a4:	f107 030c 	add.w	r3, r7, #12
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f82e 	bl	800e40c <SD_FindSCR>
 800e3b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	e023      	b.n	800e404 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d01c      	beq.n	800e400 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e3ce:	041b      	lsls	r3, r3, #16
 800e3d0:	4619      	mov	r1, r3
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	f002 fb80 	bl	8010ad8 <SDMMC_CmdAppCommand>
 800e3d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3da:	697b      	ldr	r3, [r7, #20]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d001      	beq.n	800e3e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	e00f      	b.n	800e404 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f002 fbb9 	bl	8010b62 <SDMMC_CmdBusWidth>
 800e3f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d001      	beq.n	800e3fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	e003      	b.n	800e404 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	e001      	b.n	800e404 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e400:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e404:	4618      	mov	r0, r3
 800e406:	3718      	adds	r7, #24
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e40c:	b590      	push	{r4, r7, lr}
 800e40e:	b08f      	sub	sp, #60	; 0x3c
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e416:	f7fb fd63 	bl	8009ee0 <HAL_GetTick>
 800e41a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e41c:	2300      	movs	r3, #0
 800e41e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e420:	2300      	movs	r3, #0
 800e422:	60bb      	str	r3, [r7, #8]
 800e424:	2300      	movs	r3, #0
 800e426:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2108      	movs	r1, #8
 800e432:	4618      	mov	r0, r3
 800e434:	f002 fa24 	bl	8010880 <SDMMC_CmdBlockLength>
 800e438:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d001      	beq.n	800e444 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e442:	e0a9      	b.n	800e598 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681a      	ldr	r2, [r3, #0]
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e44c:	041b      	lsls	r3, r3, #16
 800e44e:	4619      	mov	r1, r3
 800e450:	4610      	mov	r0, r2
 800e452:	f002 fb41 	bl	8010ad8 <SDMMC_CmdAppCommand>
 800e456:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d001      	beq.n	800e462 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e460:	e09a      	b.n	800e598 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e462:	f04f 33ff 	mov.w	r3, #4294967295
 800e466:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e468:	2308      	movs	r3, #8
 800e46a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e46c:	2330      	movs	r3, #48	; 0x30
 800e46e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e470:	2302      	movs	r3, #2
 800e472:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e474:	2300      	movs	r3, #0
 800e476:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e478:	2301      	movs	r3, #1
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f107 0210 	add.w	r2, r7, #16
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f002 f9ce 	bl	8010828 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f002 fb88 	bl	8010ba6 <SDMMC_CmdSendSCR>
 800e496:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d022      	beq.n	800e4e4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a0:	e07a      	b.n	800e598 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00e      	beq.n	800e4ce <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6819      	ldr	r1, [r3, #0]
 800e4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b6:	009b      	lsls	r3, r3, #2
 800e4b8:	f107 0208 	add.w	r2, r7, #8
 800e4bc:	18d4      	adds	r4, r2, r3
 800e4be:	4608      	mov	r0, r1
 800e4c0:	f002 f92d 	bl	801071e <SDIO_ReadFIFO>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	6023      	str	r3, [r4, #0]
      index++;
 800e4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ce:	f7fb fd07 	bl	8009ee0 <HAL_GetTick>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4dc:	d102      	bne.n	800e4e4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4e2:	e059      	b.n	800e598 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4ea:	f240 432a 	movw	r3, #1066	; 0x42a
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d0d6      	beq.n	800e4a2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fa:	f003 0308 	and.w	r3, r3, #8
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d005      	beq.n	800e50e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2208      	movs	r2, #8
 800e508:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e50a:	2308      	movs	r3, #8
 800e50c:	e044      	b.n	800e598 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e514:	f003 0302 	and.w	r3, r3, #2
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d005      	beq.n	800e528 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2202      	movs	r2, #2
 800e522:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e524:	2302      	movs	r3, #2
 800e526:	e037      	b.n	800e598 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e52e:	f003 0320 	and.w	r3, r3, #32
 800e532:	2b00      	cmp	r3, #0
 800e534:	d005      	beq.n	800e542 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	2220      	movs	r2, #32
 800e53c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e53e:	2320      	movs	r3, #32
 800e540:	e02a      	b.n	800e598 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f240 523a 	movw	r2, #1338	; 0x53a
 800e54a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	061a      	lsls	r2, r3, #24
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	021b      	lsls	r3, r3, #8
 800e554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e558:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	0a1b      	lsrs	r3, r3, #8
 800e55e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e562:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	0e1b      	lsrs	r3, r3, #24
 800e568:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e56c:	601a      	str	r2, [r3, #0]
    scr++;
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	3304      	adds	r3, #4
 800e572:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	061a      	lsls	r2, r3, #24
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	021b      	lsls	r3, r3, #8
 800e57c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e580:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	0a1b      	lsrs	r3, r3, #8
 800e586:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e58a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	0e1b      	lsrs	r3, r3, #24
 800e590:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e594:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	373c      	adds	r7, #60	; 0x3c
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd90      	pop	{r4, r7, pc}

0800e5a0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d03f      	beq.n	800e63a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	617b      	str	r3, [r7, #20]
 800e5be:	e033      	b.n	800e628 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f002 f8aa 	bl	801071e <SDIO_ReadFIFO>
 800e5ca:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	3b01      	subs	r3, #1
 800e5de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	b2da      	uxtb	r2, r3
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	3b01      	subs	r3, #1
 800e5f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	0c1b      	lsrs	r3, r3, #16
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	3301      	adds	r3, #1
 800e604:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	3b01      	subs	r3, #1
 800e60a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	0e1b      	lsrs	r3, r3, #24
 800e610:	b2da      	uxtb	r2, r3
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	3301      	adds	r3, #1
 800e61a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	3b01      	subs	r3, #1
 800e620:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	3301      	adds	r3, #1
 800e626:	617b      	str	r3, [r7, #20]
 800e628:	697b      	ldr	r3, [r7, #20]
 800e62a:	2b07      	cmp	r3, #7
 800e62c:	d9c8      	bls.n	800e5c0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	693a      	ldr	r2, [r7, #16]
 800e638:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e63a:	bf00      	nop
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}

0800e642 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e642:	b580      	push	{r7, lr}
 800e644:	b086      	sub	sp, #24
 800e646:	af00      	add	r7, sp, #0
 800e648:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6a1b      	ldr	r3, [r3, #32]
 800e64e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e654:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d043      	beq.n	800e6e4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e65c:	2300      	movs	r3, #0
 800e65e:	617b      	str	r3, [r7, #20]
 800e660:	e037      	b.n	800e6d2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	3301      	adds	r3, #1
 800e66c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	3b01      	subs	r3, #1
 800e672:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	021a      	lsls	r2, r3, #8
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	4313      	orrs	r3, r2
 800e67e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	3301      	adds	r3, #1
 800e684:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e686:	693b      	ldr	r3, [r7, #16]
 800e688:	3b01      	subs	r3, #1
 800e68a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	041a      	lsls	r2, r3, #16
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	4313      	orrs	r3, r2
 800e696:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	3301      	adds	r3, #1
 800e69c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	3b01      	subs	r3, #1
 800e6a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	061a      	lsls	r2, r3, #24
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f107 0208 	add.w	r2, r7, #8
 800e6c4:	4611      	mov	r1, r2
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f002 f836 	bl	8010738 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e6cc:	697b      	ldr	r3, [r7, #20]
 800e6ce:	3301      	adds	r3, #1
 800e6d0:	617b      	str	r3, [r7, #20]
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	2b07      	cmp	r3, #7
 800e6d6:	d9c4      	bls.n	800e662 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	68fa      	ldr	r2, [r7, #12]
 800e6dc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	693a      	ldr	r2, [r7, #16]
 800e6e2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e6e4:	bf00      	nop
 800e6e6:	3718      	adds	r7, #24
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	bd80      	pop	{r7, pc}

0800e6ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d101      	bne.n	800e6fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e056      	b.n	800e7ac <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e70a:	b2db      	uxtb	r3, r3
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	2200      	movs	r2, #0
 800e714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e718:	6878      	ldr	r0, [r7, #4]
 800e71a:	f7f8 fd95 	bl	8007248 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2202      	movs	r2, #2
 800e722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	681a      	ldr	r2, [r3, #0]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e734:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	689b      	ldr	r3, [r3, #8]
 800e73e:	431a      	orrs	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68db      	ldr	r3, [r3, #12]
 800e744:	431a      	orrs	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	691b      	ldr	r3, [r3, #16]
 800e74a:	431a      	orrs	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	431a      	orrs	r2, r3
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	699b      	ldr	r3, [r3, #24]
 800e756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e75a:	431a      	orrs	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	69db      	ldr	r3, [r3, #28]
 800e760:	431a      	orrs	r2, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	ea42 0103 	orr.w	r1, r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	430a      	orrs	r2, r1
 800e774:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	699b      	ldr	r3, [r3, #24]
 800e77a:	0c1b      	lsrs	r3, r3, #16
 800e77c:	f003 0104 	and.w	r1, r3, #4
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	430a      	orrs	r2, r1
 800e78a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	69da      	ldr	r2, [r3, #28]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e79a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2200      	movs	r2, #0
 800e7a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2201      	movs	r2, #1
 800e7a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3708      	adds	r7, #8
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	603b      	str	r3, [r7, #0]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7ce:	2b01      	cmp	r3, #1
 800e7d0:	d101      	bne.n	800e7d6 <HAL_SPI_Transmit+0x22>
 800e7d2:	2302      	movs	r3, #2
 800e7d4:	e11e      	b.n	800ea14 <HAL_SPI_Transmit+0x260>
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2201      	movs	r2, #1
 800e7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e7de:	f7fb fb7f 	bl	8009ee0 <HAL_GetTick>
 800e7e2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e7e4:	88fb      	ldrh	r3, [r7, #6]
 800e7e6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b01      	cmp	r3, #1
 800e7f2:	d002      	beq.n	800e7fa <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e7f8:	e103      	b.n	800ea02 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <HAL_SPI_Transmit+0x52>
 800e800:	88fb      	ldrh	r3, [r7, #6]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d102      	bne.n	800e80c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e80a:	e0fa      	b.n	800ea02 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2203      	movs	r2, #3
 800e810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	88fa      	ldrh	r2, [r7, #6]
 800e824:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	88fa      	ldrh	r2, [r7, #6]
 800e82a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	2200      	movs	r2, #0
 800e836:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2200      	movs	r2, #0
 800e842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	2200      	movs	r2, #0
 800e848:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	689b      	ldr	r3, [r3, #8]
 800e84e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e852:	d107      	bne.n	800e864 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e86e:	2b40      	cmp	r3, #64	; 0x40
 800e870:	d007      	beq.n	800e882 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	681a      	ldr	r2, [r3, #0]
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	68db      	ldr	r3, [r3, #12]
 800e886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e88a:	d14b      	bne.n	800e924 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d002      	beq.n	800e89a <HAL_SPI_Transmit+0xe6>
 800e894:	8afb      	ldrh	r3, [r7, #22]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d13e      	bne.n	800e918 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e89e:	881a      	ldrh	r2, [r3, #0]
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8aa:	1c9a      	adds	r2, r3, #2
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8b4:	b29b      	uxth	r3, r3
 800e8b6:	3b01      	subs	r3, #1
 800e8b8:	b29a      	uxth	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e8be:	e02b      	b.n	800e918 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	f003 0302 	and.w	r3, r3, #2
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d112      	bne.n	800e8f4 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d2:	881a      	ldrh	r2, [r3, #0]
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8de:	1c9a      	adds	r2, r3, #2
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8e8:	b29b      	uxth	r3, r3
 800e8ea:	3b01      	subs	r3, #1
 800e8ec:	b29a      	uxth	r2, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	86da      	strh	r2, [r3, #54]	; 0x36
 800e8f2:	e011      	b.n	800e918 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8f4:	f7fb faf4 	bl	8009ee0 <HAL_GetTick>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	69bb      	ldr	r3, [r7, #24]
 800e8fc:	1ad3      	subs	r3, r2, r3
 800e8fe:	683a      	ldr	r2, [r7, #0]
 800e900:	429a      	cmp	r2, r3
 800e902:	d803      	bhi.n	800e90c <HAL_SPI_Transmit+0x158>
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d102      	bne.n	800e912 <HAL_SPI_Transmit+0x15e>
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e912:	2303      	movs	r3, #3
 800e914:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e916:	e074      	b.n	800ea02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1ce      	bne.n	800e8c0 <HAL_SPI_Transmit+0x10c>
 800e922:	e04c      	b.n	800e9be <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d002      	beq.n	800e932 <HAL_SPI_Transmit+0x17e>
 800e92c:	8afb      	ldrh	r3, [r7, #22]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d140      	bne.n	800e9b4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	330c      	adds	r3, #12
 800e93c:	7812      	ldrb	r2, [r2, #0]
 800e93e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e944:	1c5a      	adds	r2, r3, #1
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e94e:	b29b      	uxth	r3, r3
 800e950:	3b01      	subs	r3, #1
 800e952:	b29a      	uxth	r2, r3
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e958:	e02c      	b.n	800e9b4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	f003 0302 	and.w	r3, r3, #2
 800e964:	2b02      	cmp	r3, #2
 800e966:	d113      	bne.n	800e990 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	330c      	adds	r3, #12
 800e972:	7812      	ldrb	r2, [r2, #0]
 800e974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e984:	b29b      	uxth	r3, r3
 800e986:	3b01      	subs	r3, #1
 800e988:	b29a      	uxth	r2, r3
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e98e:	e011      	b.n	800e9b4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e990:	f7fb faa6 	bl	8009ee0 <HAL_GetTick>
 800e994:	4602      	mov	r2, r0
 800e996:	69bb      	ldr	r3, [r7, #24]
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	683a      	ldr	r2, [r7, #0]
 800e99c:	429a      	cmp	r2, r3
 800e99e:	d803      	bhi.n	800e9a8 <HAL_SPI_Transmit+0x1f4>
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9a6:	d102      	bne.n	800e9ae <HAL_SPI_Transmit+0x1fa>
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e9b2:	e026      	b.n	800ea02 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e9b8:	b29b      	uxth	r3, r3
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d1cd      	bne.n	800e95a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e9be:	69ba      	ldr	r2, [r7, #24]
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f000 fba4 	bl	800f110 <SPI_EndRxTxTransaction>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d002      	beq.n	800e9d4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	2220      	movs	r2, #32
 800e9d2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d10a      	bne.n	800e9f2 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e9dc:	2300      	movs	r3, #0
 800e9de:	613b      	str	r3, [r7, #16]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	613b      	str	r3, [r7, #16]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	613b      	str	r3, [r7, #16]
 800e9f0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d002      	beq.n	800ea00 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	77fb      	strb	r3, [r7, #31]
 800e9fe:	e000      	b.n	800ea02 <HAL_SPI_Transmit+0x24e>
  }

error:
 800ea00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ea12:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3720      	adds	r7, #32
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af02      	add	r7, sp, #8
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	603b      	str	r3, [r7, #0]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	685b      	ldr	r3, [r3, #4]
 800ea34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea38:	d112      	bne.n	800ea60 <HAL_SPI_Receive+0x44>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	689b      	ldr	r3, [r3, #8]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10e      	bne.n	800ea60 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	2204      	movs	r2, #4
 800ea46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ea4a:	88fa      	ldrh	r2, [r7, #6]
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	4613      	mov	r3, r2
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	68b9      	ldr	r1, [r7, #8]
 800ea56:	68f8      	ldr	r0, [r7, #12]
 800ea58:	f000 f8e9 	bl	800ec2e <HAL_SPI_TransmitReceive>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	e0e2      	b.n	800ec26 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d101      	bne.n	800ea6e <HAL_SPI_Receive+0x52>
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	e0db      	b.n	800ec26 <HAL_SPI_Receive+0x20a>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea76:	f7fb fa33 	bl	8009ee0 <HAL_GetTick>
 800ea7a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d002      	beq.n	800ea8e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ea88:	2302      	movs	r3, #2
 800ea8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea8c:	e0c2      	b.n	800ec14 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d002      	beq.n	800ea9a <HAL_SPI_Receive+0x7e>
 800ea94:	88fb      	ldrh	r3, [r7, #6]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d102      	bne.n	800eaa0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800ea9a:	2301      	movs	r3, #1
 800ea9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ea9e:	e0b9      	b.n	800ec14 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	2204      	movs	r2, #4
 800eaa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	68ba      	ldr	r2, [r7, #8]
 800eab2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	88fa      	ldrh	r2, [r7, #6]
 800eab8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	88fa      	ldrh	r2, [r7, #6]
 800eabe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	2200      	movs	r2, #0
 800eaca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	2200      	movs	r2, #0
 800ead0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2200      	movs	r2, #0
 800eadc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eae6:	d107      	bne.n	800eaf8 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eaf6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb02:	2b40      	cmp	r3, #64	; 0x40
 800eb04:	d007      	beq.n	800eb16 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb14:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d162      	bne.n	800ebe4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800eb1e:	e02e      	b.n	800eb7e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f003 0301 	and.w	r3, r3, #1
 800eb2a:	2b01      	cmp	r3, #1
 800eb2c:	d115      	bne.n	800eb5a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	f103 020c 	add.w	r2, r3, #12
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3a:	7812      	ldrb	r2, [r2, #0]
 800eb3c:	b2d2      	uxtb	r2, r2
 800eb3e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	3b01      	subs	r3, #1
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb58:	e011      	b.n	800eb7e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb5a:	f7fb f9c1 	bl	8009ee0 <HAL_GetTick>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	1ad3      	subs	r3, r2, r3
 800eb64:	683a      	ldr	r2, [r7, #0]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d803      	bhi.n	800eb72 <HAL_SPI_Receive+0x156>
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb70:	d102      	bne.n	800eb78 <HAL_SPI_Receive+0x15c>
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d102      	bne.n	800eb7e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800eb78:	2303      	movs	r3, #3
 800eb7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eb7c:	e04a      	b.n	800ec14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb82:	b29b      	uxth	r3, r3
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d1cb      	bne.n	800eb20 <HAL_SPI_Receive+0x104>
 800eb88:	e031      	b.n	800ebee <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d113      	bne.n	800ebc0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68da      	ldr	r2, [r3, #12]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba2:	b292      	uxth	r2, r2
 800eba4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebaa:	1c9a      	adds	r2, r3, #2
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebb4:	b29b      	uxth	r3, r3
 800ebb6:	3b01      	subs	r3, #1
 800ebb8:	b29a      	uxth	r2, r3
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ebbe:	e011      	b.n	800ebe4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ebc0:	f7fb f98e 	bl	8009ee0 <HAL_GetTick>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	693b      	ldr	r3, [r7, #16]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	429a      	cmp	r2, r3
 800ebce:	d803      	bhi.n	800ebd8 <HAL_SPI_Receive+0x1bc>
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd6:	d102      	bne.n	800ebde <HAL_SPI_Receive+0x1c2>
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d102      	bne.n	800ebe4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800ebde:	2303      	movs	r3, #3
 800ebe0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ebe2:	e017      	b.n	800ec14 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d1cd      	bne.n	800eb8a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ebee:	693a      	ldr	r2, [r7, #16]
 800ebf0:	6839      	ldr	r1, [r7, #0]
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f000 fa27 	bl	800f046 <SPI_EndRxTransaction>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d002      	beq.n	800ec04 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2220      	movs	r2, #32
 800ec02:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d002      	beq.n	800ec12 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	75fb      	strb	r3, [r7, #23]
 800ec10:	e000      	b.n	800ec14 <HAL_SPI_Receive+0x1f8>
  }

error :
 800ec12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3718      	adds	r7, #24
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b08c      	sub	sp, #48	; 0x30
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	60f8      	str	r0, [r7, #12]
 800ec36:	60b9      	str	r1, [r7, #8]
 800ec38:	607a      	str	r2, [r7, #4]
 800ec3a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d101      	bne.n	800ec54 <HAL_SPI_TransmitReceive+0x26>
 800ec50:	2302      	movs	r3, #2
 800ec52:	e18a      	b.n	800ef6a <HAL_SPI_TransmitReceive+0x33c>
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	2201      	movs	r2, #1
 800ec58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec5c:	f7fb f940 	bl	8009ee0 <HAL_GetTick>
 800ec60:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ec68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ec72:	887b      	ldrh	r3, [r7, #2]
 800ec74:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d00f      	beq.n	800ec9e <HAL_SPI_TransmitReceive+0x70>
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec84:	d107      	bne.n	800ec96 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	689b      	ldr	r3, [r3, #8]
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d103      	bne.n	800ec96 <HAL_SPI_TransmitReceive+0x68>
 800ec8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec92:	2b04      	cmp	r3, #4
 800ec94:	d003      	beq.n	800ec9e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ec96:	2302      	movs	r3, #2
 800ec98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ec9c:	e15b      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d005      	beq.n	800ecb0 <HAL_SPI_TransmitReceive+0x82>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <HAL_SPI_TransmitReceive+0x82>
 800ecaa:	887b      	ldrh	r3, [r7, #2]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d103      	bne.n	800ecb8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ecb6:	e14e      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	2b04      	cmp	r3, #4
 800ecc2:	d003      	beq.n	800eccc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2205      	movs	r2, #5
 800ecc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	687a      	ldr	r2, [r7, #4]
 800ecd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	887a      	ldrh	r2, [r7, #2]
 800ecdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	887a      	ldrh	r2, [r7, #2]
 800ece2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	68ba      	ldr	r2, [r7, #8]
 800ece8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	887a      	ldrh	r2, [r7, #2]
 800ecee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	887a      	ldrh	r2, [r7, #2]
 800ecf4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0c:	2b40      	cmp	r3, #64	; 0x40
 800ed0e:	d007      	beq.n	800ed20 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed28:	d178      	bne.n	800ee1c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d002      	beq.n	800ed38 <HAL_SPI_TransmitReceive+0x10a>
 800ed32:	8b7b      	ldrh	r3, [r7, #26]
 800ed34:	2b01      	cmp	r3, #1
 800ed36:	d166      	bne.n	800ee06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3c:	881a      	ldrh	r2, [r3, #0]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed48:	1c9a      	adds	r2, r3, #2
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	3b01      	subs	r3, #1
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed5c:	e053      	b.n	800ee06 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	689b      	ldr	r3, [r3, #8]
 800ed64:	f003 0302 	and.w	r3, r3, #2
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d11b      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x176>
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d016      	beq.n	800eda4 <HAL_SPI_TransmitReceive+0x176>
 800ed76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	d113      	bne.n	800eda4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed80:	881a      	ldrh	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed8c:	1c9a      	adds	r2, r3, #2
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	3b01      	subs	r3, #1
 800ed9a:	b29a      	uxth	r2, r3
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eda0:	2300      	movs	r3, #0
 800eda2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	689b      	ldr	r3, [r3, #8]
 800edaa:	f003 0301 	and.w	r3, r3, #1
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d119      	bne.n	800ede6 <HAL_SPI_TransmitReceive+0x1b8>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edb6:	b29b      	uxth	r3, r3
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d014      	beq.n	800ede6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	68da      	ldr	r2, [r3, #12]
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edc6:	b292      	uxth	r2, r2
 800edc8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edce:	1c9a      	adds	r2, r3, #2
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edd8:	b29b      	uxth	r3, r3
 800edda:	3b01      	subs	r3, #1
 800eddc:	b29a      	uxth	r2, r3
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ede2:	2301      	movs	r3, #1
 800ede4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ede6:	f7fb f87b 	bl	8009ee0 <HAL_GetTick>
 800edea:	4602      	mov	r2, r0
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	1ad3      	subs	r3, r2, r3
 800edf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d807      	bhi.n	800ee06 <HAL_SPI_TransmitReceive+0x1d8>
 800edf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfc:	d003      	beq.n	800ee06 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800edfe:	2303      	movs	r3, #3
 800ee00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee04:	e0a7      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d1a6      	bne.n	800ed5e <HAL_SPI_TransmitReceive+0x130>
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d1a1      	bne.n	800ed5e <HAL_SPI_TransmitReceive+0x130>
 800ee1a:	e07c      	b.n	800ef16 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d002      	beq.n	800ee2a <HAL_SPI_TransmitReceive+0x1fc>
 800ee24:	8b7b      	ldrh	r3, [r7, #26]
 800ee26:	2b01      	cmp	r3, #1
 800ee28:	d16b      	bne.n	800ef02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	330c      	adds	r3, #12
 800ee34:	7812      	ldrb	r2, [r2, #0]
 800ee36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee46:	b29b      	uxth	r3, r3
 800ee48:	3b01      	subs	r3, #1
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee50:	e057      	b.n	800ef02 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	689b      	ldr	r3, [r3, #8]
 800ee58:	f003 0302 	and.w	r3, r3, #2
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d11c      	bne.n	800ee9a <HAL_SPI_TransmitReceive+0x26c>
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d017      	beq.n	800ee9a <HAL_SPI_TransmitReceive+0x26c>
 800ee6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d114      	bne.n	800ee9a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	330c      	adds	r3, #12
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	3b01      	subs	r3, #1
 800ee90:	b29a      	uxth	r2, r3
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ee96:	2300      	movs	r3, #0
 800ee98:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	689b      	ldr	r3, [r3, #8]
 800eea0:	f003 0301 	and.w	r3, r3, #1
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	d119      	bne.n	800eedc <HAL_SPI_TransmitReceive+0x2ae>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeac:	b29b      	uxth	r3, r3
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d014      	beq.n	800eedc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	68da      	ldr	r2, [r3, #12]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eebc:	b2d2      	uxtb	r2, r2
 800eebe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec4:	1c5a      	adds	r2, r3, #1
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eece:	b29b      	uxth	r3, r3
 800eed0:	3b01      	subs	r3, #1
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eed8:	2301      	movs	r3, #1
 800eeda:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800eedc:	f7fb f800 	bl	8009ee0 <HAL_GetTick>
 800eee0:	4602      	mov	r2, r0
 800eee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee4:	1ad3      	subs	r3, r2, r3
 800eee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d803      	bhi.n	800eef4 <HAL_SPI_TransmitReceive+0x2c6>
 800eeec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eef2:	d102      	bne.n	800eefa <HAL_SPI_TransmitReceive+0x2cc>
 800eef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d103      	bne.n	800ef02 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800eefa:	2303      	movs	r3, #3
 800eefc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ef00:	e029      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1a2      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x224>
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef10:	b29b      	uxth	r3, r3
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d19d      	bne.n	800ee52 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ef1a:	68f8      	ldr	r0, [r7, #12]
 800ef1c:	f000 f8f8 	bl	800f110 <SPI_EndRxTxTransaction>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d006      	beq.n	800ef34 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ef26:	2301      	movs	r3, #1
 800ef28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	2220      	movs	r2, #32
 800ef30:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ef32:	e010      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	689b      	ldr	r3, [r3, #8]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d10b      	bne.n	800ef54 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	617b      	str	r3, [r7, #20]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	617b      	str	r3, [r7, #20]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	617b      	str	r3, [r7, #20]
 800ef50:	697b      	ldr	r3, [r7, #20]
 800ef52:	e000      	b.n	800ef56 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ef54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	2201      	movs	r2, #1
 800ef5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2200      	movs	r2, #0
 800ef62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ef66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3730      	adds	r7, #48	; 0x30
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ef72:	b580      	push	{r7, lr}
 800ef74:	b084      	sub	sp, #16
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	60f8      	str	r0, [r7, #12]
 800ef7a:	60b9      	str	r1, [r7, #8]
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef82:	e04c      	b.n	800f01e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8a:	d048      	beq.n	800f01e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ef8c:	f7fa ffa8 	bl	8009ee0 <HAL_GetTick>
 800ef90:	4602      	mov	r2, r0
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	1ad3      	subs	r3, r2, r3
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d902      	bls.n	800efa2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d13d      	bne.n	800f01e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	685a      	ldr	r2, [r3, #4]
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800efb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800efba:	d111      	bne.n	800efe0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	689b      	ldr	r3, [r3, #8]
 800efc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800efc4:	d004      	beq.n	800efd0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	689b      	ldr	r3, [r3, #8]
 800efca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efce:	d107      	bne.n	800efe0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800efde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800efe8:	d10f      	bne.n	800f00a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800eff8:	601a      	str	r2, [r3, #0]
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	681a      	ldr	r2, [r3, #0]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	2201      	movs	r2, #1
 800f00e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	2200      	movs	r2, #0
 800f016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800f01a:	2303      	movs	r3, #3
 800f01c:	e00f      	b.n	800f03e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	689a      	ldr	r2, [r3, #8]
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	4013      	ands	r3, r2
 800f028:	68ba      	ldr	r2, [r7, #8]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	bf0c      	ite	eq
 800f02e:	2301      	moveq	r3, #1
 800f030:	2300      	movne	r3, #0
 800f032:	b2db      	uxtb	r3, r3
 800f034:	461a      	mov	r2, r3
 800f036:	79fb      	ldrb	r3, [r7, #7]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d1a3      	bne.n	800ef84 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f046:	b580      	push	{r7, lr}
 800f048:	b086      	sub	sp, #24
 800f04a:	af02      	add	r7, sp, #8
 800f04c:	60f8      	str	r0, [r7, #12]
 800f04e:	60b9      	str	r1, [r7, #8]
 800f050:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f05a:	d111      	bne.n	800f080 <SPI_EndRxTransaction+0x3a>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f064:	d004      	beq.n	800f070 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	689b      	ldr	r3, [r3, #8]
 800f06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f06e:	d107      	bne.n	800f080 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f07e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f088:	d12a      	bne.n	800f0e0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	689b      	ldr	r3, [r3, #8]
 800f08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f092:	d012      	beq.n	800f0ba <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2200      	movs	r2, #0
 800f09c:	2180      	movs	r1, #128	; 0x80
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff ff67 	bl	800ef72 <SPI_WaitFlagStateUntilTimeout>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d02d      	beq.n	800f106 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0ae:	f043 0220 	orr.w	r2, r3, #32
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0b6:	2303      	movs	r3, #3
 800f0b8:	e026      	b.n	800f108 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	2101      	movs	r1, #1
 800f0c4:	68f8      	ldr	r0, [r7, #12]
 800f0c6:	f7ff ff54 	bl	800ef72 <SPI_WaitFlagStateUntilTimeout>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d01a      	beq.n	800f106 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0d4:	f043 0220 	orr.w	r2, r3, #32
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800f0dc:	2303      	movs	r3, #3
 800f0de:	e013      	b.n	800f108 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	2101      	movs	r1, #1
 800f0ea:	68f8      	ldr	r0, [r7, #12]
 800f0ec:	f7ff ff41 	bl	800ef72 <SPI_WaitFlagStateUntilTimeout>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d007      	beq.n	800f106 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0fa:	f043 0220 	orr.w	r2, r3, #32
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f102:	2303      	movs	r3, #3
 800f104:	e000      	b.n	800f108 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b088      	sub	sp, #32
 800f114:	af02      	add	r7, sp, #8
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f11c:	4b1b      	ldr	r3, [pc, #108]	; (800f18c <SPI_EndRxTxTransaction+0x7c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <SPI_EndRxTxTransaction+0x80>)
 800f122:	fba2 2303 	umull	r2, r3, r2, r3
 800f126:	0d5b      	lsrs	r3, r3, #21
 800f128:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f12c:	fb02 f303 	mul.w	r3, r2, r3
 800f130:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f13a:	d112      	bne.n	800f162 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	2200      	movs	r2, #0
 800f144:	2180      	movs	r1, #128	; 0x80
 800f146:	68f8      	ldr	r0, [r7, #12]
 800f148:	f7ff ff13 	bl	800ef72 <SPI_WaitFlagStateUntilTimeout>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d016      	beq.n	800f180 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f156:	f043 0220 	orr.w	r2, r3, #32
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f15e:	2303      	movs	r3, #3
 800f160:	e00f      	b.n	800f182 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d00a      	beq.n	800f17e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f168:	697b      	ldr	r3, [r7, #20]
 800f16a:	3b01      	subs	r3, #1
 800f16c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f178:	2b80      	cmp	r3, #128	; 0x80
 800f17a:	d0f2      	beq.n	800f162 <SPI_EndRxTxTransaction+0x52>
 800f17c:	e000      	b.n	800f180 <SPI_EndRxTxTransaction+0x70>
        break;
 800f17e:	bf00      	nop
  }

  return HAL_OK;
 800f180:	2300      	movs	r3, #0
}
 800f182:	4618      	mov	r0, r3
 800f184:	3718      	adds	r7, #24
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	20000000 	.word	0x20000000
 800f190:	165e9f81 	.word	0x165e9f81

0800f194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f1a2:	2301      	movs	r3, #1
 800f1a4:	e01d      	b.n	800f1e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d106      	bne.n	800f1c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7f8 f900 	bl	80073c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2202      	movs	r2, #2
 800f1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	3304      	adds	r3, #4
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	4610      	mov	r0, r2
 800f1d4:	f000 fb56 	bl	800f884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b085      	sub	sp, #20
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	68da      	ldr	r2, [r3, #12]
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	f042 0201 	orr.w	r2, r2, #1
 800f200:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	689b      	ldr	r3, [r3, #8]
 800f208:	f003 0307 	and.w	r3, r3, #7
 800f20c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	2b06      	cmp	r3, #6
 800f212:	d007      	beq.n	800f224 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f042 0201 	orr.w	r2, r2, #1
 800f222:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr

0800f232 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f232:	b580      	push	{r7, lr}
 800f234:	b082      	sub	sp, #8
 800f236:	af00      	add	r7, sp, #0
 800f238:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d101      	bne.n	800f244 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	e01d      	b.n	800f280 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f24a:	b2db      	uxtb	r3, r3
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d106      	bne.n	800f25e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2200      	movs	r2, #0
 800f254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7f8 f83d 	bl	80072d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2202      	movs	r2, #2
 800f262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	3304      	adds	r3, #4
 800f26e:	4619      	mov	r1, r3
 800f270:	4610      	mov	r0, r2
 800f272:	f000 fb07 	bl	800f884 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2201      	movs	r2, #1
 800f27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3708      	adds	r7, #8
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2201      	movs	r2, #1
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	4618      	mov	r0, r3
 800f29c:	f000 fd42 	bl	800fd24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a15      	ldr	r2, [pc, #84]	; (800f2fc <HAL_TIM_PWM_Start+0x74>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d004      	beq.n	800f2b4 <HAL_TIM_PWM_Start+0x2c>
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	4a14      	ldr	r2, [pc, #80]	; (800f300 <HAL_TIM_PWM_Start+0x78>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d101      	bne.n	800f2b8 <HAL_TIM_PWM_Start+0x30>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	e000      	b.n	800f2ba <HAL_TIM_PWM_Start+0x32>
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d007      	beq.n	800f2ce <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f2cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	f003 0307 	and.w	r3, r3, #7
 800f2d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b06      	cmp	r3, #6
 800f2de:	d007      	beq.n	800f2f0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	681a      	ldr	r2, [r3, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f042 0201 	orr.w	r2, r2, #1
 800f2ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}
 800f2fa:	bf00      	nop
 800f2fc:	40010000 	.word	0x40010000
 800f300:	40010400 	.word	0x40010400

0800f304 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b086      	sub	sp, #24
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e083      	b.n	800f420 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f31e:	b2db      	uxtb	r3, r3
 800f320:	2b00      	cmp	r3, #0
 800f322:	d106      	bne.n	800f332 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2200      	movs	r2, #0
 800f328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7f8 f8d7 	bl	80074e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2202      	movs	r2, #2
 800f336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	689b      	ldr	r3, [r3, #8]
 800f340:	687a      	ldr	r2, [r7, #4]
 800f342:	6812      	ldr	r2, [r2, #0]
 800f344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f348:	f023 0307 	bic.w	r3, r3, #7
 800f34c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	3304      	adds	r3, #4
 800f356:	4619      	mov	r1, r3
 800f358:	4610      	mov	r0, r2
 800f35a:	f000 fa93 	bl	800f884 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	689b      	ldr	r3, [r3, #8]
 800f364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	697a      	ldr	r2, [r7, #20]
 800f37c:	4313      	orrs	r3, r2
 800f37e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f386:	f023 0303 	bic.w	r3, r3, #3
 800f38a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f38c:	683b      	ldr	r3, [r7, #0]
 800f38e:	689a      	ldr	r2, [r3, #8]
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	699b      	ldr	r3, [r3, #24]
 800f394:	021b      	lsls	r3, r3, #8
 800f396:	4313      	orrs	r3, r2
 800f398:	693a      	ldr	r2, [r7, #16]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f3a4:	f023 030c 	bic.w	r3, r3, #12
 800f3a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f3b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f3b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	68da      	ldr	r2, [r3, #12]
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	69db      	ldr	r3, [r3, #28]
 800f3be:	021b      	lsls	r3, r3, #8
 800f3c0:	4313      	orrs	r3, r2
 800f3c2:	693a      	ldr	r2, [r7, #16]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	691b      	ldr	r3, [r3, #16]
 800f3cc:	011a      	lsls	r2, r3, #4
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	031b      	lsls	r3, r3, #12
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	693a      	ldr	r2, [r7, #16]
 800f3d8:	4313      	orrs	r3, r2
 800f3da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f3e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f3ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	695b      	ldr	r3, [r3, #20]
 800f3f4:	011b      	lsls	r3, r3, #4
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	68fa      	ldr	r2, [r7, #12]
 800f3fa:	4313      	orrs	r3, r2
 800f3fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	697a      	ldr	r2, [r7, #20]
 800f404:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	693a      	ldr	r2, [r7, #16]
 800f40c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2201      	movs	r2, #1
 800f41a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f41e:	2300      	movs	r3, #0
}
 800f420:	4618      	mov	r0, r3
 800f422:	3718      	adds	r7, #24
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <HAL_TIM_Encoder_Start+0x16>
 800f438:	2b04      	cmp	r3, #4
 800f43a:	d008      	beq.n	800f44e <HAL_TIM_Encoder_Start+0x26>
 800f43c:	e00f      	b.n	800f45e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2201      	movs	r2, #1
 800f444:	2100      	movs	r1, #0
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fc6c 	bl	800fd24 <TIM_CCxChannelCmd>
      break;
 800f44c:	e016      	b.n	800f47c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	2201      	movs	r2, #1
 800f454:	2104      	movs	r1, #4
 800f456:	4618      	mov	r0, r3
 800f458:	f000 fc64 	bl	800fd24 <TIM_CCxChannelCmd>
      break;
 800f45c:	e00e      	b.n	800f47c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	2201      	movs	r2, #1
 800f464:	2100      	movs	r1, #0
 800f466:	4618      	mov	r0, r3
 800f468:	f000 fc5c 	bl	800fd24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2201      	movs	r2, #1
 800f472:	2104      	movs	r1, #4
 800f474:	4618      	mov	r0, r3
 800f476:	f000 fc55 	bl	800fd24 <TIM_CCxChannelCmd>
      break;
 800f47a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f042 0201 	orr.w	r2, r2, #1
 800f48a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f496:	b580      	push	{r7, lr}
 800f498:	b082      	sub	sp, #8
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	691b      	ldr	r3, [r3, #16]
 800f4a4:	f003 0302 	and.w	r3, r3, #2
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d122      	bne.n	800f4f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	f003 0302 	and.w	r3, r3, #2
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	d11b      	bne.n	800f4f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f06f 0202 	mvn.w	r2, #2
 800f4c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	699b      	ldr	r3, [r3, #24]
 800f4d0:	f003 0303 	and.w	r3, r3, #3
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d003      	beq.n	800f4e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f9b5 	bl	800f848 <HAL_TIM_IC_CaptureCallback>
 800f4de:	e005      	b.n	800f4ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 f9a7 	bl	800f834 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f000 f9b8 	bl	800f85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	691b      	ldr	r3, [r3, #16]
 800f4f8:	f003 0304 	and.w	r3, r3, #4
 800f4fc:	2b04      	cmp	r3, #4
 800f4fe:	d122      	bne.n	800f546 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	f003 0304 	and.w	r3, r3, #4
 800f50a:	2b04      	cmp	r3, #4
 800f50c:	d11b      	bne.n	800f546 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f06f 0204 	mvn.w	r2, #4
 800f516:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2202      	movs	r2, #2
 800f51c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d003      	beq.n	800f534 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f98b 	bl	800f848 <HAL_TIM_IC_CaptureCallback>
 800f532:	e005      	b.n	800f540 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 f97d 	bl	800f834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f53a:	6878      	ldr	r0, [r7, #4]
 800f53c:	f000 f98e 	bl	800f85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2200      	movs	r2, #0
 800f544:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	691b      	ldr	r3, [r3, #16]
 800f54c:	f003 0308 	and.w	r3, r3, #8
 800f550:	2b08      	cmp	r3, #8
 800f552:	d122      	bne.n	800f59a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	68db      	ldr	r3, [r3, #12]
 800f55a:	f003 0308 	and.w	r3, r3, #8
 800f55e:	2b08      	cmp	r3, #8
 800f560:	d11b      	bne.n	800f59a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	f06f 0208 	mvn.w	r2, #8
 800f56a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2204      	movs	r2, #4
 800f570:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	69db      	ldr	r3, [r3, #28]
 800f578:	f003 0303 	and.w	r3, r3, #3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d003      	beq.n	800f588 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f961 	bl	800f848 <HAL_TIM_IC_CaptureCallback>
 800f586:	e005      	b.n	800f594 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f000 f953 	bl	800f834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 f964 	bl	800f85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2200      	movs	r2, #0
 800f598:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	691b      	ldr	r3, [r3, #16]
 800f5a0:	f003 0310 	and.w	r3, r3, #16
 800f5a4:	2b10      	cmp	r3, #16
 800f5a6:	d122      	bne.n	800f5ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	68db      	ldr	r3, [r3, #12]
 800f5ae:	f003 0310 	and.w	r3, r3, #16
 800f5b2:	2b10      	cmp	r3, #16
 800f5b4:	d11b      	bne.n	800f5ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f06f 0210 	mvn.w	r2, #16
 800f5be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2208      	movs	r2, #8
 800f5c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	69db      	ldr	r3, [r3, #28]
 800f5cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d003      	beq.n	800f5dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f000 f937 	bl	800f848 <HAL_TIM_IC_CaptureCallback>
 800f5da:	e005      	b.n	800f5e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f000 f929 	bl	800f834 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f000 f93a 	bl	800f85c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	691b      	ldr	r3, [r3, #16]
 800f5f4:	f003 0301 	and.w	r3, r3, #1
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d10e      	bne.n	800f61a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b01      	cmp	r3, #1
 800f608:	d107      	bne.n	800f61a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f06f 0201 	mvn.w	r2, #1
 800f612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f7f6 fc3b 	bl	8005e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	691b      	ldr	r3, [r3, #16]
 800f620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f624:	2b80      	cmp	r3, #128	; 0x80
 800f626:	d10e      	bne.n	800f646 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f632:	2b80      	cmp	r3, #128	; 0x80
 800f634:	d107      	bne.n	800f646 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f640:	6878      	ldr	r0, [r7, #4]
 800f642:	f000 fc6d 	bl	800ff20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f650:	2b40      	cmp	r3, #64	; 0x40
 800f652:	d10e      	bne.n	800f672 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	68db      	ldr	r3, [r3, #12]
 800f65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f65e:	2b40      	cmp	r3, #64	; 0x40
 800f660:	d107      	bne.n	800f672 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f66a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 f8ff 	bl	800f870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	691b      	ldr	r3, [r3, #16]
 800f678:	f003 0320 	and.w	r3, r3, #32
 800f67c:	2b20      	cmp	r3, #32
 800f67e:	d10e      	bne.n	800f69e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	f003 0320 	and.w	r3, r3, #32
 800f68a:	2b20      	cmp	r3, #32
 800f68c:	d107      	bne.n	800f69e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	f06f 0220 	mvn.w	r2, #32
 800f696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f000 fc37 	bl	800ff0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f69e:	bf00      	nop
 800f6a0:	3708      	adds	r7, #8
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
	...

0800f6a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d101      	bne.n	800f6c2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f6be:	2302      	movs	r3, #2
 800f6c0:	e0b4      	b.n	800f82c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2202      	movs	r2, #2
 800f6ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2b0c      	cmp	r3, #12
 800f6d6:	f200 809f 	bhi.w	800f818 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f6da:	a201      	add	r2, pc, #4	; (adr r2, 800f6e0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6e0:	0800f715 	.word	0x0800f715
 800f6e4:	0800f819 	.word	0x0800f819
 800f6e8:	0800f819 	.word	0x0800f819
 800f6ec:	0800f819 	.word	0x0800f819
 800f6f0:	0800f755 	.word	0x0800f755
 800f6f4:	0800f819 	.word	0x0800f819
 800f6f8:	0800f819 	.word	0x0800f819
 800f6fc:	0800f819 	.word	0x0800f819
 800f700:	0800f797 	.word	0x0800f797
 800f704:	0800f819 	.word	0x0800f819
 800f708:	0800f819 	.word	0x0800f819
 800f70c:	0800f819 	.word	0x0800f819
 800f710:	0800f7d7 	.word	0x0800f7d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	68b9      	ldr	r1, [r7, #8]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 f952 	bl	800f9c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	699a      	ldr	r2, [r3, #24]
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f042 0208 	orr.w	r2, r2, #8
 800f72e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	699a      	ldr	r2, [r3, #24]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f022 0204 	bic.w	r2, r2, #4
 800f73e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	6999      	ldr	r1, [r3, #24]
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	691a      	ldr	r2, [r3, #16]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	430a      	orrs	r2, r1
 800f750:	619a      	str	r2, [r3, #24]
      break;
 800f752:	e062      	b.n	800f81a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	68b9      	ldr	r1, [r7, #8]
 800f75a:	4618      	mov	r0, r3
 800f75c:	f000 f9a2 	bl	800faa4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	699a      	ldr	r2, [r3, #24]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f76e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	699a      	ldr	r2, [r3, #24]
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	681b      	ldr	r3, [r3, #0]
 800f77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f77e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6999      	ldr	r1, [r3, #24]
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	691b      	ldr	r3, [r3, #16]
 800f78a:	021a      	lsls	r2, r3, #8
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	430a      	orrs	r2, r1
 800f792:	619a      	str	r2, [r3, #24]
      break;
 800f794:	e041      	b.n	800f81a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	68b9      	ldr	r1, [r7, #8]
 800f79c:	4618      	mov	r0, r3
 800f79e:	f000 f9f7 	bl	800fb90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	69da      	ldr	r2, [r3, #28]
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	f042 0208 	orr.w	r2, r2, #8
 800f7b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	69da      	ldr	r2, [r3, #28]
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f022 0204 	bic.w	r2, r2, #4
 800f7c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	69d9      	ldr	r1, [r3, #28]
 800f7c8:	68bb      	ldr	r3, [r7, #8]
 800f7ca:	691a      	ldr	r2, [r3, #16]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	430a      	orrs	r2, r1
 800f7d2:	61da      	str	r2, [r3, #28]
      break;
 800f7d4:	e021      	b.n	800f81a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68b9      	ldr	r1, [r7, #8]
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f000 fa4b 	bl	800fc78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	69da      	ldr	r2, [r3, #28]
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	69da      	ldr	r2, [r3, #28]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	69d9      	ldr	r1, [r3, #28]
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	021a      	lsls	r2, r3, #8
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	430a      	orrs	r2, r1
 800f814:	61da      	str	r2, [r3, #28]
      break;
 800f816:	e000      	b.n	800f81a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f818:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2201      	movs	r2, #1
 800f81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2200      	movs	r2, #0
 800f826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f82a:	2300      	movs	r3, #0
}
 800f82c:	4618      	mov	r0, r3
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f834:	b480      	push	{r7}
 800f836:	b083      	sub	sp, #12
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f83c:	bf00      	nop
 800f83e:	370c      	adds	r7, #12
 800f840:	46bd      	mov	sp, r7
 800f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f846:	4770      	bx	lr

0800f848 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f85c:	b480      	push	{r7}
 800f85e:	b083      	sub	sp, #12
 800f860:	af00      	add	r7, sp, #0
 800f862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f864:	bf00      	nop
 800f866:	370c      	adds	r7, #12
 800f868:	46bd      	mov	sp, r7
 800f86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86e:	4770      	bx	lr

0800f870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f870:	b480      	push	{r7}
 800f872:	b083      	sub	sp, #12
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f878:	bf00      	nop
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f884:	b480      	push	{r7}
 800f886:	b085      	sub	sp, #20
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a40      	ldr	r2, [pc, #256]	; (800f998 <TIM_Base_SetConfig+0x114>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d013      	beq.n	800f8c4 <TIM_Base_SetConfig+0x40>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8a2:	d00f      	beq.n	800f8c4 <TIM_Base_SetConfig+0x40>
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	4a3d      	ldr	r2, [pc, #244]	; (800f99c <TIM_Base_SetConfig+0x118>)
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d00b      	beq.n	800f8c4 <TIM_Base_SetConfig+0x40>
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	4a3c      	ldr	r2, [pc, #240]	; (800f9a0 <TIM_Base_SetConfig+0x11c>)
 800f8b0:	4293      	cmp	r3, r2
 800f8b2:	d007      	beq.n	800f8c4 <TIM_Base_SetConfig+0x40>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	4a3b      	ldr	r2, [pc, #236]	; (800f9a4 <TIM_Base_SetConfig+0x120>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d003      	beq.n	800f8c4 <TIM_Base_SetConfig+0x40>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	4a3a      	ldr	r2, [pc, #232]	; (800f9a8 <TIM_Base_SetConfig+0x124>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d108      	bne.n	800f8d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4a2f      	ldr	r2, [pc, #188]	; (800f998 <TIM_Base_SetConfig+0x114>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d02b      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8e4:	d027      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4a2c      	ldr	r2, [pc, #176]	; (800f99c <TIM_Base_SetConfig+0x118>)
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	d023      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4a2b      	ldr	r2, [pc, #172]	; (800f9a0 <TIM_Base_SetConfig+0x11c>)
 800f8f2:	4293      	cmp	r3, r2
 800f8f4:	d01f      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4a2a      	ldr	r2, [pc, #168]	; (800f9a4 <TIM_Base_SetConfig+0x120>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d01b      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4a29      	ldr	r2, [pc, #164]	; (800f9a8 <TIM_Base_SetConfig+0x124>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d017      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4a28      	ldr	r2, [pc, #160]	; (800f9ac <TIM_Base_SetConfig+0x128>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d013      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	4a27      	ldr	r2, [pc, #156]	; (800f9b0 <TIM_Base_SetConfig+0x12c>)
 800f912:	4293      	cmp	r3, r2
 800f914:	d00f      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a26      	ldr	r2, [pc, #152]	; (800f9b4 <TIM_Base_SetConfig+0x130>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00b      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a25      	ldr	r2, [pc, #148]	; (800f9b8 <TIM_Base_SetConfig+0x134>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d007      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a24      	ldr	r2, [pc, #144]	; (800f9bc <TIM_Base_SetConfig+0x138>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d003      	beq.n	800f936 <TIM_Base_SetConfig+0xb2>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a23      	ldr	r2, [pc, #140]	; (800f9c0 <TIM_Base_SetConfig+0x13c>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d108      	bne.n	800f948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f93c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	68fa      	ldr	r2, [r7, #12]
 800f944:	4313      	orrs	r3, r2
 800f946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	695b      	ldr	r3, [r3, #20]
 800f952:	4313      	orrs	r3, r2
 800f954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	689a      	ldr	r2, [r3, #8]
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	681a      	ldr	r2, [r3, #0]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4a0a      	ldr	r2, [pc, #40]	; (800f998 <TIM_Base_SetConfig+0x114>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d003      	beq.n	800f97c <TIM_Base_SetConfig+0xf8>
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	4a0c      	ldr	r2, [pc, #48]	; (800f9a8 <TIM_Base_SetConfig+0x124>)
 800f978:	4293      	cmp	r3, r2
 800f97a:	d103      	bne.n	800f984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	691a      	ldr	r2, [r3, #16]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2201      	movs	r2, #1
 800f988:	615a      	str	r2, [r3, #20]
}
 800f98a:	bf00      	nop
 800f98c:	3714      	adds	r7, #20
 800f98e:	46bd      	mov	sp, r7
 800f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f994:	4770      	bx	lr
 800f996:	bf00      	nop
 800f998:	40010000 	.word	0x40010000
 800f99c:	40000400 	.word	0x40000400
 800f9a0:	40000800 	.word	0x40000800
 800f9a4:	40000c00 	.word	0x40000c00
 800f9a8:	40010400 	.word	0x40010400
 800f9ac:	40014000 	.word	0x40014000
 800f9b0:	40014400 	.word	0x40014400
 800f9b4:	40014800 	.word	0x40014800
 800f9b8:	40001800 	.word	0x40001800
 800f9bc:	40001c00 	.word	0x40001c00
 800f9c0:	40002000 	.word	0x40002000

0800f9c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b087      	sub	sp, #28
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	f023 0201 	bic.w	r2, r3, #1
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	6a1b      	ldr	r3, [r3, #32]
 800f9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	699b      	ldr	r3, [r3, #24]
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9ec:	68fb      	ldr	r3, [r7, #12]
 800f9ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	f023 0303 	bic.w	r3, r3, #3
 800f9fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa06:	697b      	ldr	r3, [r7, #20]
 800fa08:	f023 0302 	bic.w	r3, r3, #2
 800fa0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	689b      	ldr	r3, [r3, #8]
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	4a20      	ldr	r2, [pc, #128]	; (800fa9c <TIM_OC1_SetConfig+0xd8>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d003      	beq.n	800fa28 <TIM_OC1_SetConfig+0x64>
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	4a1f      	ldr	r2, [pc, #124]	; (800faa0 <TIM_OC1_SetConfig+0xdc>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d10c      	bne.n	800fa42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	f023 0308 	bic.w	r3, r3, #8
 800fa2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	68db      	ldr	r3, [r3, #12]
 800fa34:	697a      	ldr	r2, [r7, #20]
 800fa36:	4313      	orrs	r3, r2
 800fa38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	f023 0304 	bic.w	r3, r3, #4
 800fa40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	4a15      	ldr	r2, [pc, #84]	; (800fa9c <TIM_OC1_SetConfig+0xd8>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d003      	beq.n	800fa52 <TIM_OC1_SetConfig+0x8e>
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	4a14      	ldr	r2, [pc, #80]	; (800faa0 <TIM_OC1_SetConfig+0xdc>)
 800fa4e:	4293      	cmp	r3, r2
 800fa50:	d111      	bne.n	800fa76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fa60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	695b      	ldr	r3, [r3, #20]
 800fa66:	693a      	ldr	r2, [r7, #16]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	699b      	ldr	r3, [r3, #24]
 800fa70:	693a      	ldr	r2, [r7, #16]
 800fa72:	4313      	orrs	r3, r2
 800fa74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa82:	683b      	ldr	r3, [r7, #0]
 800fa84:	685a      	ldr	r2, [r3, #4]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	697a      	ldr	r2, [r7, #20]
 800fa8e:	621a      	str	r2, [r3, #32]
}
 800fa90:	bf00      	nop
 800fa92:	371c      	adds	r7, #28
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr
 800fa9c:	40010000 	.word	0x40010000
 800faa0:	40010400 	.word	0x40010400

0800faa4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b087      	sub	sp, #28
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
 800faac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a1b      	ldr	r3, [r3, #32]
 800fab2:	f023 0210 	bic.w	r2, r3, #16
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6a1b      	ldr	r3, [r3, #32]
 800fabe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	685b      	ldr	r3, [r3, #4]
 800fac4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	021b      	lsls	r3, r3, #8
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	4313      	orrs	r3, r2
 800fae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	f023 0320 	bic.w	r3, r3, #32
 800faee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800faf0:	683b      	ldr	r3, [r7, #0]
 800faf2:	689b      	ldr	r3, [r3, #8]
 800faf4:	011b      	lsls	r3, r3, #4
 800faf6:	697a      	ldr	r2, [r7, #20]
 800faf8:	4313      	orrs	r3, r2
 800fafa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	4a22      	ldr	r2, [pc, #136]	; (800fb88 <TIM_OC2_SetConfig+0xe4>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d003      	beq.n	800fb0c <TIM_OC2_SetConfig+0x68>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	4a21      	ldr	r2, [pc, #132]	; (800fb8c <TIM_OC2_SetConfig+0xe8>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d10d      	bne.n	800fb28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	68db      	ldr	r3, [r3, #12]
 800fb18:	011b      	lsls	r3, r3, #4
 800fb1a:	697a      	ldr	r2, [r7, #20]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fb20:	697b      	ldr	r3, [r7, #20]
 800fb22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a17      	ldr	r2, [pc, #92]	; (800fb88 <TIM_OC2_SetConfig+0xe4>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d003      	beq.n	800fb38 <TIM_OC2_SetConfig+0x94>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	4a16      	ldr	r2, [pc, #88]	; (800fb8c <TIM_OC2_SetConfig+0xe8>)
 800fb34:	4293      	cmp	r3, r2
 800fb36:	d113      	bne.n	800fb60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	009b      	lsls	r3, r3, #2
 800fb4e:	693a      	ldr	r2, [r7, #16]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	699b      	ldr	r3, [r3, #24]
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	693a      	ldr	r2, [r7, #16]
 800fb5c:	4313      	orrs	r3, r2
 800fb5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	685a      	ldr	r2, [r3, #4]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	697a      	ldr	r2, [r7, #20]
 800fb78:	621a      	str	r2, [r3, #32]
}
 800fb7a:	bf00      	nop
 800fb7c:	371c      	adds	r7, #28
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	40010000 	.word	0x40010000
 800fb8c:	40010400 	.word	0x40010400

0800fb90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b087      	sub	sp, #28
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6a1b      	ldr	r3, [r3, #32]
 800fb9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6a1b      	ldr	r3, [r3, #32]
 800fbaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	69db      	ldr	r3, [r3, #28]
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f023 0303 	bic.w	r3, r3, #3
 800fbc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	68fa      	ldr	r2, [r7, #12]
 800fbce:	4313      	orrs	r3, r2
 800fbd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fbd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	021b      	lsls	r3, r3, #8
 800fbe0:	697a      	ldr	r2, [r7, #20]
 800fbe2:	4313      	orrs	r3, r2
 800fbe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	4a21      	ldr	r2, [pc, #132]	; (800fc70 <TIM_OC3_SetConfig+0xe0>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d003      	beq.n	800fbf6 <TIM_OC3_SetConfig+0x66>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	4a20      	ldr	r2, [pc, #128]	; (800fc74 <TIM_OC3_SetConfig+0xe4>)
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	d10d      	bne.n	800fc12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	021b      	lsls	r3, r3, #8
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	4313      	orrs	r3, r2
 800fc08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fc10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	4a16      	ldr	r2, [pc, #88]	; (800fc70 <TIM_OC3_SetConfig+0xe0>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d003      	beq.n	800fc22 <TIM_OC3_SetConfig+0x92>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4a15      	ldr	r2, [pc, #84]	; (800fc74 <TIM_OC3_SetConfig+0xe4>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d113      	bne.n	800fc4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fc2a:	693b      	ldr	r3, [r7, #16]
 800fc2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fc30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	695b      	ldr	r3, [r3, #20]
 800fc36:	011b      	lsls	r3, r3, #4
 800fc38:	693a      	ldr	r2, [r7, #16]
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	699b      	ldr	r3, [r3, #24]
 800fc42:	011b      	lsls	r3, r3, #4
 800fc44:	693a      	ldr	r2, [r7, #16]
 800fc46:	4313      	orrs	r3, r2
 800fc48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	693a      	ldr	r2, [r7, #16]
 800fc4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	68fa      	ldr	r2, [r7, #12]
 800fc54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	685a      	ldr	r2, [r3, #4]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	697a      	ldr	r2, [r7, #20]
 800fc62:	621a      	str	r2, [r3, #32]
}
 800fc64:	bf00      	nop
 800fc66:	371c      	adds	r7, #28
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	40010000 	.word	0x40010000
 800fc74:	40010400 	.word	0x40010400

0800fc78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6a1b      	ldr	r3, [r3, #32]
 800fc92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	69db      	ldr	r3, [r3, #28]
 800fc9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	021b      	lsls	r3, r3, #8
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fcc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	031b      	lsls	r3, r3, #12
 800fcca:	693a      	ldr	r2, [r7, #16]
 800fccc:	4313      	orrs	r3, r2
 800fcce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	4a12      	ldr	r2, [pc, #72]	; (800fd1c <TIM_OC4_SetConfig+0xa4>)
 800fcd4:	4293      	cmp	r3, r2
 800fcd6:	d003      	beq.n	800fce0 <TIM_OC4_SetConfig+0x68>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	4a11      	ldr	r2, [pc, #68]	; (800fd20 <TIM_OC4_SetConfig+0xa8>)
 800fcdc:	4293      	cmp	r3, r2
 800fcde:	d109      	bne.n	800fcf4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fce0:	697b      	ldr	r3, [r7, #20]
 800fce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fce6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fce8:	683b      	ldr	r3, [r7, #0]
 800fcea:	695b      	ldr	r3, [r3, #20]
 800fcec:	019b      	lsls	r3, r3, #6
 800fcee:	697a      	ldr	r2, [r7, #20]
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	685a      	ldr	r2, [r3, #4]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	693a      	ldr	r2, [r7, #16]
 800fd0c:	621a      	str	r2, [r3, #32]
}
 800fd0e:	bf00      	nop
 800fd10:	371c      	adds	r7, #28
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr
 800fd1a:	bf00      	nop
 800fd1c:	40010000 	.word	0x40010000
 800fd20:	40010400 	.word	0x40010400

0800fd24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fd24:	b480      	push	{r7}
 800fd26:	b087      	sub	sp, #28
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fd30:	68bb      	ldr	r3, [r7, #8]
 800fd32:	f003 031f 	and.w	r3, r3, #31
 800fd36:	2201      	movs	r2, #1
 800fd38:	fa02 f303 	lsl.w	r3, r2, r3
 800fd3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6a1a      	ldr	r2, [r3, #32]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	43db      	mvns	r3, r3
 800fd46:	401a      	ands	r2, r3
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a1a      	ldr	r2, [r3, #32]
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	f003 031f 	and.w	r3, r3, #31
 800fd56:	6879      	ldr	r1, [r7, #4]
 800fd58:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5c:	431a      	orrs	r2, r3
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	621a      	str	r2, [r3, #32]
}
 800fd62:	bf00      	nop
 800fd64:	371c      	adds	r7, #28
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
	...

0800fd70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b085      	sub	sp, #20
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd80:	2b01      	cmp	r3, #1
 800fd82:	d101      	bne.n	800fd88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fd84:	2302      	movs	r3, #2
 800fd86:	e05a      	b.n	800fe3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2202      	movs	r2, #2
 800fd94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	689b      	ldr	r3, [r3, #8]
 800fda6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fdae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	68fa      	ldr	r2, [r7, #12]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	68fa      	ldr	r2, [r7, #12]
 800fdc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	4a21      	ldr	r2, [pc, #132]	; (800fe4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fdc8:	4293      	cmp	r3, r2
 800fdca:	d022      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fdd4:	d01d      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a1d      	ldr	r2, [pc, #116]	; (800fe50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d018      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	4a1b      	ldr	r2, [pc, #108]	; (800fe54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fde6:	4293      	cmp	r3, r2
 800fde8:	d013      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4a1a      	ldr	r2, [pc, #104]	; (800fe58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d00e      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4a18      	ldr	r2, [pc, #96]	; (800fe5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d009      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	4a17      	ldr	r2, [pc, #92]	; (800fe60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d004      	beq.n	800fe12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	4a15      	ldr	r2, [pc, #84]	; (800fe64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fe0e:	4293      	cmp	r3, r2
 800fe10:	d10c      	bne.n	800fe2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	685b      	ldr	r3, [r3, #4]
 800fe1e:	68ba      	ldr	r2, [r7, #8]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	2201      	movs	r2, #1
 800fe30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe3c:	2300      	movs	r3, #0
}
 800fe3e:	4618      	mov	r0, r3
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	40010000 	.word	0x40010000
 800fe50:	40000400 	.word	0x40000400
 800fe54:	40000800 	.word	0x40000800
 800fe58:	40000c00 	.word	0x40000c00
 800fe5c:	40010400 	.word	0x40010400
 800fe60:	40014000 	.word	0x40014000
 800fe64:	40001800 	.word	0x40001800

0800fe68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fe72:	2300      	movs	r3, #0
 800fe74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe7c:	2b01      	cmp	r3, #1
 800fe7e:	d101      	bne.n	800fe84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fe80:	2302      	movs	r3, #2
 800fe82:	e03d      	b.n	800ff00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2201      	movs	r2, #1
 800fe88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	68db      	ldr	r3, [r3, #12]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fea0:	683b      	ldr	r3, [r7, #0]
 800fea2:	689b      	ldr	r3, [r3, #8]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800feae:	683b      	ldr	r3, [r7, #0]
 800feb0:	685b      	ldr	r3, [r3, #4]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	4313      	orrs	r3, r2
 800fec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	4313      	orrs	r3, r2
 800fed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	695b      	ldr	r3, [r3, #20]
 800fedc:	4313      	orrs	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	69db      	ldr	r3, [r3, #28]
 800feea:	4313      	orrs	r3, r2
 800feec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	68fa      	ldr	r2, [r7, #12]
 800fef4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3714      	adds	r7, #20
 800ff04:	46bd      	mov	sp, r7
 800ff06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0a:	4770      	bx	lr

0800ff0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ff14:	bf00      	nop
 800ff16:	370c      	adds	r7, #12
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1e:	4770      	bx	lr

0800ff20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ff28:	bf00      	nop
 800ff2a:	370c      	adds	r7, #12
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff32:	4770      	bx	lr

0800ff34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b082      	sub	sp, #8
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d101      	bne.n	800ff46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ff42:	2301      	movs	r3, #1
 800ff44:	e03f      	b.n	800ffc6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ff4c:	b2db      	uxtb	r3, r3
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d106      	bne.n	800ff60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7f7 fbea 	bl	8007734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2224      	movs	r2, #36	; 0x24
 800ff64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ff76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f000 f829 	bl	800ffd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	691a      	ldr	r2, [r3, #16]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ff8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	695a      	ldr	r2, [r3, #20]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ff9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68da      	ldr	r2, [r3, #12]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ffac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2220      	movs	r2, #32
 800ffb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2220      	movs	r2, #32
 800ffc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3708      	adds	r7, #8
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	b085      	sub	sp, #20
 800ffd6:	af00      	add	r7, sp, #0
 800ffd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	691b      	ldr	r3, [r3, #16]
 800ffe0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	68da      	ldr	r2, [r3, #12]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	430a      	orrs	r2, r1
 800ffee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	689a      	ldr	r2, [r3, #8]
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	691b      	ldr	r3, [r3, #16]
 800fff8:	431a      	orrs	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	695b      	ldr	r3, [r3, #20]
 800fffe:	431a      	orrs	r2, r3
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	69db      	ldr	r3, [r3, #28]
 8010004:	4313      	orrs	r3, r2
 8010006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8010012:	f023 030c 	bic.w	r3, r3, #12
 8010016:	687a      	ldr	r2, [r7, #4]
 8010018:	6812      	ldr	r2, [r2, #0]
 801001a:	68f9      	ldr	r1, [r7, #12]
 801001c:	430b      	orrs	r3, r1
 801001e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	695b      	ldr	r3, [r3, #20]
 8010026:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	699a      	ldr	r2, [r3, #24]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	430a      	orrs	r2, r1
 8010034:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	69db      	ldr	r3, [r3, #28]
 801003a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801003e:	f040 818b 	bne.w	8010358 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4ac1      	ldr	r2, [pc, #772]	; (801034c <UART_SetConfig+0x37c>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d005      	beq.n	8010058 <UART_SetConfig+0x88>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4abf      	ldr	r2, [pc, #764]	; (8010350 <UART_SetConfig+0x380>)
 8010052:	4293      	cmp	r3, r2
 8010054:	f040 80bd 	bne.w	80101d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010058:	f7fc fbcc 	bl	800c7f4 <HAL_RCC_GetPCLK2Freq>
 801005c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	461d      	mov	r5, r3
 8010062:	f04f 0600 	mov.w	r6, #0
 8010066:	46a8      	mov	r8, r5
 8010068:	46b1      	mov	r9, r6
 801006a:	eb18 0308 	adds.w	r3, r8, r8
 801006e:	eb49 0409 	adc.w	r4, r9, r9
 8010072:	4698      	mov	r8, r3
 8010074:	46a1      	mov	r9, r4
 8010076:	eb18 0805 	adds.w	r8, r8, r5
 801007a:	eb49 0906 	adc.w	r9, r9, r6
 801007e:	f04f 0100 	mov.w	r1, #0
 8010082:	f04f 0200 	mov.w	r2, #0
 8010086:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 801008a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801008e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010092:	4688      	mov	r8, r1
 8010094:	4691      	mov	r9, r2
 8010096:	eb18 0005 	adds.w	r0, r8, r5
 801009a:	eb49 0106 	adc.w	r1, r9, r6
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	461d      	mov	r5, r3
 80100a4:	f04f 0600 	mov.w	r6, #0
 80100a8:	196b      	adds	r3, r5, r5
 80100aa:	eb46 0406 	adc.w	r4, r6, r6
 80100ae:	461a      	mov	r2, r3
 80100b0:	4623      	mov	r3, r4
 80100b2:	f7f0 fe01 	bl	8000cb8 <__aeabi_uldivmod>
 80100b6:	4603      	mov	r3, r0
 80100b8:	460c      	mov	r4, r1
 80100ba:	461a      	mov	r2, r3
 80100bc:	4ba5      	ldr	r3, [pc, #660]	; (8010354 <UART_SetConfig+0x384>)
 80100be:	fba3 2302 	umull	r2, r3, r3, r2
 80100c2:	095b      	lsrs	r3, r3, #5
 80100c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	461d      	mov	r5, r3
 80100cc:	f04f 0600 	mov.w	r6, #0
 80100d0:	46a9      	mov	r9, r5
 80100d2:	46b2      	mov	sl, r6
 80100d4:	eb19 0309 	adds.w	r3, r9, r9
 80100d8:	eb4a 040a 	adc.w	r4, sl, sl
 80100dc:	4699      	mov	r9, r3
 80100de:	46a2      	mov	sl, r4
 80100e0:	eb19 0905 	adds.w	r9, r9, r5
 80100e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80100e8:	f04f 0100 	mov.w	r1, #0
 80100ec:	f04f 0200 	mov.w	r2, #0
 80100f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80100f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80100fc:	4689      	mov	r9, r1
 80100fe:	4692      	mov	sl, r2
 8010100:	eb19 0005 	adds.w	r0, r9, r5
 8010104:	eb4a 0106 	adc.w	r1, sl, r6
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	685b      	ldr	r3, [r3, #4]
 801010c:	461d      	mov	r5, r3
 801010e:	f04f 0600 	mov.w	r6, #0
 8010112:	196b      	adds	r3, r5, r5
 8010114:	eb46 0406 	adc.w	r4, r6, r6
 8010118:	461a      	mov	r2, r3
 801011a:	4623      	mov	r3, r4
 801011c:	f7f0 fdcc 	bl	8000cb8 <__aeabi_uldivmod>
 8010120:	4603      	mov	r3, r0
 8010122:	460c      	mov	r4, r1
 8010124:	461a      	mov	r2, r3
 8010126:	4b8b      	ldr	r3, [pc, #556]	; (8010354 <UART_SetConfig+0x384>)
 8010128:	fba3 1302 	umull	r1, r3, r3, r2
 801012c:	095b      	lsrs	r3, r3, #5
 801012e:	2164      	movs	r1, #100	; 0x64
 8010130:	fb01 f303 	mul.w	r3, r1, r3
 8010134:	1ad3      	subs	r3, r2, r3
 8010136:	00db      	lsls	r3, r3, #3
 8010138:	3332      	adds	r3, #50	; 0x32
 801013a:	4a86      	ldr	r2, [pc, #536]	; (8010354 <UART_SetConfig+0x384>)
 801013c:	fba2 2303 	umull	r2, r3, r2, r3
 8010140:	095b      	lsrs	r3, r3, #5
 8010142:	005b      	lsls	r3, r3, #1
 8010144:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010148:	4498      	add	r8, r3
 801014a:	68bb      	ldr	r3, [r7, #8]
 801014c:	461d      	mov	r5, r3
 801014e:	f04f 0600 	mov.w	r6, #0
 8010152:	46a9      	mov	r9, r5
 8010154:	46b2      	mov	sl, r6
 8010156:	eb19 0309 	adds.w	r3, r9, r9
 801015a:	eb4a 040a 	adc.w	r4, sl, sl
 801015e:	4699      	mov	r9, r3
 8010160:	46a2      	mov	sl, r4
 8010162:	eb19 0905 	adds.w	r9, r9, r5
 8010166:	eb4a 0a06 	adc.w	sl, sl, r6
 801016a:	f04f 0100 	mov.w	r1, #0
 801016e:	f04f 0200 	mov.w	r2, #0
 8010172:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010176:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801017a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801017e:	4689      	mov	r9, r1
 8010180:	4692      	mov	sl, r2
 8010182:	eb19 0005 	adds.w	r0, r9, r5
 8010186:	eb4a 0106 	adc.w	r1, sl, r6
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	461d      	mov	r5, r3
 8010190:	f04f 0600 	mov.w	r6, #0
 8010194:	196b      	adds	r3, r5, r5
 8010196:	eb46 0406 	adc.w	r4, r6, r6
 801019a:	461a      	mov	r2, r3
 801019c:	4623      	mov	r3, r4
 801019e:	f7f0 fd8b 	bl	8000cb8 <__aeabi_uldivmod>
 80101a2:	4603      	mov	r3, r0
 80101a4:	460c      	mov	r4, r1
 80101a6:	461a      	mov	r2, r3
 80101a8:	4b6a      	ldr	r3, [pc, #424]	; (8010354 <UART_SetConfig+0x384>)
 80101aa:	fba3 1302 	umull	r1, r3, r3, r2
 80101ae:	095b      	lsrs	r3, r3, #5
 80101b0:	2164      	movs	r1, #100	; 0x64
 80101b2:	fb01 f303 	mul.w	r3, r1, r3
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	00db      	lsls	r3, r3, #3
 80101ba:	3332      	adds	r3, #50	; 0x32
 80101bc:	4a65      	ldr	r2, [pc, #404]	; (8010354 <UART_SetConfig+0x384>)
 80101be:	fba2 2303 	umull	r2, r3, r2, r3
 80101c2:	095b      	lsrs	r3, r3, #5
 80101c4:	f003 0207 	and.w	r2, r3, #7
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	4442      	add	r2, r8
 80101ce:	609a      	str	r2, [r3, #8]
 80101d0:	e26f      	b.n	80106b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101d2:	f7fc fafb 	bl	800c7cc <HAL_RCC_GetPCLK1Freq>
 80101d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	461d      	mov	r5, r3
 80101dc:	f04f 0600 	mov.w	r6, #0
 80101e0:	46a8      	mov	r8, r5
 80101e2:	46b1      	mov	r9, r6
 80101e4:	eb18 0308 	adds.w	r3, r8, r8
 80101e8:	eb49 0409 	adc.w	r4, r9, r9
 80101ec:	4698      	mov	r8, r3
 80101ee:	46a1      	mov	r9, r4
 80101f0:	eb18 0805 	adds.w	r8, r8, r5
 80101f4:	eb49 0906 	adc.w	r9, r9, r6
 80101f8:	f04f 0100 	mov.w	r1, #0
 80101fc:	f04f 0200 	mov.w	r2, #0
 8010200:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010204:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010208:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801020c:	4688      	mov	r8, r1
 801020e:	4691      	mov	r9, r2
 8010210:	eb18 0005 	adds.w	r0, r8, r5
 8010214:	eb49 0106 	adc.w	r1, r9, r6
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	685b      	ldr	r3, [r3, #4]
 801021c:	461d      	mov	r5, r3
 801021e:	f04f 0600 	mov.w	r6, #0
 8010222:	196b      	adds	r3, r5, r5
 8010224:	eb46 0406 	adc.w	r4, r6, r6
 8010228:	461a      	mov	r2, r3
 801022a:	4623      	mov	r3, r4
 801022c:	f7f0 fd44 	bl	8000cb8 <__aeabi_uldivmod>
 8010230:	4603      	mov	r3, r0
 8010232:	460c      	mov	r4, r1
 8010234:	461a      	mov	r2, r3
 8010236:	4b47      	ldr	r3, [pc, #284]	; (8010354 <UART_SetConfig+0x384>)
 8010238:	fba3 2302 	umull	r2, r3, r3, r2
 801023c:	095b      	lsrs	r3, r3, #5
 801023e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	461d      	mov	r5, r3
 8010246:	f04f 0600 	mov.w	r6, #0
 801024a:	46a9      	mov	r9, r5
 801024c:	46b2      	mov	sl, r6
 801024e:	eb19 0309 	adds.w	r3, r9, r9
 8010252:	eb4a 040a 	adc.w	r4, sl, sl
 8010256:	4699      	mov	r9, r3
 8010258:	46a2      	mov	sl, r4
 801025a:	eb19 0905 	adds.w	r9, r9, r5
 801025e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010262:	f04f 0100 	mov.w	r1, #0
 8010266:	f04f 0200 	mov.w	r2, #0
 801026a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801026e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010272:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010276:	4689      	mov	r9, r1
 8010278:	4692      	mov	sl, r2
 801027a:	eb19 0005 	adds.w	r0, r9, r5
 801027e:	eb4a 0106 	adc.w	r1, sl, r6
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	461d      	mov	r5, r3
 8010288:	f04f 0600 	mov.w	r6, #0
 801028c:	196b      	adds	r3, r5, r5
 801028e:	eb46 0406 	adc.w	r4, r6, r6
 8010292:	461a      	mov	r2, r3
 8010294:	4623      	mov	r3, r4
 8010296:	f7f0 fd0f 	bl	8000cb8 <__aeabi_uldivmod>
 801029a:	4603      	mov	r3, r0
 801029c:	460c      	mov	r4, r1
 801029e:	461a      	mov	r2, r3
 80102a0:	4b2c      	ldr	r3, [pc, #176]	; (8010354 <UART_SetConfig+0x384>)
 80102a2:	fba3 1302 	umull	r1, r3, r3, r2
 80102a6:	095b      	lsrs	r3, r3, #5
 80102a8:	2164      	movs	r1, #100	; 0x64
 80102aa:	fb01 f303 	mul.w	r3, r1, r3
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	00db      	lsls	r3, r3, #3
 80102b2:	3332      	adds	r3, #50	; 0x32
 80102b4:	4a27      	ldr	r2, [pc, #156]	; (8010354 <UART_SetConfig+0x384>)
 80102b6:	fba2 2303 	umull	r2, r3, r2, r3
 80102ba:	095b      	lsrs	r3, r3, #5
 80102bc:	005b      	lsls	r3, r3, #1
 80102be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102c2:	4498      	add	r8, r3
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	461d      	mov	r5, r3
 80102c8:	f04f 0600 	mov.w	r6, #0
 80102cc:	46a9      	mov	r9, r5
 80102ce:	46b2      	mov	sl, r6
 80102d0:	eb19 0309 	adds.w	r3, r9, r9
 80102d4:	eb4a 040a 	adc.w	r4, sl, sl
 80102d8:	4699      	mov	r9, r3
 80102da:	46a2      	mov	sl, r4
 80102dc:	eb19 0905 	adds.w	r9, r9, r5
 80102e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80102e4:	f04f 0100 	mov.w	r1, #0
 80102e8:	f04f 0200 	mov.w	r2, #0
 80102ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80102f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80102f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80102f8:	4689      	mov	r9, r1
 80102fa:	4692      	mov	sl, r2
 80102fc:	eb19 0005 	adds.w	r0, r9, r5
 8010300:	eb4a 0106 	adc.w	r1, sl, r6
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	461d      	mov	r5, r3
 801030a:	f04f 0600 	mov.w	r6, #0
 801030e:	196b      	adds	r3, r5, r5
 8010310:	eb46 0406 	adc.w	r4, r6, r6
 8010314:	461a      	mov	r2, r3
 8010316:	4623      	mov	r3, r4
 8010318:	f7f0 fcce 	bl	8000cb8 <__aeabi_uldivmod>
 801031c:	4603      	mov	r3, r0
 801031e:	460c      	mov	r4, r1
 8010320:	461a      	mov	r2, r3
 8010322:	4b0c      	ldr	r3, [pc, #48]	; (8010354 <UART_SetConfig+0x384>)
 8010324:	fba3 1302 	umull	r1, r3, r3, r2
 8010328:	095b      	lsrs	r3, r3, #5
 801032a:	2164      	movs	r1, #100	; 0x64
 801032c:	fb01 f303 	mul.w	r3, r1, r3
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	00db      	lsls	r3, r3, #3
 8010334:	3332      	adds	r3, #50	; 0x32
 8010336:	4a07      	ldr	r2, [pc, #28]	; (8010354 <UART_SetConfig+0x384>)
 8010338:	fba2 2303 	umull	r2, r3, r2, r3
 801033c:	095b      	lsrs	r3, r3, #5
 801033e:	f003 0207 	and.w	r2, r3, #7
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4442      	add	r2, r8
 8010348:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801034a:	e1b2      	b.n	80106b2 <UART_SetConfig+0x6e2>
 801034c:	40011000 	.word	0x40011000
 8010350:	40011400 	.word	0x40011400
 8010354:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4ad7      	ldr	r2, [pc, #860]	; (80106bc <UART_SetConfig+0x6ec>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d005      	beq.n	801036e <UART_SetConfig+0x39e>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4ad6      	ldr	r2, [pc, #856]	; (80106c0 <UART_SetConfig+0x6f0>)
 8010368:	4293      	cmp	r3, r2
 801036a:	f040 80d1 	bne.w	8010510 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801036e:	f7fc fa41 	bl	800c7f4 <HAL_RCC_GetPCLK2Freq>
 8010372:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	469a      	mov	sl, r3
 8010378:	f04f 0b00 	mov.w	fp, #0
 801037c:	46d0      	mov	r8, sl
 801037e:	46d9      	mov	r9, fp
 8010380:	eb18 0308 	adds.w	r3, r8, r8
 8010384:	eb49 0409 	adc.w	r4, r9, r9
 8010388:	4698      	mov	r8, r3
 801038a:	46a1      	mov	r9, r4
 801038c:	eb18 080a 	adds.w	r8, r8, sl
 8010390:	eb49 090b 	adc.w	r9, r9, fp
 8010394:	f04f 0100 	mov.w	r1, #0
 8010398:	f04f 0200 	mov.w	r2, #0
 801039c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80103a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80103a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80103a8:	4688      	mov	r8, r1
 80103aa:	4691      	mov	r9, r2
 80103ac:	eb1a 0508 	adds.w	r5, sl, r8
 80103b0:	eb4b 0609 	adc.w	r6, fp, r9
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	4619      	mov	r1, r3
 80103ba:	f04f 0200 	mov.w	r2, #0
 80103be:	f04f 0300 	mov.w	r3, #0
 80103c2:	f04f 0400 	mov.w	r4, #0
 80103c6:	0094      	lsls	r4, r2, #2
 80103c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103cc:	008b      	lsls	r3, r1, #2
 80103ce:	461a      	mov	r2, r3
 80103d0:	4623      	mov	r3, r4
 80103d2:	4628      	mov	r0, r5
 80103d4:	4631      	mov	r1, r6
 80103d6:	f7f0 fc6f 	bl	8000cb8 <__aeabi_uldivmod>
 80103da:	4603      	mov	r3, r0
 80103dc:	460c      	mov	r4, r1
 80103de:	461a      	mov	r2, r3
 80103e0:	4bb8      	ldr	r3, [pc, #736]	; (80106c4 <UART_SetConfig+0x6f4>)
 80103e2:	fba3 2302 	umull	r2, r3, r3, r2
 80103e6:	095b      	lsrs	r3, r3, #5
 80103e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	469b      	mov	fp, r3
 80103f0:	f04f 0c00 	mov.w	ip, #0
 80103f4:	46d9      	mov	r9, fp
 80103f6:	46e2      	mov	sl, ip
 80103f8:	eb19 0309 	adds.w	r3, r9, r9
 80103fc:	eb4a 040a 	adc.w	r4, sl, sl
 8010400:	4699      	mov	r9, r3
 8010402:	46a2      	mov	sl, r4
 8010404:	eb19 090b 	adds.w	r9, r9, fp
 8010408:	eb4a 0a0c 	adc.w	sl, sl, ip
 801040c:	f04f 0100 	mov.w	r1, #0
 8010410:	f04f 0200 	mov.w	r2, #0
 8010414:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010418:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801041c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010420:	4689      	mov	r9, r1
 8010422:	4692      	mov	sl, r2
 8010424:	eb1b 0509 	adds.w	r5, fp, r9
 8010428:	eb4c 060a 	adc.w	r6, ip, sl
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	4619      	mov	r1, r3
 8010432:	f04f 0200 	mov.w	r2, #0
 8010436:	f04f 0300 	mov.w	r3, #0
 801043a:	f04f 0400 	mov.w	r4, #0
 801043e:	0094      	lsls	r4, r2, #2
 8010440:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010444:	008b      	lsls	r3, r1, #2
 8010446:	461a      	mov	r2, r3
 8010448:	4623      	mov	r3, r4
 801044a:	4628      	mov	r0, r5
 801044c:	4631      	mov	r1, r6
 801044e:	f7f0 fc33 	bl	8000cb8 <__aeabi_uldivmod>
 8010452:	4603      	mov	r3, r0
 8010454:	460c      	mov	r4, r1
 8010456:	461a      	mov	r2, r3
 8010458:	4b9a      	ldr	r3, [pc, #616]	; (80106c4 <UART_SetConfig+0x6f4>)
 801045a:	fba3 1302 	umull	r1, r3, r3, r2
 801045e:	095b      	lsrs	r3, r3, #5
 8010460:	2164      	movs	r1, #100	; 0x64
 8010462:	fb01 f303 	mul.w	r3, r1, r3
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	011b      	lsls	r3, r3, #4
 801046a:	3332      	adds	r3, #50	; 0x32
 801046c:	4a95      	ldr	r2, [pc, #596]	; (80106c4 <UART_SetConfig+0x6f4>)
 801046e:	fba2 2303 	umull	r2, r3, r2, r3
 8010472:	095b      	lsrs	r3, r3, #5
 8010474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010478:	4498      	add	r8, r3
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	469b      	mov	fp, r3
 801047e:	f04f 0c00 	mov.w	ip, #0
 8010482:	46d9      	mov	r9, fp
 8010484:	46e2      	mov	sl, ip
 8010486:	eb19 0309 	adds.w	r3, r9, r9
 801048a:	eb4a 040a 	adc.w	r4, sl, sl
 801048e:	4699      	mov	r9, r3
 8010490:	46a2      	mov	sl, r4
 8010492:	eb19 090b 	adds.w	r9, r9, fp
 8010496:	eb4a 0a0c 	adc.w	sl, sl, ip
 801049a:	f04f 0100 	mov.w	r1, #0
 801049e:	f04f 0200 	mov.w	r2, #0
 80104a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104ae:	4689      	mov	r9, r1
 80104b0:	4692      	mov	sl, r2
 80104b2:	eb1b 0509 	adds.w	r5, fp, r9
 80104b6:	eb4c 060a 	adc.w	r6, ip, sl
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	4619      	mov	r1, r3
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	f04f 0400 	mov.w	r4, #0
 80104cc:	0094      	lsls	r4, r2, #2
 80104ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104d2:	008b      	lsls	r3, r1, #2
 80104d4:	461a      	mov	r2, r3
 80104d6:	4623      	mov	r3, r4
 80104d8:	4628      	mov	r0, r5
 80104da:	4631      	mov	r1, r6
 80104dc:	f7f0 fbec 	bl	8000cb8 <__aeabi_uldivmod>
 80104e0:	4603      	mov	r3, r0
 80104e2:	460c      	mov	r4, r1
 80104e4:	461a      	mov	r2, r3
 80104e6:	4b77      	ldr	r3, [pc, #476]	; (80106c4 <UART_SetConfig+0x6f4>)
 80104e8:	fba3 1302 	umull	r1, r3, r3, r2
 80104ec:	095b      	lsrs	r3, r3, #5
 80104ee:	2164      	movs	r1, #100	; 0x64
 80104f0:	fb01 f303 	mul.w	r3, r1, r3
 80104f4:	1ad3      	subs	r3, r2, r3
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	3332      	adds	r3, #50	; 0x32
 80104fa:	4a72      	ldr	r2, [pc, #456]	; (80106c4 <UART_SetConfig+0x6f4>)
 80104fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010500:	095b      	lsrs	r3, r3, #5
 8010502:	f003 020f 	and.w	r2, r3, #15
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	4442      	add	r2, r8
 801050c:	609a      	str	r2, [r3, #8]
 801050e:	e0d0      	b.n	80106b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010510:	f7fc f95c 	bl	800c7cc <HAL_RCC_GetPCLK1Freq>
 8010514:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	469a      	mov	sl, r3
 801051a:	f04f 0b00 	mov.w	fp, #0
 801051e:	46d0      	mov	r8, sl
 8010520:	46d9      	mov	r9, fp
 8010522:	eb18 0308 	adds.w	r3, r8, r8
 8010526:	eb49 0409 	adc.w	r4, r9, r9
 801052a:	4698      	mov	r8, r3
 801052c:	46a1      	mov	r9, r4
 801052e:	eb18 080a 	adds.w	r8, r8, sl
 8010532:	eb49 090b 	adc.w	r9, r9, fp
 8010536:	f04f 0100 	mov.w	r1, #0
 801053a:	f04f 0200 	mov.w	r2, #0
 801053e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010542:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010546:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801054a:	4688      	mov	r8, r1
 801054c:	4691      	mov	r9, r2
 801054e:	eb1a 0508 	adds.w	r5, sl, r8
 8010552:	eb4b 0609 	adc.w	r6, fp, r9
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	685b      	ldr	r3, [r3, #4]
 801055a:	4619      	mov	r1, r3
 801055c:	f04f 0200 	mov.w	r2, #0
 8010560:	f04f 0300 	mov.w	r3, #0
 8010564:	f04f 0400 	mov.w	r4, #0
 8010568:	0094      	lsls	r4, r2, #2
 801056a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801056e:	008b      	lsls	r3, r1, #2
 8010570:	461a      	mov	r2, r3
 8010572:	4623      	mov	r3, r4
 8010574:	4628      	mov	r0, r5
 8010576:	4631      	mov	r1, r6
 8010578:	f7f0 fb9e 	bl	8000cb8 <__aeabi_uldivmod>
 801057c:	4603      	mov	r3, r0
 801057e:	460c      	mov	r4, r1
 8010580:	461a      	mov	r2, r3
 8010582:	4b50      	ldr	r3, [pc, #320]	; (80106c4 <UART_SetConfig+0x6f4>)
 8010584:	fba3 2302 	umull	r2, r3, r3, r2
 8010588:	095b      	lsrs	r3, r3, #5
 801058a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	469b      	mov	fp, r3
 8010592:	f04f 0c00 	mov.w	ip, #0
 8010596:	46d9      	mov	r9, fp
 8010598:	46e2      	mov	sl, ip
 801059a:	eb19 0309 	adds.w	r3, r9, r9
 801059e:	eb4a 040a 	adc.w	r4, sl, sl
 80105a2:	4699      	mov	r9, r3
 80105a4:	46a2      	mov	sl, r4
 80105a6:	eb19 090b 	adds.w	r9, r9, fp
 80105aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80105ae:	f04f 0100 	mov.w	r1, #0
 80105b2:	f04f 0200 	mov.w	r2, #0
 80105b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80105ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80105be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80105c2:	4689      	mov	r9, r1
 80105c4:	4692      	mov	sl, r2
 80105c6:	eb1b 0509 	adds.w	r5, fp, r9
 80105ca:	eb4c 060a 	adc.w	r6, ip, sl
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	685b      	ldr	r3, [r3, #4]
 80105d2:	4619      	mov	r1, r3
 80105d4:	f04f 0200 	mov.w	r2, #0
 80105d8:	f04f 0300 	mov.w	r3, #0
 80105dc:	f04f 0400 	mov.w	r4, #0
 80105e0:	0094      	lsls	r4, r2, #2
 80105e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80105e6:	008b      	lsls	r3, r1, #2
 80105e8:	461a      	mov	r2, r3
 80105ea:	4623      	mov	r3, r4
 80105ec:	4628      	mov	r0, r5
 80105ee:	4631      	mov	r1, r6
 80105f0:	f7f0 fb62 	bl	8000cb8 <__aeabi_uldivmod>
 80105f4:	4603      	mov	r3, r0
 80105f6:	460c      	mov	r4, r1
 80105f8:	461a      	mov	r2, r3
 80105fa:	4b32      	ldr	r3, [pc, #200]	; (80106c4 <UART_SetConfig+0x6f4>)
 80105fc:	fba3 1302 	umull	r1, r3, r3, r2
 8010600:	095b      	lsrs	r3, r3, #5
 8010602:	2164      	movs	r1, #100	; 0x64
 8010604:	fb01 f303 	mul.w	r3, r1, r3
 8010608:	1ad3      	subs	r3, r2, r3
 801060a:	011b      	lsls	r3, r3, #4
 801060c:	3332      	adds	r3, #50	; 0x32
 801060e:	4a2d      	ldr	r2, [pc, #180]	; (80106c4 <UART_SetConfig+0x6f4>)
 8010610:	fba2 2303 	umull	r2, r3, r2, r3
 8010614:	095b      	lsrs	r3, r3, #5
 8010616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801061a:	4498      	add	r8, r3
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	469b      	mov	fp, r3
 8010620:	f04f 0c00 	mov.w	ip, #0
 8010624:	46d9      	mov	r9, fp
 8010626:	46e2      	mov	sl, ip
 8010628:	eb19 0309 	adds.w	r3, r9, r9
 801062c:	eb4a 040a 	adc.w	r4, sl, sl
 8010630:	4699      	mov	r9, r3
 8010632:	46a2      	mov	sl, r4
 8010634:	eb19 090b 	adds.w	r9, r9, fp
 8010638:	eb4a 0a0c 	adc.w	sl, sl, ip
 801063c:	f04f 0100 	mov.w	r1, #0
 8010640:	f04f 0200 	mov.w	r2, #0
 8010644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010648:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801064c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010650:	4689      	mov	r9, r1
 8010652:	4692      	mov	sl, r2
 8010654:	eb1b 0509 	adds.w	r5, fp, r9
 8010658:	eb4c 060a 	adc.w	r6, ip, sl
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	4619      	mov	r1, r3
 8010662:	f04f 0200 	mov.w	r2, #0
 8010666:	f04f 0300 	mov.w	r3, #0
 801066a:	f04f 0400 	mov.w	r4, #0
 801066e:	0094      	lsls	r4, r2, #2
 8010670:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010674:	008b      	lsls	r3, r1, #2
 8010676:	461a      	mov	r2, r3
 8010678:	4623      	mov	r3, r4
 801067a:	4628      	mov	r0, r5
 801067c:	4631      	mov	r1, r6
 801067e:	f7f0 fb1b 	bl	8000cb8 <__aeabi_uldivmod>
 8010682:	4603      	mov	r3, r0
 8010684:	460c      	mov	r4, r1
 8010686:	461a      	mov	r2, r3
 8010688:	4b0e      	ldr	r3, [pc, #56]	; (80106c4 <UART_SetConfig+0x6f4>)
 801068a:	fba3 1302 	umull	r1, r3, r3, r2
 801068e:	095b      	lsrs	r3, r3, #5
 8010690:	2164      	movs	r1, #100	; 0x64
 8010692:	fb01 f303 	mul.w	r3, r1, r3
 8010696:	1ad3      	subs	r3, r2, r3
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	3332      	adds	r3, #50	; 0x32
 801069c:	4a09      	ldr	r2, [pc, #36]	; (80106c4 <UART_SetConfig+0x6f4>)
 801069e:	fba2 2303 	umull	r2, r3, r2, r3
 80106a2:	095b      	lsrs	r3, r3, #5
 80106a4:	f003 020f 	and.w	r2, r3, #15
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	4442      	add	r2, r8
 80106ae:	609a      	str	r2, [r3, #8]
}
 80106b0:	e7ff      	b.n	80106b2 <UART_SetConfig+0x6e2>
 80106b2:	bf00      	nop
 80106b4:	3714      	adds	r7, #20
 80106b6:	46bd      	mov	sp, r7
 80106b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106bc:	40011000 	.word	0x40011000
 80106c0:	40011400 	.word	0x40011400
 80106c4:	51eb851f 	.word	0x51eb851f

080106c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80106c8:	b084      	sub	sp, #16
 80106ca:	b480      	push	{r7}
 80106cc:	b085      	sub	sp, #20
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	f107 001c 	add.w	r0, r7, #28
 80106d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80106da:	2300      	movs	r3, #0
 80106dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80106de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80106e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80106e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80106e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80106e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80106ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80106ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80106ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80106f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80106f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	4313      	orrs	r3, r2
 80106f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	685b      	ldr	r3, [r3, #4]
 80106fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	431a      	orrs	r2, r3
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801070e:	2300      	movs	r3, #0
}
 8010710:	4618      	mov	r0, r3
 8010712:	3714      	adds	r7, #20
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	b004      	add	sp, #16
 801071c:	4770      	bx	lr

0801071e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801071e:	b480      	push	{r7}
 8010720:	b083      	sub	sp, #12
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801072c:	4618      	mov	r0, r3
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	370c      	adds	r7, #12
 8010752:	46bd      	mov	sp, r7
 8010754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010758:	4770      	bx	lr

0801075a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801075a:	b580      	push	{r7, lr}
 801075c:	b082      	sub	sp, #8
 801075e:	af00      	add	r7, sp, #0
 8010760:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2203      	movs	r2, #3
 8010766:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010768:	2002      	movs	r0, #2
 801076a:	f7f9 fbc5 	bl	8009ef8 <HAL_Delay>
  
  return HAL_OK;
 801076e:	2300      	movs	r3, #0
}
 8010770:	4618      	mov	r0, r3
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	f003 0303 	and.w	r3, r3, #3
}
 8010788:	4618      	mov	r0, r3
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8010794:	b480      	push	{r7}
 8010796:	b085      	sub	sp, #20
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801079e:	2300      	movs	r3, #0
 80107a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80107a2:	683b      	ldr	r3, [r7, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107aa:	683b      	ldr	r3, [r7, #0]
 80107ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80107b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80107ba:	683b      	ldr	r3, [r7, #0]
 80107bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80107be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80107c0:	68fa      	ldr	r2, [r7, #12]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80107ce:	f023 030f 	bic.w	r3, r3, #15
 80107d2:	68fa      	ldr	r2, [r7, #12]
 80107d4:	431a      	orrs	r2, r3
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80107da:	2300      	movs	r3, #0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3714      	adds	r7, #20
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr

080107e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	691b      	ldr	r3, [r3, #16]
 80107f4:	b2db      	uxtb	r3, r3
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010802:	b480      	push	{r7}
 8010804:	b085      	sub	sp, #20
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	3314      	adds	r3, #20
 8010810:	461a      	mov	r2, r3
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	4413      	add	r3, r2
 8010816:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
}  
 801081c:	4618      	mov	r0, r3
 801081e:	3714      	adds	r7, #20
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr

08010828 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010828:	b480      	push	{r7}
 801082a:	b085      	sub	sp, #20
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010832:	2300      	movs	r3, #0
 8010834:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	685a      	ldr	r2, [r3, #4]
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801084e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010854:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010856:	683b      	ldr	r3, [r7, #0]
 8010858:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801085a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801085c:	68fa      	ldr	r2, [r7, #12]
 801085e:	4313      	orrs	r3, r2
 8010860:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010866:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	431a      	orrs	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010872:	2300      	movs	r3, #0

}
 8010874:	4618      	mov	r0, r3
 8010876:	3714      	adds	r7, #20
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b088      	sub	sp, #32
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801088e:	2310      	movs	r3, #16
 8010890:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010892:	2340      	movs	r3, #64	; 0x40
 8010894:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010896:	2300      	movs	r3, #0
 8010898:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801089e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108a0:	f107 0308 	add.w	r3, r7, #8
 80108a4:	4619      	mov	r1, r3
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7ff ff74 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80108ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80108b0:	2110      	movs	r1, #16
 80108b2:	6878      	ldr	r0, [r7, #4]
 80108b4:	f000 fa40 	bl	8010d38 <SDMMC_GetCmdResp1>
 80108b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108ba:	69fb      	ldr	r3, [r7, #28]
}
 80108bc:	4618      	mov	r0, r3
 80108be:	3720      	adds	r7, #32
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b088      	sub	sp, #32
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80108d2:	2311      	movs	r3, #17
 80108d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108d6:	2340      	movs	r3, #64	; 0x40
 80108d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108da:	2300      	movs	r3, #0
 80108dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108e4:	f107 0308 	add.w	r3, r7, #8
 80108e8:	4619      	mov	r1, r3
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f7ff ff52 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80108f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80108f4:	2111      	movs	r1, #17
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 fa1e 	bl	8010d38 <SDMMC_GetCmdResp1>
 80108fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108fe:	69fb      	ldr	r3, [r7, #28]
}
 8010900:	4618      	mov	r0, r3
 8010902:	3720      	adds	r7, #32
 8010904:	46bd      	mov	sp, r7
 8010906:	bd80      	pop	{r7, pc}

08010908 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b088      	sub	sp, #32
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
 8010910:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010916:	2312      	movs	r3, #18
 8010918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801091a:	2340      	movs	r3, #64	; 0x40
 801091c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801091e:	2300      	movs	r3, #0
 8010920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010926:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010928:	f107 0308 	add.w	r3, r7, #8
 801092c:	4619      	mov	r1, r3
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f7ff ff30 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010934:	f241 3288 	movw	r2, #5000	; 0x1388
 8010938:	2112      	movs	r1, #18
 801093a:	6878      	ldr	r0, [r7, #4]
 801093c:	f000 f9fc 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010942:	69fb      	ldr	r3, [r7, #28]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3720      	adds	r7, #32
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b088      	sub	sp, #32
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801095a:	2318      	movs	r3, #24
 801095c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801095e:	2340      	movs	r3, #64	; 0x40
 8010960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010962:	2300      	movs	r3, #0
 8010964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801096a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801096c:	f107 0308 	add.w	r3, r7, #8
 8010970:	4619      	mov	r1, r3
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7ff ff0e 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010978:	f241 3288 	movw	r2, #5000	; 0x1388
 801097c:	2118      	movs	r1, #24
 801097e:	6878      	ldr	r0, [r7, #4]
 8010980:	f000 f9da 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010984:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010986:	69fb      	ldr	r3, [r7, #28]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3720      	adds	r7, #32
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b088      	sub	sp, #32
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801099e:	2319      	movs	r3, #25
 80109a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109a2:	2340      	movs	r3, #64	; 0x40
 80109a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109a6:	2300      	movs	r3, #0
 80109a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109b0:	f107 0308 	add.w	r3, r7, #8
 80109b4:	4619      	mov	r1, r3
 80109b6:	6878      	ldr	r0, [r7, #4]
 80109b8:	f7ff feec 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80109bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80109c0:	2119      	movs	r1, #25
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f9b8 	bl	8010d38 <SDMMC_GetCmdResp1>
 80109c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109ca:	69fb      	ldr	r3, [r7, #28]
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3720      	adds	r7, #32
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bd80      	pop	{r7, pc}

080109d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b088      	sub	sp, #32
 80109d8:	af00      	add	r7, sp, #0
 80109da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80109dc:	2300      	movs	r3, #0
 80109de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80109e0:	230c      	movs	r3, #12
 80109e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109e4:	2340      	movs	r3, #64	; 0x40
 80109e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109e8:	2300      	movs	r3, #0
 80109ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109f2:	f107 0308 	add.w	r3, r7, #8
 80109f6:	4619      	mov	r1, r3
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f7ff fecb 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80109fe:	4a05      	ldr	r2, [pc, #20]	; (8010a14 <SDMMC_CmdStopTransfer+0x40>)
 8010a00:	210c      	movs	r1, #12
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	f000 f998 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010a08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a0a:	69fb      	ldr	r3, [r7, #28]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3720      	adds	r7, #32
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	05f5e100 	.word	0x05f5e100

08010a18 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b08a      	sub	sp, #40	; 0x28
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	60f8      	str	r0, [r7, #12]
 8010a20:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010a28:	2307      	movs	r3, #7
 8010a2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a2c:	2340      	movs	r3, #64	; 0x40
 8010a2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a30:	2300      	movs	r3, #0
 8010a32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a38:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a3a:	f107 0310 	add.w	r3, r7, #16
 8010a3e:	4619      	mov	r1, r3
 8010a40:	68f8      	ldr	r0, [r7, #12]
 8010a42:	f7ff fea7 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a4a:	2107      	movs	r1, #7
 8010a4c:	68f8      	ldr	r0, [r7, #12]
 8010a4e:	f000 f973 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010a52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3728      	adds	r7, #40	; 0x28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b088      	sub	sp, #32
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010a66:	2300      	movs	r3, #0
 8010a68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a72:	2300      	movs	r3, #0
 8010a74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a7c:	f107 0308 	add.w	r3, r7, #8
 8010a80:	4619      	mov	r1, r3
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7ff fe86 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 f92d 	bl	8010ce8 <SDMMC_GetCmdError>
 8010a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a90:	69fb      	ldr	r3, [r7, #28]
}
 8010a92:	4618      	mov	r0, r3
 8010a94:	3720      	adds	r7, #32
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}

08010a9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010a9a:	b580      	push	{r7, lr}
 8010a9c:	b088      	sub	sp, #32
 8010a9e:	af00      	add	r7, sp, #0
 8010aa0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010aa2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010aa8:	2308      	movs	r3, #8
 8010aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aac:	2340      	movs	r3, #64	; 0x40
 8010aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010ab0:	2300      	movs	r3, #0
 8010ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010aba:	f107 0308 	add.w	r3, r7, #8
 8010abe:	4619      	mov	r1, r3
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7ff fe67 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 fb16 	bl	80110f8 <SDMMC_GetCmdResp7>
 8010acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ace:	69fb      	ldr	r3, [r7, #28]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3720      	adds	r7, #32
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b088      	sub	sp, #32
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010ae6:	2337      	movs	r3, #55	; 0x37
 8010ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010aea:	2340      	movs	r3, #64	; 0x40
 8010aec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aee:	2300      	movs	r3, #0
 8010af0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010af6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010af8:	f107 0308 	add.w	r3, r7, #8
 8010afc:	4619      	mov	r1, r3
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7ff fe48 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b08:	2137      	movs	r1, #55	; 0x37
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f000 f914 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010b10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b12:	69fb      	ldr	r3, [r7, #28]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3720      	adds	r7, #32
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b088      	sub	sp, #32
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010b2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010b32:	2329      	movs	r3, #41	; 0x29
 8010b34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b36:	2340      	movs	r3, #64	; 0x40
 8010b38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b44:	f107 0308 	add.w	r3, r7, #8
 8010b48:	4619      	mov	r1, r3
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7ff fe22 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f000 fa23 	bl	8010f9c <SDMMC_GetCmdResp3>
 8010b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b58:	69fb      	ldr	r3, [r7, #28]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3720      	adds	r7, #32
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}

08010b62 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010b62:	b580      	push	{r7, lr}
 8010b64:	b088      	sub	sp, #32
 8010b66:	af00      	add	r7, sp, #0
 8010b68:	6078      	str	r0, [r7, #4]
 8010b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010b70:	2306      	movs	r3, #6
 8010b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b74:	2340      	movs	r3, #64	; 0x40
 8010b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b78:	2300      	movs	r3, #0
 8010b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b82:	f107 0308 	add.w	r3, r7, #8
 8010b86:	4619      	mov	r1, r3
 8010b88:	6878      	ldr	r0, [r7, #4]
 8010b8a:	f7ff fe03 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b92:	2106      	movs	r1, #6
 8010b94:	6878      	ldr	r0, [r7, #4]
 8010b96:	f000 f8cf 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	3720      	adds	r7, #32
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}

08010ba6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010ba6:	b580      	push	{r7, lr}
 8010ba8:	b088      	sub	sp, #32
 8010baa:	af00      	add	r7, sp, #0
 8010bac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010bb2:	2333      	movs	r3, #51	; 0x33
 8010bb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bb6:	2340      	movs	r3, #64	; 0x40
 8010bb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bc4:	f107 0308 	add.w	r3, r7, #8
 8010bc8:	4619      	mov	r1, r3
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7ff fde2 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bd4:	2133      	movs	r1, #51	; 0x33
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f000 f8ae 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010bdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bde:	69fb      	ldr	r3, [r7, #28]
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	3720      	adds	r7, #32
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}

08010be8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b088      	sub	sp, #32
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010bf4:	2302      	movs	r3, #2
 8010bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010bf8:	23c0      	movs	r3, #192	; 0xc0
 8010bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c06:	f107 0308 	add.w	r3, r7, #8
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f7ff fdc1 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f000 f97c 	bl	8010f10 <SDMMC_GetCmdResp2>
 8010c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c1a:	69fb      	ldr	r3, [r7, #28]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3720      	adds	r7, #32
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}

08010c24 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b088      	sub	sp, #32
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010c32:	2309      	movs	r3, #9
 8010c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010c36:	23c0      	movs	r3, #192	; 0xc0
 8010c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c44:	f107 0308 	add.w	r3, r7, #8
 8010c48:	4619      	mov	r1, r3
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f7ff fda2 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 f95d 	bl	8010f10 <SDMMC_GetCmdResp2>
 8010c56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c58:	69fb      	ldr	r3, [r7, #28]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3720      	adds	r7, #32
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b088      	sub	sp, #32
 8010c66:	af00      	add	r7, sp, #0
 8010c68:	6078      	str	r0, [r7, #4]
 8010c6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010c70:	2303      	movs	r3, #3
 8010c72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010c74:	2340      	movs	r3, #64	; 0x40
 8010c76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010c7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010c82:	f107 0308 	add.w	r3, r7, #8
 8010c86:	4619      	mov	r1, r3
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f7ff fd83 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010c8e:	683a      	ldr	r2, [r7, #0]
 8010c90:	2103      	movs	r1, #3
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 f9bc 	bl	8011010 <SDMMC_GetCmdResp6>
 8010c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c9a:	69fb      	ldr	r3, [r7, #28]
}
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3720      	adds	r7, #32
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b088      	sub	sp, #32
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010cae:	683b      	ldr	r3, [r7, #0]
 8010cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010cb2:	230d      	movs	r3, #13
 8010cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010cb6:	2340      	movs	r3, #64	; 0x40
 8010cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010cc4:	f107 0308 	add.w	r3, r7, #8
 8010cc8:	4619      	mov	r1, r3
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7ff fd62 	bl	8010794 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cd4:	210d      	movs	r1, #13
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f000 f82e 	bl	8010d38 <SDMMC_GetCmdResp1>
 8010cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cde:	69fb      	ldr	r3, [r7, #28]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3720      	adds	r7, #32
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010ce8:	b490      	push	{r4, r7}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cf0:	4b0f      	ldr	r3, [pc, #60]	; (8010d30 <SDMMC_GetCmdError+0x48>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	4a0f      	ldr	r2, [pc, #60]	; (8010d34 <SDMMC_GetCmdError+0x4c>)
 8010cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cfa:	0a5b      	lsrs	r3, r3, #9
 8010cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d04:	4623      	mov	r3, r4
 8010d06:	1e5c      	subs	r4, r3, #1
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d102      	bne.n	8010d12 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d10:	e009      	b.n	8010d26 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d0f2      	beq.n	8010d04 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	22c5      	movs	r2, #197	; 0xc5
 8010d22:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3708      	adds	r7, #8
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bc90      	pop	{r4, r7}
 8010d2e:	4770      	bx	lr
 8010d30:	20000000 	.word	0x20000000
 8010d34:	10624dd3 	.word	0x10624dd3

08010d38 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010d38:	b590      	push	{r4, r7, lr}
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	460b      	mov	r3, r1
 8010d42:	607a      	str	r2, [r7, #4]
 8010d44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010d46:	4b6f      	ldr	r3, [pc, #444]	; (8010f04 <SDMMC_GetCmdResp1+0x1cc>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a6f      	ldr	r2, [pc, #444]	; (8010f08 <SDMMC_GetCmdResp1+0x1d0>)
 8010d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8010d50:	0a5b      	lsrs	r3, r3, #9
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d58:	4623      	mov	r3, r4
 8010d5a:	1e5c      	subs	r4, r3, #1
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d102      	bne.n	8010d66 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d64:	e0c9      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d6a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d0f0      	beq.n	8010d58 <SDMMC_GetCmdResp1+0x20>
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d1eb      	bne.n	8010d58 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d84:	f003 0304 	and.w	r3, r3, #4
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d004      	beq.n	8010d96 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2204      	movs	r2, #4
 8010d90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d92:	2304      	movs	r3, #4
 8010d94:	e0b1      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d004      	beq.n	8010dac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	2201      	movs	r2, #1
 8010da6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010da8:	2301      	movs	r3, #1
 8010daa:	e0a6      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	22c5      	movs	r2, #197	; 0xc5
 8010db0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7ff fd18 	bl	80107e8 <SDIO_GetCommandResponse>
 8010db8:	4603      	mov	r3, r0
 8010dba:	461a      	mov	r2, r3
 8010dbc:	7afb      	ldrb	r3, [r7, #11]
 8010dbe:	4293      	cmp	r3, r2
 8010dc0:	d001      	beq.n	8010dc6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e099      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010dc6:	2100      	movs	r1, #0
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f7ff fd1a 	bl	8010802 <SDIO_GetResponse>
 8010dce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010dd0:	693a      	ldr	r2, [r7, #16]
 8010dd2:	4b4e      	ldr	r3, [pc, #312]	; (8010f0c <SDMMC_GetCmdResp1+0x1d4>)
 8010dd4:	4013      	ands	r3, r2
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d101      	bne.n	8010dde <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	e08d      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	da02      	bge.n	8010dea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010de4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010de8:	e087      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010dea:	693b      	ldr	r3, [r7, #16]
 8010dec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010df4:	2340      	movs	r3, #64	; 0x40
 8010df6:	e080      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010df8:	693b      	ldr	r3, [r7, #16]
 8010dfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d001      	beq.n	8010e06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e02:	2380      	movs	r3, #128	; 0x80
 8010e04:	e079      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d002      	beq.n	8010e16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e14:	e071      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d002      	beq.n	8010e26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e24:	e069      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d002      	beq.n	8010e36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e34:	e061      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e36:	693b      	ldr	r3, [r7, #16]
 8010e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d002      	beq.n	8010e46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e44:	e059      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d002      	beq.n	8010e56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e54:	e051      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d002      	beq.n	8010e66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e64:	e049      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d002      	beq.n	8010e76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e74:	e041      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e76:	693b      	ldr	r3, [r7, #16]
 8010e78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d002      	beq.n	8010e86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010e80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e84:	e039      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e86:	693b      	ldr	r3, [r7, #16]
 8010e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d002      	beq.n	8010e96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e94:	e031      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010ea0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010ea4:	e029      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010ea6:	693b      	ldr	r3, [r7, #16]
 8010ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d002      	beq.n	8010eb6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010eb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010eb4:	e021      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d002      	beq.n	8010ec6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010ec0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010ec4:	e019      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010ec6:	693b      	ldr	r3, [r7, #16]
 8010ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ed0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ed4:	e011      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d002      	beq.n	8010ee6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ee0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ee4:	e009      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	f003 0308 	and.w	r3, r3, #8
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d002      	beq.n	8010ef6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010ef0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010ef4:	e001      	b.n	8010efa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ef6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010efa:	4618      	mov	r0, r3
 8010efc:	371c      	adds	r7, #28
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd90      	pop	{r4, r7, pc}
 8010f02:	bf00      	nop
 8010f04:	20000000 	.word	0x20000000
 8010f08:	10624dd3 	.word	0x10624dd3
 8010f0c:	fdffe008 	.word	0xfdffe008

08010f10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010f10:	b490      	push	{r4, r7}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f18:	4b1e      	ldr	r3, [pc, #120]	; (8010f94 <SDMMC_GetCmdResp2+0x84>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	4a1e      	ldr	r2, [pc, #120]	; (8010f98 <SDMMC_GetCmdResp2+0x88>)
 8010f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8010f22:	0a5b      	lsrs	r3, r3, #9
 8010f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f2c:	4623      	mov	r3, r4
 8010f2e:	1e5c      	subs	r4, r3, #1
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d102      	bne.n	8010f3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f38:	e026      	b.n	8010f88 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f3e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d0f0      	beq.n	8010f2c <SDMMC_GetCmdResp2+0x1c>
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1eb      	bne.n	8010f2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f58:	f003 0304 	and.w	r3, r3, #4
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d004      	beq.n	8010f6a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	2204      	movs	r2, #4
 8010f64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f66:	2304      	movs	r3, #4
 8010f68:	e00e      	b.n	8010f88 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f6e:	f003 0301 	and.w	r3, r3, #1
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d004      	beq.n	8010f80 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e003      	b.n	8010f88 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	22c5      	movs	r2, #197	; 0xc5
 8010f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3710      	adds	r7, #16
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bc90      	pop	{r4, r7}
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	20000000 	.word	0x20000000
 8010f98:	10624dd3 	.word	0x10624dd3

08010f9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010f9c:	b490      	push	{r4, r7}
 8010f9e:	b084      	sub	sp, #16
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010fa4:	4b18      	ldr	r3, [pc, #96]	; (8011008 <SDMMC_GetCmdResp3+0x6c>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	4a18      	ldr	r2, [pc, #96]	; (801100c <SDMMC_GetCmdResp3+0x70>)
 8010faa:	fba2 2303 	umull	r2, r3, r2, r3
 8010fae:	0a5b      	lsrs	r3, r3, #9
 8010fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010fb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010fb8:	4623      	mov	r3, r4
 8010fba:	1e5c      	subs	r4, r3, #1
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d102      	bne.n	8010fc6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010fc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010fc4:	e01b      	b.n	8010ffe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d0f0      	beq.n	8010fb8 <SDMMC_GetCmdResp3+0x1c>
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d1eb      	bne.n	8010fb8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010fe4:	f003 0304 	and.w	r3, r3, #4
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2204      	movs	r2, #4
 8010ff0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ff2:	2304      	movs	r3, #4
 8010ff4:	e003      	b.n	8010ffe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	22c5      	movs	r2, #197	; 0xc5
 8010ffa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010ffc:	2300      	movs	r3, #0
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3710      	adds	r7, #16
 8011002:	46bd      	mov	sp, r7
 8011004:	bc90      	pop	{r4, r7}
 8011006:	4770      	bx	lr
 8011008:	20000000 	.word	0x20000000
 801100c:	10624dd3 	.word	0x10624dd3

08011010 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011010:	b590      	push	{r4, r7, lr}
 8011012:	b087      	sub	sp, #28
 8011014:	af00      	add	r7, sp, #0
 8011016:	60f8      	str	r0, [r7, #12]
 8011018:	460b      	mov	r3, r1
 801101a:	607a      	str	r2, [r7, #4]
 801101c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801101e:	4b34      	ldr	r3, [pc, #208]	; (80110f0 <SDMMC_GetCmdResp6+0xe0>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	4a34      	ldr	r2, [pc, #208]	; (80110f4 <SDMMC_GetCmdResp6+0xe4>)
 8011024:	fba2 2303 	umull	r2, r3, r2, r3
 8011028:	0a5b      	lsrs	r3, r3, #9
 801102a:	f241 3288 	movw	r2, #5000	; 0x1388
 801102e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011032:	4623      	mov	r3, r4
 8011034:	1e5c      	subs	r4, r3, #1
 8011036:	2b00      	cmp	r3, #0
 8011038:	d102      	bne.n	8011040 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801103a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801103e:	e052      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011044:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801104c:	2b00      	cmp	r3, #0
 801104e:	d0f0      	beq.n	8011032 <SDMMC_GetCmdResp6+0x22>
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011056:	2b00      	cmp	r3, #0
 8011058:	d1eb      	bne.n	8011032 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105e:	f003 0304 	and.w	r3, r3, #4
 8011062:	2b00      	cmp	r3, #0
 8011064:	d004      	beq.n	8011070 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2204      	movs	r2, #4
 801106a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801106c:	2304      	movs	r3, #4
 801106e:	e03a      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011074:	f003 0301 	and.w	r3, r3, #1
 8011078:	2b00      	cmp	r3, #0
 801107a:	d004      	beq.n	8011086 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	2201      	movs	r2, #1
 8011080:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011082:	2301      	movs	r3, #1
 8011084:	e02f      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f7ff fbae 	bl	80107e8 <SDIO_GetCommandResponse>
 801108c:	4603      	mov	r3, r0
 801108e:	461a      	mov	r2, r3
 8011090:	7afb      	ldrb	r3, [r7, #11]
 8011092:	4293      	cmp	r3, r2
 8011094:	d001      	beq.n	801109a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011096:	2301      	movs	r3, #1
 8011098:	e025      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	22c5      	movs	r2, #197	; 0xc5
 801109e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80110a0:	2100      	movs	r1, #0
 80110a2:	68f8      	ldr	r0, [r7, #12]
 80110a4:	f7ff fbad 	bl	8010802 <SDIO_GetResponse>
 80110a8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	0c1b      	lsrs	r3, r3, #16
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80110be:	2300      	movs	r3, #0
 80110c0:	e011      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d002      	beq.n	80110d2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80110cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80110d0:	e009      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d002      	beq.n	80110e2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80110dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80110e0:	e001      	b.n	80110e6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80110e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80110e6:	4618      	mov	r0, r3
 80110e8:	371c      	adds	r7, #28
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd90      	pop	{r4, r7, pc}
 80110ee:	bf00      	nop
 80110f0:	20000000 	.word	0x20000000
 80110f4:	10624dd3 	.word	0x10624dd3

080110f8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80110f8:	b490      	push	{r4, r7}
 80110fa:	b084      	sub	sp, #16
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011100:	4b21      	ldr	r3, [pc, #132]	; (8011188 <SDMMC_GetCmdResp7+0x90>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4a21      	ldr	r2, [pc, #132]	; (801118c <SDMMC_GetCmdResp7+0x94>)
 8011106:	fba2 2303 	umull	r2, r3, r2, r3
 801110a:	0a5b      	lsrs	r3, r3, #9
 801110c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011110:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011114:	4623      	mov	r3, r4
 8011116:	1e5c      	subs	r4, r3, #1
 8011118:	2b00      	cmp	r3, #0
 801111a:	d102      	bne.n	8011122 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801111c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011120:	e02c      	b.n	801117c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011126:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801112e:	2b00      	cmp	r3, #0
 8011130:	d0f0      	beq.n	8011114 <SDMMC_GetCmdResp7+0x1c>
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011138:	2b00      	cmp	r3, #0
 801113a:	d1eb      	bne.n	8011114 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011140:	f003 0304 	and.w	r3, r3, #4
 8011144:	2b00      	cmp	r3, #0
 8011146:	d004      	beq.n	8011152 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	2204      	movs	r2, #4
 801114c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801114e:	2304      	movs	r3, #4
 8011150:	e014      	b.n	801117c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011156:	f003 0301 	and.w	r3, r3, #1
 801115a:	2b00      	cmp	r3, #0
 801115c:	d004      	beq.n	8011168 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	2201      	movs	r2, #1
 8011162:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011164:	2301      	movs	r3, #1
 8011166:	e009      	b.n	801117c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801116c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2240      	movs	r2, #64	; 0x40
 8011178:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801117a:	2300      	movs	r3, #0
  
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bc90      	pop	{r4, r7}
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop
 8011188:	20000000 	.word	0x20000000
 801118c:	10624dd3 	.word	0x10624dd3

08011190 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011194:	4904      	ldr	r1, [pc, #16]	; (80111a8 <MX_FATFS_Init+0x18>)
 8011196:	4805      	ldr	r0, [pc, #20]	; (80111ac <MX_FATFS_Init+0x1c>)
 8011198:	f003 fb9c 	bl	80148d4 <FATFS_LinkDriver>
 801119c:	4603      	mov	r3, r0
 801119e:	461a      	mov	r2, r3
 80111a0:	4b03      	ldr	r3, [pc, #12]	; (80111b0 <MX_FATFS_Init+0x20>)
 80111a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80111a4:	bf00      	nop
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	20047c38 	.word	0x20047c38
 80111ac:	08019190 	.word	0x08019190
 80111b0:	20047c34 	.word	0x20047c34

080111b4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80111ba:	2300      	movs	r3, #0
 80111bc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80111be:	f000 f896 	bl	80112ee <BSP_SD_IsDetected>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b01      	cmp	r3, #1
 80111c6:	d001      	beq.n	80111cc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80111c8:	2301      	movs	r3, #1
 80111ca:	e012      	b.n	80111f2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80111cc:	480b      	ldr	r0, [pc, #44]	; (80111fc <BSP_SD_Init+0x48>)
 80111ce:	f7fb ffa5 	bl	800d11c <HAL_SD_Init>
 80111d2:	4603      	mov	r3, r0
 80111d4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80111d6:	79fb      	ldrb	r3, [r7, #7]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d109      	bne.n	80111f0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80111dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80111e0:	4806      	ldr	r0, [pc, #24]	; (80111fc <BSP_SD_Init+0x48>)
 80111e2:	f7fc fd4f 	bl	800dc84 <HAL_SD_ConfigWideBusOperation>
 80111e6:	4603      	mov	r3, r0
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d001      	beq.n	80111f0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80111ec:	2301      	movs	r3, #1
 80111ee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80111f0:	79fb      	ldrb	r3, [r7, #7]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	20047a34 	.word	0x20047a34

08011200 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b086      	sub	sp, #24
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801120c:	2300      	movs	r3, #0
 801120e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	68ba      	ldr	r2, [r7, #8]
 8011214:	68f9      	ldr	r1, [r7, #12]
 8011216:	4806      	ldr	r0, [pc, #24]	; (8011230 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011218:	f7fc f810 	bl	800d23c <HAL_SD_ReadBlocks_DMA>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d001      	beq.n	8011226 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011222:	2301      	movs	r3, #1
 8011224:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011226:	7dfb      	ldrb	r3, [r7, #23]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3718      	adds	r7, #24
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	20047a34 	.word	0x20047a34

08011234 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011240:	2300      	movs	r3, #0
 8011242:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	68f9      	ldr	r1, [r7, #12]
 801124a:	4806      	ldr	r0, [pc, #24]	; (8011264 <BSP_SD_WriteBlocks_DMA+0x30>)
 801124c:	f7fc f8de 	bl	800d40c <HAL_SD_WriteBlocks_DMA>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d001      	beq.n	801125a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011256:	2301      	movs	r3, #1
 8011258:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801125a:	7dfb      	ldrb	r3, [r7, #23]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	20047a34 	.word	0x20047a34

08011268 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801126c:	4805      	ldr	r0, [pc, #20]	; (8011284 <BSP_SD_GetCardState+0x1c>)
 801126e:	f7fc fd85 	bl	800dd7c <HAL_SD_GetCardState>
 8011272:	4603      	mov	r3, r0
 8011274:	2b04      	cmp	r3, #4
 8011276:	bf14      	ite	ne
 8011278:	2301      	movne	r3, #1
 801127a:	2300      	moveq	r3, #0
 801127c:	b2db      	uxtb	r3, r3
}
 801127e:	4618      	mov	r0, r3
 8011280:	bd80      	pop	{r7, pc}
 8011282:	bf00      	nop
 8011284:	20047a34 	.word	0x20047a34

08011288 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011290:	6879      	ldr	r1, [r7, #4]
 8011292:	4803      	ldr	r0, [pc, #12]	; (80112a0 <BSP_SD_GetCardInfo+0x18>)
 8011294:	f7fc fcca 	bl	800dc2c <HAL_SD_GetCardInfo>
}
 8011298:	bf00      	nop
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}
 80112a0:	20047a34 	.word	0x20047a34

080112a4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80112ac:	f000 f818 	bl	80112e0 <BSP_SD_AbortCallback>
}
 80112b0:	bf00      	nop
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b082      	sub	sp, #8
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80112c0:	f000 f9a8 	bl	8011614 <BSP_SD_WriteCpltCallback>
}
 80112c4:	bf00      	nop
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80112d4:	f000 f9aa 	bl	801162c <BSP_SD_ReadCpltCallback>
}
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}

080112e0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80112e0:	b480      	push	{r7}
 80112e2:	af00      	add	r7, sp, #0

}
 80112e4:	bf00      	nop
 80112e6:	46bd      	mov	sp, r7
 80112e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ec:	4770      	bx	lr

080112ee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b082      	sub	sp, #8
 80112f2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80112f4:	2301      	movs	r3, #1
 80112f6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80112f8:	f000 f80c 	bl	8011314 <BSP_PlatformIsDetected>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d101      	bne.n	8011306 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011302:	2300      	movs	r3, #0
 8011304:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011306:	79fb      	ldrb	r3, [r7, #7]
 8011308:	b2db      	uxtb	r3, r3
}
 801130a:	4618      	mov	r0, r3
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
	...

08011314 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011314:	b580      	push	{r7, lr}
 8011316:	b082      	sub	sp, #8
 8011318:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801131a:	2301      	movs	r3, #1
 801131c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801131e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011322:	4806      	ldr	r0, [pc, #24]	; (801133c <BSP_PlatformIsDetected+0x28>)
 8011324:	f7fa f866 	bl	800b3f4 <HAL_GPIO_ReadPin>
 8011328:	4603      	mov	r3, r0
 801132a:	2b00      	cmp	r3, #0
 801132c:	d001      	beq.n	8011332 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801132e:	2300      	movs	r3, #0
 8011330:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011332:	79fb      	ldrb	r3, [r7, #7]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3708      	adds	r7, #8
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}
 801133c:	40020000 	.word	0x40020000

08011340 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b084      	sub	sp, #16
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011348:	f7f8 fdca 	bl	8009ee0 <HAL_GetTick>
 801134c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801134e:	e006      	b.n	801135e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011350:	f7ff ff8a 	bl	8011268 <BSP_SD_GetCardState>
 8011354:	4603      	mov	r3, r0
 8011356:	2b00      	cmp	r3, #0
 8011358:	d101      	bne.n	801135e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801135a:	2300      	movs	r3, #0
 801135c:	e009      	b.n	8011372 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801135e:	f7f8 fdbf 	bl	8009ee0 <HAL_GetTick>
 8011362:	4602      	mov	r2, r0
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	1ad3      	subs	r3, r2, r3
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	429a      	cmp	r2, r3
 801136c:	d8f0      	bhi.n	8011350 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011372:	4618      	mov	r0, r3
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
	...

0801137c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b082      	sub	sp, #8
 8011380:	af00      	add	r7, sp, #0
 8011382:	4603      	mov	r3, r0
 8011384:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011386:	4b0b      	ldr	r3, [pc, #44]	; (80113b4 <SD_CheckStatus+0x38>)
 8011388:	2201      	movs	r2, #1
 801138a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801138c:	f7ff ff6c 	bl	8011268 <BSP_SD_GetCardState>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d107      	bne.n	80113a6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011396:	4b07      	ldr	r3, [pc, #28]	; (80113b4 <SD_CheckStatus+0x38>)
 8011398:	781b      	ldrb	r3, [r3, #0]
 801139a:	b2db      	uxtb	r3, r3
 801139c:	f023 0301 	bic.w	r3, r3, #1
 80113a0:	b2da      	uxtb	r2, r3
 80113a2:	4b04      	ldr	r3, [pc, #16]	; (80113b4 <SD_CheckStatus+0x38>)
 80113a4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80113a6:	4b03      	ldr	r3, [pc, #12]	; (80113b4 <SD_CheckStatus+0x38>)
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	b2db      	uxtb	r3, r3
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3708      	adds	r7, #8
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	20000009 	.word	0x20000009

080113b8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b082      	sub	sp, #8
 80113bc:	af00      	add	r7, sp, #0
 80113be:	4603      	mov	r3, r0
 80113c0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80113c2:	f7ff fef7 	bl	80111b4 <BSP_SD_Init>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d107      	bne.n	80113dc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80113cc:	79fb      	ldrb	r3, [r7, #7]
 80113ce:	4618      	mov	r0, r3
 80113d0:	f7ff ffd4 	bl	801137c <SD_CheckStatus>
 80113d4:	4603      	mov	r3, r0
 80113d6:	461a      	mov	r2, r3
 80113d8:	4b04      	ldr	r3, [pc, #16]	; (80113ec <SD_initialize+0x34>)
 80113da:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80113dc:	4b03      	ldr	r3, [pc, #12]	; (80113ec <SD_initialize+0x34>)
 80113de:	781b      	ldrb	r3, [r3, #0]
 80113e0:	b2db      	uxtb	r3, r3
}
 80113e2:	4618      	mov	r0, r3
 80113e4:	3708      	adds	r7, #8
 80113e6:	46bd      	mov	sp, r7
 80113e8:	bd80      	pop	{r7, pc}
 80113ea:	bf00      	nop
 80113ec:	20000009 	.word	0x20000009

080113f0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	4603      	mov	r3, r0
 80113f8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80113fa:	79fb      	ldrb	r3, [r7, #7]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff ffbd 	bl	801137c <SD_CheckStatus>
 8011402:	4603      	mov	r3, r0
}
 8011404:	4618      	mov	r0, r3
 8011406:	3708      	adds	r7, #8
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b086      	sub	sp, #24
 8011410:	af00      	add	r7, sp, #0
 8011412:	60b9      	str	r1, [r7, #8]
 8011414:	607a      	str	r2, [r7, #4]
 8011416:	603b      	str	r3, [r7, #0]
 8011418:	4603      	mov	r3, r0
 801141a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801141c:	2301      	movs	r3, #1
 801141e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011420:	f247 5030 	movw	r0, #30000	; 0x7530
 8011424:	f7ff ff8c 	bl	8011340 <SD_CheckStatusWithTimeout>
 8011428:	4603      	mov	r3, r0
 801142a:	2b00      	cmp	r3, #0
 801142c:	da01      	bge.n	8011432 <SD_read+0x26>
  {
    return res;
 801142e:	7dfb      	ldrb	r3, [r7, #23]
 8011430:	e03b      	b.n	80114aa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011432:	683a      	ldr	r2, [r7, #0]
 8011434:	6879      	ldr	r1, [r7, #4]
 8011436:	68b8      	ldr	r0, [r7, #8]
 8011438:	f7ff fee2 	bl	8011200 <BSP_SD_ReadBlocks_DMA>
 801143c:	4603      	mov	r3, r0
 801143e:	2b00      	cmp	r3, #0
 8011440:	d132      	bne.n	80114a8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011442:	4b1c      	ldr	r3, [pc, #112]	; (80114b4 <SD_read+0xa8>)
 8011444:	2200      	movs	r2, #0
 8011446:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011448:	f7f8 fd4a 	bl	8009ee0 <HAL_GetTick>
 801144c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801144e:	bf00      	nop
 8011450:	4b18      	ldr	r3, [pc, #96]	; (80114b4 <SD_read+0xa8>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d108      	bne.n	801146a <SD_read+0x5e>
 8011458:	f7f8 fd42 	bl	8009ee0 <HAL_GetTick>
 801145c:	4602      	mov	r2, r0
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	1ad3      	subs	r3, r2, r3
 8011462:	f247 522f 	movw	r2, #29999	; 0x752f
 8011466:	4293      	cmp	r3, r2
 8011468:	d9f2      	bls.n	8011450 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801146a:	4b12      	ldr	r3, [pc, #72]	; (80114b4 <SD_read+0xa8>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d102      	bne.n	8011478 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011472:	2301      	movs	r3, #1
 8011474:	75fb      	strb	r3, [r7, #23]
 8011476:	e017      	b.n	80114a8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011478:	4b0e      	ldr	r3, [pc, #56]	; (80114b4 <SD_read+0xa8>)
 801147a:	2200      	movs	r2, #0
 801147c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801147e:	f7f8 fd2f 	bl	8009ee0 <HAL_GetTick>
 8011482:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011484:	e007      	b.n	8011496 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011486:	f7ff feef 	bl	8011268 <BSP_SD_GetCardState>
 801148a:	4603      	mov	r3, r0
 801148c:	2b00      	cmp	r3, #0
 801148e:	d102      	bne.n	8011496 <SD_read+0x8a>
          {
            res = RES_OK;
 8011490:	2300      	movs	r3, #0
 8011492:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011494:	e008      	b.n	80114a8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011496:	f7f8 fd23 	bl	8009ee0 <HAL_GetTick>
 801149a:	4602      	mov	r2, r0
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	f247 522f 	movw	r2, #29999	; 0x752f
 80114a4:	4293      	cmp	r3, r2
 80114a6:	d9ee      	bls.n	8011486 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3718      	adds	r7, #24
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	200452d0 	.word	0x200452d0

080114b8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b086      	sub	sp, #24
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60b9      	str	r1, [r7, #8]
 80114c0:	607a      	str	r2, [r7, #4]
 80114c2:	603b      	str	r3, [r7, #0]
 80114c4:	4603      	mov	r3, r0
 80114c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80114c8:	2301      	movs	r3, #1
 80114ca:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80114cc:	4b24      	ldr	r3, [pc, #144]	; (8011560 <SD_write+0xa8>)
 80114ce:	2200      	movs	r2, #0
 80114d0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80114d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80114d6:	f7ff ff33 	bl	8011340 <SD_CheckStatusWithTimeout>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da01      	bge.n	80114e4 <SD_write+0x2c>
  {
    return res;
 80114e0:	7dfb      	ldrb	r3, [r7, #23]
 80114e2:	e038      	b.n	8011556 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80114e4:	683a      	ldr	r2, [r7, #0]
 80114e6:	6879      	ldr	r1, [r7, #4]
 80114e8:	68b8      	ldr	r0, [r7, #8]
 80114ea:	f7ff fea3 	bl	8011234 <BSP_SD_WriteBlocks_DMA>
 80114ee:	4603      	mov	r3, r0
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d12f      	bne.n	8011554 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80114f4:	f7f8 fcf4 	bl	8009ee0 <HAL_GetTick>
 80114f8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80114fa:	bf00      	nop
 80114fc:	4b18      	ldr	r3, [pc, #96]	; (8011560 <SD_write+0xa8>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d108      	bne.n	8011516 <SD_write+0x5e>
 8011504:	f7f8 fcec 	bl	8009ee0 <HAL_GetTick>
 8011508:	4602      	mov	r2, r0
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	1ad3      	subs	r3, r2, r3
 801150e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011512:	4293      	cmp	r3, r2
 8011514:	d9f2      	bls.n	80114fc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011516:	4b12      	ldr	r3, [pc, #72]	; (8011560 <SD_write+0xa8>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d102      	bne.n	8011524 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	75fb      	strb	r3, [r7, #23]
 8011522:	e017      	b.n	8011554 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011524:	4b0e      	ldr	r3, [pc, #56]	; (8011560 <SD_write+0xa8>)
 8011526:	2200      	movs	r2, #0
 8011528:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801152a:	f7f8 fcd9 	bl	8009ee0 <HAL_GetTick>
 801152e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011530:	e007      	b.n	8011542 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011532:	f7ff fe99 	bl	8011268 <BSP_SD_GetCardState>
 8011536:	4603      	mov	r3, r0
 8011538:	2b00      	cmp	r3, #0
 801153a:	d102      	bne.n	8011542 <SD_write+0x8a>
          {
            res = RES_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	75fb      	strb	r3, [r7, #23]
            break;
 8011540:	e008      	b.n	8011554 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011542:	f7f8 fccd 	bl	8009ee0 <HAL_GetTick>
 8011546:	4602      	mov	r2, r0
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011550:	4293      	cmp	r3, r2
 8011552:	d9ee      	bls.n	8011532 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011554:	7dfb      	ldrb	r3, [r7, #23]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	200452cc 	.word	0x200452cc

08011564 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b08c      	sub	sp, #48	; 0x30
 8011568:	af00      	add	r7, sp, #0
 801156a:	4603      	mov	r3, r0
 801156c:	603a      	str	r2, [r7, #0]
 801156e:	71fb      	strb	r3, [r7, #7]
 8011570:	460b      	mov	r3, r1
 8011572:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011574:	2301      	movs	r3, #1
 8011576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801157a:	4b25      	ldr	r3, [pc, #148]	; (8011610 <SD_ioctl+0xac>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	b2db      	uxtb	r3, r3
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <SD_ioctl+0x28>
 8011588:	2303      	movs	r3, #3
 801158a:	e03c      	b.n	8011606 <SD_ioctl+0xa2>

  switch (cmd)
 801158c:	79bb      	ldrb	r3, [r7, #6]
 801158e:	2b03      	cmp	r3, #3
 8011590:	d834      	bhi.n	80115fc <SD_ioctl+0x98>
 8011592:	a201      	add	r2, pc, #4	; (adr r2, 8011598 <SD_ioctl+0x34>)
 8011594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011598:	080115a9 	.word	0x080115a9
 801159c:	080115b1 	.word	0x080115b1
 80115a0:	080115c9 	.word	0x080115c9
 80115a4:	080115e3 	.word	0x080115e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115ae:	e028      	b.n	8011602 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80115b0:	f107 030c 	add.w	r3, r7, #12
 80115b4:	4618      	mov	r0, r3
 80115b6:	f7ff fe67 	bl	8011288 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80115ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115c6:	e01c      	b.n	8011602 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115c8:	f107 030c 	add.w	r3, r7, #12
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff fe5b 	bl	8011288 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80115d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d4:	b29a      	uxth	r2, r3
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80115da:	2300      	movs	r3, #0
 80115dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115e0:	e00f      	b.n	8011602 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80115e2:	f107 030c 	add.w	r3, r7, #12
 80115e6:	4618      	mov	r0, r3
 80115e8:	f7ff fe4e 	bl	8011288 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80115ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ee:	0a5a      	lsrs	r2, r3, #9
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80115f4:	2300      	movs	r3, #0
 80115f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80115fa:	e002      	b.n	8011602 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80115fc:	2304      	movs	r3, #4
 80115fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011606:	4618      	mov	r0, r3
 8011608:	3730      	adds	r7, #48	; 0x30
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
 801160e:	bf00      	nop
 8011610:	20000009 	.word	0x20000009

08011614 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011614:	b480      	push	{r7}
 8011616:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011618:	4b03      	ldr	r3, [pc, #12]	; (8011628 <BSP_SD_WriteCpltCallback+0x14>)
 801161a:	2201      	movs	r2, #1
 801161c:	601a      	str	r2, [r3, #0]
}
 801161e:	bf00      	nop
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	200452cc 	.word	0x200452cc

0801162c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801162c:	b480      	push	{r7}
 801162e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011630:	4b03      	ldr	r3, [pc, #12]	; (8011640 <BSP_SD_ReadCpltCallback+0x14>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
}
 8011636:	bf00      	nop
 8011638:	46bd      	mov	sp, r7
 801163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163e:	4770      	bx	lr
 8011640:	200452d0 	.word	0x200452d0

08011644 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801164e:	79fb      	ldrb	r3, [r7, #7]
 8011650:	4a08      	ldr	r2, [pc, #32]	; (8011674 <disk_status+0x30>)
 8011652:	009b      	lsls	r3, r3, #2
 8011654:	4413      	add	r3, r2
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	685b      	ldr	r3, [r3, #4]
 801165a:	79fa      	ldrb	r2, [r7, #7]
 801165c:	4905      	ldr	r1, [pc, #20]	; (8011674 <disk_status+0x30>)
 801165e:	440a      	add	r2, r1
 8011660:	7a12      	ldrb	r2, [r2, #8]
 8011662:	4610      	mov	r0, r2
 8011664:	4798      	blx	r3
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]
  return stat;
 801166a:	7bfb      	ldrb	r3, [r7, #15]
}
 801166c:	4618      	mov	r0, r3
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}
 8011674:	200452fc 	.word	0x200452fc

08011678 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	4603      	mov	r3, r0
 8011680:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011682:	2300      	movs	r3, #0
 8011684:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011686:	79fb      	ldrb	r3, [r7, #7]
 8011688:	4a0d      	ldr	r2, [pc, #52]	; (80116c0 <disk_initialize+0x48>)
 801168a:	5cd3      	ldrb	r3, [r2, r3]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d111      	bne.n	80116b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011690:	79fb      	ldrb	r3, [r7, #7]
 8011692:	4a0b      	ldr	r2, [pc, #44]	; (80116c0 <disk_initialize+0x48>)
 8011694:	2101      	movs	r1, #1
 8011696:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011698:	79fb      	ldrb	r3, [r7, #7]
 801169a:	4a09      	ldr	r2, [pc, #36]	; (80116c0 <disk_initialize+0x48>)
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	4413      	add	r3, r2
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	79fa      	ldrb	r2, [r7, #7]
 80116a6:	4906      	ldr	r1, [pc, #24]	; (80116c0 <disk_initialize+0x48>)
 80116a8:	440a      	add	r2, r1
 80116aa:	7a12      	ldrb	r2, [r2, #8]
 80116ac:	4610      	mov	r0, r2
 80116ae:	4798      	blx	r3
 80116b0:	4603      	mov	r3, r0
 80116b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	200452fc 	.word	0x200452fc

080116c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80116c4:	b590      	push	{r4, r7, lr}
 80116c6:	b087      	sub	sp, #28
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60b9      	str	r1, [r7, #8]
 80116cc:	607a      	str	r2, [r7, #4]
 80116ce:	603b      	str	r3, [r7, #0]
 80116d0:	4603      	mov	r3, r0
 80116d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80116d4:	7bfb      	ldrb	r3, [r7, #15]
 80116d6:	4a0a      	ldr	r2, [pc, #40]	; (8011700 <disk_read+0x3c>)
 80116d8:	009b      	lsls	r3, r3, #2
 80116da:	4413      	add	r3, r2
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	689c      	ldr	r4, [r3, #8]
 80116e0:	7bfb      	ldrb	r3, [r7, #15]
 80116e2:	4a07      	ldr	r2, [pc, #28]	; (8011700 <disk_read+0x3c>)
 80116e4:	4413      	add	r3, r2
 80116e6:	7a18      	ldrb	r0, [r3, #8]
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	687a      	ldr	r2, [r7, #4]
 80116ec:	68b9      	ldr	r1, [r7, #8]
 80116ee:	47a0      	blx	r4
 80116f0:	4603      	mov	r3, r0
 80116f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	371c      	adds	r7, #28
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd90      	pop	{r4, r7, pc}
 80116fe:	bf00      	nop
 8011700:	200452fc 	.word	0x200452fc

08011704 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011704:	b590      	push	{r4, r7, lr}
 8011706:	b087      	sub	sp, #28
 8011708:	af00      	add	r7, sp, #0
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
 801170e:	603b      	str	r3, [r7, #0]
 8011710:	4603      	mov	r3, r0
 8011712:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011714:	7bfb      	ldrb	r3, [r7, #15]
 8011716:	4a0a      	ldr	r2, [pc, #40]	; (8011740 <disk_write+0x3c>)
 8011718:	009b      	lsls	r3, r3, #2
 801171a:	4413      	add	r3, r2
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	68dc      	ldr	r4, [r3, #12]
 8011720:	7bfb      	ldrb	r3, [r7, #15]
 8011722:	4a07      	ldr	r2, [pc, #28]	; (8011740 <disk_write+0x3c>)
 8011724:	4413      	add	r3, r2
 8011726:	7a18      	ldrb	r0, [r3, #8]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	68b9      	ldr	r1, [r7, #8]
 801172e:	47a0      	blx	r4
 8011730:	4603      	mov	r3, r0
 8011732:	75fb      	strb	r3, [r7, #23]
  return res;
 8011734:	7dfb      	ldrb	r3, [r7, #23]
}
 8011736:	4618      	mov	r0, r3
 8011738:	371c      	adds	r7, #28
 801173a:	46bd      	mov	sp, r7
 801173c:	bd90      	pop	{r4, r7, pc}
 801173e:	bf00      	nop
 8011740:	200452fc 	.word	0x200452fc

08011744 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b084      	sub	sp, #16
 8011748:	af00      	add	r7, sp, #0
 801174a:	4603      	mov	r3, r0
 801174c:	603a      	str	r2, [r7, #0]
 801174e:	71fb      	strb	r3, [r7, #7]
 8011750:	460b      	mov	r3, r1
 8011752:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011754:	79fb      	ldrb	r3, [r7, #7]
 8011756:	4a09      	ldr	r2, [pc, #36]	; (801177c <disk_ioctl+0x38>)
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	691b      	ldr	r3, [r3, #16]
 8011760:	79fa      	ldrb	r2, [r7, #7]
 8011762:	4906      	ldr	r1, [pc, #24]	; (801177c <disk_ioctl+0x38>)
 8011764:	440a      	add	r2, r1
 8011766:	7a10      	ldrb	r0, [r2, #8]
 8011768:	79b9      	ldrb	r1, [r7, #6]
 801176a:	683a      	ldr	r2, [r7, #0]
 801176c:	4798      	blx	r3
 801176e:	4603      	mov	r3, r0
 8011770:	73fb      	strb	r3, [r7, #15]
  return res;
 8011772:	7bfb      	ldrb	r3, [r7, #15]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3710      	adds	r7, #16
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	200452fc 	.word	0x200452fc

08011780 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	3301      	adds	r3, #1
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011790:	89fb      	ldrh	r3, [r7, #14]
 8011792:	021b      	lsls	r3, r3, #8
 8011794:	b21a      	sxth	r2, r3
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	781b      	ldrb	r3, [r3, #0]
 801179a:	b21b      	sxth	r3, r3
 801179c:	4313      	orrs	r3, r2
 801179e:	b21b      	sxth	r3, r3
 80117a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80117a2:	89fb      	ldrh	r3, [r7, #14]
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3714      	adds	r7, #20
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr

080117b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	3303      	adds	r3, #3
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	021b      	lsls	r3, r3, #8
 80117c4:	687a      	ldr	r2, [r7, #4]
 80117c6:	3202      	adds	r2, #2
 80117c8:	7812      	ldrb	r2, [r2, #0]
 80117ca:	4313      	orrs	r3, r2
 80117cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	021b      	lsls	r3, r3, #8
 80117d2:	687a      	ldr	r2, [r7, #4]
 80117d4:	3201      	adds	r2, #1
 80117d6:	7812      	ldrb	r2, [r2, #0]
 80117d8:	4313      	orrs	r3, r2
 80117da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	021b      	lsls	r3, r3, #8
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	7812      	ldrb	r2, [r2, #0]
 80117e4:	4313      	orrs	r3, r2
 80117e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80117e8:	68fb      	ldr	r3, [r7, #12]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80117f6:	b480      	push	{r7}
 80117f8:	b083      	sub	sp, #12
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	6078      	str	r0, [r7, #4]
 80117fe:	460b      	mov	r3, r1
 8011800:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	1c5a      	adds	r2, r3, #1
 8011806:	607a      	str	r2, [r7, #4]
 8011808:	887a      	ldrh	r2, [r7, #2]
 801180a:	b2d2      	uxtb	r2, r2
 801180c:	701a      	strb	r2, [r3, #0]
 801180e:	887b      	ldrh	r3, [r7, #2]
 8011810:	0a1b      	lsrs	r3, r3, #8
 8011812:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	1c5a      	adds	r2, r3, #1
 8011818:	607a      	str	r2, [r7, #4]
 801181a:	887a      	ldrh	r2, [r7, #2]
 801181c:	b2d2      	uxtb	r2, r2
 801181e:	701a      	strb	r2, [r3, #0]
}
 8011820:	bf00      	nop
 8011822:	370c      	adds	r7, #12
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr

0801182c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	607a      	str	r2, [r7, #4]
 801183c:	683a      	ldr	r2, [r7, #0]
 801183e:	b2d2      	uxtb	r2, r2
 8011840:	701a      	strb	r2, [r3, #0]
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	0a1b      	lsrs	r3, r3, #8
 8011846:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	1c5a      	adds	r2, r3, #1
 801184c:	607a      	str	r2, [r7, #4]
 801184e:	683a      	ldr	r2, [r7, #0]
 8011850:	b2d2      	uxtb	r2, r2
 8011852:	701a      	strb	r2, [r3, #0]
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	0a1b      	lsrs	r3, r3, #8
 8011858:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	1c5a      	adds	r2, r3, #1
 801185e:	607a      	str	r2, [r7, #4]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	b2d2      	uxtb	r2, r2
 8011864:	701a      	strb	r2, [r3, #0]
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	0a1b      	lsrs	r3, r3, #8
 801186a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	1c5a      	adds	r2, r3, #1
 8011870:	607a      	str	r2, [r7, #4]
 8011872:	683a      	ldr	r2, [r7, #0]
 8011874:	b2d2      	uxtb	r2, r2
 8011876:	701a      	strb	r2, [r3, #0]
}
 8011878:	bf00      	nop
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011884:	b480      	push	{r7}
 8011886:	b087      	sub	sp, #28
 8011888:	af00      	add	r7, sp, #0
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	60b9      	str	r1, [r7, #8]
 801188e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d00d      	beq.n	80118ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801189e:	693a      	ldr	r2, [r7, #16]
 80118a0:	1c53      	adds	r3, r2, #1
 80118a2:	613b      	str	r3, [r7, #16]
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	1c59      	adds	r1, r3, #1
 80118a8:	6179      	str	r1, [r7, #20]
 80118aa:	7812      	ldrb	r2, [r2, #0]
 80118ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	3b01      	subs	r3, #1
 80118b2:	607b      	str	r3, [r7, #4]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1f1      	bne.n	801189e <mem_cpy+0x1a>
	}
}
 80118ba:	bf00      	nop
 80118bc:	371c      	adds	r7, #28
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr

080118c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80118c6:	b480      	push	{r7}
 80118c8:	b087      	sub	sp, #28
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	60f8      	str	r0, [r7, #12]
 80118ce:	60b9      	str	r1, [r7, #8]
 80118d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	617a      	str	r2, [r7, #20]
 80118dc:	68ba      	ldr	r2, [r7, #8]
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	3b01      	subs	r3, #1
 80118e6:	607b      	str	r3, [r7, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d1f3      	bne.n	80118d6 <mem_set+0x10>
}
 80118ee:	bf00      	nop
 80118f0:	371c      	adds	r7, #28
 80118f2:	46bd      	mov	sp, r7
 80118f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f8:	4770      	bx	lr

080118fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80118fa:	b480      	push	{r7}
 80118fc:	b089      	sub	sp, #36	; 0x24
 80118fe:	af00      	add	r7, sp, #0
 8011900:	60f8      	str	r0, [r7, #12]
 8011902:	60b9      	str	r1, [r7, #8]
 8011904:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	61fb      	str	r3, [r7, #28]
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801190e:	2300      	movs	r3, #0
 8011910:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011912:	69fb      	ldr	r3, [r7, #28]
 8011914:	1c5a      	adds	r2, r3, #1
 8011916:	61fa      	str	r2, [r7, #28]
 8011918:	781b      	ldrb	r3, [r3, #0]
 801191a:	4619      	mov	r1, r3
 801191c:	69bb      	ldr	r3, [r7, #24]
 801191e:	1c5a      	adds	r2, r3, #1
 8011920:	61ba      	str	r2, [r7, #24]
 8011922:	781b      	ldrb	r3, [r3, #0]
 8011924:	1acb      	subs	r3, r1, r3
 8011926:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3b01      	subs	r3, #1
 801192c:	607b      	str	r3, [r7, #4]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <mem_cmp+0x40>
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d0eb      	beq.n	8011912 <mem_cmp+0x18>

	return r;
 801193a:	697b      	ldr	r3, [r7, #20]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3724      	adds	r7, #36	; 0x24
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011952:	e002      	b.n	801195a <chk_chr+0x12>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3301      	adds	r3, #1
 8011958:	607b      	str	r3, [r7, #4]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	781b      	ldrb	r3, [r3, #0]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d005      	beq.n	801196e <chk_chr+0x26>
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	781b      	ldrb	r3, [r3, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	683b      	ldr	r3, [r7, #0]
 801196a:	4293      	cmp	r3, r2
 801196c:	d1f2      	bne.n	8011954 <chk_chr+0xc>
	return *str;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	781b      	ldrb	r3, [r3, #0]
}
 8011972:	4618      	mov	r0, r3
 8011974:	370c      	adds	r7, #12
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr
	...

08011980 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011980:	b480      	push	{r7}
 8011982:	b085      	sub	sp, #20
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801198a:	2300      	movs	r3, #0
 801198c:	60bb      	str	r3, [r7, #8]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	60fb      	str	r3, [r7, #12]
 8011992:	e029      	b.n	80119e8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011994:	4a27      	ldr	r2, [pc, #156]	; (8011a34 <chk_lock+0xb4>)
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	011b      	lsls	r3, r3, #4
 801199a:	4413      	add	r3, r2
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d01d      	beq.n	80119de <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119a2:	4a24      	ldr	r2, [pc, #144]	; (8011a34 <chk_lock+0xb4>)
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	011b      	lsls	r3, r3, #4
 80119a8:	4413      	add	r3, r2
 80119aa:	681a      	ldr	r2, [r3, #0]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d116      	bne.n	80119e2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80119b4:	4a1f      	ldr	r2, [pc, #124]	; (8011a34 <chk_lock+0xb4>)
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	4413      	add	r3, r2
 80119bc:	3304      	adds	r3, #4
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d10c      	bne.n	80119e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119c8:	4a1a      	ldr	r2, [pc, #104]	; (8011a34 <chk_lock+0xb4>)
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	011b      	lsls	r3, r3, #4
 80119ce:	4413      	add	r3, r2
 80119d0:	3308      	adds	r3, #8
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80119d8:	429a      	cmp	r2, r3
 80119da:	d102      	bne.n	80119e2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80119dc:	e007      	b.n	80119ee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80119de:	2301      	movs	r3, #1
 80119e0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	3301      	adds	r3, #1
 80119e6:	60fb      	str	r3, [r7, #12]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b01      	cmp	r3, #1
 80119ec:	d9d2      	bls.n	8011994 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b02      	cmp	r3, #2
 80119f2:	d109      	bne.n	8011a08 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80119f4:	68bb      	ldr	r3, [r7, #8]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d102      	bne.n	8011a00 <chk_lock+0x80>
 80119fa:	683b      	ldr	r3, [r7, #0]
 80119fc:	2b02      	cmp	r3, #2
 80119fe:	d101      	bne.n	8011a04 <chk_lock+0x84>
 8011a00:	2300      	movs	r3, #0
 8011a02:	e010      	b.n	8011a26 <chk_lock+0xa6>
 8011a04:	2312      	movs	r3, #18
 8011a06:	e00e      	b.n	8011a26 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d108      	bne.n	8011a20 <chk_lock+0xa0>
 8011a0e:	4a09      	ldr	r2, [pc, #36]	; (8011a34 <chk_lock+0xb4>)
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	011b      	lsls	r3, r3, #4
 8011a14:	4413      	add	r3, r2
 8011a16:	330c      	adds	r3, #12
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a1e:	d101      	bne.n	8011a24 <chk_lock+0xa4>
 8011a20:	2310      	movs	r3, #16
 8011a22:	e000      	b.n	8011a26 <chk_lock+0xa6>
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3714      	adds	r7, #20
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr
 8011a32:	bf00      	nop
 8011a34:	200452dc 	.word	0x200452dc

08011a38 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	607b      	str	r3, [r7, #4]
 8011a42:	e002      	b.n	8011a4a <enq_lock+0x12>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	3301      	adds	r3, #1
 8011a48:	607b      	str	r3, [r7, #4]
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b01      	cmp	r3, #1
 8011a4e:	d806      	bhi.n	8011a5e <enq_lock+0x26>
 8011a50:	4a09      	ldr	r2, [pc, #36]	; (8011a78 <enq_lock+0x40>)
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	011b      	lsls	r3, r3, #4
 8011a56:	4413      	add	r3, r2
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d1f2      	bne.n	8011a44 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	bf14      	ite	ne
 8011a64:	2301      	movne	r3, #1
 8011a66:	2300      	moveq	r3, #0
 8011a68:	b2db      	uxtb	r3, r3
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr
 8011a76:	bf00      	nop
 8011a78:	200452dc 	.word	0x200452dc

08011a7c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b085      	sub	sp, #20
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011a86:	2300      	movs	r3, #0
 8011a88:	60fb      	str	r3, [r7, #12]
 8011a8a:	e01f      	b.n	8011acc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011a8c:	4a41      	ldr	r2, [pc, #260]	; (8011b94 <inc_lock+0x118>)
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	011b      	lsls	r3, r3, #4
 8011a92:	4413      	add	r3, r2
 8011a94:	681a      	ldr	r2, [r3, #0]
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d113      	bne.n	8011ac6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011a9e:	4a3d      	ldr	r2, [pc, #244]	; (8011b94 <inc_lock+0x118>)
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	011b      	lsls	r3, r3, #4
 8011aa4:	4413      	add	r3, r2
 8011aa6:	3304      	adds	r3, #4
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d109      	bne.n	8011ac6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011ab2:	4a38      	ldr	r2, [pc, #224]	; (8011b94 <inc_lock+0x118>)
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	011b      	lsls	r3, r3, #4
 8011ab8:	4413      	add	r3, r2
 8011aba:	3308      	adds	r3, #8
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	d006      	beq.n	8011ad4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	3301      	adds	r3, #1
 8011aca:	60fb      	str	r3, [r7, #12]
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d9dc      	bls.n	8011a8c <inc_lock+0x10>
 8011ad2:	e000      	b.n	8011ad6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011ad4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d132      	bne.n	8011b42 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011adc:	2300      	movs	r3, #0
 8011ade:	60fb      	str	r3, [r7, #12]
 8011ae0:	e002      	b.n	8011ae8 <inc_lock+0x6c>
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	60fb      	str	r3, [r7, #12]
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	d806      	bhi.n	8011afc <inc_lock+0x80>
 8011aee:	4a29      	ldr	r2, [pc, #164]	; (8011b94 <inc_lock+0x118>)
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	011b      	lsls	r3, r3, #4
 8011af4:	4413      	add	r3, r2
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d1f2      	bne.n	8011ae2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	2b02      	cmp	r3, #2
 8011b00:	d101      	bne.n	8011b06 <inc_lock+0x8a>
 8011b02:	2300      	movs	r3, #0
 8011b04:	e040      	b.n	8011b88 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	4922      	ldr	r1, [pc, #136]	; (8011b94 <inc_lock+0x118>)
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	011b      	lsls	r3, r3, #4
 8011b10:	440b      	add	r3, r1
 8011b12:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	689a      	ldr	r2, [r3, #8]
 8011b18:	491e      	ldr	r1, [pc, #120]	; (8011b94 <inc_lock+0x118>)
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	011b      	lsls	r3, r3, #4
 8011b1e:	440b      	add	r3, r1
 8011b20:	3304      	adds	r3, #4
 8011b22:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	695a      	ldr	r2, [r3, #20]
 8011b28:	491a      	ldr	r1, [pc, #104]	; (8011b94 <inc_lock+0x118>)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	011b      	lsls	r3, r3, #4
 8011b2e:	440b      	add	r3, r1
 8011b30:	3308      	adds	r3, #8
 8011b32:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011b34:	4a17      	ldr	r2, [pc, #92]	; (8011b94 <inc_lock+0x118>)
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	011b      	lsls	r3, r3, #4
 8011b3a:	4413      	add	r3, r2
 8011b3c:	330c      	adds	r3, #12
 8011b3e:	2200      	movs	r2, #0
 8011b40:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d009      	beq.n	8011b5c <inc_lock+0xe0>
 8011b48:	4a12      	ldr	r2, [pc, #72]	; (8011b94 <inc_lock+0x118>)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	011b      	lsls	r3, r3, #4
 8011b4e:	4413      	add	r3, r2
 8011b50:	330c      	adds	r3, #12
 8011b52:	881b      	ldrh	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d001      	beq.n	8011b5c <inc_lock+0xe0>
 8011b58:	2300      	movs	r3, #0
 8011b5a:	e015      	b.n	8011b88 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d108      	bne.n	8011b74 <inc_lock+0xf8>
 8011b62:	4a0c      	ldr	r2, [pc, #48]	; (8011b94 <inc_lock+0x118>)
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	011b      	lsls	r3, r3, #4
 8011b68:	4413      	add	r3, r2
 8011b6a:	330c      	adds	r3, #12
 8011b6c:	881b      	ldrh	r3, [r3, #0]
 8011b6e:	3301      	adds	r3, #1
 8011b70:	b29a      	uxth	r2, r3
 8011b72:	e001      	b.n	8011b78 <inc_lock+0xfc>
 8011b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011b78:	4906      	ldr	r1, [pc, #24]	; (8011b94 <inc_lock+0x118>)
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	011b      	lsls	r3, r3, #4
 8011b7e:	440b      	add	r3, r1
 8011b80:	330c      	adds	r3, #12
 8011b82:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	3301      	adds	r3, #1
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3714      	adds	r7, #20
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b92:	4770      	bx	lr
 8011b94:	200452dc 	.word	0x200452dc

08011b98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b085      	sub	sp, #20
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	3b01      	subs	r3, #1
 8011ba4:	607b      	str	r3, [r7, #4]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	d825      	bhi.n	8011bf8 <dec_lock+0x60>
		n = Files[i].ctr;
 8011bac:	4a17      	ldr	r2, [pc, #92]	; (8011c0c <dec_lock+0x74>)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	011b      	lsls	r3, r3, #4
 8011bb2:	4413      	add	r3, r2
 8011bb4:	330c      	adds	r3, #12
 8011bb6:	881b      	ldrh	r3, [r3, #0]
 8011bb8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011bba:	89fb      	ldrh	r3, [r7, #14]
 8011bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011bc0:	d101      	bne.n	8011bc6 <dec_lock+0x2e>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011bc6:	89fb      	ldrh	r3, [r7, #14]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d002      	beq.n	8011bd2 <dec_lock+0x3a>
 8011bcc:	89fb      	ldrh	r3, [r7, #14]
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011bd2:	4a0e      	ldr	r2, [pc, #56]	; (8011c0c <dec_lock+0x74>)
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	011b      	lsls	r3, r3, #4
 8011bd8:	4413      	add	r3, r2
 8011bda:	330c      	adds	r3, #12
 8011bdc:	89fa      	ldrh	r2, [r7, #14]
 8011bde:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011be0:	89fb      	ldrh	r3, [r7, #14]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d105      	bne.n	8011bf2 <dec_lock+0x5a>
 8011be6:	4a09      	ldr	r2, [pc, #36]	; (8011c0c <dec_lock+0x74>)
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	011b      	lsls	r3, r3, #4
 8011bec:	4413      	add	r3, r2
 8011bee:	2200      	movs	r2, #0
 8011bf0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	737b      	strb	r3, [r7, #13]
 8011bf6:	e001      	b.n	8011bfc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011bf8:	2302      	movs	r3, #2
 8011bfa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011bfc:	7b7b      	ldrb	r3, [r7, #13]
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3714      	adds	r7, #20
 8011c02:	46bd      	mov	sp, r7
 8011c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c08:	4770      	bx	lr
 8011c0a:	bf00      	nop
 8011c0c:	200452dc 	.word	0x200452dc

08011c10 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b085      	sub	sp, #20
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c18:	2300      	movs	r3, #0
 8011c1a:	60fb      	str	r3, [r7, #12]
 8011c1c:	e010      	b.n	8011c40 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011c1e:	4a0d      	ldr	r2, [pc, #52]	; (8011c54 <clear_lock+0x44>)
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	011b      	lsls	r3, r3, #4
 8011c24:	4413      	add	r3, r2
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d105      	bne.n	8011c3a <clear_lock+0x2a>
 8011c2e:	4a09      	ldr	r2, [pc, #36]	; (8011c54 <clear_lock+0x44>)
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	011b      	lsls	r3, r3, #4
 8011c34:	4413      	add	r3, r2
 8011c36:	2200      	movs	r2, #0
 8011c38:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	3301      	adds	r3, #1
 8011c3e:	60fb      	str	r3, [r7, #12]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d9eb      	bls.n	8011c1e <clear_lock+0xe>
	}
}
 8011c46:	bf00      	nop
 8011c48:	3714      	adds	r7, #20
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c50:	4770      	bx	lr
 8011c52:	bf00      	nop
 8011c54:	200452dc 	.word	0x200452dc

08011c58 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b086      	sub	sp, #24
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011c60:	2300      	movs	r3, #0
 8011c62:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	78db      	ldrb	r3, [r3, #3]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d034      	beq.n	8011cd6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c70:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	7858      	ldrb	r0, [r3, #1]
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	697a      	ldr	r2, [r7, #20]
 8011c80:	f7ff fd40 	bl	8011704 <disk_write>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d002      	beq.n	8011c90 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	73fb      	strb	r3, [r7, #15]
 8011c8e:	e022      	b.n	8011cd6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c9a:	697a      	ldr	r2, [r7, #20]
 8011c9c:	1ad2      	subs	r2, r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6a1b      	ldr	r3, [r3, #32]
 8011ca2:	429a      	cmp	r2, r3
 8011ca4:	d217      	bcs.n	8011cd6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	789b      	ldrb	r3, [r3, #2]
 8011caa:	613b      	str	r3, [r7, #16]
 8011cac:	e010      	b.n	8011cd0 <sync_window+0x78>
					wsect += fs->fsize;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a1b      	ldr	r3, [r3, #32]
 8011cb2:	697a      	ldr	r2, [r7, #20]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	7858      	ldrb	r0, [r3, #1]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	697a      	ldr	r2, [r7, #20]
 8011cc6:	f7ff fd1d 	bl	8011704 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011cca:	693b      	ldr	r3, [r7, #16]
 8011ccc:	3b01      	subs	r3, #1
 8011cce:	613b      	str	r3, [r7, #16]
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	2b01      	cmp	r3, #1
 8011cd4:	d8eb      	bhi.n	8011cae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3718      	adds	r7, #24
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011cea:	2300      	movs	r3, #0
 8011cec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011cf2:	683a      	ldr	r2, [r7, #0]
 8011cf4:	429a      	cmp	r2, r3
 8011cf6:	d01b      	beq.n	8011d30 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f7ff ffad 	bl	8011c58 <sync_window>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d113      	bne.n	8011d30 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	7858      	ldrb	r0, [r3, #1]
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d12:	2301      	movs	r3, #1
 8011d14:	683a      	ldr	r2, [r7, #0]
 8011d16:	f7ff fcd5 	bl	80116c4 <disk_read>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d004      	beq.n	8011d2a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011d20:	f04f 33ff 	mov.w	r3, #4294967295
 8011d24:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011d26:	2301      	movs	r3, #1
 8011d28:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3710      	adds	r7, #16
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}
	...

08011d3c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b084      	sub	sp, #16
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f7ff ff87 	bl	8011c58 <sync_window>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011d4e:	7bfb      	ldrb	r3, [r7, #15]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d159      	bne.n	8011e08 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	2b03      	cmp	r3, #3
 8011d5a:	d149      	bne.n	8011df0 <sync_fs+0xb4>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	791b      	ldrb	r3, [r3, #4]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d145      	bne.n	8011df0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	899b      	ldrh	r3, [r3, #12]
 8011d6e:	461a      	mov	r2, r3
 8011d70:	2100      	movs	r1, #0
 8011d72:	f7ff fda8 	bl	80118c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	3338      	adds	r3, #56	; 0x38
 8011d7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011d7e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7ff fd37 	bl	80117f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	3338      	adds	r3, #56	; 0x38
 8011d8c:	4921      	ldr	r1, [pc, #132]	; (8011e14 <sync_fs+0xd8>)
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff fd4c 	bl	801182c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	3338      	adds	r3, #56	; 0x38
 8011d98:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011d9c:	491e      	ldr	r1, [pc, #120]	; (8011e18 <sync_fs+0xdc>)
 8011d9e:	4618      	mov	r0, r3
 8011da0:	f7ff fd44 	bl	801182c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	3338      	adds	r3, #56	; 0x38
 8011da8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	695b      	ldr	r3, [r3, #20]
 8011db0:	4619      	mov	r1, r3
 8011db2:	4610      	mov	r0, r2
 8011db4:	f7ff fd3a 	bl	801182c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	3338      	adds	r3, #56	; 0x38
 8011dbc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	4610      	mov	r0, r2
 8011dc8:	f7ff fd30 	bl	801182c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dd0:	1c5a      	adds	r2, r3, #1
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	7858      	ldrb	r0, [r3, #1]
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011de4:	2301      	movs	r3, #1
 8011de6:	f7ff fc8d 	bl	8011704 <disk_write>
			fs->fsi_flag = 0;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2200      	movs	r2, #0
 8011dee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	785b      	ldrb	r3, [r3, #1]
 8011df4:	2200      	movs	r2, #0
 8011df6:	2100      	movs	r1, #0
 8011df8:	4618      	mov	r0, r3
 8011dfa:	f7ff fca3 	bl	8011744 <disk_ioctl>
 8011dfe:	4603      	mov	r3, r0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d001      	beq.n	8011e08 <sync_fs+0xcc>
 8011e04:	2301      	movs	r3, #1
 8011e06:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
 8011e12:	bf00      	nop
 8011e14:	41615252 	.word	0x41615252
 8011e18:	61417272 	.word	0x61417272

08011e1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011e1c:	b480      	push	{r7}
 8011e1e:	b083      	sub	sp, #12
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	3b02      	subs	r3, #2
 8011e2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	69db      	ldr	r3, [r3, #28]
 8011e30:	3b02      	subs	r3, #2
 8011e32:	683a      	ldr	r2, [r7, #0]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d301      	bcc.n	8011e3c <clust2sect+0x20>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	e008      	b.n	8011e4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	895b      	ldrh	r3, [r3, #10]
 8011e40:	461a      	mov	r2, r3
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	fb03 f202 	mul.w	r2, r3, r2
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e4c:	4413      	add	r3, r2
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b086      	sub	sp, #24
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
 8011e62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	2b01      	cmp	r3, #1
 8011e6e:	d904      	bls.n	8011e7a <get_fat+0x20>
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	69db      	ldr	r3, [r3, #28]
 8011e74:	683a      	ldr	r2, [r7, #0]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d302      	bcc.n	8011e80 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011e7a:	2301      	movs	r3, #1
 8011e7c:	617b      	str	r3, [r7, #20]
 8011e7e:	e0b7      	b.n	8011ff0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011e80:	f04f 33ff 	mov.w	r3, #4294967295
 8011e84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	2b02      	cmp	r3, #2
 8011e8c:	d05a      	beq.n	8011f44 <get_fat+0xea>
 8011e8e:	2b03      	cmp	r3, #3
 8011e90:	d07d      	beq.n	8011f8e <get_fat+0x134>
 8011e92:	2b01      	cmp	r3, #1
 8011e94:	f040 80a2 	bne.w	8011fdc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011e98:	683b      	ldr	r3, [r7, #0]
 8011e9a:	60fb      	str	r3, [r7, #12]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	085b      	lsrs	r3, r3, #1
 8011ea0:	68fa      	ldr	r2, [r7, #12]
 8011ea2:	4413      	add	r3, r2
 8011ea4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	899b      	ldrh	r3, [r3, #12]
 8011eae:	4619      	mov	r1, r3
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eb6:	4413      	add	r3, r2
 8011eb8:	4619      	mov	r1, r3
 8011eba:	6938      	ldr	r0, [r7, #16]
 8011ebc:	f7ff ff10 	bl	8011ce0 <move_window>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	f040 808d 	bne.w	8011fe2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	1c5a      	adds	r2, r3, #1
 8011ecc:	60fa      	str	r2, [r7, #12]
 8011ece:	693a      	ldr	r2, [r7, #16]
 8011ed0:	8992      	ldrh	r2, [r2, #12]
 8011ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ed6:	fb02 f201 	mul.w	r2, r2, r1
 8011eda:	1a9b      	subs	r3, r3, r2
 8011edc:	693a      	ldr	r2, [r7, #16]
 8011ede:	4413      	add	r3, r2
 8011ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011ee4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	899b      	ldrh	r3, [r3, #12]
 8011eee:	4619      	mov	r1, r3
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ef6:	4413      	add	r3, r2
 8011ef8:	4619      	mov	r1, r3
 8011efa:	6938      	ldr	r0, [r7, #16]
 8011efc:	f7ff fef0 	bl	8011ce0 <move_window>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d16f      	bne.n	8011fe6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f06:	693b      	ldr	r3, [r7, #16]
 8011f08:	899b      	ldrh	r3, [r3, #12]
 8011f0a:	461a      	mov	r2, r3
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f12:	fb02 f201 	mul.w	r2, r2, r1
 8011f16:	1a9b      	subs	r3, r3, r2
 8011f18:	693a      	ldr	r2, [r7, #16]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f20:	021b      	lsls	r3, r3, #8
 8011f22:	461a      	mov	r2, r3
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	4313      	orrs	r3, r2
 8011f28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011f2a:	683b      	ldr	r3, [r7, #0]
 8011f2c:	f003 0301 	and.w	r3, r3, #1
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <get_fat+0xe0>
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	091b      	lsrs	r3, r3, #4
 8011f38:	e002      	b.n	8011f40 <get_fat+0xe6>
 8011f3a:	68bb      	ldr	r3, [r7, #8]
 8011f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011f40:	617b      	str	r3, [r7, #20]
			break;
 8011f42:	e055      	b.n	8011ff0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	899b      	ldrh	r3, [r3, #12]
 8011f4c:	085b      	lsrs	r3, r3, #1
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	4619      	mov	r1, r3
 8011f52:	683b      	ldr	r3, [r7, #0]
 8011f54:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f58:	4413      	add	r3, r2
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	6938      	ldr	r0, [r7, #16]
 8011f5e:	f7ff febf 	bl	8011ce0 <move_window>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d140      	bne.n	8011fea <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	693a      	ldr	r2, [r7, #16]
 8011f74:	8992      	ldrh	r2, [r2, #12]
 8011f76:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f7a:	fb02 f200 	mul.w	r2, r2, r0
 8011f7e:	1a9b      	subs	r3, r3, r2
 8011f80:	440b      	add	r3, r1
 8011f82:	4618      	mov	r0, r3
 8011f84:	f7ff fbfc 	bl	8011780 <ld_word>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	617b      	str	r3, [r7, #20]
			break;
 8011f8c:	e030      	b.n	8011ff0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011f8e:	693b      	ldr	r3, [r7, #16]
 8011f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	899b      	ldrh	r3, [r3, #12]
 8011f96:	089b      	lsrs	r3, r3, #2
 8011f98:	b29b      	uxth	r3, r3
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	683b      	ldr	r3, [r7, #0]
 8011f9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	6938      	ldr	r0, [r7, #16]
 8011fa8:	f7ff fe9a 	bl	8011ce0 <move_window>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d11d      	bne.n	8011fee <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011fb2:	693b      	ldr	r3, [r7, #16]
 8011fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	009b      	lsls	r3, r3, #2
 8011fbc:	693a      	ldr	r2, [r7, #16]
 8011fbe:	8992      	ldrh	r2, [r2, #12]
 8011fc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011fc4:	fb02 f200 	mul.w	r2, r2, r0
 8011fc8:	1a9b      	subs	r3, r3, r2
 8011fca:	440b      	add	r3, r1
 8011fcc:	4618      	mov	r0, r3
 8011fce:	f7ff fbef 	bl	80117b0 <ld_dword>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011fd8:	617b      	str	r3, [r7, #20]
			break;
 8011fda:	e009      	b.n	8011ff0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011fdc:	2301      	movs	r3, #1
 8011fde:	617b      	str	r3, [r7, #20]
 8011fe0:	e006      	b.n	8011ff0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fe2:	bf00      	nop
 8011fe4:	e004      	b.n	8011ff0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011fe6:	bf00      	nop
 8011fe8:	e002      	b.n	8011ff0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fea:	bf00      	nop
 8011fec:	e000      	b.n	8011ff0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011fee:	bf00      	nop
		}
	}

	return val;
 8011ff0:	697b      	ldr	r3, [r7, #20]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3718      	adds	r7, #24
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}

08011ffa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011ffa:	b590      	push	{r4, r7, lr}
 8011ffc:	b089      	sub	sp, #36	; 0x24
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	60f8      	str	r0, [r7, #12]
 8012002:	60b9      	str	r1, [r7, #8]
 8012004:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012006:	2302      	movs	r3, #2
 8012008:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b01      	cmp	r3, #1
 801200e:	f240 8106 	bls.w	801221e <put_fat+0x224>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	69db      	ldr	r3, [r3, #28]
 8012016:	68ba      	ldr	r2, [r7, #8]
 8012018:	429a      	cmp	r2, r3
 801201a:	f080 8100 	bcs.w	801221e <put_fat+0x224>
		switch (fs->fs_type) {
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	2b02      	cmp	r3, #2
 8012024:	f000 8088 	beq.w	8012138 <put_fat+0x13e>
 8012028:	2b03      	cmp	r3, #3
 801202a:	f000 80b0 	beq.w	801218e <put_fat+0x194>
 801202e:	2b01      	cmp	r3, #1
 8012030:	f040 80f5 	bne.w	801221e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	61bb      	str	r3, [r7, #24]
 8012038:	69bb      	ldr	r3, [r7, #24]
 801203a:	085b      	lsrs	r3, r3, #1
 801203c:	69ba      	ldr	r2, [r7, #24]
 801203e:	4413      	add	r3, r2
 8012040:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	899b      	ldrh	r3, [r3, #12]
 801204a:	4619      	mov	r1, r3
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012052:	4413      	add	r3, r2
 8012054:	4619      	mov	r1, r3
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f7ff fe42 	bl	8011ce0 <move_window>
 801205c:	4603      	mov	r3, r0
 801205e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012060:	7ffb      	ldrb	r3, [r7, #31]
 8012062:	2b00      	cmp	r3, #0
 8012064:	f040 80d4 	bne.w	8012210 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	1c5a      	adds	r2, r3, #1
 8012072:	61ba      	str	r2, [r7, #24]
 8012074:	68fa      	ldr	r2, [r7, #12]
 8012076:	8992      	ldrh	r2, [r2, #12]
 8012078:	fbb3 f0f2 	udiv	r0, r3, r2
 801207c:	fb02 f200 	mul.w	r2, r2, r0
 8012080:	1a9b      	subs	r3, r3, r2
 8012082:	440b      	add	r3, r1
 8012084:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	f003 0301 	and.w	r3, r3, #1
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00d      	beq.n	80120ac <put_fat+0xb2>
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	b25b      	sxtb	r3, r3
 8012096:	f003 030f 	and.w	r3, r3, #15
 801209a:	b25a      	sxtb	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	b2db      	uxtb	r3, r3
 80120a0:	011b      	lsls	r3, r3, #4
 80120a2:	b25b      	sxtb	r3, r3
 80120a4:	4313      	orrs	r3, r2
 80120a6:	b25b      	sxtb	r3, r3
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	e001      	b.n	80120b0 <put_fat+0xb6>
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	697a      	ldr	r2, [r7, #20]
 80120b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	2201      	movs	r2, #1
 80120b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	899b      	ldrh	r3, [r3, #12]
 80120c2:	4619      	mov	r1, r3
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80120ca:	4413      	add	r3, r2
 80120cc:	4619      	mov	r1, r3
 80120ce:	68f8      	ldr	r0, [r7, #12]
 80120d0:	f7ff fe06 	bl	8011ce0 <move_window>
 80120d4:	4603      	mov	r3, r0
 80120d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120d8:	7ffb      	ldrb	r3, [r7, #31]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f040 809a 	bne.w	8012214 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	899b      	ldrh	r3, [r3, #12]
 80120ea:	461a      	mov	r2, r3
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80120f2:	fb02 f200 	mul.w	r2, r2, r0
 80120f6:	1a9b      	subs	r3, r3, r2
 80120f8:	440b      	add	r3, r1
 80120fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	f003 0301 	and.w	r3, r3, #1
 8012102:	2b00      	cmp	r3, #0
 8012104:	d003      	beq.n	801210e <put_fat+0x114>
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	091b      	lsrs	r3, r3, #4
 801210a:	b2db      	uxtb	r3, r3
 801210c:	e00e      	b.n	801212c <put_fat+0x132>
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	b25b      	sxtb	r3, r3
 8012114:	f023 030f 	bic.w	r3, r3, #15
 8012118:	b25a      	sxtb	r2, r3
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	0a1b      	lsrs	r3, r3, #8
 801211e:	b25b      	sxtb	r3, r3
 8012120:	f003 030f 	and.w	r3, r3, #15
 8012124:	b25b      	sxtb	r3, r3
 8012126:	4313      	orrs	r3, r2
 8012128:	b25b      	sxtb	r3, r3
 801212a:	b2db      	uxtb	r3, r3
 801212c:	697a      	ldr	r2, [r7, #20]
 801212e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2201      	movs	r2, #1
 8012134:	70da      	strb	r2, [r3, #3]
			break;
 8012136:	e072      	b.n	801221e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	899b      	ldrh	r3, [r3, #12]
 8012140:	085b      	lsrs	r3, r3, #1
 8012142:	b29b      	uxth	r3, r3
 8012144:	4619      	mov	r1, r3
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	fbb3 f3f1 	udiv	r3, r3, r1
 801214c:	4413      	add	r3, r2
 801214e:	4619      	mov	r1, r3
 8012150:	68f8      	ldr	r0, [r7, #12]
 8012152:	f7ff fdc5 	bl	8011ce0 <move_window>
 8012156:	4603      	mov	r3, r0
 8012158:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801215a:	7ffb      	ldrb	r3, [r7, #31]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d15b      	bne.n	8012218 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012166:	68bb      	ldr	r3, [r7, #8]
 8012168:	005b      	lsls	r3, r3, #1
 801216a:	68fa      	ldr	r2, [r7, #12]
 801216c:	8992      	ldrh	r2, [r2, #12]
 801216e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012172:	fb02 f200 	mul.w	r2, r2, r0
 8012176:	1a9b      	subs	r3, r3, r2
 8012178:	440b      	add	r3, r1
 801217a:	687a      	ldr	r2, [r7, #4]
 801217c:	b292      	uxth	r2, r2
 801217e:	4611      	mov	r1, r2
 8012180:	4618      	mov	r0, r3
 8012182:	f7ff fb38 	bl	80117f6 <st_word>
			fs->wflag = 1;
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	2201      	movs	r2, #1
 801218a:	70da      	strb	r2, [r3, #3]
			break;
 801218c:	e047      	b.n	801221e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	899b      	ldrh	r3, [r3, #12]
 8012196:	089b      	lsrs	r3, r3, #2
 8012198:	b29b      	uxth	r3, r3
 801219a:	4619      	mov	r1, r3
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	fbb3 f3f1 	udiv	r3, r3, r1
 80121a2:	4413      	add	r3, r2
 80121a4:	4619      	mov	r1, r3
 80121a6:	68f8      	ldr	r0, [r7, #12]
 80121a8:	f7ff fd9a 	bl	8011ce0 <move_window>
 80121ac:	4603      	mov	r3, r0
 80121ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121b0:	7ffb      	ldrb	r3, [r7, #31]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d132      	bne.n	801221c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	8992      	ldrh	r2, [r2, #12]
 80121ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80121ce:	fb02 f200 	mul.w	r2, r2, r0
 80121d2:	1a9b      	subs	r3, r3, r2
 80121d4:	440b      	add	r3, r1
 80121d6:	4618      	mov	r0, r3
 80121d8:	f7ff faea 	bl	80117b0 <ld_dword>
 80121dc:	4603      	mov	r3, r0
 80121de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80121e2:	4323      	orrs	r3, r4
 80121e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	009b      	lsls	r3, r3, #2
 80121f0:	68fa      	ldr	r2, [r7, #12]
 80121f2:	8992      	ldrh	r2, [r2, #12]
 80121f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80121f8:	fb02 f200 	mul.w	r2, r2, r0
 80121fc:	1a9b      	subs	r3, r3, r2
 80121fe:	440b      	add	r3, r1
 8012200:	6879      	ldr	r1, [r7, #4]
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff fb12 	bl	801182c <st_dword>
			fs->wflag = 1;
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	2201      	movs	r2, #1
 801220c:	70da      	strb	r2, [r3, #3]
			break;
 801220e:	e006      	b.n	801221e <put_fat+0x224>
			if (res != FR_OK) break;
 8012210:	bf00      	nop
 8012212:	e004      	b.n	801221e <put_fat+0x224>
			if (res != FR_OK) break;
 8012214:	bf00      	nop
 8012216:	e002      	b.n	801221e <put_fat+0x224>
			if (res != FR_OK) break;
 8012218:	bf00      	nop
 801221a:	e000      	b.n	801221e <put_fat+0x224>
			if (res != FR_OK) break;
 801221c:	bf00      	nop
		}
	}
	return res;
 801221e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012220:	4618      	mov	r0, r3
 8012222:	3724      	adds	r7, #36	; 0x24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd90      	pop	{r4, r7, pc}

08012228 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b088      	sub	sp, #32
 801222c:	af00      	add	r7, sp, #0
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012234:	2300      	movs	r3, #0
 8012236:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d904      	bls.n	801224e <remove_chain+0x26>
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	69db      	ldr	r3, [r3, #28]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	429a      	cmp	r2, r3
 801224c:	d301      	bcc.n	8012252 <remove_chain+0x2a>
 801224e:	2302      	movs	r3, #2
 8012250:	e04b      	b.n	80122ea <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d00c      	beq.n	8012272 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012258:	f04f 32ff 	mov.w	r2, #4294967295
 801225c:	6879      	ldr	r1, [r7, #4]
 801225e:	69b8      	ldr	r0, [r7, #24]
 8012260:	f7ff fecb 	bl	8011ffa <put_fat>
 8012264:	4603      	mov	r3, r0
 8012266:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012268:	7ffb      	ldrb	r3, [r7, #31]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d001      	beq.n	8012272 <remove_chain+0x4a>
 801226e:	7ffb      	ldrb	r3, [r7, #31]
 8012270:	e03b      	b.n	80122ea <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012272:	68b9      	ldr	r1, [r7, #8]
 8012274:	68f8      	ldr	r0, [r7, #12]
 8012276:	f7ff fdf0 	bl	8011e5a <get_fat>
 801227a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d031      	beq.n	80122e6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012282:	697b      	ldr	r3, [r7, #20]
 8012284:	2b01      	cmp	r3, #1
 8012286:	d101      	bne.n	801228c <remove_chain+0x64>
 8012288:	2302      	movs	r3, #2
 801228a:	e02e      	b.n	80122ea <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801228c:	697b      	ldr	r3, [r7, #20]
 801228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012292:	d101      	bne.n	8012298 <remove_chain+0x70>
 8012294:	2301      	movs	r3, #1
 8012296:	e028      	b.n	80122ea <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012298:	2200      	movs	r2, #0
 801229a:	68b9      	ldr	r1, [r7, #8]
 801229c:	69b8      	ldr	r0, [r7, #24]
 801229e:	f7ff feac 	bl	8011ffa <put_fat>
 80122a2:	4603      	mov	r3, r0
 80122a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80122a6:	7ffb      	ldrb	r3, [r7, #31]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d001      	beq.n	80122b0 <remove_chain+0x88>
 80122ac:	7ffb      	ldrb	r3, [r7, #31]
 80122ae:	e01c      	b.n	80122ea <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80122b0:	69bb      	ldr	r3, [r7, #24]
 80122b2:	695a      	ldr	r2, [r3, #20]
 80122b4:	69bb      	ldr	r3, [r7, #24]
 80122b6:	69db      	ldr	r3, [r3, #28]
 80122b8:	3b02      	subs	r3, #2
 80122ba:	429a      	cmp	r2, r3
 80122bc:	d20b      	bcs.n	80122d6 <remove_chain+0xae>
			fs->free_clst++;
 80122be:	69bb      	ldr	r3, [r7, #24]
 80122c0:	695b      	ldr	r3, [r3, #20]
 80122c2:	1c5a      	adds	r2, r3, #1
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80122c8:	69bb      	ldr	r3, [r7, #24]
 80122ca:	791b      	ldrb	r3, [r3, #4]
 80122cc:	f043 0301 	orr.w	r3, r3, #1
 80122d0:	b2da      	uxtb	r2, r3
 80122d2:	69bb      	ldr	r3, [r7, #24]
 80122d4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80122d6:	697b      	ldr	r3, [r7, #20]
 80122d8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	69db      	ldr	r3, [r3, #28]
 80122de:	68ba      	ldr	r2, [r7, #8]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d3c6      	bcc.n	8012272 <remove_chain+0x4a>
 80122e4:	e000      	b.n	80122e8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80122e6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3720      	adds	r7, #32
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b088      	sub	sp, #32
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012302:	683b      	ldr	r3, [r7, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d10d      	bne.n	8012324 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d004      	beq.n	801231e <create_chain+0x2c>
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	69db      	ldr	r3, [r3, #28]
 8012318:	69ba      	ldr	r2, [r7, #24]
 801231a:	429a      	cmp	r2, r3
 801231c:	d31b      	bcc.n	8012356 <create_chain+0x64>
 801231e:	2301      	movs	r3, #1
 8012320:	61bb      	str	r3, [r7, #24]
 8012322:	e018      	b.n	8012356 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7ff fd97 	bl	8011e5a <get_fat>
 801232c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b01      	cmp	r3, #1
 8012332:	d801      	bhi.n	8012338 <create_chain+0x46>
 8012334:	2301      	movs	r3, #1
 8012336:	e070      	b.n	801241a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801233e:	d101      	bne.n	8012344 <create_chain+0x52>
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	e06a      	b.n	801241a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	69db      	ldr	r3, [r3, #28]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	429a      	cmp	r2, r3
 801234c:	d201      	bcs.n	8012352 <create_chain+0x60>
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	e063      	b.n	801241a <create_chain+0x128>
		scl = clst;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801235a:	69fb      	ldr	r3, [r7, #28]
 801235c:	3301      	adds	r3, #1
 801235e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	69db      	ldr	r3, [r3, #28]
 8012364:	69fa      	ldr	r2, [r7, #28]
 8012366:	429a      	cmp	r2, r3
 8012368:	d307      	bcc.n	801237a <create_chain+0x88>
				ncl = 2;
 801236a:	2302      	movs	r3, #2
 801236c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801236e:	69fa      	ldr	r2, [r7, #28]
 8012370:	69bb      	ldr	r3, [r7, #24]
 8012372:	429a      	cmp	r2, r3
 8012374:	d901      	bls.n	801237a <create_chain+0x88>
 8012376:	2300      	movs	r3, #0
 8012378:	e04f      	b.n	801241a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801237a:	69f9      	ldr	r1, [r7, #28]
 801237c:	6878      	ldr	r0, [r7, #4]
 801237e:	f7ff fd6c 	bl	8011e5a <get_fat>
 8012382:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00e      	beq.n	80123a8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b01      	cmp	r3, #1
 801238e:	d003      	beq.n	8012398 <create_chain+0xa6>
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012396:	d101      	bne.n	801239c <create_chain+0xaa>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	e03e      	b.n	801241a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801239c:	69fa      	ldr	r2, [r7, #28]
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d1da      	bne.n	801235a <create_chain+0x68>
 80123a4:	2300      	movs	r3, #0
 80123a6:	e038      	b.n	801241a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80123a8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80123aa:	f04f 32ff 	mov.w	r2, #4294967295
 80123ae:	69f9      	ldr	r1, [r7, #28]
 80123b0:	6938      	ldr	r0, [r7, #16]
 80123b2:	f7ff fe22 	bl	8011ffa <put_fat>
 80123b6:	4603      	mov	r3, r0
 80123b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80123ba:	7dfb      	ldrb	r3, [r7, #23]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d109      	bne.n	80123d4 <create_chain+0xe2>
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80123c6:	69fa      	ldr	r2, [r7, #28]
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6938      	ldr	r0, [r7, #16]
 80123cc:	f7ff fe15 	bl	8011ffa <put_fat>
 80123d0:	4603      	mov	r3, r0
 80123d2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80123d4:	7dfb      	ldrb	r3, [r7, #23]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d116      	bne.n	8012408 <create_chain+0x116>
		fs->last_clst = ncl;
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	69fa      	ldr	r2, [r7, #28]
 80123de:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80123e0:	693b      	ldr	r3, [r7, #16]
 80123e2:	695a      	ldr	r2, [r3, #20]
 80123e4:	693b      	ldr	r3, [r7, #16]
 80123e6:	69db      	ldr	r3, [r3, #28]
 80123e8:	3b02      	subs	r3, #2
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d804      	bhi.n	80123f8 <create_chain+0x106>
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	695b      	ldr	r3, [r3, #20]
 80123f2:	1e5a      	subs	r2, r3, #1
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	791b      	ldrb	r3, [r3, #4]
 80123fc:	f043 0301 	orr.w	r3, r3, #1
 8012400:	b2da      	uxtb	r2, r3
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	711a      	strb	r2, [r3, #4]
 8012406:	e007      	b.n	8012418 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012408:	7dfb      	ldrb	r3, [r7, #23]
 801240a:	2b01      	cmp	r3, #1
 801240c:	d102      	bne.n	8012414 <create_chain+0x122>
 801240e:	f04f 33ff 	mov.w	r3, #4294967295
 8012412:	e000      	b.n	8012416 <create_chain+0x124>
 8012414:	2301      	movs	r3, #1
 8012416:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012418:	69fb      	ldr	r3, [r7, #28]
}
 801241a:	4618      	mov	r0, r3
 801241c:	3720      	adds	r7, #32
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}

08012422 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012422:	b480      	push	{r7}
 8012424:	b087      	sub	sp, #28
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012436:	3304      	adds	r3, #4
 8012438:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	461a      	mov	r2, r3
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	fbb3 f3f2 	udiv	r3, r3, r2
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	8952      	ldrh	r2, [r2, #10]
 801244a:	fbb3 f3f2 	udiv	r3, r3, r2
 801244e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	1d1a      	adds	r2, r3, #4
 8012454:	613a      	str	r2, [r7, #16]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d101      	bne.n	8012464 <clmt_clust+0x42>
 8012460:	2300      	movs	r3, #0
 8012462:	e010      	b.n	8012486 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012464:	697a      	ldr	r2, [r7, #20]
 8012466:	68bb      	ldr	r3, [r7, #8]
 8012468:	429a      	cmp	r2, r3
 801246a:	d307      	bcc.n	801247c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801246c:	697a      	ldr	r2, [r7, #20]
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	617b      	str	r3, [r7, #20]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	3304      	adds	r3, #4
 8012478:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801247a:	e7e9      	b.n	8012450 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801247c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	681a      	ldr	r2, [r3, #0]
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	4413      	add	r3, r2
}
 8012486:	4618      	mov	r0, r3
 8012488:	371c      	adds	r7, #28
 801248a:	46bd      	mov	sp, r7
 801248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012490:	4770      	bx	lr

08012492 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b086      	sub	sp, #24
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124a8:	d204      	bcs.n	80124b4 <dir_sdi+0x22>
 80124aa:	683b      	ldr	r3, [r7, #0]
 80124ac:	f003 031f 	and.w	r3, r3, #31
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d001      	beq.n	80124b8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80124b4:	2302      	movs	r3, #2
 80124b6:	e071      	b.n	801259c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d106      	bne.n	80124d8 <dir_sdi+0x46>
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b02      	cmp	r3, #2
 80124d0:	d902      	bls.n	80124d8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124d6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80124d8:	697b      	ldr	r3, [r7, #20]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d10c      	bne.n	80124f8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80124de:	683b      	ldr	r3, [r7, #0]
 80124e0:	095b      	lsrs	r3, r3, #5
 80124e2:	693a      	ldr	r2, [r7, #16]
 80124e4:	8912      	ldrh	r2, [r2, #8]
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d301      	bcc.n	80124ee <dir_sdi+0x5c>
 80124ea:	2302      	movs	r3, #2
 80124ec:	e056      	b.n	801259c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	61da      	str	r2, [r3, #28]
 80124f6:	e02d      	b.n	8012554 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80124f8:	693b      	ldr	r3, [r7, #16]
 80124fa:	895b      	ldrh	r3, [r3, #10]
 80124fc:	461a      	mov	r2, r3
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	899b      	ldrh	r3, [r3, #12]
 8012502:	fb03 f302 	mul.w	r3, r3, r2
 8012506:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012508:	e019      	b.n	801253e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6979      	ldr	r1, [r7, #20]
 801250e:	4618      	mov	r0, r3
 8012510:	f7ff fca3 	bl	8011e5a <get_fat>
 8012514:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	f1b3 3fff 	cmp.w	r3, #4294967295
 801251c:	d101      	bne.n	8012522 <dir_sdi+0x90>
 801251e:	2301      	movs	r3, #1
 8012520:	e03c      	b.n	801259c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	2b01      	cmp	r3, #1
 8012526:	d904      	bls.n	8012532 <dir_sdi+0xa0>
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	69db      	ldr	r3, [r3, #28]
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	429a      	cmp	r2, r3
 8012530:	d301      	bcc.n	8012536 <dir_sdi+0xa4>
 8012532:	2302      	movs	r3, #2
 8012534:	e032      	b.n	801259c <dir_sdi+0x10a>
			ofs -= csz;
 8012536:	683a      	ldr	r2, [r7, #0]
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	1ad3      	subs	r3, r2, r3
 801253c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	429a      	cmp	r2, r3
 8012544:	d2e1      	bcs.n	801250a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012546:	6979      	ldr	r1, [r7, #20]
 8012548:	6938      	ldr	r0, [r7, #16]
 801254a:	f7ff fc67 	bl	8011e1c <clust2sect>
 801254e:	4602      	mov	r2, r0
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	697a      	ldr	r2, [r7, #20]
 8012558:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	69db      	ldr	r3, [r3, #28]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d101      	bne.n	8012566 <dir_sdi+0xd4>
 8012562:	2302      	movs	r3, #2
 8012564:	e01a      	b.n	801259c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	69da      	ldr	r2, [r3, #28]
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	899b      	ldrh	r3, [r3, #12]
 801256e:	4619      	mov	r1, r3
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	fbb3 f3f1 	udiv	r3, r3, r1
 8012576:	441a      	add	r2, r3
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	899b      	ldrh	r3, [r3, #12]
 8012586:	461a      	mov	r2, r3
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	fbb3 f0f2 	udiv	r0, r3, r2
 801258e:	fb02 f200 	mul.w	r2, r2, r0
 8012592:	1a9b      	subs	r3, r3, r2
 8012594:	18ca      	adds	r2, r1, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801259a:	2300      	movs	r3, #0
}
 801259c:	4618      	mov	r0, r3
 801259e:	3718      	adds	r7, #24
 80125a0:	46bd      	mov	sp, r7
 80125a2:	bd80      	pop	{r7, pc}

080125a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b086      	sub	sp, #24
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	6078      	str	r0, [r7, #4]
 80125ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	695b      	ldr	r3, [r3, #20]
 80125b8:	3320      	adds	r3, #32
 80125ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	69db      	ldr	r3, [r3, #28]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d003      	beq.n	80125cc <dir_next+0x28>
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80125ca:	d301      	bcc.n	80125d0 <dir_next+0x2c>
 80125cc:	2304      	movs	r3, #4
 80125ce:	e0bb      	b.n	8012748 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	899b      	ldrh	r3, [r3, #12]
 80125d4:	461a      	mov	r2, r3
 80125d6:	68bb      	ldr	r3, [r7, #8]
 80125d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80125dc:	fb02 f201 	mul.w	r2, r2, r1
 80125e0:	1a9b      	subs	r3, r3, r2
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	f040 809d 	bne.w	8012722 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	69db      	ldr	r3, [r3, #28]
 80125ec:	1c5a      	adds	r2, r3, #1
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	699b      	ldr	r3, [r3, #24]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d10b      	bne.n	8012612 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	095b      	lsrs	r3, r3, #5
 80125fe:	68fa      	ldr	r2, [r7, #12]
 8012600:	8912      	ldrh	r2, [r2, #8]
 8012602:	4293      	cmp	r3, r2
 8012604:	f0c0 808d 	bcc.w	8012722 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2200      	movs	r2, #0
 801260c:	61da      	str	r2, [r3, #28]
 801260e:	2304      	movs	r3, #4
 8012610:	e09a      	b.n	8012748 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	899b      	ldrh	r3, [r3, #12]
 8012616:	461a      	mov	r2, r3
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	fbb3 f3f2 	udiv	r3, r3, r2
 801261e:	68fa      	ldr	r2, [r7, #12]
 8012620:	8952      	ldrh	r2, [r2, #10]
 8012622:	3a01      	subs	r2, #1
 8012624:	4013      	ands	r3, r2
 8012626:	2b00      	cmp	r3, #0
 8012628:	d17b      	bne.n	8012722 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801262a:	687a      	ldr	r2, [r7, #4]
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	699b      	ldr	r3, [r3, #24]
 8012630:	4619      	mov	r1, r3
 8012632:	4610      	mov	r0, r2
 8012634:	f7ff fc11 	bl	8011e5a <get_fat>
 8012638:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801263a:	697b      	ldr	r3, [r7, #20]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d801      	bhi.n	8012644 <dir_next+0xa0>
 8012640:	2302      	movs	r3, #2
 8012642:	e081      	b.n	8012748 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012644:	697b      	ldr	r3, [r7, #20]
 8012646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264a:	d101      	bne.n	8012650 <dir_next+0xac>
 801264c:	2301      	movs	r3, #1
 801264e:	e07b      	b.n	8012748 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	69db      	ldr	r3, [r3, #28]
 8012654:	697a      	ldr	r2, [r7, #20]
 8012656:	429a      	cmp	r2, r3
 8012658:	d359      	bcc.n	801270e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d104      	bne.n	801266a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2200      	movs	r2, #0
 8012664:	61da      	str	r2, [r3, #28]
 8012666:	2304      	movs	r3, #4
 8012668:	e06e      	b.n	8012748 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	699b      	ldr	r3, [r3, #24]
 8012670:	4619      	mov	r1, r3
 8012672:	4610      	mov	r0, r2
 8012674:	f7ff fe3d 	bl	80122f2 <create_chain>
 8012678:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	2b00      	cmp	r3, #0
 801267e:	d101      	bne.n	8012684 <dir_next+0xe0>
 8012680:	2307      	movs	r3, #7
 8012682:	e061      	b.n	8012748 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2b01      	cmp	r3, #1
 8012688:	d101      	bne.n	801268e <dir_next+0xea>
 801268a:	2302      	movs	r3, #2
 801268c:	e05c      	b.n	8012748 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012694:	d101      	bne.n	801269a <dir_next+0xf6>
 8012696:	2301      	movs	r3, #1
 8012698:	e056      	b.n	8012748 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801269a:	68f8      	ldr	r0, [r7, #12]
 801269c:	f7ff fadc 	bl	8011c58 <sync_window>
 80126a0:	4603      	mov	r3, r0
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d001      	beq.n	80126aa <dir_next+0x106>
 80126a6:	2301      	movs	r3, #1
 80126a8:	e04e      	b.n	8012748 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	899b      	ldrh	r3, [r3, #12]
 80126b4:	461a      	mov	r2, r3
 80126b6:	2100      	movs	r1, #0
 80126b8:	f7ff f905 	bl	80118c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126bc:	2300      	movs	r3, #0
 80126be:	613b      	str	r3, [r7, #16]
 80126c0:	6979      	ldr	r1, [r7, #20]
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f7ff fbaa 	bl	8011e1c <clust2sect>
 80126c8:	4602      	mov	r2, r0
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	635a      	str	r2, [r3, #52]	; 0x34
 80126ce:	e012      	b.n	80126f6 <dir_next+0x152>
						fs->wflag = 1;
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	2201      	movs	r2, #1
 80126d4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80126d6:	68f8      	ldr	r0, [r7, #12]
 80126d8:	f7ff fabe 	bl	8011c58 <sync_window>
 80126dc:	4603      	mov	r3, r0
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d001      	beq.n	80126e6 <dir_next+0x142>
 80126e2:	2301      	movs	r3, #1
 80126e4:	e030      	b.n	8012748 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	3301      	adds	r3, #1
 80126ea:	613b      	str	r3, [r7, #16]
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	635a      	str	r2, [r3, #52]	; 0x34
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	895b      	ldrh	r3, [r3, #10]
 80126fa:	461a      	mov	r2, r3
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	4293      	cmp	r3, r2
 8012700:	d3e6      	bcc.n	80126d0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	1ad2      	subs	r2, r2, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	697a      	ldr	r2, [r7, #20]
 8012712:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012714:	6979      	ldr	r1, [r7, #20]
 8012716:	68f8      	ldr	r0, [r7, #12]
 8012718:	f7ff fb80 	bl	8011e1c <clust2sect>
 801271c:	4602      	mov	r2, r0
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	68ba      	ldr	r2, [r7, #8]
 8012726:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	899b      	ldrh	r3, [r3, #12]
 8012732:	461a      	mov	r2, r3
 8012734:	68bb      	ldr	r3, [r7, #8]
 8012736:	fbb3 f0f2 	udiv	r0, r3, r2
 801273a:	fb02 f200 	mul.w	r2, r2, r0
 801273e:	1a9b      	subs	r3, r3, r2
 8012740:	18ca      	adds	r2, r1, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012746:	2300      	movs	r3, #0
}
 8012748:	4618      	mov	r0, r3
 801274a:	3718      	adds	r7, #24
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}

08012750 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012750:	b580      	push	{r7, lr}
 8012752:	b086      	sub	sp, #24
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]
 8012758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012760:	2100      	movs	r1, #0
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f7ff fe95 	bl	8012492 <dir_sdi>
 8012768:	4603      	mov	r3, r0
 801276a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801276c:	7dfb      	ldrb	r3, [r7, #23]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d12b      	bne.n	80127ca <dir_alloc+0x7a>
		n = 0;
 8012772:	2300      	movs	r3, #0
 8012774:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	69db      	ldr	r3, [r3, #28]
 801277a:	4619      	mov	r1, r3
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ff faaf 	bl	8011ce0 <move_window>
 8012782:	4603      	mov	r3, r0
 8012784:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012786:	7dfb      	ldrb	r3, [r7, #23]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d11d      	bne.n	80127c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	6a1b      	ldr	r3, [r3, #32]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2be5      	cmp	r3, #229	; 0xe5
 8012794:	d004      	beq.n	80127a0 <dir_alloc+0x50>
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d107      	bne.n	80127b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80127a0:	693b      	ldr	r3, [r7, #16]
 80127a2:	3301      	adds	r3, #1
 80127a4:	613b      	str	r3, [r7, #16]
 80127a6:	693a      	ldr	r2, [r7, #16]
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d102      	bne.n	80127b4 <dir_alloc+0x64>
 80127ae:	e00c      	b.n	80127ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80127b0:	2300      	movs	r3, #0
 80127b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80127b4:	2101      	movs	r1, #1
 80127b6:	6878      	ldr	r0, [r7, #4]
 80127b8:	f7ff fef4 	bl	80125a4 <dir_next>
 80127bc:	4603      	mov	r3, r0
 80127be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80127c0:	7dfb      	ldrb	r3, [r7, #23]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d0d7      	beq.n	8012776 <dir_alloc+0x26>
 80127c6:	e000      	b.n	80127ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80127c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80127ca:	7dfb      	ldrb	r3, [r7, #23]
 80127cc:	2b04      	cmp	r3, #4
 80127ce:	d101      	bne.n	80127d4 <dir_alloc+0x84>
 80127d0:	2307      	movs	r3, #7
 80127d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3718      	adds	r7, #24
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}

080127de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80127de:	b580      	push	{r7, lr}
 80127e0:	b084      	sub	sp, #16
 80127e2:	af00      	add	r7, sp, #0
 80127e4:	6078      	str	r0, [r7, #4]
 80127e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	331a      	adds	r3, #26
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7fe ffc7 	bl	8011780 <ld_word>
 80127f2:	4603      	mov	r3, r0
 80127f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	781b      	ldrb	r3, [r3, #0]
 80127fa:	2b03      	cmp	r3, #3
 80127fc:	d109      	bne.n	8012812 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	3314      	adds	r3, #20
 8012802:	4618      	mov	r0, r3
 8012804:	f7fe ffbc 	bl	8011780 <ld_word>
 8012808:	4603      	mov	r3, r0
 801280a:	041b      	lsls	r3, r3, #16
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	4313      	orrs	r3, r2
 8012810:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012812:	68fb      	ldr	r3, [r7, #12]
}
 8012814:	4618      	mov	r0, r3
 8012816:	3710      	adds	r7, #16
 8012818:	46bd      	mov	sp, r7
 801281a:	bd80      	pop	{r7, pc}

0801281c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	60f8      	str	r0, [r7, #12]
 8012824:	60b9      	str	r1, [r7, #8]
 8012826:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	331a      	adds	r3, #26
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	b292      	uxth	r2, r2
 8012830:	4611      	mov	r1, r2
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe ffdf 	bl	80117f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	2b03      	cmp	r3, #3
 801283e:	d109      	bne.n	8012854 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	f103 0214 	add.w	r2, r3, #20
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	0c1b      	lsrs	r3, r3, #16
 801284a:	b29b      	uxth	r3, r3
 801284c:	4619      	mov	r1, r3
 801284e:	4610      	mov	r0, r2
 8012850:	f7fe ffd1 	bl	80117f6 <st_word>
	}
}
 8012854:	bf00      	nop
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}

0801285c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801285c:	b580      	push	{r7, lr}
 801285e:	b086      	sub	sp, #24
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012866:	2304      	movs	r3, #4
 8012868:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012870:	e03c      	b.n	80128ec <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	69db      	ldr	r3, [r3, #28]
 8012876:	4619      	mov	r1, r3
 8012878:	6938      	ldr	r0, [r7, #16]
 801287a:	f7ff fa31 	bl	8011ce0 <move_window>
 801287e:	4603      	mov	r3, r0
 8012880:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012882:	7dfb      	ldrb	r3, [r7, #23]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d136      	bne.n	80128f6 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6a1b      	ldr	r3, [r3, #32]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012890:	7bfb      	ldrb	r3, [r7, #15]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d102      	bne.n	801289c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8012896:	2304      	movs	r3, #4
 8012898:	75fb      	strb	r3, [r7, #23]
 801289a:	e031      	b.n	8012900 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6a1b      	ldr	r3, [r3, #32]
 80128a0:	330b      	adds	r3, #11
 80128a2:	781b      	ldrb	r3, [r3, #0]
 80128a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128a8:	73bb      	strb	r3, [r7, #14]
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	7bba      	ldrb	r2, [r7, #14]
 80128ae:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80128b0:	7bfb      	ldrb	r3, [r7, #15]
 80128b2:	2be5      	cmp	r3, #229	; 0xe5
 80128b4:	d011      	beq.n	80128da <dir_read+0x7e>
 80128b6:	7bfb      	ldrb	r3, [r7, #15]
 80128b8:	2b2e      	cmp	r3, #46	; 0x2e
 80128ba:	d00e      	beq.n	80128da <dir_read+0x7e>
 80128bc:	7bbb      	ldrb	r3, [r7, #14]
 80128be:	2b0f      	cmp	r3, #15
 80128c0:	d00b      	beq.n	80128da <dir_read+0x7e>
 80128c2:	7bbb      	ldrb	r3, [r7, #14]
 80128c4:	f023 0320 	bic.w	r3, r3, #32
 80128c8:	2b08      	cmp	r3, #8
 80128ca:	bf0c      	ite	eq
 80128cc:	2301      	moveq	r3, #1
 80128ce:	2300      	movne	r3, #0
 80128d0:	b2db      	uxtb	r3, r3
 80128d2:	461a      	mov	r2, r3
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d00f      	beq.n	80128fa <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80128da:	2100      	movs	r1, #0
 80128dc:	6878      	ldr	r0, [r7, #4]
 80128de:	f7ff fe61 	bl	80125a4 <dir_next>
 80128e2:	4603      	mov	r3, r0
 80128e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80128e6:	7dfb      	ldrb	r3, [r7, #23]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d108      	bne.n	80128fe <dir_read+0xa2>
	while (dp->sect) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	69db      	ldr	r3, [r3, #28]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1be      	bne.n	8012872 <dir_read+0x16>
 80128f4:	e004      	b.n	8012900 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128f6:	bf00      	nop
 80128f8:	e002      	b.n	8012900 <dir_read+0xa4>
				break;
 80128fa:	bf00      	nop
 80128fc:	e000      	b.n	8012900 <dir_read+0xa4>
		if (res != FR_OK) break;
 80128fe:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012900:	7dfb      	ldrb	r3, [r7, #23]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d002      	beq.n	801290c <dir_read+0xb0>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	61da      	str	r2, [r3, #28]
	return res;
 801290c:	7dfb      	ldrb	r3, [r7, #23]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3718      	adds	r7, #24
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012916:	b580      	push	{r7, lr}
 8012918:	b086      	sub	sp, #24
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012924:	2100      	movs	r1, #0
 8012926:	6878      	ldr	r0, [r7, #4]
 8012928:	f7ff fdb3 	bl	8012492 <dir_sdi>
 801292c:	4603      	mov	r3, r0
 801292e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012930:	7dfb      	ldrb	r3, [r7, #23]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d001      	beq.n	801293a <dir_find+0x24>
 8012936:	7dfb      	ldrb	r3, [r7, #23]
 8012938:	e03e      	b.n	80129b8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	69db      	ldr	r3, [r3, #28]
 801293e:	4619      	mov	r1, r3
 8012940:	6938      	ldr	r0, [r7, #16]
 8012942:	f7ff f9cd 	bl	8011ce0 <move_window>
 8012946:	4603      	mov	r3, r0
 8012948:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801294a:	7dfb      	ldrb	r3, [r7, #23]
 801294c:	2b00      	cmp	r3, #0
 801294e:	d12f      	bne.n	80129b0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6a1b      	ldr	r3, [r3, #32]
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012958:	7bfb      	ldrb	r3, [r7, #15]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d102      	bne.n	8012964 <dir_find+0x4e>
 801295e:	2304      	movs	r3, #4
 8012960:	75fb      	strb	r3, [r7, #23]
 8012962:	e028      	b.n	80129b6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6a1b      	ldr	r3, [r3, #32]
 8012968:	330b      	adds	r3, #11
 801296a:	781b      	ldrb	r3, [r3, #0]
 801296c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012970:	b2da      	uxtb	r2, r3
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	6a1b      	ldr	r3, [r3, #32]
 801297a:	330b      	adds	r3, #11
 801297c:	781b      	ldrb	r3, [r3, #0]
 801297e:	f003 0308 	and.w	r3, r3, #8
 8012982:	2b00      	cmp	r3, #0
 8012984:	d10a      	bne.n	801299c <dir_find+0x86>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6a18      	ldr	r0, [r3, #32]
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	3324      	adds	r3, #36	; 0x24
 801298e:	220b      	movs	r2, #11
 8012990:	4619      	mov	r1, r3
 8012992:	f7fe ffb2 	bl	80118fa <mem_cmp>
 8012996:	4603      	mov	r3, r0
 8012998:	2b00      	cmp	r3, #0
 801299a:	d00b      	beq.n	80129b4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801299c:	2100      	movs	r1, #0
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff fe00 	bl	80125a4 <dir_next>
 80129a4:	4603      	mov	r3, r0
 80129a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80129a8:	7dfb      	ldrb	r3, [r7, #23]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d0c5      	beq.n	801293a <dir_find+0x24>
 80129ae:	e002      	b.n	80129b6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80129b0:	bf00      	nop
 80129b2:	e000      	b.n	80129b6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80129b4:	bf00      	nop

	return res;
 80129b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	3718      	adds	r7, #24
 80129bc:	46bd      	mov	sp, r7
 80129be:	bd80      	pop	{r7, pc}

080129c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b084      	sub	sp, #16
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80129ce:	2101      	movs	r1, #1
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7ff febd 	bl	8012750 <dir_alloc>
 80129d6:	4603      	mov	r3, r0
 80129d8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80129da:	7bfb      	ldrb	r3, [r7, #15]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d11c      	bne.n	8012a1a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	69db      	ldr	r3, [r3, #28]
 80129e4:	4619      	mov	r1, r3
 80129e6:	68b8      	ldr	r0, [r7, #8]
 80129e8:	f7ff f97a 	bl	8011ce0 <move_window>
 80129ec:	4603      	mov	r3, r0
 80129ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129f0:	7bfb      	ldrb	r3, [r7, #15]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d111      	bne.n	8012a1a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6a1b      	ldr	r3, [r3, #32]
 80129fa:	2220      	movs	r2, #32
 80129fc:	2100      	movs	r1, #0
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fe ff61 	bl	80118c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6a18      	ldr	r0, [r3, #32]
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	3324      	adds	r3, #36	; 0x24
 8012a0c:	220b      	movs	r2, #11
 8012a0e:	4619      	mov	r1, r3
 8012a10:	f7fe ff38 	bl	8011884 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	2201      	movs	r2, #1
 8012a18:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3710      	adds	r7, #16
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	69db      	ldr	r3, [r3, #28]
 8012a36:	4619      	mov	r1, r3
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f7ff f951 	bl	8011ce0 <move_window>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012a42:	7afb      	ldrb	r3, [r7, #11]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d106      	bne.n	8012a56 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6a1b      	ldr	r3, [r3, #32]
 8012a4c:	22e5      	movs	r2, #229	; 0xe5
 8012a4e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2201      	movs	r2, #1
 8012a54:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012a56:	7afb      	ldrb	r3, [r7, #11]
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3710      	adds	r7, #16
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	bd80      	pop	{r7, pc}

08012a60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b088      	sub	sp, #32
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
 8012a68:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	60fb      	str	r3, [r7, #12]
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	3324      	adds	r3, #36	; 0x24
 8012a74:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012a76:	220b      	movs	r2, #11
 8012a78:	2120      	movs	r1, #32
 8012a7a:	68b8      	ldr	r0, [r7, #8]
 8012a7c:	f7fe ff23 	bl	80118c6 <mem_set>
	si = i = 0; ni = 8;
 8012a80:	2300      	movs	r3, #0
 8012a82:	613b      	str	r3, [r7, #16]
 8012a84:	693b      	ldr	r3, [r7, #16]
 8012a86:	617b      	str	r3, [r7, #20]
 8012a88:	2308      	movs	r3, #8
 8012a8a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012a8c:	68fa      	ldr	r2, [r7, #12]
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	4413      	add	r3, r2
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	2b2e      	cmp	r3, #46	; 0x2e
 8012a96:	d12f      	bne.n	8012af8 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	1c5a      	adds	r2, r3, #1
 8012a9c:	617a      	str	r2, [r7, #20]
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	4413      	add	r3, r2
 8012aa2:	781b      	ldrb	r3, [r3, #0]
 8012aa4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8012aa6:	7ffb      	ldrb	r3, [r7, #31]
 8012aa8:	2b2e      	cmp	r3, #46	; 0x2e
 8012aaa:	d10a      	bne.n	8012ac2 <create_name+0x62>
 8012aac:	697b      	ldr	r3, [r7, #20]
 8012aae:	2b02      	cmp	r3, #2
 8012ab0:	d807      	bhi.n	8012ac2 <create_name+0x62>
			sfn[i++] = c;
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	1c5a      	adds	r2, r3, #1
 8012ab6:	613a      	str	r2, [r7, #16]
 8012ab8:	68ba      	ldr	r2, [r7, #8]
 8012aba:	4413      	add	r3, r2
 8012abc:	7ffa      	ldrb	r2, [r7, #31]
 8012abe:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012ac0:	e7ea      	b.n	8012a98 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012ac2:	7ffb      	ldrb	r3, [r7, #31]
 8012ac4:	2b2f      	cmp	r3, #47	; 0x2f
 8012ac6:	d007      	beq.n	8012ad8 <create_name+0x78>
 8012ac8:	7ffb      	ldrb	r3, [r7, #31]
 8012aca:	2b5c      	cmp	r3, #92	; 0x5c
 8012acc:	d004      	beq.n	8012ad8 <create_name+0x78>
 8012ace:	7ffb      	ldrb	r3, [r7, #31]
 8012ad0:	2b20      	cmp	r3, #32
 8012ad2:	d901      	bls.n	8012ad8 <create_name+0x78>
 8012ad4:	2306      	movs	r3, #6
 8012ad6:	e084      	b.n	8012be2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012ad8:	68fa      	ldr	r2, [r7, #12]
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	441a      	add	r2, r3
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012ae2:	7ffb      	ldrb	r3, [r7, #31]
 8012ae4:	2b20      	cmp	r3, #32
 8012ae6:	d801      	bhi.n	8012aec <create_name+0x8c>
 8012ae8:	2224      	movs	r2, #36	; 0x24
 8012aea:	e000      	b.n	8012aee <create_name+0x8e>
 8012aec:	2220      	movs	r2, #32
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	330b      	adds	r3, #11
 8012af2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012af4:	2300      	movs	r3, #0
 8012af6:	e074      	b.n	8012be2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	1c5a      	adds	r2, r3, #1
 8012afc:	617a      	str	r2, [r7, #20]
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	4413      	add	r3, r2
 8012b02:	781b      	ldrb	r3, [r3, #0]
 8012b04:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012b06:	7ffb      	ldrb	r3, [r7, #31]
 8012b08:	2b20      	cmp	r3, #32
 8012b0a:	d94e      	bls.n	8012baa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012b0c:	7ffb      	ldrb	r3, [r7, #31]
 8012b0e:	2b2f      	cmp	r3, #47	; 0x2f
 8012b10:	d006      	beq.n	8012b20 <create_name+0xc0>
 8012b12:	7ffb      	ldrb	r3, [r7, #31]
 8012b14:	2b5c      	cmp	r3, #92	; 0x5c
 8012b16:	d110      	bne.n	8012b3a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012b18:	e002      	b.n	8012b20 <create_name+0xc0>
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	3301      	adds	r3, #1
 8012b1e:	617b      	str	r3, [r7, #20]
 8012b20:	68fa      	ldr	r2, [r7, #12]
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	4413      	add	r3, r2
 8012b26:	781b      	ldrb	r3, [r3, #0]
 8012b28:	2b2f      	cmp	r3, #47	; 0x2f
 8012b2a:	d0f6      	beq.n	8012b1a <create_name+0xba>
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	4413      	add	r3, r2
 8012b32:	781b      	ldrb	r3, [r3, #0]
 8012b34:	2b5c      	cmp	r3, #92	; 0x5c
 8012b36:	d0f0      	beq.n	8012b1a <create_name+0xba>
			break;
 8012b38:	e038      	b.n	8012bac <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012b3a:	7ffb      	ldrb	r3, [r7, #31]
 8012b3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012b3e:	d003      	beq.n	8012b48 <create_name+0xe8>
 8012b40:	693a      	ldr	r2, [r7, #16]
 8012b42:	69bb      	ldr	r3, [r7, #24]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d30c      	bcc.n	8012b62 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	2b0b      	cmp	r3, #11
 8012b4c:	d002      	beq.n	8012b54 <create_name+0xf4>
 8012b4e:	7ffb      	ldrb	r3, [r7, #31]
 8012b50:	2b2e      	cmp	r3, #46	; 0x2e
 8012b52:	d001      	beq.n	8012b58 <create_name+0xf8>
 8012b54:	2306      	movs	r3, #6
 8012b56:	e044      	b.n	8012be2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012b58:	2308      	movs	r3, #8
 8012b5a:	613b      	str	r3, [r7, #16]
 8012b5c:	230b      	movs	r3, #11
 8012b5e:	61bb      	str	r3, [r7, #24]
			continue;
 8012b60:	e022      	b.n	8012ba8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012b62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	da04      	bge.n	8012b74 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012b6a:	7ffb      	ldrb	r3, [r7, #31]
 8012b6c:	3b80      	subs	r3, #128	; 0x80
 8012b6e:	4a1f      	ldr	r2, [pc, #124]	; (8012bec <create_name+0x18c>)
 8012b70:	5cd3      	ldrb	r3, [r2, r3]
 8012b72:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012b74:	7ffb      	ldrb	r3, [r7, #31]
 8012b76:	4619      	mov	r1, r3
 8012b78:	481d      	ldr	r0, [pc, #116]	; (8012bf0 <create_name+0x190>)
 8012b7a:	f7fe fee5 	bl	8011948 <chk_chr>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d001      	beq.n	8012b88 <create_name+0x128>
 8012b84:	2306      	movs	r3, #6
 8012b86:	e02c      	b.n	8012be2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012b88:	7ffb      	ldrb	r3, [r7, #31]
 8012b8a:	2b60      	cmp	r3, #96	; 0x60
 8012b8c:	d905      	bls.n	8012b9a <create_name+0x13a>
 8012b8e:	7ffb      	ldrb	r3, [r7, #31]
 8012b90:	2b7a      	cmp	r3, #122	; 0x7a
 8012b92:	d802      	bhi.n	8012b9a <create_name+0x13a>
 8012b94:	7ffb      	ldrb	r3, [r7, #31]
 8012b96:	3b20      	subs	r3, #32
 8012b98:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012b9a:	693b      	ldr	r3, [r7, #16]
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	613a      	str	r2, [r7, #16]
 8012ba0:	68ba      	ldr	r2, [r7, #8]
 8012ba2:	4413      	add	r3, r2
 8012ba4:	7ffa      	ldrb	r2, [r7, #31]
 8012ba6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012ba8:	e7a6      	b.n	8012af8 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012baa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	441a      	add	r2, r3
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d101      	bne.n	8012bc0 <create_name+0x160>
 8012bbc:	2306      	movs	r3, #6
 8012bbe:	e010      	b.n	8012be2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012bc0:	68bb      	ldr	r3, [r7, #8]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	2be5      	cmp	r3, #229	; 0xe5
 8012bc6:	d102      	bne.n	8012bce <create_name+0x16e>
 8012bc8:	68bb      	ldr	r3, [r7, #8]
 8012bca:	2205      	movs	r2, #5
 8012bcc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012bce:	7ffb      	ldrb	r3, [r7, #31]
 8012bd0:	2b20      	cmp	r3, #32
 8012bd2:	d801      	bhi.n	8012bd8 <create_name+0x178>
 8012bd4:	2204      	movs	r2, #4
 8012bd6:	e000      	b.n	8012bda <create_name+0x17a>
 8012bd8:	2200      	movs	r2, #0
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	330b      	adds	r3, #11
 8012bde:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012be0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3720      	adds	r7, #32
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	080191a4 	.word	0x080191a4
 8012bf0:	08019154 	.word	0x08019154

08012bf4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b086      	sub	sp, #24
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8012c0e:	d00b      	beq.n	8012c28 <follow_path+0x34>
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b5c      	cmp	r3, #92	; 0x5c
 8012c16:	d007      	beq.n	8012c28 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	699a      	ldr	r2, [r3, #24]
 8012c1c:	693b      	ldr	r3, [r7, #16]
 8012c1e:	609a      	str	r2, [r3, #8]
 8012c20:	e00d      	b.n	8012c3e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	3301      	adds	r3, #1
 8012c26:	603b      	str	r3, [r7, #0]
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	2b2f      	cmp	r3, #47	; 0x2f
 8012c2e:	d0f8      	beq.n	8012c22 <follow_path+0x2e>
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	2b5c      	cmp	r3, #92	; 0x5c
 8012c36:	d0f4      	beq.n	8012c22 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012c38:	693b      	ldr	r3, [r7, #16]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b1f      	cmp	r3, #31
 8012c44:	d80a      	bhi.n	8012c5c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	2280      	movs	r2, #128	; 0x80
 8012c4a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012c4e:	2100      	movs	r1, #0
 8012c50:	6878      	ldr	r0, [r7, #4]
 8012c52:	f7ff fc1e 	bl	8012492 <dir_sdi>
 8012c56:	4603      	mov	r3, r0
 8012c58:	75fb      	strb	r3, [r7, #23]
 8012c5a:	e05b      	b.n	8012d14 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c5c:	463b      	mov	r3, r7
 8012c5e:	4619      	mov	r1, r3
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f7ff fefd 	bl	8012a60 <create_name>
 8012c66:	4603      	mov	r3, r0
 8012c68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012c6a:	7dfb      	ldrb	r3, [r7, #23]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d14c      	bne.n	8012d0a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c70:	6878      	ldr	r0, [r7, #4]
 8012c72:	f7ff fe50 	bl	8012916 <dir_find>
 8012c76:	4603      	mov	r3, r0
 8012c78:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012c80:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012c82:	7dfb      	ldrb	r3, [r7, #23]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d01b      	beq.n	8012cc0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c88:	7dfb      	ldrb	r3, [r7, #23]
 8012c8a:	2b04      	cmp	r3, #4
 8012c8c:	d13f      	bne.n	8012d0e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012c8e:	7afb      	ldrb	r3, [r7, #11]
 8012c90:	f003 0320 	and.w	r3, r3, #32
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d00b      	beq.n	8012cb0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c98:	7afb      	ldrb	r3, [r7, #11]
 8012c9a:	f003 0304 	and.w	r3, r3, #4
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d031      	beq.n	8012d06 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	2280      	movs	r2, #128	; 0x80
 8012ca6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012caa:	2300      	movs	r3, #0
 8012cac:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012cae:	e02e      	b.n	8012d0e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012cb0:	7afb      	ldrb	r3, [r7, #11]
 8012cb2:	f003 0304 	and.w	r3, r3, #4
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d129      	bne.n	8012d0e <follow_path+0x11a>
 8012cba:	2305      	movs	r3, #5
 8012cbc:	75fb      	strb	r3, [r7, #23]
				break;
 8012cbe:	e026      	b.n	8012d0e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012cc0:	7afb      	ldrb	r3, [r7, #11]
 8012cc2:	f003 0304 	and.w	r3, r3, #4
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d123      	bne.n	8012d12 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	799b      	ldrb	r3, [r3, #6]
 8012cce:	f003 0310 	and.w	r3, r3, #16
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d102      	bne.n	8012cdc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012cd6:	2305      	movs	r3, #5
 8012cd8:	75fb      	strb	r3, [r7, #23]
 8012cda:	e01b      	b.n	8012d14 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	695b      	ldr	r3, [r3, #20]
 8012ce6:	68fa      	ldr	r2, [r7, #12]
 8012ce8:	8992      	ldrh	r2, [r2, #12]
 8012cea:	fbb3 f0f2 	udiv	r0, r3, r2
 8012cee:	fb02 f200 	mul.w	r2, r2, r0
 8012cf2:	1a9b      	subs	r3, r3, r2
 8012cf4:	440b      	add	r3, r1
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f7ff fd70 	bl	80127de <ld_clust>
 8012cfe:	4602      	mov	r2, r0
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	609a      	str	r2, [r3, #8]
 8012d04:	e7aa      	b.n	8012c5c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012d06:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012d08:	e7a8      	b.n	8012c5c <follow_path+0x68>
			if (res != FR_OK) break;
 8012d0a:	bf00      	nop
 8012d0c:	e002      	b.n	8012d14 <follow_path+0x120>
				break;
 8012d0e:	bf00      	nop
 8012d10:	e000      	b.n	8012d14 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012d12:	bf00      	nop
			}
		}
	}

	return res;
 8012d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d16:	4618      	mov	r0, r3
 8012d18:	3718      	adds	r7, #24
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}

08012d1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012d1e:	b480      	push	{r7}
 8012d20:	b087      	sub	sp, #28
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012d26:	f04f 33ff 	mov.w	r3, #4294967295
 8012d2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d031      	beq.n	8012d98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	617b      	str	r3, [r7, #20]
 8012d3a:	e002      	b.n	8012d42 <get_ldnumber+0x24>
 8012d3c:	697b      	ldr	r3, [r7, #20]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	617b      	str	r3, [r7, #20]
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	2b20      	cmp	r3, #32
 8012d48:	d903      	bls.n	8012d52 <get_ldnumber+0x34>
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	2b3a      	cmp	r3, #58	; 0x3a
 8012d50:	d1f4      	bne.n	8012d3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	781b      	ldrb	r3, [r3, #0]
 8012d56:	2b3a      	cmp	r3, #58	; 0x3a
 8012d58:	d11c      	bne.n	8012d94 <get_ldnumber+0x76>
			tp = *path;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	1c5a      	adds	r2, r3, #1
 8012d64:	60fa      	str	r2, [r7, #12]
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	3b30      	subs	r3, #48	; 0x30
 8012d6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	2b09      	cmp	r3, #9
 8012d70:	d80e      	bhi.n	8012d90 <get_ldnumber+0x72>
 8012d72:	68fa      	ldr	r2, [r7, #12]
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	429a      	cmp	r2, r3
 8012d78:	d10a      	bne.n	8012d90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d107      	bne.n	8012d90 <get_ldnumber+0x72>
					vol = (int)i;
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	3301      	adds	r3, #1
 8012d88:	617b      	str	r3, [r7, #20]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	697a      	ldr	r2, [r7, #20]
 8012d8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	e002      	b.n	8012d9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012d94:	2300      	movs	r3, #0
 8012d96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012d98:	693b      	ldr	r3, [r7, #16]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	371c      	adds	r7, #28
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr
	...

08012da8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b082      	sub	sp, #8
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]
 8012db0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	2200      	movs	r2, #0
 8012db6:	70da      	strb	r2, [r3, #3]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f04f 32ff 	mov.w	r2, #4294967295
 8012dbe:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f7fe ff8c 	bl	8011ce0 <move_window>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <check_fs+0x2a>
 8012dce:	2304      	movs	r3, #4
 8012dd0:	e038      	b.n	8012e44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3338      	adds	r3, #56	; 0x38
 8012dd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7fe fcd0 	bl	8011780 <ld_word>
 8012de0:	4603      	mov	r3, r0
 8012de2:	461a      	mov	r2, r3
 8012de4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012de8:	429a      	cmp	r2, r3
 8012dea:	d001      	beq.n	8012df0 <check_fs+0x48>
 8012dec:	2303      	movs	r3, #3
 8012dee:	e029      	b.n	8012e44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012df6:	2be9      	cmp	r3, #233	; 0xe9
 8012df8:	d009      	beq.n	8012e0e <check_fs+0x66>
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e00:	2beb      	cmp	r3, #235	; 0xeb
 8012e02:	d11e      	bne.n	8012e42 <check_fs+0x9a>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e0a:	2b90      	cmp	r3, #144	; 0x90
 8012e0c:	d119      	bne.n	8012e42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	3338      	adds	r3, #56	; 0x38
 8012e12:	3336      	adds	r3, #54	; 0x36
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fe fccb 	bl	80117b0 <ld_dword>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012e20:	4a0a      	ldr	r2, [pc, #40]	; (8012e4c <check_fs+0xa4>)
 8012e22:	4293      	cmp	r3, r2
 8012e24:	d101      	bne.n	8012e2a <check_fs+0x82>
 8012e26:	2300      	movs	r3, #0
 8012e28:	e00c      	b.n	8012e44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	3338      	adds	r3, #56	; 0x38
 8012e2e:	3352      	adds	r3, #82	; 0x52
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe fcbd 	bl	80117b0 <ld_dword>
 8012e36:	4602      	mov	r2, r0
 8012e38:	4b05      	ldr	r3, [pc, #20]	; (8012e50 <check_fs+0xa8>)
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d101      	bne.n	8012e42 <check_fs+0x9a>
 8012e3e:	2300      	movs	r3, #0
 8012e40:	e000      	b.n	8012e44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012e42:	2302      	movs	r3, #2
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}
 8012e4c:	00544146 	.word	0x00544146
 8012e50:	33544146 	.word	0x33544146

08012e54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b096      	sub	sp, #88	; 0x58
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	60f8      	str	r0, [r7, #12]
 8012e5c:	60b9      	str	r1, [r7, #8]
 8012e5e:	4613      	mov	r3, r2
 8012e60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012e62:	68bb      	ldr	r3, [r7, #8]
 8012e64:	2200      	movs	r2, #0
 8012e66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012e68:	68f8      	ldr	r0, [r7, #12]
 8012e6a:	f7ff ff58 	bl	8012d1e <get_ldnumber>
 8012e6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	da01      	bge.n	8012e7a <find_volume+0x26>
 8012e76:	230b      	movs	r3, #11
 8012e78:	e268      	b.n	801334c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012e7a:	4ab0      	ldr	r2, [pc, #704]	; (801313c <find_volume+0x2e8>)
 8012e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d101      	bne.n	8012e8e <find_volume+0x3a>
 8012e8a:	230c      	movs	r3, #12
 8012e8c:	e25e      	b.n	801334c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	f023 0301 	bic.w	r3, r3, #1
 8012e9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9e:	781b      	ldrb	r3, [r3, #0]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d01a      	beq.n	8012eda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ea6:	785b      	ldrb	r3, [r3, #1]
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	f7fe fbcb 	bl	8011644 <disk_status>
 8012eae:	4603      	mov	r3, r0
 8012eb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eb8:	f003 0301 	and.w	r3, r3, #1
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d10c      	bne.n	8012eda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012ec0:	79fb      	ldrb	r3, [r7, #7]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d007      	beq.n	8012ed6 <find_volume+0x82>
 8012ec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012eca:	f003 0304 	and.w	r3, r3, #4
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d001      	beq.n	8012ed6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012ed2:	230a      	movs	r3, #10
 8012ed4:	e23a      	b.n	801334c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	e238      	b.n	801334c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012edc:	2200      	movs	r2, #0
 8012ede:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee2:	b2da      	uxtb	r2, r3
 8012ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ee6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eea:	785b      	ldrb	r3, [r3, #1]
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7fe fbc3 	bl	8011678 <disk_initialize>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012ef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012efc:	f003 0301 	and.w	r3, r3, #1
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d001      	beq.n	8012f08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012f04:	2303      	movs	r3, #3
 8012f06:	e221      	b.n	801334c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012f08:	79fb      	ldrb	r3, [r7, #7]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d007      	beq.n	8012f1e <find_volume+0xca>
 8012f0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f12:	f003 0304 	and.w	r3, r3, #4
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012f1a:	230a      	movs	r3, #10
 8012f1c:	e216      	b.n	801334c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f20:	7858      	ldrb	r0, [r3, #1]
 8012f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f24:	330c      	adds	r3, #12
 8012f26:	461a      	mov	r2, r3
 8012f28:	2102      	movs	r1, #2
 8012f2a:	f7fe fc0b 	bl	8011744 <disk_ioctl>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d001      	beq.n	8012f38 <find_volume+0xe4>
 8012f34:	2301      	movs	r3, #1
 8012f36:	e209      	b.n	801334c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3a:	899b      	ldrh	r3, [r3, #12]
 8012f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012f40:	d80d      	bhi.n	8012f5e <find_volume+0x10a>
 8012f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f44:	899b      	ldrh	r3, [r3, #12]
 8012f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012f4a:	d308      	bcc.n	8012f5e <find_volume+0x10a>
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4e:	899b      	ldrh	r3, [r3, #12]
 8012f50:	461a      	mov	r2, r3
 8012f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f54:	899b      	ldrh	r3, [r3, #12]
 8012f56:	3b01      	subs	r3, #1
 8012f58:	4013      	ands	r3, r2
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d001      	beq.n	8012f62 <find_volume+0x10e>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	e1f4      	b.n	801334c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012f66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f6a:	f7ff ff1d 	bl	8012da8 <check_fs>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012f74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d14b      	bne.n	8013014 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8012f80:	e01f      	b.n	8012fc2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f84:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012f88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f8a:	011b      	lsls	r3, r3, #4
 8012f8c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012f90:	4413      	add	r3, r2
 8012f92:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f96:	3304      	adds	r3, #4
 8012f98:	781b      	ldrb	r3, [r3, #0]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d006      	beq.n	8012fac <find_volume+0x158>
 8012f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fa0:	3308      	adds	r3, #8
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fe fc04 	bl	80117b0 <ld_dword>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	e000      	b.n	8012fae <find_volume+0x15a>
 8012fac:	2200      	movs	r2, #0
 8012fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fb0:	009b      	lsls	r3, r3, #2
 8012fb2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012fb6:	440b      	add	r3, r1
 8012fb8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fbe:	3301      	adds	r3, #1
 8012fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8012fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fc4:	2b03      	cmp	r3, #3
 8012fc6:	d9dc      	bls.n	8012f82 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012fc8:	2300      	movs	r3, #0
 8012fca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012fcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d002      	beq.n	8012fd8 <find_volume+0x184>
 8012fd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fd4:	3b01      	subs	r3, #1
 8012fd6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012fda:	009b      	lsls	r3, r3, #2
 8012fdc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012fe6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012fe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d005      	beq.n	8012ffa <find_volume+0x1a6>
 8012fee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012ff2:	f7ff fed9 	bl	8012da8 <check_fs>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	e000      	b.n	8012ffc <find_volume+0x1a8>
 8012ffa:	2303      	movs	r3, #3
 8012ffc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013004:	2b01      	cmp	r3, #1
 8013006:	d905      	bls.n	8013014 <find_volume+0x1c0>
 8013008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801300a:	3301      	adds	r3, #1
 801300c:	643b      	str	r3, [r7, #64]	; 0x40
 801300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013010:	2b03      	cmp	r3, #3
 8013012:	d9e1      	bls.n	8012fd8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013018:	2b04      	cmp	r3, #4
 801301a:	d101      	bne.n	8013020 <find_volume+0x1cc>
 801301c:	2301      	movs	r3, #1
 801301e:	e195      	b.n	801334c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013020:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013024:	2b01      	cmp	r3, #1
 8013026:	d901      	bls.n	801302c <find_volume+0x1d8>
 8013028:	230d      	movs	r3, #13
 801302a:	e18f      	b.n	801334c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801302c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801302e:	3338      	adds	r3, #56	; 0x38
 8013030:	330b      	adds	r3, #11
 8013032:	4618      	mov	r0, r3
 8013034:	f7fe fba4 	bl	8011780 <ld_word>
 8013038:	4603      	mov	r3, r0
 801303a:	461a      	mov	r2, r3
 801303c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801303e:	899b      	ldrh	r3, [r3, #12]
 8013040:	429a      	cmp	r2, r3
 8013042:	d001      	beq.n	8013048 <find_volume+0x1f4>
 8013044:	230d      	movs	r3, #13
 8013046:	e181      	b.n	801334c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304a:	3338      	adds	r3, #56	; 0x38
 801304c:	3316      	adds	r3, #22
 801304e:	4618      	mov	r0, r3
 8013050:	f7fe fb96 	bl	8011780 <ld_word>
 8013054:	4603      	mov	r3, r0
 8013056:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801305a:	2b00      	cmp	r3, #0
 801305c:	d106      	bne.n	801306c <find_volume+0x218>
 801305e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013060:	3338      	adds	r3, #56	; 0x38
 8013062:	3324      	adds	r3, #36	; 0x24
 8013064:	4618      	mov	r0, r3
 8013066:	f7fe fba3 	bl	80117b0 <ld_dword>
 801306a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801306c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013070:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013074:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	789b      	ldrb	r3, [r3, #2]
 8013080:	2b01      	cmp	r3, #1
 8013082:	d005      	beq.n	8013090 <find_volume+0x23c>
 8013084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013086:	789b      	ldrb	r3, [r3, #2]
 8013088:	2b02      	cmp	r3, #2
 801308a:	d001      	beq.n	8013090 <find_volume+0x23c>
 801308c:	230d      	movs	r3, #13
 801308e:	e15d      	b.n	801334c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013092:	789b      	ldrb	r3, [r3, #2]
 8013094:	461a      	mov	r2, r3
 8013096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013098:	fb02 f303 	mul.w	r3, r2, r3
 801309c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130a4:	b29a      	uxth	r2, r3
 80130a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80130aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ac:	895b      	ldrh	r3, [r3, #10]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d008      	beq.n	80130c4 <find_volume+0x270>
 80130b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b4:	895b      	ldrh	r3, [r3, #10]
 80130b6:	461a      	mov	r2, r3
 80130b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ba:	895b      	ldrh	r3, [r3, #10]
 80130bc:	3b01      	subs	r3, #1
 80130be:	4013      	ands	r3, r2
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d001      	beq.n	80130c8 <find_volume+0x274>
 80130c4:	230d      	movs	r3, #13
 80130c6:	e141      	b.n	801334c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80130c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ca:	3338      	adds	r3, #56	; 0x38
 80130cc:	3311      	adds	r3, #17
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fe fb56 	bl	8011780 <ld_word>
 80130d4:	4603      	mov	r3, r0
 80130d6:	461a      	mov	r2, r3
 80130d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80130dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130de:	891b      	ldrh	r3, [r3, #8]
 80130e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80130e2:	8992      	ldrh	r2, [r2, #12]
 80130e4:	0952      	lsrs	r2, r2, #5
 80130e6:	b292      	uxth	r2, r2
 80130e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80130ec:	fb02 f201 	mul.w	r2, r2, r1
 80130f0:	1a9b      	subs	r3, r3, r2
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d001      	beq.n	80130fc <find_volume+0x2a8>
 80130f8:	230d      	movs	r3, #13
 80130fa:	e127      	b.n	801334c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80130fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fe:	3338      	adds	r3, #56	; 0x38
 8013100:	3313      	adds	r3, #19
 8013102:	4618      	mov	r0, r3
 8013104:	f7fe fb3c 	bl	8011780 <ld_word>
 8013108:	4603      	mov	r3, r0
 801310a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801310c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801310e:	2b00      	cmp	r3, #0
 8013110:	d106      	bne.n	8013120 <find_volume+0x2cc>
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	3338      	adds	r3, #56	; 0x38
 8013116:	3320      	adds	r3, #32
 8013118:	4618      	mov	r0, r3
 801311a:	f7fe fb49 	bl	80117b0 <ld_dword>
 801311e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013122:	3338      	adds	r3, #56	; 0x38
 8013124:	330e      	adds	r3, #14
 8013126:	4618      	mov	r0, r3
 8013128:	f7fe fb2a 	bl	8011780 <ld_word>
 801312c:	4603      	mov	r3, r0
 801312e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013130:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013132:	2b00      	cmp	r3, #0
 8013134:	d104      	bne.n	8013140 <find_volume+0x2ec>
 8013136:	230d      	movs	r3, #13
 8013138:	e108      	b.n	801334c <find_volume+0x4f8>
 801313a:	bf00      	nop
 801313c:	200452d4 	.word	0x200452d4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013140:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013144:	4413      	add	r3, r2
 8013146:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013148:	8911      	ldrh	r1, [r2, #8]
 801314a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801314c:	8992      	ldrh	r2, [r2, #12]
 801314e:	0952      	lsrs	r2, r2, #5
 8013150:	b292      	uxth	r2, r2
 8013152:	fbb1 f2f2 	udiv	r2, r1, r2
 8013156:	b292      	uxth	r2, r2
 8013158:	4413      	add	r3, r2
 801315a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801315c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801315e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013160:	429a      	cmp	r2, r3
 8013162:	d201      	bcs.n	8013168 <find_volume+0x314>
 8013164:	230d      	movs	r3, #13
 8013166:	e0f1      	b.n	801334c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316c:	1ad3      	subs	r3, r2, r3
 801316e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013170:	8952      	ldrh	r2, [r2, #10]
 8013172:	fbb3 f3f2 	udiv	r3, r3, r2
 8013176:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317a:	2b00      	cmp	r3, #0
 801317c:	d101      	bne.n	8013182 <find_volume+0x32e>
 801317e:	230d      	movs	r3, #13
 8013180:	e0e4      	b.n	801334c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013182:	2303      	movs	r3, #3
 8013184:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801318a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801318e:	4293      	cmp	r3, r2
 8013190:	d802      	bhi.n	8013198 <find_volume+0x344>
 8013192:	2302      	movs	r3, #2
 8013194:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801319a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801319e:	4293      	cmp	r3, r2
 80131a0:	d802      	bhi.n	80131a8 <find_volume+0x354>
 80131a2:	2301      	movs	r3, #1
 80131a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	1c9a      	adds	r2, r3, #2
 80131ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ae:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80131b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131b4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80131b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80131b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131ba:	441a      	add	r2, r3
 80131bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131be:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80131c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80131c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c4:	441a      	add	r2, r3
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80131ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80131ce:	2b03      	cmp	r3, #3
 80131d0:	d11e      	bne.n	8013210 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80131d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131d4:	3338      	adds	r3, #56	; 0x38
 80131d6:	332a      	adds	r3, #42	; 0x2a
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fe fad1 	bl	8011780 <ld_word>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	d001      	beq.n	80131e8 <find_volume+0x394>
 80131e4:	230d      	movs	r3, #13
 80131e6:	e0b1      	b.n	801334c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80131e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ea:	891b      	ldrh	r3, [r3, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <find_volume+0x3a0>
 80131f0:	230d      	movs	r3, #13
 80131f2:	e0ab      	b.n	801334c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80131f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f6:	3338      	adds	r3, #56	; 0x38
 80131f8:	332c      	adds	r3, #44	; 0x2c
 80131fa:	4618      	mov	r0, r3
 80131fc:	f7fe fad8 	bl	80117b0 <ld_dword>
 8013200:	4602      	mov	r2, r0
 8013202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013204:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013208:	69db      	ldr	r3, [r3, #28]
 801320a:	009b      	lsls	r3, r3, #2
 801320c:	647b      	str	r3, [r7, #68]	; 0x44
 801320e:	e01f      	b.n	8013250 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013212:	891b      	ldrh	r3, [r3, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d101      	bne.n	801321c <find_volume+0x3c8>
 8013218:	230d      	movs	r3, #13
 801321a:	e097      	b.n	801334c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013222:	441a      	add	r2, r3
 8013224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013226:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013228:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801322c:	2b02      	cmp	r3, #2
 801322e:	d103      	bne.n	8013238 <find_volume+0x3e4>
 8013230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013232:	69db      	ldr	r3, [r3, #28]
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	e00a      	b.n	801324e <find_volume+0x3fa>
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	69da      	ldr	r2, [r3, #28]
 801323c:	4613      	mov	r3, r2
 801323e:	005b      	lsls	r3, r3, #1
 8013240:	4413      	add	r3, r2
 8013242:	085a      	lsrs	r2, r3, #1
 8013244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013246:	69db      	ldr	r3, [r3, #28]
 8013248:	f003 0301 	and.w	r3, r3, #1
 801324c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801324e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013252:	6a1a      	ldr	r2, [r3, #32]
 8013254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013256:	899b      	ldrh	r3, [r3, #12]
 8013258:	4619      	mov	r1, r3
 801325a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801325c:	440b      	add	r3, r1
 801325e:	3b01      	subs	r3, #1
 8013260:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013262:	8989      	ldrh	r1, [r1, #12]
 8013264:	fbb3 f3f1 	udiv	r3, r3, r1
 8013268:	429a      	cmp	r2, r3
 801326a:	d201      	bcs.n	8013270 <find_volume+0x41c>
 801326c:	230d      	movs	r3, #13
 801326e:	e06d      	b.n	801334c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013272:	f04f 32ff 	mov.w	r2, #4294967295
 8013276:	615a      	str	r2, [r3, #20]
 8013278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327a:	695a      	ldr	r2, [r3, #20]
 801327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013282:	2280      	movs	r2, #128	; 0x80
 8013284:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013286:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801328a:	2b03      	cmp	r3, #3
 801328c:	d149      	bne.n	8013322 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801328e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013290:	3338      	adds	r3, #56	; 0x38
 8013292:	3330      	adds	r3, #48	; 0x30
 8013294:	4618      	mov	r0, r3
 8013296:	f7fe fa73 	bl	8011780 <ld_word>
 801329a:	4603      	mov	r3, r0
 801329c:	2b01      	cmp	r3, #1
 801329e:	d140      	bne.n	8013322 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80132a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132a2:	3301      	adds	r3, #1
 80132a4:	4619      	mov	r1, r3
 80132a6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80132a8:	f7fe fd1a 	bl	8011ce0 <move_window>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d137      	bne.n	8013322 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80132b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b4:	2200      	movs	r2, #0
 80132b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80132b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132ba:	3338      	adds	r3, #56	; 0x38
 80132bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fe fa5d 	bl	8011780 <ld_word>
 80132c6:	4603      	mov	r3, r0
 80132c8:	461a      	mov	r2, r3
 80132ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80132ce:	429a      	cmp	r2, r3
 80132d0:	d127      	bne.n	8013322 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80132d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132d4:	3338      	adds	r3, #56	; 0x38
 80132d6:	4618      	mov	r0, r3
 80132d8:	f7fe fa6a 	bl	80117b0 <ld_dword>
 80132dc:	4602      	mov	r2, r0
 80132de:	4b1d      	ldr	r3, [pc, #116]	; (8013354 <find_volume+0x500>)
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d11e      	bne.n	8013322 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80132e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132e6:	3338      	adds	r3, #56	; 0x38
 80132e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80132ec:	4618      	mov	r0, r3
 80132ee:	f7fe fa5f 	bl	80117b0 <ld_dword>
 80132f2:	4602      	mov	r2, r0
 80132f4:	4b18      	ldr	r3, [pc, #96]	; (8013358 <find_volume+0x504>)
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d113      	bne.n	8013322 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80132fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132fc:	3338      	adds	r3, #56	; 0x38
 80132fe:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013302:	4618      	mov	r0, r3
 8013304:	f7fe fa54 	bl	80117b0 <ld_dword>
 8013308:	4602      	mov	r2, r0
 801330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013310:	3338      	adds	r3, #56	; 0x38
 8013312:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013316:	4618      	mov	r0, r3
 8013318:	f7fe fa4a 	bl	80117b0 <ld_dword>
 801331c:	4602      	mov	r2, r0
 801331e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013320:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013324:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013328:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801332a:	4b0c      	ldr	r3, [pc, #48]	; (801335c <find_volume+0x508>)
 801332c:	881b      	ldrh	r3, [r3, #0]
 801332e:	3301      	adds	r3, #1
 8013330:	b29a      	uxth	r2, r3
 8013332:	4b0a      	ldr	r3, [pc, #40]	; (801335c <find_volume+0x508>)
 8013334:	801a      	strh	r2, [r3, #0]
 8013336:	4b09      	ldr	r3, [pc, #36]	; (801335c <find_volume+0x508>)
 8013338:	881a      	ldrh	r2, [r3, #0]
 801333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801333c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013340:	2200      	movs	r2, #0
 8013342:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013346:	f7fe fc63 	bl	8011c10 <clear_lock>
#endif
	return FR_OK;
 801334a:	2300      	movs	r3, #0
}
 801334c:	4618      	mov	r0, r3
 801334e:	3758      	adds	r7, #88	; 0x58
 8013350:	46bd      	mov	sp, r7
 8013352:	bd80      	pop	{r7, pc}
 8013354:	41615252 	.word	0x41615252
 8013358:	61417272 	.word	0x61417272
 801335c:	200452d8 	.word	0x200452d8

08013360 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801336a:	2309      	movs	r3, #9
 801336c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d01c      	beq.n	80133ae <validate+0x4e>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d018      	beq.n	80133ae <validate+0x4e>
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	781b      	ldrb	r3, [r3, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d013      	beq.n	80133ae <validate+0x4e>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	889a      	ldrh	r2, [r3, #4]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	88db      	ldrh	r3, [r3, #6]
 8013390:	429a      	cmp	r2, r3
 8013392:	d10c      	bne.n	80133ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	785b      	ldrb	r3, [r3, #1]
 801339a:	4618      	mov	r0, r3
 801339c:	f7fe f952 	bl	8011644 <disk_status>
 80133a0:	4603      	mov	r3, r0
 80133a2:	f003 0301 	and.w	r3, r3, #1
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d101      	bne.n	80133ae <validate+0x4e>
			res = FR_OK;
 80133aa:	2300      	movs	r3, #0
 80133ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80133ae:	7bfb      	ldrb	r3, [r7, #15]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d102      	bne.n	80133ba <validate+0x5a>
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	e000      	b.n	80133bc <validate+0x5c>
 80133ba:	2300      	movs	r3, #0
 80133bc:	683a      	ldr	r2, [r7, #0]
 80133be:	6013      	str	r3, [r2, #0]
	return res;
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
	...

080133cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b088      	sub	sp, #32
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	4613      	mov	r3, r2
 80133d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80133de:	f107 0310 	add.w	r3, r7, #16
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7ff fc9b 	bl	8012d1e <get_ldnumber>
 80133e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80133ea:	69fb      	ldr	r3, [r7, #28]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	da01      	bge.n	80133f4 <f_mount+0x28>
 80133f0:	230b      	movs	r3, #11
 80133f2:	e02b      	b.n	801344c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80133f4:	4a17      	ldr	r2, [pc, #92]	; (8013454 <f_mount+0x88>)
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80133fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d005      	beq.n	8013410 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013404:	69b8      	ldr	r0, [r7, #24]
 8013406:	f7fe fc03 	bl	8011c10 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	2200      	movs	r2, #0
 801340e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d002      	beq.n	801341c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2200      	movs	r2, #0
 801341a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801341c:	68fa      	ldr	r2, [r7, #12]
 801341e:	490d      	ldr	r1, [pc, #52]	; (8013454 <f_mount+0x88>)
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <f_mount+0x66>
 801342c:	79fb      	ldrb	r3, [r7, #7]
 801342e:	2b01      	cmp	r3, #1
 8013430:	d001      	beq.n	8013436 <f_mount+0x6a>
 8013432:	2300      	movs	r3, #0
 8013434:	e00a      	b.n	801344c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013436:	f107 010c 	add.w	r1, r7, #12
 801343a:	f107 0308 	add.w	r3, r7, #8
 801343e:	2200      	movs	r2, #0
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff fd07 	bl	8012e54 <find_volume>
 8013446:	4603      	mov	r3, r0
 8013448:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801344a:	7dfb      	ldrb	r3, [r7, #23]
}
 801344c:	4618      	mov	r0, r3
 801344e:	3720      	adds	r7, #32
 8013450:	46bd      	mov	sp, r7
 8013452:	bd80      	pop	{r7, pc}
 8013454:	200452d4 	.word	0x200452d4

08013458 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b098      	sub	sp, #96	; 0x60
 801345c:	af00      	add	r7, sp, #0
 801345e:	60f8      	str	r0, [r7, #12]
 8013460:	60b9      	str	r1, [r7, #8]
 8013462:	4613      	mov	r3, r2
 8013464:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d101      	bne.n	8013470 <f_open+0x18>
 801346c:	2309      	movs	r3, #9
 801346e:	e1ba      	b.n	80137e6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013470:	79fb      	ldrb	r3, [r7, #7]
 8013472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013476:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013478:	79fa      	ldrb	r2, [r7, #7]
 801347a:	f107 0110 	add.w	r1, r7, #16
 801347e:	f107 0308 	add.w	r3, r7, #8
 8013482:	4618      	mov	r0, r3
 8013484:	f7ff fce6 	bl	8012e54 <find_volume>
 8013488:	4603      	mov	r3, r0
 801348a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801348e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013492:	2b00      	cmp	r3, #0
 8013494:	f040 819e 	bne.w	80137d4 <f_open+0x37c>
		dj.obj.fs = fs;
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801349c:	68ba      	ldr	r2, [r7, #8]
 801349e:	f107 0314 	add.w	r3, r7, #20
 80134a2:	4611      	mov	r1, r2
 80134a4:	4618      	mov	r0, r3
 80134a6:	f7ff fba5 	bl	8012bf4 <follow_path>
 80134aa:	4603      	mov	r3, r0
 80134ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80134b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d11a      	bne.n	80134ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80134b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80134bc:	b25b      	sxtb	r3, r3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	da03      	bge.n	80134ca <f_open+0x72>
				res = FR_INVALID_NAME;
 80134c2:	2306      	movs	r3, #6
 80134c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80134c8:	e011      	b.n	80134ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80134ca:	79fb      	ldrb	r3, [r7, #7]
 80134cc:	f023 0301 	bic.w	r3, r3, #1
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	bf14      	ite	ne
 80134d4:	2301      	movne	r3, #1
 80134d6:	2300      	moveq	r3, #0
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	461a      	mov	r2, r3
 80134dc:	f107 0314 	add.w	r3, r7, #20
 80134e0:	4611      	mov	r1, r2
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fe fa4c 	bl	8011980 <chk_lock>
 80134e8:	4603      	mov	r3, r0
 80134ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80134ee:	79fb      	ldrb	r3, [r7, #7]
 80134f0:	f003 031c 	and.w	r3, r3, #28
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d07e      	beq.n	80135f6 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 80134f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d017      	beq.n	8013530 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013504:	2b04      	cmp	r3, #4
 8013506:	d10e      	bne.n	8013526 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013508:	f7fe fa96 	bl	8011a38 <enq_lock>
 801350c:	4603      	mov	r3, r0
 801350e:	2b00      	cmp	r3, #0
 8013510:	d006      	beq.n	8013520 <f_open+0xc8>
 8013512:	f107 0314 	add.w	r3, r7, #20
 8013516:	4618      	mov	r0, r3
 8013518:	f7ff fa52 	bl	80129c0 <dir_register>
 801351c:	4603      	mov	r3, r0
 801351e:	e000      	b.n	8013522 <f_open+0xca>
 8013520:	2312      	movs	r3, #18
 8013522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013526:	79fb      	ldrb	r3, [r7, #7]
 8013528:	f043 0308 	orr.w	r3, r3, #8
 801352c:	71fb      	strb	r3, [r7, #7]
 801352e:	e010      	b.n	8013552 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013530:	7ebb      	ldrb	r3, [r7, #26]
 8013532:	f003 0311 	and.w	r3, r3, #17
 8013536:	2b00      	cmp	r3, #0
 8013538:	d003      	beq.n	8013542 <f_open+0xea>
					res = FR_DENIED;
 801353a:	2307      	movs	r3, #7
 801353c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013540:	e007      	b.n	8013552 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013542:	79fb      	ldrb	r3, [r7, #7]
 8013544:	f003 0304 	and.w	r3, r3, #4
 8013548:	2b00      	cmp	r3, #0
 801354a:	d002      	beq.n	8013552 <f_open+0xfa>
 801354c:	2308      	movs	r3, #8
 801354e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013556:	2b00      	cmp	r3, #0
 8013558:	d167      	bne.n	801362a <f_open+0x1d2>
 801355a:	79fb      	ldrb	r3, [r7, #7]
 801355c:	f003 0308 	and.w	r3, r3, #8
 8013560:	2b00      	cmp	r3, #0
 8013562:	d062      	beq.n	801362a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013564:	4ba2      	ldr	r3, [pc, #648]	; (80137f0 <f_open+0x398>)
 8013566:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801356a:	330e      	adds	r3, #14
 801356c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801356e:	4618      	mov	r0, r3
 8013570:	f7fe f95c 	bl	801182c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013576:	3316      	adds	r3, #22
 8013578:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801357a:	4618      	mov	r0, r3
 801357c:	f7fe f956 	bl	801182c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013582:	330b      	adds	r3, #11
 8013584:	2220      	movs	r2, #32
 8013586:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801358c:	4611      	mov	r1, r2
 801358e:	4618      	mov	r0, r3
 8013590:	f7ff f925 	bl	80127de <ld_clust>
 8013594:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801359a:	2200      	movs	r2, #0
 801359c:	4618      	mov	r0, r3
 801359e:	f7ff f93d 	bl	801281c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80135a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a4:	331c      	adds	r3, #28
 80135a6:	2100      	movs	r1, #0
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fe f93f 	bl	801182c <st_dword>
					fs->wflag = 1;
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	2201      	movs	r2, #1
 80135b2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80135b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d037      	beq.n	801362a <f_open+0x1d2>
						dw = fs->winsect;
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135be:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80135c0:	f107 0314 	add.w	r3, r7, #20
 80135c4:	2200      	movs	r2, #0
 80135c6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80135c8:	4618      	mov	r0, r3
 80135ca:	f7fe fe2d 	bl	8012228 <remove_chain>
 80135ce:	4603      	mov	r3, r0
 80135d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80135d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d126      	bne.n	801362a <f_open+0x1d2>
							res = move_window(fs, dw);
 80135dc:	693b      	ldr	r3, [r7, #16]
 80135de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fe fb7d 	bl	8011ce0 <move_window>
 80135e6:	4603      	mov	r3, r0
 80135e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80135ec:	693b      	ldr	r3, [r7, #16]
 80135ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135f0:	3a01      	subs	r2, #1
 80135f2:	611a      	str	r2, [r3, #16]
 80135f4:	e019      	b.n	801362a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80135f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d115      	bne.n	801362a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80135fe:	7ebb      	ldrb	r3, [r7, #26]
 8013600:	f003 0310 	and.w	r3, r3, #16
 8013604:	2b00      	cmp	r3, #0
 8013606:	d003      	beq.n	8013610 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013608:	2304      	movs	r3, #4
 801360a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801360e:	e00c      	b.n	801362a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013610:	79fb      	ldrb	r3, [r7, #7]
 8013612:	f003 0302 	and.w	r3, r3, #2
 8013616:	2b00      	cmp	r3, #0
 8013618:	d007      	beq.n	801362a <f_open+0x1d2>
 801361a:	7ebb      	ldrb	r3, [r7, #26]
 801361c:	f003 0301 	and.w	r3, r3, #1
 8013620:	2b00      	cmp	r3, #0
 8013622:	d002      	beq.n	801362a <f_open+0x1d2>
						res = FR_DENIED;
 8013624:	2307      	movs	r3, #7
 8013626:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801362a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801362e:	2b00      	cmp	r3, #0
 8013630:	d128      	bne.n	8013684 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013632:	79fb      	ldrb	r3, [r7, #7]
 8013634:	f003 0308 	and.w	r3, r3, #8
 8013638:	2b00      	cmp	r3, #0
 801363a:	d003      	beq.n	8013644 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801363c:	79fb      	ldrb	r3, [r7, #7]
 801363e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013642:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801364c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013652:	79fb      	ldrb	r3, [r7, #7]
 8013654:	f023 0301 	bic.w	r3, r3, #1
 8013658:	2b00      	cmp	r3, #0
 801365a:	bf14      	ite	ne
 801365c:	2301      	movne	r3, #1
 801365e:	2300      	moveq	r3, #0
 8013660:	b2db      	uxtb	r3, r3
 8013662:	461a      	mov	r2, r3
 8013664:	f107 0314 	add.w	r3, r7, #20
 8013668:	4611      	mov	r1, r2
 801366a:	4618      	mov	r0, r3
 801366c:	f7fe fa06 	bl	8011a7c <inc_lock>
 8013670:	4602      	mov	r2, r0
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	691b      	ldr	r3, [r3, #16]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d102      	bne.n	8013684 <f_open+0x22c>
 801367e:	2302      	movs	r3, #2
 8013680:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013684:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013688:	2b00      	cmp	r3, #0
 801368a:	f040 80a3 	bne.w	80137d4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801368e:	693b      	ldr	r3, [r7, #16]
 8013690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013692:	4611      	mov	r1, r2
 8013694:	4618      	mov	r0, r3
 8013696:	f7ff f8a2 	bl	80127de <ld_clust>
 801369a:	4602      	mov	r2, r0
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80136a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136a2:	331c      	adds	r3, #28
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7fe f883 	bl	80117b0 <ld_dword>
 80136aa:	4602      	mov	r2, r0
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	2200      	movs	r2, #0
 80136b4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80136b6:	693a      	ldr	r2, [r7, #16]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80136bc:	693b      	ldr	r3, [r7, #16]
 80136be:	88da      	ldrh	r2, [r3, #6]
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	79fa      	ldrb	r2, [r7, #7]
 80136c8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	2200      	movs	r2, #0
 80136ce:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	2200      	movs	r2, #0
 80136da:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	3330      	adds	r3, #48	; 0x30
 80136e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80136e4:	2100      	movs	r1, #0
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fe f8ed 	bl	80118c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80136ec:	79fb      	ldrb	r3, [r7, #7]
 80136ee:	f003 0320 	and.w	r3, r3, #32
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d06e      	beq.n	80137d4 <f_open+0x37c>
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	68db      	ldr	r3, [r3, #12]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d06a      	beq.n	80137d4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	68da      	ldr	r2, [r3, #12]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013706:	693b      	ldr	r3, [r7, #16]
 8013708:	895b      	ldrh	r3, [r3, #10]
 801370a:	461a      	mov	r2, r3
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	899b      	ldrh	r3, [r3, #12]
 8013710:	fb03 f302 	mul.w	r3, r3, r2
 8013714:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	689b      	ldr	r3, [r3, #8]
 801371a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	68db      	ldr	r3, [r3, #12]
 8013720:	657b      	str	r3, [r7, #84]	; 0x54
 8013722:	e016      	b.n	8013752 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013724:	68fb      	ldr	r3, [r7, #12]
 8013726:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013728:	4618      	mov	r0, r3
 801372a:	f7fe fb96 	bl	8011e5a <get_fat>
 801372e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013730:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013732:	2b01      	cmp	r3, #1
 8013734:	d802      	bhi.n	801373c <f_open+0x2e4>
 8013736:	2302      	movs	r3, #2
 8013738:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801373c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801373e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013742:	d102      	bne.n	801374a <f_open+0x2f2>
 8013744:	2301      	movs	r3, #1
 8013746:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801374a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801374c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801374e:	1ad3      	subs	r3, r2, r3
 8013750:	657b      	str	r3, [r7, #84]	; 0x54
 8013752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013756:	2b00      	cmp	r3, #0
 8013758:	d103      	bne.n	8013762 <f_open+0x30a>
 801375a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801375c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801375e:	429a      	cmp	r2, r3
 8013760:	d8e0      	bhi.n	8013724 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013766:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013768:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801376c:	2b00      	cmp	r3, #0
 801376e:	d131      	bne.n	80137d4 <f_open+0x37c>
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	899b      	ldrh	r3, [r3, #12]
 8013774:	461a      	mov	r2, r3
 8013776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013778:	fbb3 f1f2 	udiv	r1, r3, r2
 801377c:	fb02 f201 	mul.w	r2, r2, r1
 8013780:	1a9b      	subs	r3, r3, r2
 8013782:	2b00      	cmp	r3, #0
 8013784:	d026      	beq.n	80137d4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013786:	693b      	ldr	r3, [r7, #16]
 8013788:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801378a:	4618      	mov	r0, r3
 801378c:	f7fe fb46 	bl	8011e1c <clust2sect>
 8013790:	6478      	str	r0, [r7, #68]	; 0x44
 8013792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013794:	2b00      	cmp	r3, #0
 8013796:	d103      	bne.n	80137a0 <f_open+0x348>
						res = FR_INT_ERR;
 8013798:	2302      	movs	r3, #2
 801379a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801379e:	e019      	b.n	80137d4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80137a0:	693b      	ldr	r3, [r7, #16]
 80137a2:	899b      	ldrh	r3, [r3, #12]
 80137a4:	461a      	mov	r2, r3
 80137a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80137ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137ae:	441a      	add	r2, r3
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80137b4:	693b      	ldr	r3, [r7, #16]
 80137b6:	7858      	ldrb	r0, [r3, #1]
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6a1a      	ldr	r2, [r3, #32]
 80137c2:	2301      	movs	r3, #1
 80137c4:	f7fd ff7e 	bl	80116c4 <disk_read>
 80137c8:	4603      	mov	r3, r0
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d002      	beq.n	80137d4 <f_open+0x37c>
 80137ce:	2301      	movs	r3, #1
 80137d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80137d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d002      	beq.n	80137e2 <f_open+0x38a>
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	2200      	movs	r2, #0
 80137e0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80137e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3760      	adds	r7, #96	; 0x60
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	274a0000 	.word	0x274a0000

080137f4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b08e      	sub	sp, #56	; 0x38
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
 8013800:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	2200      	movs	r2, #0
 801380a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	f107 0214 	add.w	r2, r7, #20
 8013812:	4611      	mov	r1, r2
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff fda3 	bl	8013360 <validate>
 801381a:	4603      	mov	r3, r0
 801381c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013824:	2b00      	cmp	r3, #0
 8013826:	d107      	bne.n	8013838 <f_read+0x44>
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	7d5b      	ldrb	r3, [r3, #21]
 801382c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013834:	2b00      	cmp	r3, #0
 8013836:	d002      	beq.n	801383e <f_read+0x4a>
 8013838:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801383c:	e135      	b.n	8013aaa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	7d1b      	ldrb	r3, [r3, #20]
 8013842:	f003 0301 	and.w	r3, r3, #1
 8013846:	2b00      	cmp	r3, #0
 8013848:	d101      	bne.n	801384e <f_read+0x5a>
 801384a:	2307      	movs	r3, #7
 801384c:	e12d      	b.n	8013aaa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	68da      	ldr	r2, [r3, #12]
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	699b      	ldr	r3, [r3, #24]
 8013856:	1ad3      	subs	r3, r2, r3
 8013858:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801385a:	687a      	ldr	r2, [r7, #4]
 801385c:	6a3b      	ldr	r3, [r7, #32]
 801385e:	429a      	cmp	r2, r3
 8013860:	f240 811e 	bls.w	8013aa0 <f_read+0x2ac>
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013868:	e11a      	b.n	8013aa0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	699b      	ldr	r3, [r3, #24]
 801386e:	697a      	ldr	r2, [r7, #20]
 8013870:	8992      	ldrh	r2, [r2, #12]
 8013872:	fbb3 f1f2 	udiv	r1, r3, r2
 8013876:	fb02 f201 	mul.w	r2, r2, r1
 801387a:	1a9b      	subs	r3, r3, r2
 801387c:	2b00      	cmp	r3, #0
 801387e:	f040 80d5 	bne.w	8013a2c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	699b      	ldr	r3, [r3, #24]
 8013886:	697a      	ldr	r2, [r7, #20]
 8013888:	8992      	ldrh	r2, [r2, #12]
 801388a:	fbb3 f3f2 	udiv	r3, r3, r2
 801388e:	697a      	ldr	r2, [r7, #20]
 8013890:	8952      	ldrh	r2, [r2, #10]
 8013892:	3a01      	subs	r2, #1
 8013894:	4013      	ands	r3, r2
 8013896:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013898:	69fb      	ldr	r3, [r7, #28]
 801389a:	2b00      	cmp	r3, #0
 801389c:	d12f      	bne.n	80138fe <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	699b      	ldr	r3, [r3, #24]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d103      	bne.n	80138ae <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	689b      	ldr	r3, [r3, #8]
 80138aa:	633b      	str	r3, [r7, #48]	; 0x30
 80138ac:	e013      	b.n	80138d6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d007      	beq.n	80138c6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	699b      	ldr	r3, [r3, #24]
 80138ba:	4619      	mov	r1, r3
 80138bc:	68f8      	ldr	r0, [r7, #12]
 80138be:	f7fe fdb0 	bl	8012422 <clmt_clust>
 80138c2:	6338      	str	r0, [r7, #48]	; 0x30
 80138c4:	e007      	b.n	80138d6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80138c6:	68fa      	ldr	r2, [r7, #12]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	69db      	ldr	r3, [r3, #28]
 80138cc:	4619      	mov	r1, r3
 80138ce:	4610      	mov	r0, r2
 80138d0:	f7fe fac3 	bl	8011e5a <get_fat>
 80138d4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80138d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d804      	bhi.n	80138e6 <f_read+0xf2>
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2202      	movs	r2, #2
 80138e0:	755a      	strb	r2, [r3, #21]
 80138e2:	2302      	movs	r3, #2
 80138e4:	e0e1      	b.n	8013aaa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ec:	d104      	bne.n	80138f8 <f_read+0x104>
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	2201      	movs	r2, #1
 80138f2:	755a      	strb	r2, [r3, #21]
 80138f4:	2301      	movs	r3, #1
 80138f6:	e0d8      	b.n	8013aaa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138fc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80138fe:	697a      	ldr	r2, [r7, #20]
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	69db      	ldr	r3, [r3, #28]
 8013904:	4619      	mov	r1, r3
 8013906:	4610      	mov	r0, r2
 8013908:	f7fe fa88 	bl	8011e1c <clust2sect>
 801390c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801390e:	69bb      	ldr	r3, [r7, #24]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d104      	bne.n	801391e <f_read+0x12a>
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2202      	movs	r2, #2
 8013918:	755a      	strb	r2, [r3, #21]
 801391a:	2302      	movs	r3, #2
 801391c:	e0c5      	b.n	8013aaa <f_read+0x2b6>
			sect += csect;
 801391e:	69ba      	ldr	r2, [r7, #24]
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	4413      	add	r3, r2
 8013924:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	899b      	ldrh	r3, [r3, #12]
 801392a:	461a      	mov	r2, r3
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013932:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013936:	2b00      	cmp	r3, #0
 8013938:	d041      	beq.n	80139be <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801393a:	69fa      	ldr	r2, [r7, #28]
 801393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393e:	4413      	add	r3, r2
 8013940:	697a      	ldr	r2, [r7, #20]
 8013942:	8952      	ldrh	r2, [r2, #10]
 8013944:	4293      	cmp	r3, r2
 8013946:	d905      	bls.n	8013954 <f_read+0x160>
					cc = fs->csize - csect;
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	895b      	ldrh	r3, [r3, #10]
 801394c:	461a      	mov	r2, r3
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	1ad3      	subs	r3, r2, r3
 8013952:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	7858      	ldrb	r0, [r3, #1]
 8013958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801395a:	69ba      	ldr	r2, [r7, #24]
 801395c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801395e:	f7fd feb1 	bl	80116c4 <disk_read>
 8013962:	4603      	mov	r3, r0
 8013964:	2b00      	cmp	r3, #0
 8013966:	d004      	beq.n	8013972 <f_read+0x17e>
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	2201      	movs	r2, #1
 801396c:	755a      	strb	r2, [r3, #21]
 801396e:	2301      	movs	r3, #1
 8013970:	e09b      	b.n	8013aaa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	7d1b      	ldrb	r3, [r3, #20]
 8013976:	b25b      	sxtb	r3, r3
 8013978:	2b00      	cmp	r3, #0
 801397a:	da18      	bge.n	80139ae <f_read+0x1ba>
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	6a1a      	ldr	r2, [r3, #32]
 8013980:	69bb      	ldr	r3, [r7, #24]
 8013982:	1ad3      	subs	r3, r2, r3
 8013984:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013986:	429a      	cmp	r2, r3
 8013988:	d911      	bls.n	80139ae <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	6a1a      	ldr	r2, [r3, #32]
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	697a      	ldr	r2, [r7, #20]
 8013994:	8992      	ldrh	r2, [r2, #12]
 8013996:	fb02 f303 	mul.w	r3, r2, r3
 801399a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801399c:	18d0      	adds	r0, r2, r3
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139a4:	697b      	ldr	r3, [r7, #20]
 80139a6:	899b      	ldrh	r3, [r3, #12]
 80139a8:	461a      	mov	r2, r3
 80139aa:	f7fd ff6b 	bl	8011884 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80139ae:	697b      	ldr	r3, [r7, #20]
 80139b0:	899b      	ldrh	r3, [r3, #12]
 80139b2:	461a      	mov	r2, r3
 80139b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b6:	fb02 f303 	mul.w	r3, r2, r3
 80139ba:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80139bc:	e05c      	b.n	8013a78 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	6a1b      	ldr	r3, [r3, #32]
 80139c2:	69ba      	ldr	r2, [r7, #24]
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d02e      	beq.n	8013a26 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	7d1b      	ldrb	r3, [r3, #20]
 80139cc:	b25b      	sxtb	r3, r3
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	da18      	bge.n	8013a04 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	7858      	ldrb	r0, [r3, #1]
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	6a1a      	ldr	r2, [r3, #32]
 80139e0:	2301      	movs	r3, #1
 80139e2:	f7fd fe8f 	bl	8011704 <disk_write>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d004      	beq.n	80139f6 <f_read+0x202>
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	2201      	movs	r2, #1
 80139f0:	755a      	strb	r2, [r3, #21]
 80139f2:	2301      	movs	r3, #1
 80139f4:	e059      	b.n	8013aaa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	7d1b      	ldrb	r3, [r3, #20]
 80139fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139fe:	b2da      	uxtb	r2, r3
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	7858      	ldrb	r0, [r3, #1]
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a0e:	2301      	movs	r3, #1
 8013a10:	69ba      	ldr	r2, [r7, #24]
 8013a12:	f7fd fe57 	bl	80116c4 <disk_read>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d004      	beq.n	8013a26 <f_read+0x232>
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	2201      	movs	r2, #1
 8013a20:	755a      	strb	r2, [r3, #21]
 8013a22:	2301      	movs	r3, #1
 8013a24:	e041      	b.n	8013aaa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	69ba      	ldr	r2, [r7, #24]
 8013a2a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	899b      	ldrh	r3, [r3, #12]
 8013a30:	4618      	mov	r0, r3
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	699b      	ldr	r3, [r3, #24]
 8013a36:	697a      	ldr	r2, [r7, #20]
 8013a38:	8992      	ldrh	r2, [r2, #12]
 8013a3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a3e:	fb02 f201 	mul.w	r2, r2, r1
 8013a42:	1a9b      	subs	r3, r3, r2
 8013a44:	1ac3      	subs	r3, r0, r3
 8013a46:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d901      	bls.n	8013a54 <f_read+0x260>
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	699b      	ldr	r3, [r3, #24]
 8013a5e:	697a      	ldr	r2, [r7, #20]
 8013a60:	8992      	ldrh	r2, [r2, #12]
 8013a62:	fbb3 f0f2 	udiv	r0, r3, r2
 8013a66:	fb02 f200 	mul.w	r2, r2, r0
 8013a6a:	1a9b      	subs	r3, r3, r2
 8013a6c:	440b      	add	r3, r1
 8013a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a70:	4619      	mov	r1, r3
 8013a72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a74:	f7fd ff06 	bl	8011884 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7c:	4413      	add	r3, r2
 8013a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	699a      	ldr	r2, [r3, #24]
 8013a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a86:	441a      	add	r2, r3
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	619a      	str	r2, [r3, #24]
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	681a      	ldr	r2, [r3, #0]
 8013a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a92:	441a      	add	r2, r3
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	601a      	str	r2, [r3, #0]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a9c:	1ad3      	subs	r3, r2, r3
 8013a9e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f47f aee1 	bne.w	801386a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013aa8:	2300      	movs	r3, #0
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3738      	adds	r7, #56	; 0x38
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}

08013ab2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013ab2:	b580      	push	{r7, lr}
 8013ab4:	b08c      	sub	sp, #48	; 0x30
 8013ab6:	af00      	add	r7, sp, #0
 8013ab8:	60f8      	str	r0, [r7, #12]
 8013aba:	60b9      	str	r1, [r7, #8]
 8013abc:	607a      	str	r2, [r7, #4]
 8013abe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013ac4:	683b      	ldr	r3, [r7, #0]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	f107 0210 	add.w	r2, r7, #16
 8013ad0:	4611      	mov	r1, r2
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7ff fc44 	bl	8013360 <validate>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d107      	bne.n	8013af6 <f_write+0x44>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	7d5b      	ldrb	r3, [r3, #21]
 8013aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d002      	beq.n	8013afc <f_write+0x4a>
 8013af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013afa:	e16a      	b.n	8013dd2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	7d1b      	ldrb	r3, [r3, #20]
 8013b00:	f003 0302 	and.w	r3, r3, #2
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d101      	bne.n	8013b0c <f_write+0x5a>
 8013b08:	2307      	movs	r3, #7
 8013b0a:	e162      	b.n	8013dd2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	699a      	ldr	r2, [r3, #24]
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	441a      	add	r2, r3
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	699b      	ldr	r3, [r3, #24]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	f080 814c 	bcs.w	8013db6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	699b      	ldr	r3, [r3, #24]
 8013b22:	43db      	mvns	r3, r3
 8013b24:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013b26:	e146      	b.n	8013db6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	699b      	ldr	r3, [r3, #24]
 8013b2c:	693a      	ldr	r2, [r7, #16]
 8013b2e:	8992      	ldrh	r2, [r2, #12]
 8013b30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b34:	fb02 f201 	mul.w	r2, r2, r1
 8013b38:	1a9b      	subs	r3, r3, r2
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f040 80f1 	bne.w	8013d22 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	699b      	ldr	r3, [r3, #24]
 8013b44:	693a      	ldr	r2, [r7, #16]
 8013b46:	8992      	ldrh	r2, [r2, #12]
 8013b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b4c:	693a      	ldr	r2, [r7, #16]
 8013b4e:	8952      	ldrh	r2, [r2, #10]
 8013b50:	3a01      	subs	r2, #1
 8013b52:	4013      	ands	r3, r2
 8013b54:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d143      	bne.n	8013be4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10c      	bne.n	8013b7e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	689b      	ldr	r3, [r3, #8]
 8013b68:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d11a      	bne.n	8013ba6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	2100      	movs	r1, #0
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7fe fbbc 	bl	80122f2 <create_chain>
 8013b7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b7c:	e013      	b.n	8013ba6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d007      	beq.n	8013b96 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	699b      	ldr	r3, [r3, #24]
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	68f8      	ldr	r0, [r7, #12]
 8013b8e:	f7fe fc48 	bl	8012422 <clmt_clust>
 8013b92:	62b8      	str	r0, [r7, #40]	; 0x28
 8013b94:	e007      	b.n	8013ba6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013b96:	68fa      	ldr	r2, [r7, #12]
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	69db      	ldr	r3, [r3, #28]
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	4610      	mov	r0, r2
 8013ba0:	f7fe fba7 	bl	80122f2 <create_chain>
 8013ba4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	f000 8109 	beq.w	8013dc0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bb0:	2b01      	cmp	r3, #1
 8013bb2:	d104      	bne.n	8013bbe <f_write+0x10c>
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2202      	movs	r2, #2
 8013bb8:	755a      	strb	r2, [r3, #21]
 8013bba:	2302      	movs	r3, #2
 8013bbc:	e109      	b.n	8013dd2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bc4:	d104      	bne.n	8013bd0 <f_write+0x11e>
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2201      	movs	r2, #1
 8013bca:	755a      	strb	r2, [r3, #21]
 8013bcc:	2301      	movs	r3, #1
 8013bce:	e100      	b.n	8013dd2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bd4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	689b      	ldr	r3, [r3, #8]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d102      	bne.n	8013be4 <f_write+0x132>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013be2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	7d1b      	ldrb	r3, [r3, #20]
 8013be8:	b25b      	sxtb	r3, r3
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	da18      	bge.n	8013c20 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bee:	693b      	ldr	r3, [r7, #16]
 8013bf0:	7858      	ldrb	r0, [r3, #1]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	6a1a      	ldr	r2, [r3, #32]
 8013bfc:	2301      	movs	r3, #1
 8013bfe:	f7fd fd81 	bl	8011704 <disk_write>
 8013c02:	4603      	mov	r3, r0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d004      	beq.n	8013c12 <f_write+0x160>
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	755a      	strb	r2, [r3, #21]
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e0df      	b.n	8013dd2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	7d1b      	ldrb	r3, [r3, #20]
 8013c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	69db      	ldr	r3, [r3, #28]
 8013c26:	4619      	mov	r1, r3
 8013c28:	4610      	mov	r0, r2
 8013c2a:	f7fe f8f7 	bl	8011e1c <clust2sect>
 8013c2e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013c30:	697b      	ldr	r3, [r7, #20]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d104      	bne.n	8013c40 <f_write+0x18e>
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2202      	movs	r2, #2
 8013c3a:	755a      	strb	r2, [r3, #21]
 8013c3c:	2302      	movs	r3, #2
 8013c3e:	e0c8      	b.n	8013dd2 <f_write+0x320>
			sect += csect;
 8013c40:	697a      	ldr	r2, [r7, #20]
 8013c42:	69bb      	ldr	r3, [r7, #24]
 8013c44:	4413      	add	r3, r2
 8013c46:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013c48:	693b      	ldr	r3, [r7, #16]
 8013c4a:	899b      	ldrh	r3, [r3, #12]
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	687b      	ldr	r3, [r7, #4]
 8013c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8013c54:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013c56:	6a3b      	ldr	r3, [r7, #32]
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d043      	beq.n	8013ce4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013c5c:	69ba      	ldr	r2, [r7, #24]
 8013c5e:	6a3b      	ldr	r3, [r7, #32]
 8013c60:	4413      	add	r3, r2
 8013c62:	693a      	ldr	r2, [r7, #16]
 8013c64:	8952      	ldrh	r2, [r2, #10]
 8013c66:	4293      	cmp	r3, r2
 8013c68:	d905      	bls.n	8013c76 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	895b      	ldrh	r3, [r3, #10]
 8013c6e:	461a      	mov	r2, r3
 8013c70:	69bb      	ldr	r3, [r7, #24]
 8013c72:	1ad3      	subs	r3, r2, r3
 8013c74:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	7858      	ldrb	r0, [r3, #1]
 8013c7a:	6a3b      	ldr	r3, [r7, #32]
 8013c7c:	697a      	ldr	r2, [r7, #20]
 8013c7e:	69f9      	ldr	r1, [r7, #28]
 8013c80:	f7fd fd40 	bl	8011704 <disk_write>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d004      	beq.n	8013c94 <f_write+0x1e2>
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	755a      	strb	r2, [r3, #21]
 8013c90:	2301      	movs	r3, #1
 8013c92:	e09e      	b.n	8013dd2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	6a1a      	ldr	r2, [r3, #32]
 8013c98:	697b      	ldr	r3, [r7, #20]
 8013c9a:	1ad3      	subs	r3, r2, r3
 8013c9c:	6a3a      	ldr	r2, [r7, #32]
 8013c9e:	429a      	cmp	r2, r3
 8013ca0:	d918      	bls.n	8013cd4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	6a1a      	ldr	r2, [r3, #32]
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	1ad3      	subs	r3, r2, r3
 8013cb0:	693a      	ldr	r2, [r7, #16]
 8013cb2:	8992      	ldrh	r2, [r2, #12]
 8013cb4:	fb02 f303 	mul.w	r3, r2, r3
 8013cb8:	69fa      	ldr	r2, [r7, #28]
 8013cba:	18d1      	adds	r1, r2, r3
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	899b      	ldrh	r3, [r3, #12]
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	f7fd fddf 	bl	8011884 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	7d1b      	ldrb	r3, [r3, #20]
 8013cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013cce:	b2da      	uxtb	r2, r3
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013cd4:	693b      	ldr	r3, [r7, #16]
 8013cd6:	899b      	ldrh	r3, [r3, #12]
 8013cd8:	461a      	mov	r2, r3
 8013cda:	6a3b      	ldr	r3, [r7, #32]
 8013cdc:	fb02 f303 	mul.w	r3, r2, r3
 8013ce0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013ce2:	e04b      	b.n	8013d7c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	6a1b      	ldr	r3, [r3, #32]
 8013ce8:	697a      	ldr	r2, [r7, #20]
 8013cea:	429a      	cmp	r2, r3
 8013cec:	d016      	beq.n	8013d1c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	699a      	ldr	r2, [r3, #24]
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d210      	bcs.n	8013d1c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	7858      	ldrb	r0, [r3, #1]
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d04:	2301      	movs	r3, #1
 8013d06:	697a      	ldr	r2, [r7, #20]
 8013d08:	f7fd fcdc 	bl	80116c4 <disk_read>
 8013d0c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d004      	beq.n	8013d1c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2201      	movs	r2, #1
 8013d16:	755a      	strb	r2, [r3, #21]
 8013d18:	2301      	movs	r3, #1
 8013d1a:	e05a      	b.n	8013dd2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	697a      	ldr	r2, [r7, #20]
 8013d20:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013d22:	693b      	ldr	r3, [r7, #16]
 8013d24:	899b      	ldrh	r3, [r3, #12]
 8013d26:	4618      	mov	r0, r3
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	699b      	ldr	r3, [r3, #24]
 8013d2c:	693a      	ldr	r2, [r7, #16]
 8013d2e:	8992      	ldrh	r2, [r2, #12]
 8013d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8013d34:	fb02 f201 	mul.w	r2, r2, r1
 8013d38:	1a9b      	subs	r3, r3, r2
 8013d3a:	1ac3      	subs	r3, r0, r3
 8013d3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	429a      	cmp	r2, r3
 8013d44:	d901      	bls.n	8013d4a <f_write+0x298>
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	699b      	ldr	r3, [r3, #24]
 8013d54:	693a      	ldr	r2, [r7, #16]
 8013d56:	8992      	ldrh	r2, [r2, #12]
 8013d58:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d5c:	fb02 f200 	mul.w	r2, r2, r0
 8013d60:	1a9b      	subs	r3, r3, r2
 8013d62:	440b      	add	r3, r1
 8013d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013d66:	69f9      	ldr	r1, [r7, #28]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7fd fd8b 	bl	8011884 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	7d1b      	ldrb	r3, [r3, #20]
 8013d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013d76:	b2da      	uxtb	r2, r3
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013d7c:	69fa      	ldr	r2, [r7, #28]
 8013d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d80:	4413      	add	r3, r2
 8013d82:	61fb      	str	r3, [r7, #28]
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	699a      	ldr	r2, [r3, #24]
 8013d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8a:	441a      	add	r2, r3
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	619a      	str	r2, [r3, #24]
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	68da      	ldr	r2, [r3, #12]
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	699b      	ldr	r3, [r3, #24]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	bf38      	it	cc
 8013d9c:	461a      	movcc	r2, r3
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	60da      	str	r2, [r3, #12]
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013da8:	441a      	add	r2, r3
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	601a      	str	r2, [r3, #0]
 8013dae:	687a      	ldr	r2, [r7, #4]
 8013db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db2:	1ad3      	subs	r3, r2, r3
 8013db4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	f47f aeb5 	bne.w	8013b28 <f_write+0x76>
 8013dbe:	e000      	b.n	8013dc2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013dc0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	7d1b      	ldrb	r3, [r3, #20]
 8013dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dca:	b2da      	uxtb	r2, r3
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013dd0:	2300      	movs	r3, #0
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3730      	adds	r7, #48	; 0x30
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
	...

08013ddc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b086      	sub	sp, #24
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f107 0208 	add.w	r2, r7, #8
 8013dea:	4611      	mov	r1, r2
 8013dec:	4618      	mov	r0, r3
 8013dee:	f7ff fab7 	bl	8013360 <validate>
 8013df2:	4603      	mov	r3, r0
 8013df4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013df6:	7dfb      	ldrb	r3, [r7, #23]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d167      	bne.n	8013ecc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	7d1b      	ldrb	r3, [r3, #20]
 8013e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d061      	beq.n	8013ecc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7d1b      	ldrb	r3, [r3, #20]
 8013e0c:	b25b      	sxtb	r3, r3
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	da15      	bge.n	8013e3e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	7858      	ldrb	r0, [r3, #1]
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6a1a      	ldr	r2, [r3, #32]
 8013e20:	2301      	movs	r3, #1
 8013e22:	f7fd fc6f 	bl	8011704 <disk_write>
 8013e26:	4603      	mov	r3, r0
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d001      	beq.n	8013e30 <f_sync+0x54>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e04e      	b.n	8013ece <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	7d1b      	ldrb	r3, [r3, #20]
 8013e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013e3e:	4b26      	ldr	r3, [pc, #152]	; (8013ed8 <f_sync+0xfc>)
 8013e40:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013e42:	68ba      	ldr	r2, [r7, #8]
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e48:	4619      	mov	r1, r3
 8013e4a:	4610      	mov	r0, r2
 8013e4c:	f7fd ff48 	bl	8011ce0 <move_window>
 8013e50:	4603      	mov	r3, r0
 8013e52:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013e54:	7dfb      	ldrb	r3, [r7, #23]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d138      	bne.n	8013ecc <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e5e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	330b      	adds	r3, #11
 8013e64:	781a      	ldrb	r2, [r3, #0]
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	330b      	adds	r3, #11
 8013e6a:	f042 0220 	orr.w	r2, r2, #32
 8013e6e:	b2d2      	uxtb	r2, r2
 8013e70:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	6818      	ldr	r0, [r3, #0]
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	68f9      	ldr	r1, [r7, #12]
 8013e7e:	f7fe fccd 	bl	801281c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	f103 021c 	add.w	r2, r3, #28
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4610      	mov	r0, r2
 8013e90:	f7fd fccc 	bl	801182c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	3316      	adds	r3, #22
 8013e98:	6939      	ldr	r1, [r7, #16]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7fd fcc6 	bl	801182c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	3312      	adds	r3, #18
 8013ea4:	2100      	movs	r1, #0
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7fd fca5 	bl	80117f6 <st_word>
					fs->wflag = 1;
 8013eac:	68bb      	ldr	r3, [r7, #8]
 8013eae:	2201      	movs	r2, #1
 8013eb0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013eb2:	68bb      	ldr	r3, [r7, #8]
 8013eb4:	4618      	mov	r0, r3
 8013eb6:	f7fd ff41 	bl	8011d3c <sync_fs>
 8013eba:	4603      	mov	r3, r0
 8013ebc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	7d1b      	ldrb	r3, [r3, #20]
 8013ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ec6:	b2da      	uxtb	r2, r3
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3718      	adds	r7, #24
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	274a0000 	.word	0x274a0000

08013edc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b084      	sub	sp, #16
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7ff ff79 	bl	8013ddc <f_sync>
 8013eea:	4603      	mov	r3, r0
 8013eec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013eee:	7bfb      	ldrb	r3, [r7, #15]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d118      	bne.n	8013f26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f107 0208 	add.w	r2, r7, #8
 8013efa:	4611      	mov	r1, r2
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7ff fa2f 	bl	8013360 <validate>
 8013f02:	4603      	mov	r3, r0
 8013f04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013f06:	7bfb      	ldrb	r3, [r7, #15]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d10c      	bne.n	8013f26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	691b      	ldr	r3, [r3, #16]
 8013f10:	4618      	mov	r0, r3
 8013f12:	f7fd fe41 	bl	8011b98 <dec_lock>
 8013f16:	4603      	mov	r3, r0
 8013f18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013f1a:	7bfb      	ldrb	r3, [r7, #15]
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d102      	bne.n	8013f26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2200      	movs	r2, #0
 8013f24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013f30:	b590      	push	{r4, r7, lr}
 8013f32:	b091      	sub	sp, #68	; 0x44
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013f38:	f107 0108 	add.w	r1, r7, #8
 8013f3c:	1d3b      	adds	r3, r7, #4
 8013f3e:	2200      	movs	r2, #0
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7fe ff87 	bl	8012e54 <find_volume>
 8013f46:	4603      	mov	r3, r0
 8013f48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013f4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d131      	bne.n	8013fb8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013f54:	68bb      	ldr	r3, [r7, #8]
 8013f56:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	f107 030c 	add.w	r3, r7, #12
 8013f5e:	4611      	mov	r1, r2
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe fe47 	bl	8012bf4 <follow_path>
 8013f66:	4603      	mov	r3, r0
 8013f68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013f6c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d11a      	bne.n	8013faa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013f74:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013f78:	b25b      	sxtb	r3, r3
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	da03      	bge.n	8013f86 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013f7e:	68bb      	ldr	r3, [r7, #8]
 8013f80:	697a      	ldr	r2, [r7, #20]
 8013f82:	619a      	str	r2, [r3, #24]
 8013f84:	e011      	b.n	8013faa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013f86:	7cbb      	ldrb	r3, [r7, #18]
 8013f88:	f003 0310 	and.w	r3, r3, #16
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d009      	beq.n	8013fa4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013f90:	68bb      	ldr	r3, [r7, #8]
 8013f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f94:	68bc      	ldr	r4, [r7, #8]
 8013f96:	4611      	mov	r1, r2
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fe fc20 	bl	80127de <ld_clust>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	61a3      	str	r3, [r4, #24]
 8013fa2:	e002      	b.n	8013faa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013fa4:	2305      	movs	r3, #5
 8013fa6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013faa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fae:	2b04      	cmp	r3, #4
 8013fb0:	d102      	bne.n	8013fb8 <f_chdir+0x88>
 8013fb2:	2305      	movs	r3, #5
 8013fb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013fb8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3744      	adds	r7, #68	; 0x44
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd90      	pop	{r4, r7, pc}

08013fc4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b090      	sub	sp, #64	; 0x40
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f107 0208 	add.w	r2, r7, #8
 8013fd4:	4611      	mov	r1, r2
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	f7ff f9c2 	bl	8013360 <validate>
 8013fdc:	4603      	mov	r3, r0
 8013fde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013fe2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d103      	bne.n	8013ff2 <f_lseek+0x2e>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	7d5b      	ldrb	r3, [r3, #21]
 8013fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013ff2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d002      	beq.n	8014000 <f_lseek+0x3c>
 8013ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ffe:	e201      	b.n	8014404 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014004:	2b00      	cmp	r3, #0
 8014006:	f000 80d9 	beq.w	80141bc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014010:	d15a      	bne.n	80140c8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401a:	1d1a      	adds	r2, r3, #4
 801401c:	627a      	str	r2, [r7, #36]	; 0x24
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	617b      	str	r3, [r7, #20]
 8014022:	2302      	movs	r3, #2
 8014024:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	689b      	ldr	r3, [r3, #8]
 801402a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801402e:	2b00      	cmp	r3, #0
 8014030:	d03a      	beq.n	80140a8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014034:	613b      	str	r3, [r7, #16]
 8014036:	2300      	movs	r3, #0
 8014038:	62fb      	str	r3, [r7, #44]	; 0x2c
 801403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403c:	3302      	adds	r3, #2
 801403e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014042:	60fb      	str	r3, [r7, #12]
 8014044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014046:	3301      	adds	r3, #1
 8014048:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801404e:	4618      	mov	r0, r3
 8014050:	f7fd ff03 	bl	8011e5a <get_fat>
 8014054:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014058:	2b01      	cmp	r3, #1
 801405a:	d804      	bhi.n	8014066 <f_lseek+0xa2>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	2202      	movs	r2, #2
 8014060:	755a      	strb	r2, [r3, #21]
 8014062:	2302      	movs	r3, #2
 8014064:	e1ce      	b.n	8014404 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406c:	d104      	bne.n	8014078 <f_lseek+0xb4>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2201      	movs	r2, #1
 8014072:	755a      	strb	r2, [r3, #21]
 8014074:	2301      	movs	r3, #1
 8014076:	e1c5      	b.n	8014404 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	3301      	adds	r3, #1
 801407c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801407e:	429a      	cmp	r2, r3
 8014080:	d0de      	beq.n	8014040 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014082:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	429a      	cmp	r2, r3
 8014088:	d809      	bhi.n	801409e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408c:	1d1a      	adds	r2, r3, #4
 801408e:	627a      	str	r2, [r7, #36]	; 0x24
 8014090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014092:	601a      	str	r2, [r3, #0]
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	1d1a      	adds	r2, r3, #4
 8014098:	627a      	str	r2, [r7, #36]	; 0x24
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801409e:	68bb      	ldr	r3, [r7, #8]
 80140a0:	69db      	ldr	r3, [r3, #28]
 80140a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140a4:	429a      	cmp	r2, r3
 80140a6:	d3c4      	bcc.n	8014032 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80140b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	d803      	bhi.n	80140c0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80140b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ba:	2200      	movs	r2, #0
 80140bc:	601a      	str	r2, [r3, #0]
 80140be:	e19f      	b.n	8014400 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80140c0:	2311      	movs	r3, #17
 80140c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80140c6:	e19b      	b.n	8014400 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	68db      	ldr	r3, [r3, #12]
 80140cc:	683a      	ldr	r2, [r7, #0]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d902      	bls.n	80140d8 <f_lseek+0x114>
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	68db      	ldr	r3, [r3, #12]
 80140d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	683a      	ldr	r2, [r7, #0]
 80140dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	f000 818d 	beq.w	8014400 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	3b01      	subs	r3, #1
 80140ea:	4619      	mov	r1, r3
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f7fe f998 	bl	8012422 <clmt_clust>
 80140f2:	4602      	mov	r2, r0
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	69db      	ldr	r3, [r3, #28]
 80140fe:	4619      	mov	r1, r3
 8014100:	4610      	mov	r0, r2
 8014102:	f7fd fe8b 	bl	8011e1c <clust2sect>
 8014106:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014108:	69bb      	ldr	r3, [r7, #24]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d104      	bne.n	8014118 <f_lseek+0x154>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2202      	movs	r2, #2
 8014112:	755a      	strb	r2, [r3, #21]
 8014114:	2302      	movs	r3, #2
 8014116:	e175      	b.n	8014404 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	3b01      	subs	r3, #1
 801411c:	68ba      	ldr	r2, [r7, #8]
 801411e:	8992      	ldrh	r2, [r2, #12]
 8014120:	fbb3 f3f2 	udiv	r3, r3, r2
 8014124:	68ba      	ldr	r2, [r7, #8]
 8014126:	8952      	ldrh	r2, [r2, #10]
 8014128:	3a01      	subs	r2, #1
 801412a:	4013      	ands	r3, r2
 801412c:	69ba      	ldr	r2, [r7, #24]
 801412e:	4413      	add	r3, r2
 8014130:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	699b      	ldr	r3, [r3, #24]
 8014136:	68ba      	ldr	r2, [r7, #8]
 8014138:	8992      	ldrh	r2, [r2, #12]
 801413a:	fbb3 f1f2 	udiv	r1, r3, r2
 801413e:	fb02 f201 	mul.w	r2, r2, r1
 8014142:	1a9b      	subs	r3, r3, r2
 8014144:	2b00      	cmp	r3, #0
 8014146:	f000 815b 	beq.w	8014400 <f_lseek+0x43c>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	69ba      	ldr	r2, [r7, #24]
 8014150:	429a      	cmp	r2, r3
 8014152:	f000 8155 	beq.w	8014400 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	7d1b      	ldrb	r3, [r3, #20]
 801415a:	b25b      	sxtb	r3, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	da18      	bge.n	8014192 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	7858      	ldrb	r0, [r3, #1]
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	6a1a      	ldr	r2, [r3, #32]
 801416e:	2301      	movs	r3, #1
 8014170:	f7fd fac8 	bl	8011704 <disk_write>
 8014174:	4603      	mov	r3, r0
 8014176:	2b00      	cmp	r3, #0
 8014178:	d004      	beq.n	8014184 <f_lseek+0x1c0>
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	2201      	movs	r2, #1
 801417e:	755a      	strb	r2, [r3, #21]
 8014180:	2301      	movs	r3, #1
 8014182:	e13f      	b.n	8014404 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	7d1b      	ldrb	r3, [r3, #20]
 8014188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801418c:	b2da      	uxtb	r2, r3
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014192:	68bb      	ldr	r3, [r7, #8]
 8014194:	7858      	ldrb	r0, [r3, #1]
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801419c:	2301      	movs	r3, #1
 801419e:	69ba      	ldr	r2, [r7, #24]
 80141a0:	f7fd fa90 	bl	80116c4 <disk_read>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d004      	beq.n	80141b4 <f_lseek+0x1f0>
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	2201      	movs	r2, #1
 80141ae:	755a      	strb	r2, [r3, #21]
 80141b0:	2301      	movs	r3, #1
 80141b2:	e127      	b.n	8014404 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	69ba      	ldr	r2, [r7, #24]
 80141b8:	621a      	str	r2, [r3, #32]
 80141ba:	e121      	b.n	8014400 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d908      	bls.n	80141d8 <f_lseek+0x214>
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	7d1b      	ldrb	r3, [r3, #20]
 80141ca:	f003 0302 	and.w	r3, r3, #2
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	699b      	ldr	r3, [r3, #24]
 80141dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80141de:	2300      	movs	r3, #0
 80141e0:	637b      	str	r3, [r7, #52]	; 0x34
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80141e8:	683b      	ldr	r3, [r7, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f000 80b5 	beq.w	801435a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80141f0:	68bb      	ldr	r3, [r7, #8]
 80141f2:	895b      	ldrh	r3, [r3, #10]
 80141f4:	461a      	mov	r2, r3
 80141f6:	68bb      	ldr	r3, [r7, #8]
 80141f8:	899b      	ldrh	r3, [r3, #12]
 80141fa:	fb03 f302 	mul.w	r3, r3, r2
 80141fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014200:	6a3b      	ldr	r3, [r7, #32]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d01b      	beq.n	801423e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	1e5a      	subs	r2, r3, #1
 801420a:	69fb      	ldr	r3, [r7, #28]
 801420c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014210:	6a3b      	ldr	r3, [r7, #32]
 8014212:	1e59      	subs	r1, r3, #1
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801421a:	429a      	cmp	r2, r3
 801421c:	d30f      	bcc.n	801423e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801421e:	6a3b      	ldr	r3, [r7, #32]
 8014220:	1e5a      	subs	r2, r3, #1
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	425b      	negs	r3, r3
 8014226:	401a      	ands	r2, r3
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	699b      	ldr	r3, [r3, #24]
 8014230:	683a      	ldr	r2, [r7, #0]
 8014232:	1ad3      	subs	r3, r2, r3
 8014234:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	69db      	ldr	r3, [r3, #28]
 801423a:	63bb      	str	r3, [r7, #56]	; 0x38
 801423c:	e022      	b.n	8014284 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	689b      	ldr	r3, [r3, #8]
 8014242:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014246:	2b00      	cmp	r3, #0
 8014248:	d119      	bne.n	801427e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	2100      	movs	r1, #0
 801424e:	4618      	mov	r0, r3
 8014250:	f7fe f84f 	bl	80122f2 <create_chain>
 8014254:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014258:	2b01      	cmp	r3, #1
 801425a:	d104      	bne.n	8014266 <f_lseek+0x2a2>
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2202      	movs	r2, #2
 8014260:	755a      	strb	r2, [r3, #21]
 8014262:	2302      	movs	r3, #2
 8014264:	e0ce      	b.n	8014404 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014268:	f1b3 3fff 	cmp.w	r3, #4294967295
 801426c:	d104      	bne.n	8014278 <f_lseek+0x2b4>
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2201      	movs	r2, #1
 8014272:	755a      	strb	r2, [r3, #21]
 8014274:	2301      	movs	r3, #1
 8014276:	e0c5      	b.n	8014404 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801427c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014282:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014286:	2b00      	cmp	r3, #0
 8014288:	d067      	beq.n	801435a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801428a:	e03a      	b.n	8014302 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	1ad3      	subs	r3, r2, r3
 8014292:	603b      	str	r3, [r7, #0]
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	699a      	ldr	r2, [r3, #24]
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	441a      	add	r2, r3
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	7d1b      	ldrb	r3, [r3, #20]
 80142a4:	f003 0302 	and.w	r3, r3, #2
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d00b      	beq.n	80142c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142b0:	4618      	mov	r0, r3
 80142b2:	f7fe f81e 	bl	80122f2 <create_chain>
 80142b6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80142b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d108      	bne.n	80142d0 <f_lseek+0x30c>
							ofs = 0; break;
 80142be:	2300      	movs	r3, #0
 80142c0:	603b      	str	r3, [r7, #0]
 80142c2:	e022      	b.n	801430a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7fd fdc6 	bl	8011e5a <get_fat>
 80142ce:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80142d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80142d6:	d104      	bne.n	80142e2 <f_lseek+0x31e>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2201      	movs	r2, #1
 80142dc:	755a      	strb	r2, [r3, #21]
 80142de:	2301      	movs	r3, #1
 80142e0:	e090      	b.n	8014404 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	d904      	bls.n	80142f2 <f_lseek+0x32e>
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	69db      	ldr	r3, [r3, #28]
 80142ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d304      	bcc.n	80142fc <f_lseek+0x338>
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	2202      	movs	r2, #2
 80142f6:	755a      	strb	r2, [r3, #21]
 80142f8:	2302      	movs	r3, #2
 80142fa:	e083      	b.n	8014404 <f_lseek+0x440>
					fp->clust = clst;
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014300:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014302:	683a      	ldr	r2, [r7, #0]
 8014304:	69fb      	ldr	r3, [r7, #28]
 8014306:	429a      	cmp	r2, r3
 8014308:	d8c0      	bhi.n	801428c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	699a      	ldr	r2, [r3, #24]
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	441a      	add	r2, r3
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	899b      	ldrh	r3, [r3, #12]
 801431a:	461a      	mov	r2, r3
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014322:	fb02 f201 	mul.w	r2, r2, r1
 8014326:	1a9b      	subs	r3, r3, r2
 8014328:	2b00      	cmp	r3, #0
 801432a:	d016      	beq.n	801435a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014330:	4618      	mov	r0, r3
 8014332:	f7fd fd73 	bl	8011e1c <clust2sect>
 8014336:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801433a:	2b00      	cmp	r3, #0
 801433c:	d104      	bne.n	8014348 <f_lseek+0x384>
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2202      	movs	r2, #2
 8014342:	755a      	strb	r2, [r3, #21]
 8014344:	2302      	movs	r3, #2
 8014346:	e05d      	b.n	8014404 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	899b      	ldrh	r3, [r3, #12]
 801434c:	461a      	mov	r2, r3
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	fbb3 f3f2 	udiv	r3, r3, r2
 8014354:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014356:	4413      	add	r3, r2
 8014358:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	699a      	ldr	r2, [r3, #24]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	429a      	cmp	r2, r3
 8014364:	d90a      	bls.n	801437c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	699a      	ldr	r2, [r3, #24]
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	7d1b      	ldrb	r3, [r3, #20]
 8014372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014376:	b2da      	uxtb	r2, r3
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	699b      	ldr	r3, [r3, #24]
 8014380:	68ba      	ldr	r2, [r7, #8]
 8014382:	8992      	ldrh	r2, [r2, #12]
 8014384:	fbb3 f1f2 	udiv	r1, r3, r2
 8014388:	fb02 f201 	mul.w	r2, r2, r1
 801438c:	1a9b      	subs	r3, r3, r2
 801438e:	2b00      	cmp	r3, #0
 8014390:	d036      	beq.n	8014400 <f_lseek+0x43c>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6a1b      	ldr	r3, [r3, #32]
 8014396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014398:	429a      	cmp	r2, r3
 801439a:	d031      	beq.n	8014400 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	7d1b      	ldrb	r3, [r3, #20]
 80143a0:	b25b      	sxtb	r3, r3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	da18      	bge.n	80143d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	7858      	ldrb	r0, [r3, #1]
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6a1a      	ldr	r2, [r3, #32]
 80143b4:	2301      	movs	r3, #1
 80143b6:	f7fd f9a5 	bl	8011704 <disk_write>
 80143ba:	4603      	mov	r3, r0
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d004      	beq.n	80143ca <f_lseek+0x406>
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2201      	movs	r2, #1
 80143c4:	755a      	strb	r2, [r3, #21]
 80143c6:	2301      	movs	r3, #1
 80143c8:	e01c      	b.n	8014404 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	7d1b      	ldrb	r3, [r3, #20]
 80143ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143d2:	b2da      	uxtb	r2, r3
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80143d8:	68bb      	ldr	r3, [r7, #8]
 80143da:	7858      	ldrb	r0, [r3, #1]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80143e2:	2301      	movs	r3, #1
 80143e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143e6:	f7fd f96d 	bl	80116c4 <disk_read>
 80143ea:	4603      	mov	r3, r0
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d004      	beq.n	80143fa <f_lseek+0x436>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2201      	movs	r2, #1
 80143f4:	755a      	strb	r2, [r3, #21]
 80143f6:	2301      	movs	r3, #1
 80143f8:	e004      	b.n	8014404 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80143fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014400:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014404:	4618      	mov	r0, r3
 8014406:	3740      	adds	r7, #64	; 0x40
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b09e      	sub	sp, #120	; 0x78
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014414:	2300      	movs	r3, #0
 8014416:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014418:	f107 010c 	add.w	r1, r7, #12
 801441c:	1d3b      	adds	r3, r7, #4
 801441e:	2202      	movs	r2, #2
 8014420:	4618      	mov	r0, r3
 8014422:	f7fe fd17 	bl	8012e54 <find_volume>
 8014426:	4603      	mov	r3, r0
 8014428:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014430:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014434:	2b00      	cmp	r3, #0
 8014436:	f040 80a4 	bne.w	8014582 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801443a:	687a      	ldr	r2, [r7, #4]
 801443c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014440:	4611      	mov	r1, r2
 8014442:	4618      	mov	r0, r3
 8014444:	f7fe fbd6 	bl	8012bf4 <follow_path>
 8014448:	4603      	mov	r3, r0
 801444a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801444e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014452:	2b00      	cmp	r3, #0
 8014454:	d108      	bne.n	8014468 <f_unlink+0x5c>
 8014456:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801445a:	f003 0320 	and.w	r3, r3, #32
 801445e:	2b00      	cmp	r3, #0
 8014460:	d002      	beq.n	8014468 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014462:	2306      	movs	r3, #6
 8014464:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014468:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801446c:	2b00      	cmp	r3, #0
 801446e:	d108      	bne.n	8014482 <f_unlink+0x76>
 8014470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014474:	2102      	movs	r1, #2
 8014476:	4618      	mov	r0, r3
 8014478:	f7fd fa82 	bl	8011980 <chk_lock>
 801447c:	4603      	mov	r3, r0
 801447e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014482:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014486:	2b00      	cmp	r3, #0
 8014488:	d17b      	bne.n	8014582 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801448a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801448e:	b25b      	sxtb	r3, r3
 8014490:	2b00      	cmp	r3, #0
 8014492:	da03      	bge.n	801449c <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8014494:	2306      	movs	r3, #6
 8014496:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 801449a:	e008      	b.n	80144ae <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801449c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144a0:	f003 0301 	and.w	r3, r3, #1
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d002      	beq.n	80144ae <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80144a8:	2307      	movs	r3, #7
 80144aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80144ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d13d      	bne.n	8014532 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80144ba:	4611      	mov	r1, r2
 80144bc:	4618      	mov	r0, r3
 80144be:	f7fe f98e 	bl	80127de <ld_clust>
 80144c2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80144c4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80144c8:	f003 0310 	and.w	r3, r3, #16
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d030      	beq.n	8014532 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	699b      	ldr	r3, [r3, #24]
 80144d4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80144d6:	429a      	cmp	r2, r3
 80144d8:	d103      	bne.n	80144e2 <f_unlink+0xd6>
						res = FR_DENIED;
 80144da:	2307      	movs	r3, #7
 80144dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80144e0:	e027      	b.n	8014532 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80144e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80144e8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80144ea:	f107 0310 	add.w	r3, r7, #16
 80144ee:	2100      	movs	r1, #0
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fd ffce 	bl	8012492 <dir_sdi>
 80144f6:	4603      	mov	r3, r0
 80144f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80144fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014500:	2b00      	cmp	r3, #0
 8014502:	d116      	bne.n	8014532 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014504:	f107 0310 	add.w	r3, r7, #16
 8014508:	2100      	movs	r1, #0
 801450a:	4618      	mov	r0, r3
 801450c:	f7fe f9a6 	bl	801285c <dir_read>
 8014510:	4603      	mov	r3, r0
 8014512:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014516:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801451a:	2b00      	cmp	r3, #0
 801451c:	d102      	bne.n	8014524 <f_unlink+0x118>
 801451e:	2307      	movs	r3, #7
 8014520:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014524:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014528:	2b04      	cmp	r3, #4
 801452a:	d102      	bne.n	8014532 <f_unlink+0x126>
 801452c:	2300      	movs	r3, #0
 801452e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014532:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014536:	2b00      	cmp	r3, #0
 8014538:	d123      	bne.n	8014582 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801453a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801453e:	4618      	mov	r0, r3
 8014540:	f7fe fa70 	bl	8012a24 <dir_remove>
 8014544:	4603      	mov	r3, r0
 8014546:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801454a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801454e:	2b00      	cmp	r3, #0
 8014550:	d10c      	bne.n	801456c <f_unlink+0x160>
 8014552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014554:	2b00      	cmp	r3, #0
 8014556:	d009      	beq.n	801456c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014558:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801455c:	2200      	movs	r2, #0
 801455e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014560:	4618      	mov	r0, r3
 8014562:	f7fd fe61 	bl	8012228 <remove_chain>
 8014566:	4603      	mov	r3, r0
 8014568:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801456c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014570:	2b00      	cmp	r3, #0
 8014572:	d106      	bne.n	8014582 <f_unlink+0x176>
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	4618      	mov	r0, r3
 8014578:	f7fd fbe0 	bl	8011d3c <sync_fs>
 801457c:	4603      	mov	r3, r0
 801457e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014582:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014586:	4618      	mov	r0, r3
 8014588:	3778      	adds	r7, #120	; 0x78
 801458a:	46bd      	mov	sp, r7
 801458c:	bd80      	pop	{r7, pc}
	...

08014590 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b096      	sub	sp, #88	; 0x58
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014598:	f107 0108 	add.w	r1, r7, #8
 801459c:	1d3b      	adds	r3, r7, #4
 801459e:	2202      	movs	r2, #2
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7fe fc57 	bl	8012e54 <find_volume>
 80145a6:	4603      	mov	r3, r0
 80145a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80145b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	f040 80fe 	bne.w	80147b6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80145ba:	687a      	ldr	r2, [r7, #4]
 80145bc:	f107 030c 	add.w	r3, r7, #12
 80145c0:	4611      	mov	r1, r2
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7fe fb16 	bl	8012bf4 <follow_path>
 80145c8:	4603      	mov	r3, r0
 80145ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80145ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d102      	bne.n	80145dc <f_mkdir+0x4c>
 80145d6:	2308      	movs	r3, #8
 80145d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80145dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145e0:	2b04      	cmp	r3, #4
 80145e2:	d108      	bne.n	80145f6 <f_mkdir+0x66>
 80145e4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80145e8:	f003 0320 	and.w	r3, r3, #32
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d002      	beq.n	80145f6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80145f0:	2306      	movs	r3, #6
 80145f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80145f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145fa:	2b04      	cmp	r3, #4
 80145fc:	f040 80db 	bne.w	80147b6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014600:	f107 030c 	add.w	r3, r7, #12
 8014604:	2100      	movs	r1, #0
 8014606:	4618      	mov	r0, r3
 8014608:	f7fd fe73 	bl	80122f2 <create_chain>
 801460c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	895b      	ldrh	r3, [r3, #10]
 8014612:	461a      	mov	r2, r3
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	899b      	ldrh	r3, [r3, #12]
 8014618:	fb03 f302 	mul.w	r3, r3, r2
 801461c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801461e:	2300      	movs	r3, #0
 8014620:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014626:	2b00      	cmp	r3, #0
 8014628:	d102      	bne.n	8014630 <f_mkdir+0xa0>
 801462a:	2307      	movs	r3, #7
 801462c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014632:	2b01      	cmp	r3, #1
 8014634:	d102      	bne.n	801463c <f_mkdir+0xac>
 8014636:	2302      	movs	r3, #2
 8014638:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801463c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801463e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014642:	d102      	bne.n	801464a <f_mkdir+0xba>
 8014644:	2301      	movs	r3, #1
 8014646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801464a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801464e:	2b00      	cmp	r3, #0
 8014650:	d106      	bne.n	8014660 <f_mkdir+0xd0>
 8014652:	68bb      	ldr	r3, [r7, #8]
 8014654:	4618      	mov	r0, r3
 8014656:	f7fd faff 	bl	8011c58 <sync_window>
 801465a:	4603      	mov	r3, r0
 801465c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014660:	4b58      	ldr	r3, [pc, #352]	; (80147c4 <f_mkdir+0x234>)
 8014662:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014668:	2b00      	cmp	r3, #0
 801466a:	d16c      	bne.n	8014746 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014670:	4618      	mov	r0, r3
 8014672:	f7fd fbd3 	bl	8011e1c <clust2sect>
 8014676:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	3338      	adds	r3, #56	; 0x38
 801467c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801467e:	68bb      	ldr	r3, [r7, #8]
 8014680:	899b      	ldrh	r3, [r3, #12]
 8014682:	461a      	mov	r2, r3
 8014684:	2100      	movs	r1, #0
 8014686:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014688:	f7fd f91d 	bl	80118c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801468c:	220b      	movs	r2, #11
 801468e:	2120      	movs	r1, #32
 8014690:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014692:	f7fd f918 	bl	80118c6 <mem_set>
					dir[DIR_Name] = '.';
 8014696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014698:	222e      	movs	r2, #46	; 0x2e
 801469a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801469c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801469e:	330b      	adds	r3, #11
 80146a0:	2210      	movs	r2, #16
 80146a2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80146a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a6:	3316      	adds	r3, #22
 80146a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fd f8be 	bl	801182c <st_dword>
					st_clust(fs, dir, dcl);
 80146b0:	68bb      	ldr	r3, [r7, #8]
 80146b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80146b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fe f8b0 	bl	801281c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80146bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146be:	3320      	adds	r3, #32
 80146c0:	2220      	movs	r2, #32
 80146c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7fd f8dd 	bl	8011884 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80146ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146cc:	3321      	adds	r3, #33	; 0x21
 80146ce:	222e      	movs	r2, #46	; 0x2e
 80146d0:	701a      	strb	r2, [r3, #0]
 80146d2:	697b      	ldr	r3, [r7, #20]
 80146d4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b03      	cmp	r3, #3
 80146dc:	d106      	bne.n	80146ec <f_mkdir+0x15c>
 80146de:	68bb      	ldr	r3, [r7, #8]
 80146e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146e4:	429a      	cmp	r2, r3
 80146e6:	d101      	bne.n	80146ec <f_mkdir+0x15c>
 80146e8:	2300      	movs	r3, #0
 80146ea:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80146ec:	68b8      	ldr	r0, [r7, #8]
 80146ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146f0:	3320      	adds	r3, #32
 80146f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146f4:	4619      	mov	r1, r3
 80146f6:	f7fe f891 	bl	801281c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	895b      	ldrh	r3, [r3, #10]
 80146fe:	653b      	str	r3, [r7, #80]	; 0x50
 8014700:	e01c      	b.n	801473c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014704:	1c5a      	adds	r2, r3, #1
 8014706:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014708:	68ba      	ldr	r2, [r7, #8]
 801470a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801470c:	68bb      	ldr	r3, [r7, #8]
 801470e:	2201      	movs	r2, #1
 8014710:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	4618      	mov	r0, r3
 8014716:	f7fd fa9f 	bl	8011c58 <sync_window>
 801471a:	4603      	mov	r3, r0
 801471c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014724:	2b00      	cmp	r3, #0
 8014726:	d10d      	bne.n	8014744 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	899b      	ldrh	r3, [r3, #12]
 801472c:	461a      	mov	r2, r3
 801472e:	2100      	movs	r1, #0
 8014730:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014732:	f7fd f8c8 	bl	80118c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014738:	3b01      	subs	r3, #1
 801473a:	653b      	str	r3, [r7, #80]	; 0x50
 801473c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1df      	bne.n	8014702 <f_mkdir+0x172>
 8014742:	e000      	b.n	8014746 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014744:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014746:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801474a:	2b00      	cmp	r3, #0
 801474c:	d107      	bne.n	801475e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801474e:	f107 030c 	add.w	r3, r7, #12
 8014752:	4618      	mov	r0, r3
 8014754:	f7fe f934 	bl	80129c0 <dir_register>
 8014758:	4603      	mov	r3, r0
 801475a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801475e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014762:	2b00      	cmp	r3, #0
 8014764:	d120      	bne.n	80147a8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014768:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801476a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801476c:	3316      	adds	r3, #22
 801476e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014770:	4618      	mov	r0, r3
 8014772:	f7fd f85b 	bl	801182c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014776:	68bb      	ldr	r3, [r7, #8]
 8014778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801477a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801477c:	4618      	mov	r0, r3
 801477e:	f7fe f84d 	bl	801281c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014784:	330b      	adds	r3, #11
 8014786:	2210      	movs	r2, #16
 8014788:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801478a:	68bb      	ldr	r3, [r7, #8]
 801478c:	2201      	movs	r2, #1
 801478e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014790:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014794:	2b00      	cmp	r3, #0
 8014796:	d10e      	bne.n	80147b6 <f_mkdir+0x226>
					res = sync_fs(fs);
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	4618      	mov	r0, r3
 801479c:	f7fd face 	bl	8011d3c <sync_fs>
 80147a0:	4603      	mov	r3, r0
 80147a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80147a6:	e006      	b.n	80147b6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80147a8:	f107 030c 	add.w	r3, r7, #12
 80147ac:	2200      	movs	r2, #0
 80147ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fd fd39 	bl	8012228 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80147b6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80147ba:	4618      	mov	r0, r3
 80147bc:	3758      	adds	r7, #88	; 0x58
 80147be:	46bd      	mov	sp, r7
 80147c0:	bd80      	pop	{r7, pc}
 80147c2:	bf00      	nop
 80147c4:	274a0000 	.word	0x274a0000

080147c8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80147c8:	b580      	push	{r7, lr}
 80147ca:	b088      	sub	sp, #32
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	60f8      	str	r0, [r7, #12]
 80147d0:	60b9      	str	r1, [r7, #8]
 80147d2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80147d4:	2300      	movs	r3, #0
 80147d6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80147dc:	e017      	b.n	801480e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80147de:	f107 0310 	add.w	r3, r7, #16
 80147e2:	f107 0114 	add.w	r1, r7, #20
 80147e6:	2201      	movs	r2, #1
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f7ff f803 	bl	80137f4 <f_read>
		if (rc != 1) break;
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	2b01      	cmp	r3, #1
 80147f2:	d112      	bne.n	801481a <f_gets+0x52>
		c = s[0];
 80147f4:	7d3b      	ldrb	r3, [r7, #20]
 80147f6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 80147f8:	69bb      	ldr	r3, [r7, #24]
 80147fa:	1c5a      	adds	r2, r3, #1
 80147fc:	61ba      	str	r2, [r7, #24]
 80147fe:	7dfa      	ldrb	r2, [r7, #23]
 8014800:	701a      	strb	r2, [r3, #0]
		n++;
 8014802:	69fb      	ldr	r3, [r7, #28]
 8014804:	3301      	adds	r3, #1
 8014806:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014808:	7dfb      	ldrb	r3, [r7, #23]
 801480a:	2b0a      	cmp	r3, #10
 801480c:	d007      	beq.n	801481e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	3b01      	subs	r3, #1
 8014812:	69fa      	ldr	r2, [r7, #28]
 8014814:	429a      	cmp	r2, r3
 8014816:	dbe2      	blt.n	80147de <f_gets+0x16>
 8014818:	e002      	b.n	8014820 <f_gets+0x58>
		if (rc != 1) break;
 801481a:	bf00      	nop
 801481c:	e000      	b.n	8014820 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801481e:	bf00      	nop
	}
	*p = 0;
 8014820:	69bb      	ldr	r3, [r7, #24]
 8014822:	2200      	movs	r2, #0
 8014824:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014826:	69fb      	ldr	r3, [r7, #28]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d001      	beq.n	8014830 <f_gets+0x68>
 801482c:	68fb      	ldr	r3, [r7, #12]
 801482e:	e000      	b.n	8014832 <f_gets+0x6a>
 8014830:	2300      	movs	r3, #0
}
 8014832:	4618      	mov	r0, r3
 8014834:	3720      	adds	r7, #32
 8014836:	46bd      	mov	sp, r7
 8014838:	bd80      	pop	{r7, pc}
	...

0801483c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801483c:	b480      	push	{r7}
 801483e:	b087      	sub	sp, #28
 8014840:	af00      	add	r7, sp, #0
 8014842:	60f8      	str	r0, [r7, #12]
 8014844:	60b9      	str	r1, [r7, #8]
 8014846:	4613      	mov	r3, r2
 8014848:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801484a:	2301      	movs	r3, #1
 801484c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801484e:	2300      	movs	r3, #0
 8014850:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014852:	4b1f      	ldr	r3, [pc, #124]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 8014854:	7a5b      	ldrb	r3, [r3, #9]
 8014856:	b2db      	uxtb	r3, r3
 8014858:	2b00      	cmp	r3, #0
 801485a:	d131      	bne.n	80148c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801485c:	4b1c      	ldr	r3, [pc, #112]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 801485e:	7a5b      	ldrb	r3, [r3, #9]
 8014860:	b2db      	uxtb	r3, r3
 8014862:	461a      	mov	r2, r3
 8014864:	4b1a      	ldr	r3, [pc, #104]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 8014866:	2100      	movs	r1, #0
 8014868:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801486a:	4b19      	ldr	r3, [pc, #100]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 801486c:	7a5b      	ldrb	r3, [r3, #9]
 801486e:	b2db      	uxtb	r3, r3
 8014870:	4a17      	ldr	r2, [pc, #92]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 8014872:	009b      	lsls	r3, r3, #2
 8014874:	4413      	add	r3, r2
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801487a:	4b15      	ldr	r3, [pc, #84]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 801487c:	7a5b      	ldrb	r3, [r3, #9]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	461a      	mov	r2, r3
 8014882:	4b13      	ldr	r3, [pc, #76]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 8014884:	4413      	add	r3, r2
 8014886:	79fa      	ldrb	r2, [r7, #7]
 8014888:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801488a:	4b11      	ldr	r3, [pc, #68]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 801488c:	7a5b      	ldrb	r3, [r3, #9]
 801488e:	b2db      	uxtb	r3, r3
 8014890:	1c5a      	adds	r2, r3, #1
 8014892:	b2d1      	uxtb	r1, r2
 8014894:	4a0e      	ldr	r2, [pc, #56]	; (80148d0 <FATFS_LinkDriverEx+0x94>)
 8014896:	7251      	strb	r1, [r2, #9]
 8014898:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801489a:	7dbb      	ldrb	r3, [r7, #22]
 801489c:	3330      	adds	r3, #48	; 0x30
 801489e:	b2da      	uxtb	r2, r3
 80148a0:	68bb      	ldr	r3, [r7, #8]
 80148a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	3301      	adds	r3, #1
 80148a8:	223a      	movs	r2, #58	; 0x3a
 80148aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80148ac:	68bb      	ldr	r3, [r7, #8]
 80148ae:	3302      	adds	r3, #2
 80148b0:	222f      	movs	r2, #47	; 0x2f
 80148b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80148b4:	68bb      	ldr	r3, [r7, #8]
 80148b6:	3303      	adds	r3, #3
 80148b8:	2200      	movs	r2, #0
 80148ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80148bc:	2300      	movs	r3, #0
 80148be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80148c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80148c2:	4618      	mov	r0, r3
 80148c4:	371c      	adds	r7, #28
 80148c6:	46bd      	mov	sp, r7
 80148c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148cc:	4770      	bx	lr
 80148ce:	bf00      	nop
 80148d0:	200452fc 	.word	0x200452fc

080148d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80148de:	2200      	movs	r2, #0
 80148e0:	6839      	ldr	r1, [r7, #0]
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7ff ffaa 	bl	801483c <FATFS_LinkDriverEx>
 80148e8:	4603      	mov	r3, r0
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <__cxa_guard_acquire>:
 80148f2:	6803      	ldr	r3, [r0, #0]
 80148f4:	07db      	lsls	r3, r3, #31
 80148f6:	d406      	bmi.n	8014906 <__cxa_guard_acquire+0x14>
 80148f8:	7843      	ldrb	r3, [r0, #1]
 80148fa:	b103      	cbz	r3, 80148fe <__cxa_guard_acquire+0xc>
 80148fc:	deff      	udf	#255	; 0xff
 80148fe:	2301      	movs	r3, #1
 8014900:	7043      	strb	r3, [r0, #1]
 8014902:	4618      	mov	r0, r3
 8014904:	4770      	bx	lr
 8014906:	2000      	movs	r0, #0
 8014908:	4770      	bx	lr

0801490a <__cxa_guard_release>:
 801490a:	2301      	movs	r3, #1
 801490c:	6003      	str	r3, [r0, #0]
 801490e:	4770      	bx	lr

08014910 <__errno>:
 8014910:	4b01      	ldr	r3, [pc, #4]	; (8014918 <__errno+0x8>)
 8014912:	6818      	ldr	r0, [r3, #0]
 8014914:	4770      	bx	lr
 8014916:	bf00      	nop
 8014918:	2000000c 	.word	0x2000000c

0801491c <__libc_init_array>:
 801491c:	b570      	push	{r4, r5, r6, lr}
 801491e:	4e0d      	ldr	r6, [pc, #52]	; (8014954 <__libc_init_array+0x38>)
 8014920:	4c0d      	ldr	r4, [pc, #52]	; (8014958 <__libc_init_array+0x3c>)
 8014922:	1ba4      	subs	r4, r4, r6
 8014924:	10a4      	asrs	r4, r4, #2
 8014926:	2500      	movs	r5, #0
 8014928:	42a5      	cmp	r5, r4
 801492a:	d109      	bne.n	8014940 <__libc_init_array+0x24>
 801492c:	4e0b      	ldr	r6, [pc, #44]	; (801495c <__libc_init_array+0x40>)
 801492e:	4c0c      	ldr	r4, [pc, #48]	; (8014960 <__libc_init_array+0x44>)
 8014930:	f004 f9e8 	bl	8018d04 <_init>
 8014934:	1ba4      	subs	r4, r4, r6
 8014936:	10a4      	asrs	r4, r4, #2
 8014938:	2500      	movs	r5, #0
 801493a:	42a5      	cmp	r5, r4
 801493c:	d105      	bne.n	801494a <__libc_init_array+0x2e>
 801493e:	bd70      	pop	{r4, r5, r6, pc}
 8014940:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014944:	4798      	blx	r3
 8014946:	3501      	adds	r5, #1
 8014948:	e7ee      	b.n	8014928 <__libc_init_array+0xc>
 801494a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801494e:	4798      	blx	r3
 8014950:	3501      	adds	r5, #1
 8014952:	e7f2      	b.n	801493a <__libc_init_array+0x1e>
 8014954:	0801955c 	.word	0x0801955c
 8014958:	0801955c 	.word	0x0801955c
 801495c:	0801955c 	.word	0x0801955c
 8014960:	08019564 	.word	0x08019564

08014964 <memset>:
 8014964:	4402      	add	r2, r0
 8014966:	4603      	mov	r3, r0
 8014968:	4293      	cmp	r3, r2
 801496a:	d100      	bne.n	801496e <memset+0xa>
 801496c:	4770      	bx	lr
 801496e:	f803 1b01 	strb.w	r1, [r3], #1
 8014972:	e7f9      	b.n	8014968 <memset+0x4>

08014974 <__cvt>:
 8014974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014978:	ec55 4b10 	vmov	r4, r5, d0
 801497c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801497e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014982:	2d00      	cmp	r5, #0
 8014984:	460e      	mov	r6, r1
 8014986:	4691      	mov	r9, r2
 8014988:	4619      	mov	r1, r3
 801498a:	bfb8      	it	lt
 801498c:	4622      	movlt	r2, r4
 801498e:	462b      	mov	r3, r5
 8014990:	f027 0720 	bic.w	r7, r7, #32
 8014994:	bfbb      	ittet	lt
 8014996:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801499a:	461d      	movlt	r5, r3
 801499c:	2300      	movge	r3, #0
 801499e:	232d      	movlt	r3, #45	; 0x2d
 80149a0:	bfb8      	it	lt
 80149a2:	4614      	movlt	r4, r2
 80149a4:	2f46      	cmp	r7, #70	; 0x46
 80149a6:	700b      	strb	r3, [r1, #0]
 80149a8:	d004      	beq.n	80149b4 <__cvt+0x40>
 80149aa:	2f45      	cmp	r7, #69	; 0x45
 80149ac:	d100      	bne.n	80149b0 <__cvt+0x3c>
 80149ae:	3601      	adds	r6, #1
 80149b0:	2102      	movs	r1, #2
 80149b2:	e000      	b.n	80149b6 <__cvt+0x42>
 80149b4:	2103      	movs	r1, #3
 80149b6:	ab03      	add	r3, sp, #12
 80149b8:	9301      	str	r3, [sp, #4]
 80149ba:	ab02      	add	r3, sp, #8
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	4632      	mov	r2, r6
 80149c0:	4653      	mov	r3, sl
 80149c2:	ec45 4b10 	vmov	d0, r4, r5
 80149c6:	f001 fdff 	bl	80165c8 <_dtoa_r>
 80149ca:	2f47      	cmp	r7, #71	; 0x47
 80149cc:	4680      	mov	r8, r0
 80149ce:	d102      	bne.n	80149d6 <__cvt+0x62>
 80149d0:	f019 0f01 	tst.w	r9, #1
 80149d4:	d026      	beq.n	8014a24 <__cvt+0xb0>
 80149d6:	2f46      	cmp	r7, #70	; 0x46
 80149d8:	eb08 0906 	add.w	r9, r8, r6
 80149dc:	d111      	bne.n	8014a02 <__cvt+0x8e>
 80149de:	f898 3000 	ldrb.w	r3, [r8]
 80149e2:	2b30      	cmp	r3, #48	; 0x30
 80149e4:	d10a      	bne.n	80149fc <__cvt+0x88>
 80149e6:	2200      	movs	r2, #0
 80149e8:	2300      	movs	r3, #0
 80149ea:	4620      	mov	r0, r4
 80149ec:	4629      	mov	r1, r5
 80149ee:	f7ec f883 	bl	8000af8 <__aeabi_dcmpeq>
 80149f2:	b918      	cbnz	r0, 80149fc <__cvt+0x88>
 80149f4:	f1c6 0601 	rsb	r6, r6, #1
 80149f8:	f8ca 6000 	str.w	r6, [sl]
 80149fc:	f8da 3000 	ldr.w	r3, [sl]
 8014a00:	4499      	add	r9, r3
 8014a02:	2200      	movs	r2, #0
 8014a04:	2300      	movs	r3, #0
 8014a06:	4620      	mov	r0, r4
 8014a08:	4629      	mov	r1, r5
 8014a0a:	f7ec f875 	bl	8000af8 <__aeabi_dcmpeq>
 8014a0e:	b938      	cbnz	r0, 8014a20 <__cvt+0xac>
 8014a10:	2230      	movs	r2, #48	; 0x30
 8014a12:	9b03      	ldr	r3, [sp, #12]
 8014a14:	454b      	cmp	r3, r9
 8014a16:	d205      	bcs.n	8014a24 <__cvt+0xb0>
 8014a18:	1c59      	adds	r1, r3, #1
 8014a1a:	9103      	str	r1, [sp, #12]
 8014a1c:	701a      	strb	r2, [r3, #0]
 8014a1e:	e7f8      	b.n	8014a12 <__cvt+0x9e>
 8014a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a24:	9b03      	ldr	r3, [sp, #12]
 8014a26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a28:	eba3 0308 	sub.w	r3, r3, r8
 8014a2c:	4640      	mov	r0, r8
 8014a2e:	6013      	str	r3, [r2, #0]
 8014a30:	b004      	add	sp, #16
 8014a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014a36 <__exponent>:
 8014a36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a38:	2900      	cmp	r1, #0
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	bfba      	itte	lt
 8014a3e:	4249      	neglt	r1, r1
 8014a40:	232d      	movlt	r3, #45	; 0x2d
 8014a42:	232b      	movge	r3, #43	; 0x2b
 8014a44:	2909      	cmp	r1, #9
 8014a46:	f804 2b02 	strb.w	r2, [r4], #2
 8014a4a:	7043      	strb	r3, [r0, #1]
 8014a4c:	dd20      	ble.n	8014a90 <__exponent+0x5a>
 8014a4e:	f10d 0307 	add.w	r3, sp, #7
 8014a52:	461f      	mov	r7, r3
 8014a54:	260a      	movs	r6, #10
 8014a56:	fb91 f5f6 	sdiv	r5, r1, r6
 8014a5a:	fb06 1115 	mls	r1, r6, r5, r1
 8014a5e:	3130      	adds	r1, #48	; 0x30
 8014a60:	2d09      	cmp	r5, #9
 8014a62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014a66:	f103 32ff 	add.w	r2, r3, #4294967295
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	dc09      	bgt.n	8014a82 <__exponent+0x4c>
 8014a6e:	3130      	adds	r1, #48	; 0x30
 8014a70:	3b02      	subs	r3, #2
 8014a72:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014a76:	42bb      	cmp	r3, r7
 8014a78:	4622      	mov	r2, r4
 8014a7a:	d304      	bcc.n	8014a86 <__exponent+0x50>
 8014a7c:	1a10      	subs	r0, r2, r0
 8014a7e:	b003      	add	sp, #12
 8014a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a82:	4613      	mov	r3, r2
 8014a84:	e7e7      	b.n	8014a56 <__exponent+0x20>
 8014a86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a8a:	f804 2b01 	strb.w	r2, [r4], #1
 8014a8e:	e7f2      	b.n	8014a76 <__exponent+0x40>
 8014a90:	2330      	movs	r3, #48	; 0x30
 8014a92:	4419      	add	r1, r3
 8014a94:	7083      	strb	r3, [r0, #2]
 8014a96:	1d02      	adds	r2, r0, #4
 8014a98:	70c1      	strb	r1, [r0, #3]
 8014a9a:	e7ef      	b.n	8014a7c <__exponent+0x46>

08014a9c <_printf_float>:
 8014a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aa0:	b08d      	sub	sp, #52	; 0x34
 8014aa2:	460c      	mov	r4, r1
 8014aa4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014aa8:	4616      	mov	r6, r2
 8014aaa:	461f      	mov	r7, r3
 8014aac:	4605      	mov	r5, r0
 8014aae:	f002 fe7d 	bl	80177ac <_localeconv_r>
 8014ab2:	6803      	ldr	r3, [r0, #0]
 8014ab4:	9304      	str	r3, [sp, #16]
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7eb fba2 	bl	8000200 <strlen>
 8014abc:	2300      	movs	r3, #0
 8014abe:	930a      	str	r3, [sp, #40]	; 0x28
 8014ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8014ac4:	9005      	str	r0, [sp, #20]
 8014ac6:	3307      	adds	r3, #7
 8014ac8:	f023 0307 	bic.w	r3, r3, #7
 8014acc:	f103 0208 	add.w	r2, r3, #8
 8014ad0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014ad4:	f8d4 b000 	ldr.w	fp, [r4]
 8014ad8:	f8c8 2000 	str.w	r2, [r8]
 8014adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014ae4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014ae8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014aec:	9307      	str	r3, [sp, #28]
 8014aee:	f8cd 8018 	str.w	r8, [sp, #24]
 8014af2:	f04f 32ff 	mov.w	r2, #4294967295
 8014af6:	4ba7      	ldr	r3, [pc, #668]	; (8014d94 <_printf_float+0x2f8>)
 8014af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014afc:	f7ec f82e 	bl	8000b5c <__aeabi_dcmpun>
 8014b00:	bb70      	cbnz	r0, 8014b60 <_printf_float+0xc4>
 8014b02:	f04f 32ff 	mov.w	r2, #4294967295
 8014b06:	4ba3      	ldr	r3, [pc, #652]	; (8014d94 <_printf_float+0x2f8>)
 8014b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b0c:	f7ec f808 	bl	8000b20 <__aeabi_dcmple>
 8014b10:	bb30      	cbnz	r0, 8014b60 <_printf_float+0xc4>
 8014b12:	2200      	movs	r2, #0
 8014b14:	2300      	movs	r3, #0
 8014b16:	4640      	mov	r0, r8
 8014b18:	4649      	mov	r1, r9
 8014b1a:	f7eb fff7 	bl	8000b0c <__aeabi_dcmplt>
 8014b1e:	b110      	cbz	r0, 8014b26 <_printf_float+0x8a>
 8014b20:	232d      	movs	r3, #45	; 0x2d
 8014b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b26:	4a9c      	ldr	r2, [pc, #624]	; (8014d98 <_printf_float+0x2fc>)
 8014b28:	4b9c      	ldr	r3, [pc, #624]	; (8014d9c <_printf_float+0x300>)
 8014b2a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b2e:	bf8c      	ite	hi
 8014b30:	4690      	movhi	r8, r2
 8014b32:	4698      	movls	r8, r3
 8014b34:	2303      	movs	r3, #3
 8014b36:	f02b 0204 	bic.w	r2, fp, #4
 8014b3a:	6123      	str	r3, [r4, #16]
 8014b3c:	6022      	str	r2, [r4, #0]
 8014b3e:	f04f 0900 	mov.w	r9, #0
 8014b42:	9700      	str	r7, [sp, #0]
 8014b44:	4633      	mov	r3, r6
 8014b46:	aa0b      	add	r2, sp, #44	; 0x2c
 8014b48:	4621      	mov	r1, r4
 8014b4a:	4628      	mov	r0, r5
 8014b4c:	f000 f9e6 	bl	8014f1c <_printf_common>
 8014b50:	3001      	adds	r0, #1
 8014b52:	f040 808d 	bne.w	8014c70 <_printf_float+0x1d4>
 8014b56:	f04f 30ff 	mov.w	r0, #4294967295
 8014b5a:	b00d      	add	sp, #52	; 0x34
 8014b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b60:	4642      	mov	r2, r8
 8014b62:	464b      	mov	r3, r9
 8014b64:	4640      	mov	r0, r8
 8014b66:	4649      	mov	r1, r9
 8014b68:	f7eb fff8 	bl	8000b5c <__aeabi_dcmpun>
 8014b6c:	b110      	cbz	r0, 8014b74 <_printf_float+0xd8>
 8014b6e:	4a8c      	ldr	r2, [pc, #560]	; (8014da0 <_printf_float+0x304>)
 8014b70:	4b8c      	ldr	r3, [pc, #560]	; (8014da4 <_printf_float+0x308>)
 8014b72:	e7da      	b.n	8014b2a <_printf_float+0x8e>
 8014b74:	6861      	ldr	r1, [r4, #4]
 8014b76:	1c4b      	adds	r3, r1, #1
 8014b78:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014b7c:	a80a      	add	r0, sp, #40	; 0x28
 8014b7e:	d13e      	bne.n	8014bfe <_printf_float+0x162>
 8014b80:	2306      	movs	r3, #6
 8014b82:	6063      	str	r3, [r4, #4]
 8014b84:	2300      	movs	r3, #0
 8014b86:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014b8a:	ab09      	add	r3, sp, #36	; 0x24
 8014b8c:	9300      	str	r3, [sp, #0]
 8014b8e:	ec49 8b10 	vmov	d0, r8, r9
 8014b92:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014b96:	6022      	str	r2, [r4, #0]
 8014b98:	f8cd a004 	str.w	sl, [sp, #4]
 8014b9c:	6861      	ldr	r1, [r4, #4]
 8014b9e:	4628      	mov	r0, r5
 8014ba0:	f7ff fee8 	bl	8014974 <__cvt>
 8014ba4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014ba8:	2b47      	cmp	r3, #71	; 0x47
 8014baa:	4680      	mov	r8, r0
 8014bac:	d109      	bne.n	8014bc2 <_printf_float+0x126>
 8014bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bb0:	1cd8      	adds	r0, r3, #3
 8014bb2:	db02      	blt.n	8014bba <_printf_float+0x11e>
 8014bb4:	6862      	ldr	r2, [r4, #4]
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	dd47      	ble.n	8014c4a <_printf_float+0x1ae>
 8014bba:	f1aa 0a02 	sub.w	sl, sl, #2
 8014bbe:	fa5f fa8a 	uxtb.w	sl, sl
 8014bc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014bc6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014bc8:	d824      	bhi.n	8014c14 <_printf_float+0x178>
 8014bca:	3901      	subs	r1, #1
 8014bcc:	4652      	mov	r2, sl
 8014bce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014bd2:	9109      	str	r1, [sp, #36]	; 0x24
 8014bd4:	f7ff ff2f 	bl	8014a36 <__exponent>
 8014bd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014bda:	1813      	adds	r3, r2, r0
 8014bdc:	2a01      	cmp	r2, #1
 8014bde:	4681      	mov	r9, r0
 8014be0:	6123      	str	r3, [r4, #16]
 8014be2:	dc02      	bgt.n	8014bea <_printf_float+0x14e>
 8014be4:	6822      	ldr	r2, [r4, #0]
 8014be6:	07d1      	lsls	r1, r2, #31
 8014be8:	d501      	bpl.n	8014bee <_printf_float+0x152>
 8014bea:	3301      	adds	r3, #1
 8014bec:	6123      	str	r3, [r4, #16]
 8014bee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d0a5      	beq.n	8014b42 <_printf_float+0xa6>
 8014bf6:	232d      	movs	r3, #45	; 0x2d
 8014bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014bfc:	e7a1      	b.n	8014b42 <_printf_float+0xa6>
 8014bfe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014c02:	f000 8177 	beq.w	8014ef4 <_printf_float+0x458>
 8014c06:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014c0a:	d1bb      	bne.n	8014b84 <_printf_float+0xe8>
 8014c0c:	2900      	cmp	r1, #0
 8014c0e:	d1b9      	bne.n	8014b84 <_printf_float+0xe8>
 8014c10:	2301      	movs	r3, #1
 8014c12:	e7b6      	b.n	8014b82 <_printf_float+0xe6>
 8014c14:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014c18:	d119      	bne.n	8014c4e <_printf_float+0x1b2>
 8014c1a:	2900      	cmp	r1, #0
 8014c1c:	6863      	ldr	r3, [r4, #4]
 8014c1e:	dd0c      	ble.n	8014c3a <_printf_float+0x19e>
 8014c20:	6121      	str	r1, [r4, #16]
 8014c22:	b913      	cbnz	r3, 8014c2a <_printf_float+0x18e>
 8014c24:	6822      	ldr	r2, [r4, #0]
 8014c26:	07d2      	lsls	r2, r2, #31
 8014c28:	d502      	bpl.n	8014c30 <_printf_float+0x194>
 8014c2a:	3301      	adds	r3, #1
 8014c2c:	440b      	add	r3, r1
 8014c2e:	6123      	str	r3, [r4, #16]
 8014c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c32:	65a3      	str	r3, [r4, #88]	; 0x58
 8014c34:	f04f 0900 	mov.w	r9, #0
 8014c38:	e7d9      	b.n	8014bee <_printf_float+0x152>
 8014c3a:	b913      	cbnz	r3, 8014c42 <_printf_float+0x1a6>
 8014c3c:	6822      	ldr	r2, [r4, #0]
 8014c3e:	07d0      	lsls	r0, r2, #31
 8014c40:	d501      	bpl.n	8014c46 <_printf_float+0x1aa>
 8014c42:	3302      	adds	r3, #2
 8014c44:	e7f3      	b.n	8014c2e <_printf_float+0x192>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e7f1      	b.n	8014c2e <_printf_float+0x192>
 8014c4a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014c4e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014c52:	4293      	cmp	r3, r2
 8014c54:	db05      	blt.n	8014c62 <_printf_float+0x1c6>
 8014c56:	6822      	ldr	r2, [r4, #0]
 8014c58:	6123      	str	r3, [r4, #16]
 8014c5a:	07d1      	lsls	r1, r2, #31
 8014c5c:	d5e8      	bpl.n	8014c30 <_printf_float+0x194>
 8014c5e:	3301      	adds	r3, #1
 8014c60:	e7e5      	b.n	8014c2e <_printf_float+0x192>
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	bfd4      	ite	le
 8014c66:	f1c3 0302 	rsble	r3, r3, #2
 8014c6a:	2301      	movgt	r3, #1
 8014c6c:	4413      	add	r3, r2
 8014c6e:	e7de      	b.n	8014c2e <_printf_float+0x192>
 8014c70:	6823      	ldr	r3, [r4, #0]
 8014c72:	055a      	lsls	r2, r3, #21
 8014c74:	d407      	bmi.n	8014c86 <_printf_float+0x1ea>
 8014c76:	6923      	ldr	r3, [r4, #16]
 8014c78:	4642      	mov	r2, r8
 8014c7a:	4631      	mov	r1, r6
 8014c7c:	4628      	mov	r0, r5
 8014c7e:	47b8      	blx	r7
 8014c80:	3001      	adds	r0, #1
 8014c82:	d12b      	bne.n	8014cdc <_printf_float+0x240>
 8014c84:	e767      	b.n	8014b56 <_printf_float+0xba>
 8014c86:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c8a:	f240 80dc 	bls.w	8014e46 <_printf_float+0x3aa>
 8014c8e:	2200      	movs	r2, #0
 8014c90:	2300      	movs	r3, #0
 8014c92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014c96:	f7eb ff2f 	bl	8000af8 <__aeabi_dcmpeq>
 8014c9a:	2800      	cmp	r0, #0
 8014c9c:	d033      	beq.n	8014d06 <_printf_float+0x26a>
 8014c9e:	2301      	movs	r3, #1
 8014ca0:	4a41      	ldr	r2, [pc, #260]	; (8014da8 <_printf_float+0x30c>)
 8014ca2:	4631      	mov	r1, r6
 8014ca4:	4628      	mov	r0, r5
 8014ca6:	47b8      	blx	r7
 8014ca8:	3001      	adds	r0, #1
 8014caa:	f43f af54 	beq.w	8014b56 <_printf_float+0xba>
 8014cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	db02      	blt.n	8014cbc <_printf_float+0x220>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	07d8      	lsls	r0, r3, #31
 8014cba:	d50f      	bpl.n	8014cdc <_printf_float+0x240>
 8014cbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014cc0:	4631      	mov	r1, r6
 8014cc2:	4628      	mov	r0, r5
 8014cc4:	47b8      	blx	r7
 8014cc6:	3001      	adds	r0, #1
 8014cc8:	f43f af45 	beq.w	8014b56 <_printf_float+0xba>
 8014ccc:	f04f 0800 	mov.w	r8, #0
 8014cd0:	f104 091a 	add.w	r9, r4, #26
 8014cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cd6:	3b01      	subs	r3, #1
 8014cd8:	4543      	cmp	r3, r8
 8014cda:	dc09      	bgt.n	8014cf0 <_printf_float+0x254>
 8014cdc:	6823      	ldr	r3, [r4, #0]
 8014cde:	079b      	lsls	r3, r3, #30
 8014ce0:	f100 8103 	bmi.w	8014eea <_printf_float+0x44e>
 8014ce4:	68e0      	ldr	r0, [r4, #12]
 8014ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ce8:	4298      	cmp	r0, r3
 8014cea:	bfb8      	it	lt
 8014cec:	4618      	movlt	r0, r3
 8014cee:	e734      	b.n	8014b5a <_printf_float+0xbe>
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	464a      	mov	r2, r9
 8014cf4:	4631      	mov	r1, r6
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	47b8      	blx	r7
 8014cfa:	3001      	adds	r0, #1
 8014cfc:	f43f af2b 	beq.w	8014b56 <_printf_float+0xba>
 8014d00:	f108 0801 	add.w	r8, r8, #1
 8014d04:	e7e6      	b.n	8014cd4 <_printf_float+0x238>
 8014d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	dc2b      	bgt.n	8014d64 <_printf_float+0x2c8>
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	4a26      	ldr	r2, [pc, #152]	; (8014da8 <_printf_float+0x30c>)
 8014d10:	4631      	mov	r1, r6
 8014d12:	4628      	mov	r0, r5
 8014d14:	47b8      	blx	r7
 8014d16:	3001      	adds	r0, #1
 8014d18:	f43f af1d 	beq.w	8014b56 <_printf_float+0xba>
 8014d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d1e:	b923      	cbnz	r3, 8014d2a <_printf_float+0x28e>
 8014d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d22:	b913      	cbnz	r3, 8014d2a <_printf_float+0x28e>
 8014d24:	6823      	ldr	r3, [r4, #0]
 8014d26:	07d9      	lsls	r1, r3, #31
 8014d28:	d5d8      	bpl.n	8014cdc <_printf_float+0x240>
 8014d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d2e:	4631      	mov	r1, r6
 8014d30:	4628      	mov	r0, r5
 8014d32:	47b8      	blx	r7
 8014d34:	3001      	adds	r0, #1
 8014d36:	f43f af0e 	beq.w	8014b56 <_printf_float+0xba>
 8014d3a:	f04f 0900 	mov.w	r9, #0
 8014d3e:	f104 0a1a 	add.w	sl, r4, #26
 8014d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d44:	425b      	negs	r3, r3
 8014d46:	454b      	cmp	r3, r9
 8014d48:	dc01      	bgt.n	8014d4e <_printf_float+0x2b2>
 8014d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d4c:	e794      	b.n	8014c78 <_printf_float+0x1dc>
 8014d4e:	2301      	movs	r3, #1
 8014d50:	4652      	mov	r2, sl
 8014d52:	4631      	mov	r1, r6
 8014d54:	4628      	mov	r0, r5
 8014d56:	47b8      	blx	r7
 8014d58:	3001      	adds	r0, #1
 8014d5a:	f43f aefc 	beq.w	8014b56 <_printf_float+0xba>
 8014d5e:	f109 0901 	add.w	r9, r9, #1
 8014d62:	e7ee      	b.n	8014d42 <_printf_float+0x2a6>
 8014d64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014d66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	bfa8      	it	ge
 8014d6c:	461a      	movge	r2, r3
 8014d6e:	2a00      	cmp	r2, #0
 8014d70:	4691      	mov	r9, r2
 8014d72:	dd07      	ble.n	8014d84 <_printf_float+0x2e8>
 8014d74:	4613      	mov	r3, r2
 8014d76:	4631      	mov	r1, r6
 8014d78:	4642      	mov	r2, r8
 8014d7a:	4628      	mov	r0, r5
 8014d7c:	47b8      	blx	r7
 8014d7e:	3001      	adds	r0, #1
 8014d80:	f43f aee9 	beq.w	8014b56 <_printf_float+0xba>
 8014d84:	f104 031a 	add.w	r3, r4, #26
 8014d88:	f04f 0b00 	mov.w	fp, #0
 8014d8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014d90:	9306      	str	r3, [sp, #24]
 8014d92:	e015      	b.n	8014dc0 <_printf_float+0x324>
 8014d94:	7fefffff 	.word	0x7fefffff
 8014d98:	08019228 	.word	0x08019228
 8014d9c:	08019224 	.word	0x08019224
 8014da0:	08019230 	.word	0x08019230
 8014da4:	0801922c 	.word	0x0801922c
 8014da8:	080193eb 	.word	0x080193eb
 8014dac:	2301      	movs	r3, #1
 8014dae:	9a06      	ldr	r2, [sp, #24]
 8014db0:	4631      	mov	r1, r6
 8014db2:	4628      	mov	r0, r5
 8014db4:	47b8      	blx	r7
 8014db6:	3001      	adds	r0, #1
 8014db8:	f43f aecd 	beq.w	8014b56 <_printf_float+0xba>
 8014dbc:	f10b 0b01 	add.w	fp, fp, #1
 8014dc0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014dc4:	ebaa 0309 	sub.w	r3, sl, r9
 8014dc8:	455b      	cmp	r3, fp
 8014dca:	dcef      	bgt.n	8014dac <_printf_float+0x310>
 8014dcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	44d0      	add	r8, sl
 8014dd4:	db15      	blt.n	8014e02 <_printf_float+0x366>
 8014dd6:	6823      	ldr	r3, [r4, #0]
 8014dd8:	07da      	lsls	r2, r3, #31
 8014dda:	d412      	bmi.n	8014e02 <_printf_float+0x366>
 8014ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014de0:	eba3 020a 	sub.w	r2, r3, sl
 8014de4:	eba3 0a01 	sub.w	sl, r3, r1
 8014de8:	4592      	cmp	sl, r2
 8014dea:	bfa8      	it	ge
 8014dec:	4692      	movge	sl, r2
 8014dee:	f1ba 0f00 	cmp.w	sl, #0
 8014df2:	dc0e      	bgt.n	8014e12 <_printf_float+0x376>
 8014df4:	f04f 0800 	mov.w	r8, #0
 8014df8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014dfc:	f104 091a 	add.w	r9, r4, #26
 8014e00:	e019      	b.n	8014e36 <_printf_float+0x39a>
 8014e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e06:	4631      	mov	r1, r6
 8014e08:	4628      	mov	r0, r5
 8014e0a:	47b8      	blx	r7
 8014e0c:	3001      	adds	r0, #1
 8014e0e:	d1e5      	bne.n	8014ddc <_printf_float+0x340>
 8014e10:	e6a1      	b.n	8014b56 <_printf_float+0xba>
 8014e12:	4653      	mov	r3, sl
 8014e14:	4642      	mov	r2, r8
 8014e16:	4631      	mov	r1, r6
 8014e18:	4628      	mov	r0, r5
 8014e1a:	47b8      	blx	r7
 8014e1c:	3001      	adds	r0, #1
 8014e1e:	d1e9      	bne.n	8014df4 <_printf_float+0x358>
 8014e20:	e699      	b.n	8014b56 <_printf_float+0xba>
 8014e22:	2301      	movs	r3, #1
 8014e24:	464a      	mov	r2, r9
 8014e26:	4631      	mov	r1, r6
 8014e28:	4628      	mov	r0, r5
 8014e2a:	47b8      	blx	r7
 8014e2c:	3001      	adds	r0, #1
 8014e2e:	f43f ae92 	beq.w	8014b56 <_printf_float+0xba>
 8014e32:	f108 0801 	add.w	r8, r8, #1
 8014e36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e3a:	1a9b      	subs	r3, r3, r2
 8014e3c:	eba3 030a 	sub.w	r3, r3, sl
 8014e40:	4543      	cmp	r3, r8
 8014e42:	dcee      	bgt.n	8014e22 <_printf_float+0x386>
 8014e44:	e74a      	b.n	8014cdc <_printf_float+0x240>
 8014e46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e48:	2a01      	cmp	r2, #1
 8014e4a:	dc01      	bgt.n	8014e50 <_printf_float+0x3b4>
 8014e4c:	07db      	lsls	r3, r3, #31
 8014e4e:	d53a      	bpl.n	8014ec6 <_printf_float+0x42a>
 8014e50:	2301      	movs	r3, #1
 8014e52:	4642      	mov	r2, r8
 8014e54:	4631      	mov	r1, r6
 8014e56:	4628      	mov	r0, r5
 8014e58:	47b8      	blx	r7
 8014e5a:	3001      	adds	r0, #1
 8014e5c:	f43f ae7b 	beq.w	8014b56 <_printf_float+0xba>
 8014e60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e64:	4631      	mov	r1, r6
 8014e66:	4628      	mov	r0, r5
 8014e68:	47b8      	blx	r7
 8014e6a:	3001      	adds	r0, #1
 8014e6c:	f108 0801 	add.w	r8, r8, #1
 8014e70:	f43f ae71 	beq.w	8014b56 <_printf_float+0xba>
 8014e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e76:	2200      	movs	r2, #0
 8014e78:	f103 3aff 	add.w	sl, r3, #4294967295
 8014e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014e80:	2300      	movs	r3, #0
 8014e82:	f7eb fe39 	bl	8000af8 <__aeabi_dcmpeq>
 8014e86:	b9c8      	cbnz	r0, 8014ebc <_printf_float+0x420>
 8014e88:	4653      	mov	r3, sl
 8014e8a:	4642      	mov	r2, r8
 8014e8c:	4631      	mov	r1, r6
 8014e8e:	4628      	mov	r0, r5
 8014e90:	47b8      	blx	r7
 8014e92:	3001      	adds	r0, #1
 8014e94:	d10e      	bne.n	8014eb4 <_printf_float+0x418>
 8014e96:	e65e      	b.n	8014b56 <_printf_float+0xba>
 8014e98:	2301      	movs	r3, #1
 8014e9a:	4652      	mov	r2, sl
 8014e9c:	4631      	mov	r1, r6
 8014e9e:	4628      	mov	r0, r5
 8014ea0:	47b8      	blx	r7
 8014ea2:	3001      	adds	r0, #1
 8014ea4:	f43f ae57 	beq.w	8014b56 <_printf_float+0xba>
 8014ea8:	f108 0801 	add.w	r8, r8, #1
 8014eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eae:	3b01      	subs	r3, #1
 8014eb0:	4543      	cmp	r3, r8
 8014eb2:	dcf1      	bgt.n	8014e98 <_printf_float+0x3fc>
 8014eb4:	464b      	mov	r3, r9
 8014eb6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014eba:	e6de      	b.n	8014c7a <_printf_float+0x1de>
 8014ebc:	f04f 0800 	mov.w	r8, #0
 8014ec0:	f104 0a1a 	add.w	sl, r4, #26
 8014ec4:	e7f2      	b.n	8014eac <_printf_float+0x410>
 8014ec6:	2301      	movs	r3, #1
 8014ec8:	e7df      	b.n	8014e8a <_printf_float+0x3ee>
 8014eca:	2301      	movs	r3, #1
 8014ecc:	464a      	mov	r2, r9
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4628      	mov	r0, r5
 8014ed2:	47b8      	blx	r7
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	f43f ae3e 	beq.w	8014b56 <_printf_float+0xba>
 8014eda:	f108 0801 	add.w	r8, r8, #1
 8014ede:	68e3      	ldr	r3, [r4, #12]
 8014ee0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014ee2:	1a9b      	subs	r3, r3, r2
 8014ee4:	4543      	cmp	r3, r8
 8014ee6:	dcf0      	bgt.n	8014eca <_printf_float+0x42e>
 8014ee8:	e6fc      	b.n	8014ce4 <_printf_float+0x248>
 8014eea:	f04f 0800 	mov.w	r8, #0
 8014eee:	f104 0919 	add.w	r9, r4, #25
 8014ef2:	e7f4      	b.n	8014ede <_printf_float+0x442>
 8014ef4:	2900      	cmp	r1, #0
 8014ef6:	f43f ae8b 	beq.w	8014c10 <_printf_float+0x174>
 8014efa:	2300      	movs	r3, #0
 8014efc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014f00:	ab09      	add	r3, sp, #36	; 0x24
 8014f02:	9300      	str	r3, [sp, #0]
 8014f04:	ec49 8b10 	vmov	d0, r8, r9
 8014f08:	6022      	str	r2, [r4, #0]
 8014f0a:	f8cd a004 	str.w	sl, [sp, #4]
 8014f0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014f12:	4628      	mov	r0, r5
 8014f14:	f7ff fd2e 	bl	8014974 <__cvt>
 8014f18:	4680      	mov	r8, r0
 8014f1a:	e648      	b.n	8014bae <_printf_float+0x112>

08014f1c <_printf_common>:
 8014f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f20:	4691      	mov	r9, r2
 8014f22:	461f      	mov	r7, r3
 8014f24:	688a      	ldr	r2, [r1, #8]
 8014f26:	690b      	ldr	r3, [r1, #16]
 8014f28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f2c:	4293      	cmp	r3, r2
 8014f2e:	bfb8      	it	lt
 8014f30:	4613      	movlt	r3, r2
 8014f32:	f8c9 3000 	str.w	r3, [r9]
 8014f36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f3a:	4606      	mov	r6, r0
 8014f3c:	460c      	mov	r4, r1
 8014f3e:	b112      	cbz	r2, 8014f46 <_printf_common+0x2a>
 8014f40:	3301      	adds	r3, #1
 8014f42:	f8c9 3000 	str.w	r3, [r9]
 8014f46:	6823      	ldr	r3, [r4, #0]
 8014f48:	0699      	lsls	r1, r3, #26
 8014f4a:	bf42      	ittt	mi
 8014f4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014f50:	3302      	addmi	r3, #2
 8014f52:	f8c9 3000 	strmi.w	r3, [r9]
 8014f56:	6825      	ldr	r5, [r4, #0]
 8014f58:	f015 0506 	ands.w	r5, r5, #6
 8014f5c:	d107      	bne.n	8014f6e <_printf_common+0x52>
 8014f5e:	f104 0a19 	add.w	sl, r4, #25
 8014f62:	68e3      	ldr	r3, [r4, #12]
 8014f64:	f8d9 2000 	ldr.w	r2, [r9]
 8014f68:	1a9b      	subs	r3, r3, r2
 8014f6a:	42ab      	cmp	r3, r5
 8014f6c:	dc28      	bgt.n	8014fc0 <_printf_common+0xa4>
 8014f6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014f72:	6822      	ldr	r2, [r4, #0]
 8014f74:	3300      	adds	r3, #0
 8014f76:	bf18      	it	ne
 8014f78:	2301      	movne	r3, #1
 8014f7a:	0692      	lsls	r2, r2, #26
 8014f7c:	d42d      	bmi.n	8014fda <_printf_common+0xbe>
 8014f7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f82:	4639      	mov	r1, r7
 8014f84:	4630      	mov	r0, r6
 8014f86:	47c0      	blx	r8
 8014f88:	3001      	adds	r0, #1
 8014f8a:	d020      	beq.n	8014fce <_printf_common+0xb2>
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	68e5      	ldr	r5, [r4, #12]
 8014f90:	f8d9 2000 	ldr.w	r2, [r9]
 8014f94:	f003 0306 	and.w	r3, r3, #6
 8014f98:	2b04      	cmp	r3, #4
 8014f9a:	bf08      	it	eq
 8014f9c:	1aad      	subeq	r5, r5, r2
 8014f9e:	68a3      	ldr	r3, [r4, #8]
 8014fa0:	6922      	ldr	r2, [r4, #16]
 8014fa2:	bf0c      	ite	eq
 8014fa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fa8:	2500      	movne	r5, #0
 8014faa:	4293      	cmp	r3, r2
 8014fac:	bfc4      	itt	gt
 8014fae:	1a9b      	subgt	r3, r3, r2
 8014fb0:	18ed      	addgt	r5, r5, r3
 8014fb2:	f04f 0900 	mov.w	r9, #0
 8014fb6:	341a      	adds	r4, #26
 8014fb8:	454d      	cmp	r5, r9
 8014fba:	d11a      	bne.n	8014ff2 <_printf_common+0xd6>
 8014fbc:	2000      	movs	r0, #0
 8014fbe:	e008      	b.n	8014fd2 <_printf_common+0xb6>
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	4652      	mov	r2, sl
 8014fc4:	4639      	mov	r1, r7
 8014fc6:	4630      	mov	r0, r6
 8014fc8:	47c0      	blx	r8
 8014fca:	3001      	adds	r0, #1
 8014fcc:	d103      	bne.n	8014fd6 <_printf_common+0xba>
 8014fce:	f04f 30ff 	mov.w	r0, #4294967295
 8014fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fd6:	3501      	adds	r5, #1
 8014fd8:	e7c3      	b.n	8014f62 <_printf_common+0x46>
 8014fda:	18e1      	adds	r1, r4, r3
 8014fdc:	1c5a      	adds	r2, r3, #1
 8014fde:	2030      	movs	r0, #48	; 0x30
 8014fe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014fe4:	4422      	add	r2, r4
 8014fe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014fea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014fee:	3302      	adds	r3, #2
 8014ff0:	e7c5      	b.n	8014f7e <_printf_common+0x62>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	4622      	mov	r2, r4
 8014ff6:	4639      	mov	r1, r7
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	47c0      	blx	r8
 8014ffc:	3001      	adds	r0, #1
 8014ffe:	d0e6      	beq.n	8014fce <_printf_common+0xb2>
 8015000:	f109 0901 	add.w	r9, r9, #1
 8015004:	e7d8      	b.n	8014fb8 <_printf_common+0x9c>
	...

08015008 <_printf_i>:
 8015008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801500c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015010:	460c      	mov	r4, r1
 8015012:	7e09      	ldrb	r1, [r1, #24]
 8015014:	b085      	sub	sp, #20
 8015016:	296e      	cmp	r1, #110	; 0x6e
 8015018:	4617      	mov	r7, r2
 801501a:	4606      	mov	r6, r0
 801501c:	4698      	mov	r8, r3
 801501e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015020:	f000 80b3 	beq.w	801518a <_printf_i+0x182>
 8015024:	d822      	bhi.n	801506c <_printf_i+0x64>
 8015026:	2963      	cmp	r1, #99	; 0x63
 8015028:	d036      	beq.n	8015098 <_printf_i+0x90>
 801502a:	d80a      	bhi.n	8015042 <_printf_i+0x3a>
 801502c:	2900      	cmp	r1, #0
 801502e:	f000 80b9 	beq.w	80151a4 <_printf_i+0x19c>
 8015032:	2958      	cmp	r1, #88	; 0x58
 8015034:	f000 8083 	beq.w	801513e <_printf_i+0x136>
 8015038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801503c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015040:	e032      	b.n	80150a8 <_printf_i+0xa0>
 8015042:	2964      	cmp	r1, #100	; 0x64
 8015044:	d001      	beq.n	801504a <_printf_i+0x42>
 8015046:	2969      	cmp	r1, #105	; 0x69
 8015048:	d1f6      	bne.n	8015038 <_printf_i+0x30>
 801504a:	6820      	ldr	r0, [r4, #0]
 801504c:	6813      	ldr	r3, [r2, #0]
 801504e:	0605      	lsls	r5, r0, #24
 8015050:	f103 0104 	add.w	r1, r3, #4
 8015054:	d52a      	bpl.n	80150ac <_printf_i+0xa4>
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	6011      	str	r1, [r2, #0]
 801505a:	2b00      	cmp	r3, #0
 801505c:	da03      	bge.n	8015066 <_printf_i+0x5e>
 801505e:	222d      	movs	r2, #45	; 0x2d
 8015060:	425b      	negs	r3, r3
 8015062:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015066:	486f      	ldr	r0, [pc, #444]	; (8015224 <_printf_i+0x21c>)
 8015068:	220a      	movs	r2, #10
 801506a:	e039      	b.n	80150e0 <_printf_i+0xd8>
 801506c:	2973      	cmp	r1, #115	; 0x73
 801506e:	f000 809d 	beq.w	80151ac <_printf_i+0x1a4>
 8015072:	d808      	bhi.n	8015086 <_printf_i+0x7e>
 8015074:	296f      	cmp	r1, #111	; 0x6f
 8015076:	d020      	beq.n	80150ba <_printf_i+0xb2>
 8015078:	2970      	cmp	r1, #112	; 0x70
 801507a:	d1dd      	bne.n	8015038 <_printf_i+0x30>
 801507c:	6823      	ldr	r3, [r4, #0]
 801507e:	f043 0320 	orr.w	r3, r3, #32
 8015082:	6023      	str	r3, [r4, #0]
 8015084:	e003      	b.n	801508e <_printf_i+0x86>
 8015086:	2975      	cmp	r1, #117	; 0x75
 8015088:	d017      	beq.n	80150ba <_printf_i+0xb2>
 801508a:	2978      	cmp	r1, #120	; 0x78
 801508c:	d1d4      	bne.n	8015038 <_printf_i+0x30>
 801508e:	2378      	movs	r3, #120	; 0x78
 8015090:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015094:	4864      	ldr	r0, [pc, #400]	; (8015228 <_printf_i+0x220>)
 8015096:	e055      	b.n	8015144 <_printf_i+0x13c>
 8015098:	6813      	ldr	r3, [r2, #0]
 801509a:	1d19      	adds	r1, r3, #4
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	6011      	str	r1, [r2, #0]
 80150a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150a8:	2301      	movs	r3, #1
 80150aa:	e08c      	b.n	80151c6 <_printf_i+0x1be>
 80150ac:	681b      	ldr	r3, [r3, #0]
 80150ae:	6011      	str	r1, [r2, #0]
 80150b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80150b4:	bf18      	it	ne
 80150b6:	b21b      	sxthne	r3, r3
 80150b8:	e7cf      	b.n	801505a <_printf_i+0x52>
 80150ba:	6813      	ldr	r3, [r2, #0]
 80150bc:	6825      	ldr	r5, [r4, #0]
 80150be:	1d18      	adds	r0, r3, #4
 80150c0:	6010      	str	r0, [r2, #0]
 80150c2:	0628      	lsls	r0, r5, #24
 80150c4:	d501      	bpl.n	80150ca <_printf_i+0xc2>
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	e002      	b.n	80150d0 <_printf_i+0xc8>
 80150ca:	0668      	lsls	r0, r5, #25
 80150cc:	d5fb      	bpl.n	80150c6 <_printf_i+0xbe>
 80150ce:	881b      	ldrh	r3, [r3, #0]
 80150d0:	4854      	ldr	r0, [pc, #336]	; (8015224 <_printf_i+0x21c>)
 80150d2:	296f      	cmp	r1, #111	; 0x6f
 80150d4:	bf14      	ite	ne
 80150d6:	220a      	movne	r2, #10
 80150d8:	2208      	moveq	r2, #8
 80150da:	2100      	movs	r1, #0
 80150dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80150e0:	6865      	ldr	r5, [r4, #4]
 80150e2:	60a5      	str	r5, [r4, #8]
 80150e4:	2d00      	cmp	r5, #0
 80150e6:	f2c0 8095 	blt.w	8015214 <_printf_i+0x20c>
 80150ea:	6821      	ldr	r1, [r4, #0]
 80150ec:	f021 0104 	bic.w	r1, r1, #4
 80150f0:	6021      	str	r1, [r4, #0]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d13d      	bne.n	8015172 <_printf_i+0x16a>
 80150f6:	2d00      	cmp	r5, #0
 80150f8:	f040 808e 	bne.w	8015218 <_printf_i+0x210>
 80150fc:	4665      	mov	r5, ip
 80150fe:	2a08      	cmp	r2, #8
 8015100:	d10b      	bne.n	801511a <_printf_i+0x112>
 8015102:	6823      	ldr	r3, [r4, #0]
 8015104:	07db      	lsls	r3, r3, #31
 8015106:	d508      	bpl.n	801511a <_printf_i+0x112>
 8015108:	6923      	ldr	r3, [r4, #16]
 801510a:	6862      	ldr	r2, [r4, #4]
 801510c:	429a      	cmp	r2, r3
 801510e:	bfde      	ittt	le
 8015110:	2330      	movle	r3, #48	; 0x30
 8015112:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015116:	f105 35ff 	addle.w	r5, r5, #4294967295
 801511a:	ebac 0305 	sub.w	r3, ip, r5
 801511e:	6123      	str	r3, [r4, #16]
 8015120:	f8cd 8000 	str.w	r8, [sp]
 8015124:	463b      	mov	r3, r7
 8015126:	aa03      	add	r2, sp, #12
 8015128:	4621      	mov	r1, r4
 801512a:	4630      	mov	r0, r6
 801512c:	f7ff fef6 	bl	8014f1c <_printf_common>
 8015130:	3001      	adds	r0, #1
 8015132:	d14d      	bne.n	80151d0 <_printf_i+0x1c8>
 8015134:	f04f 30ff 	mov.w	r0, #4294967295
 8015138:	b005      	add	sp, #20
 801513a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801513e:	4839      	ldr	r0, [pc, #228]	; (8015224 <_printf_i+0x21c>)
 8015140:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015144:	6813      	ldr	r3, [r2, #0]
 8015146:	6821      	ldr	r1, [r4, #0]
 8015148:	1d1d      	adds	r5, r3, #4
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	6015      	str	r5, [r2, #0]
 801514e:	060a      	lsls	r2, r1, #24
 8015150:	d50b      	bpl.n	801516a <_printf_i+0x162>
 8015152:	07ca      	lsls	r2, r1, #31
 8015154:	bf44      	itt	mi
 8015156:	f041 0120 	orrmi.w	r1, r1, #32
 801515a:	6021      	strmi	r1, [r4, #0]
 801515c:	b91b      	cbnz	r3, 8015166 <_printf_i+0x15e>
 801515e:	6822      	ldr	r2, [r4, #0]
 8015160:	f022 0220 	bic.w	r2, r2, #32
 8015164:	6022      	str	r2, [r4, #0]
 8015166:	2210      	movs	r2, #16
 8015168:	e7b7      	b.n	80150da <_printf_i+0xd2>
 801516a:	064d      	lsls	r5, r1, #25
 801516c:	bf48      	it	mi
 801516e:	b29b      	uxthmi	r3, r3
 8015170:	e7ef      	b.n	8015152 <_printf_i+0x14a>
 8015172:	4665      	mov	r5, ip
 8015174:	fbb3 f1f2 	udiv	r1, r3, r2
 8015178:	fb02 3311 	mls	r3, r2, r1, r3
 801517c:	5cc3      	ldrb	r3, [r0, r3]
 801517e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015182:	460b      	mov	r3, r1
 8015184:	2900      	cmp	r1, #0
 8015186:	d1f5      	bne.n	8015174 <_printf_i+0x16c>
 8015188:	e7b9      	b.n	80150fe <_printf_i+0xf6>
 801518a:	6813      	ldr	r3, [r2, #0]
 801518c:	6825      	ldr	r5, [r4, #0]
 801518e:	6961      	ldr	r1, [r4, #20]
 8015190:	1d18      	adds	r0, r3, #4
 8015192:	6010      	str	r0, [r2, #0]
 8015194:	0628      	lsls	r0, r5, #24
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	d501      	bpl.n	801519e <_printf_i+0x196>
 801519a:	6019      	str	r1, [r3, #0]
 801519c:	e002      	b.n	80151a4 <_printf_i+0x19c>
 801519e:	066a      	lsls	r2, r5, #25
 80151a0:	d5fb      	bpl.n	801519a <_printf_i+0x192>
 80151a2:	8019      	strh	r1, [r3, #0]
 80151a4:	2300      	movs	r3, #0
 80151a6:	6123      	str	r3, [r4, #16]
 80151a8:	4665      	mov	r5, ip
 80151aa:	e7b9      	b.n	8015120 <_printf_i+0x118>
 80151ac:	6813      	ldr	r3, [r2, #0]
 80151ae:	1d19      	adds	r1, r3, #4
 80151b0:	6011      	str	r1, [r2, #0]
 80151b2:	681d      	ldr	r5, [r3, #0]
 80151b4:	6862      	ldr	r2, [r4, #4]
 80151b6:	2100      	movs	r1, #0
 80151b8:	4628      	mov	r0, r5
 80151ba:	f7eb f829 	bl	8000210 <memchr>
 80151be:	b108      	cbz	r0, 80151c4 <_printf_i+0x1bc>
 80151c0:	1b40      	subs	r0, r0, r5
 80151c2:	6060      	str	r0, [r4, #4]
 80151c4:	6863      	ldr	r3, [r4, #4]
 80151c6:	6123      	str	r3, [r4, #16]
 80151c8:	2300      	movs	r3, #0
 80151ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80151ce:	e7a7      	b.n	8015120 <_printf_i+0x118>
 80151d0:	6923      	ldr	r3, [r4, #16]
 80151d2:	462a      	mov	r2, r5
 80151d4:	4639      	mov	r1, r7
 80151d6:	4630      	mov	r0, r6
 80151d8:	47c0      	blx	r8
 80151da:	3001      	adds	r0, #1
 80151dc:	d0aa      	beq.n	8015134 <_printf_i+0x12c>
 80151de:	6823      	ldr	r3, [r4, #0]
 80151e0:	079b      	lsls	r3, r3, #30
 80151e2:	d413      	bmi.n	801520c <_printf_i+0x204>
 80151e4:	68e0      	ldr	r0, [r4, #12]
 80151e6:	9b03      	ldr	r3, [sp, #12]
 80151e8:	4298      	cmp	r0, r3
 80151ea:	bfb8      	it	lt
 80151ec:	4618      	movlt	r0, r3
 80151ee:	e7a3      	b.n	8015138 <_printf_i+0x130>
 80151f0:	2301      	movs	r3, #1
 80151f2:	464a      	mov	r2, r9
 80151f4:	4639      	mov	r1, r7
 80151f6:	4630      	mov	r0, r6
 80151f8:	47c0      	blx	r8
 80151fa:	3001      	adds	r0, #1
 80151fc:	d09a      	beq.n	8015134 <_printf_i+0x12c>
 80151fe:	3501      	adds	r5, #1
 8015200:	68e3      	ldr	r3, [r4, #12]
 8015202:	9a03      	ldr	r2, [sp, #12]
 8015204:	1a9b      	subs	r3, r3, r2
 8015206:	42ab      	cmp	r3, r5
 8015208:	dcf2      	bgt.n	80151f0 <_printf_i+0x1e8>
 801520a:	e7eb      	b.n	80151e4 <_printf_i+0x1dc>
 801520c:	2500      	movs	r5, #0
 801520e:	f104 0919 	add.w	r9, r4, #25
 8015212:	e7f5      	b.n	8015200 <_printf_i+0x1f8>
 8015214:	2b00      	cmp	r3, #0
 8015216:	d1ac      	bne.n	8015172 <_printf_i+0x16a>
 8015218:	7803      	ldrb	r3, [r0, #0]
 801521a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801521e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015222:	e76c      	b.n	80150fe <_printf_i+0xf6>
 8015224:	08019234 	.word	0x08019234
 8015228:	08019245 	.word	0x08019245

0801522c <_scanf_float>:
 801522c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015230:	469a      	mov	sl, r3
 8015232:	688b      	ldr	r3, [r1, #8]
 8015234:	4616      	mov	r6, r2
 8015236:	1e5a      	subs	r2, r3, #1
 8015238:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801523c:	b087      	sub	sp, #28
 801523e:	bf83      	ittte	hi
 8015240:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015244:	189b      	addhi	r3, r3, r2
 8015246:	9301      	strhi	r3, [sp, #4]
 8015248:	2300      	movls	r3, #0
 801524a:	bf86      	itte	hi
 801524c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015250:	608b      	strhi	r3, [r1, #8]
 8015252:	9301      	strls	r3, [sp, #4]
 8015254:	680b      	ldr	r3, [r1, #0]
 8015256:	4688      	mov	r8, r1
 8015258:	f04f 0b00 	mov.w	fp, #0
 801525c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015260:	f848 3b1c 	str.w	r3, [r8], #28
 8015264:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015268:	4607      	mov	r7, r0
 801526a:	460c      	mov	r4, r1
 801526c:	4645      	mov	r5, r8
 801526e:	465a      	mov	r2, fp
 8015270:	46d9      	mov	r9, fp
 8015272:	f8cd b008 	str.w	fp, [sp, #8]
 8015276:	68a1      	ldr	r1, [r4, #8]
 8015278:	b181      	cbz	r1, 801529c <_scanf_float+0x70>
 801527a:	6833      	ldr	r3, [r6, #0]
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	2b49      	cmp	r3, #73	; 0x49
 8015280:	d071      	beq.n	8015366 <_scanf_float+0x13a>
 8015282:	d84d      	bhi.n	8015320 <_scanf_float+0xf4>
 8015284:	2b39      	cmp	r3, #57	; 0x39
 8015286:	d840      	bhi.n	801530a <_scanf_float+0xde>
 8015288:	2b31      	cmp	r3, #49	; 0x31
 801528a:	f080 8088 	bcs.w	801539e <_scanf_float+0x172>
 801528e:	2b2d      	cmp	r3, #45	; 0x2d
 8015290:	f000 8090 	beq.w	80153b4 <_scanf_float+0x188>
 8015294:	d815      	bhi.n	80152c2 <_scanf_float+0x96>
 8015296:	2b2b      	cmp	r3, #43	; 0x2b
 8015298:	f000 808c 	beq.w	80153b4 <_scanf_float+0x188>
 801529c:	f1b9 0f00 	cmp.w	r9, #0
 80152a0:	d003      	beq.n	80152aa <_scanf_float+0x7e>
 80152a2:	6823      	ldr	r3, [r4, #0]
 80152a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80152a8:	6023      	str	r3, [r4, #0]
 80152aa:	3a01      	subs	r2, #1
 80152ac:	2a01      	cmp	r2, #1
 80152ae:	f200 80ea 	bhi.w	8015486 <_scanf_float+0x25a>
 80152b2:	4545      	cmp	r5, r8
 80152b4:	f200 80dc 	bhi.w	8015470 <_scanf_float+0x244>
 80152b8:	2601      	movs	r6, #1
 80152ba:	4630      	mov	r0, r6
 80152bc:	b007      	add	sp, #28
 80152be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c2:	2b2e      	cmp	r3, #46	; 0x2e
 80152c4:	f000 809f 	beq.w	8015406 <_scanf_float+0x1da>
 80152c8:	2b30      	cmp	r3, #48	; 0x30
 80152ca:	d1e7      	bne.n	801529c <_scanf_float+0x70>
 80152cc:	6820      	ldr	r0, [r4, #0]
 80152ce:	f410 7f80 	tst.w	r0, #256	; 0x100
 80152d2:	d064      	beq.n	801539e <_scanf_float+0x172>
 80152d4:	9b01      	ldr	r3, [sp, #4]
 80152d6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80152da:	6020      	str	r0, [r4, #0]
 80152dc:	f109 0901 	add.w	r9, r9, #1
 80152e0:	b11b      	cbz	r3, 80152ea <_scanf_float+0xbe>
 80152e2:	3b01      	subs	r3, #1
 80152e4:	3101      	adds	r1, #1
 80152e6:	9301      	str	r3, [sp, #4]
 80152e8:	60a1      	str	r1, [r4, #8]
 80152ea:	68a3      	ldr	r3, [r4, #8]
 80152ec:	3b01      	subs	r3, #1
 80152ee:	60a3      	str	r3, [r4, #8]
 80152f0:	6923      	ldr	r3, [r4, #16]
 80152f2:	3301      	adds	r3, #1
 80152f4:	6123      	str	r3, [r4, #16]
 80152f6:	6873      	ldr	r3, [r6, #4]
 80152f8:	3b01      	subs	r3, #1
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	6073      	str	r3, [r6, #4]
 80152fe:	f340 80ac 	ble.w	801545a <_scanf_float+0x22e>
 8015302:	6833      	ldr	r3, [r6, #0]
 8015304:	3301      	adds	r3, #1
 8015306:	6033      	str	r3, [r6, #0]
 8015308:	e7b5      	b.n	8015276 <_scanf_float+0x4a>
 801530a:	2b45      	cmp	r3, #69	; 0x45
 801530c:	f000 8085 	beq.w	801541a <_scanf_float+0x1ee>
 8015310:	2b46      	cmp	r3, #70	; 0x46
 8015312:	d06a      	beq.n	80153ea <_scanf_float+0x1be>
 8015314:	2b41      	cmp	r3, #65	; 0x41
 8015316:	d1c1      	bne.n	801529c <_scanf_float+0x70>
 8015318:	2a01      	cmp	r2, #1
 801531a:	d1bf      	bne.n	801529c <_scanf_float+0x70>
 801531c:	2202      	movs	r2, #2
 801531e:	e046      	b.n	80153ae <_scanf_float+0x182>
 8015320:	2b65      	cmp	r3, #101	; 0x65
 8015322:	d07a      	beq.n	801541a <_scanf_float+0x1ee>
 8015324:	d818      	bhi.n	8015358 <_scanf_float+0x12c>
 8015326:	2b54      	cmp	r3, #84	; 0x54
 8015328:	d066      	beq.n	80153f8 <_scanf_float+0x1cc>
 801532a:	d811      	bhi.n	8015350 <_scanf_float+0x124>
 801532c:	2b4e      	cmp	r3, #78	; 0x4e
 801532e:	d1b5      	bne.n	801529c <_scanf_float+0x70>
 8015330:	2a00      	cmp	r2, #0
 8015332:	d146      	bne.n	80153c2 <_scanf_float+0x196>
 8015334:	f1b9 0f00 	cmp.w	r9, #0
 8015338:	d145      	bne.n	80153c6 <_scanf_float+0x19a>
 801533a:	6821      	ldr	r1, [r4, #0]
 801533c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015340:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015344:	d13f      	bne.n	80153c6 <_scanf_float+0x19a>
 8015346:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801534a:	6021      	str	r1, [r4, #0]
 801534c:	2201      	movs	r2, #1
 801534e:	e02e      	b.n	80153ae <_scanf_float+0x182>
 8015350:	2b59      	cmp	r3, #89	; 0x59
 8015352:	d01e      	beq.n	8015392 <_scanf_float+0x166>
 8015354:	2b61      	cmp	r3, #97	; 0x61
 8015356:	e7de      	b.n	8015316 <_scanf_float+0xea>
 8015358:	2b6e      	cmp	r3, #110	; 0x6e
 801535a:	d0e9      	beq.n	8015330 <_scanf_float+0x104>
 801535c:	d815      	bhi.n	801538a <_scanf_float+0x15e>
 801535e:	2b66      	cmp	r3, #102	; 0x66
 8015360:	d043      	beq.n	80153ea <_scanf_float+0x1be>
 8015362:	2b69      	cmp	r3, #105	; 0x69
 8015364:	d19a      	bne.n	801529c <_scanf_float+0x70>
 8015366:	f1bb 0f00 	cmp.w	fp, #0
 801536a:	d138      	bne.n	80153de <_scanf_float+0x1b2>
 801536c:	f1b9 0f00 	cmp.w	r9, #0
 8015370:	d197      	bne.n	80152a2 <_scanf_float+0x76>
 8015372:	6821      	ldr	r1, [r4, #0]
 8015374:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015378:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801537c:	d195      	bne.n	80152aa <_scanf_float+0x7e>
 801537e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015382:	6021      	str	r1, [r4, #0]
 8015384:	f04f 0b01 	mov.w	fp, #1
 8015388:	e011      	b.n	80153ae <_scanf_float+0x182>
 801538a:	2b74      	cmp	r3, #116	; 0x74
 801538c:	d034      	beq.n	80153f8 <_scanf_float+0x1cc>
 801538e:	2b79      	cmp	r3, #121	; 0x79
 8015390:	d184      	bne.n	801529c <_scanf_float+0x70>
 8015392:	f1bb 0f07 	cmp.w	fp, #7
 8015396:	d181      	bne.n	801529c <_scanf_float+0x70>
 8015398:	f04f 0b08 	mov.w	fp, #8
 801539c:	e007      	b.n	80153ae <_scanf_float+0x182>
 801539e:	eb12 0f0b 	cmn.w	r2, fp
 80153a2:	f47f af7b 	bne.w	801529c <_scanf_float+0x70>
 80153a6:	6821      	ldr	r1, [r4, #0]
 80153a8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80153ac:	6021      	str	r1, [r4, #0]
 80153ae:	702b      	strb	r3, [r5, #0]
 80153b0:	3501      	adds	r5, #1
 80153b2:	e79a      	b.n	80152ea <_scanf_float+0xbe>
 80153b4:	6821      	ldr	r1, [r4, #0]
 80153b6:	0608      	lsls	r0, r1, #24
 80153b8:	f57f af70 	bpl.w	801529c <_scanf_float+0x70>
 80153bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80153c0:	e7f4      	b.n	80153ac <_scanf_float+0x180>
 80153c2:	2a02      	cmp	r2, #2
 80153c4:	d047      	beq.n	8015456 <_scanf_float+0x22a>
 80153c6:	f1bb 0f01 	cmp.w	fp, #1
 80153ca:	d003      	beq.n	80153d4 <_scanf_float+0x1a8>
 80153cc:	f1bb 0f04 	cmp.w	fp, #4
 80153d0:	f47f af64 	bne.w	801529c <_scanf_float+0x70>
 80153d4:	f10b 0b01 	add.w	fp, fp, #1
 80153d8:	fa5f fb8b 	uxtb.w	fp, fp
 80153dc:	e7e7      	b.n	80153ae <_scanf_float+0x182>
 80153de:	f1bb 0f03 	cmp.w	fp, #3
 80153e2:	d0f7      	beq.n	80153d4 <_scanf_float+0x1a8>
 80153e4:	f1bb 0f05 	cmp.w	fp, #5
 80153e8:	e7f2      	b.n	80153d0 <_scanf_float+0x1a4>
 80153ea:	f1bb 0f02 	cmp.w	fp, #2
 80153ee:	f47f af55 	bne.w	801529c <_scanf_float+0x70>
 80153f2:	f04f 0b03 	mov.w	fp, #3
 80153f6:	e7da      	b.n	80153ae <_scanf_float+0x182>
 80153f8:	f1bb 0f06 	cmp.w	fp, #6
 80153fc:	f47f af4e 	bne.w	801529c <_scanf_float+0x70>
 8015400:	f04f 0b07 	mov.w	fp, #7
 8015404:	e7d3      	b.n	80153ae <_scanf_float+0x182>
 8015406:	6821      	ldr	r1, [r4, #0]
 8015408:	0588      	lsls	r0, r1, #22
 801540a:	f57f af47 	bpl.w	801529c <_scanf_float+0x70>
 801540e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015412:	6021      	str	r1, [r4, #0]
 8015414:	f8cd 9008 	str.w	r9, [sp, #8]
 8015418:	e7c9      	b.n	80153ae <_scanf_float+0x182>
 801541a:	6821      	ldr	r1, [r4, #0]
 801541c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015420:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015424:	d006      	beq.n	8015434 <_scanf_float+0x208>
 8015426:	0548      	lsls	r0, r1, #21
 8015428:	f57f af38 	bpl.w	801529c <_scanf_float+0x70>
 801542c:	f1b9 0f00 	cmp.w	r9, #0
 8015430:	f43f af3b 	beq.w	80152aa <_scanf_float+0x7e>
 8015434:	0588      	lsls	r0, r1, #22
 8015436:	bf58      	it	pl
 8015438:	9802      	ldrpl	r0, [sp, #8]
 801543a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801543e:	bf58      	it	pl
 8015440:	eba9 0000 	subpl.w	r0, r9, r0
 8015444:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015448:	bf58      	it	pl
 801544a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801544e:	6021      	str	r1, [r4, #0]
 8015450:	f04f 0900 	mov.w	r9, #0
 8015454:	e7ab      	b.n	80153ae <_scanf_float+0x182>
 8015456:	2203      	movs	r2, #3
 8015458:	e7a9      	b.n	80153ae <_scanf_float+0x182>
 801545a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801545e:	9205      	str	r2, [sp, #20]
 8015460:	4631      	mov	r1, r6
 8015462:	4638      	mov	r0, r7
 8015464:	4798      	blx	r3
 8015466:	9a05      	ldr	r2, [sp, #20]
 8015468:	2800      	cmp	r0, #0
 801546a:	f43f af04 	beq.w	8015276 <_scanf_float+0x4a>
 801546e:	e715      	b.n	801529c <_scanf_float+0x70>
 8015470:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015474:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015478:	4632      	mov	r2, r6
 801547a:	4638      	mov	r0, r7
 801547c:	4798      	blx	r3
 801547e:	6923      	ldr	r3, [r4, #16]
 8015480:	3b01      	subs	r3, #1
 8015482:	6123      	str	r3, [r4, #16]
 8015484:	e715      	b.n	80152b2 <_scanf_float+0x86>
 8015486:	f10b 33ff 	add.w	r3, fp, #4294967295
 801548a:	2b06      	cmp	r3, #6
 801548c:	d80a      	bhi.n	80154a4 <_scanf_float+0x278>
 801548e:	f1bb 0f02 	cmp.w	fp, #2
 8015492:	d968      	bls.n	8015566 <_scanf_float+0x33a>
 8015494:	f1ab 0b03 	sub.w	fp, fp, #3
 8015498:	fa5f fb8b 	uxtb.w	fp, fp
 801549c:	eba5 0b0b 	sub.w	fp, r5, fp
 80154a0:	455d      	cmp	r5, fp
 80154a2:	d14b      	bne.n	801553c <_scanf_float+0x310>
 80154a4:	6823      	ldr	r3, [r4, #0]
 80154a6:	05da      	lsls	r2, r3, #23
 80154a8:	d51f      	bpl.n	80154ea <_scanf_float+0x2be>
 80154aa:	055b      	lsls	r3, r3, #21
 80154ac:	d468      	bmi.n	8015580 <_scanf_float+0x354>
 80154ae:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80154b2:	6923      	ldr	r3, [r4, #16]
 80154b4:	2965      	cmp	r1, #101	; 0x65
 80154b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80154ba:	f105 3bff 	add.w	fp, r5, #4294967295
 80154be:	6123      	str	r3, [r4, #16]
 80154c0:	d00d      	beq.n	80154de <_scanf_float+0x2b2>
 80154c2:	2945      	cmp	r1, #69	; 0x45
 80154c4:	d00b      	beq.n	80154de <_scanf_float+0x2b2>
 80154c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154ca:	4632      	mov	r2, r6
 80154cc:	4638      	mov	r0, r7
 80154ce:	4798      	blx	r3
 80154d0:	6923      	ldr	r3, [r4, #16]
 80154d2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80154d6:	3b01      	subs	r3, #1
 80154d8:	f1a5 0b02 	sub.w	fp, r5, #2
 80154dc:	6123      	str	r3, [r4, #16]
 80154de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80154e2:	4632      	mov	r2, r6
 80154e4:	4638      	mov	r0, r7
 80154e6:	4798      	blx	r3
 80154e8:	465d      	mov	r5, fp
 80154ea:	6826      	ldr	r6, [r4, #0]
 80154ec:	f016 0610 	ands.w	r6, r6, #16
 80154f0:	d17a      	bne.n	80155e8 <_scanf_float+0x3bc>
 80154f2:	702e      	strb	r6, [r5, #0]
 80154f4:	6823      	ldr	r3, [r4, #0]
 80154f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80154fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80154fe:	d142      	bne.n	8015586 <_scanf_float+0x35a>
 8015500:	9b02      	ldr	r3, [sp, #8]
 8015502:	eba9 0303 	sub.w	r3, r9, r3
 8015506:	425a      	negs	r2, r3
 8015508:	2b00      	cmp	r3, #0
 801550a:	d149      	bne.n	80155a0 <_scanf_float+0x374>
 801550c:	2200      	movs	r2, #0
 801550e:	4641      	mov	r1, r8
 8015510:	4638      	mov	r0, r7
 8015512:	f000 ff0d 	bl	8016330 <_strtod_r>
 8015516:	6825      	ldr	r5, [r4, #0]
 8015518:	f8da 3000 	ldr.w	r3, [sl]
 801551c:	f015 0f02 	tst.w	r5, #2
 8015520:	f103 0204 	add.w	r2, r3, #4
 8015524:	ec59 8b10 	vmov	r8, r9, d0
 8015528:	f8ca 2000 	str.w	r2, [sl]
 801552c:	d043      	beq.n	80155b6 <_scanf_float+0x38a>
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	e9c3 8900 	strd	r8, r9, [r3]
 8015534:	68e3      	ldr	r3, [r4, #12]
 8015536:	3301      	adds	r3, #1
 8015538:	60e3      	str	r3, [r4, #12]
 801553a:	e6be      	b.n	80152ba <_scanf_float+0x8e>
 801553c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015540:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015544:	4632      	mov	r2, r6
 8015546:	4638      	mov	r0, r7
 8015548:	4798      	blx	r3
 801554a:	6923      	ldr	r3, [r4, #16]
 801554c:	3b01      	subs	r3, #1
 801554e:	6123      	str	r3, [r4, #16]
 8015550:	e7a6      	b.n	80154a0 <_scanf_float+0x274>
 8015552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015556:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801555a:	4632      	mov	r2, r6
 801555c:	4638      	mov	r0, r7
 801555e:	4798      	blx	r3
 8015560:	6923      	ldr	r3, [r4, #16]
 8015562:	3b01      	subs	r3, #1
 8015564:	6123      	str	r3, [r4, #16]
 8015566:	4545      	cmp	r5, r8
 8015568:	d8f3      	bhi.n	8015552 <_scanf_float+0x326>
 801556a:	e6a5      	b.n	80152b8 <_scanf_float+0x8c>
 801556c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015570:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015574:	4632      	mov	r2, r6
 8015576:	4638      	mov	r0, r7
 8015578:	4798      	blx	r3
 801557a:	6923      	ldr	r3, [r4, #16]
 801557c:	3b01      	subs	r3, #1
 801557e:	6123      	str	r3, [r4, #16]
 8015580:	4545      	cmp	r5, r8
 8015582:	d8f3      	bhi.n	801556c <_scanf_float+0x340>
 8015584:	e698      	b.n	80152b8 <_scanf_float+0x8c>
 8015586:	9b03      	ldr	r3, [sp, #12]
 8015588:	2b00      	cmp	r3, #0
 801558a:	d0bf      	beq.n	801550c <_scanf_float+0x2e0>
 801558c:	9904      	ldr	r1, [sp, #16]
 801558e:	230a      	movs	r3, #10
 8015590:	4632      	mov	r2, r6
 8015592:	3101      	adds	r1, #1
 8015594:	4638      	mov	r0, r7
 8015596:	f000 ff57 	bl	8016448 <_strtol_r>
 801559a:	9b03      	ldr	r3, [sp, #12]
 801559c:	9d04      	ldr	r5, [sp, #16]
 801559e:	1ac2      	subs	r2, r0, r3
 80155a0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80155a4:	429d      	cmp	r5, r3
 80155a6:	bf28      	it	cs
 80155a8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80155ac:	490f      	ldr	r1, [pc, #60]	; (80155ec <_scanf_float+0x3c0>)
 80155ae:	4628      	mov	r0, r5
 80155b0:	f000 f858 	bl	8015664 <siprintf>
 80155b4:	e7aa      	b.n	801550c <_scanf_float+0x2e0>
 80155b6:	f015 0504 	ands.w	r5, r5, #4
 80155ba:	d1b8      	bne.n	801552e <_scanf_float+0x302>
 80155bc:	681f      	ldr	r7, [r3, #0]
 80155be:	ee10 2a10 	vmov	r2, s0
 80155c2:	464b      	mov	r3, r9
 80155c4:	ee10 0a10 	vmov	r0, s0
 80155c8:	4649      	mov	r1, r9
 80155ca:	f7eb fac7 	bl	8000b5c <__aeabi_dcmpun>
 80155ce:	b128      	cbz	r0, 80155dc <_scanf_float+0x3b0>
 80155d0:	4628      	mov	r0, r5
 80155d2:	f000 f80d 	bl	80155f0 <nanf>
 80155d6:	ed87 0a00 	vstr	s0, [r7]
 80155da:	e7ab      	b.n	8015534 <_scanf_float+0x308>
 80155dc:	4640      	mov	r0, r8
 80155de:	4649      	mov	r1, r9
 80155e0:	f7eb fb1a 	bl	8000c18 <__aeabi_d2f>
 80155e4:	6038      	str	r0, [r7, #0]
 80155e6:	e7a5      	b.n	8015534 <_scanf_float+0x308>
 80155e8:	2600      	movs	r6, #0
 80155ea:	e666      	b.n	80152ba <_scanf_float+0x8e>
 80155ec:	08019256 	.word	0x08019256

080155f0 <nanf>:
 80155f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80155f8 <nanf+0x8>
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	7fc00000 	.word	0x7fc00000

080155fc <sniprintf>:
 80155fc:	b40c      	push	{r2, r3}
 80155fe:	b530      	push	{r4, r5, lr}
 8015600:	4b17      	ldr	r3, [pc, #92]	; (8015660 <sniprintf+0x64>)
 8015602:	1e0c      	subs	r4, r1, #0
 8015604:	b09d      	sub	sp, #116	; 0x74
 8015606:	681d      	ldr	r5, [r3, #0]
 8015608:	da08      	bge.n	801561c <sniprintf+0x20>
 801560a:	238b      	movs	r3, #139	; 0x8b
 801560c:	602b      	str	r3, [r5, #0]
 801560e:	f04f 30ff 	mov.w	r0, #4294967295
 8015612:	b01d      	add	sp, #116	; 0x74
 8015614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015618:	b002      	add	sp, #8
 801561a:	4770      	bx	lr
 801561c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015620:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015624:	bf14      	ite	ne
 8015626:	f104 33ff 	addne.w	r3, r4, #4294967295
 801562a:	4623      	moveq	r3, r4
 801562c:	9304      	str	r3, [sp, #16]
 801562e:	9307      	str	r3, [sp, #28]
 8015630:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015634:	9002      	str	r0, [sp, #8]
 8015636:	9006      	str	r0, [sp, #24]
 8015638:	f8ad 3016 	strh.w	r3, [sp, #22]
 801563c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801563e:	ab21      	add	r3, sp, #132	; 0x84
 8015640:	a902      	add	r1, sp, #8
 8015642:	4628      	mov	r0, r5
 8015644:	9301      	str	r3, [sp, #4]
 8015646:	f002 fdf3 	bl	8018230 <_svfiprintf_r>
 801564a:	1c43      	adds	r3, r0, #1
 801564c:	bfbc      	itt	lt
 801564e:	238b      	movlt	r3, #139	; 0x8b
 8015650:	602b      	strlt	r3, [r5, #0]
 8015652:	2c00      	cmp	r4, #0
 8015654:	d0dd      	beq.n	8015612 <sniprintf+0x16>
 8015656:	9b02      	ldr	r3, [sp, #8]
 8015658:	2200      	movs	r2, #0
 801565a:	701a      	strb	r2, [r3, #0]
 801565c:	e7d9      	b.n	8015612 <sniprintf+0x16>
 801565e:	bf00      	nop
 8015660:	2000000c 	.word	0x2000000c

08015664 <siprintf>:
 8015664:	b40e      	push	{r1, r2, r3}
 8015666:	b500      	push	{lr}
 8015668:	b09c      	sub	sp, #112	; 0x70
 801566a:	ab1d      	add	r3, sp, #116	; 0x74
 801566c:	9002      	str	r0, [sp, #8]
 801566e:	9006      	str	r0, [sp, #24]
 8015670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015674:	4809      	ldr	r0, [pc, #36]	; (801569c <siprintf+0x38>)
 8015676:	9107      	str	r1, [sp, #28]
 8015678:	9104      	str	r1, [sp, #16]
 801567a:	4909      	ldr	r1, [pc, #36]	; (80156a0 <siprintf+0x3c>)
 801567c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015680:	9105      	str	r1, [sp, #20]
 8015682:	6800      	ldr	r0, [r0, #0]
 8015684:	9301      	str	r3, [sp, #4]
 8015686:	a902      	add	r1, sp, #8
 8015688:	f002 fdd2 	bl	8018230 <_svfiprintf_r>
 801568c:	9b02      	ldr	r3, [sp, #8]
 801568e:	2200      	movs	r2, #0
 8015690:	701a      	strb	r2, [r3, #0]
 8015692:	b01c      	add	sp, #112	; 0x70
 8015694:	f85d eb04 	ldr.w	lr, [sp], #4
 8015698:	b003      	add	sp, #12
 801569a:	4770      	bx	lr
 801569c:	2000000c 	.word	0x2000000c
 80156a0:	ffff0208 	.word	0xffff0208

080156a4 <siscanf>:
 80156a4:	b40e      	push	{r1, r2, r3}
 80156a6:	b530      	push	{r4, r5, lr}
 80156a8:	b09c      	sub	sp, #112	; 0x70
 80156aa:	ac1f      	add	r4, sp, #124	; 0x7c
 80156ac:	f44f 7201 	mov.w	r2, #516	; 0x204
 80156b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80156b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80156b8:	9002      	str	r0, [sp, #8]
 80156ba:	9006      	str	r0, [sp, #24]
 80156bc:	f7ea fda0 	bl	8000200 <strlen>
 80156c0:	4b0b      	ldr	r3, [pc, #44]	; (80156f0 <siscanf+0x4c>)
 80156c2:	9003      	str	r0, [sp, #12]
 80156c4:	9007      	str	r0, [sp, #28]
 80156c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80156c8:	480a      	ldr	r0, [pc, #40]	; (80156f4 <siscanf+0x50>)
 80156ca:	9401      	str	r4, [sp, #4]
 80156cc:	2300      	movs	r3, #0
 80156ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80156d0:	9314      	str	r3, [sp, #80]	; 0x50
 80156d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80156d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80156da:	462a      	mov	r2, r5
 80156dc:	4623      	mov	r3, r4
 80156de:	a902      	add	r1, sp, #8
 80156e0:	6800      	ldr	r0, [r0, #0]
 80156e2:	f002 fef7 	bl	80184d4 <__ssvfiscanf_r>
 80156e6:	b01c      	add	sp, #112	; 0x70
 80156e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80156ec:	b003      	add	sp, #12
 80156ee:	4770      	bx	lr
 80156f0:	080156f9 	.word	0x080156f9
 80156f4:	2000000c 	.word	0x2000000c

080156f8 <__seofread>:
 80156f8:	2000      	movs	r0, #0
 80156fa:	4770      	bx	lr

080156fc <strcpy>:
 80156fc:	4603      	mov	r3, r0
 80156fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015702:	f803 2b01 	strb.w	r2, [r3], #1
 8015706:	2a00      	cmp	r2, #0
 8015708:	d1f9      	bne.n	80156fe <strcpy+0x2>
 801570a:	4770      	bx	lr

0801570c <sulp>:
 801570c:	b570      	push	{r4, r5, r6, lr}
 801570e:	4604      	mov	r4, r0
 8015710:	460d      	mov	r5, r1
 8015712:	ec45 4b10 	vmov	d0, r4, r5
 8015716:	4616      	mov	r6, r2
 8015718:	f002 fb46 	bl	8017da8 <__ulp>
 801571c:	ec51 0b10 	vmov	r0, r1, d0
 8015720:	b17e      	cbz	r6, 8015742 <sulp+0x36>
 8015722:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015726:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801572a:	2b00      	cmp	r3, #0
 801572c:	dd09      	ble.n	8015742 <sulp+0x36>
 801572e:	051b      	lsls	r3, r3, #20
 8015730:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015734:	2400      	movs	r4, #0
 8015736:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801573a:	4622      	mov	r2, r4
 801573c:	462b      	mov	r3, r5
 801573e:	f7ea ff73 	bl	8000628 <__aeabi_dmul>
 8015742:	bd70      	pop	{r4, r5, r6, pc}
 8015744:	0000      	movs	r0, r0
	...

08015748 <_strtod_l>:
 8015748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801574c:	461f      	mov	r7, r3
 801574e:	b0a1      	sub	sp, #132	; 0x84
 8015750:	2300      	movs	r3, #0
 8015752:	4681      	mov	r9, r0
 8015754:	4638      	mov	r0, r7
 8015756:	460e      	mov	r6, r1
 8015758:	9217      	str	r2, [sp, #92]	; 0x5c
 801575a:	931c      	str	r3, [sp, #112]	; 0x70
 801575c:	f002 f824 	bl	80177a8 <__localeconv_l>
 8015760:	4680      	mov	r8, r0
 8015762:	6800      	ldr	r0, [r0, #0]
 8015764:	f7ea fd4c 	bl	8000200 <strlen>
 8015768:	f04f 0a00 	mov.w	sl, #0
 801576c:	4604      	mov	r4, r0
 801576e:	f04f 0b00 	mov.w	fp, #0
 8015772:	961b      	str	r6, [sp, #108]	; 0x6c
 8015774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015776:	781a      	ldrb	r2, [r3, #0]
 8015778:	2a0d      	cmp	r2, #13
 801577a:	d832      	bhi.n	80157e2 <_strtod_l+0x9a>
 801577c:	2a09      	cmp	r2, #9
 801577e:	d236      	bcs.n	80157ee <_strtod_l+0xa6>
 8015780:	2a00      	cmp	r2, #0
 8015782:	d03e      	beq.n	8015802 <_strtod_l+0xba>
 8015784:	2300      	movs	r3, #0
 8015786:	930d      	str	r3, [sp, #52]	; 0x34
 8015788:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801578a:	782b      	ldrb	r3, [r5, #0]
 801578c:	2b30      	cmp	r3, #48	; 0x30
 801578e:	f040 80ac 	bne.w	80158ea <_strtod_l+0x1a2>
 8015792:	786b      	ldrb	r3, [r5, #1]
 8015794:	2b58      	cmp	r3, #88	; 0x58
 8015796:	d001      	beq.n	801579c <_strtod_l+0x54>
 8015798:	2b78      	cmp	r3, #120	; 0x78
 801579a:	d167      	bne.n	801586c <_strtod_l+0x124>
 801579c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801579e:	9301      	str	r3, [sp, #4]
 80157a0:	ab1c      	add	r3, sp, #112	; 0x70
 80157a2:	9300      	str	r3, [sp, #0]
 80157a4:	9702      	str	r7, [sp, #8]
 80157a6:	ab1d      	add	r3, sp, #116	; 0x74
 80157a8:	4a88      	ldr	r2, [pc, #544]	; (80159cc <_strtod_l+0x284>)
 80157aa:	a91b      	add	r1, sp, #108	; 0x6c
 80157ac:	4648      	mov	r0, r9
 80157ae:	f001 fd12 	bl	80171d6 <__gethex>
 80157b2:	f010 0407 	ands.w	r4, r0, #7
 80157b6:	4606      	mov	r6, r0
 80157b8:	d005      	beq.n	80157c6 <_strtod_l+0x7e>
 80157ba:	2c06      	cmp	r4, #6
 80157bc:	d12b      	bne.n	8015816 <_strtod_l+0xce>
 80157be:	3501      	adds	r5, #1
 80157c0:	2300      	movs	r3, #0
 80157c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80157c4:	930d      	str	r3, [sp, #52]	; 0x34
 80157c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	f040 859a 	bne.w	8016302 <_strtod_l+0xbba>
 80157ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80157d0:	b1e3      	cbz	r3, 801580c <_strtod_l+0xc4>
 80157d2:	4652      	mov	r2, sl
 80157d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80157d8:	ec43 2b10 	vmov	d0, r2, r3
 80157dc:	b021      	add	sp, #132	; 0x84
 80157de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e2:	2a2b      	cmp	r2, #43	; 0x2b
 80157e4:	d015      	beq.n	8015812 <_strtod_l+0xca>
 80157e6:	2a2d      	cmp	r2, #45	; 0x2d
 80157e8:	d004      	beq.n	80157f4 <_strtod_l+0xac>
 80157ea:	2a20      	cmp	r2, #32
 80157ec:	d1ca      	bne.n	8015784 <_strtod_l+0x3c>
 80157ee:	3301      	adds	r3, #1
 80157f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80157f2:	e7bf      	b.n	8015774 <_strtod_l+0x2c>
 80157f4:	2201      	movs	r2, #1
 80157f6:	920d      	str	r2, [sp, #52]	; 0x34
 80157f8:	1c5a      	adds	r2, r3, #1
 80157fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80157fc:	785b      	ldrb	r3, [r3, #1]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d1c2      	bne.n	8015788 <_strtod_l+0x40>
 8015802:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015804:	961b      	str	r6, [sp, #108]	; 0x6c
 8015806:	2b00      	cmp	r3, #0
 8015808:	f040 8579 	bne.w	80162fe <_strtod_l+0xbb6>
 801580c:	4652      	mov	r2, sl
 801580e:	465b      	mov	r3, fp
 8015810:	e7e2      	b.n	80157d8 <_strtod_l+0x90>
 8015812:	2200      	movs	r2, #0
 8015814:	e7ef      	b.n	80157f6 <_strtod_l+0xae>
 8015816:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015818:	b13a      	cbz	r2, 801582a <_strtod_l+0xe2>
 801581a:	2135      	movs	r1, #53	; 0x35
 801581c:	a81e      	add	r0, sp, #120	; 0x78
 801581e:	f002 fbbb 	bl	8017f98 <__copybits>
 8015822:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015824:	4648      	mov	r0, r9
 8015826:	f002 f828 	bl	801787a <_Bfree>
 801582a:	3c01      	subs	r4, #1
 801582c:	2c04      	cmp	r4, #4
 801582e:	d806      	bhi.n	801583e <_strtod_l+0xf6>
 8015830:	e8df f004 	tbb	[pc, r4]
 8015834:	1714030a 	.word	0x1714030a
 8015838:	0a          	.byte	0x0a
 8015839:	00          	.byte	0x00
 801583a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801583e:	0730      	lsls	r0, r6, #28
 8015840:	d5c1      	bpl.n	80157c6 <_strtod_l+0x7e>
 8015842:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015846:	e7be      	b.n	80157c6 <_strtod_l+0x7e>
 8015848:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801584c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801584e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015852:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015856:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801585a:	e7f0      	b.n	801583e <_strtod_l+0xf6>
 801585c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80159d0 <_strtod_l+0x288>
 8015860:	e7ed      	b.n	801583e <_strtod_l+0xf6>
 8015862:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015866:	f04f 3aff 	mov.w	sl, #4294967295
 801586a:	e7e8      	b.n	801583e <_strtod_l+0xf6>
 801586c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801586e:	1c5a      	adds	r2, r3, #1
 8015870:	921b      	str	r2, [sp, #108]	; 0x6c
 8015872:	785b      	ldrb	r3, [r3, #1]
 8015874:	2b30      	cmp	r3, #48	; 0x30
 8015876:	d0f9      	beq.n	801586c <_strtod_l+0x124>
 8015878:	2b00      	cmp	r3, #0
 801587a:	d0a4      	beq.n	80157c6 <_strtod_l+0x7e>
 801587c:	2301      	movs	r3, #1
 801587e:	2500      	movs	r5, #0
 8015880:	9306      	str	r3, [sp, #24]
 8015882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015884:	9308      	str	r3, [sp, #32]
 8015886:	9507      	str	r5, [sp, #28]
 8015888:	9505      	str	r5, [sp, #20]
 801588a:	220a      	movs	r2, #10
 801588c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801588e:	7807      	ldrb	r7, [r0, #0]
 8015890:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015894:	b2d9      	uxtb	r1, r3
 8015896:	2909      	cmp	r1, #9
 8015898:	d929      	bls.n	80158ee <_strtod_l+0x1a6>
 801589a:	4622      	mov	r2, r4
 801589c:	f8d8 1000 	ldr.w	r1, [r8]
 80158a0:	f003 f902 	bl	8018aa8 <strncmp>
 80158a4:	2800      	cmp	r0, #0
 80158a6:	d031      	beq.n	801590c <_strtod_l+0x1c4>
 80158a8:	2000      	movs	r0, #0
 80158aa:	9c05      	ldr	r4, [sp, #20]
 80158ac:	9004      	str	r0, [sp, #16]
 80158ae:	463b      	mov	r3, r7
 80158b0:	4602      	mov	r2, r0
 80158b2:	2b65      	cmp	r3, #101	; 0x65
 80158b4:	d001      	beq.n	80158ba <_strtod_l+0x172>
 80158b6:	2b45      	cmp	r3, #69	; 0x45
 80158b8:	d114      	bne.n	80158e4 <_strtod_l+0x19c>
 80158ba:	b924      	cbnz	r4, 80158c6 <_strtod_l+0x17e>
 80158bc:	b910      	cbnz	r0, 80158c4 <_strtod_l+0x17c>
 80158be:	9b06      	ldr	r3, [sp, #24]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d09e      	beq.n	8015802 <_strtod_l+0xba>
 80158c4:	2400      	movs	r4, #0
 80158c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80158c8:	1c73      	adds	r3, r6, #1
 80158ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80158cc:	7873      	ldrb	r3, [r6, #1]
 80158ce:	2b2b      	cmp	r3, #43	; 0x2b
 80158d0:	d078      	beq.n	80159c4 <_strtod_l+0x27c>
 80158d2:	2b2d      	cmp	r3, #45	; 0x2d
 80158d4:	d070      	beq.n	80159b8 <_strtod_l+0x270>
 80158d6:	f04f 0c00 	mov.w	ip, #0
 80158da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80158de:	2f09      	cmp	r7, #9
 80158e0:	d97c      	bls.n	80159dc <_strtod_l+0x294>
 80158e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80158e4:	f04f 0e00 	mov.w	lr, #0
 80158e8:	e09a      	b.n	8015a20 <_strtod_l+0x2d8>
 80158ea:	2300      	movs	r3, #0
 80158ec:	e7c7      	b.n	801587e <_strtod_l+0x136>
 80158ee:	9905      	ldr	r1, [sp, #20]
 80158f0:	2908      	cmp	r1, #8
 80158f2:	bfdd      	ittte	le
 80158f4:	9907      	ldrle	r1, [sp, #28]
 80158f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80158fa:	9307      	strle	r3, [sp, #28]
 80158fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015900:	9b05      	ldr	r3, [sp, #20]
 8015902:	3001      	adds	r0, #1
 8015904:	3301      	adds	r3, #1
 8015906:	9305      	str	r3, [sp, #20]
 8015908:	901b      	str	r0, [sp, #108]	; 0x6c
 801590a:	e7bf      	b.n	801588c <_strtod_l+0x144>
 801590c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801590e:	191a      	adds	r2, r3, r4
 8015910:	921b      	str	r2, [sp, #108]	; 0x6c
 8015912:	9a05      	ldr	r2, [sp, #20]
 8015914:	5d1b      	ldrb	r3, [r3, r4]
 8015916:	2a00      	cmp	r2, #0
 8015918:	d037      	beq.n	801598a <_strtod_l+0x242>
 801591a:	9c05      	ldr	r4, [sp, #20]
 801591c:	4602      	mov	r2, r0
 801591e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015922:	2909      	cmp	r1, #9
 8015924:	d913      	bls.n	801594e <_strtod_l+0x206>
 8015926:	2101      	movs	r1, #1
 8015928:	9104      	str	r1, [sp, #16]
 801592a:	e7c2      	b.n	80158b2 <_strtod_l+0x16a>
 801592c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801592e:	1c5a      	adds	r2, r3, #1
 8015930:	921b      	str	r2, [sp, #108]	; 0x6c
 8015932:	785b      	ldrb	r3, [r3, #1]
 8015934:	3001      	adds	r0, #1
 8015936:	2b30      	cmp	r3, #48	; 0x30
 8015938:	d0f8      	beq.n	801592c <_strtod_l+0x1e4>
 801593a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801593e:	2a08      	cmp	r2, #8
 8015940:	f200 84e4 	bhi.w	801630c <_strtod_l+0xbc4>
 8015944:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015946:	9208      	str	r2, [sp, #32]
 8015948:	4602      	mov	r2, r0
 801594a:	2000      	movs	r0, #0
 801594c:	4604      	mov	r4, r0
 801594e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015952:	f100 0101 	add.w	r1, r0, #1
 8015956:	d012      	beq.n	801597e <_strtod_l+0x236>
 8015958:	440a      	add	r2, r1
 801595a:	eb00 0c04 	add.w	ip, r0, r4
 801595e:	4621      	mov	r1, r4
 8015960:	270a      	movs	r7, #10
 8015962:	458c      	cmp	ip, r1
 8015964:	d113      	bne.n	801598e <_strtod_l+0x246>
 8015966:	1821      	adds	r1, r4, r0
 8015968:	2908      	cmp	r1, #8
 801596a:	f104 0401 	add.w	r4, r4, #1
 801596e:	4404      	add	r4, r0
 8015970:	dc19      	bgt.n	80159a6 <_strtod_l+0x25e>
 8015972:	9b07      	ldr	r3, [sp, #28]
 8015974:	210a      	movs	r1, #10
 8015976:	fb01 e303 	mla	r3, r1, r3, lr
 801597a:	9307      	str	r3, [sp, #28]
 801597c:	2100      	movs	r1, #0
 801597e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015980:	1c58      	adds	r0, r3, #1
 8015982:	901b      	str	r0, [sp, #108]	; 0x6c
 8015984:	785b      	ldrb	r3, [r3, #1]
 8015986:	4608      	mov	r0, r1
 8015988:	e7c9      	b.n	801591e <_strtod_l+0x1d6>
 801598a:	9805      	ldr	r0, [sp, #20]
 801598c:	e7d3      	b.n	8015936 <_strtod_l+0x1ee>
 801598e:	2908      	cmp	r1, #8
 8015990:	f101 0101 	add.w	r1, r1, #1
 8015994:	dc03      	bgt.n	801599e <_strtod_l+0x256>
 8015996:	9b07      	ldr	r3, [sp, #28]
 8015998:	437b      	muls	r3, r7
 801599a:	9307      	str	r3, [sp, #28]
 801599c:	e7e1      	b.n	8015962 <_strtod_l+0x21a>
 801599e:	2910      	cmp	r1, #16
 80159a0:	bfd8      	it	le
 80159a2:	437d      	mulle	r5, r7
 80159a4:	e7dd      	b.n	8015962 <_strtod_l+0x21a>
 80159a6:	2c10      	cmp	r4, #16
 80159a8:	bfdc      	itt	le
 80159aa:	210a      	movle	r1, #10
 80159ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80159b0:	e7e4      	b.n	801597c <_strtod_l+0x234>
 80159b2:	2301      	movs	r3, #1
 80159b4:	9304      	str	r3, [sp, #16]
 80159b6:	e781      	b.n	80158bc <_strtod_l+0x174>
 80159b8:	f04f 0c01 	mov.w	ip, #1
 80159bc:	1cb3      	adds	r3, r6, #2
 80159be:	931b      	str	r3, [sp, #108]	; 0x6c
 80159c0:	78b3      	ldrb	r3, [r6, #2]
 80159c2:	e78a      	b.n	80158da <_strtod_l+0x192>
 80159c4:	f04f 0c00 	mov.w	ip, #0
 80159c8:	e7f8      	b.n	80159bc <_strtod_l+0x274>
 80159ca:	bf00      	nop
 80159cc:	0801925c 	.word	0x0801925c
 80159d0:	7ff00000 	.word	0x7ff00000
 80159d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159d6:	1c5f      	adds	r7, r3, #1
 80159d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80159da:	785b      	ldrb	r3, [r3, #1]
 80159dc:	2b30      	cmp	r3, #48	; 0x30
 80159de:	d0f9      	beq.n	80159d4 <_strtod_l+0x28c>
 80159e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80159e4:	2f08      	cmp	r7, #8
 80159e6:	f63f af7d 	bhi.w	80158e4 <_strtod_l+0x19c>
 80159ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80159ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159f0:	930a      	str	r3, [sp, #40]	; 0x28
 80159f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80159f4:	1c5f      	adds	r7, r3, #1
 80159f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80159f8:	785b      	ldrb	r3, [r3, #1]
 80159fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80159fe:	f1b8 0f09 	cmp.w	r8, #9
 8015a02:	d937      	bls.n	8015a74 <_strtod_l+0x32c>
 8015a04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8015a06:	1a7f      	subs	r7, r7, r1
 8015a08:	2f08      	cmp	r7, #8
 8015a0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015a0e:	dc37      	bgt.n	8015a80 <_strtod_l+0x338>
 8015a10:	45be      	cmp	lr, r7
 8015a12:	bfa8      	it	ge
 8015a14:	46be      	movge	lr, r7
 8015a16:	f1bc 0f00 	cmp.w	ip, #0
 8015a1a:	d001      	beq.n	8015a20 <_strtod_l+0x2d8>
 8015a1c:	f1ce 0e00 	rsb	lr, lr, #0
 8015a20:	2c00      	cmp	r4, #0
 8015a22:	d151      	bne.n	8015ac8 <_strtod_l+0x380>
 8015a24:	2800      	cmp	r0, #0
 8015a26:	f47f aece 	bne.w	80157c6 <_strtod_l+0x7e>
 8015a2a:	9a06      	ldr	r2, [sp, #24]
 8015a2c:	2a00      	cmp	r2, #0
 8015a2e:	f47f aeca 	bne.w	80157c6 <_strtod_l+0x7e>
 8015a32:	9a04      	ldr	r2, [sp, #16]
 8015a34:	2a00      	cmp	r2, #0
 8015a36:	f47f aee4 	bne.w	8015802 <_strtod_l+0xba>
 8015a3a:	2b4e      	cmp	r3, #78	; 0x4e
 8015a3c:	d027      	beq.n	8015a8e <_strtod_l+0x346>
 8015a3e:	dc21      	bgt.n	8015a84 <_strtod_l+0x33c>
 8015a40:	2b49      	cmp	r3, #73	; 0x49
 8015a42:	f47f aede 	bne.w	8015802 <_strtod_l+0xba>
 8015a46:	49a0      	ldr	r1, [pc, #640]	; (8015cc8 <_strtod_l+0x580>)
 8015a48:	a81b      	add	r0, sp, #108	; 0x6c
 8015a4a:	f001 fdf7 	bl	801763c <__match>
 8015a4e:	2800      	cmp	r0, #0
 8015a50:	f43f aed7 	beq.w	8015802 <_strtod_l+0xba>
 8015a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a56:	499d      	ldr	r1, [pc, #628]	; (8015ccc <_strtod_l+0x584>)
 8015a58:	3b01      	subs	r3, #1
 8015a5a:	a81b      	add	r0, sp, #108	; 0x6c
 8015a5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a5e:	f001 fded 	bl	801763c <__match>
 8015a62:	b910      	cbnz	r0, 8015a6a <_strtod_l+0x322>
 8015a64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a66:	3301      	adds	r3, #1
 8015a68:	931b      	str	r3, [sp, #108]	; 0x6c
 8015a6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015ce0 <_strtod_l+0x598>
 8015a6e:	f04f 0a00 	mov.w	sl, #0
 8015a72:	e6a8      	b.n	80157c6 <_strtod_l+0x7e>
 8015a74:	210a      	movs	r1, #10
 8015a76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015a7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015a7e:	e7b8      	b.n	80159f2 <_strtod_l+0x2aa>
 8015a80:	46be      	mov	lr, r7
 8015a82:	e7c8      	b.n	8015a16 <_strtod_l+0x2ce>
 8015a84:	2b69      	cmp	r3, #105	; 0x69
 8015a86:	d0de      	beq.n	8015a46 <_strtod_l+0x2fe>
 8015a88:	2b6e      	cmp	r3, #110	; 0x6e
 8015a8a:	f47f aeba 	bne.w	8015802 <_strtod_l+0xba>
 8015a8e:	4990      	ldr	r1, [pc, #576]	; (8015cd0 <_strtod_l+0x588>)
 8015a90:	a81b      	add	r0, sp, #108	; 0x6c
 8015a92:	f001 fdd3 	bl	801763c <__match>
 8015a96:	2800      	cmp	r0, #0
 8015a98:	f43f aeb3 	beq.w	8015802 <_strtod_l+0xba>
 8015a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	2b28      	cmp	r3, #40	; 0x28
 8015aa2:	d10e      	bne.n	8015ac2 <_strtod_l+0x37a>
 8015aa4:	aa1e      	add	r2, sp, #120	; 0x78
 8015aa6:	498b      	ldr	r1, [pc, #556]	; (8015cd4 <_strtod_l+0x58c>)
 8015aa8:	a81b      	add	r0, sp, #108	; 0x6c
 8015aaa:	f001 fddb 	bl	8017664 <__hexnan>
 8015aae:	2805      	cmp	r0, #5
 8015ab0:	d107      	bne.n	8015ac2 <_strtod_l+0x37a>
 8015ab2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015ab4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8015ab8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8015abc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8015ac0:	e681      	b.n	80157c6 <_strtod_l+0x7e>
 8015ac2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015ce8 <_strtod_l+0x5a0>
 8015ac6:	e7d2      	b.n	8015a6e <_strtod_l+0x326>
 8015ac8:	ebae 0302 	sub.w	r3, lr, r2
 8015acc:	9306      	str	r3, [sp, #24]
 8015ace:	9b05      	ldr	r3, [sp, #20]
 8015ad0:	9807      	ldr	r0, [sp, #28]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	bf08      	it	eq
 8015ad6:	4623      	moveq	r3, r4
 8015ad8:	2c10      	cmp	r4, #16
 8015ada:	9305      	str	r3, [sp, #20]
 8015adc:	46a0      	mov	r8, r4
 8015ade:	bfa8      	it	ge
 8015ae0:	f04f 0810 	movge.w	r8, #16
 8015ae4:	f7ea fd26 	bl	8000534 <__aeabi_ui2d>
 8015ae8:	2c09      	cmp	r4, #9
 8015aea:	4682      	mov	sl, r0
 8015aec:	468b      	mov	fp, r1
 8015aee:	dc13      	bgt.n	8015b18 <_strtod_l+0x3d0>
 8015af0:	9b06      	ldr	r3, [sp, #24]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	f43f ae67 	beq.w	80157c6 <_strtod_l+0x7e>
 8015af8:	9b06      	ldr	r3, [sp, #24]
 8015afa:	dd7a      	ble.n	8015bf2 <_strtod_l+0x4aa>
 8015afc:	2b16      	cmp	r3, #22
 8015afe:	dc61      	bgt.n	8015bc4 <_strtod_l+0x47c>
 8015b00:	4a75      	ldr	r2, [pc, #468]	; (8015cd8 <_strtod_l+0x590>)
 8015b02:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8015b06:	e9de 0100 	ldrd	r0, r1, [lr]
 8015b0a:	4652      	mov	r2, sl
 8015b0c:	465b      	mov	r3, fp
 8015b0e:	f7ea fd8b 	bl	8000628 <__aeabi_dmul>
 8015b12:	4682      	mov	sl, r0
 8015b14:	468b      	mov	fp, r1
 8015b16:	e656      	b.n	80157c6 <_strtod_l+0x7e>
 8015b18:	4b6f      	ldr	r3, [pc, #444]	; (8015cd8 <_strtod_l+0x590>)
 8015b1a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015b1e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015b22:	f7ea fd81 	bl	8000628 <__aeabi_dmul>
 8015b26:	4606      	mov	r6, r0
 8015b28:	4628      	mov	r0, r5
 8015b2a:	460f      	mov	r7, r1
 8015b2c:	f7ea fd02 	bl	8000534 <__aeabi_ui2d>
 8015b30:	4602      	mov	r2, r0
 8015b32:	460b      	mov	r3, r1
 8015b34:	4630      	mov	r0, r6
 8015b36:	4639      	mov	r1, r7
 8015b38:	f7ea fbc0 	bl	80002bc <__adddf3>
 8015b3c:	2c0f      	cmp	r4, #15
 8015b3e:	4682      	mov	sl, r0
 8015b40:	468b      	mov	fp, r1
 8015b42:	ddd5      	ble.n	8015af0 <_strtod_l+0x3a8>
 8015b44:	9b06      	ldr	r3, [sp, #24]
 8015b46:	eba4 0808 	sub.w	r8, r4, r8
 8015b4a:	4498      	add	r8, r3
 8015b4c:	f1b8 0f00 	cmp.w	r8, #0
 8015b50:	f340 8096 	ble.w	8015c80 <_strtod_l+0x538>
 8015b54:	f018 030f 	ands.w	r3, r8, #15
 8015b58:	d00a      	beq.n	8015b70 <_strtod_l+0x428>
 8015b5a:	495f      	ldr	r1, [pc, #380]	; (8015cd8 <_strtod_l+0x590>)
 8015b5c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015b60:	4652      	mov	r2, sl
 8015b62:	465b      	mov	r3, fp
 8015b64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b68:	f7ea fd5e 	bl	8000628 <__aeabi_dmul>
 8015b6c:	4682      	mov	sl, r0
 8015b6e:	468b      	mov	fp, r1
 8015b70:	f038 080f 	bics.w	r8, r8, #15
 8015b74:	d073      	beq.n	8015c5e <_strtod_l+0x516>
 8015b76:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8015b7a:	dd47      	ble.n	8015c0c <_strtod_l+0x4c4>
 8015b7c:	2400      	movs	r4, #0
 8015b7e:	46a0      	mov	r8, r4
 8015b80:	9407      	str	r4, [sp, #28]
 8015b82:	9405      	str	r4, [sp, #20]
 8015b84:	2322      	movs	r3, #34	; 0x22
 8015b86:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015ce0 <_strtod_l+0x598>
 8015b8a:	f8c9 3000 	str.w	r3, [r9]
 8015b8e:	f04f 0a00 	mov.w	sl, #0
 8015b92:	9b07      	ldr	r3, [sp, #28]
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	f43f ae16 	beq.w	80157c6 <_strtod_l+0x7e>
 8015b9a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015b9c:	4648      	mov	r0, r9
 8015b9e:	f001 fe6c 	bl	801787a <_Bfree>
 8015ba2:	9905      	ldr	r1, [sp, #20]
 8015ba4:	4648      	mov	r0, r9
 8015ba6:	f001 fe68 	bl	801787a <_Bfree>
 8015baa:	4641      	mov	r1, r8
 8015bac:	4648      	mov	r0, r9
 8015bae:	f001 fe64 	bl	801787a <_Bfree>
 8015bb2:	9907      	ldr	r1, [sp, #28]
 8015bb4:	4648      	mov	r0, r9
 8015bb6:	f001 fe60 	bl	801787a <_Bfree>
 8015bba:	4621      	mov	r1, r4
 8015bbc:	4648      	mov	r0, r9
 8015bbe:	f001 fe5c 	bl	801787a <_Bfree>
 8015bc2:	e600      	b.n	80157c6 <_strtod_l+0x7e>
 8015bc4:	9a06      	ldr	r2, [sp, #24]
 8015bc6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	dbba      	blt.n	8015b44 <_strtod_l+0x3fc>
 8015bce:	4d42      	ldr	r5, [pc, #264]	; (8015cd8 <_strtod_l+0x590>)
 8015bd0:	f1c4 040f 	rsb	r4, r4, #15
 8015bd4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015bd8:	4652      	mov	r2, sl
 8015bda:	465b      	mov	r3, fp
 8015bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015be0:	f7ea fd22 	bl	8000628 <__aeabi_dmul>
 8015be4:	9b06      	ldr	r3, [sp, #24]
 8015be6:	1b1c      	subs	r4, r3, r4
 8015be8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015bec:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015bf0:	e78d      	b.n	8015b0e <_strtod_l+0x3c6>
 8015bf2:	f113 0f16 	cmn.w	r3, #22
 8015bf6:	dba5      	blt.n	8015b44 <_strtod_l+0x3fc>
 8015bf8:	4a37      	ldr	r2, [pc, #220]	; (8015cd8 <_strtod_l+0x590>)
 8015bfa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015bfe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015c02:	4650      	mov	r0, sl
 8015c04:	4659      	mov	r1, fp
 8015c06:	f7ea fe39 	bl	800087c <__aeabi_ddiv>
 8015c0a:	e782      	b.n	8015b12 <_strtod_l+0x3ca>
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	4e33      	ldr	r6, [pc, #204]	; (8015cdc <_strtod_l+0x594>)
 8015c10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015c14:	4650      	mov	r0, sl
 8015c16:	4659      	mov	r1, fp
 8015c18:	461d      	mov	r5, r3
 8015c1a:	f1b8 0f01 	cmp.w	r8, #1
 8015c1e:	dc21      	bgt.n	8015c64 <_strtod_l+0x51c>
 8015c20:	b10b      	cbz	r3, 8015c26 <_strtod_l+0x4de>
 8015c22:	4682      	mov	sl, r0
 8015c24:	468b      	mov	fp, r1
 8015c26:	4b2d      	ldr	r3, [pc, #180]	; (8015cdc <_strtod_l+0x594>)
 8015c28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015c2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015c30:	4652      	mov	r2, sl
 8015c32:	465b      	mov	r3, fp
 8015c34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015c38:	f7ea fcf6 	bl	8000628 <__aeabi_dmul>
 8015c3c:	4b28      	ldr	r3, [pc, #160]	; (8015ce0 <_strtod_l+0x598>)
 8015c3e:	460a      	mov	r2, r1
 8015c40:	400b      	ands	r3, r1
 8015c42:	4928      	ldr	r1, [pc, #160]	; (8015ce4 <_strtod_l+0x59c>)
 8015c44:	428b      	cmp	r3, r1
 8015c46:	4682      	mov	sl, r0
 8015c48:	d898      	bhi.n	8015b7c <_strtod_l+0x434>
 8015c4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015c4e:	428b      	cmp	r3, r1
 8015c50:	bf86      	itte	hi
 8015c52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015cec <_strtod_l+0x5a4>
 8015c56:	f04f 3aff 	movhi.w	sl, #4294967295
 8015c5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015c5e:	2300      	movs	r3, #0
 8015c60:	9304      	str	r3, [sp, #16]
 8015c62:	e077      	b.n	8015d54 <_strtod_l+0x60c>
 8015c64:	f018 0f01 	tst.w	r8, #1
 8015c68:	d006      	beq.n	8015c78 <_strtod_l+0x530>
 8015c6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c72:	f7ea fcd9 	bl	8000628 <__aeabi_dmul>
 8015c76:	2301      	movs	r3, #1
 8015c78:	3501      	adds	r5, #1
 8015c7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015c7e:	e7cc      	b.n	8015c1a <_strtod_l+0x4d2>
 8015c80:	d0ed      	beq.n	8015c5e <_strtod_l+0x516>
 8015c82:	f1c8 0800 	rsb	r8, r8, #0
 8015c86:	f018 020f 	ands.w	r2, r8, #15
 8015c8a:	d00a      	beq.n	8015ca2 <_strtod_l+0x55a>
 8015c8c:	4b12      	ldr	r3, [pc, #72]	; (8015cd8 <_strtod_l+0x590>)
 8015c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015c92:	4650      	mov	r0, sl
 8015c94:	4659      	mov	r1, fp
 8015c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c9a:	f7ea fdef 	bl	800087c <__aeabi_ddiv>
 8015c9e:	4682      	mov	sl, r0
 8015ca0:	468b      	mov	fp, r1
 8015ca2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015ca6:	d0da      	beq.n	8015c5e <_strtod_l+0x516>
 8015ca8:	f1b8 0f1f 	cmp.w	r8, #31
 8015cac:	dd20      	ble.n	8015cf0 <_strtod_l+0x5a8>
 8015cae:	2400      	movs	r4, #0
 8015cb0:	46a0      	mov	r8, r4
 8015cb2:	9407      	str	r4, [sp, #28]
 8015cb4:	9405      	str	r4, [sp, #20]
 8015cb6:	2322      	movs	r3, #34	; 0x22
 8015cb8:	f04f 0a00 	mov.w	sl, #0
 8015cbc:	f04f 0b00 	mov.w	fp, #0
 8015cc0:	f8c9 3000 	str.w	r3, [r9]
 8015cc4:	e765      	b.n	8015b92 <_strtod_l+0x44a>
 8015cc6:	bf00      	nop
 8015cc8:	08019229 	.word	0x08019229
 8015ccc:	080192b3 	.word	0x080192b3
 8015cd0:	08019231 	.word	0x08019231
 8015cd4:	08019270 	.word	0x08019270
 8015cd8:	080192f0 	.word	0x080192f0
 8015cdc:	080192c8 	.word	0x080192c8
 8015ce0:	7ff00000 	.word	0x7ff00000
 8015ce4:	7ca00000 	.word	0x7ca00000
 8015ce8:	fff80000 	.word	0xfff80000
 8015cec:	7fefffff 	.word	0x7fefffff
 8015cf0:	f018 0310 	ands.w	r3, r8, #16
 8015cf4:	bf18      	it	ne
 8015cf6:	236a      	movne	r3, #106	; 0x6a
 8015cf8:	4da0      	ldr	r5, [pc, #640]	; (8015f7c <_strtod_l+0x834>)
 8015cfa:	9304      	str	r3, [sp, #16]
 8015cfc:	4650      	mov	r0, sl
 8015cfe:	4659      	mov	r1, fp
 8015d00:	2300      	movs	r3, #0
 8015d02:	f1b8 0f00 	cmp.w	r8, #0
 8015d06:	f300 810a 	bgt.w	8015f1e <_strtod_l+0x7d6>
 8015d0a:	b10b      	cbz	r3, 8015d10 <_strtod_l+0x5c8>
 8015d0c:	4682      	mov	sl, r0
 8015d0e:	468b      	mov	fp, r1
 8015d10:	9b04      	ldr	r3, [sp, #16]
 8015d12:	b1bb      	cbz	r3, 8015d44 <_strtod_l+0x5fc>
 8015d14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015d18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	4659      	mov	r1, fp
 8015d20:	dd10      	ble.n	8015d44 <_strtod_l+0x5fc>
 8015d22:	2b1f      	cmp	r3, #31
 8015d24:	f340 8107 	ble.w	8015f36 <_strtod_l+0x7ee>
 8015d28:	2b34      	cmp	r3, #52	; 0x34
 8015d2a:	bfde      	ittt	le
 8015d2c:	3b20      	suble	r3, #32
 8015d2e:	f04f 32ff 	movle.w	r2, #4294967295
 8015d32:	fa02 f303 	lslle.w	r3, r2, r3
 8015d36:	f04f 0a00 	mov.w	sl, #0
 8015d3a:	bfcc      	ite	gt
 8015d3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015d40:	ea03 0b01 	andle.w	fp, r3, r1
 8015d44:	2200      	movs	r2, #0
 8015d46:	2300      	movs	r3, #0
 8015d48:	4650      	mov	r0, sl
 8015d4a:	4659      	mov	r1, fp
 8015d4c:	f7ea fed4 	bl	8000af8 <__aeabi_dcmpeq>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d1ac      	bne.n	8015cae <_strtod_l+0x566>
 8015d54:	9b07      	ldr	r3, [sp, #28]
 8015d56:	9300      	str	r3, [sp, #0]
 8015d58:	9a05      	ldr	r2, [sp, #20]
 8015d5a:	9908      	ldr	r1, [sp, #32]
 8015d5c:	4623      	mov	r3, r4
 8015d5e:	4648      	mov	r0, r9
 8015d60:	f001 fddd 	bl	801791e <__s2b>
 8015d64:	9007      	str	r0, [sp, #28]
 8015d66:	2800      	cmp	r0, #0
 8015d68:	f43f af08 	beq.w	8015b7c <_strtod_l+0x434>
 8015d6c:	9a06      	ldr	r2, [sp, #24]
 8015d6e:	9b06      	ldr	r3, [sp, #24]
 8015d70:	2a00      	cmp	r2, #0
 8015d72:	f1c3 0300 	rsb	r3, r3, #0
 8015d76:	bfa8      	it	ge
 8015d78:	2300      	movge	r3, #0
 8015d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8015d7c:	2400      	movs	r4, #0
 8015d7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015d82:	9316      	str	r3, [sp, #88]	; 0x58
 8015d84:	46a0      	mov	r8, r4
 8015d86:	9b07      	ldr	r3, [sp, #28]
 8015d88:	4648      	mov	r0, r9
 8015d8a:	6859      	ldr	r1, [r3, #4]
 8015d8c:	f001 fd41 	bl	8017812 <_Balloc>
 8015d90:	9005      	str	r0, [sp, #20]
 8015d92:	2800      	cmp	r0, #0
 8015d94:	f43f aef6 	beq.w	8015b84 <_strtod_l+0x43c>
 8015d98:	9b07      	ldr	r3, [sp, #28]
 8015d9a:	691a      	ldr	r2, [r3, #16]
 8015d9c:	3202      	adds	r2, #2
 8015d9e:	f103 010c 	add.w	r1, r3, #12
 8015da2:	0092      	lsls	r2, r2, #2
 8015da4:	300c      	adds	r0, #12
 8015da6:	f001 fd29 	bl	80177fc <memcpy>
 8015daa:	aa1e      	add	r2, sp, #120	; 0x78
 8015dac:	a91d      	add	r1, sp, #116	; 0x74
 8015dae:	ec4b ab10 	vmov	d0, sl, fp
 8015db2:	4648      	mov	r0, r9
 8015db4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015db8:	f002 f86c 	bl	8017e94 <__d2b>
 8015dbc:	901c      	str	r0, [sp, #112]	; 0x70
 8015dbe:	2800      	cmp	r0, #0
 8015dc0:	f43f aee0 	beq.w	8015b84 <_strtod_l+0x43c>
 8015dc4:	2101      	movs	r1, #1
 8015dc6:	4648      	mov	r0, r9
 8015dc8:	f001 fe35 	bl	8017a36 <__i2b>
 8015dcc:	4680      	mov	r8, r0
 8015dce:	2800      	cmp	r0, #0
 8015dd0:	f43f aed8 	beq.w	8015b84 <_strtod_l+0x43c>
 8015dd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015dd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015dd8:	2e00      	cmp	r6, #0
 8015dda:	bfab      	itete	ge
 8015ddc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015dde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015de0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015de2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015de4:	bfac      	ite	ge
 8015de6:	18f7      	addge	r7, r6, r3
 8015de8:	1b9d      	sublt	r5, r3, r6
 8015dea:	9b04      	ldr	r3, [sp, #16]
 8015dec:	1af6      	subs	r6, r6, r3
 8015dee:	4416      	add	r6, r2
 8015df0:	4b63      	ldr	r3, [pc, #396]	; (8015f80 <_strtod_l+0x838>)
 8015df2:	3e01      	subs	r6, #1
 8015df4:	429e      	cmp	r6, r3
 8015df6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015dfa:	f280 80af 	bge.w	8015f5c <_strtod_l+0x814>
 8015dfe:	1b9b      	subs	r3, r3, r6
 8015e00:	2b1f      	cmp	r3, #31
 8015e02:	eba2 0203 	sub.w	r2, r2, r3
 8015e06:	f04f 0101 	mov.w	r1, #1
 8015e0a:	f300 809b 	bgt.w	8015f44 <_strtod_l+0x7fc>
 8015e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8015e12:	930f      	str	r3, [sp, #60]	; 0x3c
 8015e14:	2300      	movs	r3, #0
 8015e16:	930a      	str	r3, [sp, #40]	; 0x28
 8015e18:	18be      	adds	r6, r7, r2
 8015e1a:	9b04      	ldr	r3, [sp, #16]
 8015e1c:	42b7      	cmp	r7, r6
 8015e1e:	4415      	add	r5, r2
 8015e20:	441d      	add	r5, r3
 8015e22:	463b      	mov	r3, r7
 8015e24:	bfa8      	it	ge
 8015e26:	4633      	movge	r3, r6
 8015e28:	42ab      	cmp	r3, r5
 8015e2a:	bfa8      	it	ge
 8015e2c:	462b      	movge	r3, r5
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	bfc2      	ittt	gt
 8015e32:	1af6      	subgt	r6, r6, r3
 8015e34:	1aed      	subgt	r5, r5, r3
 8015e36:	1aff      	subgt	r7, r7, r3
 8015e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e3a:	b1bb      	cbz	r3, 8015e6c <_strtod_l+0x724>
 8015e3c:	4641      	mov	r1, r8
 8015e3e:	461a      	mov	r2, r3
 8015e40:	4648      	mov	r0, r9
 8015e42:	f001 fe97 	bl	8017b74 <__pow5mult>
 8015e46:	4680      	mov	r8, r0
 8015e48:	2800      	cmp	r0, #0
 8015e4a:	f43f ae9b 	beq.w	8015b84 <_strtod_l+0x43c>
 8015e4e:	4601      	mov	r1, r0
 8015e50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e52:	4648      	mov	r0, r9
 8015e54:	f001 fdf8 	bl	8017a48 <__multiply>
 8015e58:	900c      	str	r0, [sp, #48]	; 0x30
 8015e5a:	2800      	cmp	r0, #0
 8015e5c:	f43f ae92 	beq.w	8015b84 <_strtod_l+0x43c>
 8015e60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e62:	4648      	mov	r0, r9
 8015e64:	f001 fd09 	bl	801787a <_Bfree>
 8015e68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e6a:	931c      	str	r3, [sp, #112]	; 0x70
 8015e6c:	2e00      	cmp	r6, #0
 8015e6e:	dc7a      	bgt.n	8015f66 <_strtod_l+0x81e>
 8015e70:	9b06      	ldr	r3, [sp, #24]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	dd08      	ble.n	8015e88 <_strtod_l+0x740>
 8015e76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e78:	9905      	ldr	r1, [sp, #20]
 8015e7a:	4648      	mov	r0, r9
 8015e7c:	f001 fe7a 	bl	8017b74 <__pow5mult>
 8015e80:	9005      	str	r0, [sp, #20]
 8015e82:	2800      	cmp	r0, #0
 8015e84:	f43f ae7e 	beq.w	8015b84 <_strtod_l+0x43c>
 8015e88:	2d00      	cmp	r5, #0
 8015e8a:	dd08      	ble.n	8015e9e <_strtod_l+0x756>
 8015e8c:	462a      	mov	r2, r5
 8015e8e:	9905      	ldr	r1, [sp, #20]
 8015e90:	4648      	mov	r0, r9
 8015e92:	f001 febd 	bl	8017c10 <__lshift>
 8015e96:	9005      	str	r0, [sp, #20]
 8015e98:	2800      	cmp	r0, #0
 8015e9a:	f43f ae73 	beq.w	8015b84 <_strtod_l+0x43c>
 8015e9e:	2f00      	cmp	r7, #0
 8015ea0:	dd08      	ble.n	8015eb4 <_strtod_l+0x76c>
 8015ea2:	4641      	mov	r1, r8
 8015ea4:	463a      	mov	r2, r7
 8015ea6:	4648      	mov	r0, r9
 8015ea8:	f001 feb2 	bl	8017c10 <__lshift>
 8015eac:	4680      	mov	r8, r0
 8015eae:	2800      	cmp	r0, #0
 8015eb0:	f43f ae68 	beq.w	8015b84 <_strtod_l+0x43c>
 8015eb4:	9a05      	ldr	r2, [sp, #20]
 8015eb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015eb8:	4648      	mov	r0, r9
 8015eba:	f001 ff17 	bl	8017cec <__mdiff>
 8015ebe:	4604      	mov	r4, r0
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	f43f ae5f 	beq.w	8015b84 <_strtod_l+0x43c>
 8015ec6:	68c3      	ldr	r3, [r0, #12]
 8015ec8:	930c      	str	r3, [sp, #48]	; 0x30
 8015eca:	2300      	movs	r3, #0
 8015ecc:	60c3      	str	r3, [r0, #12]
 8015ece:	4641      	mov	r1, r8
 8015ed0:	f001 fef2 	bl	8017cb8 <__mcmp>
 8015ed4:	2800      	cmp	r0, #0
 8015ed6:	da55      	bge.n	8015f84 <_strtod_l+0x83c>
 8015ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015eda:	b9e3      	cbnz	r3, 8015f16 <_strtod_l+0x7ce>
 8015edc:	f1ba 0f00 	cmp.w	sl, #0
 8015ee0:	d119      	bne.n	8015f16 <_strtod_l+0x7ce>
 8015ee2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ee6:	b9b3      	cbnz	r3, 8015f16 <_strtod_l+0x7ce>
 8015ee8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015eec:	0d1b      	lsrs	r3, r3, #20
 8015eee:	051b      	lsls	r3, r3, #20
 8015ef0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015ef4:	d90f      	bls.n	8015f16 <_strtod_l+0x7ce>
 8015ef6:	6963      	ldr	r3, [r4, #20]
 8015ef8:	b913      	cbnz	r3, 8015f00 <_strtod_l+0x7b8>
 8015efa:	6923      	ldr	r3, [r4, #16]
 8015efc:	2b01      	cmp	r3, #1
 8015efe:	dd0a      	ble.n	8015f16 <_strtod_l+0x7ce>
 8015f00:	4621      	mov	r1, r4
 8015f02:	2201      	movs	r2, #1
 8015f04:	4648      	mov	r0, r9
 8015f06:	f001 fe83 	bl	8017c10 <__lshift>
 8015f0a:	4641      	mov	r1, r8
 8015f0c:	4604      	mov	r4, r0
 8015f0e:	f001 fed3 	bl	8017cb8 <__mcmp>
 8015f12:	2800      	cmp	r0, #0
 8015f14:	dc67      	bgt.n	8015fe6 <_strtod_l+0x89e>
 8015f16:	9b04      	ldr	r3, [sp, #16]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d171      	bne.n	8016000 <_strtod_l+0x8b8>
 8015f1c:	e63d      	b.n	8015b9a <_strtod_l+0x452>
 8015f1e:	f018 0f01 	tst.w	r8, #1
 8015f22:	d004      	beq.n	8015f2e <_strtod_l+0x7e6>
 8015f24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015f28:	f7ea fb7e 	bl	8000628 <__aeabi_dmul>
 8015f2c:	2301      	movs	r3, #1
 8015f2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015f32:	3508      	adds	r5, #8
 8015f34:	e6e5      	b.n	8015d02 <_strtod_l+0x5ba>
 8015f36:	f04f 32ff 	mov.w	r2, #4294967295
 8015f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8015f3e:	ea03 0a0a 	and.w	sl, r3, sl
 8015f42:	e6ff      	b.n	8015d44 <_strtod_l+0x5fc>
 8015f44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015f48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015f4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015f50:	36e2      	adds	r6, #226	; 0xe2
 8015f52:	fa01 f306 	lsl.w	r3, r1, r6
 8015f56:	930a      	str	r3, [sp, #40]	; 0x28
 8015f58:	910f      	str	r1, [sp, #60]	; 0x3c
 8015f5a:	e75d      	b.n	8015e18 <_strtod_l+0x6d0>
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8015f60:	2301      	movs	r3, #1
 8015f62:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f64:	e758      	b.n	8015e18 <_strtod_l+0x6d0>
 8015f66:	4632      	mov	r2, r6
 8015f68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f6a:	4648      	mov	r0, r9
 8015f6c:	f001 fe50 	bl	8017c10 <__lshift>
 8015f70:	901c      	str	r0, [sp, #112]	; 0x70
 8015f72:	2800      	cmp	r0, #0
 8015f74:	f47f af7c 	bne.w	8015e70 <_strtod_l+0x728>
 8015f78:	e604      	b.n	8015b84 <_strtod_l+0x43c>
 8015f7a:	bf00      	nop
 8015f7c:	08019288 	.word	0x08019288
 8015f80:	fffffc02 	.word	0xfffffc02
 8015f84:	465d      	mov	r5, fp
 8015f86:	f040 8086 	bne.w	8016096 <_strtod_l+0x94e>
 8015f8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015f8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f90:	b32a      	cbz	r2, 8015fde <_strtod_l+0x896>
 8015f92:	4aaf      	ldr	r2, [pc, #700]	; (8016250 <_strtod_l+0xb08>)
 8015f94:	4293      	cmp	r3, r2
 8015f96:	d153      	bne.n	8016040 <_strtod_l+0x8f8>
 8015f98:	9b04      	ldr	r3, [sp, #16]
 8015f9a:	4650      	mov	r0, sl
 8015f9c:	b1d3      	cbz	r3, 8015fd4 <_strtod_l+0x88c>
 8015f9e:	4aad      	ldr	r2, [pc, #692]	; (8016254 <_strtod_l+0xb0c>)
 8015fa0:	402a      	ands	r2, r5
 8015fa2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8015faa:	d816      	bhi.n	8015fda <_strtod_l+0x892>
 8015fac:	0d12      	lsrs	r2, r2, #20
 8015fae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8015fb6:	4298      	cmp	r0, r3
 8015fb8:	d142      	bne.n	8016040 <_strtod_l+0x8f8>
 8015fba:	4ba7      	ldr	r3, [pc, #668]	; (8016258 <_strtod_l+0xb10>)
 8015fbc:	429d      	cmp	r5, r3
 8015fbe:	d102      	bne.n	8015fc6 <_strtod_l+0x87e>
 8015fc0:	3001      	adds	r0, #1
 8015fc2:	f43f addf 	beq.w	8015b84 <_strtod_l+0x43c>
 8015fc6:	4ba3      	ldr	r3, [pc, #652]	; (8016254 <_strtod_l+0xb0c>)
 8015fc8:	402b      	ands	r3, r5
 8015fca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015fce:	f04f 0a00 	mov.w	sl, #0
 8015fd2:	e7a0      	b.n	8015f16 <_strtod_l+0x7ce>
 8015fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd8:	e7ed      	b.n	8015fb6 <_strtod_l+0x86e>
 8015fda:	460b      	mov	r3, r1
 8015fdc:	e7eb      	b.n	8015fb6 <_strtod_l+0x86e>
 8015fde:	bb7b      	cbnz	r3, 8016040 <_strtod_l+0x8f8>
 8015fe0:	f1ba 0f00 	cmp.w	sl, #0
 8015fe4:	d12c      	bne.n	8016040 <_strtod_l+0x8f8>
 8015fe6:	9904      	ldr	r1, [sp, #16]
 8015fe8:	4a9a      	ldr	r2, [pc, #616]	; (8016254 <_strtod_l+0xb0c>)
 8015fea:	465b      	mov	r3, fp
 8015fec:	b1f1      	cbz	r1, 801602c <_strtod_l+0x8e4>
 8015fee:	ea02 010b 	and.w	r1, r2, fp
 8015ff2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015ff6:	dc19      	bgt.n	801602c <_strtod_l+0x8e4>
 8015ff8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015ffc:	f77f ae5b 	ble.w	8015cb6 <_strtod_l+0x56e>
 8016000:	4a96      	ldr	r2, [pc, #600]	; (801625c <_strtod_l+0xb14>)
 8016002:	2300      	movs	r3, #0
 8016004:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016008:	4650      	mov	r0, sl
 801600a:	4659      	mov	r1, fp
 801600c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016010:	f7ea fb0a 	bl	8000628 <__aeabi_dmul>
 8016014:	4682      	mov	sl, r0
 8016016:	468b      	mov	fp, r1
 8016018:	2900      	cmp	r1, #0
 801601a:	f47f adbe 	bne.w	8015b9a <_strtod_l+0x452>
 801601e:	2800      	cmp	r0, #0
 8016020:	f47f adbb 	bne.w	8015b9a <_strtod_l+0x452>
 8016024:	2322      	movs	r3, #34	; 0x22
 8016026:	f8c9 3000 	str.w	r3, [r9]
 801602a:	e5b6      	b.n	8015b9a <_strtod_l+0x452>
 801602c:	4013      	ands	r3, r2
 801602e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016032:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016036:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801603a:	f04f 3aff 	mov.w	sl, #4294967295
 801603e:	e76a      	b.n	8015f16 <_strtod_l+0x7ce>
 8016040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016042:	b193      	cbz	r3, 801606a <_strtod_l+0x922>
 8016044:	422b      	tst	r3, r5
 8016046:	f43f af66 	beq.w	8015f16 <_strtod_l+0x7ce>
 801604a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801604c:	9a04      	ldr	r2, [sp, #16]
 801604e:	4650      	mov	r0, sl
 8016050:	4659      	mov	r1, fp
 8016052:	b173      	cbz	r3, 8016072 <_strtod_l+0x92a>
 8016054:	f7ff fb5a 	bl	801570c <sulp>
 8016058:	4602      	mov	r2, r0
 801605a:	460b      	mov	r3, r1
 801605c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016060:	f7ea f92c 	bl	80002bc <__adddf3>
 8016064:	4682      	mov	sl, r0
 8016066:	468b      	mov	fp, r1
 8016068:	e755      	b.n	8015f16 <_strtod_l+0x7ce>
 801606a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801606c:	ea13 0f0a 	tst.w	r3, sl
 8016070:	e7e9      	b.n	8016046 <_strtod_l+0x8fe>
 8016072:	f7ff fb4b 	bl	801570c <sulp>
 8016076:	4602      	mov	r2, r0
 8016078:	460b      	mov	r3, r1
 801607a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801607e:	f7ea f91b 	bl	80002b8 <__aeabi_dsub>
 8016082:	2200      	movs	r2, #0
 8016084:	2300      	movs	r3, #0
 8016086:	4682      	mov	sl, r0
 8016088:	468b      	mov	fp, r1
 801608a:	f7ea fd35 	bl	8000af8 <__aeabi_dcmpeq>
 801608e:	2800      	cmp	r0, #0
 8016090:	f47f ae11 	bne.w	8015cb6 <_strtod_l+0x56e>
 8016094:	e73f      	b.n	8015f16 <_strtod_l+0x7ce>
 8016096:	4641      	mov	r1, r8
 8016098:	4620      	mov	r0, r4
 801609a:	f001 ff4a 	bl	8017f32 <__ratio>
 801609e:	ec57 6b10 	vmov	r6, r7, d0
 80160a2:	2200      	movs	r2, #0
 80160a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80160a8:	ee10 0a10 	vmov	r0, s0
 80160ac:	4639      	mov	r1, r7
 80160ae:	f7ea fd37 	bl	8000b20 <__aeabi_dcmple>
 80160b2:	2800      	cmp	r0, #0
 80160b4:	d077      	beq.n	80161a6 <_strtod_l+0xa5e>
 80160b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d04a      	beq.n	8016152 <_strtod_l+0xa0a>
 80160bc:	4b68      	ldr	r3, [pc, #416]	; (8016260 <_strtod_l+0xb18>)
 80160be:	2200      	movs	r2, #0
 80160c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160c4:	4f66      	ldr	r7, [pc, #408]	; (8016260 <_strtod_l+0xb18>)
 80160c6:	2600      	movs	r6, #0
 80160c8:	4b62      	ldr	r3, [pc, #392]	; (8016254 <_strtod_l+0xb0c>)
 80160ca:	402b      	ands	r3, r5
 80160cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80160ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160d0:	4b64      	ldr	r3, [pc, #400]	; (8016264 <_strtod_l+0xb1c>)
 80160d2:	429a      	cmp	r2, r3
 80160d4:	f040 80ce 	bne.w	8016274 <_strtod_l+0xb2c>
 80160d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80160dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80160e4:	ec4b ab10 	vmov	d0, sl, fp
 80160e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80160ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80160f0:	f001 fe5a 	bl	8017da8 <__ulp>
 80160f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80160f8:	ec53 2b10 	vmov	r2, r3, d0
 80160fc:	f7ea fa94 	bl	8000628 <__aeabi_dmul>
 8016100:	4652      	mov	r2, sl
 8016102:	465b      	mov	r3, fp
 8016104:	f7ea f8da 	bl	80002bc <__adddf3>
 8016108:	460b      	mov	r3, r1
 801610a:	4952      	ldr	r1, [pc, #328]	; (8016254 <_strtod_l+0xb0c>)
 801610c:	4a56      	ldr	r2, [pc, #344]	; (8016268 <_strtod_l+0xb20>)
 801610e:	4019      	ands	r1, r3
 8016110:	4291      	cmp	r1, r2
 8016112:	4682      	mov	sl, r0
 8016114:	d95b      	bls.n	80161ce <_strtod_l+0xa86>
 8016116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016118:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801611c:	4293      	cmp	r3, r2
 801611e:	d103      	bne.n	8016128 <_strtod_l+0x9e0>
 8016120:	9b08      	ldr	r3, [sp, #32]
 8016122:	3301      	adds	r3, #1
 8016124:	f43f ad2e 	beq.w	8015b84 <_strtod_l+0x43c>
 8016128:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016258 <_strtod_l+0xb10>
 801612c:	f04f 3aff 	mov.w	sl, #4294967295
 8016130:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016132:	4648      	mov	r0, r9
 8016134:	f001 fba1 	bl	801787a <_Bfree>
 8016138:	9905      	ldr	r1, [sp, #20]
 801613a:	4648      	mov	r0, r9
 801613c:	f001 fb9d 	bl	801787a <_Bfree>
 8016140:	4641      	mov	r1, r8
 8016142:	4648      	mov	r0, r9
 8016144:	f001 fb99 	bl	801787a <_Bfree>
 8016148:	4621      	mov	r1, r4
 801614a:	4648      	mov	r0, r9
 801614c:	f001 fb95 	bl	801787a <_Bfree>
 8016150:	e619      	b.n	8015d86 <_strtod_l+0x63e>
 8016152:	f1ba 0f00 	cmp.w	sl, #0
 8016156:	d11a      	bne.n	801618e <_strtod_l+0xa46>
 8016158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801615c:	b9eb      	cbnz	r3, 801619a <_strtod_l+0xa52>
 801615e:	2200      	movs	r2, #0
 8016160:	4b3f      	ldr	r3, [pc, #252]	; (8016260 <_strtod_l+0xb18>)
 8016162:	4630      	mov	r0, r6
 8016164:	4639      	mov	r1, r7
 8016166:	f7ea fcd1 	bl	8000b0c <__aeabi_dcmplt>
 801616a:	b9c8      	cbnz	r0, 80161a0 <_strtod_l+0xa58>
 801616c:	4630      	mov	r0, r6
 801616e:	4639      	mov	r1, r7
 8016170:	2200      	movs	r2, #0
 8016172:	4b3e      	ldr	r3, [pc, #248]	; (801626c <_strtod_l+0xb24>)
 8016174:	f7ea fa58 	bl	8000628 <__aeabi_dmul>
 8016178:	4606      	mov	r6, r0
 801617a:	460f      	mov	r7, r1
 801617c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016180:	9618      	str	r6, [sp, #96]	; 0x60
 8016182:	9319      	str	r3, [sp, #100]	; 0x64
 8016184:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016188:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801618c:	e79c      	b.n	80160c8 <_strtod_l+0x980>
 801618e:	f1ba 0f01 	cmp.w	sl, #1
 8016192:	d102      	bne.n	801619a <_strtod_l+0xa52>
 8016194:	2d00      	cmp	r5, #0
 8016196:	f43f ad8e 	beq.w	8015cb6 <_strtod_l+0x56e>
 801619a:	2200      	movs	r2, #0
 801619c:	4b34      	ldr	r3, [pc, #208]	; (8016270 <_strtod_l+0xb28>)
 801619e:	e78f      	b.n	80160c0 <_strtod_l+0x978>
 80161a0:	2600      	movs	r6, #0
 80161a2:	4f32      	ldr	r7, [pc, #200]	; (801626c <_strtod_l+0xb24>)
 80161a4:	e7ea      	b.n	801617c <_strtod_l+0xa34>
 80161a6:	4b31      	ldr	r3, [pc, #196]	; (801626c <_strtod_l+0xb24>)
 80161a8:	4630      	mov	r0, r6
 80161aa:	4639      	mov	r1, r7
 80161ac:	2200      	movs	r2, #0
 80161ae:	f7ea fa3b 	bl	8000628 <__aeabi_dmul>
 80161b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80161b4:	4606      	mov	r6, r0
 80161b6:	460f      	mov	r7, r1
 80161b8:	b933      	cbnz	r3, 80161c8 <_strtod_l+0xa80>
 80161ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80161be:	9010      	str	r0, [sp, #64]	; 0x40
 80161c0:	9311      	str	r3, [sp, #68]	; 0x44
 80161c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80161c6:	e7df      	b.n	8016188 <_strtod_l+0xa40>
 80161c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80161cc:	e7f9      	b.n	80161c2 <_strtod_l+0xa7a>
 80161ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80161d2:	9b04      	ldr	r3, [sp, #16]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d1ab      	bne.n	8016130 <_strtod_l+0x9e8>
 80161d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80161dc:	0d1b      	lsrs	r3, r3, #20
 80161de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80161e0:	051b      	lsls	r3, r3, #20
 80161e2:	429a      	cmp	r2, r3
 80161e4:	465d      	mov	r5, fp
 80161e6:	d1a3      	bne.n	8016130 <_strtod_l+0x9e8>
 80161e8:	4639      	mov	r1, r7
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ea fccc 	bl	8000b88 <__aeabi_d2iz>
 80161f0:	f7ea f9b0 	bl	8000554 <__aeabi_i2d>
 80161f4:	460b      	mov	r3, r1
 80161f6:	4602      	mov	r2, r0
 80161f8:	4639      	mov	r1, r7
 80161fa:	4630      	mov	r0, r6
 80161fc:	f7ea f85c 	bl	80002b8 <__aeabi_dsub>
 8016200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016202:	4606      	mov	r6, r0
 8016204:	460f      	mov	r7, r1
 8016206:	b933      	cbnz	r3, 8016216 <_strtod_l+0xace>
 8016208:	f1ba 0f00 	cmp.w	sl, #0
 801620c:	d103      	bne.n	8016216 <_strtod_l+0xace>
 801620e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016212:	2d00      	cmp	r5, #0
 8016214:	d06d      	beq.n	80162f2 <_strtod_l+0xbaa>
 8016216:	a30a      	add	r3, pc, #40	; (adr r3, 8016240 <_strtod_l+0xaf8>)
 8016218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801621c:	4630      	mov	r0, r6
 801621e:	4639      	mov	r1, r7
 8016220:	f7ea fc74 	bl	8000b0c <__aeabi_dcmplt>
 8016224:	2800      	cmp	r0, #0
 8016226:	f47f acb8 	bne.w	8015b9a <_strtod_l+0x452>
 801622a:	a307      	add	r3, pc, #28	; (adr r3, 8016248 <_strtod_l+0xb00>)
 801622c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016230:	4630      	mov	r0, r6
 8016232:	4639      	mov	r1, r7
 8016234:	f7ea fc88 	bl	8000b48 <__aeabi_dcmpgt>
 8016238:	2800      	cmp	r0, #0
 801623a:	f43f af79 	beq.w	8016130 <_strtod_l+0x9e8>
 801623e:	e4ac      	b.n	8015b9a <_strtod_l+0x452>
 8016240:	94a03595 	.word	0x94a03595
 8016244:	3fdfffff 	.word	0x3fdfffff
 8016248:	35afe535 	.word	0x35afe535
 801624c:	3fe00000 	.word	0x3fe00000
 8016250:	000fffff 	.word	0x000fffff
 8016254:	7ff00000 	.word	0x7ff00000
 8016258:	7fefffff 	.word	0x7fefffff
 801625c:	39500000 	.word	0x39500000
 8016260:	3ff00000 	.word	0x3ff00000
 8016264:	7fe00000 	.word	0x7fe00000
 8016268:	7c9fffff 	.word	0x7c9fffff
 801626c:	3fe00000 	.word	0x3fe00000
 8016270:	bff00000 	.word	0xbff00000
 8016274:	9b04      	ldr	r3, [sp, #16]
 8016276:	b333      	cbz	r3, 80162c6 <_strtod_l+0xb7e>
 8016278:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801627a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801627e:	d822      	bhi.n	80162c6 <_strtod_l+0xb7e>
 8016280:	a327      	add	r3, pc, #156	; (adr r3, 8016320 <_strtod_l+0xbd8>)
 8016282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016286:	4630      	mov	r0, r6
 8016288:	4639      	mov	r1, r7
 801628a:	f7ea fc49 	bl	8000b20 <__aeabi_dcmple>
 801628e:	b1a0      	cbz	r0, 80162ba <_strtod_l+0xb72>
 8016290:	4639      	mov	r1, r7
 8016292:	4630      	mov	r0, r6
 8016294:	f7ea fca0 	bl	8000bd8 <__aeabi_d2uiz>
 8016298:	2800      	cmp	r0, #0
 801629a:	bf08      	it	eq
 801629c:	2001      	moveq	r0, #1
 801629e:	f7ea f949 	bl	8000534 <__aeabi_ui2d>
 80162a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80162a4:	4606      	mov	r6, r0
 80162a6:	460f      	mov	r7, r1
 80162a8:	bb03      	cbnz	r3, 80162ec <_strtod_l+0xba4>
 80162aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80162ae:	9012      	str	r0, [sp, #72]	; 0x48
 80162b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80162b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80162b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80162ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80162bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80162be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80162c2:	1a9b      	subs	r3, r3, r2
 80162c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80162c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80162ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80162ce:	f001 fd6b 	bl	8017da8 <__ulp>
 80162d2:	4650      	mov	r0, sl
 80162d4:	ec53 2b10 	vmov	r2, r3, d0
 80162d8:	4659      	mov	r1, fp
 80162da:	f7ea f9a5 	bl	8000628 <__aeabi_dmul>
 80162de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80162e2:	f7e9 ffeb 	bl	80002bc <__adddf3>
 80162e6:	4682      	mov	sl, r0
 80162e8:	468b      	mov	fp, r1
 80162ea:	e772      	b.n	80161d2 <_strtod_l+0xa8a>
 80162ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80162f0:	e7df      	b.n	80162b2 <_strtod_l+0xb6a>
 80162f2:	a30d      	add	r3, pc, #52	; (adr r3, 8016328 <_strtod_l+0xbe0>)
 80162f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f8:	f7ea fc08 	bl	8000b0c <__aeabi_dcmplt>
 80162fc:	e79c      	b.n	8016238 <_strtod_l+0xaf0>
 80162fe:	2300      	movs	r3, #0
 8016300:	930d      	str	r3, [sp, #52]	; 0x34
 8016302:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016306:	6013      	str	r3, [r2, #0]
 8016308:	f7ff ba61 	b.w	80157ce <_strtod_l+0x86>
 801630c:	2b65      	cmp	r3, #101	; 0x65
 801630e:	f04f 0200 	mov.w	r2, #0
 8016312:	f43f ab4e 	beq.w	80159b2 <_strtod_l+0x26a>
 8016316:	2101      	movs	r1, #1
 8016318:	4614      	mov	r4, r2
 801631a:	9104      	str	r1, [sp, #16]
 801631c:	f7ff bacb 	b.w	80158b6 <_strtod_l+0x16e>
 8016320:	ffc00000 	.word	0xffc00000
 8016324:	41dfffff 	.word	0x41dfffff
 8016328:	94a03595 	.word	0x94a03595
 801632c:	3fcfffff 	.word	0x3fcfffff

08016330 <_strtod_r>:
 8016330:	4b05      	ldr	r3, [pc, #20]	; (8016348 <_strtod_r+0x18>)
 8016332:	681b      	ldr	r3, [r3, #0]
 8016334:	b410      	push	{r4}
 8016336:	6a1b      	ldr	r3, [r3, #32]
 8016338:	4c04      	ldr	r4, [pc, #16]	; (801634c <_strtod_r+0x1c>)
 801633a:	2b00      	cmp	r3, #0
 801633c:	bf08      	it	eq
 801633e:	4623      	moveq	r3, r4
 8016340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016344:	f7ff ba00 	b.w	8015748 <_strtod_l>
 8016348:	2000000c 	.word	0x2000000c
 801634c:	20000070 	.word	0x20000070

08016350 <_strtol_l.isra.0>:
 8016350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016354:	4680      	mov	r8, r0
 8016356:	4689      	mov	r9, r1
 8016358:	4692      	mov	sl, r2
 801635a:	461e      	mov	r6, r3
 801635c:	460f      	mov	r7, r1
 801635e:	463d      	mov	r5, r7
 8016360:	9808      	ldr	r0, [sp, #32]
 8016362:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016366:	f001 fa0d 	bl	8017784 <__locale_ctype_ptr_l>
 801636a:	4420      	add	r0, r4
 801636c:	7843      	ldrb	r3, [r0, #1]
 801636e:	f013 0308 	ands.w	r3, r3, #8
 8016372:	d132      	bne.n	80163da <_strtol_l.isra.0+0x8a>
 8016374:	2c2d      	cmp	r4, #45	; 0x2d
 8016376:	d132      	bne.n	80163de <_strtol_l.isra.0+0x8e>
 8016378:	787c      	ldrb	r4, [r7, #1]
 801637a:	1cbd      	adds	r5, r7, #2
 801637c:	2201      	movs	r2, #1
 801637e:	2e00      	cmp	r6, #0
 8016380:	d05d      	beq.n	801643e <_strtol_l.isra.0+0xee>
 8016382:	2e10      	cmp	r6, #16
 8016384:	d109      	bne.n	801639a <_strtol_l.isra.0+0x4a>
 8016386:	2c30      	cmp	r4, #48	; 0x30
 8016388:	d107      	bne.n	801639a <_strtol_l.isra.0+0x4a>
 801638a:	782b      	ldrb	r3, [r5, #0]
 801638c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016390:	2b58      	cmp	r3, #88	; 0x58
 8016392:	d14f      	bne.n	8016434 <_strtol_l.isra.0+0xe4>
 8016394:	786c      	ldrb	r4, [r5, #1]
 8016396:	2610      	movs	r6, #16
 8016398:	3502      	adds	r5, #2
 801639a:	2a00      	cmp	r2, #0
 801639c:	bf14      	ite	ne
 801639e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80163a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80163a6:	2700      	movs	r7, #0
 80163a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80163ac:	4638      	mov	r0, r7
 80163ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80163b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80163b6:	2b09      	cmp	r3, #9
 80163b8:	d817      	bhi.n	80163ea <_strtol_l.isra.0+0x9a>
 80163ba:	461c      	mov	r4, r3
 80163bc:	42a6      	cmp	r6, r4
 80163be:	dd23      	ble.n	8016408 <_strtol_l.isra.0+0xb8>
 80163c0:	1c7b      	adds	r3, r7, #1
 80163c2:	d007      	beq.n	80163d4 <_strtol_l.isra.0+0x84>
 80163c4:	4584      	cmp	ip, r0
 80163c6:	d31c      	bcc.n	8016402 <_strtol_l.isra.0+0xb2>
 80163c8:	d101      	bne.n	80163ce <_strtol_l.isra.0+0x7e>
 80163ca:	45a6      	cmp	lr, r4
 80163cc:	db19      	blt.n	8016402 <_strtol_l.isra.0+0xb2>
 80163ce:	fb00 4006 	mla	r0, r0, r6, r4
 80163d2:	2701      	movs	r7, #1
 80163d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80163d8:	e7eb      	b.n	80163b2 <_strtol_l.isra.0+0x62>
 80163da:	462f      	mov	r7, r5
 80163dc:	e7bf      	b.n	801635e <_strtol_l.isra.0+0xe>
 80163de:	2c2b      	cmp	r4, #43	; 0x2b
 80163e0:	bf04      	itt	eq
 80163e2:	1cbd      	addeq	r5, r7, #2
 80163e4:	787c      	ldrbeq	r4, [r7, #1]
 80163e6:	461a      	mov	r2, r3
 80163e8:	e7c9      	b.n	801637e <_strtol_l.isra.0+0x2e>
 80163ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80163ee:	2b19      	cmp	r3, #25
 80163f0:	d801      	bhi.n	80163f6 <_strtol_l.isra.0+0xa6>
 80163f2:	3c37      	subs	r4, #55	; 0x37
 80163f4:	e7e2      	b.n	80163bc <_strtol_l.isra.0+0x6c>
 80163f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80163fa:	2b19      	cmp	r3, #25
 80163fc:	d804      	bhi.n	8016408 <_strtol_l.isra.0+0xb8>
 80163fe:	3c57      	subs	r4, #87	; 0x57
 8016400:	e7dc      	b.n	80163bc <_strtol_l.isra.0+0x6c>
 8016402:	f04f 37ff 	mov.w	r7, #4294967295
 8016406:	e7e5      	b.n	80163d4 <_strtol_l.isra.0+0x84>
 8016408:	1c7b      	adds	r3, r7, #1
 801640a:	d108      	bne.n	801641e <_strtol_l.isra.0+0xce>
 801640c:	2322      	movs	r3, #34	; 0x22
 801640e:	f8c8 3000 	str.w	r3, [r8]
 8016412:	4608      	mov	r0, r1
 8016414:	f1ba 0f00 	cmp.w	sl, #0
 8016418:	d107      	bne.n	801642a <_strtol_l.isra.0+0xda>
 801641a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801641e:	b102      	cbz	r2, 8016422 <_strtol_l.isra.0+0xd2>
 8016420:	4240      	negs	r0, r0
 8016422:	f1ba 0f00 	cmp.w	sl, #0
 8016426:	d0f8      	beq.n	801641a <_strtol_l.isra.0+0xca>
 8016428:	b10f      	cbz	r7, 801642e <_strtol_l.isra.0+0xde>
 801642a:	f105 39ff 	add.w	r9, r5, #4294967295
 801642e:	f8ca 9000 	str.w	r9, [sl]
 8016432:	e7f2      	b.n	801641a <_strtol_l.isra.0+0xca>
 8016434:	2430      	movs	r4, #48	; 0x30
 8016436:	2e00      	cmp	r6, #0
 8016438:	d1af      	bne.n	801639a <_strtol_l.isra.0+0x4a>
 801643a:	2608      	movs	r6, #8
 801643c:	e7ad      	b.n	801639a <_strtol_l.isra.0+0x4a>
 801643e:	2c30      	cmp	r4, #48	; 0x30
 8016440:	d0a3      	beq.n	801638a <_strtol_l.isra.0+0x3a>
 8016442:	260a      	movs	r6, #10
 8016444:	e7a9      	b.n	801639a <_strtol_l.isra.0+0x4a>
	...

08016448 <_strtol_r>:
 8016448:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801644a:	4c06      	ldr	r4, [pc, #24]	; (8016464 <_strtol_r+0x1c>)
 801644c:	4d06      	ldr	r5, [pc, #24]	; (8016468 <_strtol_r+0x20>)
 801644e:	6824      	ldr	r4, [r4, #0]
 8016450:	6a24      	ldr	r4, [r4, #32]
 8016452:	2c00      	cmp	r4, #0
 8016454:	bf08      	it	eq
 8016456:	462c      	moveq	r4, r5
 8016458:	9400      	str	r4, [sp, #0]
 801645a:	f7ff ff79 	bl	8016350 <_strtol_l.isra.0>
 801645e:	b003      	add	sp, #12
 8016460:	bd30      	pop	{r4, r5, pc}
 8016462:	bf00      	nop
 8016464:	2000000c 	.word	0x2000000c
 8016468:	20000070 	.word	0x20000070

0801646c <_vsiprintf_r>:
 801646c:	b500      	push	{lr}
 801646e:	b09b      	sub	sp, #108	; 0x6c
 8016470:	9100      	str	r1, [sp, #0]
 8016472:	9104      	str	r1, [sp, #16]
 8016474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016478:	9105      	str	r1, [sp, #20]
 801647a:	9102      	str	r1, [sp, #8]
 801647c:	4905      	ldr	r1, [pc, #20]	; (8016494 <_vsiprintf_r+0x28>)
 801647e:	9103      	str	r1, [sp, #12]
 8016480:	4669      	mov	r1, sp
 8016482:	f001 fed5 	bl	8018230 <_svfiprintf_r>
 8016486:	9b00      	ldr	r3, [sp, #0]
 8016488:	2200      	movs	r2, #0
 801648a:	701a      	strb	r2, [r3, #0]
 801648c:	b01b      	add	sp, #108	; 0x6c
 801648e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016492:	bf00      	nop
 8016494:	ffff0208 	.word	0xffff0208

08016498 <vsiprintf>:
 8016498:	4613      	mov	r3, r2
 801649a:	460a      	mov	r2, r1
 801649c:	4601      	mov	r1, r0
 801649e:	4802      	ldr	r0, [pc, #8]	; (80164a8 <vsiprintf+0x10>)
 80164a0:	6800      	ldr	r0, [r0, #0]
 80164a2:	f7ff bfe3 	b.w	801646c <_vsiprintf_r>
 80164a6:	bf00      	nop
 80164a8:	2000000c 	.word	0x2000000c

080164ac <quorem>:
 80164ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164b0:	6903      	ldr	r3, [r0, #16]
 80164b2:	690c      	ldr	r4, [r1, #16]
 80164b4:	42a3      	cmp	r3, r4
 80164b6:	4680      	mov	r8, r0
 80164b8:	f2c0 8082 	blt.w	80165c0 <quorem+0x114>
 80164bc:	3c01      	subs	r4, #1
 80164be:	f101 0714 	add.w	r7, r1, #20
 80164c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80164c6:	f100 0614 	add.w	r6, r0, #20
 80164ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80164ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80164d2:	eb06 030c 	add.w	r3, r6, ip
 80164d6:	3501      	adds	r5, #1
 80164d8:	eb07 090c 	add.w	r9, r7, ip
 80164dc:	9301      	str	r3, [sp, #4]
 80164de:	fbb0 f5f5 	udiv	r5, r0, r5
 80164e2:	b395      	cbz	r5, 801654a <quorem+0x9e>
 80164e4:	f04f 0a00 	mov.w	sl, #0
 80164e8:	4638      	mov	r0, r7
 80164ea:	46b6      	mov	lr, r6
 80164ec:	46d3      	mov	fp, sl
 80164ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80164f2:	b293      	uxth	r3, r2
 80164f4:	fb05 a303 	mla	r3, r5, r3, sl
 80164f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	ebab 0303 	sub.w	r3, fp, r3
 8016502:	0c12      	lsrs	r2, r2, #16
 8016504:	f8de b000 	ldr.w	fp, [lr]
 8016508:	fb05 a202 	mla	r2, r5, r2, sl
 801650c:	fa13 f38b 	uxtah	r3, r3, fp
 8016510:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016514:	fa1f fb82 	uxth.w	fp, r2
 8016518:	f8de 2000 	ldr.w	r2, [lr]
 801651c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016524:	b29b      	uxth	r3, r3
 8016526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801652a:	4581      	cmp	r9, r0
 801652c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016530:	f84e 3b04 	str.w	r3, [lr], #4
 8016534:	d2db      	bcs.n	80164ee <quorem+0x42>
 8016536:	f856 300c 	ldr.w	r3, [r6, ip]
 801653a:	b933      	cbnz	r3, 801654a <quorem+0x9e>
 801653c:	9b01      	ldr	r3, [sp, #4]
 801653e:	3b04      	subs	r3, #4
 8016540:	429e      	cmp	r6, r3
 8016542:	461a      	mov	r2, r3
 8016544:	d330      	bcc.n	80165a8 <quorem+0xfc>
 8016546:	f8c8 4010 	str.w	r4, [r8, #16]
 801654a:	4640      	mov	r0, r8
 801654c:	f001 fbb4 	bl	8017cb8 <__mcmp>
 8016550:	2800      	cmp	r0, #0
 8016552:	db25      	blt.n	80165a0 <quorem+0xf4>
 8016554:	3501      	adds	r5, #1
 8016556:	4630      	mov	r0, r6
 8016558:	f04f 0c00 	mov.w	ip, #0
 801655c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016560:	f8d0 e000 	ldr.w	lr, [r0]
 8016564:	b293      	uxth	r3, r2
 8016566:	ebac 0303 	sub.w	r3, ip, r3
 801656a:	0c12      	lsrs	r2, r2, #16
 801656c:	fa13 f38e 	uxtah	r3, r3, lr
 8016570:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016574:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016578:	b29b      	uxth	r3, r3
 801657a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801657e:	45b9      	cmp	r9, r7
 8016580:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016584:	f840 3b04 	str.w	r3, [r0], #4
 8016588:	d2e8      	bcs.n	801655c <quorem+0xb0>
 801658a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801658e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016592:	b92a      	cbnz	r2, 80165a0 <quorem+0xf4>
 8016594:	3b04      	subs	r3, #4
 8016596:	429e      	cmp	r6, r3
 8016598:	461a      	mov	r2, r3
 801659a:	d30b      	bcc.n	80165b4 <quorem+0x108>
 801659c:	f8c8 4010 	str.w	r4, [r8, #16]
 80165a0:	4628      	mov	r0, r5
 80165a2:	b003      	add	sp, #12
 80165a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165a8:	6812      	ldr	r2, [r2, #0]
 80165aa:	3b04      	subs	r3, #4
 80165ac:	2a00      	cmp	r2, #0
 80165ae:	d1ca      	bne.n	8016546 <quorem+0x9a>
 80165b0:	3c01      	subs	r4, #1
 80165b2:	e7c5      	b.n	8016540 <quorem+0x94>
 80165b4:	6812      	ldr	r2, [r2, #0]
 80165b6:	3b04      	subs	r3, #4
 80165b8:	2a00      	cmp	r2, #0
 80165ba:	d1ef      	bne.n	801659c <quorem+0xf0>
 80165bc:	3c01      	subs	r4, #1
 80165be:	e7ea      	b.n	8016596 <quorem+0xea>
 80165c0:	2000      	movs	r0, #0
 80165c2:	e7ee      	b.n	80165a2 <quorem+0xf6>
 80165c4:	0000      	movs	r0, r0
	...

080165c8 <_dtoa_r>:
 80165c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165cc:	ec57 6b10 	vmov	r6, r7, d0
 80165d0:	b097      	sub	sp, #92	; 0x5c
 80165d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80165d4:	9106      	str	r1, [sp, #24]
 80165d6:	4604      	mov	r4, r0
 80165d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80165da:	9312      	str	r3, [sp, #72]	; 0x48
 80165dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80165e0:	e9cd 6700 	strd	r6, r7, [sp]
 80165e4:	b93d      	cbnz	r5, 80165f6 <_dtoa_r+0x2e>
 80165e6:	2010      	movs	r0, #16
 80165e8:	f001 f8ee 	bl	80177c8 <malloc>
 80165ec:	6260      	str	r0, [r4, #36]	; 0x24
 80165ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80165f2:	6005      	str	r5, [r0, #0]
 80165f4:	60c5      	str	r5, [r0, #12]
 80165f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80165f8:	6819      	ldr	r1, [r3, #0]
 80165fa:	b151      	cbz	r1, 8016612 <_dtoa_r+0x4a>
 80165fc:	685a      	ldr	r2, [r3, #4]
 80165fe:	604a      	str	r2, [r1, #4]
 8016600:	2301      	movs	r3, #1
 8016602:	4093      	lsls	r3, r2
 8016604:	608b      	str	r3, [r1, #8]
 8016606:	4620      	mov	r0, r4
 8016608:	f001 f937 	bl	801787a <_Bfree>
 801660c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801660e:	2200      	movs	r2, #0
 8016610:	601a      	str	r2, [r3, #0]
 8016612:	1e3b      	subs	r3, r7, #0
 8016614:	bfbb      	ittet	lt
 8016616:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801661a:	9301      	strlt	r3, [sp, #4]
 801661c:	2300      	movge	r3, #0
 801661e:	2201      	movlt	r2, #1
 8016620:	bfac      	ite	ge
 8016622:	f8c8 3000 	strge.w	r3, [r8]
 8016626:	f8c8 2000 	strlt.w	r2, [r8]
 801662a:	4baf      	ldr	r3, [pc, #700]	; (80168e8 <_dtoa_r+0x320>)
 801662c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016630:	ea33 0308 	bics.w	r3, r3, r8
 8016634:	d114      	bne.n	8016660 <_dtoa_r+0x98>
 8016636:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016638:	f242 730f 	movw	r3, #9999	; 0x270f
 801663c:	6013      	str	r3, [r2, #0]
 801663e:	9b00      	ldr	r3, [sp, #0]
 8016640:	b923      	cbnz	r3, 801664c <_dtoa_r+0x84>
 8016642:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016646:	2800      	cmp	r0, #0
 8016648:	f000 8542 	beq.w	80170d0 <_dtoa_r+0xb08>
 801664c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801664e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80168fc <_dtoa_r+0x334>
 8016652:	2b00      	cmp	r3, #0
 8016654:	f000 8544 	beq.w	80170e0 <_dtoa_r+0xb18>
 8016658:	f10b 0303 	add.w	r3, fp, #3
 801665c:	f000 bd3e 	b.w	80170dc <_dtoa_r+0xb14>
 8016660:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016664:	2200      	movs	r2, #0
 8016666:	2300      	movs	r3, #0
 8016668:	4630      	mov	r0, r6
 801666a:	4639      	mov	r1, r7
 801666c:	f7ea fa44 	bl	8000af8 <__aeabi_dcmpeq>
 8016670:	4681      	mov	r9, r0
 8016672:	b168      	cbz	r0, 8016690 <_dtoa_r+0xc8>
 8016674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016676:	2301      	movs	r3, #1
 8016678:	6013      	str	r3, [r2, #0]
 801667a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801667c:	2b00      	cmp	r3, #0
 801667e:	f000 8524 	beq.w	80170ca <_dtoa_r+0xb02>
 8016682:	4b9a      	ldr	r3, [pc, #616]	; (80168ec <_dtoa_r+0x324>)
 8016684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016686:	f103 3bff 	add.w	fp, r3, #4294967295
 801668a:	6013      	str	r3, [r2, #0]
 801668c:	f000 bd28 	b.w	80170e0 <_dtoa_r+0xb18>
 8016690:	aa14      	add	r2, sp, #80	; 0x50
 8016692:	a915      	add	r1, sp, #84	; 0x54
 8016694:	ec47 6b10 	vmov	d0, r6, r7
 8016698:	4620      	mov	r0, r4
 801669a:	f001 fbfb 	bl	8017e94 <__d2b>
 801669e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80166a2:	9004      	str	r0, [sp, #16]
 80166a4:	2d00      	cmp	r5, #0
 80166a6:	d07c      	beq.n	80167a2 <_dtoa_r+0x1da>
 80166a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80166ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80166b0:	46b2      	mov	sl, r6
 80166b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80166b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80166ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80166be:	2200      	movs	r2, #0
 80166c0:	4b8b      	ldr	r3, [pc, #556]	; (80168f0 <_dtoa_r+0x328>)
 80166c2:	4650      	mov	r0, sl
 80166c4:	4659      	mov	r1, fp
 80166c6:	f7e9 fdf7 	bl	80002b8 <__aeabi_dsub>
 80166ca:	a381      	add	r3, pc, #516	; (adr r3, 80168d0 <_dtoa_r+0x308>)
 80166cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166d0:	f7e9 ffaa 	bl	8000628 <__aeabi_dmul>
 80166d4:	a380      	add	r3, pc, #512	; (adr r3, 80168d8 <_dtoa_r+0x310>)
 80166d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166da:	f7e9 fdef 	bl	80002bc <__adddf3>
 80166de:	4606      	mov	r6, r0
 80166e0:	4628      	mov	r0, r5
 80166e2:	460f      	mov	r7, r1
 80166e4:	f7e9 ff36 	bl	8000554 <__aeabi_i2d>
 80166e8:	a37d      	add	r3, pc, #500	; (adr r3, 80168e0 <_dtoa_r+0x318>)
 80166ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ee:	f7e9 ff9b 	bl	8000628 <__aeabi_dmul>
 80166f2:	4602      	mov	r2, r0
 80166f4:	460b      	mov	r3, r1
 80166f6:	4630      	mov	r0, r6
 80166f8:	4639      	mov	r1, r7
 80166fa:	f7e9 fddf 	bl	80002bc <__adddf3>
 80166fe:	4606      	mov	r6, r0
 8016700:	460f      	mov	r7, r1
 8016702:	f7ea fa41 	bl	8000b88 <__aeabi_d2iz>
 8016706:	2200      	movs	r2, #0
 8016708:	4682      	mov	sl, r0
 801670a:	2300      	movs	r3, #0
 801670c:	4630      	mov	r0, r6
 801670e:	4639      	mov	r1, r7
 8016710:	f7ea f9fc 	bl	8000b0c <__aeabi_dcmplt>
 8016714:	b148      	cbz	r0, 801672a <_dtoa_r+0x162>
 8016716:	4650      	mov	r0, sl
 8016718:	f7e9 ff1c 	bl	8000554 <__aeabi_i2d>
 801671c:	4632      	mov	r2, r6
 801671e:	463b      	mov	r3, r7
 8016720:	f7ea f9ea 	bl	8000af8 <__aeabi_dcmpeq>
 8016724:	b908      	cbnz	r0, 801672a <_dtoa_r+0x162>
 8016726:	f10a 3aff 	add.w	sl, sl, #4294967295
 801672a:	f1ba 0f16 	cmp.w	sl, #22
 801672e:	d859      	bhi.n	80167e4 <_dtoa_r+0x21c>
 8016730:	4970      	ldr	r1, [pc, #448]	; (80168f4 <_dtoa_r+0x32c>)
 8016732:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016736:	e9dd 2300 	ldrd	r2, r3, [sp]
 801673a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801673e:	f7ea fa03 	bl	8000b48 <__aeabi_dcmpgt>
 8016742:	2800      	cmp	r0, #0
 8016744:	d050      	beq.n	80167e8 <_dtoa_r+0x220>
 8016746:	f10a 3aff 	add.w	sl, sl, #4294967295
 801674a:	2300      	movs	r3, #0
 801674c:	930f      	str	r3, [sp, #60]	; 0x3c
 801674e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016750:	1b5d      	subs	r5, r3, r5
 8016752:	f1b5 0801 	subs.w	r8, r5, #1
 8016756:	bf49      	itett	mi
 8016758:	f1c5 0301 	rsbmi	r3, r5, #1
 801675c:	2300      	movpl	r3, #0
 801675e:	9305      	strmi	r3, [sp, #20]
 8016760:	f04f 0800 	movmi.w	r8, #0
 8016764:	bf58      	it	pl
 8016766:	9305      	strpl	r3, [sp, #20]
 8016768:	f1ba 0f00 	cmp.w	sl, #0
 801676c:	db3e      	blt.n	80167ec <_dtoa_r+0x224>
 801676e:	2300      	movs	r3, #0
 8016770:	44d0      	add	r8, sl
 8016772:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016776:	9307      	str	r3, [sp, #28]
 8016778:	9b06      	ldr	r3, [sp, #24]
 801677a:	2b09      	cmp	r3, #9
 801677c:	f200 8090 	bhi.w	80168a0 <_dtoa_r+0x2d8>
 8016780:	2b05      	cmp	r3, #5
 8016782:	bfc4      	itt	gt
 8016784:	3b04      	subgt	r3, #4
 8016786:	9306      	strgt	r3, [sp, #24]
 8016788:	9b06      	ldr	r3, [sp, #24]
 801678a:	f1a3 0302 	sub.w	r3, r3, #2
 801678e:	bfcc      	ite	gt
 8016790:	2500      	movgt	r5, #0
 8016792:	2501      	movle	r5, #1
 8016794:	2b03      	cmp	r3, #3
 8016796:	f200 808f 	bhi.w	80168b8 <_dtoa_r+0x2f0>
 801679a:	e8df f003 	tbb	[pc, r3]
 801679e:	7f7d      	.short	0x7f7d
 80167a0:	7131      	.short	0x7131
 80167a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80167a6:	441d      	add	r5, r3
 80167a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80167ac:	2820      	cmp	r0, #32
 80167ae:	dd13      	ble.n	80167d8 <_dtoa_r+0x210>
 80167b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80167b4:	9b00      	ldr	r3, [sp, #0]
 80167b6:	fa08 f800 	lsl.w	r8, r8, r0
 80167ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80167be:	fa23 f000 	lsr.w	r0, r3, r0
 80167c2:	ea48 0000 	orr.w	r0, r8, r0
 80167c6:	f7e9 feb5 	bl	8000534 <__aeabi_ui2d>
 80167ca:	2301      	movs	r3, #1
 80167cc:	4682      	mov	sl, r0
 80167ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80167d2:	3d01      	subs	r5, #1
 80167d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80167d6:	e772      	b.n	80166be <_dtoa_r+0xf6>
 80167d8:	9b00      	ldr	r3, [sp, #0]
 80167da:	f1c0 0020 	rsb	r0, r0, #32
 80167de:	fa03 f000 	lsl.w	r0, r3, r0
 80167e2:	e7f0      	b.n	80167c6 <_dtoa_r+0x1fe>
 80167e4:	2301      	movs	r3, #1
 80167e6:	e7b1      	b.n	801674c <_dtoa_r+0x184>
 80167e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80167ea:	e7b0      	b.n	801674e <_dtoa_r+0x186>
 80167ec:	9b05      	ldr	r3, [sp, #20]
 80167ee:	eba3 030a 	sub.w	r3, r3, sl
 80167f2:	9305      	str	r3, [sp, #20]
 80167f4:	f1ca 0300 	rsb	r3, sl, #0
 80167f8:	9307      	str	r3, [sp, #28]
 80167fa:	2300      	movs	r3, #0
 80167fc:	930e      	str	r3, [sp, #56]	; 0x38
 80167fe:	e7bb      	b.n	8016778 <_dtoa_r+0x1b0>
 8016800:	2301      	movs	r3, #1
 8016802:	930a      	str	r3, [sp, #40]	; 0x28
 8016804:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016806:	2b00      	cmp	r3, #0
 8016808:	dd59      	ble.n	80168be <_dtoa_r+0x2f6>
 801680a:	9302      	str	r3, [sp, #8]
 801680c:	4699      	mov	r9, r3
 801680e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016810:	2200      	movs	r2, #0
 8016812:	6072      	str	r2, [r6, #4]
 8016814:	2204      	movs	r2, #4
 8016816:	f102 0014 	add.w	r0, r2, #20
 801681a:	4298      	cmp	r0, r3
 801681c:	6871      	ldr	r1, [r6, #4]
 801681e:	d953      	bls.n	80168c8 <_dtoa_r+0x300>
 8016820:	4620      	mov	r0, r4
 8016822:	f000 fff6 	bl	8017812 <_Balloc>
 8016826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016828:	6030      	str	r0, [r6, #0]
 801682a:	f1b9 0f0e 	cmp.w	r9, #14
 801682e:	f8d3 b000 	ldr.w	fp, [r3]
 8016832:	f200 80e6 	bhi.w	8016a02 <_dtoa_r+0x43a>
 8016836:	2d00      	cmp	r5, #0
 8016838:	f000 80e3 	beq.w	8016a02 <_dtoa_r+0x43a>
 801683c:	ed9d 7b00 	vldr	d7, [sp]
 8016840:	f1ba 0f00 	cmp.w	sl, #0
 8016844:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016848:	dd74      	ble.n	8016934 <_dtoa_r+0x36c>
 801684a:	4a2a      	ldr	r2, [pc, #168]	; (80168f4 <_dtoa_r+0x32c>)
 801684c:	f00a 030f 	and.w	r3, sl, #15
 8016850:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016854:	ed93 7b00 	vldr	d7, [r3]
 8016858:	ea4f 162a 	mov.w	r6, sl, asr #4
 801685c:	06f0      	lsls	r0, r6, #27
 801685e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016862:	d565      	bpl.n	8016930 <_dtoa_r+0x368>
 8016864:	4b24      	ldr	r3, [pc, #144]	; (80168f8 <_dtoa_r+0x330>)
 8016866:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801686a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801686e:	f7ea f805 	bl	800087c <__aeabi_ddiv>
 8016872:	e9cd 0100 	strd	r0, r1, [sp]
 8016876:	f006 060f 	and.w	r6, r6, #15
 801687a:	2503      	movs	r5, #3
 801687c:	4f1e      	ldr	r7, [pc, #120]	; (80168f8 <_dtoa_r+0x330>)
 801687e:	e04c      	b.n	801691a <_dtoa_r+0x352>
 8016880:	2301      	movs	r3, #1
 8016882:	930a      	str	r3, [sp, #40]	; 0x28
 8016884:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016886:	4453      	add	r3, sl
 8016888:	f103 0901 	add.w	r9, r3, #1
 801688c:	9302      	str	r3, [sp, #8]
 801688e:	464b      	mov	r3, r9
 8016890:	2b01      	cmp	r3, #1
 8016892:	bfb8      	it	lt
 8016894:	2301      	movlt	r3, #1
 8016896:	e7ba      	b.n	801680e <_dtoa_r+0x246>
 8016898:	2300      	movs	r3, #0
 801689a:	e7b2      	b.n	8016802 <_dtoa_r+0x23a>
 801689c:	2300      	movs	r3, #0
 801689e:	e7f0      	b.n	8016882 <_dtoa_r+0x2ba>
 80168a0:	2501      	movs	r5, #1
 80168a2:	2300      	movs	r3, #0
 80168a4:	9306      	str	r3, [sp, #24]
 80168a6:	950a      	str	r5, [sp, #40]	; 0x28
 80168a8:	f04f 33ff 	mov.w	r3, #4294967295
 80168ac:	9302      	str	r3, [sp, #8]
 80168ae:	4699      	mov	r9, r3
 80168b0:	2200      	movs	r2, #0
 80168b2:	2312      	movs	r3, #18
 80168b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80168b6:	e7aa      	b.n	801680e <_dtoa_r+0x246>
 80168b8:	2301      	movs	r3, #1
 80168ba:	930a      	str	r3, [sp, #40]	; 0x28
 80168bc:	e7f4      	b.n	80168a8 <_dtoa_r+0x2e0>
 80168be:	2301      	movs	r3, #1
 80168c0:	9302      	str	r3, [sp, #8]
 80168c2:	4699      	mov	r9, r3
 80168c4:	461a      	mov	r2, r3
 80168c6:	e7f5      	b.n	80168b4 <_dtoa_r+0x2ec>
 80168c8:	3101      	adds	r1, #1
 80168ca:	6071      	str	r1, [r6, #4]
 80168cc:	0052      	lsls	r2, r2, #1
 80168ce:	e7a2      	b.n	8016816 <_dtoa_r+0x24e>
 80168d0:	636f4361 	.word	0x636f4361
 80168d4:	3fd287a7 	.word	0x3fd287a7
 80168d8:	8b60c8b3 	.word	0x8b60c8b3
 80168dc:	3fc68a28 	.word	0x3fc68a28
 80168e0:	509f79fb 	.word	0x509f79fb
 80168e4:	3fd34413 	.word	0x3fd34413
 80168e8:	7ff00000 	.word	0x7ff00000
 80168ec:	080193ec 	.word	0x080193ec
 80168f0:	3ff80000 	.word	0x3ff80000
 80168f4:	080192f0 	.word	0x080192f0
 80168f8:	080192c8 	.word	0x080192c8
 80168fc:	080192b9 	.word	0x080192b9
 8016900:	07f1      	lsls	r1, r6, #31
 8016902:	d508      	bpl.n	8016916 <_dtoa_r+0x34e>
 8016904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016908:	e9d7 2300 	ldrd	r2, r3, [r7]
 801690c:	f7e9 fe8c 	bl	8000628 <__aeabi_dmul>
 8016910:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016914:	3501      	adds	r5, #1
 8016916:	1076      	asrs	r6, r6, #1
 8016918:	3708      	adds	r7, #8
 801691a:	2e00      	cmp	r6, #0
 801691c:	d1f0      	bne.n	8016900 <_dtoa_r+0x338>
 801691e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016922:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016926:	f7e9 ffa9 	bl	800087c <__aeabi_ddiv>
 801692a:	e9cd 0100 	strd	r0, r1, [sp]
 801692e:	e01a      	b.n	8016966 <_dtoa_r+0x39e>
 8016930:	2502      	movs	r5, #2
 8016932:	e7a3      	b.n	801687c <_dtoa_r+0x2b4>
 8016934:	f000 80a0 	beq.w	8016a78 <_dtoa_r+0x4b0>
 8016938:	f1ca 0600 	rsb	r6, sl, #0
 801693c:	4b9f      	ldr	r3, [pc, #636]	; (8016bbc <_dtoa_r+0x5f4>)
 801693e:	4fa0      	ldr	r7, [pc, #640]	; (8016bc0 <_dtoa_r+0x5f8>)
 8016940:	f006 020f 	and.w	r2, r6, #15
 8016944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016950:	f7e9 fe6a 	bl	8000628 <__aeabi_dmul>
 8016954:	e9cd 0100 	strd	r0, r1, [sp]
 8016958:	1136      	asrs	r6, r6, #4
 801695a:	2300      	movs	r3, #0
 801695c:	2502      	movs	r5, #2
 801695e:	2e00      	cmp	r6, #0
 8016960:	d17f      	bne.n	8016a62 <_dtoa_r+0x49a>
 8016962:	2b00      	cmp	r3, #0
 8016964:	d1e1      	bne.n	801692a <_dtoa_r+0x362>
 8016966:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016968:	2b00      	cmp	r3, #0
 801696a:	f000 8087 	beq.w	8016a7c <_dtoa_r+0x4b4>
 801696e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016972:	2200      	movs	r2, #0
 8016974:	4b93      	ldr	r3, [pc, #588]	; (8016bc4 <_dtoa_r+0x5fc>)
 8016976:	4630      	mov	r0, r6
 8016978:	4639      	mov	r1, r7
 801697a:	f7ea f8c7 	bl	8000b0c <__aeabi_dcmplt>
 801697e:	2800      	cmp	r0, #0
 8016980:	d07c      	beq.n	8016a7c <_dtoa_r+0x4b4>
 8016982:	f1b9 0f00 	cmp.w	r9, #0
 8016986:	d079      	beq.n	8016a7c <_dtoa_r+0x4b4>
 8016988:	9b02      	ldr	r3, [sp, #8]
 801698a:	2b00      	cmp	r3, #0
 801698c:	dd35      	ble.n	80169fa <_dtoa_r+0x432>
 801698e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016992:	9308      	str	r3, [sp, #32]
 8016994:	4639      	mov	r1, r7
 8016996:	2200      	movs	r2, #0
 8016998:	4b8b      	ldr	r3, [pc, #556]	; (8016bc8 <_dtoa_r+0x600>)
 801699a:	4630      	mov	r0, r6
 801699c:	f7e9 fe44 	bl	8000628 <__aeabi_dmul>
 80169a0:	e9cd 0100 	strd	r0, r1, [sp]
 80169a4:	9f02      	ldr	r7, [sp, #8]
 80169a6:	3501      	adds	r5, #1
 80169a8:	4628      	mov	r0, r5
 80169aa:	f7e9 fdd3 	bl	8000554 <__aeabi_i2d>
 80169ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80169b2:	f7e9 fe39 	bl	8000628 <__aeabi_dmul>
 80169b6:	2200      	movs	r2, #0
 80169b8:	4b84      	ldr	r3, [pc, #528]	; (8016bcc <_dtoa_r+0x604>)
 80169ba:	f7e9 fc7f 	bl	80002bc <__adddf3>
 80169be:	4605      	mov	r5, r0
 80169c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80169c4:	2f00      	cmp	r7, #0
 80169c6:	d15d      	bne.n	8016a84 <_dtoa_r+0x4bc>
 80169c8:	2200      	movs	r2, #0
 80169ca:	4b81      	ldr	r3, [pc, #516]	; (8016bd0 <_dtoa_r+0x608>)
 80169cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169d0:	f7e9 fc72 	bl	80002b8 <__aeabi_dsub>
 80169d4:	462a      	mov	r2, r5
 80169d6:	4633      	mov	r3, r6
 80169d8:	e9cd 0100 	strd	r0, r1, [sp]
 80169dc:	f7ea f8b4 	bl	8000b48 <__aeabi_dcmpgt>
 80169e0:	2800      	cmp	r0, #0
 80169e2:	f040 8288 	bne.w	8016ef6 <_dtoa_r+0x92e>
 80169e6:	462a      	mov	r2, r5
 80169e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80169ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80169f0:	f7ea f88c 	bl	8000b0c <__aeabi_dcmplt>
 80169f4:	2800      	cmp	r0, #0
 80169f6:	f040 827c 	bne.w	8016ef2 <_dtoa_r+0x92a>
 80169fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80169fe:	e9cd 2300 	strd	r2, r3, [sp]
 8016a02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	f2c0 8150 	blt.w	8016caa <_dtoa_r+0x6e2>
 8016a0a:	f1ba 0f0e 	cmp.w	sl, #14
 8016a0e:	f300 814c 	bgt.w	8016caa <_dtoa_r+0x6e2>
 8016a12:	4b6a      	ldr	r3, [pc, #424]	; (8016bbc <_dtoa_r+0x5f4>)
 8016a14:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016a18:	ed93 7b00 	vldr	d7, [r3]
 8016a1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016a24:	f280 80d8 	bge.w	8016bd8 <_dtoa_r+0x610>
 8016a28:	f1b9 0f00 	cmp.w	r9, #0
 8016a2c:	f300 80d4 	bgt.w	8016bd8 <_dtoa_r+0x610>
 8016a30:	f040 825e 	bne.w	8016ef0 <_dtoa_r+0x928>
 8016a34:	2200      	movs	r2, #0
 8016a36:	4b66      	ldr	r3, [pc, #408]	; (8016bd0 <_dtoa_r+0x608>)
 8016a38:	ec51 0b17 	vmov	r0, r1, d7
 8016a3c:	f7e9 fdf4 	bl	8000628 <__aeabi_dmul>
 8016a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a44:	f7ea f876 	bl	8000b34 <__aeabi_dcmpge>
 8016a48:	464f      	mov	r7, r9
 8016a4a:	464e      	mov	r6, r9
 8016a4c:	2800      	cmp	r0, #0
 8016a4e:	f040 8234 	bne.w	8016eba <_dtoa_r+0x8f2>
 8016a52:	2331      	movs	r3, #49	; 0x31
 8016a54:	f10b 0501 	add.w	r5, fp, #1
 8016a58:	f88b 3000 	strb.w	r3, [fp]
 8016a5c:	f10a 0a01 	add.w	sl, sl, #1
 8016a60:	e22f      	b.n	8016ec2 <_dtoa_r+0x8fa>
 8016a62:	07f2      	lsls	r2, r6, #31
 8016a64:	d505      	bpl.n	8016a72 <_dtoa_r+0x4aa>
 8016a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a6a:	f7e9 fddd 	bl	8000628 <__aeabi_dmul>
 8016a6e:	3501      	adds	r5, #1
 8016a70:	2301      	movs	r3, #1
 8016a72:	1076      	asrs	r6, r6, #1
 8016a74:	3708      	adds	r7, #8
 8016a76:	e772      	b.n	801695e <_dtoa_r+0x396>
 8016a78:	2502      	movs	r5, #2
 8016a7a:	e774      	b.n	8016966 <_dtoa_r+0x39e>
 8016a7c:	f8cd a020 	str.w	sl, [sp, #32]
 8016a80:	464f      	mov	r7, r9
 8016a82:	e791      	b.n	80169a8 <_dtoa_r+0x3e0>
 8016a84:	4b4d      	ldr	r3, [pc, #308]	; (8016bbc <_dtoa_r+0x5f4>)
 8016a86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8016a8a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8016a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d047      	beq.n	8016b24 <_dtoa_r+0x55c>
 8016a94:	4602      	mov	r2, r0
 8016a96:	460b      	mov	r3, r1
 8016a98:	2000      	movs	r0, #0
 8016a9a:	494e      	ldr	r1, [pc, #312]	; (8016bd4 <_dtoa_r+0x60c>)
 8016a9c:	f7e9 feee 	bl	800087c <__aeabi_ddiv>
 8016aa0:	462a      	mov	r2, r5
 8016aa2:	4633      	mov	r3, r6
 8016aa4:	f7e9 fc08 	bl	80002b8 <__aeabi_dsub>
 8016aa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016aac:	465d      	mov	r5, fp
 8016aae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ab2:	f7ea f869 	bl	8000b88 <__aeabi_d2iz>
 8016ab6:	4606      	mov	r6, r0
 8016ab8:	f7e9 fd4c 	bl	8000554 <__aeabi_i2d>
 8016abc:	4602      	mov	r2, r0
 8016abe:	460b      	mov	r3, r1
 8016ac0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016ac4:	f7e9 fbf8 	bl	80002b8 <__aeabi_dsub>
 8016ac8:	3630      	adds	r6, #48	; 0x30
 8016aca:	f805 6b01 	strb.w	r6, [r5], #1
 8016ace:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016ad2:	e9cd 0100 	strd	r0, r1, [sp]
 8016ad6:	f7ea f819 	bl	8000b0c <__aeabi_dcmplt>
 8016ada:	2800      	cmp	r0, #0
 8016adc:	d163      	bne.n	8016ba6 <_dtoa_r+0x5de>
 8016ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ae2:	2000      	movs	r0, #0
 8016ae4:	4937      	ldr	r1, [pc, #220]	; (8016bc4 <_dtoa_r+0x5fc>)
 8016ae6:	f7e9 fbe7 	bl	80002b8 <__aeabi_dsub>
 8016aea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016aee:	f7ea f80d 	bl	8000b0c <__aeabi_dcmplt>
 8016af2:	2800      	cmp	r0, #0
 8016af4:	f040 80b7 	bne.w	8016c66 <_dtoa_r+0x69e>
 8016af8:	eba5 030b 	sub.w	r3, r5, fp
 8016afc:	429f      	cmp	r7, r3
 8016afe:	f77f af7c 	ble.w	80169fa <_dtoa_r+0x432>
 8016b02:	2200      	movs	r2, #0
 8016b04:	4b30      	ldr	r3, [pc, #192]	; (8016bc8 <_dtoa_r+0x600>)
 8016b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b0a:	f7e9 fd8d 	bl	8000628 <__aeabi_dmul>
 8016b0e:	2200      	movs	r2, #0
 8016b10:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b14:	4b2c      	ldr	r3, [pc, #176]	; (8016bc8 <_dtoa_r+0x600>)
 8016b16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b1a:	f7e9 fd85 	bl	8000628 <__aeabi_dmul>
 8016b1e:	e9cd 0100 	strd	r0, r1, [sp]
 8016b22:	e7c4      	b.n	8016aae <_dtoa_r+0x4e6>
 8016b24:	462a      	mov	r2, r5
 8016b26:	4633      	mov	r3, r6
 8016b28:	f7e9 fd7e 	bl	8000628 <__aeabi_dmul>
 8016b2c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016b30:	eb0b 0507 	add.w	r5, fp, r7
 8016b34:	465e      	mov	r6, fp
 8016b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b3a:	f7ea f825 	bl	8000b88 <__aeabi_d2iz>
 8016b3e:	4607      	mov	r7, r0
 8016b40:	f7e9 fd08 	bl	8000554 <__aeabi_i2d>
 8016b44:	3730      	adds	r7, #48	; 0x30
 8016b46:	4602      	mov	r2, r0
 8016b48:	460b      	mov	r3, r1
 8016b4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b4e:	f7e9 fbb3 	bl	80002b8 <__aeabi_dsub>
 8016b52:	f806 7b01 	strb.w	r7, [r6], #1
 8016b56:	42ae      	cmp	r6, r5
 8016b58:	e9cd 0100 	strd	r0, r1, [sp]
 8016b5c:	f04f 0200 	mov.w	r2, #0
 8016b60:	d126      	bne.n	8016bb0 <_dtoa_r+0x5e8>
 8016b62:	4b1c      	ldr	r3, [pc, #112]	; (8016bd4 <_dtoa_r+0x60c>)
 8016b64:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b68:	f7e9 fba8 	bl	80002bc <__adddf3>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	460b      	mov	r3, r1
 8016b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b74:	f7e9 ffe8 	bl	8000b48 <__aeabi_dcmpgt>
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	d174      	bne.n	8016c66 <_dtoa_r+0x69e>
 8016b7c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016b80:	2000      	movs	r0, #0
 8016b82:	4914      	ldr	r1, [pc, #80]	; (8016bd4 <_dtoa_r+0x60c>)
 8016b84:	f7e9 fb98 	bl	80002b8 <__aeabi_dsub>
 8016b88:	4602      	mov	r2, r0
 8016b8a:	460b      	mov	r3, r1
 8016b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b90:	f7e9 ffbc 	bl	8000b0c <__aeabi_dcmplt>
 8016b94:	2800      	cmp	r0, #0
 8016b96:	f43f af30 	beq.w	80169fa <_dtoa_r+0x432>
 8016b9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016b9e:	2b30      	cmp	r3, #48	; 0x30
 8016ba0:	f105 32ff 	add.w	r2, r5, #4294967295
 8016ba4:	d002      	beq.n	8016bac <_dtoa_r+0x5e4>
 8016ba6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016baa:	e04a      	b.n	8016c42 <_dtoa_r+0x67a>
 8016bac:	4615      	mov	r5, r2
 8016bae:	e7f4      	b.n	8016b9a <_dtoa_r+0x5d2>
 8016bb0:	4b05      	ldr	r3, [pc, #20]	; (8016bc8 <_dtoa_r+0x600>)
 8016bb2:	f7e9 fd39 	bl	8000628 <__aeabi_dmul>
 8016bb6:	e9cd 0100 	strd	r0, r1, [sp]
 8016bba:	e7bc      	b.n	8016b36 <_dtoa_r+0x56e>
 8016bbc:	080192f0 	.word	0x080192f0
 8016bc0:	080192c8 	.word	0x080192c8
 8016bc4:	3ff00000 	.word	0x3ff00000
 8016bc8:	40240000 	.word	0x40240000
 8016bcc:	401c0000 	.word	0x401c0000
 8016bd0:	40140000 	.word	0x40140000
 8016bd4:	3fe00000 	.word	0x3fe00000
 8016bd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016bdc:	465d      	mov	r5, fp
 8016bde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016be2:	4630      	mov	r0, r6
 8016be4:	4639      	mov	r1, r7
 8016be6:	f7e9 fe49 	bl	800087c <__aeabi_ddiv>
 8016bea:	f7e9 ffcd 	bl	8000b88 <__aeabi_d2iz>
 8016bee:	4680      	mov	r8, r0
 8016bf0:	f7e9 fcb0 	bl	8000554 <__aeabi_i2d>
 8016bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016bf8:	f7e9 fd16 	bl	8000628 <__aeabi_dmul>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	460b      	mov	r3, r1
 8016c00:	4630      	mov	r0, r6
 8016c02:	4639      	mov	r1, r7
 8016c04:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016c08:	f7e9 fb56 	bl	80002b8 <__aeabi_dsub>
 8016c0c:	f805 6b01 	strb.w	r6, [r5], #1
 8016c10:	eba5 060b 	sub.w	r6, r5, fp
 8016c14:	45b1      	cmp	r9, r6
 8016c16:	4602      	mov	r2, r0
 8016c18:	460b      	mov	r3, r1
 8016c1a:	d139      	bne.n	8016c90 <_dtoa_r+0x6c8>
 8016c1c:	f7e9 fb4e 	bl	80002bc <__adddf3>
 8016c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c24:	4606      	mov	r6, r0
 8016c26:	460f      	mov	r7, r1
 8016c28:	f7e9 ff8e 	bl	8000b48 <__aeabi_dcmpgt>
 8016c2c:	b9c8      	cbnz	r0, 8016c62 <_dtoa_r+0x69a>
 8016c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016c32:	4630      	mov	r0, r6
 8016c34:	4639      	mov	r1, r7
 8016c36:	f7e9 ff5f 	bl	8000af8 <__aeabi_dcmpeq>
 8016c3a:	b110      	cbz	r0, 8016c42 <_dtoa_r+0x67a>
 8016c3c:	f018 0f01 	tst.w	r8, #1
 8016c40:	d10f      	bne.n	8016c62 <_dtoa_r+0x69a>
 8016c42:	9904      	ldr	r1, [sp, #16]
 8016c44:	4620      	mov	r0, r4
 8016c46:	f000 fe18 	bl	801787a <_Bfree>
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016c4e:	702b      	strb	r3, [r5, #0]
 8016c50:	f10a 0301 	add.w	r3, sl, #1
 8016c54:	6013      	str	r3, [r2, #0]
 8016c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	f000 8241 	beq.w	80170e0 <_dtoa_r+0xb18>
 8016c5e:	601d      	str	r5, [r3, #0]
 8016c60:	e23e      	b.n	80170e0 <_dtoa_r+0xb18>
 8016c62:	f8cd a020 	str.w	sl, [sp, #32]
 8016c66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016c6a:	2a39      	cmp	r2, #57	; 0x39
 8016c6c:	f105 33ff 	add.w	r3, r5, #4294967295
 8016c70:	d108      	bne.n	8016c84 <_dtoa_r+0x6bc>
 8016c72:	459b      	cmp	fp, r3
 8016c74:	d10a      	bne.n	8016c8c <_dtoa_r+0x6c4>
 8016c76:	9b08      	ldr	r3, [sp, #32]
 8016c78:	3301      	adds	r3, #1
 8016c7a:	9308      	str	r3, [sp, #32]
 8016c7c:	2330      	movs	r3, #48	; 0x30
 8016c7e:	f88b 3000 	strb.w	r3, [fp]
 8016c82:	465b      	mov	r3, fp
 8016c84:	781a      	ldrb	r2, [r3, #0]
 8016c86:	3201      	adds	r2, #1
 8016c88:	701a      	strb	r2, [r3, #0]
 8016c8a:	e78c      	b.n	8016ba6 <_dtoa_r+0x5de>
 8016c8c:	461d      	mov	r5, r3
 8016c8e:	e7ea      	b.n	8016c66 <_dtoa_r+0x69e>
 8016c90:	2200      	movs	r2, #0
 8016c92:	4b9b      	ldr	r3, [pc, #620]	; (8016f00 <_dtoa_r+0x938>)
 8016c94:	f7e9 fcc8 	bl	8000628 <__aeabi_dmul>
 8016c98:	2200      	movs	r2, #0
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	4606      	mov	r6, r0
 8016c9e:	460f      	mov	r7, r1
 8016ca0:	f7e9 ff2a 	bl	8000af8 <__aeabi_dcmpeq>
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	d09a      	beq.n	8016bde <_dtoa_r+0x616>
 8016ca8:	e7cb      	b.n	8016c42 <_dtoa_r+0x67a>
 8016caa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cac:	2a00      	cmp	r2, #0
 8016cae:	f000 808b 	beq.w	8016dc8 <_dtoa_r+0x800>
 8016cb2:	9a06      	ldr	r2, [sp, #24]
 8016cb4:	2a01      	cmp	r2, #1
 8016cb6:	dc6e      	bgt.n	8016d96 <_dtoa_r+0x7ce>
 8016cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016cba:	2a00      	cmp	r2, #0
 8016cbc:	d067      	beq.n	8016d8e <_dtoa_r+0x7c6>
 8016cbe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016cc2:	9f07      	ldr	r7, [sp, #28]
 8016cc4:	9d05      	ldr	r5, [sp, #20]
 8016cc6:	9a05      	ldr	r2, [sp, #20]
 8016cc8:	2101      	movs	r1, #1
 8016cca:	441a      	add	r2, r3
 8016ccc:	4620      	mov	r0, r4
 8016cce:	9205      	str	r2, [sp, #20]
 8016cd0:	4498      	add	r8, r3
 8016cd2:	f000 feb0 	bl	8017a36 <__i2b>
 8016cd6:	4606      	mov	r6, r0
 8016cd8:	2d00      	cmp	r5, #0
 8016cda:	dd0c      	ble.n	8016cf6 <_dtoa_r+0x72e>
 8016cdc:	f1b8 0f00 	cmp.w	r8, #0
 8016ce0:	dd09      	ble.n	8016cf6 <_dtoa_r+0x72e>
 8016ce2:	4545      	cmp	r5, r8
 8016ce4:	9a05      	ldr	r2, [sp, #20]
 8016ce6:	462b      	mov	r3, r5
 8016ce8:	bfa8      	it	ge
 8016cea:	4643      	movge	r3, r8
 8016cec:	1ad2      	subs	r2, r2, r3
 8016cee:	9205      	str	r2, [sp, #20]
 8016cf0:	1aed      	subs	r5, r5, r3
 8016cf2:	eba8 0803 	sub.w	r8, r8, r3
 8016cf6:	9b07      	ldr	r3, [sp, #28]
 8016cf8:	b1eb      	cbz	r3, 8016d36 <_dtoa_r+0x76e>
 8016cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d067      	beq.n	8016dd0 <_dtoa_r+0x808>
 8016d00:	b18f      	cbz	r7, 8016d26 <_dtoa_r+0x75e>
 8016d02:	4631      	mov	r1, r6
 8016d04:	463a      	mov	r2, r7
 8016d06:	4620      	mov	r0, r4
 8016d08:	f000 ff34 	bl	8017b74 <__pow5mult>
 8016d0c:	9a04      	ldr	r2, [sp, #16]
 8016d0e:	4601      	mov	r1, r0
 8016d10:	4606      	mov	r6, r0
 8016d12:	4620      	mov	r0, r4
 8016d14:	f000 fe98 	bl	8017a48 <__multiply>
 8016d18:	9904      	ldr	r1, [sp, #16]
 8016d1a:	9008      	str	r0, [sp, #32]
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	f000 fdac 	bl	801787a <_Bfree>
 8016d22:	9b08      	ldr	r3, [sp, #32]
 8016d24:	9304      	str	r3, [sp, #16]
 8016d26:	9b07      	ldr	r3, [sp, #28]
 8016d28:	1bda      	subs	r2, r3, r7
 8016d2a:	d004      	beq.n	8016d36 <_dtoa_r+0x76e>
 8016d2c:	9904      	ldr	r1, [sp, #16]
 8016d2e:	4620      	mov	r0, r4
 8016d30:	f000 ff20 	bl	8017b74 <__pow5mult>
 8016d34:	9004      	str	r0, [sp, #16]
 8016d36:	2101      	movs	r1, #1
 8016d38:	4620      	mov	r0, r4
 8016d3a:	f000 fe7c 	bl	8017a36 <__i2b>
 8016d3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d40:	4607      	mov	r7, r0
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	f000 81d0 	beq.w	80170e8 <_dtoa_r+0xb20>
 8016d48:	461a      	mov	r2, r3
 8016d4a:	4601      	mov	r1, r0
 8016d4c:	4620      	mov	r0, r4
 8016d4e:	f000 ff11 	bl	8017b74 <__pow5mult>
 8016d52:	9b06      	ldr	r3, [sp, #24]
 8016d54:	2b01      	cmp	r3, #1
 8016d56:	4607      	mov	r7, r0
 8016d58:	dc40      	bgt.n	8016ddc <_dtoa_r+0x814>
 8016d5a:	9b00      	ldr	r3, [sp, #0]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d139      	bne.n	8016dd4 <_dtoa_r+0x80c>
 8016d60:	9b01      	ldr	r3, [sp, #4]
 8016d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d136      	bne.n	8016dd8 <_dtoa_r+0x810>
 8016d6a:	9b01      	ldr	r3, [sp, #4]
 8016d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016d70:	0d1b      	lsrs	r3, r3, #20
 8016d72:	051b      	lsls	r3, r3, #20
 8016d74:	b12b      	cbz	r3, 8016d82 <_dtoa_r+0x7ba>
 8016d76:	9b05      	ldr	r3, [sp, #20]
 8016d78:	3301      	adds	r3, #1
 8016d7a:	9305      	str	r3, [sp, #20]
 8016d7c:	f108 0801 	add.w	r8, r8, #1
 8016d80:	2301      	movs	r3, #1
 8016d82:	9307      	str	r3, [sp, #28]
 8016d84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d12a      	bne.n	8016de0 <_dtoa_r+0x818>
 8016d8a:	2001      	movs	r0, #1
 8016d8c:	e030      	b.n	8016df0 <_dtoa_r+0x828>
 8016d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016d90:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016d94:	e795      	b.n	8016cc2 <_dtoa_r+0x6fa>
 8016d96:	9b07      	ldr	r3, [sp, #28]
 8016d98:	f109 37ff 	add.w	r7, r9, #4294967295
 8016d9c:	42bb      	cmp	r3, r7
 8016d9e:	bfbf      	itttt	lt
 8016da0:	9b07      	ldrlt	r3, [sp, #28]
 8016da2:	9707      	strlt	r7, [sp, #28]
 8016da4:	1afa      	sublt	r2, r7, r3
 8016da6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8016da8:	bfbb      	ittet	lt
 8016daa:	189b      	addlt	r3, r3, r2
 8016dac:	930e      	strlt	r3, [sp, #56]	; 0x38
 8016dae:	1bdf      	subge	r7, r3, r7
 8016db0:	2700      	movlt	r7, #0
 8016db2:	f1b9 0f00 	cmp.w	r9, #0
 8016db6:	bfb5      	itete	lt
 8016db8:	9b05      	ldrlt	r3, [sp, #20]
 8016dba:	9d05      	ldrge	r5, [sp, #20]
 8016dbc:	eba3 0509 	sublt.w	r5, r3, r9
 8016dc0:	464b      	movge	r3, r9
 8016dc2:	bfb8      	it	lt
 8016dc4:	2300      	movlt	r3, #0
 8016dc6:	e77e      	b.n	8016cc6 <_dtoa_r+0x6fe>
 8016dc8:	9f07      	ldr	r7, [sp, #28]
 8016dca:	9d05      	ldr	r5, [sp, #20]
 8016dcc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8016dce:	e783      	b.n	8016cd8 <_dtoa_r+0x710>
 8016dd0:	9a07      	ldr	r2, [sp, #28]
 8016dd2:	e7ab      	b.n	8016d2c <_dtoa_r+0x764>
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	e7d4      	b.n	8016d82 <_dtoa_r+0x7ba>
 8016dd8:	9b00      	ldr	r3, [sp, #0]
 8016dda:	e7d2      	b.n	8016d82 <_dtoa_r+0x7ba>
 8016ddc:	2300      	movs	r3, #0
 8016dde:	9307      	str	r3, [sp, #28]
 8016de0:	693b      	ldr	r3, [r7, #16]
 8016de2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8016de6:	6918      	ldr	r0, [r3, #16]
 8016de8:	f000 fdd7 	bl	801799a <__hi0bits>
 8016dec:	f1c0 0020 	rsb	r0, r0, #32
 8016df0:	4440      	add	r0, r8
 8016df2:	f010 001f 	ands.w	r0, r0, #31
 8016df6:	d047      	beq.n	8016e88 <_dtoa_r+0x8c0>
 8016df8:	f1c0 0320 	rsb	r3, r0, #32
 8016dfc:	2b04      	cmp	r3, #4
 8016dfe:	dd3b      	ble.n	8016e78 <_dtoa_r+0x8b0>
 8016e00:	9b05      	ldr	r3, [sp, #20]
 8016e02:	f1c0 001c 	rsb	r0, r0, #28
 8016e06:	4403      	add	r3, r0
 8016e08:	9305      	str	r3, [sp, #20]
 8016e0a:	4405      	add	r5, r0
 8016e0c:	4480      	add	r8, r0
 8016e0e:	9b05      	ldr	r3, [sp, #20]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	dd05      	ble.n	8016e20 <_dtoa_r+0x858>
 8016e14:	461a      	mov	r2, r3
 8016e16:	9904      	ldr	r1, [sp, #16]
 8016e18:	4620      	mov	r0, r4
 8016e1a:	f000 fef9 	bl	8017c10 <__lshift>
 8016e1e:	9004      	str	r0, [sp, #16]
 8016e20:	f1b8 0f00 	cmp.w	r8, #0
 8016e24:	dd05      	ble.n	8016e32 <_dtoa_r+0x86a>
 8016e26:	4639      	mov	r1, r7
 8016e28:	4642      	mov	r2, r8
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	f000 fef0 	bl	8017c10 <__lshift>
 8016e30:	4607      	mov	r7, r0
 8016e32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016e34:	b353      	cbz	r3, 8016e8c <_dtoa_r+0x8c4>
 8016e36:	4639      	mov	r1, r7
 8016e38:	9804      	ldr	r0, [sp, #16]
 8016e3a:	f000 ff3d 	bl	8017cb8 <__mcmp>
 8016e3e:	2800      	cmp	r0, #0
 8016e40:	da24      	bge.n	8016e8c <_dtoa_r+0x8c4>
 8016e42:	2300      	movs	r3, #0
 8016e44:	220a      	movs	r2, #10
 8016e46:	9904      	ldr	r1, [sp, #16]
 8016e48:	4620      	mov	r0, r4
 8016e4a:	f000 fd2d 	bl	80178a8 <__multadd>
 8016e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e50:	9004      	str	r0, [sp, #16]
 8016e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	f000 814d 	beq.w	80170f6 <_dtoa_r+0xb2e>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	4631      	mov	r1, r6
 8016e60:	220a      	movs	r2, #10
 8016e62:	4620      	mov	r0, r4
 8016e64:	f000 fd20 	bl	80178a8 <__multadd>
 8016e68:	9b02      	ldr	r3, [sp, #8]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	4606      	mov	r6, r0
 8016e6e:	dc4f      	bgt.n	8016f10 <_dtoa_r+0x948>
 8016e70:	9b06      	ldr	r3, [sp, #24]
 8016e72:	2b02      	cmp	r3, #2
 8016e74:	dd4c      	ble.n	8016f10 <_dtoa_r+0x948>
 8016e76:	e011      	b.n	8016e9c <_dtoa_r+0x8d4>
 8016e78:	d0c9      	beq.n	8016e0e <_dtoa_r+0x846>
 8016e7a:	9a05      	ldr	r2, [sp, #20]
 8016e7c:	331c      	adds	r3, #28
 8016e7e:	441a      	add	r2, r3
 8016e80:	9205      	str	r2, [sp, #20]
 8016e82:	441d      	add	r5, r3
 8016e84:	4498      	add	r8, r3
 8016e86:	e7c2      	b.n	8016e0e <_dtoa_r+0x846>
 8016e88:	4603      	mov	r3, r0
 8016e8a:	e7f6      	b.n	8016e7a <_dtoa_r+0x8b2>
 8016e8c:	f1b9 0f00 	cmp.w	r9, #0
 8016e90:	dc38      	bgt.n	8016f04 <_dtoa_r+0x93c>
 8016e92:	9b06      	ldr	r3, [sp, #24]
 8016e94:	2b02      	cmp	r3, #2
 8016e96:	dd35      	ble.n	8016f04 <_dtoa_r+0x93c>
 8016e98:	f8cd 9008 	str.w	r9, [sp, #8]
 8016e9c:	9b02      	ldr	r3, [sp, #8]
 8016e9e:	b963      	cbnz	r3, 8016eba <_dtoa_r+0x8f2>
 8016ea0:	4639      	mov	r1, r7
 8016ea2:	2205      	movs	r2, #5
 8016ea4:	4620      	mov	r0, r4
 8016ea6:	f000 fcff 	bl	80178a8 <__multadd>
 8016eaa:	4601      	mov	r1, r0
 8016eac:	4607      	mov	r7, r0
 8016eae:	9804      	ldr	r0, [sp, #16]
 8016eb0:	f000 ff02 	bl	8017cb8 <__mcmp>
 8016eb4:	2800      	cmp	r0, #0
 8016eb6:	f73f adcc 	bgt.w	8016a52 <_dtoa_r+0x48a>
 8016eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ebc:	465d      	mov	r5, fp
 8016ebe:	ea6f 0a03 	mvn.w	sl, r3
 8016ec2:	f04f 0900 	mov.w	r9, #0
 8016ec6:	4639      	mov	r1, r7
 8016ec8:	4620      	mov	r0, r4
 8016eca:	f000 fcd6 	bl	801787a <_Bfree>
 8016ece:	2e00      	cmp	r6, #0
 8016ed0:	f43f aeb7 	beq.w	8016c42 <_dtoa_r+0x67a>
 8016ed4:	f1b9 0f00 	cmp.w	r9, #0
 8016ed8:	d005      	beq.n	8016ee6 <_dtoa_r+0x91e>
 8016eda:	45b1      	cmp	r9, r6
 8016edc:	d003      	beq.n	8016ee6 <_dtoa_r+0x91e>
 8016ede:	4649      	mov	r1, r9
 8016ee0:	4620      	mov	r0, r4
 8016ee2:	f000 fcca 	bl	801787a <_Bfree>
 8016ee6:	4631      	mov	r1, r6
 8016ee8:	4620      	mov	r0, r4
 8016eea:	f000 fcc6 	bl	801787a <_Bfree>
 8016eee:	e6a8      	b.n	8016c42 <_dtoa_r+0x67a>
 8016ef0:	2700      	movs	r7, #0
 8016ef2:	463e      	mov	r6, r7
 8016ef4:	e7e1      	b.n	8016eba <_dtoa_r+0x8f2>
 8016ef6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016efa:	463e      	mov	r6, r7
 8016efc:	e5a9      	b.n	8016a52 <_dtoa_r+0x48a>
 8016efe:	bf00      	nop
 8016f00:	40240000 	.word	0x40240000
 8016f04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016f06:	f8cd 9008 	str.w	r9, [sp, #8]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	f000 80fa 	beq.w	8017104 <_dtoa_r+0xb3c>
 8016f10:	2d00      	cmp	r5, #0
 8016f12:	dd05      	ble.n	8016f20 <_dtoa_r+0x958>
 8016f14:	4631      	mov	r1, r6
 8016f16:	462a      	mov	r2, r5
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f000 fe79 	bl	8017c10 <__lshift>
 8016f1e:	4606      	mov	r6, r0
 8016f20:	9b07      	ldr	r3, [sp, #28]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d04c      	beq.n	8016fc0 <_dtoa_r+0x9f8>
 8016f26:	6871      	ldr	r1, [r6, #4]
 8016f28:	4620      	mov	r0, r4
 8016f2a:	f000 fc72 	bl	8017812 <_Balloc>
 8016f2e:	6932      	ldr	r2, [r6, #16]
 8016f30:	3202      	adds	r2, #2
 8016f32:	4605      	mov	r5, r0
 8016f34:	0092      	lsls	r2, r2, #2
 8016f36:	f106 010c 	add.w	r1, r6, #12
 8016f3a:	300c      	adds	r0, #12
 8016f3c:	f000 fc5e 	bl	80177fc <memcpy>
 8016f40:	2201      	movs	r2, #1
 8016f42:	4629      	mov	r1, r5
 8016f44:	4620      	mov	r0, r4
 8016f46:	f000 fe63 	bl	8017c10 <__lshift>
 8016f4a:	9b00      	ldr	r3, [sp, #0]
 8016f4c:	f8cd b014 	str.w	fp, [sp, #20]
 8016f50:	f003 0301 	and.w	r3, r3, #1
 8016f54:	46b1      	mov	r9, r6
 8016f56:	9307      	str	r3, [sp, #28]
 8016f58:	4606      	mov	r6, r0
 8016f5a:	4639      	mov	r1, r7
 8016f5c:	9804      	ldr	r0, [sp, #16]
 8016f5e:	f7ff faa5 	bl	80164ac <quorem>
 8016f62:	4649      	mov	r1, r9
 8016f64:	4605      	mov	r5, r0
 8016f66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016f6a:	9804      	ldr	r0, [sp, #16]
 8016f6c:	f000 fea4 	bl	8017cb8 <__mcmp>
 8016f70:	4632      	mov	r2, r6
 8016f72:	9000      	str	r0, [sp, #0]
 8016f74:	4639      	mov	r1, r7
 8016f76:	4620      	mov	r0, r4
 8016f78:	f000 feb8 	bl	8017cec <__mdiff>
 8016f7c:	68c3      	ldr	r3, [r0, #12]
 8016f7e:	4602      	mov	r2, r0
 8016f80:	bb03      	cbnz	r3, 8016fc4 <_dtoa_r+0x9fc>
 8016f82:	4601      	mov	r1, r0
 8016f84:	9008      	str	r0, [sp, #32]
 8016f86:	9804      	ldr	r0, [sp, #16]
 8016f88:	f000 fe96 	bl	8017cb8 <__mcmp>
 8016f8c:	9a08      	ldr	r2, [sp, #32]
 8016f8e:	4603      	mov	r3, r0
 8016f90:	4611      	mov	r1, r2
 8016f92:	4620      	mov	r0, r4
 8016f94:	9308      	str	r3, [sp, #32]
 8016f96:	f000 fc70 	bl	801787a <_Bfree>
 8016f9a:	9b08      	ldr	r3, [sp, #32]
 8016f9c:	b9a3      	cbnz	r3, 8016fc8 <_dtoa_r+0xa00>
 8016f9e:	9a06      	ldr	r2, [sp, #24]
 8016fa0:	b992      	cbnz	r2, 8016fc8 <_dtoa_r+0xa00>
 8016fa2:	9a07      	ldr	r2, [sp, #28]
 8016fa4:	b982      	cbnz	r2, 8016fc8 <_dtoa_r+0xa00>
 8016fa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016faa:	d029      	beq.n	8017000 <_dtoa_r+0xa38>
 8016fac:	9b00      	ldr	r3, [sp, #0]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	dd01      	ble.n	8016fb6 <_dtoa_r+0x9ee>
 8016fb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8016fb6:	9b05      	ldr	r3, [sp, #20]
 8016fb8:	1c5d      	adds	r5, r3, #1
 8016fba:	f883 8000 	strb.w	r8, [r3]
 8016fbe:	e782      	b.n	8016ec6 <_dtoa_r+0x8fe>
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	e7c2      	b.n	8016f4a <_dtoa_r+0x982>
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	e7e3      	b.n	8016f90 <_dtoa_r+0x9c8>
 8016fc8:	9a00      	ldr	r2, [sp, #0]
 8016fca:	2a00      	cmp	r2, #0
 8016fcc:	db04      	blt.n	8016fd8 <_dtoa_r+0xa10>
 8016fce:	d125      	bne.n	801701c <_dtoa_r+0xa54>
 8016fd0:	9a06      	ldr	r2, [sp, #24]
 8016fd2:	bb1a      	cbnz	r2, 801701c <_dtoa_r+0xa54>
 8016fd4:	9a07      	ldr	r2, [sp, #28]
 8016fd6:	bb0a      	cbnz	r2, 801701c <_dtoa_r+0xa54>
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	ddec      	ble.n	8016fb6 <_dtoa_r+0x9ee>
 8016fdc:	2201      	movs	r2, #1
 8016fde:	9904      	ldr	r1, [sp, #16]
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f000 fe15 	bl	8017c10 <__lshift>
 8016fe6:	4639      	mov	r1, r7
 8016fe8:	9004      	str	r0, [sp, #16]
 8016fea:	f000 fe65 	bl	8017cb8 <__mcmp>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	dc03      	bgt.n	8016ffa <_dtoa_r+0xa32>
 8016ff2:	d1e0      	bne.n	8016fb6 <_dtoa_r+0x9ee>
 8016ff4:	f018 0f01 	tst.w	r8, #1
 8016ff8:	d0dd      	beq.n	8016fb6 <_dtoa_r+0x9ee>
 8016ffa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016ffe:	d1d8      	bne.n	8016fb2 <_dtoa_r+0x9ea>
 8017000:	9b05      	ldr	r3, [sp, #20]
 8017002:	9a05      	ldr	r2, [sp, #20]
 8017004:	1c5d      	adds	r5, r3, #1
 8017006:	2339      	movs	r3, #57	; 0x39
 8017008:	7013      	strb	r3, [r2, #0]
 801700a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801700e:	2b39      	cmp	r3, #57	; 0x39
 8017010:	f105 32ff 	add.w	r2, r5, #4294967295
 8017014:	d04f      	beq.n	80170b6 <_dtoa_r+0xaee>
 8017016:	3301      	adds	r3, #1
 8017018:	7013      	strb	r3, [r2, #0]
 801701a:	e754      	b.n	8016ec6 <_dtoa_r+0x8fe>
 801701c:	9a05      	ldr	r2, [sp, #20]
 801701e:	2b00      	cmp	r3, #0
 8017020:	f102 0501 	add.w	r5, r2, #1
 8017024:	dd06      	ble.n	8017034 <_dtoa_r+0xa6c>
 8017026:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801702a:	d0e9      	beq.n	8017000 <_dtoa_r+0xa38>
 801702c:	f108 0801 	add.w	r8, r8, #1
 8017030:	9b05      	ldr	r3, [sp, #20]
 8017032:	e7c2      	b.n	8016fba <_dtoa_r+0x9f2>
 8017034:	9a02      	ldr	r2, [sp, #8]
 8017036:	f805 8c01 	strb.w	r8, [r5, #-1]
 801703a:	eba5 030b 	sub.w	r3, r5, fp
 801703e:	4293      	cmp	r3, r2
 8017040:	d021      	beq.n	8017086 <_dtoa_r+0xabe>
 8017042:	2300      	movs	r3, #0
 8017044:	220a      	movs	r2, #10
 8017046:	9904      	ldr	r1, [sp, #16]
 8017048:	4620      	mov	r0, r4
 801704a:	f000 fc2d 	bl	80178a8 <__multadd>
 801704e:	45b1      	cmp	r9, r6
 8017050:	9004      	str	r0, [sp, #16]
 8017052:	f04f 0300 	mov.w	r3, #0
 8017056:	f04f 020a 	mov.w	r2, #10
 801705a:	4649      	mov	r1, r9
 801705c:	4620      	mov	r0, r4
 801705e:	d105      	bne.n	801706c <_dtoa_r+0xaa4>
 8017060:	f000 fc22 	bl	80178a8 <__multadd>
 8017064:	4681      	mov	r9, r0
 8017066:	4606      	mov	r6, r0
 8017068:	9505      	str	r5, [sp, #20]
 801706a:	e776      	b.n	8016f5a <_dtoa_r+0x992>
 801706c:	f000 fc1c 	bl	80178a8 <__multadd>
 8017070:	4631      	mov	r1, r6
 8017072:	4681      	mov	r9, r0
 8017074:	2300      	movs	r3, #0
 8017076:	220a      	movs	r2, #10
 8017078:	4620      	mov	r0, r4
 801707a:	f000 fc15 	bl	80178a8 <__multadd>
 801707e:	4606      	mov	r6, r0
 8017080:	e7f2      	b.n	8017068 <_dtoa_r+0xaa0>
 8017082:	f04f 0900 	mov.w	r9, #0
 8017086:	2201      	movs	r2, #1
 8017088:	9904      	ldr	r1, [sp, #16]
 801708a:	4620      	mov	r0, r4
 801708c:	f000 fdc0 	bl	8017c10 <__lshift>
 8017090:	4639      	mov	r1, r7
 8017092:	9004      	str	r0, [sp, #16]
 8017094:	f000 fe10 	bl	8017cb8 <__mcmp>
 8017098:	2800      	cmp	r0, #0
 801709a:	dcb6      	bgt.n	801700a <_dtoa_r+0xa42>
 801709c:	d102      	bne.n	80170a4 <_dtoa_r+0xadc>
 801709e:	f018 0f01 	tst.w	r8, #1
 80170a2:	d1b2      	bne.n	801700a <_dtoa_r+0xa42>
 80170a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80170a8:	2b30      	cmp	r3, #48	; 0x30
 80170aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80170ae:	f47f af0a 	bne.w	8016ec6 <_dtoa_r+0x8fe>
 80170b2:	4615      	mov	r5, r2
 80170b4:	e7f6      	b.n	80170a4 <_dtoa_r+0xadc>
 80170b6:	4593      	cmp	fp, r2
 80170b8:	d105      	bne.n	80170c6 <_dtoa_r+0xafe>
 80170ba:	2331      	movs	r3, #49	; 0x31
 80170bc:	f10a 0a01 	add.w	sl, sl, #1
 80170c0:	f88b 3000 	strb.w	r3, [fp]
 80170c4:	e6ff      	b.n	8016ec6 <_dtoa_r+0x8fe>
 80170c6:	4615      	mov	r5, r2
 80170c8:	e79f      	b.n	801700a <_dtoa_r+0xa42>
 80170ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017130 <_dtoa_r+0xb68>
 80170ce:	e007      	b.n	80170e0 <_dtoa_r+0xb18>
 80170d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80170d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017134 <_dtoa_r+0xb6c>
 80170d6:	b11b      	cbz	r3, 80170e0 <_dtoa_r+0xb18>
 80170d8:	f10b 0308 	add.w	r3, fp, #8
 80170dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80170de:	6013      	str	r3, [r2, #0]
 80170e0:	4658      	mov	r0, fp
 80170e2:	b017      	add	sp, #92	; 0x5c
 80170e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170e8:	9b06      	ldr	r3, [sp, #24]
 80170ea:	2b01      	cmp	r3, #1
 80170ec:	f77f ae35 	ble.w	8016d5a <_dtoa_r+0x792>
 80170f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80170f2:	9307      	str	r3, [sp, #28]
 80170f4:	e649      	b.n	8016d8a <_dtoa_r+0x7c2>
 80170f6:	9b02      	ldr	r3, [sp, #8]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	dc03      	bgt.n	8017104 <_dtoa_r+0xb3c>
 80170fc:	9b06      	ldr	r3, [sp, #24]
 80170fe:	2b02      	cmp	r3, #2
 8017100:	f73f aecc 	bgt.w	8016e9c <_dtoa_r+0x8d4>
 8017104:	465d      	mov	r5, fp
 8017106:	4639      	mov	r1, r7
 8017108:	9804      	ldr	r0, [sp, #16]
 801710a:	f7ff f9cf 	bl	80164ac <quorem>
 801710e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017112:	f805 8b01 	strb.w	r8, [r5], #1
 8017116:	9a02      	ldr	r2, [sp, #8]
 8017118:	eba5 030b 	sub.w	r3, r5, fp
 801711c:	429a      	cmp	r2, r3
 801711e:	ddb0      	ble.n	8017082 <_dtoa_r+0xaba>
 8017120:	2300      	movs	r3, #0
 8017122:	220a      	movs	r2, #10
 8017124:	9904      	ldr	r1, [sp, #16]
 8017126:	4620      	mov	r0, r4
 8017128:	f000 fbbe 	bl	80178a8 <__multadd>
 801712c:	9004      	str	r0, [sp, #16]
 801712e:	e7ea      	b.n	8017106 <_dtoa_r+0xb3e>
 8017130:	080193eb 	.word	0x080193eb
 8017134:	080192b0 	.word	0x080192b0

08017138 <rshift>:
 8017138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801713a:	6906      	ldr	r6, [r0, #16]
 801713c:	114b      	asrs	r3, r1, #5
 801713e:	429e      	cmp	r6, r3
 8017140:	f100 0414 	add.w	r4, r0, #20
 8017144:	dd30      	ble.n	80171a8 <rshift+0x70>
 8017146:	f011 011f 	ands.w	r1, r1, #31
 801714a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801714e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017152:	d108      	bne.n	8017166 <rshift+0x2e>
 8017154:	4621      	mov	r1, r4
 8017156:	42b2      	cmp	r2, r6
 8017158:	460b      	mov	r3, r1
 801715a:	d211      	bcs.n	8017180 <rshift+0x48>
 801715c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017160:	f841 3b04 	str.w	r3, [r1], #4
 8017164:	e7f7      	b.n	8017156 <rshift+0x1e>
 8017166:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801716a:	f1c1 0c20 	rsb	ip, r1, #32
 801716e:	40cd      	lsrs	r5, r1
 8017170:	3204      	adds	r2, #4
 8017172:	4623      	mov	r3, r4
 8017174:	42b2      	cmp	r2, r6
 8017176:	4617      	mov	r7, r2
 8017178:	d30c      	bcc.n	8017194 <rshift+0x5c>
 801717a:	601d      	str	r5, [r3, #0]
 801717c:	b105      	cbz	r5, 8017180 <rshift+0x48>
 801717e:	3304      	adds	r3, #4
 8017180:	1b1a      	subs	r2, r3, r4
 8017182:	42a3      	cmp	r3, r4
 8017184:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017188:	bf08      	it	eq
 801718a:	2300      	moveq	r3, #0
 801718c:	6102      	str	r2, [r0, #16]
 801718e:	bf08      	it	eq
 8017190:	6143      	streq	r3, [r0, #20]
 8017192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017194:	683f      	ldr	r7, [r7, #0]
 8017196:	fa07 f70c 	lsl.w	r7, r7, ip
 801719a:	433d      	orrs	r5, r7
 801719c:	f843 5b04 	str.w	r5, [r3], #4
 80171a0:	f852 5b04 	ldr.w	r5, [r2], #4
 80171a4:	40cd      	lsrs	r5, r1
 80171a6:	e7e5      	b.n	8017174 <rshift+0x3c>
 80171a8:	4623      	mov	r3, r4
 80171aa:	e7e9      	b.n	8017180 <rshift+0x48>

080171ac <__hexdig_fun>:
 80171ac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80171b0:	2b09      	cmp	r3, #9
 80171b2:	d802      	bhi.n	80171ba <__hexdig_fun+0xe>
 80171b4:	3820      	subs	r0, #32
 80171b6:	b2c0      	uxtb	r0, r0
 80171b8:	4770      	bx	lr
 80171ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80171be:	2b05      	cmp	r3, #5
 80171c0:	d801      	bhi.n	80171c6 <__hexdig_fun+0x1a>
 80171c2:	3847      	subs	r0, #71	; 0x47
 80171c4:	e7f7      	b.n	80171b6 <__hexdig_fun+0xa>
 80171c6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80171ca:	2b05      	cmp	r3, #5
 80171cc:	d801      	bhi.n	80171d2 <__hexdig_fun+0x26>
 80171ce:	3827      	subs	r0, #39	; 0x27
 80171d0:	e7f1      	b.n	80171b6 <__hexdig_fun+0xa>
 80171d2:	2000      	movs	r0, #0
 80171d4:	4770      	bx	lr

080171d6 <__gethex>:
 80171d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171da:	b08b      	sub	sp, #44	; 0x2c
 80171dc:	468a      	mov	sl, r1
 80171de:	9002      	str	r0, [sp, #8]
 80171e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80171e2:	9306      	str	r3, [sp, #24]
 80171e4:	4690      	mov	r8, r2
 80171e6:	f000 fadf 	bl	80177a8 <__localeconv_l>
 80171ea:	6803      	ldr	r3, [r0, #0]
 80171ec:	9303      	str	r3, [sp, #12]
 80171ee:	4618      	mov	r0, r3
 80171f0:	f7e9 f806 	bl	8000200 <strlen>
 80171f4:	9b03      	ldr	r3, [sp, #12]
 80171f6:	9001      	str	r0, [sp, #4]
 80171f8:	4403      	add	r3, r0
 80171fa:	f04f 0b00 	mov.w	fp, #0
 80171fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017202:	9307      	str	r3, [sp, #28]
 8017204:	f8da 3000 	ldr.w	r3, [sl]
 8017208:	3302      	adds	r3, #2
 801720a:	461f      	mov	r7, r3
 801720c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017210:	2830      	cmp	r0, #48	; 0x30
 8017212:	d06c      	beq.n	80172ee <__gethex+0x118>
 8017214:	f7ff ffca 	bl	80171ac <__hexdig_fun>
 8017218:	4604      	mov	r4, r0
 801721a:	2800      	cmp	r0, #0
 801721c:	d16a      	bne.n	80172f4 <__gethex+0x11e>
 801721e:	9a01      	ldr	r2, [sp, #4]
 8017220:	9903      	ldr	r1, [sp, #12]
 8017222:	4638      	mov	r0, r7
 8017224:	f001 fc40 	bl	8018aa8 <strncmp>
 8017228:	2800      	cmp	r0, #0
 801722a:	d166      	bne.n	80172fa <__gethex+0x124>
 801722c:	9b01      	ldr	r3, [sp, #4]
 801722e:	5cf8      	ldrb	r0, [r7, r3]
 8017230:	18fe      	adds	r6, r7, r3
 8017232:	f7ff ffbb 	bl	80171ac <__hexdig_fun>
 8017236:	2800      	cmp	r0, #0
 8017238:	d062      	beq.n	8017300 <__gethex+0x12a>
 801723a:	4633      	mov	r3, r6
 801723c:	7818      	ldrb	r0, [r3, #0]
 801723e:	2830      	cmp	r0, #48	; 0x30
 8017240:	461f      	mov	r7, r3
 8017242:	f103 0301 	add.w	r3, r3, #1
 8017246:	d0f9      	beq.n	801723c <__gethex+0x66>
 8017248:	f7ff ffb0 	bl	80171ac <__hexdig_fun>
 801724c:	fab0 f580 	clz	r5, r0
 8017250:	096d      	lsrs	r5, r5, #5
 8017252:	4634      	mov	r4, r6
 8017254:	f04f 0b01 	mov.w	fp, #1
 8017258:	463a      	mov	r2, r7
 801725a:	4616      	mov	r6, r2
 801725c:	3201      	adds	r2, #1
 801725e:	7830      	ldrb	r0, [r6, #0]
 8017260:	f7ff ffa4 	bl	80171ac <__hexdig_fun>
 8017264:	2800      	cmp	r0, #0
 8017266:	d1f8      	bne.n	801725a <__gethex+0x84>
 8017268:	9a01      	ldr	r2, [sp, #4]
 801726a:	9903      	ldr	r1, [sp, #12]
 801726c:	4630      	mov	r0, r6
 801726e:	f001 fc1b 	bl	8018aa8 <strncmp>
 8017272:	b950      	cbnz	r0, 801728a <__gethex+0xb4>
 8017274:	b954      	cbnz	r4, 801728c <__gethex+0xb6>
 8017276:	9b01      	ldr	r3, [sp, #4]
 8017278:	18f4      	adds	r4, r6, r3
 801727a:	4622      	mov	r2, r4
 801727c:	4616      	mov	r6, r2
 801727e:	3201      	adds	r2, #1
 8017280:	7830      	ldrb	r0, [r6, #0]
 8017282:	f7ff ff93 	bl	80171ac <__hexdig_fun>
 8017286:	2800      	cmp	r0, #0
 8017288:	d1f8      	bne.n	801727c <__gethex+0xa6>
 801728a:	b10c      	cbz	r4, 8017290 <__gethex+0xba>
 801728c:	1ba4      	subs	r4, r4, r6
 801728e:	00a4      	lsls	r4, r4, #2
 8017290:	7833      	ldrb	r3, [r6, #0]
 8017292:	2b50      	cmp	r3, #80	; 0x50
 8017294:	d001      	beq.n	801729a <__gethex+0xc4>
 8017296:	2b70      	cmp	r3, #112	; 0x70
 8017298:	d140      	bne.n	801731c <__gethex+0x146>
 801729a:	7873      	ldrb	r3, [r6, #1]
 801729c:	2b2b      	cmp	r3, #43	; 0x2b
 801729e:	d031      	beq.n	8017304 <__gethex+0x12e>
 80172a0:	2b2d      	cmp	r3, #45	; 0x2d
 80172a2:	d033      	beq.n	801730c <__gethex+0x136>
 80172a4:	1c71      	adds	r1, r6, #1
 80172a6:	f04f 0900 	mov.w	r9, #0
 80172aa:	7808      	ldrb	r0, [r1, #0]
 80172ac:	f7ff ff7e 	bl	80171ac <__hexdig_fun>
 80172b0:	1e43      	subs	r3, r0, #1
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	2b18      	cmp	r3, #24
 80172b6:	d831      	bhi.n	801731c <__gethex+0x146>
 80172b8:	f1a0 0210 	sub.w	r2, r0, #16
 80172bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80172c0:	f7ff ff74 	bl	80171ac <__hexdig_fun>
 80172c4:	1e43      	subs	r3, r0, #1
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	2b18      	cmp	r3, #24
 80172ca:	d922      	bls.n	8017312 <__gethex+0x13c>
 80172cc:	f1b9 0f00 	cmp.w	r9, #0
 80172d0:	d000      	beq.n	80172d4 <__gethex+0xfe>
 80172d2:	4252      	negs	r2, r2
 80172d4:	4414      	add	r4, r2
 80172d6:	f8ca 1000 	str.w	r1, [sl]
 80172da:	b30d      	cbz	r5, 8017320 <__gethex+0x14a>
 80172dc:	f1bb 0f00 	cmp.w	fp, #0
 80172e0:	bf0c      	ite	eq
 80172e2:	2706      	moveq	r7, #6
 80172e4:	2700      	movne	r7, #0
 80172e6:	4638      	mov	r0, r7
 80172e8:	b00b      	add	sp, #44	; 0x2c
 80172ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ee:	f10b 0b01 	add.w	fp, fp, #1
 80172f2:	e78a      	b.n	801720a <__gethex+0x34>
 80172f4:	2500      	movs	r5, #0
 80172f6:	462c      	mov	r4, r5
 80172f8:	e7ae      	b.n	8017258 <__gethex+0x82>
 80172fa:	463e      	mov	r6, r7
 80172fc:	2501      	movs	r5, #1
 80172fe:	e7c7      	b.n	8017290 <__gethex+0xba>
 8017300:	4604      	mov	r4, r0
 8017302:	e7fb      	b.n	80172fc <__gethex+0x126>
 8017304:	f04f 0900 	mov.w	r9, #0
 8017308:	1cb1      	adds	r1, r6, #2
 801730a:	e7ce      	b.n	80172aa <__gethex+0xd4>
 801730c:	f04f 0901 	mov.w	r9, #1
 8017310:	e7fa      	b.n	8017308 <__gethex+0x132>
 8017312:	230a      	movs	r3, #10
 8017314:	fb03 0202 	mla	r2, r3, r2, r0
 8017318:	3a10      	subs	r2, #16
 801731a:	e7cf      	b.n	80172bc <__gethex+0xe6>
 801731c:	4631      	mov	r1, r6
 801731e:	e7da      	b.n	80172d6 <__gethex+0x100>
 8017320:	1bf3      	subs	r3, r6, r7
 8017322:	3b01      	subs	r3, #1
 8017324:	4629      	mov	r1, r5
 8017326:	2b07      	cmp	r3, #7
 8017328:	dc49      	bgt.n	80173be <__gethex+0x1e8>
 801732a:	9802      	ldr	r0, [sp, #8]
 801732c:	f000 fa71 	bl	8017812 <_Balloc>
 8017330:	9b01      	ldr	r3, [sp, #4]
 8017332:	f100 0914 	add.w	r9, r0, #20
 8017336:	f04f 0b00 	mov.w	fp, #0
 801733a:	f1c3 0301 	rsb	r3, r3, #1
 801733e:	4605      	mov	r5, r0
 8017340:	f8cd 9010 	str.w	r9, [sp, #16]
 8017344:	46da      	mov	sl, fp
 8017346:	9308      	str	r3, [sp, #32]
 8017348:	42b7      	cmp	r7, r6
 801734a:	d33b      	bcc.n	80173c4 <__gethex+0x1ee>
 801734c:	9804      	ldr	r0, [sp, #16]
 801734e:	f840 ab04 	str.w	sl, [r0], #4
 8017352:	eba0 0009 	sub.w	r0, r0, r9
 8017356:	1080      	asrs	r0, r0, #2
 8017358:	6128      	str	r0, [r5, #16]
 801735a:	0147      	lsls	r7, r0, #5
 801735c:	4650      	mov	r0, sl
 801735e:	f000 fb1c 	bl	801799a <__hi0bits>
 8017362:	f8d8 6000 	ldr.w	r6, [r8]
 8017366:	1a3f      	subs	r7, r7, r0
 8017368:	42b7      	cmp	r7, r6
 801736a:	dd64      	ble.n	8017436 <__gethex+0x260>
 801736c:	1bbf      	subs	r7, r7, r6
 801736e:	4639      	mov	r1, r7
 8017370:	4628      	mov	r0, r5
 8017372:	f000 fe2b 	bl	8017fcc <__any_on>
 8017376:	4682      	mov	sl, r0
 8017378:	b178      	cbz	r0, 801739a <__gethex+0x1c4>
 801737a:	1e7b      	subs	r3, r7, #1
 801737c:	1159      	asrs	r1, r3, #5
 801737e:	f003 021f 	and.w	r2, r3, #31
 8017382:	f04f 0a01 	mov.w	sl, #1
 8017386:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801738a:	fa0a f202 	lsl.w	r2, sl, r2
 801738e:	420a      	tst	r2, r1
 8017390:	d003      	beq.n	801739a <__gethex+0x1c4>
 8017392:	4553      	cmp	r3, sl
 8017394:	dc46      	bgt.n	8017424 <__gethex+0x24e>
 8017396:	f04f 0a02 	mov.w	sl, #2
 801739a:	4639      	mov	r1, r7
 801739c:	4628      	mov	r0, r5
 801739e:	f7ff fecb 	bl	8017138 <rshift>
 80173a2:	443c      	add	r4, r7
 80173a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80173a8:	42a3      	cmp	r3, r4
 80173aa:	da52      	bge.n	8017452 <__gethex+0x27c>
 80173ac:	4629      	mov	r1, r5
 80173ae:	9802      	ldr	r0, [sp, #8]
 80173b0:	f000 fa63 	bl	801787a <_Bfree>
 80173b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80173b6:	2300      	movs	r3, #0
 80173b8:	6013      	str	r3, [r2, #0]
 80173ba:	27a3      	movs	r7, #163	; 0xa3
 80173bc:	e793      	b.n	80172e6 <__gethex+0x110>
 80173be:	3101      	adds	r1, #1
 80173c0:	105b      	asrs	r3, r3, #1
 80173c2:	e7b0      	b.n	8017326 <__gethex+0x150>
 80173c4:	1e73      	subs	r3, r6, #1
 80173c6:	9305      	str	r3, [sp, #20]
 80173c8:	9a07      	ldr	r2, [sp, #28]
 80173ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80173ce:	4293      	cmp	r3, r2
 80173d0:	d018      	beq.n	8017404 <__gethex+0x22e>
 80173d2:	f1bb 0f20 	cmp.w	fp, #32
 80173d6:	d107      	bne.n	80173e8 <__gethex+0x212>
 80173d8:	9b04      	ldr	r3, [sp, #16]
 80173da:	f8c3 a000 	str.w	sl, [r3]
 80173de:	3304      	adds	r3, #4
 80173e0:	f04f 0a00 	mov.w	sl, #0
 80173e4:	9304      	str	r3, [sp, #16]
 80173e6:	46d3      	mov	fp, sl
 80173e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80173ec:	f7ff fede 	bl	80171ac <__hexdig_fun>
 80173f0:	f000 000f 	and.w	r0, r0, #15
 80173f4:	fa00 f00b 	lsl.w	r0, r0, fp
 80173f8:	ea4a 0a00 	orr.w	sl, sl, r0
 80173fc:	f10b 0b04 	add.w	fp, fp, #4
 8017400:	9b05      	ldr	r3, [sp, #20]
 8017402:	e00d      	b.n	8017420 <__gethex+0x24a>
 8017404:	9b05      	ldr	r3, [sp, #20]
 8017406:	9a08      	ldr	r2, [sp, #32]
 8017408:	4413      	add	r3, r2
 801740a:	42bb      	cmp	r3, r7
 801740c:	d3e1      	bcc.n	80173d2 <__gethex+0x1fc>
 801740e:	4618      	mov	r0, r3
 8017410:	9a01      	ldr	r2, [sp, #4]
 8017412:	9903      	ldr	r1, [sp, #12]
 8017414:	9309      	str	r3, [sp, #36]	; 0x24
 8017416:	f001 fb47 	bl	8018aa8 <strncmp>
 801741a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801741c:	2800      	cmp	r0, #0
 801741e:	d1d8      	bne.n	80173d2 <__gethex+0x1fc>
 8017420:	461e      	mov	r6, r3
 8017422:	e791      	b.n	8017348 <__gethex+0x172>
 8017424:	1eb9      	subs	r1, r7, #2
 8017426:	4628      	mov	r0, r5
 8017428:	f000 fdd0 	bl	8017fcc <__any_on>
 801742c:	2800      	cmp	r0, #0
 801742e:	d0b2      	beq.n	8017396 <__gethex+0x1c0>
 8017430:	f04f 0a03 	mov.w	sl, #3
 8017434:	e7b1      	b.n	801739a <__gethex+0x1c4>
 8017436:	da09      	bge.n	801744c <__gethex+0x276>
 8017438:	1bf7      	subs	r7, r6, r7
 801743a:	4629      	mov	r1, r5
 801743c:	463a      	mov	r2, r7
 801743e:	9802      	ldr	r0, [sp, #8]
 8017440:	f000 fbe6 	bl	8017c10 <__lshift>
 8017444:	1be4      	subs	r4, r4, r7
 8017446:	4605      	mov	r5, r0
 8017448:	f100 0914 	add.w	r9, r0, #20
 801744c:	f04f 0a00 	mov.w	sl, #0
 8017450:	e7a8      	b.n	80173a4 <__gethex+0x1ce>
 8017452:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017456:	42a0      	cmp	r0, r4
 8017458:	dd6a      	ble.n	8017530 <__gethex+0x35a>
 801745a:	1b04      	subs	r4, r0, r4
 801745c:	42a6      	cmp	r6, r4
 801745e:	dc2e      	bgt.n	80174be <__gethex+0x2e8>
 8017460:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017464:	2b02      	cmp	r3, #2
 8017466:	d022      	beq.n	80174ae <__gethex+0x2d8>
 8017468:	2b03      	cmp	r3, #3
 801746a:	d024      	beq.n	80174b6 <__gethex+0x2e0>
 801746c:	2b01      	cmp	r3, #1
 801746e:	d115      	bne.n	801749c <__gethex+0x2c6>
 8017470:	42a6      	cmp	r6, r4
 8017472:	d113      	bne.n	801749c <__gethex+0x2c6>
 8017474:	2e01      	cmp	r6, #1
 8017476:	dc0b      	bgt.n	8017490 <__gethex+0x2ba>
 8017478:	9a06      	ldr	r2, [sp, #24]
 801747a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801747e:	6013      	str	r3, [r2, #0]
 8017480:	2301      	movs	r3, #1
 8017482:	612b      	str	r3, [r5, #16]
 8017484:	f8c9 3000 	str.w	r3, [r9]
 8017488:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801748a:	2762      	movs	r7, #98	; 0x62
 801748c:	601d      	str	r5, [r3, #0]
 801748e:	e72a      	b.n	80172e6 <__gethex+0x110>
 8017490:	1e71      	subs	r1, r6, #1
 8017492:	4628      	mov	r0, r5
 8017494:	f000 fd9a 	bl	8017fcc <__any_on>
 8017498:	2800      	cmp	r0, #0
 801749a:	d1ed      	bne.n	8017478 <__gethex+0x2a2>
 801749c:	4629      	mov	r1, r5
 801749e:	9802      	ldr	r0, [sp, #8]
 80174a0:	f000 f9eb 	bl	801787a <_Bfree>
 80174a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80174a6:	2300      	movs	r3, #0
 80174a8:	6013      	str	r3, [r2, #0]
 80174aa:	2750      	movs	r7, #80	; 0x50
 80174ac:	e71b      	b.n	80172e6 <__gethex+0x110>
 80174ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d0e1      	beq.n	8017478 <__gethex+0x2a2>
 80174b4:	e7f2      	b.n	801749c <__gethex+0x2c6>
 80174b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d1dd      	bne.n	8017478 <__gethex+0x2a2>
 80174bc:	e7ee      	b.n	801749c <__gethex+0x2c6>
 80174be:	1e67      	subs	r7, r4, #1
 80174c0:	f1ba 0f00 	cmp.w	sl, #0
 80174c4:	d131      	bne.n	801752a <__gethex+0x354>
 80174c6:	b127      	cbz	r7, 80174d2 <__gethex+0x2fc>
 80174c8:	4639      	mov	r1, r7
 80174ca:	4628      	mov	r0, r5
 80174cc:	f000 fd7e 	bl	8017fcc <__any_on>
 80174d0:	4682      	mov	sl, r0
 80174d2:	117a      	asrs	r2, r7, #5
 80174d4:	2301      	movs	r3, #1
 80174d6:	f007 071f 	and.w	r7, r7, #31
 80174da:	fa03 f707 	lsl.w	r7, r3, r7
 80174de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80174e2:	4621      	mov	r1, r4
 80174e4:	421f      	tst	r7, r3
 80174e6:	4628      	mov	r0, r5
 80174e8:	bf18      	it	ne
 80174ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80174ee:	1b36      	subs	r6, r6, r4
 80174f0:	f7ff fe22 	bl	8017138 <rshift>
 80174f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80174f8:	2702      	movs	r7, #2
 80174fa:	f1ba 0f00 	cmp.w	sl, #0
 80174fe:	d048      	beq.n	8017592 <__gethex+0x3bc>
 8017500:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017504:	2b02      	cmp	r3, #2
 8017506:	d015      	beq.n	8017534 <__gethex+0x35e>
 8017508:	2b03      	cmp	r3, #3
 801750a:	d017      	beq.n	801753c <__gethex+0x366>
 801750c:	2b01      	cmp	r3, #1
 801750e:	d109      	bne.n	8017524 <__gethex+0x34e>
 8017510:	f01a 0f02 	tst.w	sl, #2
 8017514:	d006      	beq.n	8017524 <__gethex+0x34e>
 8017516:	f8d9 3000 	ldr.w	r3, [r9]
 801751a:	ea4a 0a03 	orr.w	sl, sl, r3
 801751e:	f01a 0f01 	tst.w	sl, #1
 8017522:	d10e      	bne.n	8017542 <__gethex+0x36c>
 8017524:	f047 0710 	orr.w	r7, r7, #16
 8017528:	e033      	b.n	8017592 <__gethex+0x3bc>
 801752a:	f04f 0a01 	mov.w	sl, #1
 801752e:	e7d0      	b.n	80174d2 <__gethex+0x2fc>
 8017530:	2701      	movs	r7, #1
 8017532:	e7e2      	b.n	80174fa <__gethex+0x324>
 8017534:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017536:	f1c3 0301 	rsb	r3, r3, #1
 801753a:	9315      	str	r3, [sp, #84]	; 0x54
 801753c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801753e:	2b00      	cmp	r3, #0
 8017540:	d0f0      	beq.n	8017524 <__gethex+0x34e>
 8017542:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017546:	f105 0314 	add.w	r3, r5, #20
 801754a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801754e:	eb03 010a 	add.w	r1, r3, sl
 8017552:	f04f 0c00 	mov.w	ip, #0
 8017556:	4618      	mov	r0, r3
 8017558:	f853 2b04 	ldr.w	r2, [r3], #4
 801755c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017560:	d01c      	beq.n	801759c <__gethex+0x3c6>
 8017562:	3201      	adds	r2, #1
 8017564:	6002      	str	r2, [r0, #0]
 8017566:	2f02      	cmp	r7, #2
 8017568:	f105 0314 	add.w	r3, r5, #20
 801756c:	d138      	bne.n	80175e0 <__gethex+0x40a>
 801756e:	f8d8 2000 	ldr.w	r2, [r8]
 8017572:	3a01      	subs	r2, #1
 8017574:	42b2      	cmp	r2, r6
 8017576:	d10a      	bne.n	801758e <__gethex+0x3b8>
 8017578:	1171      	asrs	r1, r6, #5
 801757a:	2201      	movs	r2, #1
 801757c:	f006 061f 	and.w	r6, r6, #31
 8017580:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017584:	fa02 f606 	lsl.w	r6, r2, r6
 8017588:	421e      	tst	r6, r3
 801758a:	bf18      	it	ne
 801758c:	4617      	movne	r7, r2
 801758e:	f047 0720 	orr.w	r7, r7, #32
 8017592:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017594:	601d      	str	r5, [r3, #0]
 8017596:	9b06      	ldr	r3, [sp, #24]
 8017598:	601c      	str	r4, [r3, #0]
 801759a:	e6a4      	b.n	80172e6 <__gethex+0x110>
 801759c:	4299      	cmp	r1, r3
 801759e:	f843 cc04 	str.w	ip, [r3, #-4]
 80175a2:	d8d8      	bhi.n	8017556 <__gethex+0x380>
 80175a4:	68ab      	ldr	r3, [r5, #8]
 80175a6:	4599      	cmp	r9, r3
 80175a8:	db12      	blt.n	80175d0 <__gethex+0x3fa>
 80175aa:	6869      	ldr	r1, [r5, #4]
 80175ac:	9802      	ldr	r0, [sp, #8]
 80175ae:	3101      	adds	r1, #1
 80175b0:	f000 f92f 	bl	8017812 <_Balloc>
 80175b4:	692a      	ldr	r2, [r5, #16]
 80175b6:	3202      	adds	r2, #2
 80175b8:	f105 010c 	add.w	r1, r5, #12
 80175bc:	4683      	mov	fp, r0
 80175be:	0092      	lsls	r2, r2, #2
 80175c0:	300c      	adds	r0, #12
 80175c2:	f000 f91b 	bl	80177fc <memcpy>
 80175c6:	4629      	mov	r1, r5
 80175c8:	9802      	ldr	r0, [sp, #8]
 80175ca:	f000 f956 	bl	801787a <_Bfree>
 80175ce:	465d      	mov	r5, fp
 80175d0:	692b      	ldr	r3, [r5, #16]
 80175d2:	1c5a      	adds	r2, r3, #1
 80175d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80175d8:	612a      	str	r2, [r5, #16]
 80175da:	2201      	movs	r2, #1
 80175dc:	615a      	str	r2, [r3, #20]
 80175de:	e7c2      	b.n	8017566 <__gethex+0x390>
 80175e0:	692a      	ldr	r2, [r5, #16]
 80175e2:	454a      	cmp	r2, r9
 80175e4:	dd0b      	ble.n	80175fe <__gethex+0x428>
 80175e6:	2101      	movs	r1, #1
 80175e8:	4628      	mov	r0, r5
 80175ea:	f7ff fda5 	bl	8017138 <rshift>
 80175ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80175f2:	3401      	adds	r4, #1
 80175f4:	42a3      	cmp	r3, r4
 80175f6:	f6ff aed9 	blt.w	80173ac <__gethex+0x1d6>
 80175fa:	2701      	movs	r7, #1
 80175fc:	e7c7      	b.n	801758e <__gethex+0x3b8>
 80175fe:	f016 061f 	ands.w	r6, r6, #31
 8017602:	d0fa      	beq.n	80175fa <__gethex+0x424>
 8017604:	449a      	add	sl, r3
 8017606:	f1c6 0620 	rsb	r6, r6, #32
 801760a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801760e:	f000 f9c4 	bl	801799a <__hi0bits>
 8017612:	42b0      	cmp	r0, r6
 8017614:	dbe7      	blt.n	80175e6 <__gethex+0x410>
 8017616:	e7f0      	b.n	80175fa <__gethex+0x424>

08017618 <L_shift>:
 8017618:	f1c2 0208 	rsb	r2, r2, #8
 801761c:	0092      	lsls	r2, r2, #2
 801761e:	b570      	push	{r4, r5, r6, lr}
 8017620:	f1c2 0620 	rsb	r6, r2, #32
 8017624:	6843      	ldr	r3, [r0, #4]
 8017626:	6804      	ldr	r4, [r0, #0]
 8017628:	fa03 f506 	lsl.w	r5, r3, r6
 801762c:	432c      	orrs	r4, r5
 801762e:	40d3      	lsrs	r3, r2
 8017630:	6004      	str	r4, [r0, #0]
 8017632:	f840 3f04 	str.w	r3, [r0, #4]!
 8017636:	4288      	cmp	r0, r1
 8017638:	d3f4      	bcc.n	8017624 <L_shift+0xc>
 801763a:	bd70      	pop	{r4, r5, r6, pc}

0801763c <__match>:
 801763c:	b530      	push	{r4, r5, lr}
 801763e:	6803      	ldr	r3, [r0, #0]
 8017640:	3301      	adds	r3, #1
 8017642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017646:	b914      	cbnz	r4, 801764e <__match+0x12>
 8017648:	6003      	str	r3, [r0, #0]
 801764a:	2001      	movs	r0, #1
 801764c:	bd30      	pop	{r4, r5, pc}
 801764e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017652:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017656:	2d19      	cmp	r5, #25
 8017658:	bf98      	it	ls
 801765a:	3220      	addls	r2, #32
 801765c:	42a2      	cmp	r2, r4
 801765e:	d0f0      	beq.n	8017642 <__match+0x6>
 8017660:	2000      	movs	r0, #0
 8017662:	e7f3      	b.n	801764c <__match+0x10>

08017664 <__hexnan>:
 8017664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017668:	680b      	ldr	r3, [r1, #0]
 801766a:	6801      	ldr	r1, [r0, #0]
 801766c:	115f      	asrs	r7, r3, #5
 801766e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017672:	f013 031f 	ands.w	r3, r3, #31
 8017676:	b087      	sub	sp, #28
 8017678:	bf18      	it	ne
 801767a:	3704      	addne	r7, #4
 801767c:	2500      	movs	r5, #0
 801767e:	1f3e      	subs	r6, r7, #4
 8017680:	4682      	mov	sl, r0
 8017682:	4690      	mov	r8, r2
 8017684:	9301      	str	r3, [sp, #4]
 8017686:	f847 5c04 	str.w	r5, [r7, #-4]
 801768a:	46b1      	mov	r9, r6
 801768c:	4634      	mov	r4, r6
 801768e:	9502      	str	r5, [sp, #8]
 8017690:	46ab      	mov	fp, r5
 8017692:	784a      	ldrb	r2, [r1, #1]
 8017694:	1c4b      	adds	r3, r1, #1
 8017696:	9303      	str	r3, [sp, #12]
 8017698:	b342      	cbz	r2, 80176ec <__hexnan+0x88>
 801769a:	4610      	mov	r0, r2
 801769c:	9105      	str	r1, [sp, #20]
 801769e:	9204      	str	r2, [sp, #16]
 80176a0:	f7ff fd84 	bl	80171ac <__hexdig_fun>
 80176a4:	2800      	cmp	r0, #0
 80176a6:	d143      	bne.n	8017730 <__hexnan+0xcc>
 80176a8:	9a04      	ldr	r2, [sp, #16]
 80176aa:	9905      	ldr	r1, [sp, #20]
 80176ac:	2a20      	cmp	r2, #32
 80176ae:	d818      	bhi.n	80176e2 <__hexnan+0x7e>
 80176b0:	9b02      	ldr	r3, [sp, #8]
 80176b2:	459b      	cmp	fp, r3
 80176b4:	dd13      	ble.n	80176de <__hexnan+0x7a>
 80176b6:	454c      	cmp	r4, r9
 80176b8:	d206      	bcs.n	80176c8 <__hexnan+0x64>
 80176ba:	2d07      	cmp	r5, #7
 80176bc:	dc04      	bgt.n	80176c8 <__hexnan+0x64>
 80176be:	462a      	mov	r2, r5
 80176c0:	4649      	mov	r1, r9
 80176c2:	4620      	mov	r0, r4
 80176c4:	f7ff ffa8 	bl	8017618 <L_shift>
 80176c8:	4544      	cmp	r4, r8
 80176ca:	d944      	bls.n	8017756 <__hexnan+0xf2>
 80176cc:	2300      	movs	r3, #0
 80176ce:	f1a4 0904 	sub.w	r9, r4, #4
 80176d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80176d6:	f8cd b008 	str.w	fp, [sp, #8]
 80176da:	464c      	mov	r4, r9
 80176dc:	461d      	mov	r5, r3
 80176de:	9903      	ldr	r1, [sp, #12]
 80176e0:	e7d7      	b.n	8017692 <__hexnan+0x2e>
 80176e2:	2a29      	cmp	r2, #41	; 0x29
 80176e4:	d14a      	bne.n	801777c <__hexnan+0x118>
 80176e6:	3102      	adds	r1, #2
 80176e8:	f8ca 1000 	str.w	r1, [sl]
 80176ec:	f1bb 0f00 	cmp.w	fp, #0
 80176f0:	d044      	beq.n	801777c <__hexnan+0x118>
 80176f2:	454c      	cmp	r4, r9
 80176f4:	d206      	bcs.n	8017704 <__hexnan+0xa0>
 80176f6:	2d07      	cmp	r5, #7
 80176f8:	dc04      	bgt.n	8017704 <__hexnan+0xa0>
 80176fa:	462a      	mov	r2, r5
 80176fc:	4649      	mov	r1, r9
 80176fe:	4620      	mov	r0, r4
 8017700:	f7ff ff8a 	bl	8017618 <L_shift>
 8017704:	4544      	cmp	r4, r8
 8017706:	d928      	bls.n	801775a <__hexnan+0xf6>
 8017708:	4643      	mov	r3, r8
 801770a:	f854 2b04 	ldr.w	r2, [r4], #4
 801770e:	f843 2b04 	str.w	r2, [r3], #4
 8017712:	42a6      	cmp	r6, r4
 8017714:	d2f9      	bcs.n	801770a <__hexnan+0xa6>
 8017716:	2200      	movs	r2, #0
 8017718:	f843 2b04 	str.w	r2, [r3], #4
 801771c:	429e      	cmp	r6, r3
 801771e:	d2fb      	bcs.n	8017718 <__hexnan+0xb4>
 8017720:	6833      	ldr	r3, [r6, #0]
 8017722:	b91b      	cbnz	r3, 801772c <__hexnan+0xc8>
 8017724:	4546      	cmp	r6, r8
 8017726:	d127      	bne.n	8017778 <__hexnan+0x114>
 8017728:	2301      	movs	r3, #1
 801772a:	6033      	str	r3, [r6, #0]
 801772c:	2005      	movs	r0, #5
 801772e:	e026      	b.n	801777e <__hexnan+0x11a>
 8017730:	3501      	adds	r5, #1
 8017732:	2d08      	cmp	r5, #8
 8017734:	f10b 0b01 	add.w	fp, fp, #1
 8017738:	dd06      	ble.n	8017748 <__hexnan+0xe4>
 801773a:	4544      	cmp	r4, r8
 801773c:	d9cf      	bls.n	80176de <__hexnan+0x7a>
 801773e:	2300      	movs	r3, #0
 8017740:	f844 3c04 	str.w	r3, [r4, #-4]
 8017744:	2501      	movs	r5, #1
 8017746:	3c04      	subs	r4, #4
 8017748:	6822      	ldr	r2, [r4, #0]
 801774a:	f000 000f 	and.w	r0, r0, #15
 801774e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017752:	6020      	str	r0, [r4, #0]
 8017754:	e7c3      	b.n	80176de <__hexnan+0x7a>
 8017756:	2508      	movs	r5, #8
 8017758:	e7c1      	b.n	80176de <__hexnan+0x7a>
 801775a:	9b01      	ldr	r3, [sp, #4]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d0df      	beq.n	8017720 <__hexnan+0xbc>
 8017760:	f04f 32ff 	mov.w	r2, #4294967295
 8017764:	f1c3 0320 	rsb	r3, r3, #32
 8017768:	fa22 f303 	lsr.w	r3, r2, r3
 801776c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017770:	401a      	ands	r2, r3
 8017772:	f847 2c04 	str.w	r2, [r7, #-4]
 8017776:	e7d3      	b.n	8017720 <__hexnan+0xbc>
 8017778:	3e04      	subs	r6, #4
 801777a:	e7d1      	b.n	8017720 <__hexnan+0xbc>
 801777c:	2004      	movs	r0, #4
 801777e:	b007      	add	sp, #28
 8017780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017784 <__locale_ctype_ptr_l>:
 8017784:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017788:	4770      	bx	lr
	...

0801778c <__locale_ctype_ptr>:
 801778c:	4b04      	ldr	r3, [pc, #16]	; (80177a0 <__locale_ctype_ptr+0x14>)
 801778e:	4a05      	ldr	r2, [pc, #20]	; (80177a4 <__locale_ctype_ptr+0x18>)
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	6a1b      	ldr	r3, [r3, #32]
 8017794:	2b00      	cmp	r3, #0
 8017796:	bf08      	it	eq
 8017798:	4613      	moveq	r3, r2
 801779a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801779e:	4770      	bx	lr
 80177a0:	2000000c 	.word	0x2000000c
 80177a4:	20000070 	.word	0x20000070

080177a8 <__localeconv_l>:
 80177a8:	30f0      	adds	r0, #240	; 0xf0
 80177aa:	4770      	bx	lr

080177ac <_localeconv_r>:
 80177ac:	4b04      	ldr	r3, [pc, #16]	; (80177c0 <_localeconv_r+0x14>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	6a18      	ldr	r0, [r3, #32]
 80177b2:	4b04      	ldr	r3, [pc, #16]	; (80177c4 <_localeconv_r+0x18>)
 80177b4:	2800      	cmp	r0, #0
 80177b6:	bf08      	it	eq
 80177b8:	4618      	moveq	r0, r3
 80177ba:	30f0      	adds	r0, #240	; 0xf0
 80177bc:	4770      	bx	lr
 80177be:	bf00      	nop
 80177c0:	2000000c 	.word	0x2000000c
 80177c4:	20000070 	.word	0x20000070

080177c8 <malloc>:
 80177c8:	4b02      	ldr	r3, [pc, #8]	; (80177d4 <malloc+0xc>)
 80177ca:	4601      	mov	r1, r0
 80177cc:	6818      	ldr	r0, [r3, #0]
 80177ce:	f000 bc7b 	b.w	80180c8 <_malloc_r>
 80177d2:	bf00      	nop
 80177d4:	2000000c 	.word	0x2000000c

080177d8 <__ascii_mbtowc>:
 80177d8:	b082      	sub	sp, #8
 80177da:	b901      	cbnz	r1, 80177de <__ascii_mbtowc+0x6>
 80177dc:	a901      	add	r1, sp, #4
 80177de:	b142      	cbz	r2, 80177f2 <__ascii_mbtowc+0x1a>
 80177e0:	b14b      	cbz	r3, 80177f6 <__ascii_mbtowc+0x1e>
 80177e2:	7813      	ldrb	r3, [r2, #0]
 80177e4:	600b      	str	r3, [r1, #0]
 80177e6:	7812      	ldrb	r2, [r2, #0]
 80177e8:	1c10      	adds	r0, r2, #0
 80177ea:	bf18      	it	ne
 80177ec:	2001      	movne	r0, #1
 80177ee:	b002      	add	sp, #8
 80177f0:	4770      	bx	lr
 80177f2:	4610      	mov	r0, r2
 80177f4:	e7fb      	b.n	80177ee <__ascii_mbtowc+0x16>
 80177f6:	f06f 0001 	mvn.w	r0, #1
 80177fa:	e7f8      	b.n	80177ee <__ascii_mbtowc+0x16>

080177fc <memcpy>:
 80177fc:	b510      	push	{r4, lr}
 80177fe:	1e43      	subs	r3, r0, #1
 8017800:	440a      	add	r2, r1
 8017802:	4291      	cmp	r1, r2
 8017804:	d100      	bne.n	8017808 <memcpy+0xc>
 8017806:	bd10      	pop	{r4, pc}
 8017808:	f811 4b01 	ldrb.w	r4, [r1], #1
 801780c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017810:	e7f7      	b.n	8017802 <memcpy+0x6>

08017812 <_Balloc>:
 8017812:	b570      	push	{r4, r5, r6, lr}
 8017814:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017816:	4604      	mov	r4, r0
 8017818:	460e      	mov	r6, r1
 801781a:	b93d      	cbnz	r5, 801782c <_Balloc+0x1a>
 801781c:	2010      	movs	r0, #16
 801781e:	f7ff ffd3 	bl	80177c8 <malloc>
 8017822:	6260      	str	r0, [r4, #36]	; 0x24
 8017824:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017828:	6005      	str	r5, [r0, #0]
 801782a:	60c5      	str	r5, [r0, #12]
 801782c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801782e:	68eb      	ldr	r3, [r5, #12]
 8017830:	b183      	cbz	r3, 8017854 <_Balloc+0x42>
 8017832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017834:	68db      	ldr	r3, [r3, #12]
 8017836:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801783a:	b9b8      	cbnz	r0, 801786c <_Balloc+0x5a>
 801783c:	2101      	movs	r1, #1
 801783e:	fa01 f506 	lsl.w	r5, r1, r6
 8017842:	1d6a      	adds	r2, r5, #5
 8017844:	0092      	lsls	r2, r2, #2
 8017846:	4620      	mov	r0, r4
 8017848:	f000 fbe1 	bl	801800e <_calloc_r>
 801784c:	b160      	cbz	r0, 8017868 <_Balloc+0x56>
 801784e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017852:	e00e      	b.n	8017872 <_Balloc+0x60>
 8017854:	2221      	movs	r2, #33	; 0x21
 8017856:	2104      	movs	r1, #4
 8017858:	4620      	mov	r0, r4
 801785a:	f000 fbd8 	bl	801800e <_calloc_r>
 801785e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017860:	60e8      	str	r0, [r5, #12]
 8017862:	68db      	ldr	r3, [r3, #12]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d1e4      	bne.n	8017832 <_Balloc+0x20>
 8017868:	2000      	movs	r0, #0
 801786a:	bd70      	pop	{r4, r5, r6, pc}
 801786c:	6802      	ldr	r2, [r0, #0]
 801786e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017872:	2300      	movs	r3, #0
 8017874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017878:	e7f7      	b.n	801786a <_Balloc+0x58>

0801787a <_Bfree>:
 801787a:	b570      	push	{r4, r5, r6, lr}
 801787c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801787e:	4606      	mov	r6, r0
 8017880:	460d      	mov	r5, r1
 8017882:	b93c      	cbnz	r4, 8017894 <_Bfree+0x1a>
 8017884:	2010      	movs	r0, #16
 8017886:	f7ff ff9f 	bl	80177c8 <malloc>
 801788a:	6270      	str	r0, [r6, #36]	; 0x24
 801788c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017890:	6004      	str	r4, [r0, #0]
 8017892:	60c4      	str	r4, [r0, #12]
 8017894:	b13d      	cbz	r5, 80178a6 <_Bfree+0x2c>
 8017896:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017898:	686a      	ldr	r2, [r5, #4]
 801789a:	68db      	ldr	r3, [r3, #12]
 801789c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80178a0:	6029      	str	r1, [r5, #0]
 80178a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80178a6:	bd70      	pop	{r4, r5, r6, pc}

080178a8 <__multadd>:
 80178a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178ac:	690d      	ldr	r5, [r1, #16]
 80178ae:	461f      	mov	r7, r3
 80178b0:	4606      	mov	r6, r0
 80178b2:	460c      	mov	r4, r1
 80178b4:	f101 0c14 	add.w	ip, r1, #20
 80178b8:	2300      	movs	r3, #0
 80178ba:	f8dc 0000 	ldr.w	r0, [ip]
 80178be:	b281      	uxth	r1, r0
 80178c0:	fb02 7101 	mla	r1, r2, r1, r7
 80178c4:	0c0f      	lsrs	r7, r1, #16
 80178c6:	0c00      	lsrs	r0, r0, #16
 80178c8:	fb02 7000 	mla	r0, r2, r0, r7
 80178cc:	b289      	uxth	r1, r1
 80178ce:	3301      	adds	r3, #1
 80178d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80178d4:	429d      	cmp	r5, r3
 80178d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80178da:	f84c 1b04 	str.w	r1, [ip], #4
 80178de:	dcec      	bgt.n	80178ba <__multadd+0x12>
 80178e0:	b1d7      	cbz	r7, 8017918 <__multadd+0x70>
 80178e2:	68a3      	ldr	r3, [r4, #8]
 80178e4:	42ab      	cmp	r3, r5
 80178e6:	dc12      	bgt.n	801790e <__multadd+0x66>
 80178e8:	6861      	ldr	r1, [r4, #4]
 80178ea:	4630      	mov	r0, r6
 80178ec:	3101      	adds	r1, #1
 80178ee:	f7ff ff90 	bl	8017812 <_Balloc>
 80178f2:	6922      	ldr	r2, [r4, #16]
 80178f4:	3202      	adds	r2, #2
 80178f6:	f104 010c 	add.w	r1, r4, #12
 80178fa:	4680      	mov	r8, r0
 80178fc:	0092      	lsls	r2, r2, #2
 80178fe:	300c      	adds	r0, #12
 8017900:	f7ff ff7c 	bl	80177fc <memcpy>
 8017904:	4621      	mov	r1, r4
 8017906:	4630      	mov	r0, r6
 8017908:	f7ff ffb7 	bl	801787a <_Bfree>
 801790c:	4644      	mov	r4, r8
 801790e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017912:	3501      	adds	r5, #1
 8017914:	615f      	str	r7, [r3, #20]
 8017916:	6125      	str	r5, [r4, #16]
 8017918:	4620      	mov	r0, r4
 801791a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801791e <__s2b>:
 801791e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017922:	460c      	mov	r4, r1
 8017924:	4615      	mov	r5, r2
 8017926:	461f      	mov	r7, r3
 8017928:	2209      	movs	r2, #9
 801792a:	3308      	adds	r3, #8
 801792c:	4606      	mov	r6, r0
 801792e:	fb93 f3f2 	sdiv	r3, r3, r2
 8017932:	2100      	movs	r1, #0
 8017934:	2201      	movs	r2, #1
 8017936:	429a      	cmp	r2, r3
 8017938:	db20      	blt.n	801797c <__s2b+0x5e>
 801793a:	4630      	mov	r0, r6
 801793c:	f7ff ff69 	bl	8017812 <_Balloc>
 8017940:	9b08      	ldr	r3, [sp, #32]
 8017942:	6143      	str	r3, [r0, #20]
 8017944:	2d09      	cmp	r5, #9
 8017946:	f04f 0301 	mov.w	r3, #1
 801794a:	6103      	str	r3, [r0, #16]
 801794c:	dd19      	ble.n	8017982 <__s2b+0x64>
 801794e:	f104 0809 	add.w	r8, r4, #9
 8017952:	46c1      	mov	r9, r8
 8017954:	442c      	add	r4, r5
 8017956:	f819 3b01 	ldrb.w	r3, [r9], #1
 801795a:	4601      	mov	r1, r0
 801795c:	3b30      	subs	r3, #48	; 0x30
 801795e:	220a      	movs	r2, #10
 8017960:	4630      	mov	r0, r6
 8017962:	f7ff ffa1 	bl	80178a8 <__multadd>
 8017966:	45a1      	cmp	r9, r4
 8017968:	d1f5      	bne.n	8017956 <__s2b+0x38>
 801796a:	eb08 0405 	add.w	r4, r8, r5
 801796e:	3c08      	subs	r4, #8
 8017970:	1b2d      	subs	r5, r5, r4
 8017972:	1963      	adds	r3, r4, r5
 8017974:	42bb      	cmp	r3, r7
 8017976:	db07      	blt.n	8017988 <__s2b+0x6a>
 8017978:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801797c:	0052      	lsls	r2, r2, #1
 801797e:	3101      	adds	r1, #1
 8017980:	e7d9      	b.n	8017936 <__s2b+0x18>
 8017982:	340a      	adds	r4, #10
 8017984:	2509      	movs	r5, #9
 8017986:	e7f3      	b.n	8017970 <__s2b+0x52>
 8017988:	f814 3b01 	ldrb.w	r3, [r4], #1
 801798c:	4601      	mov	r1, r0
 801798e:	3b30      	subs	r3, #48	; 0x30
 8017990:	220a      	movs	r2, #10
 8017992:	4630      	mov	r0, r6
 8017994:	f7ff ff88 	bl	80178a8 <__multadd>
 8017998:	e7eb      	b.n	8017972 <__s2b+0x54>

0801799a <__hi0bits>:
 801799a:	0c02      	lsrs	r2, r0, #16
 801799c:	0412      	lsls	r2, r2, #16
 801799e:	4603      	mov	r3, r0
 80179a0:	b9b2      	cbnz	r2, 80179d0 <__hi0bits+0x36>
 80179a2:	0403      	lsls	r3, r0, #16
 80179a4:	2010      	movs	r0, #16
 80179a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80179aa:	bf04      	itt	eq
 80179ac:	021b      	lsleq	r3, r3, #8
 80179ae:	3008      	addeq	r0, #8
 80179b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80179b4:	bf04      	itt	eq
 80179b6:	011b      	lsleq	r3, r3, #4
 80179b8:	3004      	addeq	r0, #4
 80179ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80179be:	bf04      	itt	eq
 80179c0:	009b      	lsleq	r3, r3, #2
 80179c2:	3002      	addeq	r0, #2
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	db06      	blt.n	80179d6 <__hi0bits+0x3c>
 80179c8:	005b      	lsls	r3, r3, #1
 80179ca:	d503      	bpl.n	80179d4 <__hi0bits+0x3a>
 80179cc:	3001      	adds	r0, #1
 80179ce:	4770      	bx	lr
 80179d0:	2000      	movs	r0, #0
 80179d2:	e7e8      	b.n	80179a6 <__hi0bits+0xc>
 80179d4:	2020      	movs	r0, #32
 80179d6:	4770      	bx	lr

080179d8 <__lo0bits>:
 80179d8:	6803      	ldr	r3, [r0, #0]
 80179da:	f013 0207 	ands.w	r2, r3, #7
 80179de:	4601      	mov	r1, r0
 80179e0:	d00b      	beq.n	80179fa <__lo0bits+0x22>
 80179e2:	07da      	lsls	r2, r3, #31
 80179e4:	d423      	bmi.n	8017a2e <__lo0bits+0x56>
 80179e6:	0798      	lsls	r0, r3, #30
 80179e8:	bf49      	itett	mi
 80179ea:	085b      	lsrmi	r3, r3, #1
 80179ec:	089b      	lsrpl	r3, r3, #2
 80179ee:	2001      	movmi	r0, #1
 80179f0:	600b      	strmi	r3, [r1, #0]
 80179f2:	bf5c      	itt	pl
 80179f4:	600b      	strpl	r3, [r1, #0]
 80179f6:	2002      	movpl	r0, #2
 80179f8:	4770      	bx	lr
 80179fa:	b298      	uxth	r0, r3
 80179fc:	b9a8      	cbnz	r0, 8017a2a <__lo0bits+0x52>
 80179fe:	0c1b      	lsrs	r3, r3, #16
 8017a00:	2010      	movs	r0, #16
 8017a02:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017a06:	bf04      	itt	eq
 8017a08:	0a1b      	lsreq	r3, r3, #8
 8017a0a:	3008      	addeq	r0, #8
 8017a0c:	071a      	lsls	r2, r3, #28
 8017a0e:	bf04      	itt	eq
 8017a10:	091b      	lsreq	r3, r3, #4
 8017a12:	3004      	addeq	r0, #4
 8017a14:	079a      	lsls	r2, r3, #30
 8017a16:	bf04      	itt	eq
 8017a18:	089b      	lsreq	r3, r3, #2
 8017a1a:	3002      	addeq	r0, #2
 8017a1c:	07da      	lsls	r2, r3, #31
 8017a1e:	d402      	bmi.n	8017a26 <__lo0bits+0x4e>
 8017a20:	085b      	lsrs	r3, r3, #1
 8017a22:	d006      	beq.n	8017a32 <__lo0bits+0x5a>
 8017a24:	3001      	adds	r0, #1
 8017a26:	600b      	str	r3, [r1, #0]
 8017a28:	4770      	bx	lr
 8017a2a:	4610      	mov	r0, r2
 8017a2c:	e7e9      	b.n	8017a02 <__lo0bits+0x2a>
 8017a2e:	2000      	movs	r0, #0
 8017a30:	4770      	bx	lr
 8017a32:	2020      	movs	r0, #32
 8017a34:	4770      	bx	lr

08017a36 <__i2b>:
 8017a36:	b510      	push	{r4, lr}
 8017a38:	460c      	mov	r4, r1
 8017a3a:	2101      	movs	r1, #1
 8017a3c:	f7ff fee9 	bl	8017812 <_Balloc>
 8017a40:	2201      	movs	r2, #1
 8017a42:	6144      	str	r4, [r0, #20]
 8017a44:	6102      	str	r2, [r0, #16]
 8017a46:	bd10      	pop	{r4, pc}

08017a48 <__multiply>:
 8017a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a4c:	4614      	mov	r4, r2
 8017a4e:	690a      	ldr	r2, [r1, #16]
 8017a50:	6923      	ldr	r3, [r4, #16]
 8017a52:	429a      	cmp	r2, r3
 8017a54:	bfb8      	it	lt
 8017a56:	460b      	movlt	r3, r1
 8017a58:	4688      	mov	r8, r1
 8017a5a:	bfbc      	itt	lt
 8017a5c:	46a0      	movlt	r8, r4
 8017a5e:	461c      	movlt	r4, r3
 8017a60:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017a64:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017a68:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017a70:	eb07 0609 	add.w	r6, r7, r9
 8017a74:	42b3      	cmp	r3, r6
 8017a76:	bfb8      	it	lt
 8017a78:	3101      	addlt	r1, #1
 8017a7a:	f7ff feca 	bl	8017812 <_Balloc>
 8017a7e:	f100 0514 	add.w	r5, r0, #20
 8017a82:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8017a86:	462b      	mov	r3, r5
 8017a88:	2200      	movs	r2, #0
 8017a8a:	4573      	cmp	r3, lr
 8017a8c:	d316      	bcc.n	8017abc <__multiply+0x74>
 8017a8e:	f104 0214 	add.w	r2, r4, #20
 8017a92:	f108 0114 	add.w	r1, r8, #20
 8017a96:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8017a9a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8017a9e:	9300      	str	r3, [sp, #0]
 8017aa0:	9b00      	ldr	r3, [sp, #0]
 8017aa2:	9201      	str	r2, [sp, #4]
 8017aa4:	4293      	cmp	r3, r2
 8017aa6:	d80c      	bhi.n	8017ac2 <__multiply+0x7a>
 8017aa8:	2e00      	cmp	r6, #0
 8017aaa:	dd03      	ble.n	8017ab4 <__multiply+0x6c>
 8017aac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d05d      	beq.n	8017b70 <__multiply+0x128>
 8017ab4:	6106      	str	r6, [r0, #16]
 8017ab6:	b003      	add	sp, #12
 8017ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017abc:	f843 2b04 	str.w	r2, [r3], #4
 8017ac0:	e7e3      	b.n	8017a8a <__multiply+0x42>
 8017ac2:	f8b2 b000 	ldrh.w	fp, [r2]
 8017ac6:	f1bb 0f00 	cmp.w	fp, #0
 8017aca:	d023      	beq.n	8017b14 <__multiply+0xcc>
 8017acc:	4689      	mov	r9, r1
 8017ace:	46ac      	mov	ip, r5
 8017ad0:	f04f 0800 	mov.w	r8, #0
 8017ad4:	f859 4b04 	ldr.w	r4, [r9], #4
 8017ad8:	f8dc a000 	ldr.w	sl, [ip]
 8017adc:	b2a3      	uxth	r3, r4
 8017ade:	fa1f fa8a 	uxth.w	sl, sl
 8017ae2:	fb0b a303 	mla	r3, fp, r3, sl
 8017ae6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017aea:	f8dc 4000 	ldr.w	r4, [ip]
 8017aee:	4443      	add	r3, r8
 8017af0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017af4:	fb0b 840a 	mla	r4, fp, sl, r8
 8017af8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017afc:	46e2      	mov	sl, ip
 8017afe:	b29b      	uxth	r3, r3
 8017b00:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b04:	454f      	cmp	r7, r9
 8017b06:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017b0a:	f84a 3b04 	str.w	r3, [sl], #4
 8017b0e:	d82b      	bhi.n	8017b68 <__multiply+0x120>
 8017b10:	f8cc 8004 	str.w	r8, [ip, #4]
 8017b14:	9b01      	ldr	r3, [sp, #4]
 8017b16:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017b1a:	3204      	adds	r2, #4
 8017b1c:	f1ba 0f00 	cmp.w	sl, #0
 8017b20:	d020      	beq.n	8017b64 <__multiply+0x11c>
 8017b22:	682b      	ldr	r3, [r5, #0]
 8017b24:	4689      	mov	r9, r1
 8017b26:	46a8      	mov	r8, r5
 8017b28:	f04f 0b00 	mov.w	fp, #0
 8017b2c:	f8b9 c000 	ldrh.w	ip, [r9]
 8017b30:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017b34:	fb0a 440c 	mla	r4, sl, ip, r4
 8017b38:	445c      	add	r4, fp
 8017b3a:	46c4      	mov	ip, r8
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017b42:	f84c 3b04 	str.w	r3, [ip], #4
 8017b46:	f859 3b04 	ldr.w	r3, [r9], #4
 8017b4a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017b4e:	0c1b      	lsrs	r3, r3, #16
 8017b50:	fb0a b303 	mla	r3, sl, r3, fp
 8017b54:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8017b58:	454f      	cmp	r7, r9
 8017b5a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017b5e:	d805      	bhi.n	8017b6c <__multiply+0x124>
 8017b60:	f8c8 3004 	str.w	r3, [r8, #4]
 8017b64:	3504      	adds	r5, #4
 8017b66:	e79b      	b.n	8017aa0 <__multiply+0x58>
 8017b68:	46d4      	mov	ip, sl
 8017b6a:	e7b3      	b.n	8017ad4 <__multiply+0x8c>
 8017b6c:	46e0      	mov	r8, ip
 8017b6e:	e7dd      	b.n	8017b2c <__multiply+0xe4>
 8017b70:	3e01      	subs	r6, #1
 8017b72:	e799      	b.n	8017aa8 <__multiply+0x60>

08017b74 <__pow5mult>:
 8017b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b78:	4615      	mov	r5, r2
 8017b7a:	f012 0203 	ands.w	r2, r2, #3
 8017b7e:	4606      	mov	r6, r0
 8017b80:	460f      	mov	r7, r1
 8017b82:	d007      	beq.n	8017b94 <__pow5mult+0x20>
 8017b84:	3a01      	subs	r2, #1
 8017b86:	4c21      	ldr	r4, [pc, #132]	; (8017c0c <__pow5mult+0x98>)
 8017b88:	2300      	movs	r3, #0
 8017b8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017b8e:	f7ff fe8b 	bl	80178a8 <__multadd>
 8017b92:	4607      	mov	r7, r0
 8017b94:	10ad      	asrs	r5, r5, #2
 8017b96:	d035      	beq.n	8017c04 <__pow5mult+0x90>
 8017b98:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017b9a:	b93c      	cbnz	r4, 8017bac <__pow5mult+0x38>
 8017b9c:	2010      	movs	r0, #16
 8017b9e:	f7ff fe13 	bl	80177c8 <malloc>
 8017ba2:	6270      	str	r0, [r6, #36]	; 0x24
 8017ba4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ba8:	6004      	str	r4, [r0, #0]
 8017baa:	60c4      	str	r4, [r0, #12]
 8017bac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017bb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017bb4:	b94c      	cbnz	r4, 8017bca <__pow5mult+0x56>
 8017bb6:	f240 2171 	movw	r1, #625	; 0x271
 8017bba:	4630      	mov	r0, r6
 8017bbc:	f7ff ff3b 	bl	8017a36 <__i2b>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	f8c8 0008 	str.w	r0, [r8, #8]
 8017bc6:	4604      	mov	r4, r0
 8017bc8:	6003      	str	r3, [r0, #0]
 8017bca:	f04f 0800 	mov.w	r8, #0
 8017bce:	07eb      	lsls	r3, r5, #31
 8017bd0:	d50a      	bpl.n	8017be8 <__pow5mult+0x74>
 8017bd2:	4639      	mov	r1, r7
 8017bd4:	4622      	mov	r2, r4
 8017bd6:	4630      	mov	r0, r6
 8017bd8:	f7ff ff36 	bl	8017a48 <__multiply>
 8017bdc:	4639      	mov	r1, r7
 8017bde:	4681      	mov	r9, r0
 8017be0:	4630      	mov	r0, r6
 8017be2:	f7ff fe4a 	bl	801787a <_Bfree>
 8017be6:	464f      	mov	r7, r9
 8017be8:	106d      	asrs	r5, r5, #1
 8017bea:	d00b      	beq.n	8017c04 <__pow5mult+0x90>
 8017bec:	6820      	ldr	r0, [r4, #0]
 8017bee:	b938      	cbnz	r0, 8017c00 <__pow5mult+0x8c>
 8017bf0:	4622      	mov	r2, r4
 8017bf2:	4621      	mov	r1, r4
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	f7ff ff27 	bl	8017a48 <__multiply>
 8017bfa:	6020      	str	r0, [r4, #0]
 8017bfc:	f8c0 8000 	str.w	r8, [r0]
 8017c00:	4604      	mov	r4, r0
 8017c02:	e7e4      	b.n	8017bce <__pow5mult+0x5a>
 8017c04:	4638      	mov	r0, r7
 8017c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017c0a:	bf00      	nop
 8017c0c:	080193b8 	.word	0x080193b8

08017c10 <__lshift>:
 8017c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c14:	460c      	mov	r4, r1
 8017c16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017c1a:	6923      	ldr	r3, [r4, #16]
 8017c1c:	6849      	ldr	r1, [r1, #4]
 8017c1e:	eb0a 0903 	add.w	r9, sl, r3
 8017c22:	68a3      	ldr	r3, [r4, #8]
 8017c24:	4607      	mov	r7, r0
 8017c26:	4616      	mov	r6, r2
 8017c28:	f109 0501 	add.w	r5, r9, #1
 8017c2c:	42ab      	cmp	r3, r5
 8017c2e:	db32      	blt.n	8017c96 <__lshift+0x86>
 8017c30:	4638      	mov	r0, r7
 8017c32:	f7ff fdee 	bl	8017812 <_Balloc>
 8017c36:	2300      	movs	r3, #0
 8017c38:	4680      	mov	r8, r0
 8017c3a:	f100 0114 	add.w	r1, r0, #20
 8017c3e:	461a      	mov	r2, r3
 8017c40:	4553      	cmp	r3, sl
 8017c42:	db2b      	blt.n	8017c9c <__lshift+0x8c>
 8017c44:	6920      	ldr	r0, [r4, #16]
 8017c46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017c4a:	f104 0314 	add.w	r3, r4, #20
 8017c4e:	f016 021f 	ands.w	r2, r6, #31
 8017c52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017c56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017c5a:	d025      	beq.n	8017ca8 <__lshift+0x98>
 8017c5c:	f1c2 0e20 	rsb	lr, r2, #32
 8017c60:	2000      	movs	r0, #0
 8017c62:	681e      	ldr	r6, [r3, #0]
 8017c64:	468a      	mov	sl, r1
 8017c66:	4096      	lsls	r6, r2
 8017c68:	4330      	orrs	r0, r6
 8017c6a:	f84a 0b04 	str.w	r0, [sl], #4
 8017c6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8017c72:	459c      	cmp	ip, r3
 8017c74:	fa20 f00e 	lsr.w	r0, r0, lr
 8017c78:	d814      	bhi.n	8017ca4 <__lshift+0x94>
 8017c7a:	6048      	str	r0, [r1, #4]
 8017c7c:	b108      	cbz	r0, 8017c82 <__lshift+0x72>
 8017c7e:	f109 0502 	add.w	r5, r9, #2
 8017c82:	3d01      	subs	r5, #1
 8017c84:	4638      	mov	r0, r7
 8017c86:	f8c8 5010 	str.w	r5, [r8, #16]
 8017c8a:	4621      	mov	r1, r4
 8017c8c:	f7ff fdf5 	bl	801787a <_Bfree>
 8017c90:	4640      	mov	r0, r8
 8017c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c96:	3101      	adds	r1, #1
 8017c98:	005b      	lsls	r3, r3, #1
 8017c9a:	e7c7      	b.n	8017c2c <__lshift+0x1c>
 8017c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017ca0:	3301      	adds	r3, #1
 8017ca2:	e7cd      	b.n	8017c40 <__lshift+0x30>
 8017ca4:	4651      	mov	r1, sl
 8017ca6:	e7dc      	b.n	8017c62 <__lshift+0x52>
 8017ca8:	3904      	subs	r1, #4
 8017caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017cae:	f841 2f04 	str.w	r2, [r1, #4]!
 8017cb2:	459c      	cmp	ip, r3
 8017cb4:	d8f9      	bhi.n	8017caa <__lshift+0x9a>
 8017cb6:	e7e4      	b.n	8017c82 <__lshift+0x72>

08017cb8 <__mcmp>:
 8017cb8:	6903      	ldr	r3, [r0, #16]
 8017cba:	690a      	ldr	r2, [r1, #16]
 8017cbc:	1a9b      	subs	r3, r3, r2
 8017cbe:	b530      	push	{r4, r5, lr}
 8017cc0:	d10c      	bne.n	8017cdc <__mcmp+0x24>
 8017cc2:	0092      	lsls	r2, r2, #2
 8017cc4:	3014      	adds	r0, #20
 8017cc6:	3114      	adds	r1, #20
 8017cc8:	1884      	adds	r4, r0, r2
 8017cca:	4411      	add	r1, r2
 8017ccc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017cd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8017cd4:	4295      	cmp	r5, r2
 8017cd6:	d003      	beq.n	8017ce0 <__mcmp+0x28>
 8017cd8:	d305      	bcc.n	8017ce6 <__mcmp+0x2e>
 8017cda:	2301      	movs	r3, #1
 8017cdc:	4618      	mov	r0, r3
 8017cde:	bd30      	pop	{r4, r5, pc}
 8017ce0:	42a0      	cmp	r0, r4
 8017ce2:	d3f3      	bcc.n	8017ccc <__mcmp+0x14>
 8017ce4:	e7fa      	b.n	8017cdc <__mcmp+0x24>
 8017ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8017cea:	e7f7      	b.n	8017cdc <__mcmp+0x24>

08017cec <__mdiff>:
 8017cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017cf0:	460d      	mov	r5, r1
 8017cf2:	4607      	mov	r7, r0
 8017cf4:	4611      	mov	r1, r2
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	4614      	mov	r4, r2
 8017cfa:	f7ff ffdd 	bl	8017cb8 <__mcmp>
 8017cfe:	1e06      	subs	r6, r0, #0
 8017d00:	d108      	bne.n	8017d14 <__mdiff+0x28>
 8017d02:	4631      	mov	r1, r6
 8017d04:	4638      	mov	r0, r7
 8017d06:	f7ff fd84 	bl	8017812 <_Balloc>
 8017d0a:	2301      	movs	r3, #1
 8017d0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d14:	bfa4      	itt	ge
 8017d16:	4623      	movge	r3, r4
 8017d18:	462c      	movge	r4, r5
 8017d1a:	4638      	mov	r0, r7
 8017d1c:	6861      	ldr	r1, [r4, #4]
 8017d1e:	bfa6      	itte	ge
 8017d20:	461d      	movge	r5, r3
 8017d22:	2600      	movge	r6, #0
 8017d24:	2601      	movlt	r6, #1
 8017d26:	f7ff fd74 	bl	8017812 <_Balloc>
 8017d2a:	692b      	ldr	r3, [r5, #16]
 8017d2c:	60c6      	str	r6, [r0, #12]
 8017d2e:	6926      	ldr	r6, [r4, #16]
 8017d30:	f105 0914 	add.w	r9, r5, #20
 8017d34:	f104 0214 	add.w	r2, r4, #20
 8017d38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017d3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017d40:	f100 0514 	add.w	r5, r0, #20
 8017d44:	f04f 0e00 	mov.w	lr, #0
 8017d48:	f852 ab04 	ldr.w	sl, [r2], #4
 8017d4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8017d50:	fa1e f18a 	uxtah	r1, lr, sl
 8017d54:	b2a3      	uxth	r3, r4
 8017d56:	1ac9      	subs	r1, r1, r3
 8017d58:	0c23      	lsrs	r3, r4, #16
 8017d5a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017d5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017d62:	b289      	uxth	r1, r1
 8017d64:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8017d68:	45c8      	cmp	r8, r9
 8017d6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017d6e:	4694      	mov	ip, r2
 8017d70:	f845 3b04 	str.w	r3, [r5], #4
 8017d74:	d8e8      	bhi.n	8017d48 <__mdiff+0x5c>
 8017d76:	45bc      	cmp	ip, r7
 8017d78:	d304      	bcc.n	8017d84 <__mdiff+0x98>
 8017d7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017d7e:	b183      	cbz	r3, 8017da2 <__mdiff+0xb6>
 8017d80:	6106      	str	r6, [r0, #16]
 8017d82:	e7c5      	b.n	8017d10 <__mdiff+0x24>
 8017d84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017d88:	fa1e f381 	uxtah	r3, lr, r1
 8017d8c:	141a      	asrs	r2, r3, #16
 8017d8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017d92:	b29b      	uxth	r3, r3
 8017d94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017d98:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8017d9c:	f845 3b04 	str.w	r3, [r5], #4
 8017da0:	e7e9      	b.n	8017d76 <__mdiff+0x8a>
 8017da2:	3e01      	subs	r6, #1
 8017da4:	e7e9      	b.n	8017d7a <__mdiff+0x8e>
	...

08017da8 <__ulp>:
 8017da8:	4b12      	ldr	r3, [pc, #72]	; (8017df4 <__ulp+0x4c>)
 8017daa:	ee10 2a90 	vmov	r2, s1
 8017dae:	401a      	ands	r2, r3
 8017db0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	dd04      	ble.n	8017dc2 <__ulp+0x1a>
 8017db8:	2000      	movs	r0, #0
 8017dba:	4619      	mov	r1, r3
 8017dbc:	ec41 0b10 	vmov	d0, r0, r1
 8017dc0:	4770      	bx	lr
 8017dc2:	425b      	negs	r3, r3
 8017dc4:	151b      	asrs	r3, r3, #20
 8017dc6:	2b13      	cmp	r3, #19
 8017dc8:	f04f 0000 	mov.w	r0, #0
 8017dcc:	f04f 0100 	mov.w	r1, #0
 8017dd0:	dc04      	bgt.n	8017ddc <__ulp+0x34>
 8017dd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8017dd6:	fa42 f103 	asr.w	r1, r2, r3
 8017dda:	e7ef      	b.n	8017dbc <__ulp+0x14>
 8017ddc:	3b14      	subs	r3, #20
 8017dde:	2b1e      	cmp	r3, #30
 8017de0:	f04f 0201 	mov.w	r2, #1
 8017de4:	bfda      	itte	le
 8017de6:	f1c3 031f 	rsble	r3, r3, #31
 8017dea:	fa02 f303 	lslle.w	r3, r2, r3
 8017dee:	4613      	movgt	r3, r2
 8017df0:	4618      	mov	r0, r3
 8017df2:	e7e3      	b.n	8017dbc <__ulp+0x14>
 8017df4:	7ff00000 	.word	0x7ff00000

08017df8 <__b2d>:
 8017df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dfa:	6905      	ldr	r5, [r0, #16]
 8017dfc:	f100 0714 	add.w	r7, r0, #20
 8017e00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017e04:	1f2e      	subs	r6, r5, #4
 8017e06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017e0a:	4620      	mov	r0, r4
 8017e0c:	f7ff fdc5 	bl	801799a <__hi0bits>
 8017e10:	f1c0 0320 	rsb	r3, r0, #32
 8017e14:	280a      	cmp	r0, #10
 8017e16:	600b      	str	r3, [r1, #0]
 8017e18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8017e90 <__b2d+0x98>
 8017e1c:	dc14      	bgt.n	8017e48 <__b2d+0x50>
 8017e1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017e22:	fa24 f10e 	lsr.w	r1, r4, lr
 8017e26:	42b7      	cmp	r7, r6
 8017e28:	ea41 030c 	orr.w	r3, r1, ip
 8017e2c:	bf34      	ite	cc
 8017e2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017e32:	2100      	movcs	r1, #0
 8017e34:	3015      	adds	r0, #21
 8017e36:	fa04 f000 	lsl.w	r0, r4, r0
 8017e3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8017e3e:	ea40 0201 	orr.w	r2, r0, r1
 8017e42:	ec43 2b10 	vmov	d0, r2, r3
 8017e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e48:	42b7      	cmp	r7, r6
 8017e4a:	bf3a      	itte	cc
 8017e4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8017e50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017e54:	2100      	movcs	r1, #0
 8017e56:	380b      	subs	r0, #11
 8017e58:	d015      	beq.n	8017e86 <__b2d+0x8e>
 8017e5a:	4084      	lsls	r4, r0
 8017e5c:	f1c0 0520 	rsb	r5, r0, #32
 8017e60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017e64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8017e68:	42be      	cmp	r6, r7
 8017e6a:	fa21 fc05 	lsr.w	ip, r1, r5
 8017e6e:	ea44 030c 	orr.w	r3, r4, ip
 8017e72:	bf8c      	ite	hi
 8017e74:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017e78:	2400      	movls	r4, #0
 8017e7a:	fa01 f000 	lsl.w	r0, r1, r0
 8017e7e:	40ec      	lsrs	r4, r5
 8017e80:	ea40 0204 	orr.w	r2, r0, r4
 8017e84:	e7dd      	b.n	8017e42 <__b2d+0x4a>
 8017e86:	ea44 030c 	orr.w	r3, r4, ip
 8017e8a:	460a      	mov	r2, r1
 8017e8c:	e7d9      	b.n	8017e42 <__b2d+0x4a>
 8017e8e:	bf00      	nop
 8017e90:	3ff00000 	.word	0x3ff00000

08017e94 <__d2b>:
 8017e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017e98:	460e      	mov	r6, r1
 8017e9a:	2101      	movs	r1, #1
 8017e9c:	ec59 8b10 	vmov	r8, r9, d0
 8017ea0:	4615      	mov	r5, r2
 8017ea2:	f7ff fcb6 	bl	8017812 <_Balloc>
 8017ea6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8017eaa:	4607      	mov	r7, r0
 8017eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017eb0:	bb34      	cbnz	r4, 8017f00 <__d2b+0x6c>
 8017eb2:	9301      	str	r3, [sp, #4]
 8017eb4:	f1b8 0300 	subs.w	r3, r8, #0
 8017eb8:	d027      	beq.n	8017f0a <__d2b+0x76>
 8017eba:	a802      	add	r0, sp, #8
 8017ebc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017ec0:	f7ff fd8a 	bl	80179d8 <__lo0bits>
 8017ec4:	9900      	ldr	r1, [sp, #0]
 8017ec6:	b1f0      	cbz	r0, 8017f06 <__d2b+0x72>
 8017ec8:	9a01      	ldr	r2, [sp, #4]
 8017eca:	f1c0 0320 	rsb	r3, r0, #32
 8017ece:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed2:	430b      	orrs	r3, r1
 8017ed4:	40c2      	lsrs	r2, r0
 8017ed6:	617b      	str	r3, [r7, #20]
 8017ed8:	9201      	str	r2, [sp, #4]
 8017eda:	9b01      	ldr	r3, [sp, #4]
 8017edc:	61bb      	str	r3, [r7, #24]
 8017ede:	2b00      	cmp	r3, #0
 8017ee0:	bf14      	ite	ne
 8017ee2:	2102      	movne	r1, #2
 8017ee4:	2101      	moveq	r1, #1
 8017ee6:	6139      	str	r1, [r7, #16]
 8017ee8:	b1c4      	cbz	r4, 8017f1c <__d2b+0x88>
 8017eea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017eee:	4404      	add	r4, r0
 8017ef0:	6034      	str	r4, [r6, #0]
 8017ef2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017ef6:	6028      	str	r0, [r5, #0]
 8017ef8:	4638      	mov	r0, r7
 8017efa:	b003      	add	sp, #12
 8017efc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017f04:	e7d5      	b.n	8017eb2 <__d2b+0x1e>
 8017f06:	6179      	str	r1, [r7, #20]
 8017f08:	e7e7      	b.n	8017eda <__d2b+0x46>
 8017f0a:	a801      	add	r0, sp, #4
 8017f0c:	f7ff fd64 	bl	80179d8 <__lo0bits>
 8017f10:	9b01      	ldr	r3, [sp, #4]
 8017f12:	617b      	str	r3, [r7, #20]
 8017f14:	2101      	movs	r1, #1
 8017f16:	6139      	str	r1, [r7, #16]
 8017f18:	3020      	adds	r0, #32
 8017f1a:	e7e5      	b.n	8017ee8 <__d2b+0x54>
 8017f1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017f20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017f24:	6030      	str	r0, [r6, #0]
 8017f26:	6918      	ldr	r0, [r3, #16]
 8017f28:	f7ff fd37 	bl	801799a <__hi0bits>
 8017f2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017f30:	e7e1      	b.n	8017ef6 <__d2b+0x62>

08017f32 <__ratio>:
 8017f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f36:	4688      	mov	r8, r1
 8017f38:	4669      	mov	r1, sp
 8017f3a:	4681      	mov	r9, r0
 8017f3c:	f7ff ff5c 	bl	8017df8 <__b2d>
 8017f40:	a901      	add	r1, sp, #4
 8017f42:	4640      	mov	r0, r8
 8017f44:	ec57 6b10 	vmov	r6, r7, d0
 8017f48:	f7ff ff56 	bl	8017df8 <__b2d>
 8017f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017f50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017f54:	eba3 0c02 	sub.w	ip, r3, r2
 8017f58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017f5c:	1a9b      	subs	r3, r3, r2
 8017f5e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017f62:	ec5b ab10 	vmov	sl, fp, d0
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	bfce      	itee	gt
 8017f6a:	463a      	movgt	r2, r7
 8017f6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017f70:	465a      	movle	r2, fp
 8017f72:	4659      	mov	r1, fp
 8017f74:	463d      	mov	r5, r7
 8017f76:	bfd4      	ite	le
 8017f78:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017f7c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017f80:	4630      	mov	r0, r6
 8017f82:	ee10 2a10 	vmov	r2, s0
 8017f86:	460b      	mov	r3, r1
 8017f88:	4629      	mov	r1, r5
 8017f8a:	f7e8 fc77 	bl	800087c <__aeabi_ddiv>
 8017f8e:	ec41 0b10 	vmov	d0, r0, r1
 8017f92:	b003      	add	sp, #12
 8017f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017f98 <__copybits>:
 8017f98:	3901      	subs	r1, #1
 8017f9a:	b510      	push	{r4, lr}
 8017f9c:	1149      	asrs	r1, r1, #5
 8017f9e:	6914      	ldr	r4, [r2, #16]
 8017fa0:	3101      	adds	r1, #1
 8017fa2:	f102 0314 	add.w	r3, r2, #20
 8017fa6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8017faa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8017fae:	42a3      	cmp	r3, r4
 8017fb0:	4602      	mov	r2, r0
 8017fb2:	d303      	bcc.n	8017fbc <__copybits+0x24>
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	428a      	cmp	r2, r1
 8017fb8:	d305      	bcc.n	8017fc6 <__copybits+0x2e>
 8017fba:	bd10      	pop	{r4, pc}
 8017fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fc0:	f840 2b04 	str.w	r2, [r0], #4
 8017fc4:	e7f3      	b.n	8017fae <__copybits+0x16>
 8017fc6:	f842 3b04 	str.w	r3, [r2], #4
 8017fca:	e7f4      	b.n	8017fb6 <__copybits+0x1e>

08017fcc <__any_on>:
 8017fcc:	f100 0214 	add.w	r2, r0, #20
 8017fd0:	6900      	ldr	r0, [r0, #16]
 8017fd2:	114b      	asrs	r3, r1, #5
 8017fd4:	4298      	cmp	r0, r3
 8017fd6:	b510      	push	{r4, lr}
 8017fd8:	db11      	blt.n	8017ffe <__any_on+0x32>
 8017fda:	dd0a      	ble.n	8017ff2 <__any_on+0x26>
 8017fdc:	f011 011f 	ands.w	r1, r1, #31
 8017fe0:	d007      	beq.n	8017ff2 <__any_on+0x26>
 8017fe2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017fe6:	fa24 f001 	lsr.w	r0, r4, r1
 8017fea:	fa00 f101 	lsl.w	r1, r0, r1
 8017fee:	428c      	cmp	r4, r1
 8017ff0:	d10b      	bne.n	801800a <__any_on+0x3e>
 8017ff2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d803      	bhi.n	8018002 <__any_on+0x36>
 8017ffa:	2000      	movs	r0, #0
 8017ffc:	bd10      	pop	{r4, pc}
 8017ffe:	4603      	mov	r3, r0
 8018000:	e7f7      	b.n	8017ff2 <__any_on+0x26>
 8018002:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018006:	2900      	cmp	r1, #0
 8018008:	d0f5      	beq.n	8017ff6 <__any_on+0x2a>
 801800a:	2001      	movs	r0, #1
 801800c:	e7f6      	b.n	8017ffc <__any_on+0x30>

0801800e <_calloc_r>:
 801800e:	b538      	push	{r3, r4, r5, lr}
 8018010:	fb02 f401 	mul.w	r4, r2, r1
 8018014:	4621      	mov	r1, r4
 8018016:	f000 f857 	bl	80180c8 <_malloc_r>
 801801a:	4605      	mov	r5, r0
 801801c:	b118      	cbz	r0, 8018026 <_calloc_r+0x18>
 801801e:	4622      	mov	r2, r4
 8018020:	2100      	movs	r1, #0
 8018022:	f7fc fc9f 	bl	8014964 <memset>
 8018026:	4628      	mov	r0, r5
 8018028:	bd38      	pop	{r3, r4, r5, pc}
	...

0801802c <_free_r>:
 801802c:	b538      	push	{r3, r4, r5, lr}
 801802e:	4605      	mov	r5, r0
 8018030:	2900      	cmp	r1, #0
 8018032:	d045      	beq.n	80180c0 <_free_r+0x94>
 8018034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018038:	1f0c      	subs	r4, r1, #4
 801803a:	2b00      	cmp	r3, #0
 801803c:	bfb8      	it	lt
 801803e:	18e4      	addlt	r4, r4, r3
 8018040:	f000 fe30 	bl	8018ca4 <__malloc_lock>
 8018044:	4a1f      	ldr	r2, [pc, #124]	; (80180c4 <_free_r+0x98>)
 8018046:	6813      	ldr	r3, [r2, #0]
 8018048:	4610      	mov	r0, r2
 801804a:	b933      	cbnz	r3, 801805a <_free_r+0x2e>
 801804c:	6063      	str	r3, [r4, #4]
 801804e:	6014      	str	r4, [r2, #0]
 8018050:	4628      	mov	r0, r5
 8018052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018056:	f000 be26 	b.w	8018ca6 <__malloc_unlock>
 801805a:	42a3      	cmp	r3, r4
 801805c:	d90c      	bls.n	8018078 <_free_r+0x4c>
 801805e:	6821      	ldr	r1, [r4, #0]
 8018060:	1862      	adds	r2, r4, r1
 8018062:	4293      	cmp	r3, r2
 8018064:	bf04      	itt	eq
 8018066:	681a      	ldreq	r2, [r3, #0]
 8018068:	685b      	ldreq	r3, [r3, #4]
 801806a:	6063      	str	r3, [r4, #4]
 801806c:	bf04      	itt	eq
 801806e:	1852      	addeq	r2, r2, r1
 8018070:	6022      	streq	r2, [r4, #0]
 8018072:	6004      	str	r4, [r0, #0]
 8018074:	e7ec      	b.n	8018050 <_free_r+0x24>
 8018076:	4613      	mov	r3, r2
 8018078:	685a      	ldr	r2, [r3, #4]
 801807a:	b10a      	cbz	r2, 8018080 <_free_r+0x54>
 801807c:	42a2      	cmp	r2, r4
 801807e:	d9fa      	bls.n	8018076 <_free_r+0x4a>
 8018080:	6819      	ldr	r1, [r3, #0]
 8018082:	1858      	adds	r0, r3, r1
 8018084:	42a0      	cmp	r0, r4
 8018086:	d10b      	bne.n	80180a0 <_free_r+0x74>
 8018088:	6820      	ldr	r0, [r4, #0]
 801808a:	4401      	add	r1, r0
 801808c:	1858      	adds	r0, r3, r1
 801808e:	4282      	cmp	r2, r0
 8018090:	6019      	str	r1, [r3, #0]
 8018092:	d1dd      	bne.n	8018050 <_free_r+0x24>
 8018094:	6810      	ldr	r0, [r2, #0]
 8018096:	6852      	ldr	r2, [r2, #4]
 8018098:	605a      	str	r2, [r3, #4]
 801809a:	4401      	add	r1, r0
 801809c:	6019      	str	r1, [r3, #0]
 801809e:	e7d7      	b.n	8018050 <_free_r+0x24>
 80180a0:	d902      	bls.n	80180a8 <_free_r+0x7c>
 80180a2:	230c      	movs	r3, #12
 80180a4:	602b      	str	r3, [r5, #0]
 80180a6:	e7d3      	b.n	8018050 <_free_r+0x24>
 80180a8:	6820      	ldr	r0, [r4, #0]
 80180aa:	1821      	adds	r1, r4, r0
 80180ac:	428a      	cmp	r2, r1
 80180ae:	bf04      	itt	eq
 80180b0:	6811      	ldreq	r1, [r2, #0]
 80180b2:	6852      	ldreq	r2, [r2, #4]
 80180b4:	6062      	str	r2, [r4, #4]
 80180b6:	bf04      	itt	eq
 80180b8:	1809      	addeq	r1, r1, r0
 80180ba:	6021      	streq	r1, [r4, #0]
 80180bc:	605c      	str	r4, [r3, #4]
 80180be:	e7c7      	b.n	8018050 <_free_r+0x24>
 80180c0:	bd38      	pop	{r3, r4, r5, pc}
 80180c2:	bf00      	nop
 80180c4:	20045308 	.word	0x20045308

080180c8 <_malloc_r>:
 80180c8:	b570      	push	{r4, r5, r6, lr}
 80180ca:	1ccd      	adds	r5, r1, #3
 80180cc:	f025 0503 	bic.w	r5, r5, #3
 80180d0:	3508      	adds	r5, #8
 80180d2:	2d0c      	cmp	r5, #12
 80180d4:	bf38      	it	cc
 80180d6:	250c      	movcc	r5, #12
 80180d8:	2d00      	cmp	r5, #0
 80180da:	4606      	mov	r6, r0
 80180dc:	db01      	blt.n	80180e2 <_malloc_r+0x1a>
 80180de:	42a9      	cmp	r1, r5
 80180e0:	d903      	bls.n	80180ea <_malloc_r+0x22>
 80180e2:	230c      	movs	r3, #12
 80180e4:	6033      	str	r3, [r6, #0]
 80180e6:	2000      	movs	r0, #0
 80180e8:	bd70      	pop	{r4, r5, r6, pc}
 80180ea:	f000 fddb 	bl	8018ca4 <__malloc_lock>
 80180ee:	4a21      	ldr	r2, [pc, #132]	; (8018174 <_malloc_r+0xac>)
 80180f0:	6814      	ldr	r4, [r2, #0]
 80180f2:	4621      	mov	r1, r4
 80180f4:	b991      	cbnz	r1, 801811c <_malloc_r+0x54>
 80180f6:	4c20      	ldr	r4, [pc, #128]	; (8018178 <_malloc_r+0xb0>)
 80180f8:	6823      	ldr	r3, [r4, #0]
 80180fa:	b91b      	cbnz	r3, 8018104 <_malloc_r+0x3c>
 80180fc:	4630      	mov	r0, r6
 80180fe:	f000 fc91 	bl	8018a24 <_sbrk_r>
 8018102:	6020      	str	r0, [r4, #0]
 8018104:	4629      	mov	r1, r5
 8018106:	4630      	mov	r0, r6
 8018108:	f000 fc8c 	bl	8018a24 <_sbrk_r>
 801810c:	1c43      	adds	r3, r0, #1
 801810e:	d124      	bne.n	801815a <_malloc_r+0x92>
 8018110:	230c      	movs	r3, #12
 8018112:	6033      	str	r3, [r6, #0]
 8018114:	4630      	mov	r0, r6
 8018116:	f000 fdc6 	bl	8018ca6 <__malloc_unlock>
 801811a:	e7e4      	b.n	80180e6 <_malloc_r+0x1e>
 801811c:	680b      	ldr	r3, [r1, #0]
 801811e:	1b5b      	subs	r3, r3, r5
 8018120:	d418      	bmi.n	8018154 <_malloc_r+0x8c>
 8018122:	2b0b      	cmp	r3, #11
 8018124:	d90f      	bls.n	8018146 <_malloc_r+0x7e>
 8018126:	600b      	str	r3, [r1, #0]
 8018128:	50cd      	str	r5, [r1, r3]
 801812a:	18cc      	adds	r4, r1, r3
 801812c:	4630      	mov	r0, r6
 801812e:	f000 fdba 	bl	8018ca6 <__malloc_unlock>
 8018132:	f104 000b 	add.w	r0, r4, #11
 8018136:	1d23      	adds	r3, r4, #4
 8018138:	f020 0007 	bic.w	r0, r0, #7
 801813c:	1ac3      	subs	r3, r0, r3
 801813e:	d0d3      	beq.n	80180e8 <_malloc_r+0x20>
 8018140:	425a      	negs	r2, r3
 8018142:	50e2      	str	r2, [r4, r3]
 8018144:	e7d0      	b.n	80180e8 <_malloc_r+0x20>
 8018146:	428c      	cmp	r4, r1
 8018148:	684b      	ldr	r3, [r1, #4]
 801814a:	bf16      	itet	ne
 801814c:	6063      	strne	r3, [r4, #4]
 801814e:	6013      	streq	r3, [r2, #0]
 8018150:	460c      	movne	r4, r1
 8018152:	e7eb      	b.n	801812c <_malloc_r+0x64>
 8018154:	460c      	mov	r4, r1
 8018156:	6849      	ldr	r1, [r1, #4]
 8018158:	e7cc      	b.n	80180f4 <_malloc_r+0x2c>
 801815a:	1cc4      	adds	r4, r0, #3
 801815c:	f024 0403 	bic.w	r4, r4, #3
 8018160:	42a0      	cmp	r0, r4
 8018162:	d005      	beq.n	8018170 <_malloc_r+0xa8>
 8018164:	1a21      	subs	r1, r4, r0
 8018166:	4630      	mov	r0, r6
 8018168:	f000 fc5c 	bl	8018a24 <_sbrk_r>
 801816c:	3001      	adds	r0, #1
 801816e:	d0cf      	beq.n	8018110 <_malloc_r+0x48>
 8018170:	6025      	str	r5, [r4, #0]
 8018172:	e7db      	b.n	801812c <_malloc_r+0x64>
 8018174:	20045308 	.word	0x20045308
 8018178:	2004530c 	.word	0x2004530c

0801817c <__ssputs_r>:
 801817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018180:	688e      	ldr	r6, [r1, #8]
 8018182:	429e      	cmp	r6, r3
 8018184:	4682      	mov	sl, r0
 8018186:	460c      	mov	r4, r1
 8018188:	4690      	mov	r8, r2
 801818a:	4699      	mov	r9, r3
 801818c:	d837      	bhi.n	80181fe <__ssputs_r+0x82>
 801818e:	898a      	ldrh	r2, [r1, #12]
 8018190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018194:	d031      	beq.n	80181fa <__ssputs_r+0x7e>
 8018196:	6825      	ldr	r5, [r4, #0]
 8018198:	6909      	ldr	r1, [r1, #16]
 801819a:	1a6f      	subs	r7, r5, r1
 801819c:	6965      	ldr	r5, [r4, #20]
 801819e:	2302      	movs	r3, #2
 80181a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80181a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80181a8:	f109 0301 	add.w	r3, r9, #1
 80181ac:	443b      	add	r3, r7
 80181ae:	429d      	cmp	r5, r3
 80181b0:	bf38      	it	cc
 80181b2:	461d      	movcc	r5, r3
 80181b4:	0553      	lsls	r3, r2, #21
 80181b6:	d530      	bpl.n	801821a <__ssputs_r+0x9e>
 80181b8:	4629      	mov	r1, r5
 80181ba:	f7ff ff85 	bl	80180c8 <_malloc_r>
 80181be:	4606      	mov	r6, r0
 80181c0:	b950      	cbnz	r0, 80181d8 <__ssputs_r+0x5c>
 80181c2:	230c      	movs	r3, #12
 80181c4:	f8ca 3000 	str.w	r3, [sl]
 80181c8:	89a3      	ldrh	r3, [r4, #12]
 80181ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181ce:	81a3      	strh	r3, [r4, #12]
 80181d0:	f04f 30ff 	mov.w	r0, #4294967295
 80181d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80181d8:	463a      	mov	r2, r7
 80181da:	6921      	ldr	r1, [r4, #16]
 80181dc:	f7ff fb0e 	bl	80177fc <memcpy>
 80181e0:	89a3      	ldrh	r3, [r4, #12]
 80181e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80181e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181ea:	81a3      	strh	r3, [r4, #12]
 80181ec:	6126      	str	r6, [r4, #16]
 80181ee:	6165      	str	r5, [r4, #20]
 80181f0:	443e      	add	r6, r7
 80181f2:	1bed      	subs	r5, r5, r7
 80181f4:	6026      	str	r6, [r4, #0]
 80181f6:	60a5      	str	r5, [r4, #8]
 80181f8:	464e      	mov	r6, r9
 80181fa:	454e      	cmp	r6, r9
 80181fc:	d900      	bls.n	8018200 <__ssputs_r+0x84>
 80181fe:	464e      	mov	r6, r9
 8018200:	4632      	mov	r2, r6
 8018202:	4641      	mov	r1, r8
 8018204:	6820      	ldr	r0, [r4, #0]
 8018206:	f000 fd34 	bl	8018c72 <memmove>
 801820a:	68a3      	ldr	r3, [r4, #8]
 801820c:	1b9b      	subs	r3, r3, r6
 801820e:	60a3      	str	r3, [r4, #8]
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	441e      	add	r6, r3
 8018214:	6026      	str	r6, [r4, #0]
 8018216:	2000      	movs	r0, #0
 8018218:	e7dc      	b.n	80181d4 <__ssputs_r+0x58>
 801821a:	462a      	mov	r2, r5
 801821c:	f000 fd44 	bl	8018ca8 <_realloc_r>
 8018220:	4606      	mov	r6, r0
 8018222:	2800      	cmp	r0, #0
 8018224:	d1e2      	bne.n	80181ec <__ssputs_r+0x70>
 8018226:	6921      	ldr	r1, [r4, #16]
 8018228:	4650      	mov	r0, sl
 801822a:	f7ff feff 	bl	801802c <_free_r>
 801822e:	e7c8      	b.n	80181c2 <__ssputs_r+0x46>

08018230 <_svfiprintf_r>:
 8018230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018234:	461d      	mov	r5, r3
 8018236:	898b      	ldrh	r3, [r1, #12]
 8018238:	061f      	lsls	r7, r3, #24
 801823a:	b09d      	sub	sp, #116	; 0x74
 801823c:	4680      	mov	r8, r0
 801823e:	460c      	mov	r4, r1
 8018240:	4616      	mov	r6, r2
 8018242:	d50f      	bpl.n	8018264 <_svfiprintf_r+0x34>
 8018244:	690b      	ldr	r3, [r1, #16]
 8018246:	b96b      	cbnz	r3, 8018264 <_svfiprintf_r+0x34>
 8018248:	2140      	movs	r1, #64	; 0x40
 801824a:	f7ff ff3d 	bl	80180c8 <_malloc_r>
 801824e:	6020      	str	r0, [r4, #0]
 8018250:	6120      	str	r0, [r4, #16]
 8018252:	b928      	cbnz	r0, 8018260 <_svfiprintf_r+0x30>
 8018254:	230c      	movs	r3, #12
 8018256:	f8c8 3000 	str.w	r3, [r8]
 801825a:	f04f 30ff 	mov.w	r0, #4294967295
 801825e:	e0c8      	b.n	80183f2 <_svfiprintf_r+0x1c2>
 8018260:	2340      	movs	r3, #64	; 0x40
 8018262:	6163      	str	r3, [r4, #20]
 8018264:	2300      	movs	r3, #0
 8018266:	9309      	str	r3, [sp, #36]	; 0x24
 8018268:	2320      	movs	r3, #32
 801826a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801826e:	2330      	movs	r3, #48	; 0x30
 8018270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018274:	9503      	str	r5, [sp, #12]
 8018276:	f04f 0b01 	mov.w	fp, #1
 801827a:	4637      	mov	r7, r6
 801827c:	463d      	mov	r5, r7
 801827e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018282:	b10b      	cbz	r3, 8018288 <_svfiprintf_r+0x58>
 8018284:	2b25      	cmp	r3, #37	; 0x25
 8018286:	d13e      	bne.n	8018306 <_svfiprintf_r+0xd6>
 8018288:	ebb7 0a06 	subs.w	sl, r7, r6
 801828c:	d00b      	beq.n	80182a6 <_svfiprintf_r+0x76>
 801828e:	4653      	mov	r3, sl
 8018290:	4632      	mov	r2, r6
 8018292:	4621      	mov	r1, r4
 8018294:	4640      	mov	r0, r8
 8018296:	f7ff ff71 	bl	801817c <__ssputs_r>
 801829a:	3001      	adds	r0, #1
 801829c:	f000 80a4 	beq.w	80183e8 <_svfiprintf_r+0x1b8>
 80182a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80182a2:	4453      	add	r3, sl
 80182a4:	9309      	str	r3, [sp, #36]	; 0x24
 80182a6:	783b      	ldrb	r3, [r7, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	f000 809d 	beq.w	80183e8 <_svfiprintf_r+0x1b8>
 80182ae:	2300      	movs	r3, #0
 80182b0:	f04f 32ff 	mov.w	r2, #4294967295
 80182b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80182b8:	9304      	str	r3, [sp, #16]
 80182ba:	9307      	str	r3, [sp, #28]
 80182bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80182c0:	931a      	str	r3, [sp, #104]	; 0x68
 80182c2:	462f      	mov	r7, r5
 80182c4:	2205      	movs	r2, #5
 80182c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80182ca:	4850      	ldr	r0, [pc, #320]	; (801840c <_svfiprintf_r+0x1dc>)
 80182cc:	f7e7 ffa0 	bl	8000210 <memchr>
 80182d0:	9b04      	ldr	r3, [sp, #16]
 80182d2:	b9d0      	cbnz	r0, 801830a <_svfiprintf_r+0xda>
 80182d4:	06d9      	lsls	r1, r3, #27
 80182d6:	bf44      	itt	mi
 80182d8:	2220      	movmi	r2, #32
 80182da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80182de:	071a      	lsls	r2, r3, #28
 80182e0:	bf44      	itt	mi
 80182e2:	222b      	movmi	r2, #43	; 0x2b
 80182e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80182e8:	782a      	ldrb	r2, [r5, #0]
 80182ea:	2a2a      	cmp	r2, #42	; 0x2a
 80182ec:	d015      	beq.n	801831a <_svfiprintf_r+0xea>
 80182ee:	9a07      	ldr	r2, [sp, #28]
 80182f0:	462f      	mov	r7, r5
 80182f2:	2000      	movs	r0, #0
 80182f4:	250a      	movs	r5, #10
 80182f6:	4639      	mov	r1, r7
 80182f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182fc:	3b30      	subs	r3, #48	; 0x30
 80182fe:	2b09      	cmp	r3, #9
 8018300:	d94d      	bls.n	801839e <_svfiprintf_r+0x16e>
 8018302:	b1b8      	cbz	r0, 8018334 <_svfiprintf_r+0x104>
 8018304:	e00f      	b.n	8018326 <_svfiprintf_r+0xf6>
 8018306:	462f      	mov	r7, r5
 8018308:	e7b8      	b.n	801827c <_svfiprintf_r+0x4c>
 801830a:	4a40      	ldr	r2, [pc, #256]	; (801840c <_svfiprintf_r+0x1dc>)
 801830c:	1a80      	subs	r0, r0, r2
 801830e:	fa0b f000 	lsl.w	r0, fp, r0
 8018312:	4318      	orrs	r0, r3
 8018314:	9004      	str	r0, [sp, #16]
 8018316:	463d      	mov	r5, r7
 8018318:	e7d3      	b.n	80182c2 <_svfiprintf_r+0x92>
 801831a:	9a03      	ldr	r2, [sp, #12]
 801831c:	1d11      	adds	r1, r2, #4
 801831e:	6812      	ldr	r2, [r2, #0]
 8018320:	9103      	str	r1, [sp, #12]
 8018322:	2a00      	cmp	r2, #0
 8018324:	db01      	blt.n	801832a <_svfiprintf_r+0xfa>
 8018326:	9207      	str	r2, [sp, #28]
 8018328:	e004      	b.n	8018334 <_svfiprintf_r+0x104>
 801832a:	4252      	negs	r2, r2
 801832c:	f043 0302 	orr.w	r3, r3, #2
 8018330:	9207      	str	r2, [sp, #28]
 8018332:	9304      	str	r3, [sp, #16]
 8018334:	783b      	ldrb	r3, [r7, #0]
 8018336:	2b2e      	cmp	r3, #46	; 0x2e
 8018338:	d10c      	bne.n	8018354 <_svfiprintf_r+0x124>
 801833a:	787b      	ldrb	r3, [r7, #1]
 801833c:	2b2a      	cmp	r3, #42	; 0x2a
 801833e:	d133      	bne.n	80183a8 <_svfiprintf_r+0x178>
 8018340:	9b03      	ldr	r3, [sp, #12]
 8018342:	1d1a      	adds	r2, r3, #4
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	9203      	str	r2, [sp, #12]
 8018348:	2b00      	cmp	r3, #0
 801834a:	bfb8      	it	lt
 801834c:	f04f 33ff 	movlt.w	r3, #4294967295
 8018350:	3702      	adds	r7, #2
 8018352:	9305      	str	r3, [sp, #20]
 8018354:	4d2e      	ldr	r5, [pc, #184]	; (8018410 <_svfiprintf_r+0x1e0>)
 8018356:	7839      	ldrb	r1, [r7, #0]
 8018358:	2203      	movs	r2, #3
 801835a:	4628      	mov	r0, r5
 801835c:	f7e7 ff58 	bl	8000210 <memchr>
 8018360:	b138      	cbz	r0, 8018372 <_svfiprintf_r+0x142>
 8018362:	2340      	movs	r3, #64	; 0x40
 8018364:	1b40      	subs	r0, r0, r5
 8018366:	fa03 f000 	lsl.w	r0, r3, r0
 801836a:	9b04      	ldr	r3, [sp, #16]
 801836c:	4303      	orrs	r3, r0
 801836e:	3701      	adds	r7, #1
 8018370:	9304      	str	r3, [sp, #16]
 8018372:	7839      	ldrb	r1, [r7, #0]
 8018374:	4827      	ldr	r0, [pc, #156]	; (8018414 <_svfiprintf_r+0x1e4>)
 8018376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801837a:	2206      	movs	r2, #6
 801837c:	1c7e      	adds	r6, r7, #1
 801837e:	f7e7 ff47 	bl	8000210 <memchr>
 8018382:	2800      	cmp	r0, #0
 8018384:	d038      	beq.n	80183f8 <_svfiprintf_r+0x1c8>
 8018386:	4b24      	ldr	r3, [pc, #144]	; (8018418 <_svfiprintf_r+0x1e8>)
 8018388:	bb13      	cbnz	r3, 80183d0 <_svfiprintf_r+0x1a0>
 801838a:	9b03      	ldr	r3, [sp, #12]
 801838c:	3307      	adds	r3, #7
 801838e:	f023 0307 	bic.w	r3, r3, #7
 8018392:	3308      	adds	r3, #8
 8018394:	9303      	str	r3, [sp, #12]
 8018396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018398:	444b      	add	r3, r9
 801839a:	9309      	str	r3, [sp, #36]	; 0x24
 801839c:	e76d      	b.n	801827a <_svfiprintf_r+0x4a>
 801839e:	fb05 3202 	mla	r2, r5, r2, r3
 80183a2:	2001      	movs	r0, #1
 80183a4:	460f      	mov	r7, r1
 80183a6:	e7a6      	b.n	80182f6 <_svfiprintf_r+0xc6>
 80183a8:	2300      	movs	r3, #0
 80183aa:	3701      	adds	r7, #1
 80183ac:	9305      	str	r3, [sp, #20]
 80183ae:	4619      	mov	r1, r3
 80183b0:	250a      	movs	r5, #10
 80183b2:	4638      	mov	r0, r7
 80183b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80183b8:	3a30      	subs	r2, #48	; 0x30
 80183ba:	2a09      	cmp	r2, #9
 80183bc:	d903      	bls.n	80183c6 <_svfiprintf_r+0x196>
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d0c8      	beq.n	8018354 <_svfiprintf_r+0x124>
 80183c2:	9105      	str	r1, [sp, #20]
 80183c4:	e7c6      	b.n	8018354 <_svfiprintf_r+0x124>
 80183c6:	fb05 2101 	mla	r1, r5, r1, r2
 80183ca:	2301      	movs	r3, #1
 80183cc:	4607      	mov	r7, r0
 80183ce:	e7f0      	b.n	80183b2 <_svfiprintf_r+0x182>
 80183d0:	ab03      	add	r3, sp, #12
 80183d2:	9300      	str	r3, [sp, #0]
 80183d4:	4622      	mov	r2, r4
 80183d6:	4b11      	ldr	r3, [pc, #68]	; (801841c <_svfiprintf_r+0x1ec>)
 80183d8:	a904      	add	r1, sp, #16
 80183da:	4640      	mov	r0, r8
 80183dc:	f7fc fb5e 	bl	8014a9c <_printf_float>
 80183e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80183e4:	4681      	mov	r9, r0
 80183e6:	d1d6      	bne.n	8018396 <_svfiprintf_r+0x166>
 80183e8:	89a3      	ldrh	r3, [r4, #12]
 80183ea:	065b      	lsls	r3, r3, #25
 80183ec:	f53f af35 	bmi.w	801825a <_svfiprintf_r+0x2a>
 80183f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183f2:	b01d      	add	sp, #116	; 0x74
 80183f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183f8:	ab03      	add	r3, sp, #12
 80183fa:	9300      	str	r3, [sp, #0]
 80183fc:	4622      	mov	r2, r4
 80183fe:	4b07      	ldr	r3, [pc, #28]	; (801841c <_svfiprintf_r+0x1ec>)
 8018400:	a904      	add	r1, sp, #16
 8018402:	4640      	mov	r0, r8
 8018404:	f7fc fe00 	bl	8015008 <_printf_i>
 8018408:	e7ea      	b.n	80183e0 <_svfiprintf_r+0x1b0>
 801840a:	bf00      	nop
 801840c:	080193c4 	.word	0x080193c4
 8018410:	080193ca 	.word	0x080193ca
 8018414:	080193ce 	.word	0x080193ce
 8018418:	08014a9d 	.word	0x08014a9d
 801841c:	0801817d 	.word	0x0801817d

08018420 <_sungetc_r>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	1c4b      	adds	r3, r1, #1
 8018424:	4614      	mov	r4, r2
 8018426:	d103      	bne.n	8018430 <_sungetc_r+0x10>
 8018428:	f04f 35ff 	mov.w	r5, #4294967295
 801842c:	4628      	mov	r0, r5
 801842e:	bd38      	pop	{r3, r4, r5, pc}
 8018430:	8993      	ldrh	r3, [r2, #12]
 8018432:	f023 0320 	bic.w	r3, r3, #32
 8018436:	8193      	strh	r3, [r2, #12]
 8018438:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801843a:	6852      	ldr	r2, [r2, #4]
 801843c:	b2cd      	uxtb	r5, r1
 801843e:	b18b      	cbz	r3, 8018464 <_sungetc_r+0x44>
 8018440:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018442:	4293      	cmp	r3, r2
 8018444:	dd08      	ble.n	8018458 <_sungetc_r+0x38>
 8018446:	6823      	ldr	r3, [r4, #0]
 8018448:	1e5a      	subs	r2, r3, #1
 801844a:	6022      	str	r2, [r4, #0]
 801844c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018450:	6863      	ldr	r3, [r4, #4]
 8018452:	3301      	adds	r3, #1
 8018454:	6063      	str	r3, [r4, #4]
 8018456:	e7e9      	b.n	801842c <_sungetc_r+0xc>
 8018458:	4621      	mov	r1, r4
 801845a:	f000 fbc3 	bl	8018be4 <__submore>
 801845e:	2800      	cmp	r0, #0
 8018460:	d0f1      	beq.n	8018446 <_sungetc_r+0x26>
 8018462:	e7e1      	b.n	8018428 <_sungetc_r+0x8>
 8018464:	6921      	ldr	r1, [r4, #16]
 8018466:	6823      	ldr	r3, [r4, #0]
 8018468:	b151      	cbz	r1, 8018480 <_sungetc_r+0x60>
 801846a:	4299      	cmp	r1, r3
 801846c:	d208      	bcs.n	8018480 <_sungetc_r+0x60>
 801846e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018472:	42a9      	cmp	r1, r5
 8018474:	d104      	bne.n	8018480 <_sungetc_r+0x60>
 8018476:	3b01      	subs	r3, #1
 8018478:	3201      	adds	r2, #1
 801847a:	6023      	str	r3, [r4, #0]
 801847c:	6062      	str	r2, [r4, #4]
 801847e:	e7d5      	b.n	801842c <_sungetc_r+0xc>
 8018480:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018488:	6363      	str	r3, [r4, #52]	; 0x34
 801848a:	2303      	movs	r3, #3
 801848c:	63a3      	str	r3, [r4, #56]	; 0x38
 801848e:	4623      	mov	r3, r4
 8018490:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018494:	6023      	str	r3, [r4, #0]
 8018496:	2301      	movs	r3, #1
 8018498:	e7dc      	b.n	8018454 <_sungetc_r+0x34>

0801849a <__ssrefill_r>:
 801849a:	b510      	push	{r4, lr}
 801849c:	460c      	mov	r4, r1
 801849e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80184a0:	b169      	cbz	r1, 80184be <__ssrefill_r+0x24>
 80184a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80184a6:	4299      	cmp	r1, r3
 80184a8:	d001      	beq.n	80184ae <__ssrefill_r+0x14>
 80184aa:	f7ff fdbf 	bl	801802c <_free_r>
 80184ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80184b0:	6063      	str	r3, [r4, #4]
 80184b2:	2000      	movs	r0, #0
 80184b4:	6360      	str	r0, [r4, #52]	; 0x34
 80184b6:	b113      	cbz	r3, 80184be <__ssrefill_r+0x24>
 80184b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80184ba:	6023      	str	r3, [r4, #0]
 80184bc:	bd10      	pop	{r4, pc}
 80184be:	6923      	ldr	r3, [r4, #16]
 80184c0:	6023      	str	r3, [r4, #0]
 80184c2:	2300      	movs	r3, #0
 80184c4:	6063      	str	r3, [r4, #4]
 80184c6:	89a3      	ldrh	r3, [r4, #12]
 80184c8:	f043 0320 	orr.w	r3, r3, #32
 80184cc:	81a3      	strh	r3, [r4, #12]
 80184ce:	f04f 30ff 	mov.w	r0, #4294967295
 80184d2:	e7f3      	b.n	80184bc <__ssrefill_r+0x22>

080184d4 <__ssvfiscanf_r>:
 80184d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184d8:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80184dc:	460c      	mov	r4, r1
 80184de:	2100      	movs	r1, #0
 80184e0:	9144      	str	r1, [sp, #272]	; 0x110
 80184e2:	9145      	str	r1, [sp, #276]	; 0x114
 80184e4:	499f      	ldr	r1, [pc, #636]	; (8018764 <__ssvfiscanf_r+0x290>)
 80184e6:	91a0      	str	r1, [sp, #640]	; 0x280
 80184e8:	f10d 0804 	add.w	r8, sp, #4
 80184ec:	499e      	ldr	r1, [pc, #632]	; (8018768 <__ssvfiscanf_r+0x294>)
 80184ee:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801876c <__ssvfiscanf_r+0x298>
 80184f2:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80184f6:	4606      	mov	r6, r0
 80184f8:	4692      	mov	sl, r2
 80184fa:	91a1      	str	r1, [sp, #644]	; 0x284
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	270a      	movs	r7, #10
 8018500:	f89a 3000 	ldrb.w	r3, [sl]
 8018504:	2b00      	cmp	r3, #0
 8018506:	f000 812a 	beq.w	801875e <__ssvfiscanf_r+0x28a>
 801850a:	4655      	mov	r5, sl
 801850c:	f7ff f93e 	bl	801778c <__locale_ctype_ptr>
 8018510:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018514:	4458      	add	r0, fp
 8018516:	7843      	ldrb	r3, [r0, #1]
 8018518:	f013 0308 	ands.w	r3, r3, #8
 801851c:	d01c      	beq.n	8018558 <__ssvfiscanf_r+0x84>
 801851e:	6863      	ldr	r3, [r4, #4]
 8018520:	2b00      	cmp	r3, #0
 8018522:	dd12      	ble.n	801854a <__ssvfiscanf_r+0x76>
 8018524:	f7ff f932 	bl	801778c <__locale_ctype_ptr>
 8018528:	6823      	ldr	r3, [r4, #0]
 801852a:	781a      	ldrb	r2, [r3, #0]
 801852c:	4410      	add	r0, r2
 801852e:	7842      	ldrb	r2, [r0, #1]
 8018530:	0712      	lsls	r2, r2, #28
 8018532:	d401      	bmi.n	8018538 <__ssvfiscanf_r+0x64>
 8018534:	46aa      	mov	sl, r5
 8018536:	e7e3      	b.n	8018500 <__ssvfiscanf_r+0x2c>
 8018538:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801853a:	3201      	adds	r2, #1
 801853c:	9245      	str	r2, [sp, #276]	; 0x114
 801853e:	6862      	ldr	r2, [r4, #4]
 8018540:	3301      	adds	r3, #1
 8018542:	3a01      	subs	r2, #1
 8018544:	6062      	str	r2, [r4, #4]
 8018546:	6023      	str	r3, [r4, #0]
 8018548:	e7e9      	b.n	801851e <__ssvfiscanf_r+0x4a>
 801854a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801854c:	4621      	mov	r1, r4
 801854e:	4630      	mov	r0, r6
 8018550:	4798      	blx	r3
 8018552:	2800      	cmp	r0, #0
 8018554:	d0e6      	beq.n	8018524 <__ssvfiscanf_r+0x50>
 8018556:	e7ed      	b.n	8018534 <__ssvfiscanf_r+0x60>
 8018558:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801855c:	f040 8082 	bne.w	8018664 <__ssvfiscanf_r+0x190>
 8018560:	9343      	str	r3, [sp, #268]	; 0x10c
 8018562:	9341      	str	r3, [sp, #260]	; 0x104
 8018564:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018568:	2b2a      	cmp	r3, #42	; 0x2a
 801856a:	d103      	bne.n	8018574 <__ssvfiscanf_r+0xa0>
 801856c:	2310      	movs	r3, #16
 801856e:	9341      	str	r3, [sp, #260]	; 0x104
 8018570:	f10a 0502 	add.w	r5, sl, #2
 8018574:	46aa      	mov	sl, r5
 8018576:	f815 1b01 	ldrb.w	r1, [r5], #1
 801857a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801857e:	2a09      	cmp	r2, #9
 8018580:	d922      	bls.n	80185c8 <__ssvfiscanf_r+0xf4>
 8018582:	2203      	movs	r2, #3
 8018584:	4879      	ldr	r0, [pc, #484]	; (801876c <__ssvfiscanf_r+0x298>)
 8018586:	f7e7 fe43 	bl	8000210 <memchr>
 801858a:	b138      	cbz	r0, 801859c <__ssvfiscanf_r+0xc8>
 801858c:	eba0 0309 	sub.w	r3, r0, r9
 8018590:	2001      	movs	r0, #1
 8018592:	4098      	lsls	r0, r3
 8018594:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018596:	4318      	orrs	r0, r3
 8018598:	9041      	str	r0, [sp, #260]	; 0x104
 801859a:	46aa      	mov	sl, r5
 801859c:	f89a 3000 	ldrb.w	r3, [sl]
 80185a0:	2b67      	cmp	r3, #103	; 0x67
 80185a2:	f10a 0501 	add.w	r5, sl, #1
 80185a6:	d82b      	bhi.n	8018600 <__ssvfiscanf_r+0x12c>
 80185a8:	2b65      	cmp	r3, #101	; 0x65
 80185aa:	f080 809f 	bcs.w	80186ec <__ssvfiscanf_r+0x218>
 80185ae:	2b47      	cmp	r3, #71	; 0x47
 80185b0:	d810      	bhi.n	80185d4 <__ssvfiscanf_r+0x100>
 80185b2:	2b45      	cmp	r3, #69	; 0x45
 80185b4:	f080 809a 	bcs.w	80186ec <__ssvfiscanf_r+0x218>
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d06c      	beq.n	8018696 <__ssvfiscanf_r+0x1c2>
 80185bc:	2b25      	cmp	r3, #37	; 0x25
 80185be:	d051      	beq.n	8018664 <__ssvfiscanf_r+0x190>
 80185c0:	2303      	movs	r3, #3
 80185c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80185c4:	9742      	str	r7, [sp, #264]	; 0x108
 80185c6:	e027      	b.n	8018618 <__ssvfiscanf_r+0x144>
 80185c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80185ca:	fb07 1303 	mla	r3, r7, r3, r1
 80185ce:	3b30      	subs	r3, #48	; 0x30
 80185d0:	9343      	str	r3, [sp, #268]	; 0x10c
 80185d2:	e7cf      	b.n	8018574 <__ssvfiscanf_r+0xa0>
 80185d4:	2b5b      	cmp	r3, #91	; 0x5b
 80185d6:	d06a      	beq.n	80186ae <__ssvfiscanf_r+0x1da>
 80185d8:	d80c      	bhi.n	80185f4 <__ssvfiscanf_r+0x120>
 80185da:	2b58      	cmp	r3, #88	; 0x58
 80185dc:	d1f0      	bne.n	80185c0 <__ssvfiscanf_r+0xec>
 80185de:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80185e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80185e4:	9241      	str	r2, [sp, #260]	; 0x104
 80185e6:	2210      	movs	r2, #16
 80185e8:	9242      	str	r2, [sp, #264]	; 0x108
 80185ea:	2b6e      	cmp	r3, #110	; 0x6e
 80185ec:	bf8c      	ite	hi
 80185ee:	2304      	movhi	r3, #4
 80185f0:	2303      	movls	r3, #3
 80185f2:	e010      	b.n	8018616 <__ssvfiscanf_r+0x142>
 80185f4:	2b63      	cmp	r3, #99	; 0x63
 80185f6:	d065      	beq.n	80186c4 <__ssvfiscanf_r+0x1f0>
 80185f8:	2b64      	cmp	r3, #100	; 0x64
 80185fa:	d1e1      	bne.n	80185c0 <__ssvfiscanf_r+0xec>
 80185fc:	9742      	str	r7, [sp, #264]	; 0x108
 80185fe:	e7f4      	b.n	80185ea <__ssvfiscanf_r+0x116>
 8018600:	2b70      	cmp	r3, #112	; 0x70
 8018602:	d04b      	beq.n	801869c <__ssvfiscanf_r+0x1c8>
 8018604:	d826      	bhi.n	8018654 <__ssvfiscanf_r+0x180>
 8018606:	2b6e      	cmp	r3, #110	; 0x6e
 8018608:	d062      	beq.n	80186d0 <__ssvfiscanf_r+0x1fc>
 801860a:	d84c      	bhi.n	80186a6 <__ssvfiscanf_r+0x1d2>
 801860c:	2b69      	cmp	r3, #105	; 0x69
 801860e:	d1d7      	bne.n	80185c0 <__ssvfiscanf_r+0xec>
 8018610:	2300      	movs	r3, #0
 8018612:	9342      	str	r3, [sp, #264]	; 0x108
 8018614:	2303      	movs	r3, #3
 8018616:	9347      	str	r3, [sp, #284]	; 0x11c
 8018618:	6863      	ldr	r3, [r4, #4]
 801861a:	2b00      	cmp	r3, #0
 801861c:	dd68      	ble.n	80186f0 <__ssvfiscanf_r+0x21c>
 801861e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018620:	0659      	lsls	r1, r3, #25
 8018622:	d407      	bmi.n	8018634 <__ssvfiscanf_r+0x160>
 8018624:	f7ff f8b2 	bl	801778c <__locale_ctype_ptr>
 8018628:	6823      	ldr	r3, [r4, #0]
 801862a:	781a      	ldrb	r2, [r3, #0]
 801862c:	4410      	add	r0, r2
 801862e:	7842      	ldrb	r2, [r0, #1]
 8018630:	0712      	lsls	r2, r2, #28
 8018632:	d464      	bmi.n	80186fe <__ssvfiscanf_r+0x22a>
 8018634:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018636:	2b02      	cmp	r3, #2
 8018638:	dc73      	bgt.n	8018722 <__ssvfiscanf_r+0x24e>
 801863a:	466b      	mov	r3, sp
 801863c:	4622      	mov	r2, r4
 801863e:	a941      	add	r1, sp, #260	; 0x104
 8018640:	4630      	mov	r0, r6
 8018642:	f000 f897 	bl	8018774 <_scanf_chars>
 8018646:	2801      	cmp	r0, #1
 8018648:	f000 8089 	beq.w	801875e <__ssvfiscanf_r+0x28a>
 801864c:	2802      	cmp	r0, #2
 801864e:	f47f af71 	bne.w	8018534 <__ssvfiscanf_r+0x60>
 8018652:	e01d      	b.n	8018690 <__ssvfiscanf_r+0x1bc>
 8018654:	2b75      	cmp	r3, #117	; 0x75
 8018656:	d0d1      	beq.n	80185fc <__ssvfiscanf_r+0x128>
 8018658:	2b78      	cmp	r3, #120	; 0x78
 801865a:	d0c0      	beq.n	80185de <__ssvfiscanf_r+0x10a>
 801865c:	2b73      	cmp	r3, #115	; 0x73
 801865e:	d1af      	bne.n	80185c0 <__ssvfiscanf_r+0xec>
 8018660:	2302      	movs	r3, #2
 8018662:	e7d8      	b.n	8018616 <__ssvfiscanf_r+0x142>
 8018664:	6863      	ldr	r3, [r4, #4]
 8018666:	2b00      	cmp	r3, #0
 8018668:	dd0c      	ble.n	8018684 <__ssvfiscanf_r+0x1b0>
 801866a:	6823      	ldr	r3, [r4, #0]
 801866c:	781a      	ldrb	r2, [r3, #0]
 801866e:	455a      	cmp	r2, fp
 8018670:	d175      	bne.n	801875e <__ssvfiscanf_r+0x28a>
 8018672:	3301      	adds	r3, #1
 8018674:	6862      	ldr	r2, [r4, #4]
 8018676:	6023      	str	r3, [r4, #0]
 8018678:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801867a:	3a01      	subs	r2, #1
 801867c:	3301      	adds	r3, #1
 801867e:	6062      	str	r2, [r4, #4]
 8018680:	9345      	str	r3, [sp, #276]	; 0x114
 8018682:	e757      	b.n	8018534 <__ssvfiscanf_r+0x60>
 8018684:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018686:	4621      	mov	r1, r4
 8018688:	4630      	mov	r0, r6
 801868a:	4798      	blx	r3
 801868c:	2800      	cmp	r0, #0
 801868e:	d0ec      	beq.n	801866a <__ssvfiscanf_r+0x196>
 8018690:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018692:	2800      	cmp	r0, #0
 8018694:	d159      	bne.n	801874a <__ssvfiscanf_r+0x276>
 8018696:	f04f 30ff 	mov.w	r0, #4294967295
 801869a:	e05c      	b.n	8018756 <__ssvfiscanf_r+0x282>
 801869c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801869e:	f042 0220 	orr.w	r2, r2, #32
 80186a2:	9241      	str	r2, [sp, #260]	; 0x104
 80186a4:	e79b      	b.n	80185de <__ssvfiscanf_r+0x10a>
 80186a6:	2308      	movs	r3, #8
 80186a8:	9342      	str	r3, [sp, #264]	; 0x108
 80186aa:	2304      	movs	r3, #4
 80186ac:	e7b3      	b.n	8018616 <__ssvfiscanf_r+0x142>
 80186ae:	4629      	mov	r1, r5
 80186b0:	4640      	mov	r0, r8
 80186b2:	f000 f9c7 	bl	8018a44 <__sccl>
 80186b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186bc:	9341      	str	r3, [sp, #260]	; 0x104
 80186be:	4605      	mov	r5, r0
 80186c0:	2301      	movs	r3, #1
 80186c2:	e7a8      	b.n	8018616 <__ssvfiscanf_r+0x142>
 80186c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80186c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186ca:	9341      	str	r3, [sp, #260]	; 0x104
 80186cc:	2300      	movs	r3, #0
 80186ce:	e7a2      	b.n	8018616 <__ssvfiscanf_r+0x142>
 80186d0:	9841      	ldr	r0, [sp, #260]	; 0x104
 80186d2:	06c3      	lsls	r3, r0, #27
 80186d4:	f53f af2e 	bmi.w	8018534 <__ssvfiscanf_r+0x60>
 80186d8:	9b00      	ldr	r3, [sp, #0]
 80186da:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80186dc:	1d19      	adds	r1, r3, #4
 80186de:	9100      	str	r1, [sp, #0]
 80186e0:	681b      	ldr	r3, [r3, #0]
 80186e2:	07c0      	lsls	r0, r0, #31
 80186e4:	bf4c      	ite	mi
 80186e6:	801a      	strhmi	r2, [r3, #0]
 80186e8:	601a      	strpl	r2, [r3, #0]
 80186ea:	e723      	b.n	8018534 <__ssvfiscanf_r+0x60>
 80186ec:	2305      	movs	r3, #5
 80186ee:	e792      	b.n	8018616 <__ssvfiscanf_r+0x142>
 80186f0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80186f2:	4621      	mov	r1, r4
 80186f4:	4630      	mov	r0, r6
 80186f6:	4798      	blx	r3
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d090      	beq.n	801861e <__ssvfiscanf_r+0x14a>
 80186fc:	e7c8      	b.n	8018690 <__ssvfiscanf_r+0x1bc>
 80186fe:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018700:	3201      	adds	r2, #1
 8018702:	9245      	str	r2, [sp, #276]	; 0x114
 8018704:	6862      	ldr	r2, [r4, #4]
 8018706:	3a01      	subs	r2, #1
 8018708:	2a00      	cmp	r2, #0
 801870a:	6062      	str	r2, [r4, #4]
 801870c:	dd02      	ble.n	8018714 <__ssvfiscanf_r+0x240>
 801870e:	3301      	adds	r3, #1
 8018710:	6023      	str	r3, [r4, #0]
 8018712:	e787      	b.n	8018624 <__ssvfiscanf_r+0x150>
 8018714:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018716:	4621      	mov	r1, r4
 8018718:	4630      	mov	r0, r6
 801871a:	4798      	blx	r3
 801871c:	2800      	cmp	r0, #0
 801871e:	d081      	beq.n	8018624 <__ssvfiscanf_r+0x150>
 8018720:	e7b6      	b.n	8018690 <__ssvfiscanf_r+0x1bc>
 8018722:	2b04      	cmp	r3, #4
 8018724:	dc06      	bgt.n	8018734 <__ssvfiscanf_r+0x260>
 8018726:	466b      	mov	r3, sp
 8018728:	4622      	mov	r2, r4
 801872a:	a941      	add	r1, sp, #260	; 0x104
 801872c:	4630      	mov	r0, r6
 801872e:	f000 f885 	bl	801883c <_scanf_i>
 8018732:	e788      	b.n	8018646 <__ssvfiscanf_r+0x172>
 8018734:	4b0e      	ldr	r3, [pc, #56]	; (8018770 <__ssvfiscanf_r+0x29c>)
 8018736:	2b00      	cmp	r3, #0
 8018738:	f43f aefc 	beq.w	8018534 <__ssvfiscanf_r+0x60>
 801873c:	466b      	mov	r3, sp
 801873e:	4622      	mov	r2, r4
 8018740:	a941      	add	r1, sp, #260	; 0x104
 8018742:	4630      	mov	r0, r6
 8018744:	f7fc fd72 	bl	801522c <_scanf_float>
 8018748:	e77d      	b.n	8018646 <__ssvfiscanf_r+0x172>
 801874a:	89a3      	ldrh	r3, [r4, #12]
 801874c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018750:	bf18      	it	ne
 8018752:	f04f 30ff 	movne.w	r0, #4294967295
 8018756:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801875e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018760:	e7f9      	b.n	8018756 <__ssvfiscanf_r+0x282>
 8018762:	bf00      	nop
 8018764:	08018421 	.word	0x08018421
 8018768:	0801849b 	.word	0x0801849b
 801876c:	080193ca 	.word	0x080193ca
 8018770:	0801522d 	.word	0x0801522d

08018774 <_scanf_chars>:
 8018774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018778:	4615      	mov	r5, r2
 801877a:	688a      	ldr	r2, [r1, #8]
 801877c:	4680      	mov	r8, r0
 801877e:	460c      	mov	r4, r1
 8018780:	b932      	cbnz	r2, 8018790 <_scanf_chars+0x1c>
 8018782:	698a      	ldr	r2, [r1, #24]
 8018784:	2a00      	cmp	r2, #0
 8018786:	bf14      	ite	ne
 8018788:	f04f 32ff 	movne.w	r2, #4294967295
 801878c:	2201      	moveq	r2, #1
 801878e:	608a      	str	r2, [r1, #8]
 8018790:	6822      	ldr	r2, [r4, #0]
 8018792:	06d1      	lsls	r1, r2, #27
 8018794:	bf5f      	itttt	pl
 8018796:	681a      	ldrpl	r2, [r3, #0]
 8018798:	1d11      	addpl	r1, r2, #4
 801879a:	6019      	strpl	r1, [r3, #0]
 801879c:	6817      	ldrpl	r7, [r2, #0]
 801879e:	2600      	movs	r6, #0
 80187a0:	69a3      	ldr	r3, [r4, #24]
 80187a2:	b1db      	cbz	r3, 80187dc <_scanf_chars+0x68>
 80187a4:	2b01      	cmp	r3, #1
 80187a6:	d107      	bne.n	80187b8 <_scanf_chars+0x44>
 80187a8:	682b      	ldr	r3, [r5, #0]
 80187aa:	6962      	ldr	r2, [r4, #20]
 80187ac:	781b      	ldrb	r3, [r3, #0]
 80187ae:	5cd3      	ldrb	r3, [r2, r3]
 80187b0:	b9a3      	cbnz	r3, 80187dc <_scanf_chars+0x68>
 80187b2:	2e00      	cmp	r6, #0
 80187b4:	d132      	bne.n	801881c <_scanf_chars+0xa8>
 80187b6:	e006      	b.n	80187c6 <_scanf_chars+0x52>
 80187b8:	2b02      	cmp	r3, #2
 80187ba:	d007      	beq.n	80187cc <_scanf_chars+0x58>
 80187bc:	2e00      	cmp	r6, #0
 80187be:	d12d      	bne.n	801881c <_scanf_chars+0xa8>
 80187c0:	69a3      	ldr	r3, [r4, #24]
 80187c2:	2b01      	cmp	r3, #1
 80187c4:	d12a      	bne.n	801881c <_scanf_chars+0xa8>
 80187c6:	2001      	movs	r0, #1
 80187c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187cc:	f7fe ffde 	bl	801778c <__locale_ctype_ptr>
 80187d0:	682b      	ldr	r3, [r5, #0]
 80187d2:	781b      	ldrb	r3, [r3, #0]
 80187d4:	4418      	add	r0, r3
 80187d6:	7843      	ldrb	r3, [r0, #1]
 80187d8:	071b      	lsls	r3, r3, #28
 80187da:	d4ef      	bmi.n	80187bc <_scanf_chars+0x48>
 80187dc:	6823      	ldr	r3, [r4, #0]
 80187de:	06da      	lsls	r2, r3, #27
 80187e0:	bf5e      	ittt	pl
 80187e2:	682b      	ldrpl	r3, [r5, #0]
 80187e4:	781b      	ldrbpl	r3, [r3, #0]
 80187e6:	703b      	strbpl	r3, [r7, #0]
 80187e8:	682a      	ldr	r2, [r5, #0]
 80187ea:	686b      	ldr	r3, [r5, #4]
 80187ec:	f102 0201 	add.w	r2, r2, #1
 80187f0:	602a      	str	r2, [r5, #0]
 80187f2:	68a2      	ldr	r2, [r4, #8]
 80187f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80187f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80187fc:	606b      	str	r3, [r5, #4]
 80187fe:	f106 0601 	add.w	r6, r6, #1
 8018802:	bf58      	it	pl
 8018804:	3701      	addpl	r7, #1
 8018806:	60a2      	str	r2, [r4, #8]
 8018808:	b142      	cbz	r2, 801881c <_scanf_chars+0xa8>
 801880a:	2b00      	cmp	r3, #0
 801880c:	dcc8      	bgt.n	80187a0 <_scanf_chars+0x2c>
 801880e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018812:	4629      	mov	r1, r5
 8018814:	4640      	mov	r0, r8
 8018816:	4798      	blx	r3
 8018818:	2800      	cmp	r0, #0
 801881a:	d0c1      	beq.n	80187a0 <_scanf_chars+0x2c>
 801881c:	6823      	ldr	r3, [r4, #0]
 801881e:	f013 0310 	ands.w	r3, r3, #16
 8018822:	d105      	bne.n	8018830 <_scanf_chars+0xbc>
 8018824:	68e2      	ldr	r2, [r4, #12]
 8018826:	3201      	adds	r2, #1
 8018828:	60e2      	str	r2, [r4, #12]
 801882a:	69a2      	ldr	r2, [r4, #24]
 801882c:	b102      	cbz	r2, 8018830 <_scanf_chars+0xbc>
 801882e:	703b      	strb	r3, [r7, #0]
 8018830:	6923      	ldr	r3, [r4, #16]
 8018832:	441e      	add	r6, r3
 8018834:	6126      	str	r6, [r4, #16]
 8018836:	2000      	movs	r0, #0
 8018838:	e7c6      	b.n	80187c8 <_scanf_chars+0x54>
	...

0801883c <_scanf_i>:
 801883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018840:	469a      	mov	sl, r3
 8018842:	4b74      	ldr	r3, [pc, #464]	; (8018a14 <_scanf_i+0x1d8>)
 8018844:	460c      	mov	r4, r1
 8018846:	4683      	mov	fp, r0
 8018848:	4616      	mov	r6, r2
 801884a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801884e:	b087      	sub	sp, #28
 8018850:	ab03      	add	r3, sp, #12
 8018852:	68a7      	ldr	r7, [r4, #8]
 8018854:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018858:	4b6f      	ldr	r3, [pc, #444]	; (8018a18 <_scanf_i+0x1dc>)
 801885a:	69a1      	ldr	r1, [r4, #24]
 801885c:	4a6f      	ldr	r2, [pc, #444]	; (8018a1c <_scanf_i+0x1e0>)
 801885e:	2903      	cmp	r1, #3
 8018860:	bf08      	it	eq
 8018862:	461a      	moveq	r2, r3
 8018864:	1e7b      	subs	r3, r7, #1
 8018866:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801886a:	bf84      	itt	hi
 801886c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018870:	60a3      	strhi	r3, [r4, #8]
 8018872:	6823      	ldr	r3, [r4, #0]
 8018874:	9200      	str	r2, [sp, #0]
 8018876:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801887a:	bf88      	it	hi
 801887c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018880:	f104 091c 	add.w	r9, r4, #28
 8018884:	6023      	str	r3, [r4, #0]
 8018886:	bf8c      	ite	hi
 8018888:	197f      	addhi	r7, r7, r5
 801888a:	2700      	movls	r7, #0
 801888c:	464b      	mov	r3, r9
 801888e:	f04f 0800 	mov.w	r8, #0
 8018892:	9301      	str	r3, [sp, #4]
 8018894:	6831      	ldr	r1, [r6, #0]
 8018896:	ab03      	add	r3, sp, #12
 8018898:	2202      	movs	r2, #2
 801889a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801889e:	7809      	ldrb	r1, [r1, #0]
 80188a0:	f7e7 fcb6 	bl	8000210 <memchr>
 80188a4:	9b01      	ldr	r3, [sp, #4]
 80188a6:	b330      	cbz	r0, 80188f6 <_scanf_i+0xba>
 80188a8:	f1b8 0f01 	cmp.w	r8, #1
 80188ac:	d15a      	bne.n	8018964 <_scanf_i+0x128>
 80188ae:	6862      	ldr	r2, [r4, #4]
 80188b0:	b92a      	cbnz	r2, 80188be <_scanf_i+0x82>
 80188b2:	6822      	ldr	r2, [r4, #0]
 80188b4:	2108      	movs	r1, #8
 80188b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80188ba:	6061      	str	r1, [r4, #4]
 80188bc:	6022      	str	r2, [r4, #0]
 80188be:	6822      	ldr	r2, [r4, #0]
 80188c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80188c4:	6022      	str	r2, [r4, #0]
 80188c6:	68a2      	ldr	r2, [r4, #8]
 80188c8:	1e51      	subs	r1, r2, #1
 80188ca:	60a1      	str	r1, [r4, #8]
 80188cc:	b19a      	cbz	r2, 80188f6 <_scanf_i+0xba>
 80188ce:	6832      	ldr	r2, [r6, #0]
 80188d0:	1c51      	adds	r1, r2, #1
 80188d2:	6031      	str	r1, [r6, #0]
 80188d4:	7812      	ldrb	r2, [r2, #0]
 80188d6:	701a      	strb	r2, [r3, #0]
 80188d8:	1c5d      	adds	r5, r3, #1
 80188da:	6873      	ldr	r3, [r6, #4]
 80188dc:	3b01      	subs	r3, #1
 80188de:	2b00      	cmp	r3, #0
 80188e0:	6073      	str	r3, [r6, #4]
 80188e2:	dc07      	bgt.n	80188f4 <_scanf_i+0xb8>
 80188e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80188e8:	4631      	mov	r1, r6
 80188ea:	4658      	mov	r0, fp
 80188ec:	4798      	blx	r3
 80188ee:	2800      	cmp	r0, #0
 80188f0:	f040 8086 	bne.w	8018a00 <_scanf_i+0x1c4>
 80188f4:	462b      	mov	r3, r5
 80188f6:	f108 0801 	add.w	r8, r8, #1
 80188fa:	f1b8 0f03 	cmp.w	r8, #3
 80188fe:	d1c8      	bne.n	8018892 <_scanf_i+0x56>
 8018900:	6862      	ldr	r2, [r4, #4]
 8018902:	b90a      	cbnz	r2, 8018908 <_scanf_i+0xcc>
 8018904:	220a      	movs	r2, #10
 8018906:	6062      	str	r2, [r4, #4]
 8018908:	6862      	ldr	r2, [r4, #4]
 801890a:	4945      	ldr	r1, [pc, #276]	; (8018a20 <_scanf_i+0x1e4>)
 801890c:	6960      	ldr	r0, [r4, #20]
 801890e:	9301      	str	r3, [sp, #4]
 8018910:	1a89      	subs	r1, r1, r2
 8018912:	f000 f897 	bl	8018a44 <__sccl>
 8018916:	9b01      	ldr	r3, [sp, #4]
 8018918:	f04f 0800 	mov.w	r8, #0
 801891c:	461d      	mov	r5, r3
 801891e:	68a3      	ldr	r3, [r4, #8]
 8018920:	6822      	ldr	r2, [r4, #0]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d03a      	beq.n	801899c <_scanf_i+0x160>
 8018926:	6831      	ldr	r1, [r6, #0]
 8018928:	6960      	ldr	r0, [r4, #20]
 801892a:	f891 c000 	ldrb.w	ip, [r1]
 801892e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018932:	2800      	cmp	r0, #0
 8018934:	d032      	beq.n	801899c <_scanf_i+0x160>
 8018936:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801893a:	d121      	bne.n	8018980 <_scanf_i+0x144>
 801893c:	0510      	lsls	r0, r2, #20
 801893e:	d51f      	bpl.n	8018980 <_scanf_i+0x144>
 8018940:	f108 0801 	add.w	r8, r8, #1
 8018944:	b117      	cbz	r7, 801894c <_scanf_i+0x110>
 8018946:	3301      	adds	r3, #1
 8018948:	3f01      	subs	r7, #1
 801894a:	60a3      	str	r3, [r4, #8]
 801894c:	6873      	ldr	r3, [r6, #4]
 801894e:	3b01      	subs	r3, #1
 8018950:	2b00      	cmp	r3, #0
 8018952:	6073      	str	r3, [r6, #4]
 8018954:	dd1b      	ble.n	801898e <_scanf_i+0x152>
 8018956:	6833      	ldr	r3, [r6, #0]
 8018958:	3301      	adds	r3, #1
 801895a:	6033      	str	r3, [r6, #0]
 801895c:	68a3      	ldr	r3, [r4, #8]
 801895e:	3b01      	subs	r3, #1
 8018960:	60a3      	str	r3, [r4, #8]
 8018962:	e7dc      	b.n	801891e <_scanf_i+0xe2>
 8018964:	f1b8 0f02 	cmp.w	r8, #2
 8018968:	d1ad      	bne.n	80188c6 <_scanf_i+0x8a>
 801896a:	6822      	ldr	r2, [r4, #0]
 801896c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018970:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018974:	d1bf      	bne.n	80188f6 <_scanf_i+0xba>
 8018976:	2110      	movs	r1, #16
 8018978:	6061      	str	r1, [r4, #4]
 801897a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801897e:	e7a1      	b.n	80188c4 <_scanf_i+0x88>
 8018980:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018984:	6022      	str	r2, [r4, #0]
 8018986:	780b      	ldrb	r3, [r1, #0]
 8018988:	702b      	strb	r3, [r5, #0]
 801898a:	3501      	adds	r5, #1
 801898c:	e7de      	b.n	801894c <_scanf_i+0x110>
 801898e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018992:	4631      	mov	r1, r6
 8018994:	4658      	mov	r0, fp
 8018996:	4798      	blx	r3
 8018998:	2800      	cmp	r0, #0
 801899a:	d0df      	beq.n	801895c <_scanf_i+0x120>
 801899c:	6823      	ldr	r3, [r4, #0]
 801899e:	05d9      	lsls	r1, r3, #23
 80189a0:	d50c      	bpl.n	80189bc <_scanf_i+0x180>
 80189a2:	454d      	cmp	r5, r9
 80189a4:	d908      	bls.n	80189b8 <_scanf_i+0x17c>
 80189a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80189aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80189ae:	4632      	mov	r2, r6
 80189b0:	4658      	mov	r0, fp
 80189b2:	4798      	blx	r3
 80189b4:	1e6f      	subs	r7, r5, #1
 80189b6:	463d      	mov	r5, r7
 80189b8:	454d      	cmp	r5, r9
 80189ba:	d029      	beq.n	8018a10 <_scanf_i+0x1d4>
 80189bc:	6822      	ldr	r2, [r4, #0]
 80189be:	f012 0210 	ands.w	r2, r2, #16
 80189c2:	d113      	bne.n	80189ec <_scanf_i+0x1b0>
 80189c4:	702a      	strb	r2, [r5, #0]
 80189c6:	6863      	ldr	r3, [r4, #4]
 80189c8:	9e00      	ldr	r6, [sp, #0]
 80189ca:	4649      	mov	r1, r9
 80189cc:	4658      	mov	r0, fp
 80189ce:	47b0      	blx	r6
 80189d0:	f8da 3000 	ldr.w	r3, [sl]
 80189d4:	6821      	ldr	r1, [r4, #0]
 80189d6:	1d1a      	adds	r2, r3, #4
 80189d8:	f8ca 2000 	str.w	r2, [sl]
 80189dc:	f011 0f20 	tst.w	r1, #32
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	d010      	beq.n	8018a06 <_scanf_i+0x1ca>
 80189e4:	6018      	str	r0, [r3, #0]
 80189e6:	68e3      	ldr	r3, [r4, #12]
 80189e8:	3301      	adds	r3, #1
 80189ea:	60e3      	str	r3, [r4, #12]
 80189ec:	eba5 0509 	sub.w	r5, r5, r9
 80189f0:	44a8      	add	r8, r5
 80189f2:	6925      	ldr	r5, [r4, #16]
 80189f4:	4445      	add	r5, r8
 80189f6:	6125      	str	r5, [r4, #16]
 80189f8:	2000      	movs	r0, #0
 80189fa:	b007      	add	sp, #28
 80189fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a00:	f04f 0800 	mov.w	r8, #0
 8018a04:	e7ca      	b.n	801899c <_scanf_i+0x160>
 8018a06:	07ca      	lsls	r2, r1, #31
 8018a08:	bf4c      	ite	mi
 8018a0a:	8018      	strhmi	r0, [r3, #0]
 8018a0c:	6018      	strpl	r0, [r3, #0]
 8018a0e:	e7ea      	b.n	80189e6 <_scanf_i+0x1aa>
 8018a10:	2001      	movs	r0, #1
 8018a12:	e7f2      	b.n	80189fa <_scanf_i+0x1be>
 8018a14:	08019164 	.word	0x08019164
 8018a18:	08016449 	.word	0x08016449
 8018a1c:	08018bc1 	.word	0x08018bc1
 8018a20:	080193e5 	.word	0x080193e5

08018a24 <_sbrk_r>:
 8018a24:	b538      	push	{r3, r4, r5, lr}
 8018a26:	4c06      	ldr	r4, [pc, #24]	; (8018a40 <_sbrk_r+0x1c>)
 8018a28:	2300      	movs	r3, #0
 8018a2a:	4605      	mov	r5, r0
 8018a2c:	4608      	mov	r0, r1
 8018a2e:	6023      	str	r3, [r4, #0]
 8018a30:	f7ee ff4c 	bl	80078cc <_sbrk>
 8018a34:	1c43      	adds	r3, r0, #1
 8018a36:	d102      	bne.n	8018a3e <_sbrk_r+0x1a>
 8018a38:	6823      	ldr	r3, [r4, #0]
 8018a3a:	b103      	cbz	r3, 8018a3e <_sbrk_r+0x1a>
 8018a3c:	602b      	str	r3, [r5, #0]
 8018a3e:	bd38      	pop	{r3, r4, r5, pc}
 8018a40:	20049ca4 	.word	0x20049ca4

08018a44 <__sccl>:
 8018a44:	b570      	push	{r4, r5, r6, lr}
 8018a46:	780b      	ldrb	r3, [r1, #0]
 8018a48:	2b5e      	cmp	r3, #94	; 0x5e
 8018a4a:	bf13      	iteet	ne
 8018a4c:	1c4a      	addne	r2, r1, #1
 8018a4e:	1c8a      	addeq	r2, r1, #2
 8018a50:	784b      	ldrbeq	r3, [r1, #1]
 8018a52:	2100      	movne	r1, #0
 8018a54:	bf08      	it	eq
 8018a56:	2101      	moveq	r1, #1
 8018a58:	1e44      	subs	r4, r0, #1
 8018a5a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8018a5e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8018a62:	42ac      	cmp	r4, r5
 8018a64:	d1fb      	bne.n	8018a5e <__sccl+0x1a>
 8018a66:	b913      	cbnz	r3, 8018a6e <__sccl+0x2a>
 8018a68:	3a01      	subs	r2, #1
 8018a6a:	4610      	mov	r0, r2
 8018a6c:	bd70      	pop	{r4, r5, r6, pc}
 8018a6e:	f081 0401 	eor.w	r4, r1, #1
 8018a72:	54c4      	strb	r4, [r0, r3]
 8018a74:	1c51      	adds	r1, r2, #1
 8018a76:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8018a7a:	2d2d      	cmp	r5, #45	; 0x2d
 8018a7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8018a80:	460a      	mov	r2, r1
 8018a82:	d006      	beq.n	8018a92 <__sccl+0x4e>
 8018a84:	2d5d      	cmp	r5, #93	; 0x5d
 8018a86:	d0f0      	beq.n	8018a6a <__sccl+0x26>
 8018a88:	b90d      	cbnz	r5, 8018a8e <__sccl+0x4a>
 8018a8a:	4632      	mov	r2, r6
 8018a8c:	e7ed      	b.n	8018a6a <__sccl+0x26>
 8018a8e:	462b      	mov	r3, r5
 8018a90:	e7ef      	b.n	8018a72 <__sccl+0x2e>
 8018a92:	780e      	ldrb	r6, [r1, #0]
 8018a94:	2e5d      	cmp	r6, #93	; 0x5d
 8018a96:	d0fa      	beq.n	8018a8e <__sccl+0x4a>
 8018a98:	42b3      	cmp	r3, r6
 8018a9a:	dcf8      	bgt.n	8018a8e <__sccl+0x4a>
 8018a9c:	3301      	adds	r3, #1
 8018a9e:	429e      	cmp	r6, r3
 8018aa0:	54c4      	strb	r4, [r0, r3]
 8018aa2:	dcfb      	bgt.n	8018a9c <__sccl+0x58>
 8018aa4:	3102      	adds	r1, #2
 8018aa6:	e7e6      	b.n	8018a76 <__sccl+0x32>

08018aa8 <strncmp>:
 8018aa8:	b510      	push	{r4, lr}
 8018aaa:	b16a      	cbz	r2, 8018ac8 <strncmp+0x20>
 8018aac:	3901      	subs	r1, #1
 8018aae:	1884      	adds	r4, r0, r2
 8018ab0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018ab4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d103      	bne.n	8018ac4 <strncmp+0x1c>
 8018abc:	42a0      	cmp	r0, r4
 8018abe:	d001      	beq.n	8018ac4 <strncmp+0x1c>
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d1f5      	bne.n	8018ab0 <strncmp+0x8>
 8018ac4:	1a98      	subs	r0, r3, r2
 8018ac6:	bd10      	pop	{r4, pc}
 8018ac8:	4610      	mov	r0, r2
 8018aca:	e7fc      	b.n	8018ac6 <strncmp+0x1e>

08018acc <_strtoul_l.isra.0>:
 8018acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ad0:	4680      	mov	r8, r0
 8018ad2:	4689      	mov	r9, r1
 8018ad4:	4692      	mov	sl, r2
 8018ad6:	461e      	mov	r6, r3
 8018ad8:	460f      	mov	r7, r1
 8018ada:	463d      	mov	r5, r7
 8018adc:	9808      	ldr	r0, [sp, #32]
 8018ade:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ae2:	f7fe fe4f 	bl	8017784 <__locale_ctype_ptr_l>
 8018ae6:	4420      	add	r0, r4
 8018ae8:	7843      	ldrb	r3, [r0, #1]
 8018aea:	f013 0308 	ands.w	r3, r3, #8
 8018aee:	d130      	bne.n	8018b52 <_strtoul_l.isra.0+0x86>
 8018af0:	2c2d      	cmp	r4, #45	; 0x2d
 8018af2:	d130      	bne.n	8018b56 <_strtoul_l.isra.0+0x8a>
 8018af4:	787c      	ldrb	r4, [r7, #1]
 8018af6:	1cbd      	adds	r5, r7, #2
 8018af8:	2101      	movs	r1, #1
 8018afa:	2e00      	cmp	r6, #0
 8018afc:	d05c      	beq.n	8018bb8 <_strtoul_l.isra.0+0xec>
 8018afe:	2e10      	cmp	r6, #16
 8018b00:	d109      	bne.n	8018b16 <_strtoul_l.isra.0+0x4a>
 8018b02:	2c30      	cmp	r4, #48	; 0x30
 8018b04:	d107      	bne.n	8018b16 <_strtoul_l.isra.0+0x4a>
 8018b06:	782b      	ldrb	r3, [r5, #0]
 8018b08:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018b0c:	2b58      	cmp	r3, #88	; 0x58
 8018b0e:	d14e      	bne.n	8018bae <_strtoul_l.isra.0+0xe2>
 8018b10:	786c      	ldrb	r4, [r5, #1]
 8018b12:	2610      	movs	r6, #16
 8018b14:	3502      	adds	r5, #2
 8018b16:	f04f 32ff 	mov.w	r2, #4294967295
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	fbb2 f2f6 	udiv	r2, r2, r6
 8018b20:	fb06 fc02 	mul.w	ip, r6, r2
 8018b24:	ea6f 0c0c 	mvn.w	ip, ip
 8018b28:	4618      	mov	r0, r3
 8018b2a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018b2e:	2f09      	cmp	r7, #9
 8018b30:	d817      	bhi.n	8018b62 <_strtoul_l.isra.0+0x96>
 8018b32:	463c      	mov	r4, r7
 8018b34:	42a6      	cmp	r6, r4
 8018b36:	dd23      	ble.n	8018b80 <_strtoul_l.isra.0+0xb4>
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	db1e      	blt.n	8018b7a <_strtoul_l.isra.0+0xae>
 8018b3c:	4282      	cmp	r2, r0
 8018b3e:	d31c      	bcc.n	8018b7a <_strtoul_l.isra.0+0xae>
 8018b40:	d101      	bne.n	8018b46 <_strtoul_l.isra.0+0x7a>
 8018b42:	45a4      	cmp	ip, r4
 8018b44:	db19      	blt.n	8018b7a <_strtoul_l.isra.0+0xae>
 8018b46:	fb00 4006 	mla	r0, r0, r6, r4
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018b50:	e7eb      	b.n	8018b2a <_strtoul_l.isra.0+0x5e>
 8018b52:	462f      	mov	r7, r5
 8018b54:	e7c1      	b.n	8018ada <_strtoul_l.isra.0+0xe>
 8018b56:	2c2b      	cmp	r4, #43	; 0x2b
 8018b58:	bf04      	itt	eq
 8018b5a:	1cbd      	addeq	r5, r7, #2
 8018b5c:	787c      	ldrbeq	r4, [r7, #1]
 8018b5e:	4619      	mov	r1, r3
 8018b60:	e7cb      	b.n	8018afa <_strtoul_l.isra.0+0x2e>
 8018b62:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018b66:	2f19      	cmp	r7, #25
 8018b68:	d801      	bhi.n	8018b6e <_strtoul_l.isra.0+0xa2>
 8018b6a:	3c37      	subs	r4, #55	; 0x37
 8018b6c:	e7e2      	b.n	8018b34 <_strtoul_l.isra.0+0x68>
 8018b6e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018b72:	2f19      	cmp	r7, #25
 8018b74:	d804      	bhi.n	8018b80 <_strtoul_l.isra.0+0xb4>
 8018b76:	3c57      	subs	r4, #87	; 0x57
 8018b78:	e7dc      	b.n	8018b34 <_strtoul_l.isra.0+0x68>
 8018b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8018b7e:	e7e5      	b.n	8018b4c <_strtoul_l.isra.0+0x80>
 8018b80:	2b00      	cmp	r3, #0
 8018b82:	da09      	bge.n	8018b98 <_strtoul_l.isra.0+0xcc>
 8018b84:	2322      	movs	r3, #34	; 0x22
 8018b86:	f8c8 3000 	str.w	r3, [r8]
 8018b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8018b8e:	f1ba 0f00 	cmp.w	sl, #0
 8018b92:	d107      	bne.n	8018ba4 <_strtoul_l.isra.0+0xd8>
 8018b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b98:	b101      	cbz	r1, 8018b9c <_strtoul_l.isra.0+0xd0>
 8018b9a:	4240      	negs	r0, r0
 8018b9c:	f1ba 0f00 	cmp.w	sl, #0
 8018ba0:	d0f8      	beq.n	8018b94 <_strtoul_l.isra.0+0xc8>
 8018ba2:	b10b      	cbz	r3, 8018ba8 <_strtoul_l.isra.0+0xdc>
 8018ba4:	f105 39ff 	add.w	r9, r5, #4294967295
 8018ba8:	f8ca 9000 	str.w	r9, [sl]
 8018bac:	e7f2      	b.n	8018b94 <_strtoul_l.isra.0+0xc8>
 8018bae:	2430      	movs	r4, #48	; 0x30
 8018bb0:	2e00      	cmp	r6, #0
 8018bb2:	d1b0      	bne.n	8018b16 <_strtoul_l.isra.0+0x4a>
 8018bb4:	2608      	movs	r6, #8
 8018bb6:	e7ae      	b.n	8018b16 <_strtoul_l.isra.0+0x4a>
 8018bb8:	2c30      	cmp	r4, #48	; 0x30
 8018bba:	d0a4      	beq.n	8018b06 <_strtoul_l.isra.0+0x3a>
 8018bbc:	260a      	movs	r6, #10
 8018bbe:	e7aa      	b.n	8018b16 <_strtoul_l.isra.0+0x4a>

08018bc0 <_strtoul_r>:
 8018bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bc2:	4c06      	ldr	r4, [pc, #24]	; (8018bdc <_strtoul_r+0x1c>)
 8018bc4:	4d06      	ldr	r5, [pc, #24]	; (8018be0 <_strtoul_r+0x20>)
 8018bc6:	6824      	ldr	r4, [r4, #0]
 8018bc8:	6a24      	ldr	r4, [r4, #32]
 8018bca:	2c00      	cmp	r4, #0
 8018bcc:	bf08      	it	eq
 8018bce:	462c      	moveq	r4, r5
 8018bd0:	9400      	str	r4, [sp, #0]
 8018bd2:	f7ff ff7b 	bl	8018acc <_strtoul_l.isra.0>
 8018bd6:	b003      	add	sp, #12
 8018bd8:	bd30      	pop	{r4, r5, pc}
 8018bda:	bf00      	nop
 8018bdc:	2000000c 	.word	0x2000000c
 8018be0:	20000070 	.word	0x20000070

08018be4 <__submore>:
 8018be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018be8:	460c      	mov	r4, r1
 8018bea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018bec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018bf0:	4299      	cmp	r1, r3
 8018bf2:	d11d      	bne.n	8018c30 <__submore+0x4c>
 8018bf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018bf8:	f7ff fa66 	bl	80180c8 <_malloc_r>
 8018bfc:	b918      	cbnz	r0, 8018c06 <__submore+0x22>
 8018bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8018c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018c10:	6360      	str	r0, [r4, #52]	; 0x34
 8018c12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018c16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018c1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018c1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018c22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018c26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018c2a:	6020      	str	r0, [r4, #0]
 8018c2c:	2000      	movs	r0, #0
 8018c2e:	e7e8      	b.n	8018c02 <__submore+0x1e>
 8018c30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018c32:	0077      	lsls	r7, r6, #1
 8018c34:	463a      	mov	r2, r7
 8018c36:	f000 f837 	bl	8018ca8 <_realloc_r>
 8018c3a:	4605      	mov	r5, r0
 8018c3c:	2800      	cmp	r0, #0
 8018c3e:	d0de      	beq.n	8018bfe <__submore+0x1a>
 8018c40:	eb00 0806 	add.w	r8, r0, r6
 8018c44:	4601      	mov	r1, r0
 8018c46:	4632      	mov	r2, r6
 8018c48:	4640      	mov	r0, r8
 8018c4a:	f7fe fdd7 	bl	80177fc <memcpy>
 8018c4e:	f8c4 8000 	str.w	r8, [r4]
 8018c52:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8018c56:	e7e9      	b.n	8018c2c <__submore+0x48>

08018c58 <__ascii_wctomb>:
 8018c58:	b149      	cbz	r1, 8018c6e <__ascii_wctomb+0x16>
 8018c5a:	2aff      	cmp	r2, #255	; 0xff
 8018c5c:	bf85      	ittet	hi
 8018c5e:	238a      	movhi	r3, #138	; 0x8a
 8018c60:	6003      	strhi	r3, [r0, #0]
 8018c62:	700a      	strbls	r2, [r1, #0]
 8018c64:	f04f 30ff 	movhi.w	r0, #4294967295
 8018c68:	bf98      	it	ls
 8018c6a:	2001      	movls	r0, #1
 8018c6c:	4770      	bx	lr
 8018c6e:	4608      	mov	r0, r1
 8018c70:	4770      	bx	lr

08018c72 <memmove>:
 8018c72:	4288      	cmp	r0, r1
 8018c74:	b510      	push	{r4, lr}
 8018c76:	eb01 0302 	add.w	r3, r1, r2
 8018c7a:	d807      	bhi.n	8018c8c <memmove+0x1a>
 8018c7c:	1e42      	subs	r2, r0, #1
 8018c7e:	4299      	cmp	r1, r3
 8018c80:	d00a      	beq.n	8018c98 <memmove+0x26>
 8018c82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c86:	f802 4f01 	strb.w	r4, [r2, #1]!
 8018c8a:	e7f8      	b.n	8018c7e <memmove+0xc>
 8018c8c:	4283      	cmp	r3, r0
 8018c8e:	d9f5      	bls.n	8018c7c <memmove+0xa>
 8018c90:	1881      	adds	r1, r0, r2
 8018c92:	1ad2      	subs	r2, r2, r3
 8018c94:	42d3      	cmn	r3, r2
 8018c96:	d100      	bne.n	8018c9a <memmove+0x28>
 8018c98:	bd10      	pop	{r4, pc}
 8018c9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018c9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8018ca2:	e7f7      	b.n	8018c94 <memmove+0x22>

08018ca4 <__malloc_lock>:
 8018ca4:	4770      	bx	lr

08018ca6 <__malloc_unlock>:
 8018ca6:	4770      	bx	lr

08018ca8 <_realloc_r>:
 8018ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018caa:	4607      	mov	r7, r0
 8018cac:	4614      	mov	r4, r2
 8018cae:	460e      	mov	r6, r1
 8018cb0:	b921      	cbnz	r1, 8018cbc <_realloc_r+0x14>
 8018cb2:	4611      	mov	r1, r2
 8018cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018cb8:	f7ff ba06 	b.w	80180c8 <_malloc_r>
 8018cbc:	b922      	cbnz	r2, 8018cc8 <_realloc_r+0x20>
 8018cbe:	f7ff f9b5 	bl	801802c <_free_r>
 8018cc2:	4625      	mov	r5, r4
 8018cc4:	4628      	mov	r0, r5
 8018cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cc8:	f000 f814 	bl	8018cf4 <_malloc_usable_size_r>
 8018ccc:	42a0      	cmp	r0, r4
 8018cce:	d20f      	bcs.n	8018cf0 <_realloc_r+0x48>
 8018cd0:	4621      	mov	r1, r4
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	f7ff f9f8 	bl	80180c8 <_malloc_r>
 8018cd8:	4605      	mov	r5, r0
 8018cda:	2800      	cmp	r0, #0
 8018cdc:	d0f2      	beq.n	8018cc4 <_realloc_r+0x1c>
 8018cde:	4631      	mov	r1, r6
 8018ce0:	4622      	mov	r2, r4
 8018ce2:	f7fe fd8b 	bl	80177fc <memcpy>
 8018ce6:	4631      	mov	r1, r6
 8018ce8:	4638      	mov	r0, r7
 8018cea:	f7ff f99f 	bl	801802c <_free_r>
 8018cee:	e7e9      	b.n	8018cc4 <_realloc_r+0x1c>
 8018cf0:	4635      	mov	r5, r6
 8018cf2:	e7e7      	b.n	8018cc4 <_realloc_r+0x1c>

08018cf4 <_malloc_usable_size_r>:
 8018cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cf8:	1f18      	subs	r0, r3, #4
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	bfbc      	itt	lt
 8018cfe:	580b      	ldrlt	r3, [r1, r0]
 8018d00:	18c0      	addlt	r0, r0, r3
 8018d02:	4770      	bx	lr

08018d04 <_init>:
 8018d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d06:	bf00      	nop
 8018d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d0a:	bc08      	pop	{r3}
 8018d0c:	469e      	mov	lr, r3
 8018d0e:	4770      	bx	lr

08018d10 <_fini>:
 8018d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d12:	bf00      	nop
 8018d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d16:	bc08      	pop	{r3}
 8018d18:	469e      	mov	lr, r3
 8018d1a:	4770      	bx	lr
